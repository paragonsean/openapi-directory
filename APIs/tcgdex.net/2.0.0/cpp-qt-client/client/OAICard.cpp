/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_abilities_isSet = false;
    m_abilities_isValid = false;

    m_attacks_isSet = false;
    m_attacks_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dex_id_isSet = false;
    m_dex_id_isValid = false;

    m_energy_type_isSet = false;
    m_energy_type_isValid = false;

    m_evolve_from_isSet = false;
    m_evolve_from_isValid = false;

    m_hp_isSet = false;
    m_hp_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_illustrator_isSet = false;
    m_illustrator_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_legal_isSet = false;
    m_legal_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rarity_isSet = false;
    m_rarity_isValid = false;

    m_regulation_mark_isSet = false;
    m_regulation_mark_isValid = false;

    m_resistances_isSet = false;
    m_resistances_isValid = false;

    m_retreat_isSet = false;
    m_retreat_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;

    m_trainer_type_isSet = false;
    m_trainer_type_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;

    m_weaknesses_isSet = false;
    m_weaknesses_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_abilities_isValid = ::OpenAPI::fromJsonValue(m_abilities, json[QString("abilities")]);
    m_abilities_isSet = !json[QString("abilities")].isNull() && m_abilities_isValid;

    m_attacks_isValid = ::OpenAPI::fromJsonValue(m_attacks, json[QString("attacks")]);
    m_attacks_isSet = !json[QString("attacks")].isNull() && m_attacks_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dex_id_isValid = ::OpenAPI::fromJsonValue(m_dex_id, json[QString("dexId")]);
    m_dex_id_isSet = !json[QString("dexId")].isNull() && m_dex_id_isValid;

    m_energy_type_isValid = ::OpenAPI::fromJsonValue(m_energy_type, json[QString("energyType")]);
    m_energy_type_isSet = !json[QString("energyType")].isNull() && m_energy_type_isValid;

    m_evolve_from_isValid = ::OpenAPI::fromJsonValue(m_evolve_from, json[QString("evolveFrom")]);
    m_evolve_from_isSet = !json[QString("evolveFrom")].isNull() && m_evolve_from_isValid;

    m_hp_isValid = ::OpenAPI::fromJsonValue(m_hp, json[QString("hp")]);
    m_hp_isSet = !json[QString("hp")].isNull() && m_hp_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_illustrator_isValid = ::OpenAPI::fromJsonValue(m_illustrator, json[QString("illustrator")]);
    m_illustrator_isSet = !json[QString("illustrator")].isNull() && m_illustrator_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_legal_isValid = ::OpenAPI::fromJsonValue(m_legal, json[QString("legal")]);
    m_legal_isSet = !json[QString("legal")].isNull() && m_legal_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rarity_isValid = ::OpenAPI::fromJsonValue(m_rarity, json[QString("rarity")]);
    m_rarity_isSet = !json[QString("rarity")].isNull() && m_rarity_isValid;

    m_regulation_mark_isValid = ::OpenAPI::fromJsonValue(m_regulation_mark, json[QString("regulationMark")]);
    m_regulation_mark_isSet = !json[QString("regulationMark")].isNull() && m_regulation_mark_isValid;

    if(json["resistances"].isArray()){
        auto arr = json["resistances"].toArray();
        m_resistances_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIWeakRes_inner> item;
                m_resistances_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_resistances_isSet = !jval.isNull() && m_resistances_isValid;
                m_resistances.push_back(item);
            }
        }
    }

    m_retreat_isValid = ::OpenAPI::fromJsonValue(m_retreat, json[QString("retreat")]);
    m_retreat_isSet = !json[QString("retreat")].isNull() && m_retreat_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("suffix")]);
    m_suffix_isSet = !json[QString("suffix")].isNull() && m_suffix_isValid;

    m_trainer_type_isValid = ::OpenAPI::fromJsonValue(m_trainer_type, json[QString("trainerType")]);
    m_trainer_type_isSet = !json[QString("trainerType")].isNull() && m_trainer_type_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;

    if(json["weaknesses"].isArray()){
        auto arr = json["weaknesses"].toArray();
        m_weaknesses_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIWeakRes_inner> item;
                m_weaknesses_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_weaknesses_isSet = !jval.isNull() && m_weaknesses_isValid;
                m_weaknesses.push_back(item);
            }
        }
    }
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_abilities.size() > 0) {
        obj.insert(QString("abilities"), ::OpenAPI::toJsonValue(m_abilities));
    }
    if (m_attacks.size() > 0) {
        obj.insert(QString("attacks"), ::OpenAPI::toJsonValue(m_attacks));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dex_id.size() > 0) {
        obj.insert(QString("dexId"), ::OpenAPI::toJsonValue(m_dex_id));
    }
    if (m_energy_type_isSet) {
        obj.insert(QString("energyType"), ::OpenAPI::toJsonValue(m_energy_type));
    }
    if (m_evolve_from_isSet) {
        obj.insert(QString("evolveFrom"), ::OpenAPI::toJsonValue(m_evolve_from));
    }
    if (m_hp_isSet) {
        obj.insert(QString("hp"), ::OpenAPI::toJsonValue(m_hp));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_illustrator_isSet) {
        obj.insert(QString("illustrator"), ::OpenAPI::toJsonValue(m_illustrator));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_legal.isSet()) {
        obj.insert(QString("legal"), ::OpenAPI::toJsonValue(m_legal));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rarity_isSet) {
        obj.insert(QString("rarity"), ::OpenAPI::toJsonValue(m_rarity));
    }
    if (m_regulation_mark_isSet) {
        obj.insert(QString("regulationMark"), ::OpenAPI::toJsonValue(m_regulation_mark));
    }
    if (m_resistances.size() > 0) {
        
        obj.insert(QString("resistances"), toJsonValue(m_resistances));
    }
    if (m_retreat_isSet) {
        obj.insert(QString("retreat"), ::OpenAPI::toJsonValue(m_retreat));
    }
    if (m_r_set.isSet()) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    if (m_trainer_type_isSet) {
        obj.insert(QString("trainerType"), ::OpenAPI::toJsonValue(m_trainer_type));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_variants.isSet()) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    if (m_weaknesses.size() > 0) {
        
        obj.insert(QString("weaknesses"), toJsonValue(m_weaknesses));
    }
    return obj;
}

QList<OAICard_abilities_inner> OAICard::getAbilities() const {
    return m_abilities;
}
void OAICard::setAbilities(const QList<OAICard_abilities_inner> &abilities) {
    m_abilities = abilities;
    m_abilities_isSet = true;
}

bool OAICard::is_abilities_Set() const{
    return m_abilities_isSet;
}

bool OAICard::is_abilities_Valid() const{
    return m_abilities_isValid;
}

QList<OAICard_attacks_inner> OAICard::getAttacks() const {
    return m_attacks;
}
void OAICard::setAttacks(const QList<OAICard_attacks_inner> &attacks) {
    m_attacks = attacks;
    m_attacks_isSet = true;
}

bool OAICard::is_attacks_Set() const{
    return m_attacks_isSet;
}

bool OAICard::is_attacks_Valid() const{
    return m_attacks_isValid;
}

QString OAICard::getCategory() const {
    return m_category;
}
void OAICard::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICard::is_category_Set() const{
    return m_category_isSet;
}

bool OAICard::is_category_Valid() const{
    return m_category_isValid;
}

QString OAICard::getDescription() const {
    return m_description;
}
void OAICard::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICard::is_description_Set() const{
    return m_description_isSet;
}

bool OAICard::is_description_Valid() const{
    return m_description_isValid;
}

QList<double> OAICard::getDexId() const {
    return m_dex_id;
}
void OAICard::setDexId(const QList<double> &dex_id) {
    m_dex_id = dex_id;
    m_dex_id_isSet = true;
}

bool OAICard::is_dex_id_Set() const{
    return m_dex_id_isSet;
}

bool OAICard::is_dex_id_Valid() const{
    return m_dex_id_isValid;
}

QString OAICard::getEnergyType() const {
    return m_energy_type;
}
void OAICard::setEnergyType(const QString &energy_type) {
    m_energy_type = energy_type;
    m_energy_type_isSet = true;
}

bool OAICard::is_energy_type_Set() const{
    return m_energy_type_isSet;
}

bool OAICard::is_energy_type_Valid() const{
    return m_energy_type_isValid;
}

QString OAICard::getEvolveFrom() const {
    return m_evolve_from;
}
void OAICard::setEvolveFrom(const QString &evolve_from) {
    m_evolve_from = evolve_from;
    m_evolve_from_isSet = true;
}

bool OAICard::is_evolve_from_Set() const{
    return m_evolve_from_isSet;
}

bool OAICard::is_evolve_from_Valid() const{
    return m_evolve_from_isValid;
}

double OAICard::getHp() const {
    return m_hp;
}
void OAICard::setHp(const double &hp) {
    m_hp = hp;
    m_hp_isSet = true;
}

bool OAICard::is_hp_Set() const{
    return m_hp_isSet;
}

bool OAICard::is_hp_Valid() const{
    return m_hp_isValid;
}

QString OAICard::getId() const {
    return m_id;
}
void OAICard::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICard::is_id_Set() const{
    return m_id_isSet;
}

bool OAICard::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICard::getIllustrator() const {
    return m_illustrator;
}
void OAICard::setIllustrator(const QString &illustrator) {
    m_illustrator = illustrator;
    m_illustrator_isSet = true;
}

bool OAICard::is_illustrator_Set() const{
    return m_illustrator_isSet;
}

bool OAICard::is_illustrator_Valid() const{
    return m_illustrator_isValid;
}

QString OAICard::getImage() const {
    return m_image;
}
void OAICard::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAICard::is_image_Set() const{
    return m_image_isSet;
}

bool OAICard::is_image_Valid() const{
    return m_image_isValid;
}

OAICard_item OAICard::getItem() const {
    return m_item;
}
void OAICard::setItem(const OAICard_item &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAICard::is_item_Set() const{
    return m_item_isSet;
}

bool OAICard::is_item_Valid() const{
    return m_item_isValid;
}

OAICard_legal OAICard::getLegal() const {
    return m_legal;
}
void OAICard::setLegal(const OAICard_legal &legal) {
    m_legal = legal;
    m_legal_isSet = true;
}

bool OAICard::is_legal_Set() const{
    return m_legal_isSet;
}

bool OAICard::is_legal_Valid() const{
    return m_legal_isValid;
}

double OAICard::getLevel() const {
    return m_level;
}
void OAICard::setLevel(const double &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAICard::is_level_Set() const{
    return m_level_isSet;
}

bool OAICard::is_level_Valid() const{
    return m_level_isValid;
}

QString OAICard::getLocalId() const {
    return m_local_id;
}
void OAICard::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAICard::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAICard::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAICard::getName() const {
    return m_name;
}
void OAICard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICard::is_name_Set() const{
    return m_name_isSet;
}

bool OAICard::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICard::getRarity() const {
    return m_rarity;
}
void OAICard::setRarity(const QString &rarity) {
    m_rarity = rarity;
    m_rarity_isSet = true;
}

bool OAICard::is_rarity_Set() const{
    return m_rarity_isSet;
}

bool OAICard::is_rarity_Valid() const{
    return m_rarity_isValid;
}

QString OAICard::getRegulationMark() const {
    return m_regulation_mark;
}
void OAICard::setRegulationMark(const QString &regulation_mark) {
    m_regulation_mark = regulation_mark;
    m_regulation_mark_isSet = true;
}

bool OAICard::is_regulation_mark_Set() const{
    return m_regulation_mark_isSet;
}

bool OAICard::is_regulation_mark_Valid() const{
    return m_regulation_mark_isValid;
}

QList<QList> OAICard::getResistances() const {
    return m_resistances;
}
void OAICard::setResistances(const QList<QList> &resistances) {
    m_resistances = resistances;
    m_resistances_isSet = true;
}

bool OAICard::is_resistances_Set() const{
    return m_resistances_isSet;
}

bool OAICard::is_resistances_Valid() const{
    return m_resistances_isValid;
}

double OAICard::getRetreat() const {
    return m_retreat;
}
void OAICard::setRetreat(const double &retreat) {
    m_retreat = retreat;
    m_retreat_isSet = true;
}

bool OAICard::is_retreat_Set() const{
    return m_retreat_isSet;
}

bool OAICard::is_retreat_Valid() const{
    return m_retreat_isValid;
}

OAISetResume OAICard::getRSet() const {
    return m_r_set;
}
void OAICard::setRSet(const OAISetResume &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAICard::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAICard::is_r_set_Valid() const{
    return m_r_set_isValid;
}

QString OAICard::getStage() const {
    return m_stage;
}
void OAICard::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAICard::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAICard::is_stage_Valid() const{
    return m_stage_isValid;
}

QString OAICard::getSuffix() const {
    return m_suffix;
}
void OAICard::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAICard::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAICard::is_suffix_Valid() const{
    return m_suffix_isValid;
}

QString OAICard::getTrainerType() const {
    return m_trainer_type;
}
void OAICard::setTrainerType(const QString &trainer_type) {
    m_trainer_type = trainer_type;
    m_trainer_type_isSet = true;
}

bool OAICard::is_trainer_type_Set() const{
    return m_trainer_type_isSet;
}

bool OAICard::is_trainer_type_Valid() const{
    return m_trainer_type_isValid;
}

QList<QString> OAICard::getTypes() const {
    return m_types;
}
void OAICard::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAICard::is_types_Set() const{
    return m_types_isSet;
}

bool OAICard::is_types_Valid() const{
    return m_types_isValid;
}

OAICard_variants OAICard::getVariants() const {
    return m_variants;
}
void OAICard::setVariants(const OAICard_variants &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAICard::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAICard::is_variants_Valid() const{
    return m_variants_isValid;
}

QList<QList> OAICard::getWeaknesses() const {
    return m_weaknesses;
}
void OAICard::setWeaknesses(const QList<QList> &weaknesses) {
    m_weaknesses = weaknesses;
    m_weaknesses_isSet = true;
}

bool OAICard::is_weaknesses_Set() const{
    return m_weaknesses_isSet;
}

bool OAICard::is_weaknesses_Valid() const{
    return m_weaknesses_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attacks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dex_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evolve_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_illustrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regulation_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resistances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retreat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trainer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weaknesses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_id_isValid && m_legal_isValid && m_local_id_isValid && m_name_isValid && m_rarity_isValid && m_r_set_isValid && true;
}

} // namespace OpenAPI
