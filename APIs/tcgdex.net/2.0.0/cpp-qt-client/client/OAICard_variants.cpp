/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard_variants.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard_variants::OAICard_variants(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard_variants::OAICard_variants() {
    this->initializeModel();
}

OAICard_variants::~OAICard_variants() {}

void OAICard_variants::initializeModel() {

    m_first_edition_isSet = false;
    m_first_edition_isValid = false;

    m_holo_isSet = false;
    m_holo_isValid = false;

    m_normal_isSet = false;
    m_normal_isValid = false;

    m_reverse_isSet = false;
    m_reverse_isValid = false;

    m_w_promo_isSet = false;
    m_w_promo_isValid = false;
}

void OAICard_variants::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard_variants::fromJsonObject(QJsonObject json) {

    m_first_edition_isValid = ::OpenAPI::fromJsonValue(m_first_edition, json[QString("firstEdition")]);
    m_first_edition_isSet = !json[QString("firstEdition")].isNull() && m_first_edition_isValid;

    m_holo_isValid = ::OpenAPI::fromJsonValue(m_holo, json[QString("holo")]);
    m_holo_isSet = !json[QString("holo")].isNull() && m_holo_isValid;

    m_normal_isValid = ::OpenAPI::fromJsonValue(m_normal, json[QString("normal")]);
    m_normal_isSet = !json[QString("normal")].isNull() && m_normal_isValid;

    m_reverse_isValid = ::OpenAPI::fromJsonValue(m_reverse, json[QString("reverse")]);
    m_reverse_isSet = !json[QString("reverse")].isNull() && m_reverse_isValid;

    m_w_promo_isValid = ::OpenAPI::fromJsonValue(m_w_promo, json[QString("wPromo")]);
    m_w_promo_isSet = !json[QString("wPromo")].isNull() && m_w_promo_isValid;
}

QString OAICard_variants::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard_variants::asJsonObject() const {
    QJsonObject obj;
    if (m_first_edition_isSet) {
        obj.insert(QString("firstEdition"), ::OpenAPI::toJsonValue(m_first_edition));
    }
    if (m_holo_isSet) {
        obj.insert(QString("holo"), ::OpenAPI::toJsonValue(m_holo));
    }
    if (m_normal_isSet) {
        obj.insert(QString("normal"), ::OpenAPI::toJsonValue(m_normal));
    }
    if (m_reverse_isSet) {
        obj.insert(QString("reverse"), ::OpenAPI::toJsonValue(m_reverse));
    }
    if (m_w_promo_isSet) {
        obj.insert(QString("wPromo"), ::OpenAPI::toJsonValue(m_w_promo));
    }
    return obj;
}

bool OAICard_variants::isFirstEdition() const {
    return m_first_edition;
}
void OAICard_variants::setFirstEdition(const bool &first_edition) {
    m_first_edition = first_edition;
    m_first_edition_isSet = true;
}

bool OAICard_variants::is_first_edition_Set() const{
    return m_first_edition_isSet;
}

bool OAICard_variants::is_first_edition_Valid() const{
    return m_first_edition_isValid;
}

bool OAICard_variants::isHolo() const {
    return m_holo;
}
void OAICard_variants::setHolo(const bool &holo) {
    m_holo = holo;
    m_holo_isSet = true;
}

bool OAICard_variants::is_holo_Set() const{
    return m_holo_isSet;
}

bool OAICard_variants::is_holo_Valid() const{
    return m_holo_isValid;
}

bool OAICard_variants::isNormal() const {
    return m_normal;
}
void OAICard_variants::setNormal(const bool &normal) {
    m_normal = normal;
    m_normal_isSet = true;
}

bool OAICard_variants::is_normal_Set() const{
    return m_normal_isSet;
}

bool OAICard_variants::is_normal_Valid() const{
    return m_normal_isValid;
}

bool OAICard_variants::isReverse() const {
    return m_reverse;
}
void OAICard_variants::setReverse(const bool &reverse) {
    m_reverse = reverse;
    m_reverse_isSet = true;
}

bool OAICard_variants::is_reverse_Set() const{
    return m_reverse_isSet;
}

bool OAICard_variants::is_reverse_Valid() const{
    return m_reverse_isValid;
}

bool OAICard_variants::isWPromo() const {
    return m_w_promo;
}
void OAICard_variants::setWPromo(const bool &w_promo) {
    m_w_promo = w_promo;
    m_w_promo_isSet = true;
}

bool OAICard_variants::is_w_promo_Set() const{
    return m_w_promo_isSet;
}

bool OAICard_variants::is_w_promo_Valid() const{
    return m_w_promo_isValid;
}

bool OAICard_variants::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_w_promo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard_variants::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_edition_isValid && m_holo_isValid && m_normal_isValid && m_reverse_isValid && m_w_promo_isValid && true;
}

} // namespace OpenAPI
