/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFiltersApi_H
#define OAI_OAIFiltersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICardResume.h"
#include "OAISerie.h"
#include "OAISerieResume.h"
#include "OAISet.h"
#include "OAISetResume.h"
#include "OAIStringEndpoint.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFiltersApi : public QObject {
    Q_OBJECT

public:
    OAIFiltersApi(const int timeOut = 0);
    ~OAIFiltersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category QString [required]
    */
    virtual void categoriesCategoryGet(const QString &category);


    virtual void categoriesGet();

    /**
    * @param[in]  dex_id QString [required]
    */
    virtual void dexIdsDexIdGet(const QString &dex_id);


    virtual void dexIdsGet();

    /**
    * @param[in]  energy_type QString [required]
    */
    virtual void energyTypesEnergyTypeGet(const QString &energy_type);


    virtual void energyTypesGet();


    virtual void hpGet();

    /**
    * @param[in]  hp QString [required]
    */
    virtual void hpHpGet(const QString &hp);


    virtual void illustratorsGet();

    /**
    * @param[in]  illustrator QString [required]
    */
    virtual void illustratorsIllustratorGet(const QString &illustrator);


    virtual void raritiesGet();

    /**
    * @param[in]  rarity QString [required]
    */
    virtual void raritiesRarityGet(const QString &rarity);


    virtual void regulationMarksGet();

    /**
    * @param[in]  regulation_mark QString [required]
    */
    virtual void regulationMarksRegulationMarkGet(const QString &regulation_mark);


    virtual void retreatsGet();

    /**
    * @param[in]  retreat QString [required]
    */
    virtual void retreatsRetreatGet(const QString &retreat);


    virtual void seriesGet();

    /**
    * @param[in]  serie QString [required]
    */
    virtual void seriesSerieGet(const QString &serie);


    virtual void setsGet();

    /**
    * @param[in]  r_set QString [required]
    */
    virtual void setsSetGet(const QString &r_set);


    virtual void stagesGet();

    /**
    * @param[in]  stage QString [required]
    */
    virtual void stagesStageGet(const QString &stage);


    virtual void suffixesGet();

    /**
    * @param[in]  suffix QString [required]
    */
    virtual void suffixesSuffixGet(const QString &suffix);


    virtual void trainerTypesGet();

    /**
    * @param[in]  trainer_type QString [required]
    */
    virtual void trainerTypesTrainerTypeGet(const QString &trainer_type);


    virtual void typesGet();

    /**
    * @param[in]  type QString [required]
    */
    virtual void typesTypeGet(const QString &type);


    virtual void variantsGet();

    /**
    * @param[in]  variant QString [required]
    */
    virtual void variantsVariantGet(const QString &variant);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void categoriesCategoryGetCallback(OAIHttpRequestWorker *worker);
    void categoriesGetCallback(OAIHttpRequestWorker *worker);
    void dexIdsDexIdGetCallback(OAIHttpRequestWorker *worker);
    void dexIdsGetCallback(OAIHttpRequestWorker *worker);
    void energyTypesEnergyTypeGetCallback(OAIHttpRequestWorker *worker);
    void energyTypesGetCallback(OAIHttpRequestWorker *worker);
    void hpGetCallback(OAIHttpRequestWorker *worker);
    void hpHpGetCallback(OAIHttpRequestWorker *worker);
    void illustratorsGetCallback(OAIHttpRequestWorker *worker);
    void illustratorsIllustratorGetCallback(OAIHttpRequestWorker *worker);
    void raritiesGetCallback(OAIHttpRequestWorker *worker);
    void raritiesRarityGetCallback(OAIHttpRequestWorker *worker);
    void regulationMarksGetCallback(OAIHttpRequestWorker *worker);
    void regulationMarksRegulationMarkGetCallback(OAIHttpRequestWorker *worker);
    void retreatsGetCallback(OAIHttpRequestWorker *worker);
    void retreatsRetreatGetCallback(OAIHttpRequestWorker *worker);
    void seriesGetCallback(OAIHttpRequestWorker *worker);
    void seriesSerieGetCallback(OAIHttpRequestWorker *worker);
    void setsGetCallback(OAIHttpRequestWorker *worker);
    void setsSetGetCallback(OAIHttpRequestWorker *worker);
    void stagesGetCallback(OAIHttpRequestWorker *worker);
    void stagesStageGetCallback(OAIHttpRequestWorker *worker);
    void suffixesGetCallback(OAIHttpRequestWorker *worker);
    void suffixesSuffixGetCallback(OAIHttpRequestWorker *worker);
    void trainerTypesGetCallback(OAIHttpRequestWorker *worker);
    void trainerTypesTrainerTypeGetCallback(OAIHttpRequestWorker *worker);
    void typesGetCallback(OAIHttpRequestWorker *worker);
    void typesTypeGetCallback(OAIHttpRequestWorker *worker);
    void variantsGetCallback(OAIHttpRequestWorker *worker);
    void variantsVariantGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void categoriesCategoryGetSignal(OAIStringEndpoint summary);
    void categoriesGetSignal(QList<QString> summary);
    void dexIdsDexIdGetSignal(QList<OAICardResume> summary);
    void dexIdsGetSignal(QList<QString> summary);
    void energyTypesEnergyTypeGetSignal(QList<OAICardResume> summary);
    void energyTypesGetSignal(QList<QString> summary);
    void hpGetSignal(QList<QString> summary);
    void hpHpGetSignal(OAIStringEndpoint summary);
    void illustratorsGetSignal(QList<QString> summary);
    void illustratorsIllustratorGetSignal(OAIStringEndpoint summary);
    void raritiesGetSignal(QList<QString> summary);
    void raritiesRarityGetSignal(OAIStringEndpoint summary);
    void regulationMarksGetSignal(QList<QString> summary);
    void regulationMarksRegulationMarkGetSignal(QList<OAICardResume> summary);
    void retreatsGetSignal(QList<QString> summary);
    void retreatsRetreatGetSignal(OAIStringEndpoint summary);
    void seriesGetSignal(QList<OAISerieResume> summary);
    void seriesSerieGetSignal(OAISerie summary);
    void setsGetSignal(QList<OAISetResume> summary);
    void setsSetGetSignal(OAISet summary);
    void stagesGetSignal(QList<QString> summary);
    void stagesStageGetSignal(QList<OAICardResume> summary);
    void suffixesGetSignal(QList<QString> summary);
    void suffixesSuffixGetSignal(QList<OAICardResume> summary);
    void trainerTypesGetSignal(QList<QString> summary);
    void trainerTypesTrainerTypeGetSignal(QList<OAICardResume> summary);
    void typesGetSignal(QList<QString> summary);
    void typesTypeGetSignal(QList<OAICardResume> summary);
    void variantsGetSignal(QList<QString> summary);
    void variantsVariantGetSignal(QList<OAICardResume> summary);


    void categoriesCategoryGetSignalFull(OAIHttpRequestWorker *worker, OAIStringEndpoint summary);
    void categoriesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void dexIdsDexIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void dexIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void energyTypesEnergyTypeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void energyTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void hpGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void hpHpGetSignalFull(OAIHttpRequestWorker *worker, OAIStringEndpoint summary);
    void illustratorsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void illustratorsIllustratorGetSignalFull(OAIHttpRequestWorker *worker, OAIStringEndpoint summary);
    void raritiesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void raritiesRarityGetSignalFull(OAIHttpRequestWorker *worker, OAIStringEndpoint summary);
    void regulationMarksGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void regulationMarksRegulationMarkGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void retreatsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void retreatsRetreatGetSignalFull(OAIHttpRequestWorker *worker, OAIStringEndpoint summary);
    void seriesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISerieResume> summary);
    void seriesSerieGetSignalFull(OAIHttpRequestWorker *worker, OAISerie summary);
    void setsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISetResume> summary);
    void setsSetGetSignalFull(OAIHttpRequestWorker *worker, OAISet summary);
    void stagesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void stagesStageGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void suffixesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void suffixesSuffixGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void trainerTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void trainerTypesTrainerTypeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void typesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void typesTypeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);
    void variantsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void variantsVariantGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICardResume> summary);

    Q_DECL_DEPRECATED_X("Use categoriesCategoryGetSignalError() instead")
    void categoriesCategoryGetSignalE(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesCategoryGetSignalError(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesGetSignalError() instead")
    void categoriesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dexIdsDexIdGetSignalError() instead")
    void dexIdsDexIdGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dexIdsDexIdGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dexIdsGetSignalError() instead")
    void dexIdsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dexIdsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use energyTypesEnergyTypeGetSignalError() instead")
    void energyTypesEnergyTypeGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void energyTypesEnergyTypeGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use energyTypesGetSignalError() instead")
    void energyTypesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void energyTypesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hpGetSignalError() instead")
    void hpGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hpGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hpHpGetSignalError() instead")
    void hpHpGetSignalE(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hpHpGetSignalError(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use illustratorsGetSignalError() instead")
    void illustratorsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void illustratorsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use illustratorsIllustratorGetSignalError() instead")
    void illustratorsIllustratorGetSignalE(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void illustratorsIllustratorGetSignalError(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use raritiesGetSignalError() instead")
    void raritiesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void raritiesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use raritiesRarityGetSignalError() instead")
    void raritiesRarityGetSignalE(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void raritiesRarityGetSignalError(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulationMarksGetSignalError() instead")
    void regulationMarksGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulationMarksGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulationMarksRegulationMarkGetSignalError() instead")
    void regulationMarksRegulationMarkGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulationMarksRegulationMarkGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retreatsGetSignalError() instead")
    void retreatsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retreatsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retreatsRetreatGetSignalError() instead")
    void retreatsRetreatGetSignalE(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retreatsRetreatGetSignalError(OAIStringEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriesGetSignalError() instead")
    void seriesGetSignalE(QList<OAISerieResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seriesGetSignalError(QList<OAISerieResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriesSerieGetSignalError() instead")
    void seriesSerieGetSignalE(OAISerie summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seriesSerieGetSignalError(OAISerie summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setsGetSignalError() instead")
    void setsGetSignalE(QList<OAISetResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setsGetSignalError(QList<OAISetResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setsSetGetSignalError() instead")
    void setsSetGetSignalE(OAISet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setsSetGetSignalError(OAISet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stagesGetSignalError() instead")
    void stagesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stagesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stagesStageGetSignalError() instead")
    void stagesStageGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stagesStageGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suffixesGetSignalError() instead")
    void suffixesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suffixesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suffixesSuffixGetSignalError() instead")
    void suffixesSuffixGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suffixesSuffixGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainerTypesGetSignalError() instead")
    void trainerTypesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trainerTypesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainerTypesTrainerTypeGetSignalError() instead")
    void trainerTypesTrainerTypeGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trainerTypesTrainerTypeGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use typesGetSignalError() instead")
    void typesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void typesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use typesTypeGetSignalError() instead")
    void typesTypeGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void typesTypeGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variantsGetSignalError() instead")
    void variantsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void variantsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variantsVariantGetSignalError() instead")
    void variantsVariantGetSignalE(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void variantsVariantGetSignalError(QList<OAICardResume> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use categoriesCategoryGetSignalErrorFull() instead")
    void categoriesCategoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesCategoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesGetSignalErrorFull() instead")
    void categoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dexIdsDexIdGetSignalErrorFull() instead")
    void dexIdsDexIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dexIdsDexIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dexIdsGetSignalErrorFull() instead")
    void dexIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dexIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use energyTypesEnergyTypeGetSignalErrorFull() instead")
    void energyTypesEnergyTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void energyTypesEnergyTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use energyTypesGetSignalErrorFull() instead")
    void energyTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void energyTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hpGetSignalErrorFull() instead")
    void hpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hpHpGetSignalErrorFull() instead")
    void hpHpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hpHpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use illustratorsGetSignalErrorFull() instead")
    void illustratorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void illustratorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use illustratorsIllustratorGetSignalErrorFull() instead")
    void illustratorsIllustratorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void illustratorsIllustratorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use raritiesGetSignalErrorFull() instead")
    void raritiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void raritiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use raritiesRarityGetSignalErrorFull() instead")
    void raritiesRarityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void raritiesRarityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulationMarksGetSignalErrorFull() instead")
    void regulationMarksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulationMarksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulationMarksRegulationMarkGetSignalErrorFull() instead")
    void regulationMarksRegulationMarkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulationMarksRegulationMarkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retreatsGetSignalErrorFull() instead")
    void retreatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retreatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retreatsRetreatGetSignalErrorFull() instead")
    void retreatsRetreatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retreatsRetreatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriesGetSignalErrorFull() instead")
    void seriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriesSerieGetSignalErrorFull() instead")
    void seriesSerieGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seriesSerieGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setsGetSignalErrorFull() instead")
    void setsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setsSetGetSignalErrorFull() instead")
    void setsSetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setsSetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stagesGetSignalErrorFull() instead")
    void stagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stagesStageGetSignalErrorFull() instead")
    void stagesStageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stagesStageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suffixesGetSignalErrorFull() instead")
    void suffixesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suffixesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suffixesSuffixGetSignalErrorFull() instead")
    void suffixesSuffixGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suffixesSuffixGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainerTypesGetSignalErrorFull() instead")
    void trainerTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainerTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainerTypesTrainerTypeGetSignalErrorFull() instead")
    void trainerTypesTrainerTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainerTypesTrainerTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use typesGetSignalErrorFull() instead")
    void typesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void typesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use typesTypeGetSignalErrorFull() instead")
    void typesTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void typesTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variantsGetSignalErrorFull() instead")
    void variantsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variantsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variantsVariantGetSignalErrorFull() instead")
    void variantsVariantGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variantsVariantGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
