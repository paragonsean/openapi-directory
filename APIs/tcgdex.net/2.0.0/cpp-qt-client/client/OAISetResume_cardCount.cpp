/**
 * TCGdex API
 * A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards. You can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@tcgdex.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetResume_cardCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetResume_cardCount::OAISetResume_cardCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetResume_cardCount::OAISetResume_cardCount() {
    this->initializeModel();
}

OAISetResume_cardCount::~OAISetResume_cardCount() {}

void OAISetResume_cardCount::initializeModel() {

    m_official_isSet = false;
    m_official_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAISetResume_cardCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetResume_cardCount::fromJsonObject(QJsonObject json) {

    m_official_isValid = ::OpenAPI::fromJsonValue(m_official, json[QString("official")]);
    m_official_isSet = !json[QString("official")].isNull() && m_official_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAISetResume_cardCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetResume_cardCount::asJsonObject() const {
    QJsonObject obj;
    if (m_official_isSet) {
        obj.insert(QString("official"), ::OpenAPI::toJsonValue(m_official));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAISetResume_cardCount::getOfficial() const {
    return m_official;
}
void OAISetResume_cardCount::setOfficial(const double &official) {
    m_official = official;
    m_official_isSet = true;
}

bool OAISetResume_cardCount::is_official_Set() const{
    return m_official_isSet;
}

bool OAISetResume_cardCount::is_official_Valid() const{
    return m_official_isValid;
}

double OAISetResume_cardCount::getTotal() const {
    return m_total;
}
void OAISetResume_cardCount::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISetResume_cardCount::is_total_Set() const{
    return m_total_isSet;
}

bool OAISetResume_cardCount::is_total_Valid() const{
    return m_total_isValid;
}

bool OAISetResume_cardCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_official_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetResume_cardCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_official_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
