/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeries::OAISeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeries::OAISeries() {
    this->initializeModel();
}

OAISeries::~OAISeries() {}

void OAISeries::initializeModel() {

    m_alternate_images_mixin_isSet = false;
    m_alternate_images_mixin_isValid = false;

    m_ancestor_titles_isSet = false;
    m_ancestor_titles_isValid = false;

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_ancestors_titles_isSet = false;
    m_ancestors_titles_isValid = false;

    m_availability_mixin_isSet = false;
    m_availability_mixin_isValid = false;

    m_contributions_mixin_isSet = false;
    m_contributions_mixin_isValid = false;

    m_embargoed_isSet = false;
    m_embargoed_isValid = false;

    m_expected_child_count_isSet = false;
    m_expected_child_count_isValid = false;

    m_genre_groupings_isSet = false;
    m_genre_groupings_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_images_mixin_isSet = false;
    m_images_mixin_isValid = false;

    m_is_embeddable_isSet = false;
    m_is_embeddable_isValid = false;

    m_items_for_isSet = false;
    m_items_for_isValid = false;

    m_master_brand_link_isSet = false;
    m_master_brand_link_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_previous_next_mixin_isSet = false;
    m_previous_next_mixin_isValid = false;

    m_programme_formats_isSet = false;
    m_programme_formats_isValid = false;

    m_programme_type_isSet = false;
    m_programme_type_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_release_date_group_isSet = false;
    m_release_date_group_isValid = false;

    m_series_of_isSet = false;
    m_series_of_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAISeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeries::fromJsonObject(QJsonObject json) {

    m_alternate_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_alternate_images_mixin, json[QString("alternate_images_mixin")]);
    m_alternate_images_mixin_isSet = !json[QString("alternate_images_mixin")].isNull() && m_alternate_images_mixin_isValid;

    m_ancestor_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestor_titles, json[QString("ancestor_titles")]);
    m_ancestor_titles_isSet = !json[QString("ancestor_titles")].isNull() && m_ancestor_titles_isValid;

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_ancestors_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestors_titles, json[QString("ancestors_titles")]);
    m_ancestors_titles_isSet = !json[QString("ancestors_titles")].isNull() && m_ancestors_titles_isValid;

    m_availability_mixin_isValid = ::OpenAPI::fromJsonValue(m_availability_mixin, json[QString("availability_mixin")]);
    m_availability_mixin_isSet = !json[QString("availability_mixin")].isNull() && m_availability_mixin_isValid;

    m_contributions_mixin_isValid = ::OpenAPI::fromJsonValue(m_contributions_mixin, json[QString("contributions_mixin")]);
    m_contributions_mixin_isSet = !json[QString("contributions_mixin")].isNull() && m_contributions_mixin_isValid;

    m_embargoed_isValid = ::OpenAPI::fromJsonValue(m_embargoed, json[QString("embargoed")]);
    m_embargoed_isSet = !json[QString("embargoed")].isNull() && m_embargoed_isValid;

    m_expected_child_count_isValid = ::OpenAPI::fromJsonValue(m_expected_child_count, json[QString("expected_child_count")]);
    m_expected_child_count_isSet = !json[QString("expected_child_count")].isNull() && m_expected_child_count_isValid;

    m_genre_groupings_isValid = ::OpenAPI::fromJsonValue(m_genre_groupings, json[QString("genre_groupings")]);
    m_genre_groupings_isSet = !json[QString("genre_groupings")].isNull() && m_genre_groupings_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("image_link")]);
    m_image_link_isSet = !json[QString("image_link")].isNull() && m_image_link_isValid;

    m_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_images_mixin, json[QString("images_mixin")]);
    m_images_mixin_isSet = !json[QString("images_mixin")].isNull() && m_images_mixin_isValid;

    m_is_embeddable_isValid = ::OpenAPI::fromJsonValue(m_is_embeddable, json[QString("is_embeddable")]);
    m_is_embeddable_isSet = !json[QString("is_embeddable")].isNull() && m_is_embeddable_isValid;

    m_items_for_isValid = ::OpenAPI::fromJsonValue(m_items_for, json[QString("items_for")]);
    m_items_for_isSet = !json[QString("items_for")].isNull() && m_items_for_isValid;

    m_master_brand_link_isValid = ::OpenAPI::fromJsonValue(m_master_brand_link, json[QString("master_brand_link")]);
    m_master_brand_link_isSet = !json[QString("master_brand_link")].isNull() && m_master_brand_link_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_previous_next_mixin_isValid = ::OpenAPI::fromJsonValue(m_previous_next_mixin, json[QString("previous_next_mixin")]);
    m_previous_next_mixin_isSet = !json[QString("previous_next_mixin")].isNull() && m_previous_next_mixin_isValid;

    m_programme_formats_isValid = ::OpenAPI::fromJsonValue(m_programme_formats, json[QString("programme_formats")]);
    m_programme_formats_isSet = !json[QString("programme_formats")].isNull() && m_programme_formats_isValid;

    m_programme_type_isValid = ::OpenAPI::fromJsonValue(m_programme_type, json[QString("programme_type")]);
    m_programme_type_isSet = !json[QString("programme_type")].isNull() && m_programme_type_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("related_links")]);
    m_related_links_isSet = !json[QString("related_links")].isNull() && m_related_links_isValid;

    m_release_date_group_isValid = ::OpenAPI::fromJsonValue(m_release_date_group, json[QString("release_date_group")]);
    m_release_date_group_isSet = !json[QString("release_date_group")].isNull() && m_release_date_group_isValid;

    m_series_of_isValid = ::OpenAPI::fromJsonValue(m_series_of, json[QString("series_of")]);
    m_series_of_isSet = !json[QString("series_of")].isNull() && m_series_of_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAISeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeries::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_images_mixin.isSet()) {
        obj.insert(QString("alternate_images_mixin"), ::OpenAPI::toJsonValue(m_alternate_images_mixin));
    }
    if (m_ancestor_titles.isSet()) {
        obj.insert(QString("ancestor_titles"), ::OpenAPI::toJsonValue(m_ancestor_titles));
    }
    if (m_ancestors.isSet()) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_ancestors_titles.isSet()) {
        obj.insert(QString("ancestors_titles"), ::OpenAPI::toJsonValue(m_ancestors_titles));
    }
    if (m_availability_mixin.isSet()) {
        obj.insert(QString("availability_mixin"), ::OpenAPI::toJsonValue(m_availability_mixin));
    }
    if (m_contributions_mixin.isSet()) {
        obj.insert(QString("contributions_mixin"), ::OpenAPI::toJsonValue(m_contributions_mixin));
    }
    if (m_embargoed.isSet()) {
        obj.insert(QString("embargoed"), ::OpenAPI::toJsonValue(m_embargoed));
    }
    if (m_expected_child_count_isSet) {
        obj.insert(QString("expected_child_count"), ::OpenAPI::toJsonValue(m_expected_child_count));
    }
    if (m_genre_groupings.isSet()) {
        obj.insert(QString("genre_groupings"), ::OpenAPI::toJsonValue(m_genre_groupings));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_image_link.isSet()) {
        obj.insert(QString("image_link"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_images_mixin.isSet()) {
        obj.insert(QString("images_mixin"), ::OpenAPI::toJsonValue(m_images_mixin));
    }
    if (m_is_embeddable_isSet) {
        obj.insert(QString("is_embeddable"), ::OpenAPI::toJsonValue(m_is_embeddable));
    }
    if (m_items_for.isSet()) {
        obj.insert(QString("items_for"), ::OpenAPI::toJsonValue(m_items_for));
    }
    if (m_master_brand_link.isSet()) {
        obj.insert(QString("master_brand_link"), ::OpenAPI::toJsonValue(m_master_brand_link));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_previous_next_mixin.isSet()) {
        obj.insert(QString("previous_next_mixin"), ::OpenAPI::toJsonValue(m_previous_next_mixin));
    }
    if (m_programme_formats.isSet()) {
        obj.insert(QString("programme_formats"), ::OpenAPI::toJsonValue(m_programme_formats));
    }
    if (m_programme_type.isSet()) {
        obj.insert(QString("programme_type"), ::OpenAPI::toJsonValue(m_programme_type));
    }
    if (m_related_links.isSet()) {
        obj.insert(QString("related_links"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_release_date_group.isSet()) {
        obj.insert(QString("release_date_group"), ::OpenAPI::toJsonValue(m_release_date_group));
    }
    if (m_series_of.isSet()) {
        obj.insert(QString("series_of"), ::OpenAPI::toJsonValue(m_series_of));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIAlternate_images_mixin OAISeries::getAlternateImagesMixin() const {
    return m_alternate_images_mixin;
}
void OAISeries::setAlternateImagesMixin(const OAIAlternate_images_mixin &alternate_images_mixin) {
    m_alternate_images_mixin = alternate_images_mixin;
    m_alternate_images_mixin_isSet = true;
}

bool OAISeries::is_alternate_images_mixin_Set() const{
    return m_alternate_images_mixin_isSet;
}

bool OAISeries::is_alternate_images_mixin_Valid() const{
    return m_alternate_images_mixin_isValid;
}

OAIAncestor_titles OAISeries::getAncestorTitles() const {
    return m_ancestor_titles;
}
void OAISeries::setAncestorTitles(const OAIAncestor_titles &ancestor_titles) {
    m_ancestor_titles = ancestor_titles;
    m_ancestor_titles_isSet = true;
}

bool OAISeries::is_ancestor_titles_Set() const{
    return m_ancestor_titles_isSet;
}

bool OAISeries::is_ancestor_titles_Valid() const{
    return m_ancestor_titles_isValid;
}

OAIReference OAISeries::getAncestors() const {
    return m_ancestors;
}
void OAISeries::setAncestors(const OAIReference &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAISeries::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAISeries::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

OAIAncestors_titles OAISeries::getAncestorsTitles() const {
    return m_ancestors_titles;
}
void OAISeries::setAncestorsTitles(const OAIAncestors_titles &ancestors_titles) {
    m_ancestors_titles = ancestors_titles;
    m_ancestors_titles_isSet = true;
}

bool OAISeries::is_ancestors_titles_Set() const{
    return m_ancestors_titles_isSet;
}

bool OAISeries::is_ancestors_titles_Valid() const{
    return m_ancestors_titles_isValid;
}

OAIAvailability_mixin OAISeries::getAvailabilityMixin() const {
    return m_availability_mixin;
}
void OAISeries::setAvailabilityMixin(const OAIAvailability_mixin &availability_mixin) {
    m_availability_mixin = availability_mixin;
    m_availability_mixin_isSet = true;
}

bool OAISeries::is_availability_mixin_Set() const{
    return m_availability_mixin_isSet;
}

bool OAISeries::is_availability_mixin_Valid() const{
    return m_availability_mixin_isValid;
}

OAIContributions_mixin OAISeries::getContributionsMixin() const {
    return m_contributions_mixin;
}
void OAISeries::setContributionsMixin(const OAIContributions_mixin &contributions_mixin) {
    m_contributions_mixin = contributions_mixin;
    m_contributions_mixin_isSet = true;
}

bool OAISeries::is_contributions_mixin_Set() const{
    return m_contributions_mixin_isSet;
}

bool OAISeries::is_contributions_mixin_Valid() const{
    return m_contributions_mixin_isValid;
}

OAIEmbargoed OAISeries::getEmbargoed() const {
    return m_embargoed;
}
void OAISeries::setEmbargoed(const OAIEmbargoed &embargoed) {
    m_embargoed = embargoed;
    m_embargoed_isSet = true;
}

bool OAISeries::is_embargoed_Set() const{
    return m_embargoed_isSet;
}

bool OAISeries::is_embargoed_Valid() const{
    return m_embargoed_isValid;
}

qint32 OAISeries::getExpectedChildCount() const {
    return m_expected_child_count;
}
void OAISeries::setExpectedChildCount(const qint32 &expected_child_count) {
    m_expected_child_count = expected_child_count;
    m_expected_child_count_isSet = true;
}

bool OAISeries::is_expected_child_count_Set() const{
    return m_expected_child_count_isSet;
}

bool OAISeries::is_expected_child_count_Valid() const{
    return m_expected_child_count_isValid;
}

OAIGenreGroupingsType OAISeries::getGenreGroupings() const {
    return m_genre_groupings;
}
void OAISeries::setGenreGroupings(const OAIGenreGroupingsType &genre_groupings) {
    m_genre_groupings = genre_groupings;
    m_genre_groupings_isSet = true;
}

bool OAISeries::is_genre_groupings_Set() const{
    return m_genre_groupings_isSet;
}

bool OAISeries::is_genre_groupings_Valid() const{
    return m_genre_groupings_isValid;
}

OAIIdentifiers OAISeries::getIdentifiers() const {
    return m_identifiers;
}
void OAISeries::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAISeries::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAISeries::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIImage_link OAISeries::getImageLink() const {
    return m_image_link;
}
void OAISeries::setImageLink(const OAIImage_link &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAISeries::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAISeries::is_image_link_Valid() const{
    return m_image_link_isValid;
}

OAIImages_mixin OAISeries::getImagesMixin() const {
    return m_images_mixin;
}
void OAISeries::setImagesMixin(const OAIImages_mixin &images_mixin) {
    m_images_mixin = images_mixin;
    m_images_mixin_isSet = true;
}

bool OAISeries::is_images_mixin_Set() const{
    return m_images_mixin_isSet;
}

bool OAISeries::is_images_mixin_Valid() const{
    return m_images_mixin_isValid;
}

bool OAISeries::isIsEmbeddable() const {
    return m_is_embeddable;
}
void OAISeries::setIsEmbeddable(const bool &is_embeddable) {
    m_is_embeddable = is_embeddable;
    m_is_embeddable_isSet = true;
}

bool OAISeries::is_is_embeddable_Set() const{
    return m_is_embeddable_isSet;
}

bool OAISeries::is_is_embeddable_Valid() const{
    return m_is_embeddable_isValid;
}

OAIReference OAISeries::getItemsFor() const {
    return m_items_for;
}
void OAISeries::setItemsFor(const OAIReference &items_for) {
    m_items_for = items_for;
    m_items_for_isSet = true;
}

bool OAISeries::is_items_for_Set() const{
    return m_items_for_isSet;
}

bool OAISeries::is_items_for_Valid() const{
    return m_items_for_isValid;
}

OAIMaster_brand_link OAISeries::getMasterBrandLink() const {
    return m_master_brand_link;
}
void OAISeries::setMasterBrandLink(const OAIMaster_brand_link &master_brand_link) {
    m_master_brand_link = master_brand_link;
    m_master_brand_link_isSet = true;
}

bool OAISeries::is_master_brand_link_Set() const{
    return m_master_brand_link_isSet;
}

bool OAISeries::is_master_brand_link_Valid() const{
    return m_master_brand_link_isValid;
}

QString OAISeries::getPartner() const {
    return m_partner;
}
void OAISeries::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAISeries::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAISeries::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAISeries::getPid() const {
    return m_pid;
}
void OAISeries::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAISeries::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAISeries::is_pid_Valid() const{
    return m_pid_isValid;
}

OAIPrevious_next_mixin OAISeries::getPreviousNextMixin() const {
    return m_previous_next_mixin;
}
void OAISeries::setPreviousNextMixin(const OAIPrevious_next_mixin &previous_next_mixin) {
    m_previous_next_mixin = previous_next_mixin;
    m_previous_next_mixin_isSet = true;
}

bool OAISeries::is_previous_next_mixin_Set() const{
    return m_previous_next_mixin_isSet;
}

bool OAISeries::is_previous_next_mixin_Valid() const{
    return m_previous_next_mixin_isValid;
}

OAIProgramme_formats OAISeries::getProgrammeFormats() const {
    return m_programme_formats;
}
void OAISeries::setProgrammeFormats(const OAIProgramme_formats &programme_formats) {
    m_programme_formats = programme_formats;
    m_programme_formats_isSet = true;
}

bool OAISeries::is_programme_formats_Set() const{
    return m_programme_formats_isSet;
}

bool OAISeries::is_programme_formats_Valid() const{
    return m_programme_formats_isValid;
}

OAIProgramme_type OAISeries::getProgrammeType() const {
    return m_programme_type;
}
void OAISeries::setProgrammeType(const OAIProgramme_type &programme_type) {
    m_programme_type = programme_type;
    m_programme_type_isSet = true;
}

bool OAISeries::is_programme_type_Set() const{
    return m_programme_type_isSet;
}

bool OAISeries::is_programme_type_Valid() const{
    return m_programme_type_isValid;
}

OAIRelated_links OAISeries::getRelatedLinks() const {
    return m_related_links;
}
void OAISeries::setRelatedLinks(const OAIRelated_links &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAISeries::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAISeries::is_related_links_Valid() const{
    return m_related_links_isValid;
}

OAIRelease_date_group OAISeries::getReleaseDateGroup() const {
    return m_release_date_group;
}
void OAISeries::setReleaseDateGroup(const OAIRelease_date_group &release_date_group) {
    m_release_date_group = release_date_group;
    m_release_date_group_isSet = true;
}

bool OAISeries::is_release_date_group_Set() const{
    return m_release_date_group_isSet;
}

bool OAISeries::is_release_date_group_Valid() const{
    return m_release_date_group_isValid;
}

OAIPidReference OAISeries::getSeriesOf() const {
    return m_series_of;
}
void OAISeries::setSeriesOf(const OAIPidReference &series_of) {
    m_series_of = series_of;
    m_series_of_isSet = true;
}

bool OAISeries::is_series_of_Set() const{
    return m_series_of_isSet;
}

bool OAISeries::is_series_of_Valid() const{
    return m_series_of_isValid;
}

OAISynopses OAISeries::getSynopses() const {
    return m_synopses;
}
void OAISeries::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAISeries::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAISeries::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAISeries::getTitle() const {
    return m_title;
}
void OAISeries::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISeries::is_title_Set() const{
    return m_title_isSet;
}

bool OAISeries::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAISeries::getUpdatedTime() const {
    return m_updated_time;
}
void OAISeries::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAISeries::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAISeries::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAISeries::getUri() const {
    return m_uri;
}
void OAISeries::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISeries::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISeries::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAISeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestor_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargoed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_child_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_groupings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_embeddable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_for.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_next_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_formats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_embargoed_isValid && m_partner_isValid && m_pid_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
