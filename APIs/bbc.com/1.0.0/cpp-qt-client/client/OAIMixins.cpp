/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMixins.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMixins::OAIMixins(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMixins::OAIMixins() {
    this->initializeModel();
}

OAIMixins::~OAIMixins() {}

void OAIMixins::initializeModel() {

    m_mixin_isSet = false;
    m_mixin_isValid = false;

    m_unstable_mixins_isSet = false;
    m_unstable_mixins_isValid = false;
}

void OAIMixins::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMixins::fromJsonObject(QJsonObject json) {

    m_mixin_isValid = ::OpenAPI::fromJsonValue(m_mixin, json[QString("mixin")]);
    m_mixin_isSet = !json[QString("mixin")].isNull() && m_mixin_isValid;

    m_unstable_mixins_isValid = ::OpenAPI::fromJsonValue(m_unstable_mixins, json[QString("unstable_mixins")]);
    m_unstable_mixins_isSet = !json[QString("unstable_mixins")].isNull() && m_unstable_mixins_isValid;
}

QString OAIMixins::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMixins::asJsonObject() const {
    QJsonObject obj;
    if (m_mixin.size() > 0) {
        obj.insert(QString("mixin"), ::OpenAPI::toJsonValue(m_mixin));
    }
    if (m_unstable_mixins.isSet()) {
        obj.insert(QString("unstable_mixins"), ::OpenAPI::toJsonValue(m_unstable_mixins));
    }
    return obj;
}

QList<OAIMixin> OAIMixins::getMixin() const {
    return m_mixin;
}
void OAIMixins::setMixin(const QList<OAIMixin> &mixin) {
    m_mixin = mixin;
    m_mixin_isSet = true;
}

bool OAIMixins::is_mixin_Set() const{
    return m_mixin_isSet;
}

bool OAIMixins::is_mixin_Valid() const{
    return m_mixin_isValid;
}

OAIUnstable_mixins OAIMixins::getUnstableMixins() const {
    return m_unstable_mixins;
}
void OAIMixins::setUnstableMixins(const OAIUnstable_mixins &unstable_mixins) {
    m_unstable_mixins = unstable_mixins;
    m_unstable_mixins_isSet = true;
}

bool OAIMixins::is_unstable_mixins_Set() const{
    return m_unstable_mixins_isSet;
}

bool OAIMixins::is_unstable_mixins_Valid() const{
    return m_unstable_mixins_isValid;
}

bool OAIMixins::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mixin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unstable_mixins.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMixins::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
