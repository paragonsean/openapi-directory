/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource_asset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource_asset::OAISource_asset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource_asset::OAISource_asset() {
    this->initializeModel();
}

OAISource_asset::~OAISource_asset() {}

void OAISource_asset::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_focus_point_isSet = false;
    m_focus_point_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAISource_asset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource_asset::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_focus_point_isValid = ::OpenAPI::fromJsonValue(m_focus_point, json[QString("focus_point")]);
    m_focus_point_isSet = !json[QString("focus_point")].isNull() && m_focus_point_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAISource_asset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource_asset::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_focus_point.isSet()) {
        obj.insert(QString("focus_point"), ::OpenAPI::toJsonValue(m_focus_point));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIDimensions OAISource_asset::getDimensions() const {
    return m_dimensions;
}
void OAISource_asset::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAISource_asset::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAISource_asset::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIFocus_point OAISource_asset::getFocusPoint() const {
    return m_focus_point;
}
void OAISource_asset::setFocusPoint(const OAIFocus_point &focus_point) {
    m_focus_point = focus_point;
    m_focus_point_isSet = true;
}

bool OAISource_asset::is_focus_point_Set() const{
    return m_focus_point_isSet;
}

bool OAISource_asset::is_focus_point_Valid() const{
    return m_focus_point_isValid;
}

QString OAISource_asset::getMimeType() const {
    return m_mime_type;
}
void OAISource_asset::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAISource_asset::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAISource_asset::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

OAISize OAISource_asset::getSize() const {
    return m_size;
}
void OAISource_asset::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISource_asset::is_size_Set() const{
    return m_size_isSet;
}

bool OAISource_asset::is_size_Valid() const{
    return m_size_isValid;
}

QString OAISource_asset::getUri() const {
    return m_uri;
}
void OAISource_asset::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISource_asset::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISource_asset::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAISource_asset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_focus_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource_asset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
