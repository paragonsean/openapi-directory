/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailability_mixin_availability_inner_version_types_version_type_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailability_mixin_availability_inner_version_types_version_type_inner::OAIAvailability_mixin_availability_inner_version_types_version_type_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailability_mixin_availability_inner_version_types_version_type_inner::OAIAvailability_mixin_availability_inner_version_types_version_type_inner() {
    this->initializeModel();
}

OAIAvailability_mixin_availability_inner_version_types_version_type_inner::~OAIAvailability_mixin_availability_inner_version_types_version_type_inner() {}

void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_version_type_isSet = false;
    m_version_type_isValid = false;
}

void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_version_type_isValid = ::OpenAPI::fromJsonValue(m_version_type, json[QString("version_type")]);
    m_version_type_isSet = !json[QString("version_type")].isNull() && m_version_type_isValid;
}

QString OAIAvailability_mixin_availability_inner_version_types_version_type_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailability_mixin_availability_inner_version_types_version_type_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_version_type.size() > 0) {
        obj.insert(QString("version_type"), ::OpenAPI::toJsonValue(m_version_type));
    }
    return obj;
}

QDateTime OAIAvailability_mixin_availability_inner_version_types_version_type_inner::getEnd() const {
    return m_end;
}
void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_end_Set() const{
    return m_end_isSet;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIAvailability_mixin_availability_inner_version_types_version_type_inner::getId() const {
    return m_id;
}
void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAvailability_mixin_availability_inner_version_types_version_type_inner::getStart() const {
    return m_start;
}
void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_start_Set() const{
    return m_start_isSet;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_start_Valid() const{
    return m_start_isValid;
}

QList<OAIAvailability_mixin_availability_inner_version_types_version_type_inner_version_type_inner> OAIAvailability_mixin_availability_inner_version_types_version_type_inner::getVersionType() const {
    return m_version_type;
}
void OAIAvailability_mixin_availability_inner_version_types_version_type_inner::setVersionType(const QList<OAIAvailability_mixin_availability_inner_version_types_version_type_inner_version_type_inner> &version_type) {
    m_version_type = version_type;
    m_version_type_isSet = true;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_version_type_Set() const{
    return m_version_type_isSet;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::is_version_type_Valid() const{
    return m_version_type_isValid;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailability_mixin_availability_inner_version_types_version_type_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_version_type_isValid && true;
}

} // namespace OpenAPI
