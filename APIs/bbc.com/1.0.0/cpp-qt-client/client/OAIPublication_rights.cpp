/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublication_rights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublication_rights::OAIPublication_rights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublication_rights::OAIPublication_rights() {
    this->initializeModel();
}

OAIPublication_rights::~OAIPublication_rights() {}

void OAIPublication_rights::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_territory_isSet = false;
    m_territory_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;
}

void OAIPublication_rights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublication_rights::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("#text")]);
    m_text_isSet = !json[QString("#text")].isNull() && m_text_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_territory_isValid = ::OpenAPI::fromJsonValue(m_territory, json[QString("territory")]);
    m_territory_isSet = !json[QString("territory")].isNull() && m_territory_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;
}

QString OAIPublication_rights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublication_rights::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("#text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_territory_isSet) {
        obj.insert(QString("territory"), ::OpenAPI::toJsonValue(m_territory));
    }
    if (m_transport_isSet) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    return obj;
}

QString OAIPublication_rights::getText() const {
    return m_text;
}
void OAIPublication_rights::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPublication_rights::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPublication_rights::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPublication_rights::getContext() const {
    return m_context;
}
void OAIPublication_rights::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIPublication_rights::is_context_Set() const{
    return m_context_isSet;
}

bool OAIPublication_rights::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIPublication_rights::getPlatform() const {
    return m_platform;
}
void OAIPublication_rights::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIPublication_rights::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIPublication_rights::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIPublication_rights::getTerritory() const {
    return m_territory;
}
void OAIPublication_rights::setTerritory(const QString &territory) {
    m_territory = territory;
    m_territory_isSet = true;
}

bool OAIPublication_rights::is_territory_Set() const{
    return m_territory_isSet;
}

bool OAIPublication_rights::is_territory_Valid() const{
    return m_territory_isValid;
}

QString OAIPublication_rights::getTransport() const {
    return m_transport;
}
void OAIPublication_rights::setTransport(const QString &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIPublication_rights::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIPublication_rights::is_transport_Valid() const{
    return m_transport_isValid;
}

bool OAIPublication_rights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_territory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublication_rights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
