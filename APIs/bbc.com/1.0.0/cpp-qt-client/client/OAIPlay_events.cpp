/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlay_events.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlay_events::OAIPlay_events(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlay_events::OAIPlay_events() {
    this->initializeModel();
}

OAIPlay_events::~OAIPlay_events() {}

void OAIPlay_events::initializeModel() {

    m_play_event_isSet = false;
    m_play_event_isValid = false;
}

void OAIPlay_events::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlay_events::fromJsonObject(QJsonObject json) {

    m_play_event_isValid = ::OpenAPI::fromJsonValue(m_play_event, json[QString("play_event")]);
    m_play_event_isSet = !json[QString("play_event")].isNull() && m_play_event_isValid;
}

QString OAIPlay_events::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlay_events::asJsonObject() const {
    QJsonObject obj;
    if (m_play_event.size() > 0) {
        obj.insert(QString("play_event"), ::OpenAPI::toJsonValue(m_play_event));
    }
    return obj;
}

QList<OAIPlay_event> OAIPlay_events::getPlayEvent() const {
    return m_play_event;
}
void OAIPlay_events::setPlayEvent(const QList<OAIPlay_event> &play_event) {
    m_play_event = play_event;
    m_play_event_isSet = true;
}

bool OAIPlay_events::is_play_event_Set() const{
    return m_play_event_isSet;
}

bool OAIPlay_events::is_play_event_Valid() const{
    return m_play_event_isValid;
}

bool OAIPlay_events::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_play_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlay_events::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
