/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBroadcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBroadcast::OAIBroadcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBroadcast::OAIBroadcast() {
    this->initializeModel();
}

OAIBroadcast::~OAIBroadcast() {}

void OAIBroadcast::initializeModel() {

    m_ancestor_titles_isSet = false;
    m_ancestor_titles_isValid = false;

    m_ancestors_titles_isSet = false;
    m_ancestors_titles_isValid = false;

    m_broadcast_of_isSet = false;
    m_broadcast_of_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_images_mixin_isSet = false;
    m_images_mixin_isValid = false;

    m_is_audio_described_isSet = false;
    m_is_audio_described_isValid = false;

    m_is_blanked_isSet = false;
    m_is_blanked_isValid = false;

    m_is_critical_isSet = false;
    m_is_critical_isValid = false;

    m_is_repeat_isSet = false;
    m_is_repeat_isValid = false;

    m_is_simulcast_isSet = false;
    m_is_simulcast_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_published_time_isSet = false;
    m_published_time_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_tx_time_isSet = false;
    m_tx_time_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;
}

void OAIBroadcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBroadcast::fromJsonObject(QJsonObject json) {

    m_ancestor_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestor_titles, json[QString("ancestor_titles")]);
    m_ancestor_titles_isSet = !json[QString("ancestor_titles")].isNull() && m_ancestor_titles_isValid;

    m_ancestors_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestors_titles, json[QString("ancestors_titles")]);
    m_ancestors_titles_isSet = !json[QString("ancestors_titles")].isNull() && m_ancestors_titles_isValid;

    m_broadcast_of_isValid = ::OpenAPI::fromJsonValue(m_broadcast_of, json[QString("broadcast_of")]);
    m_broadcast_of_isSet = !json[QString("broadcast_of")].isNull() && m_broadcast_of_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("image_link")]);
    m_image_link_isSet = !json[QString("image_link")].isNull() && m_image_link_isValid;

    m_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_images_mixin, json[QString("images_mixin")]);
    m_images_mixin_isSet = !json[QString("images_mixin")].isNull() && m_images_mixin_isValid;

    m_is_audio_described_isValid = ::OpenAPI::fromJsonValue(m_is_audio_described, json[QString("is_audio_described")]);
    m_is_audio_described_isSet = !json[QString("is_audio_described")].isNull() && m_is_audio_described_isValid;

    m_is_blanked_isValid = ::OpenAPI::fromJsonValue(m_is_blanked, json[QString("is_blanked")]);
    m_is_blanked_isSet = !json[QString("is_blanked")].isNull() && m_is_blanked_isValid;

    m_is_critical_isValid = ::OpenAPI::fromJsonValue(m_is_critical, json[QString("is_critical")]);
    m_is_critical_isSet = !json[QString("is_critical")].isNull() && m_is_critical_isValid;

    m_is_repeat_isValid = ::OpenAPI::fromJsonValue(m_is_repeat, json[QString("is_repeat")]);
    m_is_repeat_isSet = !json[QString("is_repeat")].isNull() && m_is_repeat_isValid;

    m_is_simulcast_isValid = ::OpenAPI::fromJsonValue(m_is_simulcast, json[QString("is_simulcast")]);
    m_is_simulcast_isSet = !json[QString("is_simulcast")].isNull() && m_is_simulcast_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_published_time_isValid = ::OpenAPI::fromJsonValue(m_published_time, json[QString("published_time")]);
    m_published_time_isSet = !json[QString("published_time")].isNull() && m_published_time_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_tx_time_isValid = ::OpenAPI::fromJsonValue(m_tx_time, json[QString("tx_time")]);
    m_tx_time_isSet = !json[QString("tx_time")].isNull() && m_tx_time_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;
}

QString OAIBroadcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBroadcast::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestor_titles.isSet()) {
        obj.insert(QString("ancestor_titles"), ::OpenAPI::toJsonValue(m_ancestor_titles));
    }
    if (m_ancestors_titles.isSet()) {
        obj.insert(QString("ancestors_titles"), ::OpenAPI::toJsonValue(m_ancestors_titles));
    }
    if (m_broadcast_of.size() > 0) {
        obj.insert(QString("broadcast_of"), ::OpenAPI::toJsonValue(m_broadcast_of));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_image_link.isSet()) {
        obj.insert(QString("image_link"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_images_mixin.isSet()) {
        obj.insert(QString("images_mixin"), ::OpenAPI::toJsonValue(m_images_mixin));
    }
    if (m_is_audio_described_isSet) {
        obj.insert(QString("is_audio_described"), ::OpenAPI::toJsonValue(m_is_audio_described));
    }
    if (m_is_blanked_isSet) {
        obj.insert(QString("is_blanked"), ::OpenAPI::toJsonValue(m_is_blanked));
    }
    if (m_is_critical_isSet) {
        obj.insert(QString("is_critical"), ::OpenAPI::toJsonValue(m_is_critical));
    }
    if (m_is_repeat_isSet) {
        obj.insert(QString("is_repeat"), ::OpenAPI::toJsonValue(m_is_repeat));
    }
    if (m_is_simulcast_isSet) {
        obj.insert(QString("is_simulcast"), ::OpenAPI::toJsonValue(m_is_simulcast));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_published_time.isSet()) {
        obj.insert(QString("published_time"), ::OpenAPI::toJsonValue(m_published_time));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_tx_time.isSet()) {
        obj.insert(QString("tx_time"), ::OpenAPI::toJsonValue(m_tx_time));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    return obj;
}

OAIAncestor_titles OAIBroadcast::getAncestorTitles() const {
    return m_ancestor_titles;
}
void OAIBroadcast::setAncestorTitles(const OAIAncestor_titles &ancestor_titles) {
    m_ancestor_titles = ancestor_titles;
    m_ancestor_titles_isSet = true;
}

bool OAIBroadcast::is_ancestor_titles_Set() const{
    return m_ancestor_titles_isSet;
}

bool OAIBroadcast::is_ancestor_titles_Valid() const{
    return m_ancestor_titles_isValid;
}

OAIAncestors_titles OAIBroadcast::getAncestorsTitles() const {
    return m_ancestors_titles;
}
void OAIBroadcast::setAncestorsTitles(const OAIAncestors_titles &ancestors_titles) {
    m_ancestors_titles = ancestors_titles;
    m_ancestors_titles_isSet = true;
}

bool OAIBroadcast::is_ancestors_titles_Set() const{
    return m_ancestors_titles_isSet;
}

bool OAIBroadcast::is_ancestors_titles_Valid() const{
    return m_ancestors_titles_isValid;
}

QList<OAIPidReference> OAIBroadcast::getBroadcastOf() const {
    return m_broadcast_of;
}
void OAIBroadcast::setBroadcastOf(const QList<OAIPidReference> &broadcast_of) {
    m_broadcast_of = broadcast_of;
    m_broadcast_of_isSet = true;
}

bool OAIBroadcast::is_broadcast_of_Set() const{
    return m_broadcast_of_isSet;
}

bool OAIBroadcast::is_broadcast_of_Valid() const{
    return m_broadcast_of_isValid;
}

OAIIdentifiers OAIBroadcast::getIdentifiers() const {
    return m_identifiers;
}
void OAIBroadcast::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIBroadcast::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIBroadcast::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIIds OAIBroadcast::getIds() const {
    return m_ids;
}
void OAIBroadcast::setIds(const OAIIds &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIBroadcast::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIBroadcast::is_ids_Valid() const{
    return m_ids_isValid;
}

OAIImage_link OAIBroadcast::getImageLink() const {
    return m_image_link;
}
void OAIBroadcast::setImageLink(const OAIImage_link &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAIBroadcast::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAIBroadcast::is_image_link_Valid() const{
    return m_image_link_isValid;
}

OAIImages_mixin OAIBroadcast::getImagesMixin() const {
    return m_images_mixin;
}
void OAIBroadcast::setImagesMixin(const OAIImages_mixin &images_mixin) {
    m_images_mixin = images_mixin;
    m_images_mixin_isSet = true;
}

bool OAIBroadcast::is_images_mixin_Set() const{
    return m_images_mixin_isSet;
}

bool OAIBroadcast::is_images_mixin_Valid() const{
    return m_images_mixin_isValid;
}

bool OAIBroadcast::isIsAudioDescribed() const {
    return m_is_audio_described;
}
void OAIBroadcast::setIsAudioDescribed(const bool &is_audio_described) {
    m_is_audio_described = is_audio_described;
    m_is_audio_described_isSet = true;
}

bool OAIBroadcast::is_is_audio_described_Set() const{
    return m_is_audio_described_isSet;
}

bool OAIBroadcast::is_is_audio_described_Valid() const{
    return m_is_audio_described_isValid;
}

bool OAIBroadcast::isIsBlanked() const {
    return m_is_blanked;
}
void OAIBroadcast::setIsBlanked(const bool &is_blanked) {
    m_is_blanked = is_blanked;
    m_is_blanked_isSet = true;
}

bool OAIBroadcast::is_is_blanked_Set() const{
    return m_is_blanked_isSet;
}

bool OAIBroadcast::is_is_blanked_Valid() const{
    return m_is_blanked_isValid;
}

bool OAIBroadcast::isIsCritical() const {
    return m_is_critical;
}
void OAIBroadcast::setIsCritical(const bool &is_critical) {
    m_is_critical = is_critical;
    m_is_critical_isSet = true;
}

bool OAIBroadcast::is_is_critical_Set() const{
    return m_is_critical_isSet;
}

bool OAIBroadcast::is_is_critical_Valid() const{
    return m_is_critical_isValid;
}

bool OAIBroadcast::isIsRepeat() const {
    return m_is_repeat;
}
void OAIBroadcast::setIsRepeat(const bool &is_repeat) {
    m_is_repeat = is_repeat;
    m_is_repeat_isSet = true;
}

bool OAIBroadcast::is_is_repeat_Set() const{
    return m_is_repeat_isSet;
}

bool OAIBroadcast::is_is_repeat_Valid() const{
    return m_is_repeat_isValid;
}

bool OAIBroadcast::isIsSimulcast() const {
    return m_is_simulcast;
}
void OAIBroadcast::setIsSimulcast(const bool &is_simulcast) {
    m_is_simulcast = is_simulcast;
    m_is_simulcast_isSet = true;
}

bool OAIBroadcast::is_is_simulcast_Set() const{
    return m_is_simulcast_isSet;
}

bool OAIBroadcast::is_is_simulcast_Valid() const{
    return m_is_simulcast_isValid;
}

QString OAIBroadcast::getPartner() const {
    return m_partner;
}
void OAIBroadcast::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIBroadcast::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIBroadcast::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIBroadcast::getPid() const {
    return m_pid;
}
void OAIBroadcast::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIBroadcast::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIBroadcast::is_pid_Valid() const{
    return m_pid_isValid;
}

OAIBroadcastTime OAIBroadcast::getPublishedTime() const {
    return m_published_time;
}
void OAIBroadcast::setPublishedTime(const OAIBroadcastTime &published_time) {
    m_published_time = published_time;
    m_published_time_isSet = true;
}

bool OAIBroadcast::is_published_time_Set() const{
    return m_published_time_isSet;
}

bool OAIBroadcast::is_published_time_Valid() const{
    return m_published_time_isValid;
}

OAIServiceReference OAIBroadcast::getService() const {
    return m_service;
}
void OAIBroadcast::setService(const OAIServiceReference &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIBroadcast::is_service_Set() const{
    return m_service_isSet;
}

bool OAIBroadcast::is_service_Valid() const{
    return m_service_isValid;
}

OAITx_time OAIBroadcast::getTxTime() const {
    return m_tx_time;
}
void OAIBroadcast::setTxTime(const OAITx_time &tx_time) {
    m_tx_time = tx_time;
    m_tx_time_isSet = true;
}

bool OAIBroadcast::is_tx_time_Set() const{
    return m_tx_time_isSet;
}

bool OAIBroadcast::is_tx_time_Valid() const{
    return m_tx_time_isValid;
}

QDateTime OAIBroadcast::getUpdatedTime() const {
    return m_updated_time;
}
void OAIBroadcast::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIBroadcast::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIBroadcast::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

bool OAIBroadcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestor_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcast_of.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_audio_described_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_blanked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_simulcast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBroadcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partner_isValid && m_pid_isValid && true;
}

} // namespace OpenAPI
