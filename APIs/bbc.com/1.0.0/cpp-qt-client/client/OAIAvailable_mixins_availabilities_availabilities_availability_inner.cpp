/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailable_mixins_availabilities_availabilities_availability_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailable_mixins_availabilities_availabilities_availability_inner::OAIAvailable_mixins_availabilities_availabilities_availability_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailable_mixins_availabilities_availabilities_availability_inner::OAIAvailable_mixins_availabilities_availabilities_availability_inner() {
    this->initializeModel();
}

OAIAvailable_mixins_availabilities_availabilities_availability_inner::~OAIAvailable_mixins_availabilities_availabilities_availability_inner() {}

void OAIAvailable_mixins_availabilities_availabilities_availability_inner::initializeModel() {

    m_accurate_end_isSet = false;
    m_accurate_end_isValid = false;

    m_accurate_start_isSet = false;
    m_accurate_start_isValid = false;

    m_available_versions_media_sets_isSet = false;
    m_available_versions_media_sets_isValid = false;

    m_media_availability_end_isSet = false;
    m_media_availability_end_isValid = false;

    m_media_availability_start_isSet = false;
    m_media_availability_start_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_scheduled_end_isSet = false;
    m_scheduled_end_isValid = false;

    m_scheduled_start_isSet = false;
    m_scheduled_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAvailable_mixins_availabilities_availabilities_availability_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailable_mixins_availabilities_availabilities_availability_inner::fromJsonObject(QJsonObject json) {

    m_accurate_end_isValid = ::OpenAPI::fromJsonValue(m_accurate_end, json[QString("accurate_end")]);
    m_accurate_end_isSet = !json[QString("accurate_end")].isNull() && m_accurate_end_isValid;

    m_accurate_start_isValid = ::OpenAPI::fromJsonValue(m_accurate_start, json[QString("accurate_start")]);
    m_accurate_start_isSet = !json[QString("accurate_start")].isNull() && m_accurate_start_isValid;

    m_available_versions_media_sets_isValid = ::OpenAPI::fromJsonValue(m_available_versions_media_sets, json[QString("available_versions_media_sets")]);
    m_available_versions_media_sets_isSet = !json[QString("available_versions_media_sets")].isNull() && m_available_versions_media_sets_isValid;

    m_media_availability_end_isValid = ::OpenAPI::fromJsonValue(m_media_availability_end, json[QString("media_availability_end")]);
    m_media_availability_end_isSet = !json[QString("media_availability_end")].isNull() && m_media_availability_end_isValid;

    m_media_availability_start_isValid = ::OpenAPI::fromJsonValue(m_media_availability_start, json[QString("media_availability_start")]);
    m_media_availability_start_isSet = !json[QString("media_availability_start")].isNull() && m_media_availability_start_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("payment_type")]);
    m_payment_type_isSet = !json[QString("payment_type")].isNull() && m_payment_type_isValid;

    m_scheduled_end_isValid = ::OpenAPI::fromJsonValue(m_scheduled_end, json[QString("scheduled_end")]);
    m_scheduled_end_isSet = !json[QString("scheduled_end")].isNull() && m_scheduled_end_isValid;

    m_scheduled_start_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start, json[QString("scheduled_start")]);
    m_scheduled_start_isSet = !json[QString("scheduled_start")].isNull() && m_scheduled_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAvailable_mixins_availabilities_availabilities_availability_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailable_mixins_availabilities_availabilities_availability_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_accurate_end_isSet) {
        obj.insert(QString("accurate_end"), ::OpenAPI::toJsonValue(m_accurate_end));
    }
    if (m_accurate_start_isSet) {
        obj.insert(QString("accurate_start"), ::OpenAPI::toJsonValue(m_accurate_start));
    }
    if (m_available_versions_media_sets.isSet()) {
        obj.insert(QString("available_versions_media_sets"), ::OpenAPI::toJsonValue(m_available_versions_media_sets));
    }
    if (m_media_availability_end_isSet) {
        obj.insert(QString("media_availability_end"), ::OpenAPI::toJsonValue(m_media_availability_end));
    }
    if (m_media_availability_start_isSet) {
        obj.insert(QString("media_availability_start"), ::OpenAPI::toJsonValue(m_media_availability_start));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("payment_type"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_scheduled_end_isSet) {
        obj.insert(QString("scheduled_end"), ::OpenAPI::toJsonValue(m_scheduled_end));
    }
    if (m_scheduled_start_isSet) {
        obj.insert(QString("scheduled_start"), ::OpenAPI::toJsonValue(m_scheduled_start));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIAvailable_mixins_availabilities_availabilities_availability_inner::getAccurateEnd() const {
    return m_accurate_end;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setAccurateEnd(const QDateTime &accurate_end) {
    m_accurate_end = accurate_end;
    m_accurate_end_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_accurate_end_Set() const{
    return m_accurate_end_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_accurate_end_Valid() const{
    return m_accurate_end_isValid;
}

QDateTime OAIAvailable_mixins_availabilities_availabilities_availability_inner::getAccurateStart() const {
    return m_accurate_start;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setAccurateStart(const QDateTime &accurate_start) {
    m_accurate_start = accurate_start;
    m_accurate_start_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_accurate_start_Set() const{
    return m_accurate_start_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_accurate_start_Valid() const{
    return m_accurate_start_isValid;
}

OAIAvailable_versions_media_sets OAIAvailable_mixins_availabilities_availabilities_availability_inner::getAvailableVersionsMediaSets() const {
    return m_available_versions_media_sets;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setAvailableVersionsMediaSets(const OAIAvailable_versions_media_sets &available_versions_media_sets) {
    m_available_versions_media_sets = available_versions_media_sets;
    m_available_versions_media_sets_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_available_versions_media_sets_Set() const{
    return m_available_versions_media_sets_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_available_versions_media_sets_Valid() const{
    return m_available_versions_media_sets_isValid;
}

QDateTime OAIAvailable_mixins_availabilities_availabilities_availability_inner::getMediaAvailabilityEnd() const {
    return m_media_availability_end;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setMediaAvailabilityEnd(const QDateTime &media_availability_end) {
    m_media_availability_end = media_availability_end;
    m_media_availability_end_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_media_availability_end_Set() const{
    return m_media_availability_end_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_media_availability_end_Valid() const{
    return m_media_availability_end_isValid;
}

QDateTime OAIAvailable_mixins_availabilities_availabilities_availability_inner::getMediaAvailabilityStart() const {
    return m_media_availability_start;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setMediaAvailabilityStart(const QDateTime &media_availability_start) {
    m_media_availability_start = media_availability_start;
    m_media_availability_start_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_media_availability_start_Set() const{
    return m_media_availability_start_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_media_availability_start_Valid() const{
    return m_media_availability_start_isValid;
}

QString OAIAvailable_mixins_availabilities_availabilities_availability_inner::getPaymentType() const {
    return m_payment_type;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QDateTime OAIAvailable_mixins_availabilities_availabilities_availability_inner::getScheduledEnd() const {
    return m_scheduled_end;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setScheduledEnd(const QDateTime &scheduled_end) {
    m_scheduled_end = scheduled_end;
    m_scheduled_end_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_scheduled_end_Set() const{
    return m_scheduled_end_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_scheduled_end_Valid() const{
    return m_scheduled_end_isValid;
}

QDateTime OAIAvailable_mixins_availabilities_availabilities_availability_inner::getScheduledStart() const {
    return m_scheduled_start;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setScheduledStart(const QDateTime &scheduled_start) {
    m_scheduled_start = scheduled_start;
    m_scheduled_start_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_scheduled_start_Set() const{
    return m_scheduled_start_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_scheduled_start_Valid() const{
    return m_scheduled_start_isValid;
}

QString OAIAvailable_mixins_availabilities_availabilities_availability_inner::getStatus() const {
    return m_status;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAvailable_mixins_availabilities_availabilities_availability_inner::getType() const {
    return m_type;
}
void OAIAvailable_mixins_availabilities_availabilities_availability_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accurate_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accurate_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_versions_media_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_availability_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_availability_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailable_mixins_availabilities_availabilities_availability_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_versions_media_sets_isValid && true;
}

} // namespace OpenAPI
