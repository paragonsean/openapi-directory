/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRawApi_H
#define OAI_OAIRawApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINitro.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRawApi : public QObject {
    Q_OBJECT

public:
    OAIRawApi(const int timeOut = 0);
    ~OAIRawApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawAncestors(const QString &pid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawBrand(const QString &pid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawBrand_franchises(const QString &pid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawEpisode(const QString &pid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawFormats(const QString &pid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawGenreGroups(const QString &pid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawImage(const QString &pid);

    /**
    * @param[in]  mbid QString [required]
    */
    virtual void getRawMasterbrand(const QString &mbid);

    /**
    * @param[in]  pid QString [required]
    */
    virtual void getRawPromotion(const QString &pid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRawAncestorsCallback(OAIHttpRequestWorker *worker);
    void getRawBrandCallback(OAIHttpRequestWorker *worker);
    void getRawBrand_franchisesCallback(OAIHttpRequestWorker *worker);
    void getRawEpisodeCallback(OAIHttpRequestWorker *worker);
    void getRawFormatsCallback(OAIHttpRequestWorker *worker);
    void getRawGenreGroupsCallback(OAIHttpRequestWorker *worker);
    void getRawImageCallback(OAIHttpRequestWorker *worker);
    void getRawMasterbrandCallback(OAIHttpRequestWorker *worker);
    void getRawPromotionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRawAncestorsSignal(OAINitro summary);
    void getRawBrandSignal(OAINitro summary);
    void getRawBrand_franchisesSignal(OAINitro summary);
    void getRawEpisodeSignal(OAINitro summary);
    void getRawFormatsSignal(OAINitro summary);
    void getRawGenreGroupsSignal(OAINitro summary);
    void getRawImageSignal(OAINitro summary);
    void getRawMasterbrandSignal(OAINitro summary);
    void getRawPromotionSignal(OAINitro summary);


    void getRawAncestorsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawBrandSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawBrand_franchisesSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawEpisodeSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawFormatsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawGenreGroupsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawImageSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawMasterbrandSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void getRawPromotionSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);

    Q_DECL_DEPRECATED_X("Use getRawAncestorsSignalError() instead")
    void getRawAncestorsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawAncestorsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawBrandSignalError() instead")
    void getRawBrandSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawBrandSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawBrand_franchisesSignalError() instead")
    void getRawBrand_franchisesSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawBrand_franchisesSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawEpisodeSignalError() instead")
    void getRawEpisodeSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawEpisodeSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawFormatsSignalError() instead")
    void getRawFormatsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawFormatsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawGenreGroupsSignalError() instead")
    void getRawGenreGroupsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawGenreGroupsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawImageSignalError() instead")
    void getRawImageSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawImageSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawMasterbrandSignalError() instead")
    void getRawMasterbrandSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawMasterbrandSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawPromotionSignalError() instead")
    void getRawPromotionSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawPromotionSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRawAncestorsSignalErrorFull() instead")
    void getRawAncestorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawAncestorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawBrandSignalErrorFull() instead")
    void getRawBrandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawBrandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawBrand_franchisesSignalErrorFull() instead")
    void getRawBrand_franchisesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawBrand_franchisesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawEpisodeSignalErrorFull() instead")
    void getRawEpisodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawEpisodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawFormatsSignalErrorFull() instead")
    void getRawFormatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawFormatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawGenreGroupsSignalErrorFull() instead")
    void getRawGenreGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawGenreGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawImageSignalErrorFull() instead")
    void getRawImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawMasterbrandSignalErrorFull() instead")
    void getRawMasterbrandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawMasterbrandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawPromotionSignalErrorFull() instead")
    void getRawPromotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawPromotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
