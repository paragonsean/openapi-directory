/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_body::OAIGroup_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_body::OAIGroup_body() {
    this->initializeModel();
}

OAIGroup_body::~OAIGroup_body() {}

void OAIGroup_body::initializeModel() {

    m_alternate_images_mixin_isSet = false;
    m_alternate_images_mixin_isValid = false;

    m_embargoed_isSet = false;
    m_embargoed_isValid = false;

    m_for_programmes_isSet = false;
    m_for_programmes_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_images_mixin_isSet = false;
    m_images_mixin_isValid = false;

    m_master_brand_link_isSet = false;
    m_master_brand_link_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_scheduled_isSet = false;
    m_scheduled_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_url_key_isSet = false;
    m_url_key_isValid = false;
}

void OAIGroup_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_body::fromJsonObject(QJsonObject json) {

    m_alternate_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_alternate_images_mixin, json[QString("alternate_images_mixin")]);
    m_alternate_images_mixin_isSet = !json[QString("alternate_images_mixin")].isNull() && m_alternate_images_mixin_isValid;

    m_embargoed_isValid = ::OpenAPI::fromJsonValue(m_embargoed, json[QString("embargoed")]);
    m_embargoed_isSet = !json[QString("embargoed")].isNull() && m_embargoed_isValid;

    m_for_programmes_isValid = ::OpenAPI::fromJsonValue(m_for_programmes, json[QString("for_programmes")]);
    m_for_programmes_isSet = !json[QString("for_programmes")].isNull() && m_for_programmes_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_images_mixin, json[QString("images_mixin")]);
    m_images_mixin_isSet = !json[QString("images_mixin")].isNull() && m_images_mixin_isValid;

    m_master_brand_link_isValid = ::OpenAPI::fromJsonValue(m_master_brand_link, json[QString("master_brand_link")]);
    m_master_brand_link_isSet = !json[QString("master_brand_link")].isNull() && m_master_brand_link_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("related_links")]);
    m_related_links_isSet = !json[QString("related_links")].isNull() && m_related_links_isValid;

    m_scheduled_isValid = ::OpenAPI::fromJsonValue(m_scheduled, json[QString("scheduled")]);
    m_scheduled_isSet = !json[QString("scheduled")].isNull() && m_scheduled_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_url_key_isValid = ::OpenAPI::fromJsonValue(m_url_key, json[QString("url_key")]);
    m_url_key_isSet = !json[QString("url_key")].isNull() && m_url_key_isValid;
}

QString OAIGroup_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_body::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_images_mixin.isSet()) {
        obj.insert(QString("alternate_images_mixin"), ::OpenAPI::toJsonValue(m_alternate_images_mixin));
    }
    if (m_embargoed.isSet()) {
        obj.insert(QString("embargoed"), ::OpenAPI::toJsonValue(m_embargoed));
    }
    if (m_for_programmes.isSet()) {
        obj.insert(QString("for_programmes"), ::OpenAPI::toJsonValue(m_for_programmes));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_images_mixin.isSet()) {
        obj.insert(QString("images_mixin"), ::OpenAPI::toJsonValue(m_images_mixin));
    }
    if (m_master_brand_link.isSet()) {
        obj.insert(QString("master_brand_link"), ::OpenAPI::toJsonValue(m_master_brand_link));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_related_links.isSet()) {
        obj.insert(QString("related_links"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_scheduled.isSet()) {
        obj.insert(QString("scheduled"), ::OpenAPI::toJsonValue(m_scheduled));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_url_key_isSet) {
        obj.insert(QString("url_key"), ::OpenAPI::toJsonValue(m_url_key));
    }
    return obj;
}

OAIAlternate_images_mixin OAIGroup_body::getAlternateImagesMixin() const {
    return m_alternate_images_mixin;
}
void OAIGroup_body::setAlternateImagesMixin(const OAIAlternate_images_mixin &alternate_images_mixin) {
    m_alternate_images_mixin = alternate_images_mixin;
    m_alternate_images_mixin_isSet = true;
}

bool OAIGroup_body::is_alternate_images_mixin_Set() const{
    return m_alternate_images_mixin_isSet;
}

bool OAIGroup_body::is_alternate_images_mixin_Valid() const{
    return m_alternate_images_mixin_isValid;
}

OAIEmbargoed OAIGroup_body::getEmbargoed() const {
    return m_embargoed;
}
void OAIGroup_body::setEmbargoed(const OAIEmbargoed &embargoed) {
    m_embargoed = embargoed;
    m_embargoed_isSet = true;
}

bool OAIGroup_body::is_embargoed_Set() const{
    return m_embargoed_isSet;
}

bool OAIGroup_body::is_embargoed_Valid() const{
    return m_embargoed_isValid;
}

OAIFor_programmes OAIGroup_body::getForProgrammes() const {
    return m_for_programmes;
}
void OAIGroup_body::setForProgrammes(const OAIFor_programmes &for_programmes) {
    m_for_programmes = for_programmes;
    m_for_programmes_isSet = true;
}

bool OAIGroup_body::is_for_programmes_Set() const{
    return m_for_programmes_isSet;
}

bool OAIGroup_body::is_for_programmes_Valid() const{
    return m_for_programmes_isValid;
}

OAIIdentifiers OAIGroup_body::getIdentifiers() const {
    return m_identifiers;
}
void OAIGroup_body::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIGroup_body::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIGroup_body::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIIds OAIGroup_body::getIds() const {
    return m_ids;
}
void OAIGroup_body::setIds(const OAIIds &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIGroup_body::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIGroup_body::is_ids_Valid() const{
    return m_ids_isValid;
}

OAIImages_mixin OAIGroup_body::getImagesMixin() const {
    return m_images_mixin;
}
void OAIGroup_body::setImagesMixin(const OAIImages_mixin &images_mixin) {
    m_images_mixin = images_mixin;
    m_images_mixin_isSet = true;
}

bool OAIGroup_body::is_images_mixin_Set() const{
    return m_images_mixin_isSet;
}

bool OAIGroup_body::is_images_mixin_Valid() const{
    return m_images_mixin_isValid;
}

OAIMaster_brand_link OAIGroup_body::getMasterBrandLink() const {
    return m_master_brand_link;
}
void OAIGroup_body::setMasterBrandLink(const OAIMaster_brand_link &master_brand_link) {
    m_master_brand_link = master_brand_link;
    m_master_brand_link_isSet = true;
}

bool OAIGroup_body::is_master_brand_link_Set() const{
    return m_master_brand_link_isSet;
}

bool OAIGroup_body::is_master_brand_link_Valid() const{
    return m_master_brand_link_isValid;
}

QString OAIGroup_body::getPartner() const {
    return m_partner;
}
void OAIGroup_body::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIGroup_body::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIGroup_body::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIGroup_body::getPid() const {
    return m_pid;
}
void OAIGroup_body::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIGroup_body::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIGroup_body::is_pid_Valid() const{
    return m_pid_isValid;
}

OAIRelated_links OAIGroup_body::getRelatedLinks() const {
    return m_related_links;
}
void OAIGroup_body::setRelatedLinks(const OAIRelated_links &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAIGroup_body::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAIGroup_body::is_related_links_Valid() const{
    return m_related_links_isValid;
}

OAIScheduled OAIGroup_body::getScheduled() const {
    return m_scheduled;
}
void OAIGroup_body::setScheduled(const OAIScheduled &scheduled) {
    m_scheduled = scheduled;
    m_scheduled_isSet = true;
}

bool OAIGroup_body::is_scheduled_Set() const{
    return m_scheduled_isSet;
}

bool OAIGroup_body::is_scheduled_Valid() const{
    return m_scheduled_isValid;
}

OAISynopses OAIGroup_body::getSynopses() const {
    return m_synopses;
}
void OAIGroup_body::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIGroup_body::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIGroup_body::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIGroup_body::getTitle() const {
    return m_title;
}
void OAIGroup_body::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGroup_body::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGroup_body::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIGroup_body::getUpdatedTime() const {
    return m_updated_time;
}
void OAIGroup_body::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIGroup_body::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIGroup_body::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIGroup_body::getUrlKey() const {
    return m_url_key;
}
void OAIGroup_body::setUrlKey(const QString &url_key) {
    m_url_key = url_key;
    m_url_key_isSet = true;
}

bool OAIGroup_body::is_url_key_Set() const{
    return m_url_key_isSet;
}

bool OAIGroup_body::is_url_key_Valid() const{
    return m_url_key_isValid;
}

bool OAIGroup_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargoed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_for_programmes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_embargoed_isValid && m_partner_isValid && m_pid_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
