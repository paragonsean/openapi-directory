/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContributor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContributor::OAIContributor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContributor::OAIContributor() {
    this->initializeModel();
}

OAIContributor::~OAIContributor() {}

void OAIContributor::initializeModel() {

    m_contributor_name_isSet = false;
    m_contributor_name_isValid = false;

    m_contributor_to_isSet = false;
    m_contributor_to_isValid = false;

    m_disambiguation_isSet = false;
    m_disambiguation_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContributor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContributor::fromJsonObject(QJsonObject json) {

    m_contributor_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_name, json[QString("contributor_name")]);
    m_contributor_name_isSet = !json[QString("contributor_name")].isNull() && m_contributor_name_isValid;

    m_contributor_to_isValid = ::OpenAPI::fromJsonValue(m_contributor_to, json[QString("contributor_to")]);
    m_contributor_to_isSet = !json[QString("contributor_to")].isNull() && m_contributor_to_isValid;

    m_disambiguation_isValid = ::OpenAPI::fromJsonValue(m_disambiguation, json[QString("disambiguation")]);
    m_disambiguation_isSet = !json[QString("disambiguation")].isNull() && m_disambiguation_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIContributor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContributor::asJsonObject() const {
    QJsonObject obj;
    if (m_contributor_name.isSet()) {
        obj.insert(QString("contributor_name"), ::OpenAPI::toJsonValue(m_contributor_name));
    }
    if (m_contributor_to.size() > 0) {
        obj.insert(QString("contributor_to"), ::OpenAPI::toJsonValue(m_contributor_to));
    }
    if (m_disambiguation_isSet) {
        obj.insert(QString("disambiguation"), ::OpenAPI::toJsonValue(m_disambiguation));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIContributor_name OAIContributor::getContributorName() const {
    return m_contributor_name;
}
void OAIContributor::setContributorName(const OAIContributor_name &contributor_name) {
    m_contributor_name = contributor_name;
    m_contributor_name_isSet = true;
}

bool OAIContributor::is_contributor_name_Set() const{
    return m_contributor_name_isSet;
}

bool OAIContributor::is_contributor_name_Valid() const{
    return m_contributor_name_isValid;
}

QList<OAIContributor_to> OAIContributor::getContributorTo() const {
    return m_contributor_to;
}
void OAIContributor::setContributorTo(const QList<OAIContributor_to> &contributor_to) {
    m_contributor_to = contributor_to;
    m_contributor_to_isSet = true;
}

bool OAIContributor::is_contributor_to_Set() const{
    return m_contributor_to_isSet;
}

bool OAIContributor::is_contributor_to_Valid() const{
    return m_contributor_to_isValid;
}

QString OAIContributor::getDisambiguation() const {
    return m_disambiguation;
}
void OAIContributor::setDisambiguation(const QString &disambiguation) {
    m_disambiguation = disambiguation;
    m_disambiguation_isSet = true;
}

bool OAIContributor::is_disambiguation_Set() const{
    return m_disambiguation_isSet;
}

bool OAIContributor::is_disambiguation_Valid() const{
    return m_disambiguation_isValid;
}

QString OAIContributor::getHref() const {
    return m_href;
}
void OAIContributor::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIContributor::is_href_Set() const{
    return m_href_isSet;
}

bool OAIContributor::is_href_Valid() const{
    return m_href_isValid;
}

OAIIdentifiers OAIContributor::getIdentifiers() const {
    return m_identifiers;
}
void OAIContributor::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIContributor::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIContributor::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIIds OAIContributor::getIds() const {
    return m_ids;
}
void OAIContributor::setIds(const OAIIds &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIContributor::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIContributor::is_ids_Valid() const{
    return m_ids_isValid;
}

QString OAIContributor::getPartner() const {
    return m_partner;
}
void OAIContributor::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIContributor::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIContributor::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIContributor::getPid() const {
    return m_pid;
}
void OAIContributor::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIContributor::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIContributor::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIContributor::getType() const {
    return m_type;
}
void OAIContributor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContributor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContributor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContributor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributor_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disambiguation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContributor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partner_isValid && m_pid_isValid && true;
}

} // namespace OpenAPI
