/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeed::OAIFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeed::OAIFeed() {
    this->initializeModel();
}

OAIFeed::~OAIFeed() {}

void OAIFeed::initializeModel() {

    m_deprecations_isSet = false;
    m_deprecations_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_mixins_isSet = false;
    m_mixins_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rel_isSet = false;
    m_rel_isValid = false;

    m_release_status_isSet = false;
    m_release_status_isValid = false;

    m_sorts_isSet = false;
    m_sorts_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeed::fromJsonObject(QJsonObject json) {

    m_deprecations_isValid = ::OpenAPI::fromJsonValue(m_deprecations, json[QString("deprecations")]);
    m_deprecations_isSet = !json[QString("deprecations")].isNull() && m_deprecations_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_mixins_isValid = ::OpenAPI::fromJsonValue(m_mixins, json[QString("mixins")]);
    m_mixins_isSet = !json[QString("mixins")].isNull() && m_mixins_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rel_isValid = ::OpenAPI::fromJsonValue(m_rel, json[QString("rel")]);
    m_rel_isSet = !json[QString("rel")].isNull() && m_rel_isValid;

    m_release_status_isValid = ::OpenAPI::fromJsonValue(m_release_status, json[QString("release_status")]);
    m_release_status_isSet = !json[QString("release_status")].isNull() && m_release_status_isValid;

    m_sorts_isValid = ::OpenAPI::fromJsonValue(m_sorts, json[QString("sorts")]);
    m_sorts_isSet = !json[QString("sorts")].isNull() && m_sorts_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecations.isSet()) {
        obj.insert(QString("deprecations"), ::OpenAPI::toJsonValue(m_deprecations));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_mixins.isSet()) {
        obj.insert(QString("mixins"), ::OpenAPI::toJsonValue(m_mixins));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rel_isSet) {
        obj.insert(QString("rel"), ::OpenAPI::toJsonValue(m_rel));
    }
    if (m_release_status.isSet()) {
        obj.insert(QString("release_status"), ::OpenAPI::toJsonValue(m_release_status));
    }
    if (m_sorts.isSet()) {
        obj.insert(QString("sorts"), ::OpenAPI::toJsonValue(m_sorts));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIDeprecations OAIFeed::getDeprecations() const {
    return m_deprecations;
}
void OAIFeed::setDeprecations(const OAIDeprecations &deprecations) {
    m_deprecations = deprecations;
    m_deprecations_isSet = true;
}

bool OAIFeed::is_deprecations_Set() const{
    return m_deprecations_isSet;
}

bool OAIFeed::is_deprecations_Valid() const{
    return m_deprecations_isValid;
}

OAIFilters OAIFeed::getFilters() const {
    return m_filters;
}
void OAIFeed::setFilters(const OAIFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIFeed::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIFeed::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIFeed::getHref() const {
    return m_href;
}
void OAIFeed::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIFeed::is_href_Set() const{
    return m_href_isSet;
}

bool OAIFeed::is_href_Valid() const{
    return m_href_isValid;
}

OAIMixins OAIFeed::getMixins() const {
    return m_mixins;
}
void OAIFeed::setMixins(const OAIMixins &mixins) {
    m_mixins = mixins;
    m_mixins_isSet = true;
}

bool OAIFeed::is_mixins_Set() const{
    return m_mixins_isSet;
}

bool OAIFeed::is_mixins_Valid() const{
    return m_mixins_isValid;
}

QString OAIFeed::getName() const {
    return m_name;
}
void OAIFeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeed::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFeed::getRel() const {
    return m_rel;
}
void OAIFeed::setRel(const QString &rel) {
    m_rel = rel;
    m_rel_isSet = true;
}

bool OAIFeed::is_rel_Set() const{
    return m_rel_isSet;
}

bool OAIFeed::is_rel_Valid() const{
    return m_rel_isValid;
}

OAIRelease_status_type OAIFeed::getReleaseStatus() const {
    return m_release_status;
}
void OAIFeed::setReleaseStatus(const OAIRelease_status_type &release_status) {
    m_release_status = release_status;
    m_release_status_isSet = true;
}

bool OAIFeed::is_release_status_Set() const{
    return m_release_status_isSet;
}

bool OAIFeed::is_release_status_Valid() const{
    return m_release_status_isValid;
}

OAISorts OAIFeed::getSorts() const {
    return m_sorts;
}
void OAIFeed::setSorts(const OAISorts &sorts) {
    m_sorts = sorts;
    m_sorts_isSet = true;
}

bool OAIFeed::is_sorts_Set() const{
    return m_sorts_isSet;
}

bool OAIFeed::is_sorts_Valid() const{
    return m_sorts_isValid;
}

QString OAIFeed::getTitle() const {
    return m_title;
}
void OAIFeed::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFeed::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFeed::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_name_isValid && m_rel_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
