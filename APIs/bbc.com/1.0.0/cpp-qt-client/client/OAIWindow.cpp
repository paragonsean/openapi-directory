/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindow::OAIWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindow::OAIWindow() {
    this->initializeModel();
}

OAIWindow::~OAIWindow() {}

void OAIWindow::initializeModel() {

    m_accurate_programme_time_isSet = false;
    m_accurate_programme_time_isValid = false;

    m_ancestor_titles_isSet = false;
    m_ancestor_titles_isValid = false;

    m_ancestors_titles_isSet = false;
    m_ancestors_titles_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_images_mixin_isSet = false;
    m_images_mixin_isValid = false;

    m_media_availability_time_isSet = false;
    m_media_availability_time_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_scheduled_publication_rights_isSet = false;
    m_scheduled_publication_rights_isValid = false;

    m_scheduled_time_isSet = false;
    m_scheduled_time_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_window_of_isSet = false;
    m_window_of_isValid = false;
}

void OAIWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindow::fromJsonObject(QJsonObject json) {

    m_accurate_programme_time_isValid = ::OpenAPI::fromJsonValue(m_accurate_programme_time, json[QString("accurate_programme_time")]);
    m_accurate_programme_time_isSet = !json[QString("accurate_programme_time")].isNull() && m_accurate_programme_time_isValid;

    m_ancestor_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestor_titles, json[QString("ancestor_titles")]);
    m_ancestor_titles_isSet = !json[QString("ancestor_titles")].isNull() && m_ancestor_titles_isValid;

    m_ancestors_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestors_titles, json[QString("ancestors_titles")]);
    m_ancestors_titles_isSet = !json[QString("ancestors_titles")].isNull() && m_ancestors_titles_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("image_link")]);
    m_image_link_isSet = !json[QString("image_link")].isNull() && m_image_link_isValid;

    m_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_images_mixin, json[QString("images_mixin")]);
    m_images_mixin_isSet = !json[QString("images_mixin")].isNull() && m_images_mixin_isValid;

    m_media_availability_time_isValid = ::OpenAPI::fromJsonValue(m_media_availability_time, json[QString("media_availability_time")]);
    m_media_availability_time_isSet = !json[QString("media_availability_time")].isNull() && m_media_availability_time_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_scheduled_publication_rights_isValid = ::OpenAPI::fromJsonValue(m_scheduled_publication_rights, json[QString("scheduled_publication_rights")]);
    m_scheduled_publication_rights_isSet = !json[QString("scheduled_publication_rights")].isNull() && m_scheduled_publication_rights_isValid;

    m_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time, json[QString("scheduled_time")]);
    m_scheduled_time_isSet = !json[QString("scheduled_time")].isNull() && m_scheduled_time_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_window_of_isValid = ::OpenAPI::fromJsonValue(m_window_of, json[QString("window_of")]);
    m_window_of_isSet = !json[QString("window_of")].isNull() && m_window_of_isValid;
}

QString OAIWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_accurate_programme_time.isSet()) {
        obj.insert(QString("accurate_programme_time"), ::OpenAPI::toJsonValue(m_accurate_programme_time));
    }
    if (m_ancestor_titles.isSet()) {
        obj.insert(QString("ancestor_titles"), ::OpenAPI::toJsonValue(m_ancestor_titles));
    }
    if (m_ancestors_titles.isSet()) {
        obj.insert(QString("ancestors_titles"), ::OpenAPI::toJsonValue(m_ancestors_titles));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_image_link.isSet()) {
        obj.insert(QString("image_link"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_images_mixin.isSet()) {
        obj.insert(QString("images_mixin"), ::OpenAPI::toJsonValue(m_images_mixin));
    }
    if (m_media_availability_time.isSet()) {
        obj.insert(QString("media_availability_time"), ::OpenAPI::toJsonValue(m_media_availability_time));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_scheduled_publication_rights.isSet()) {
        obj.insert(QString("scheduled_publication_rights"), ::OpenAPI::toJsonValue(m_scheduled_publication_rights));
    }
    if (m_scheduled_time.isSet()) {
        obj.insert(QString("scheduled_time"), ::OpenAPI::toJsonValue(m_scheduled_time));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_window_of.size() > 0) {
        obj.insert(QString("window_of"), ::OpenAPI::toJsonValue(m_window_of));
    }
    return obj;
}

OAIDateRange OAIWindow::getAccurateProgrammeTime() const {
    return m_accurate_programme_time;
}
void OAIWindow::setAccurateProgrammeTime(const OAIDateRange &accurate_programme_time) {
    m_accurate_programme_time = accurate_programme_time;
    m_accurate_programme_time_isSet = true;
}

bool OAIWindow::is_accurate_programme_time_Set() const{
    return m_accurate_programme_time_isSet;
}

bool OAIWindow::is_accurate_programme_time_Valid() const{
    return m_accurate_programme_time_isValid;
}

OAIAncestor_titles OAIWindow::getAncestorTitles() const {
    return m_ancestor_titles;
}
void OAIWindow::setAncestorTitles(const OAIAncestor_titles &ancestor_titles) {
    m_ancestor_titles = ancestor_titles;
    m_ancestor_titles_isSet = true;
}

bool OAIWindow::is_ancestor_titles_Set() const{
    return m_ancestor_titles_isSet;
}

bool OAIWindow::is_ancestor_titles_Valid() const{
    return m_ancestor_titles_isValid;
}

OAIAncestors_titles OAIWindow::getAncestorsTitles() const {
    return m_ancestors_titles;
}
void OAIWindow::setAncestorsTitles(const OAIAncestors_titles &ancestors_titles) {
    m_ancestors_titles = ancestors_titles;
    m_ancestors_titles_isSet = true;
}

bool OAIWindow::is_ancestors_titles_Set() const{
    return m_ancestors_titles_isSet;
}

bool OAIWindow::is_ancestors_titles_Valid() const{
    return m_ancestors_titles_isValid;
}

OAIIdentifiers OAIWindow::getIdentifiers() const {
    return m_identifiers;
}
void OAIWindow::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIWindow::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIWindow::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIIds OAIWindow::getIds() const {
    return m_ids;
}
void OAIWindow::setIds(const OAIIds &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIWindow::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIWindow::is_ids_Valid() const{
    return m_ids_isValid;
}

OAIImage_link OAIWindow::getImageLink() const {
    return m_image_link;
}
void OAIWindow::setImageLink(const OAIImage_link &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAIWindow::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAIWindow::is_image_link_Valid() const{
    return m_image_link_isValid;
}

OAIImages_mixin OAIWindow::getImagesMixin() const {
    return m_images_mixin;
}
void OAIWindow::setImagesMixin(const OAIImages_mixin &images_mixin) {
    m_images_mixin = images_mixin;
    m_images_mixin_isSet = true;
}

bool OAIWindow::is_images_mixin_Set() const{
    return m_images_mixin_isSet;
}

bool OAIWindow::is_images_mixin_Valid() const{
    return m_images_mixin_isValid;
}

OAIDateRange OAIWindow::getMediaAvailabilityTime() const {
    return m_media_availability_time;
}
void OAIWindow::setMediaAvailabilityTime(const OAIDateRange &media_availability_time) {
    m_media_availability_time = media_availability_time;
    m_media_availability_time_isSet = true;
}

bool OAIWindow::is_media_availability_time_Set() const{
    return m_media_availability_time_isSet;
}

bool OAIWindow::is_media_availability_time_Valid() const{
    return m_media_availability_time_isValid;
}

QString OAIWindow::getPartner() const {
    return m_partner;
}
void OAIWindow::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIWindow::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIWindow::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIWindow::getPid() const {
    return m_pid;
}
void OAIWindow::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIWindow::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIWindow::is_pid_Valid() const{
    return m_pid_isValid;
}

OAIScheduled_publication_rights OAIWindow::getScheduledPublicationRights() const {
    return m_scheduled_publication_rights;
}
void OAIWindow::setScheduledPublicationRights(const OAIScheduled_publication_rights &scheduled_publication_rights) {
    m_scheduled_publication_rights = scheduled_publication_rights;
    m_scheduled_publication_rights_isSet = true;
}

bool OAIWindow::is_scheduled_publication_rights_Set() const{
    return m_scheduled_publication_rights_isSet;
}

bool OAIWindow::is_scheduled_publication_rights_Valid() const{
    return m_scheduled_publication_rights_isValid;
}

OAIScheduled_time OAIWindow::getScheduledTime() const {
    return m_scheduled_time;
}
void OAIWindow::setScheduledTime(const OAIScheduled_time &scheduled_time) {
    m_scheduled_time = scheduled_time;
    m_scheduled_time_isSet = true;
}

bool OAIWindow::is_scheduled_time_Set() const{
    return m_scheduled_time_isSet;
}

bool OAIWindow::is_scheduled_time_Valid() const{
    return m_scheduled_time_isValid;
}

OAIServiceReference OAIWindow::getService() const {
    return m_service;
}
void OAIWindow::setService(const OAIServiceReference &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIWindow::is_service_Set() const{
    return m_service_isSet;
}

bool OAIWindow::is_service_Valid() const{
    return m_service_isValid;
}

QDateTime OAIWindow::getUpdatedTime() const {
    return m_updated_time;
}
void OAIWindow::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIWindow::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIWindow::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QList<OAIPidReference> OAIWindow::getWindowOf() const {
    return m_window_of;
}
void OAIWindow::setWindowOf(const QList<OAIPidReference> &window_of) {
    m_window_of = window_of;
    m_window_of_isSet = true;
}

bool OAIWindow::is_window_of_Set() const{
    return m_window_of_isSet;
}

bool OAIWindow::is_window_of_Valid() const{
    return m_window_of_isValid;
}

bool OAIWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accurate_programme_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestor_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_availability_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_publication_rights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_of.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partner_isValid && m_pid_isValid && true;
}

} // namespace OpenAPI
