/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPidReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPidReference::OAIPidReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPidReference::OAIPidReference() {
    this->initializeModel();
}

OAIPidReference::~OAIPidReference() {}

void OAIPidReference::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;
}

void OAIPidReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPidReference::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("result_type")]);
    m_result_type_isSet = !json[QString("result_type")].isNull() && m_result_type_isValid;
}

QString OAIPidReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPidReference::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("result_type"), ::OpenAPI::toJsonValue(m_result_type));
    }
    return obj;
}

QString OAIPidReference::getHref() const {
    return m_href;
}
void OAIPidReference::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPidReference::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPidReference::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIPidReference::getPid() const {
    return m_pid;
}
void OAIPidReference::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIPidReference::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIPidReference::is_pid_Valid() const{
    return m_pid_isValid;
}

qint32 OAIPidReference::getPosition() const {
    return m_position;
}
void OAIPidReference::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPidReference::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPidReference::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPidReference::getResultType() const {
    return m_result_type;
}
void OAIPidReference::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIPidReference::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIPidReference::is_result_type_Valid() const{
    return m_result_type_isValid;
}

bool OAIPidReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPidReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pid_isValid && m_result_type_isValid && true;
}

} // namespace OpenAPI
