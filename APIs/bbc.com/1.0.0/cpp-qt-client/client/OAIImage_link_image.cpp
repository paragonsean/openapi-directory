/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage_link_image.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage_link_image::OAIImage_link_image(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage_link_image::OAIImage_link_image() {
    this->initializeModel();
}

OAIImage_link_image::~OAIImage_link_image() {}

void OAIImage_link_image::initializeModel() {

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_deprecated_since_isSet = false;
    m_deprecated_since_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;
}

void OAIImage_link_image::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage_link_image::fromJsonObject(QJsonObject json) {

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_deprecated_since_isValid = ::OpenAPI::fromJsonValue(m_deprecated_since, json[QString("deprecated_since")]);
    m_deprecated_since_isSet = !json[QString("deprecated_since")].isNull() && m_deprecated_since_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("template_url")]);
    m_template_url_isSet = !json[QString("template_url")].isNull() && m_template_url_isValid;
}

QString OAIImage_link_image::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage_link_image::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_deprecated_since_isSet) {
        obj.insert(QString("deprecated_since"), ::OpenAPI::toJsonValue(m_deprecated_since));
    }
    if (m_replaced_by_isSet) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("template_url"), ::OpenAPI::toJsonValue(m_template_url));
    }
    return obj;
}

bool OAIImage_link_image::isDeprecated() const {
    return m_deprecated;
}
void OAIImage_link_image::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIImage_link_image::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIImage_link_image::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIImage_link_image::getDeprecatedSince() const {
    return m_deprecated_since;
}
void OAIImage_link_image::setDeprecatedSince(const QString &deprecated_since) {
    m_deprecated_since = deprecated_since;
    m_deprecated_since_isSet = true;
}

bool OAIImage_link_image::is_deprecated_since_Set() const{
    return m_deprecated_since_isSet;
}

bool OAIImage_link_image::is_deprecated_since_Valid() const{
    return m_deprecated_since_isValid;
}

QString OAIImage_link_image::getReplacedBy() const {
    return m_replaced_by;
}
void OAIImage_link_image::setReplacedBy(const QString &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAIImage_link_image::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAIImage_link_image::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

OAIImage_link_image_anyOf_image OAIImage_link_image::getImage() const {
    return m_image;
}
void OAIImage_link_image::setImage(const OAIImage_link_image_anyOf_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImage_link_image::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImage_link_image::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIImage_link_image::getPid() const {
    return m_pid;
}
void OAIImage_link_image::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIImage_link_image::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIImage_link_image::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIImage_link_image::getTemplateUrl() const {
    return m_template_url;
}
void OAIImage_link_image::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIImage_link_image::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIImage_link_image::is_template_url_Valid() const{
    return m_template_url_isValid;
}

bool OAIImage_link_image::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage_link_image::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deprecated_isValid && m_deprecated_since_isValid && m_replaced_by_isValid && m_image_isValid && m_template_url_isValid && true;
}

} // namespace OpenAPI
