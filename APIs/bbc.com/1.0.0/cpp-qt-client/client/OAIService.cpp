/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_is_concrete_isSet = false;
    m_is_concrete_isValid = false;

    m_is_downloadable_isSet = false;
    m_is_downloadable_isValid = false;

    m_is_streamable_isSet = false;
    m_is_streamable_isValid = false;

    m_master_brand_link_isSet = false;
    m_master_brand_link_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("date_range")]);
    m_date_range_isSet = !json[QString("date_range")].isNull() && m_date_range_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_is_concrete_isValid = ::OpenAPI::fromJsonValue(m_is_concrete, json[QString("is_concrete")]);
    m_is_concrete_isSet = !json[QString("is_concrete")].isNull() && m_is_concrete_isValid;

    m_is_downloadable_isValid = ::OpenAPI::fromJsonValue(m_is_downloadable, json[QString("is_downloadable")]);
    m_is_downloadable_isSet = !json[QString("is_downloadable")].isNull() && m_is_downloadable_isValid;

    m_is_streamable_isValid = ::OpenAPI::fromJsonValue(m_is_streamable, json[QString("is_streamable")]);
    m_is_streamable_isSet = !json[QString("is_streamable")].isNull() && m_is_streamable_isValid;

    m_master_brand_link_isValid = ::OpenAPI::fromJsonValue(m_master_brand_link, json[QString("master_brand_link")]);
    m_master_brand_link_isSet = !json[QString("master_brand_link")].isNull() && m_master_brand_link_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("date_range"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_is_concrete_isSet) {
        obj.insert(QString("is_concrete"), ::OpenAPI::toJsonValue(m_is_concrete));
    }
    if (m_is_downloadable_isSet) {
        obj.insert(QString("is_downloadable"), ::OpenAPI::toJsonValue(m_is_downloadable));
    }
    if (m_is_streamable_isSet) {
        obj.insert(QString("is_streamable"), ::OpenAPI::toJsonValue(m_is_streamable));
    }
    if (m_master_brand_link.isSet()) {
        obj.insert(QString("master_brand_link"), ::OpenAPI::toJsonValue(m_master_brand_link));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    return obj;
}

OAIDateRange OAIService::getDateRange() const {
    return m_date_range;
}
void OAIService::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIService::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIService::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QString OAIService::getDescription() const {
    return m_description;
}
void OAIService::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIService::is_description_Set() const{
    return m_description_isSet;
}

bool OAIService::is_description_Valid() const{
    return m_description_isValid;
}

OAIIdentifiers OAIService::getIdentifiers() const {
    return m_identifiers;
}
void OAIService::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIService::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIService::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIIds OAIService::getIds() const {
    return m_ids;
}
void OAIService::setIds(const OAIIds &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIService::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIService::is_ids_Valid() const{
    return m_ids_isValid;
}

bool OAIService::isIsConcrete() const {
    return m_is_concrete;
}
void OAIService::setIsConcrete(const bool &is_concrete) {
    m_is_concrete = is_concrete;
    m_is_concrete_isSet = true;
}

bool OAIService::is_is_concrete_Set() const{
    return m_is_concrete_isSet;
}

bool OAIService::is_is_concrete_Valid() const{
    return m_is_concrete_isValid;
}

bool OAIService::isIsDownloadable() const {
    return m_is_downloadable;
}
void OAIService::setIsDownloadable(const bool &is_downloadable) {
    m_is_downloadable = is_downloadable;
    m_is_downloadable_isSet = true;
}

bool OAIService::is_is_downloadable_Set() const{
    return m_is_downloadable_isSet;
}

bool OAIService::is_is_downloadable_Valid() const{
    return m_is_downloadable_isValid;
}

bool OAIService::isIsStreamable() const {
    return m_is_streamable;
}
void OAIService::setIsStreamable(const bool &is_streamable) {
    m_is_streamable = is_streamable;
    m_is_streamable_isSet = true;
}

bool OAIService::is_is_streamable_Set() const{
    return m_is_streamable_isSet;
}

bool OAIService::is_is_streamable_Valid() const{
    return m_is_streamable_isValid;
}

OAIMaster_brand_link OAIService::getMasterBrandLink() const {
    return m_master_brand_link;
}
void OAIService::setMasterBrandLink(const OAIMaster_brand_link &master_brand_link) {
    m_master_brand_link = master_brand_link;
    m_master_brand_link_isSet = true;
}

bool OAIService::is_master_brand_link_Set() const{
    return m_master_brand_link_isSet;
}

bool OAIService::is_master_brand_link_Valid() const{
    return m_master_brand_link_isValid;
}

OAIMedia_type OAIService::getMediaType() const {
    return m_media_type;
}
void OAIService::setMediaType(const OAIMedia_type &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIService::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIService::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIService::getPartner() const {
    return m_partner;
}
void OAIService::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIService::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIService::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIService::getRegion() const {
    return m_region;
}
void OAIService::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIService::is_region_Set() const{
    return m_region_isSet;
}

bool OAIService::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIService::getSid() const {
    return m_sid;
}
void OAIService::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIService::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIService::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIService::getType() const {
    return m_type;
}
void OAIService::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIService::is_type_Set() const{
    return m_type_isSet;
}

bool OAIService::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIService::getUpdatedTime() const {
    return m_updated_time;
}
void OAIService::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIService::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIService::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_concrete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_downloadable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_streamable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partner_isValid && m_sid_isValid && true;
}

} // namespace OpenAPI
