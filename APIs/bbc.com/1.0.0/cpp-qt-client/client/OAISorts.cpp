/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISorts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISorts::OAISorts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISorts::OAISorts() {
    this->initializeModel();
}

OAISorts::~OAISorts() {}

void OAISorts::initializeModel() {

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_unstable_sorts_isSet = false;
    m_unstable_sorts_isValid = false;
}

void OAISorts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISorts::fromJsonObject(QJsonObject json) {

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_unstable_sorts_isValid = ::OpenAPI::fromJsonValue(m_unstable_sorts, json[QString("unstable_sorts")]);
    m_unstable_sorts_isSet = !json[QString("unstable_sorts")].isNull() && m_unstable_sorts_isValid;
}

QString OAISorts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISorts::asJsonObject() const {
    QJsonObject obj;
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_unstable_sorts.isSet()) {
        obj.insert(QString("unstable_sorts"), ::OpenAPI::toJsonValue(m_unstable_sorts));
    }
    return obj;
}

QList<OAISort> OAISorts::getSort() const {
    return m_sort;
}
void OAISorts::setSort(const QList<OAISort> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISorts::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISorts::is_sort_Valid() const{
    return m_sort_isValid;
}

OAIUnstable_sorts OAISorts::getUnstableSorts() const {
    return m_unstable_sorts;
}
void OAISorts::setUnstableSorts(const OAIUnstable_sorts &unstable_sorts) {
    m_unstable_sorts = unstable_sorts;
    m_unstable_sorts_isSet = true;
}

bool OAISorts::is_unstable_sorts_Set() const{
    return m_unstable_sorts_isSet;
}

bool OAISorts::is_unstable_sorts_Valid() const{
    return m_unstable_sorts_isValid;
}

bool OAISorts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unstable_sorts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISorts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
