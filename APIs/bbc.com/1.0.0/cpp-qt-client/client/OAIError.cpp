/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_error_name_isSet = false;
    m_error_name_isValid = false;

    m_expr_isSet = false;
    m_expr_isValid = false;

    m_format_string_isSet = false;
    m_format_string_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_retryable_isSet = false;
    m_retryable_isValid = false;

    m_xquery_version_isSet = false;
    m_xquery_version_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_error_name_isValid = ::OpenAPI::fromJsonValue(m_error_name, json[QString("error-name")]);
    m_error_name_isSet = !json[QString("error-name")].isNull() && m_error_name_isValid;

    m_expr_isValid = ::OpenAPI::fromJsonValue(m_expr, json[QString("expr")]);
    m_expr_isSet = !json[QString("expr")].isNull() && m_expr_isValid;

    m_format_string_isValid = ::OpenAPI::fromJsonValue(m_format_string, json[QString("format-string")]);
    m_format_string_isSet = !json[QString("format-string")].isNull() && m_format_string_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_retryable_isValid = ::OpenAPI::fromJsonValue(m_retryable, json[QString("retryable")]);
    m_retryable_isSet = !json[QString("retryable")].isNull() && m_retryable_isValid;

    m_xquery_version_isValid = ::OpenAPI::fromJsonValue(m_xquery_version, json[QString("xquery-version")]);
    m_xquery_version_isSet = !json[QString("xquery-version")].isNull() && m_xquery_version_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_error_name_isSet) {
        obj.insert(QString("error-name"), ::OpenAPI::toJsonValue(m_error_name));
    }
    if (m_expr_isSet) {
        obj.insert(QString("expr"), ::OpenAPI::toJsonValue(m_expr));
    }
    if (m_format_string_isSet) {
        obj.insert(QString("format-string"), ::OpenAPI::toJsonValue(m_format_string));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_retryable_isSet) {
        obj.insert(QString("retryable"), ::OpenAPI::toJsonValue(m_retryable));
    }
    if (m_xquery_version.isSet()) {
        obj.insert(QString("xquery-version"), ::OpenAPI::toJsonValue(m_xquery_version));
    }
    return obj;
}

QString OAIError::getCode() const {
    return m_code;
}
void OAIError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIError::is_code_Valid() const{
    return m_code_isValid;
}

OAIData OAIError::getData() const {
    return m_data;
}
void OAIError::setData(const OAIData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIError::is_data_Set() const{
    return m_data_isSet;
}

bool OAIError::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIError::getErrorName() const {
    return m_error_name;
}
void OAIError::setErrorName(const QString &error_name) {
    m_error_name = error_name;
    m_error_name_isSet = true;
}

bool OAIError::is_error_name_Set() const{
    return m_error_name_isSet;
}

bool OAIError::is_error_name_Valid() const{
    return m_error_name_isValid;
}

QString OAIError::getExpr() const {
    return m_expr;
}
void OAIError::setExpr(const QString &expr) {
    m_expr = expr;
    m_expr_isSet = true;
}

bool OAIError::is_expr_Set() const{
    return m_expr_isSet;
}

bool OAIError::is_expr_Valid() const{
    return m_expr_isValid;
}

QString OAIError::getFormatString() const {
    return m_format_string;
}
void OAIError::setFormatString(const QString &format_string) {
    m_format_string = format_string;
    m_format_string_isSet = true;
}

bool OAIError::is_format_string_Set() const{
    return m_format_string_isSet;
}

bool OAIError::is_format_string_Valid() const{
    return m_format_string_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIError::isRetryable() const {
    return m_retryable;
}
void OAIError::setRetryable(const bool &retryable) {
    m_retryable = retryable;
    m_retryable_isSet = true;
}

bool OAIError::is_retryable_Set() const{
    return m_retryable_isSet;
}

bool OAIError::is_retryable_Valid() const{
    return m_retryable_isValid;
}

OAIXquery_version OAIError::getXqueryVersion() const {
    return m_xquery_version;
}
void OAIError::setXqueryVersion(const OAIXquery_version &xquery_version) {
    m_xquery_version = xquery_version;
    m_xquery_version_isSet = true;
}

bool OAIError::is_xquery_version_Set() const{
    return m_xquery_version_isSet;
}

bool OAIError::is_xquery_version_Valid() const{
    return m_xquery_version_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retryable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xquery_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_data_isValid && m_error_name_isValid && m_expr_isValid && m_format_string_isValid && m_message_isValid && m_retryable_isValid && m_xquery_version_isValid && true;
}

} // namespace OpenAPI
