/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailable_versions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailable_versions::OAIAvailable_versions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailable_versions::OAIAvailable_versions() {
    this->initializeModel();
}

OAIAvailable_versions::~OAIAvailable_versions() {}

void OAIAvailable_versions::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_available_versions_element_isSet = false;
    m_available_versions_element_isValid = false;
}

void OAIAvailable_versions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailable_versions::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_available_versions_element_isValid = ::OpenAPI::fromJsonValue(m_available_versions_element, json[QString("available_versions_element")]);
    m_available_versions_element_isSet = !json[QString("available_versions_element")].isNull() && m_available_versions_element_isValid;
}

QString OAIAvailable_versions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailable_versions::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_available_versions_element.isSet()) {
        obj.insert(QString("available_versions_element"), ::OpenAPI::toJsonValue(m_available_versions_element));
    }
    return obj;
}

qint32 OAIAvailable_versions::getAvailable() const {
    return m_available;
}
void OAIAvailable_versions::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIAvailable_versions::is_available_Set() const{
    return m_available_isSet;
}

bool OAIAvailable_versions::is_available_Valid() const{
    return m_available_isValid;
}

OAIAvailable_versions_element OAIAvailable_versions::getAvailableVersionsElement() const {
    return m_available_versions_element;
}
void OAIAvailable_versions::setAvailableVersionsElement(const OAIAvailable_versions_element &available_versions_element) {
    m_available_versions_element = available_versions_element;
    m_available_versions_element_isSet = true;
}

bool OAIAvailable_versions::is_available_versions_element_Set() const{
    return m_available_versions_element_isSet;
}

bool OAIAvailable_versions::is_available_versions_element_Valid() const{
    return m_available_versions_element_isValid;
}

bool OAIAvailable_versions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_versions_element.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailable_versions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_available_versions_element_isValid && true;
}

} // namespace OpenAPI
