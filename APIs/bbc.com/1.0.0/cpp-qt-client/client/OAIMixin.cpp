/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMixin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMixin::OAIMixin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMixin::OAIMixin() {
    this->initializeModel();
}

OAIMixin::~OAIMixin() {}

void OAIMixin::initializeModel() {

    m_affected_by_isSet = false;
    m_affected_by_isValid = false;

    m_dependency_on_isSet = false;
    m_dependency_on_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_deprecated_since_isSet = false;
    m_deprecated_since_isValid = false;

    m_guaranteed_until_isSet = false;
    m_guaranteed_until_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prohibits_isSet = false;
    m_prohibits_isValid = false;

    m_release_status_isSet = false;
    m_release_status_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIMixin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMixin::fromJsonObject(QJsonObject json) {

    m_affected_by_isValid = ::OpenAPI::fromJsonValue(m_affected_by, json[QString("affected_by")]);
    m_affected_by_isSet = !json[QString("affected_by")].isNull() && m_affected_by_isValid;

    m_dependency_on_isValid = ::OpenAPI::fromJsonValue(m_dependency_on, json[QString("dependency_on")]);
    m_dependency_on_isSet = !json[QString("dependency_on")].isNull() && m_dependency_on_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("depends_on")]);
    m_depends_on_isSet = !json[QString("depends_on")].isNull() && m_depends_on_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_deprecated_since_isValid = ::OpenAPI::fromJsonValue(m_deprecated_since, json[QString("deprecated_since")]);
    m_deprecated_since_isSet = !json[QString("deprecated_since")].isNull() && m_deprecated_since_isValid;

    m_guaranteed_until_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_until, json[QString("guaranteed_until")]);
    m_guaranteed_until_isSet = !json[QString("guaranteed_until")].isNull() && m_guaranteed_until_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prohibits_isValid = ::OpenAPI::fromJsonValue(m_prohibits, json[QString("prohibits")]);
    m_prohibits_isSet = !json[QString("prohibits")].isNull() && m_prohibits_isValid;

    m_release_status_isValid = ::OpenAPI::fromJsonValue(m_release_status, json[QString("release_status")]);
    m_release_status_isSet = !json[QString("release_status")].isNull() && m_release_status_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIMixin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMixin::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_by.size() > 0) {
        obj.insert(QString("affected_by"), ::OpenAPI::toJsonValue(m_affected_by));
    }
    if (m_dependency_on.size() > 0) {
        obj.insert(QString("dependency_on"), ::OpenAPI::toJsonValue(m_dependency_on));
    }
    if (m_depends_on_isSet) {
        obj.insert(QString("depends_on"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_deprecated_since_isSet) {
        obj.insert(QString("deprecated_since"), ::OpenAPI::toJsonValue(m_deprecated_since));
    }
    if (m_guaranteed_until_isSet) {
        obj.insert(QString("guaranteed_until"), ::OpenAPI::toJsonValue(m_guaranteed_until));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prohibits.size() > 0) {
        obj.insert(QString("prohibits"), ::OpenAPI::toJsonValue(m_prohibits));
    }
    if (m_release_status.isSet()) {
        obj.insert(QString("release_status"), ::OpenAPI::toJsonValue(m_release_status));
    }
    if (m_replaced_by_isSet) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIAffected_by> OAIMixin::getAffectedBy() const {
    return m_affected_by;
}
void OAIMixin::setAffectedBy(const QList<OAIAffected_by> &affected_by) {
    m_affected_by = affected_by;
    m_affected_by_isSet = true;
}

bool OAIMixin::is_affected_by_Set() const{
    return m_affected_by_isSet;
}

bool OAIMixin::is_affected_by_Valid() const{
    return m_affected_by_isValid;
}

QList<OAIDependency_on> OAIMixin::getDependencyOn() const {
    return m_dependency_on;
}
void OAIMixin::setDependencyOn(const QList<OAIDependency_on> &dependency_on) {
    m_dependency_on = dependency_on;
    m_dependency_on_isSet = true;
}

bool OAIMixin::is_dependency_on_Set() const{
    return m_dependency_on_isSet;
}

bool OAIMixin::is_dependency_on_Valid() const{
    return m_dependency_on_isValid;
}

QString OAIMixin::getDependsOn() const {
    return m_depends_on;
}
void OAIMixin::setDependsOn(const QString &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIMixin::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIMixin::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

bool OAIMixin::isDeprecated() const {
    return m_deprecated;
}
void OAIMixin::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIMixin::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIMixin::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIMixin::getDeprecatedSince() const {
    return m_deprecated_since;
}
void OAIMixin::setDeprecatedSince(const QString &deprecated_since) {
    m_deprecated_since = deprecated_since;
    m_deprecated_since_isSet = true;
}

bool OAIMixin::is_deprecated_since_Set() const{
    return m_deprecated_since_isSet;
}

bool OAIMixin::is_deprecated_since_Valid() const{
    return m_deprecated_since_isValid;
}

QString OAIMixin::getGuaranteedUntil() const {
    return m_guaranteed_until;
}
void OAIMixin::setGuaranteedUntil(const QString &guaranteed_until) {
    m_guaranteed_until = guaranteed_until;
    m_guaranteed_until_isSet = true;
}

bool OAIMixin::is_guaranteed_until_Set() const{
    return m_guaranteed_until_isSet;
}

bool OAIMixin::is_guaranteed_until_Valid() const{
    return m_guaranteed_until_isValid;
}

QString OAIMixin::getHref() const {
    return m_href;
}
void OAIMixin::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIMixin::is_href_Set() const{
    return m_href_isSet;
}

bool OAIMixin::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIMixin::getName() const {
    return m_name;
}
void OAIMixin::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMixin::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMixin::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProhibits> OAIMixin::getProhibits() const {
    return m_prohibits;
}
void OAIMixin::setProhibits(const QList<OAIProhibits> &prohibits) {
    m_prohibits = prohibits;
    m_prohibits_isSet = true;
}

bool OAIMixin::is_prohibits_Set() const{
    return m_prohibits_isSet;
}

bool OAIMixin::is_prohibits_Valid() const{
    return m_prohibits_isValid;
}

OAIRelease_status_type OAIMixin::getReleaseStatus() const {
    return m_release_status;
}
void OAIMixin::setReleaseStatus(const OAIRelease_status_type &release_status) {
    m_release_status = release_status;
    m_release_status_isSet = true;
}

bool OAIMixin::is_release_status_Set() const{
    return m_release_status_isSet;
}

bool OAIMixin::is_release_status_Valid() const{
    return m_release_status_isValid;
}

QString OAIMixin::getReplacedBy() const {
    return m_replaced_by;
}
void OAIMixin::setReplacedBy(const QString &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAIMixin::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAIMixin::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

QString OAIMixin::getTitle() const {
    return m_title;
}
void OAIMixin::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMixin::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMixin::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIMixin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependency_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prohibits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMixin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
