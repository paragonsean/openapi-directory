/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_deprecated_since_isSet = false;
    m_deprecated_since_isValid = false;

    m_guaranteed_until_isSet = false;
    m_guaranteed_until_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_multiple_values_isSet = false;
    m_multiple_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_option_isSet = false;
    m_option_isValid = false;

    m_prefer_isSet = false;
    m_prefer_isValid = false;

    m_prohibits_isSet = false;
    m_prohibits_isValid = false;

    m_release_status_isSet = false;
    m_release_status_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("depends_on")]);
    m_depends_on_isSet = !json[QString("depends_on")].isNull() && m_depends_on_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_deprecated_since_isValid = ::OpenAPI::fromJsonValue(m_deprecated_since, json[QString("deprecated_since")]);
    m_deprecated_since_isSet = !json[QString("deprecated_since")].isNull() && m_deprecated_since_isValid;

    m_guaranteed_until_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_until, json[QString("guaranteed_until")]);
    m_guaranteed_until_isSet = !json[QString("guaranteed_until")].isNull() && m_guaranteed_until_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("max_value")]);
    m_max_value_isSet = !json[QString("max_value")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("min_value")]);
    m_min_value_isSet = !json[QString("min_value")].isNull() && m_min_value_isValid;

    m_multiple_values_isValid = ::OpenAPI::fromJsonValue(m_multiple_values, json[QString("multiple_values")]);
    m_multiple_values_isSet = !json[QString("multiple_values")].isNull() && m_multiple_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_prefer_isValid = ::OpenAPI::fromJsonValue(m_prefer, json[QString("prefer")]);
    m_prefer_isSet = !json[QString("prefer")].isNull() && m_prefer_isValid;

    m_prohibits_isValid = ::OpenAPI::fromJsonValue(m_prohibits, json[QString("prohibits")]);
    m_prohibits_isSet = !json[QString("prohibits")].isNull() && m_prohibits_isValid;

    m_release_status_isValid = ::OpenAPI::fromJsonValue(m_release_status, json[QString("release_status")]);
    m_release_status_isSet = !json[QString("release_status")].isNull() && m_release_status_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_depends_on_isSet) {
        obj.insert(QString("depends_on"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_deprecated_since_isSet) {
        obj.insert(QString("deprecated_since"), ::OpenAPI::toJsonValue(m_deprecated_since));
    }
    if (m_guaranteed_until_isSet) {
        obj.insert(QString("guaranteed_until"), ::OpenAPI::toJsonValue(m_guaranteed_until));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("max_value"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("min_value"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_multiple_values_isSet) {
        obj.insert(QString("multiple_values"), ::OpenAPI::toJsonValue(m_multiple_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_option.size() > 0) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_prefer_isSet) {
        obj.insert(QString("prefer"), ::OpenAPI::toJsonValue(m_prefer));
    }
    if (m_prohibits.size() > 0) {
        obj.insert(QString("prohibits"), ::OpenAPI::toJsonValue(m_prohibits));
    }
    if (m_release_status.isSet()) {
        obj.insert(QString("release_status"), ::OpenAPI::toJsonValue(m_release_status));
    }
    if (m_replaced_by_isSet) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFilter::getRDefault() const {
    return m_r_default;
}
void OAIFilter::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIFilter::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIFilter::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIFilter::getDependsOn() const {
    return m_depends_on;
}
void OAIFilter::setDependsOn(const QString &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIFilter::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIFilter::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

bool OAIFilter::isDeprecated() const {
    return m_deprecated;
}
void OAIFilter::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIFilter::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIFilter::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIFilter::getDeprecatedSince() const {
    return m_deprecated_since;
}
void OAIFilter::setDeprecatedSince(const QString &deprecated_since) {
    m_deprecated_since = deprecated_since;
    m_deprecated_since_isSet = true;
}

bool OAIFilter::is_deprecated_since_Set() const{
    return m_deprecated_since_isSet;
}

bool OAIFilter::is_deprecated_since_Valid() const{
    return m_deprecated_since_isValid;
}

QString OAIFilter::getGuaranteedUntil() const {
    return m_guaranteed_until;
}
void OAIFilter::setGuaranteedUntil(const QString &guaranteed_until) {
    m_guaranteed_until = guaranteed_until;
    m_guaranteed_until_isSet = true;
}

bool OAIFilter::is_guaranteed_until_Set() const{
    return m_guaranteed_until_isSet;
}

bool OAIFilter::is_guaranteed_until_Valid() const{
    return m_guaranteed_until_isValid;
}

qint32 OAIFilter::getMaxValue() const {
    return m_max_value;
}
void OAIFilter::setMaxValue(const qint32 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIFilter::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIFilter::is_max_value_Valid() const{
    return m_max_value_isValid;
}

qint32 OAIFilter::getMinValue() const {
    return m_min_value;
}
void OAIFilter::setMinValue(const qint32 &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIFilter::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIFilter::is_min_value_Valid() const{
    return m_min_value_isValid;
}

bool OAIFilter::isMultipleValues() const {
    return m_multiple_values;
}
void OAIFilter::setMultipleValues(const bool &multiple_values) {
    m_multiple_values = multiple_values;
    m_multiple_values_isSet = true;
}

bool OAIFilter::is_multiple_values_Set() const{
    return m_multiple_values_isSet;
}

bool OAIFilter::is_multiple_values_Valid() const{
    return m_multiple_values_isValid;
}

QString OAIFilter::getName() const {
    return m_name;
}
void OAIFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFilter::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOption> OAIFilter::getOption() const {
    return m_option;
}
void OAIFilter::setOption(const QList<OAIOption> &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAIFilter::is_option_Set() const{
    return m_option_isSet;
}

bool OAIFilter::is_option_Valid() const{
    return m_option_isValid;
}

QString OAIFilter::getPrefer() const {
    return m_prefer;
}
void OAIFilter::setPrefer(const QString &prefer) {
    m_prefer = prefer;
    m_prefer_isSet = true;
}

bool OAIFilter::is_prefer_Set() const{
    return m_prefer_isSet;
}

bool OAIFilter::is_prefer_Valid() const{
    return m_prefer_isValid;
}

QList<OAIProhibits> OAIFilter::getProhibits() const {
    return m_prohibits;
}
void OAIFilter::setProhibits(const QList<OAIProhibits> &prohibits) {
    m_prohibits = prohibits;
    m_prohibits_isSet = true;
}

bool OAIFilter::is_prohibits_Set() const{
    return m_prohibits_isSet;
}

bool OAIFilter::is_prohibits_Valid() const{
    return m_prohibits_isValid;
}

OAIRelease_status_type OAIFilter::getReleaseStatus() const {
    return m_release_status;
}
void OAIFilter::setReleaseStatus(const OAIRelease_status_type &release_status) {
    m_release_status = release_status;
    m_release_status_isSet = true;
}

bool OAIFilter::is_release_status_Set() const{
    return m_release_status_isSet;
}

bool OAIFilter::is_release_status_Valid() const{
    return m_release_status_isValid;
}

QString OAIFilter::getReplacedBy() const {
    return m_replaced_by;
}
void OAIFilter::setReplacedBy(const QString &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAIFilter::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAIFilter::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

bool OAIFilter::isRequired() const {
    return m_required;
}
void OAIFilter::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIFilter::is_required_Set() const{
    return m_required_isSet;
}

bool OAIFilter::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIFilter::getTitle() const {
    return m_title;
}
void OAIFilter::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFilter::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFilter::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFilter::getType() const {
    return m_type;
}
void OAIFilter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFilter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFilter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prohibits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
