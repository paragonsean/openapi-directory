/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage_link_image_anyOf_image.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage_link_image_anyOf_image::OAIImage_link_image_anyOf_image(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage_link_image_anyOf_image::OAIImage_link_image_anyOf_image() {
    this->initializeModel();
}

OAIImage_link_image_anyOf_image::~OAIImage_link_image_anyOf_image() {}

void OAIImage_link_image_anyOf_image::initializeModel() {

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;
}

void OAIImage_link_image_anyOf_image::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage_link_image_anyOf_image::fromJsonObject(QJsonObject json) {

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("template_url")]);
    m_template_url_isSet = !json[QString("template_url")].isNull() && m_template_url_isValid;
}

QString OAIImage_link_image_anyOf_image::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage_link_image_anyOf_image::asJsonObject() const {
    QJsonObject obj;
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("template_url"), ::OpenAPI::toJsonValue(m_template_url));
    }
    return obj;
}

QString OAIImage_link_image_anyOf_image::getPid() const {
    return m_pid;
}
void OAIImage_link_image_anyOf_image::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIImage_link_image_anyOf_image::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIImage_link_image_anyOf_image::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIImage_link_image_anyOf_image::getTemplateUrl() const {
    return m_template_url;
}
void OAIImage_link_image_anyOf_image::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIImage_link_image_anyOf_image::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIImage_link_image_anyOf_image::is_template_url_Valid() const{
    return m_template_url_isValid;
}

bool OAIImage_link_image_anyOf_image::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage_link_image_anyOf_image::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_template_url_isValid && true;
}

} // namespace OpenAPI
