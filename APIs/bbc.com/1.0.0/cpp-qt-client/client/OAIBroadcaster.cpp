/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBroadcaster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBroadcaster::OAIBroadcaster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBroadcaster::OAIBroadcaster() {
    this->initializeModel();
}

OAIBroadcaster::~OAIBroadcaster() {}

void OAIBroadcaster::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;
}

void OAIBroadcaster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBroadcaster::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("result_type")]);
    m_result_type_isSet = !json[QString("result_type")].isNull() && m_result_type_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;
}

QString OAIBroadcaster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBroadcaster::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("result_type"), ::OpenAPI::toJsonValue(m_result_type));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    return obj;
}

QString OAIBroadcaster::getHref() const {
    return m_href;
}
void OAIBroadcaster::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIBroadcaster::is_href_Set() const{
    return m_href_isSet;
}

bool OAIBroadcaster::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIBroadcaster::getResultType() const {
    return m_result_type;
}
void OAIBroadcaster::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIBroadcaster::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIBroadcaster::is_result_type_Valid() const{
    return m_result_type_isValid;
}

QString OAIBroadcaster::getSid() const {
    return m_sid;
}
void OAIBroadcaster::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIBroadcaster::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIBroadcaster::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAIBroadcaster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBroadcaster::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_result_type_isValid && m_sid_isValid && true;
}

} // namespace OpenAPI
