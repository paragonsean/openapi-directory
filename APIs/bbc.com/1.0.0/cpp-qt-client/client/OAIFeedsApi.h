/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeedsApi_H
#define OAI_OAIFeedsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAINitro.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeedsApi : public QObject {
    Q_OBJECT

public:
    OAIFeedsApi(const int timeOut = 0);
    ~OAIFeedsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  availability QList<QString> [optional]
    * @param[in]  descendants_of QList<QString> [optional]
    * @param[in]  media_set QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  territory QList<QString> [optional]
    * @param[in]  debug bool [optional]
    */
    virtual void listAvailability(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &descendants_of = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &media_set = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &territory = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &debug = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  authority QList<QString> [optional]
    * @param[in]  descendants_of QList<QString> [optional]
    * @param[in]  end_from QDateTime [optional]
    * @param[in]  end_to QDateTime [optional]
    * @param[in]  format QList<QString> [optional]
    * @param[in]  genre QList<QString> [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  item QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  people QString [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  schedule_day QDate [optional]
    * @param[in]  schedule_day_from QDate [optional]
    * @param[in]  schedule_day_to QDate [optional]
    * @param[in]  service_master_brand QList<QString> [optional]
    * @param[in]  sid QList<QString> [optional]
    * @param[in]  start_from QDateTime [optional]
    * @param[in]  start_to QDateTime [optional]
    * @param[in]  version QList<QString> [optional]
    */
    virtual void listBroadcasts(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &authority = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &descendants_of = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &end_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &format = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &item = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &people = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &schedule_day = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &schedule_day_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &schedule_day_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &service_master_brand = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &version = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  for_descendants_of QString [optional]
    * @param[in]  for_programme QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  group_type QList<QString> [optional]
    * @param[in]  member QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  embargoed QString [optional]
    */
    virtual void listGroups(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &for_descendants_of = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &for_programme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &group_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &member = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &embargoed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  image_type QList<QString> [optional]
    * @param[in]  is_alternate_image_for QString [optional]
    * @param[in]  is_image_for QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  embargoed QString [optional]
    */
    virtual void listImages(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &is_alternate_image_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_image_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &embargoed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  authority QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  id_type QString [optional]
    * @param[in]  item_type QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  people QString [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  programme QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  segment_event QString [optional]
    */
    virtual void listItems(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &authority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &item_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &people = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &programme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_event = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  mid QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  q QString [optional]
    */
    virtual void listMasterbrands(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &mid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authority QString [optional]
    * @param[in]  has_external_id QList<QString> [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  id_type QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  programme QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void listPeople(const ::OpenAPI::OptionalParam<QString> &authority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &has_external_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &programme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  q QString [optional]
    */
    virtual void listPips(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_pid QString [optional]
    * @param[in]  pid QString [optional]
    */
    virtual void listProgrammeDetails(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partner_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  audio_described QList<QString> [optional]
    * @param[in]  availability QList<QString> [optional]
    * @param[in]  availability_entity_type QList<QString> [optional]
    * @param[in]  availability_from QDateTime [optional]
    * @param[in]  availability_type QList<QString> [optional]
    * @param[in]  children_of QList<QString> [optional]
    * @param[in]  descendants_of QList<QString> [optional]
    * @param[in]  duration QList<QString> [optional]
    * @param[in]  entity_type QList<QString> [optional]
    * @param[in]  format QList<QString> [optional]
    * @param[in]  genre QList<QString> [optional]
    * @param[in]  group QString [optional]
    * @param[in]  initial_letter QString [optional]
    * @param[in]  initial_letter_end QString [optional]
    * @param[in]  initial_letter_start QString [optional]
    * @param[in]  initial_letter_strict QList<QString> [optional]
    * @param[in]  item QList<QString> [optional]
    * @param[in]  master_brand QList<QString> [optional]
    * @param[in]  media_set QString [optional]
    * @param[in]  media_type QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  payment_type QList<QString> [optional]
    * @param[in]  people QString [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  promoted_for QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  r_signed QList<QString> [optional]
    * @param[in]  tag_name QString [optional]
    * @param[in]  tag_scheme QString [optional]
    * @param[in]  tleo QList<QString> [optional]
    * @param[in]  version QList<QString> [optional]
    * @param[in]  embargoed QString [optional]
    */
    virtual void listProgrammes(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &audio_described = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_entity_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &availability_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &children_of = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &descendants_of = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &duration = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &entity_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &format = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &initial_letter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &initial_letter_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &initial_letter_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &initial_letter_strict = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &item = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &master_brand = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &media_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &media_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &payment_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &people = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &promoted_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &r_signed = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &tag_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag_scheme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tleo = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &version = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &embargoed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  context QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  promoted_by QList<QString> [optional]
    * @param[in]  promoted_for QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  status QList<QString> [optional]
    */
    virtual void listPromotions(const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &promoted_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &promoted_for = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  mixin QList<QString> [optional]
    * @param[in]  authority QList<QString> [optional]
    * @param[in]  descendants_of QList<QString> [optional]
    * @param[in]  end_from QDateTime [optional]
    * @param[in]  end_to QDateTime [optional]
    * @param[in]  format QList<QString> [optional]
    * @param[in]  genre QList<QString> [optional]
    * @param[in]  group QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  id_type QList<QString> [optional]
    * @param[in]  item QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  people QString [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  repeat bool [optional]
    * @param[in]  schedule_day QDate [optional]
    * @param[in]  schedule_day_from QDate [optional]
    * @param[in]  schedule_day_to QDate [optional]
    * @param[in]  service_master_brand QList<QString> [optional]
    * @param[in]  sid QList<QString> [optional]
    * @param[in]  start_from QDateTime [optional]
    * @param[in]  start_to QDateTime [optional]
    * @param[in]  version QList<QString> [optional]
    */
    virtual void listSchedules(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &authority = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &descendants_of = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &end_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &format = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &id_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &item = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &people = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &repeat = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &schedule_day = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &schedule_day_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &schedule_day_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &service_master_brand = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &version = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  end_from QDateTime [optional]
    * @param[in]  end_to QDateTime [optional]
    * @param[in]  mid QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  service_type QList<QString> [optional]
    * @param[in]  sid QList<QString> [optional]
    * @param[in]  start_from QDateTime [optional]
    * @param[in]  start_to QDateTime [optional]
    */
    virtual void listServices(const ::OpenAPI::OptionalParam<QDateTime> &end_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &mid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &service_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_to = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  availability QList<QString> [optional]
    * @param[in]  descendants_of QList<QString> [optional]
    * @param[in]  media_set QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  partner_id QList<QString> [optional]
    * @param[in]  partner_pid QList<QString> [optional]
    * @param[in]  payment_type QList<QString> [optional]
    * @param[in]  pid QList<QString> [optional]
    * @param[in]  embargoed QString [optional]
    */
    virtual void listVersions(const ::OpenAPI::OptionalParam<QList<QString>> &availability = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &descendants_of = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &media_set = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &partner_pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &payment_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &pid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &embargoed = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listAvailabilityCallback(OAIHttpRequestWorker *worker);
    void listBroadcastsCallback(OAIHttpRequestWorker *worker);
    void listGroupsCallback(OAIHttpRequestWorker *worker);
    void listImagesCallback(OAIHttpRequestWorker *worker);
    void listItemsCallback(OAIHttpRequestWorker *worker);
    void listMasterbrandsCallback(OAIHttpRequestWorker *worker);
    void listPeopleCallback(OAIHttpRequestWorker *worker);
    void listPipsCallback(OAIHttpRequestWorker *worker);
    void listProgrammeDetailsCallback(OAIHttpRequestWorker *worker);
    void listProgrammesCallback(OAIHttpRequestWorker *worker);
    void listPromotionsCallback(OAIHttpRequestWorker *worker);
    void listSchedulesCallback(OAIHttpRequestWorker *worker);
    void listServicesCallback(OAIHttpRequestWorker *worker);
    void listVersionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listAvailabilitySignal(OAINitro summary);
    void listBroadcastsSignal(OAINitro summary);
    void listGroupsSignal(OAINitro summary);
    void listImagesSignal(OAINitro summary);
    void listItemsSignal(OAINitro summary);
    void listMasterbrandsSignal(OAINitro summary);
    void listPeopleSignal(OAINitro summary);
    void listPipsSignal(OAINitro summary);
    void listProgrammeDetailsSignal(OAINitro summary);
    void listProgrammesSignal(OAINitro summary);
    void listPromotionsSignal(OAINitro summary);
    void listSchedulesSignal(OAINitro summary);
    void listServicesSignal(OAINitro summary);
    void listVersionsSignal(OAINitro summary);


    void listAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listBroadcastsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listGroupsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listImagesSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listItemsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listMasterbrandsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listPeopleSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listPipsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listProgrammeDetailsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listProgrammesSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listPromotionsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listSchedulesSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listServicesSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);
    void listVersionsSignalFull(OAIHttpRequestWorker *worker, OAINitro summary);

    Q_DECL_DEPRECATED_X("Use listAvailabilitySignalError() instead")
    void listAvailabilitySignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAvailabilitySignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBroadcastsSignalError() instead")
    void listBroadcastsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBroadcastsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupsSignalError() instead")
    void listGroupsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImagesSignalError() instead")
    void listImagesSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImagesSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listItemsSignalError() instead")
    void listItemsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listItemsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMasterbrandsSignalError() instead")
    void listMasterbrandsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMasterbrandsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPeopleSignalError() instead")
    void listPeopleSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPeopleSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPipsSignalError() instead")
    void listPipsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPipsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProgrammeDetailsSignalError() instead")
    void listProgrammeDetailsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProgrammeDetailsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProgrammesSignalError() instead")
    void listProgrammesSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProgrammesSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPromotionsSignalError() instead")
    void listPromotionsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPromotionsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSchedulesSignalError() instead")
    void listSchedulesSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSchedulesSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalError() instead")
    void listServicesSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVersionsSignalError() instead")
    void listVersionsSignalE(OAINitro summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVersionsSignalError(OAINitro summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listAvailabilitySignalErrorFull() instead")
    void listAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBroadcastsSignalErrorFull() instead")
    void listBroadcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBroadcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupsSignalErrorFull() instead")
    void listGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImagesSignalErrorFull() instead")
    void listImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listItemsSignalErrorFull() instead")
    void listItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMasterbrandsSignalErrorFull() instead")
    void listMasterbrandsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMasterbrandsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPeopleSignalErrorFull() instead")
    void listPeopleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPeopleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPipsSignalErrorFull() instead")
    void listPipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProgrammeDetailsSignalErrorFull() instead")
    void listProgrammeDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProgrammeDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProgrammesSignalErrorFull() instead")
    void listProgrammesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProgrammesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPromotionsSignalErrorFull() instead")
    void listPromotionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPromotionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSchedulesSignalErrorFull() instead")
    void listSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalErrorFull() instead")
    void listServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVersionsSignalErrorFull() instead")
    void listVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
