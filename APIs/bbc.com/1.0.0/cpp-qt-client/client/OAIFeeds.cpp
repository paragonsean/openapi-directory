/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeeds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeeds::OAIFeeds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeeds::OAIFeeds() {
    this->initializeModel();
}

OAIFeeds::~OAIFeeds() {}

void OAIFeeds::initializeModel() {

    m_deployment_root_isSet = false;
    m_deployment_root_isValid = false;

    m_deprecations_isSet = false;
    m_deprecations_isValid = false;

    m_feed_isSet = false;
    m_feed_isValid = false;
}

void OAIFeeds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeeds::fromJsonObject(QJsonObject json) {

    m_deployment_root_isValid = ::OpenAPI::fromJsonValue(m_deployment_root, json[QString("deployment_root")]);
    m_deployment_root_isSet = !json[QString("deployment_root")].isNull() && m_deployment_root_isValid;

    m_deprecations_isValid = ::OpenAPI::fromJsonValue(m_deprecations, json[QString("deprecations")]);
    m_deprecations_isSet = !json[QString("deprecations")].isNull() && m_deprecations_isValid;

    m_feed_isValid = ::OpenAPI::fromJsonValue(m_feed, json[QString("feed")]);
    m_feed_isSet = !json[QString("feed")].isNull() && m_feed_isValid;
}

QString OAIFeeds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeeds::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_root_isSet) {
        obj.insert(QString("deployment_root"), ::OpenAPI::toJsonValue(m_deployment_root));
    }
    if (m_deprecations.isSet()) {
        obj.insert(QString("deprecations"), ::OpenAPI::toJsonValue(m_deprecations));
    }
    if (m_feed.size() > 0) {
        obj.insert(QString("feed"), ::OpenAPI::toJsonValue(m_feed));
    }
    return obj;
}

QString OAIFeeds::getDeploymentRoot() const {
    return m_deployment_root;
}
void OAIFeeds::setDeploymentRoot(const QString &deployment_root) {
    m_deployment_root = deployment_root;
    m_deployment_root_isSet = true;
}

bool OAIFeeds::is_deployment_root_Set() const{
    return m_deployment_root_isSet;
}

bool OAIFeeds::is_deployment_root_Valid() const{
    return m_deployment_root_isValid;
}

OAIDeprecations OAIFeeds::getDeprecations() const {
    return m_deprecations;
}
void OAIFeeds::setDeprecations(const OAIDeprecations &deprecations) {
    m_deprecations = deprecations;
    m_deprecations_isSet = true;
}

bool OAIFeeds::is_deprecations_Set() const{
    return m_deprecations_isSet;
}

bool OAIFeeds::is_deprecations_Valid() const{
    return m_deprecations_isValid;
}

QList<OAIFeed> OAIFeeds::getFeed() const {
    return m_feed;
}
void OAIFeeds::setFeed(const QList<OAIFeed> &feed) {
    m_feed = feed;
    m_feed_isSet = true;
}

bool OAIFeeds::is_feed_Set() const{
    return m_feed_isSet;
}

bool OAIFeeds::is_feed_Valid() const{
    return m_feed_isValid;
}

bool OAIFeeds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeeds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
