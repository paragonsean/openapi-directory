/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_embargoed_isSet = false;
    m_embargoed_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_shoot_date_isSet = false;
    m_shoot_date_isValid = false;

    m_source_asset_isSet = false;
    m_source_asset_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_embargoed_isValid = ::OpenAPI::fromJsonValue(m_embargoed, json[QString("embargoed")]);
    m_embargoed_isSet = !json[QString("embargoed")].isNull() && m_embargoed_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_shoot_date_isValid = ::OpenAPI::fromJsonValue(m_shoot_date, json[QString("shoot_date")]);
    m_shoot_date_isSet = !json[QString("shoot_date")].isNull() && m_shoot_date_isValid;

    m_source_asset_isValid = ::OpenAPI::fromJsonValue(m_source_asset, json[QString("source_asset")]);
    m_source_asset_isSet = !json[QString("source_asset")].isNull() && m_source_asset_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("template_url")]);
    m_template_url_isSet = !json[QString("template_url")].isNull() && m_template_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_embargoed.isSet()) {
        obj.insert(QString("embargoed"), ::OpenAPI::toJsonValue(m_embargoed));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_shoot_date_isSet) {
        obj.insert(QString("shoot_date"), ::OpenAPI::toJsonValue(m_shoot_date));
    }
    if (m_source_asset.isSet()) {
        obj.insert(QString("source_asset"), ::OpenAPI::toJsonValue(m_source_asset));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("template_url"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImage::getAuthor() const {
    return m_author;
}
void OAIImage::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIImage::is_author_Set() const{
    return m_author_isSet;
}

bool OAIImage::is_author_Valid() const{
    return m_author_isValid;
}

OAIEmbargoed OAIImage::getEmbargoed() const {
    return m_embargoed;
}
void OAIImage::setEmbargoed(const OAIEmbargoed &embargoed) {
    m_embargoed = embargoed;
    m_embargoed_isSet = true;
}

bool OAIImage::is_embargoed_Set() const{
    return m_embargoed_isSet;
}

bool OAIImage::is_embargoed_Valid() const{
    return m_embargoed_isValid;
}

OAIIdentifiers OAIImage::getIdentifiers() const {
    return m_identifiers;
}
void OAIImage::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIImage::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIImage::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIImage::getPartner() const {
    return m_partner;
}
void OAIImage::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIImage::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIImage::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIImage::getPid() const {
    return m_pid;
}
void OAIImage::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIImage::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIImage::is_pid_Valid() const{
    return m_pid_isValid;
}

QDateTime OAIImage::getShootDate() const {
    return m_shoot_date;
}
void OAIImage::setShootDate(const QDateTime &shoot_date) {
    m_shoot_date = shoot_date;
    m_shoot_date_isSet = true;
}

bool OAIImage::is_shoot_date_Set() const{
    return m_shoot_date_isSet;
}

bool OAIImage::is_shoot_date_Valid() const{
    return m_shoot_date_isValid;
}

OAISource_asset OAIImage::getSourceAsset() const {
    return m_source_asset;
}
void OAIImage::setSourceAsset(const OAISource_asset &source_asset) {
    m_source_asset = source_asset;
    m_source_asset_isSet = true;
}

bool OAIImage::is_source_asset_Set() const{
    return m_source_asset_isSet;
}

bool OAIImage::is_source_asset_Valid() const{
    return m_source_asset_isValid;
}

OAISynopses OAIImage::getSynopses() const {
    return m_synopses;
}
void OAIImage::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIImage::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIImage::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIImage::getTemplateUrl() const {
    return m_template_url;
}
void OAIImage::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIImage::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIImage::is_template_url_Valid() const{
    return m_template_url_isValid;
}

QString OAIImage::getTitle() const {
    return m_title;
}
void OAIImage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIImage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIImage::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIImage::getType() const {
    return m_type;
}
void OAIImage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImage::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargoed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shoot_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_embargoed_isValid && m_partner_isValid && m_pid_isValid && true;
}

} // namespace OpenAPI
