/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrevious_next_mixin_previous_next_previous_next.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrevious_next_mixin_previous_next_previous_next::OAIPrevious_next_mixin_previous_next_previous_next(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrevious_next_mixin_previous_next_previous_next::OAIPrevious_next_mixin_previous_next_previous_next() {
    this->initializeModel();
}

OAIPrevious_next_mixin_previous_next_previous_next::~OAIPrevious_next_mixin_previous_next_previous_next() {}

void OAIPrevious_next_mixin_previous_next_previous_next::initializeModel() {

    m_next_isSet = false;
    m_next_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;
}

void OAIPrevious_next_mixin_previous_next_previous_next::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrevious_next_mixin_previous_next_previous_next::fromJsonObject(QJsonObject json) {

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;
}

QString OAIPrevious_next_mixin_previous_next_previous_next::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrevious_next_mixin_previous_next_previous_next::asJsonObject() const {
    QJsonObject obj;
    if (m_next.isSet()) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_previous.isSet()) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    return obj;
}

OAIReference OAIPrevious_next_mixin_previous_next_previous_next::getNext() const {
    return m_next;
}
void OAIPrevious_next_mixin_previous_next_previous_next::setNext(const OAIReference &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIPrevious_next_mixin_previous_next_previous_next::is_next_Set() const{
    return m_next_isSet;
}

bool OAIPrevious_next_mixin_previous_next_previous_next::is_next_Valid() const{
    return m_next_isValid;
}

OAIReference OAIPrevious_next_mixin_previous_next_previous_next::getPrevious() const {
    return m_previous;
}
void OAIPrevious_next_mixin_previous_next_previous_next::setPrevious(const OAIReference &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIPrevious_next_mixin_previous_next_previous_next::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIPrevious_next_mixin_previous_next_previous_next::is_previous_Valid() const{
    return m_previous_isValid;
}

bool OAIPrevious_next_mixin_previous_next_previous_next::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrevious_next_mixin_previous_next_previous_next::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
