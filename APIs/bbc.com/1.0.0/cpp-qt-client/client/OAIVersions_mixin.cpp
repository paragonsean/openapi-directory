/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersions_mixin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersions_mixin::OAIVersions_mixin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersions_mixin::OAIVersions_mixin() {
    this->initializeModel();
}

OAIVersions_mixin::~OAIVersions_mixin() {}

void OAIVersions_mixin::initializeModel() {

    m_available_simulcasts_isSet = false;
    m_available_simulcasts_isValid = false;

    m_available_versions_isSet = false;
    m_available_versions_isValid = false;

    m_available_webcasts_isSet = false;
    m_available_webcasts_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIVersions_mixin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersions_mixin::fromJsonObject(QJsonObject json) {

    m_available_simulcasts_isValid = ::OpenAPI::fromJsonValue(m_available_simulcasts, json[QString("available_simulcasts")]);
    m_available_simulcasts_isSet = !json[QString("available_simulcasts")].isNull() && m_available_simulcasts_isValid;

    m_available_versions_isValid = ::OpenAPI::fromJsonValue(m_available_versions, json[QString("available_versions")]);
    m_available_versions_isSet = !json[QString("available_versions")].isNull() && m_available_versions_isValid;

    m_available_webcasts_isValid = ::OpenAPI::fromJsonValue(m_available_webcasts, json[QString("available_webcasts")]);
    m_available_webcasts_isSet = !json[QString("available_webcasts")].isNull() && m_available_webcasts_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIVersions_mixin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersions_mixin::asJsonObject() const {
    QJsonObject obj;
    if (m_available_simulcasts.isSet()) {
        obj.insert(QString("available_simulcasts"), ::OpenAPI::toJsonValue(m_available_simulcasts));
    }
    if (m_available_versions.isSet()) {
        obj.insert(QString("available_versions"), ::OpenAPI::toJsonValue(m_available_versions));
    }
    if (m_available_webcasts.isSet()) {
        obj.insert(QString("available_webcasts"), ::OpenAPI::toJsonValue(m_available_webcasts));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

OAIAvailable_simulcasts OAIVersions_mixin::getAvailableSimulcasts() const {
    return m_available_simulcasts;
}
void OAIVersions_mixin::setAvailableSimulcasts(const OAIAvailable_simulcasts &available_simulcasts) {
    m_available_simulcasts = available_simulcasts;
    m_available_simulcasts_isSet = true;
}

bool OAIVersions_mixin::is_available_simulcasts_Set() const{
    return m_available_simulcasts_isSet;
}

bool OAIVersions_mixin::is_available_simulcasts_Valid() const{
    return m_available_simulcasts_isValid;
}

OAIAvailable_versions OAIVersions_mixin::getAvailableVersions() const {
    return m_available_versions;
}
void OAIVersions_mixin::setAvailableVersions(const OAIAvailable_versions &available_versions) {
    m_available_versions = available_versions;
    m_available_versions_isSet = true;
}

bool OAIVersions_mixin::is_available_versions_Set() const{
    return m_available_versions_isSet;
}

bool OAIVersions_mixin::is_available_versions_Valid() const{
    return m_available_versions_isValid;
}

OAIAvailable_webcasts OAIVersions_mixin::getAvailableWebcasts() const {
    return m_available_webcasts;
}
void OAIVersions_mixin::setAvailableWebcasts(const OAIAvailable_webcasts &available_webcasts) {
    m_available_webcasts = available_webcasts;
    m_available_webcasts_isSet = true;
}

bool OAIVersions_mixin::is_available_webcasts_Set() const{
    return m_available_webcasts_isSet;
}

bool OAIVersions_mixin::is_available_webcasts_Valid() const{
    return m_available_webcasts_isValid;
}

QList<OAIVersions> OAIVersions_mixin::getVersions() const {
    return m_versions;
}
void OAIVersions_mixin::setVersions(const QList<OAIVersions> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIVersions_mixin::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIVersions_mixin::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIVersions_mixin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_simulcasts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_webcasts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersions_mixin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
