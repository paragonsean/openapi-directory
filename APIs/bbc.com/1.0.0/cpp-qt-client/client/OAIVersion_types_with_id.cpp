/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion_types_with_id.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion_types_with_id::OAIVersion_types_with_id(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion_types_with_id::OAIVersion_types_with_id() {
    this->initializeModel();
}

OAIVersion_types_with_id::~OAIVersion_types_with_id() {}

void OAIVersion_types_with_id::initializeModel() {

    m_version_types_isSet = false;
    m_version_types_isValid = false;
}

void OAIVersion_types_with_id::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion_types_with_id::fromJsonObject(QJsonObject json) {

    m_version_types_isValid = ::OpenAPI::fromJsonValue(m_version_types, json[QString("version_types")]);
    m_version_types_isSet = !json[QString("version_types")].isNull() && m_version_types_isValid;
}

QString OAIVersion_types_with_id::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion_types_with_id::asJsonObject() const {
    QJsonObject obj;
    if (m_version_types.isSet()) {
        obj.insert(QString("version_types"), ::OpenAPI::toJsonValue(m_version_types));
    }
    return obj;
}

OAIVersion_types_with_id_version_types OAIVersion_types_with_id::getVersionTypes() const {
    return m_version_types;
}
void OAIVersion_types_with_id::setVersionTypes(const OAIVersion_types_with_id_version_types &version_types) {
    m_version_types = version_types;
    m_version_types_isSet = true;
}

bool OAIVersion_types_with_id::is_version_types_Set() const{
    return m_version_types_isSet;
}

bool OAIVersion_types_with_id::is_version_types_Valid() const{
    return m_version_types_isValid;
}

bool OAIVersion_types_with_id::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion_types_with_id::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_version_types_isValid && true;
}

} // namespace OpenAPI
