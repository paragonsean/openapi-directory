/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaster_brand_synopses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaster_brand_synopses::OAIMaster_brand_synopses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaster_brand_synopses::OAIMaster_brand_synopses() {
    this->initializeModel();
}

OAIMaster_brand_synopses::~OAIMaster_brand_synopses() {}

void OAIMaster_brand_synopses::initializeModel() {

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_r_short_isSet = false;
    m_r_short_isValid = false;
}

void OAIMaster_brand_synopses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaster_brand_synopses::fromJsonObject(QJsonObject json) {

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_r_short_isValid = ::OpenAPI::fromJsonValue(m_r_short, json[QString("short")]);
    m_r_short_isSet = !json[QString("short")].isNull() && m_r_short_isValid;
}

QString OAIMaster_brand_synopses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaster_brand_synopses::asJsonObject() const {
    QJsonObject obj;
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_r_short_isSet) {
        obj.insert(QString("short"), ::OpenAPI::toJsonValue(m_r_short));
    }
    return obj;
}

QString OAIMaster_brand_synopses::getRLong() const {
    return m_r_long;
}
void OAIMaster_brand_synopses::setRLong(const QString &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAIMaster_brand_synopses::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIMaster_brand_synopses::is_r_long_Valid() const{
    return m_r_long_isValid;
}

QString OAIMaster_brand_synopses::getMedium() const {
    return m_medium;
}
void OAIMaster_brand_synopses::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIMaster_brand_synopses::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIMaster_brand_synopses::is_medium_Valid() const{
    return m_medium_isValid;
}

QString OAIMaster_brand_synopses::getRShort() const {
    return m_r_short;
}
void OAIMaster_brand_synopses::setRShort(const QString &r_short) {
    m_r_short = r_short;
    m_r_short_isSet = true;
}

bool OAIMaster_brand_synopses::is_r_short_Set() const{
    return m_r_short_isSet;
}

bool OAIMaster_brand_synopses::is_r_short_Valid() const{
    return m_r_short_isValid;
}

bool OAIMaster_brand_synopses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_short_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaster_brand_synopses::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
