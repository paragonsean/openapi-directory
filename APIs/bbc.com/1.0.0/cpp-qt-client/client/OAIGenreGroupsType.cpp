/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenreGroupsType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenreGroupsType::OAIGenreGroupsType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenreGroupsType::OAIGenreGroupsType() {
    this->initializeModel();
}

OAIGenreGroupsType::~OAIGenreGroupsType() {}

void OAIGenreGroupsType::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_deprecated_since_isSet = false;
    m_deprecated_since_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_genre_group_isSet = false;
    m_genre_group_isValid = false;
}

void OAIGenreGroupsType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenreGroupsType::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("result_type")]);
    m_result_type_isSet = !json[QString("result_type")].isNull() && m_result_type_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_deprecated_since_isValid = ::OpenAPI::fromJsonValue(m_deprecated_since, json[QString("deprecated_since")]);
    m_deprecated_since_isSet = !json[QString("deprecated_since")].isNull() && m_deprecated_since_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_genre_group_isValid = ::OpenAPI::fromJsonValue(m_genre_group, json[QString("genre_group")]);
    m_genre_group_isSet = !json[QString("genre_group")].isNull() && m_genre_group_isValid;
}

QString OAIGenreGroupsType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenreGroupsType::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("result_type"), ::OpenAPI::toJsonValue(m_result_type));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_deprecated_since_isSet) {
        obj.insert(QString("deprecated_since"), ::OpenAPI::toJsonValue(m_deprecated_since));
    }
    if (m_replaced_by_isSet) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_genre_group.size() > 0) {
        obj.insert(QString("genre_group"), ::OpenAPI::toJsonValue(m_genre_group));
    }
    return obj;
}

QString OAIGenreGroupsType::getHref() const {
    return m_href;
}
void OAIGenreGroupsType::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIGenreGroupsType::is_href_Set() const{
    return m_href_isSet;
}

bool OAIGenreGroupsType::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIGenreGroupsType::getResultType() const {
    return m_result_type;
}
void OAIGenreGroupsType::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIGenreGroupsType::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIGenreGroupsType::is_result_type_Valid() const{
    return m_result_type_isValid;
}

bool OAIGenreGroupsType::isDeprecated() const {
    return m_deprecated;
}
void OAIGenreGroupsType::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIGenreGroupsType::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIGenreGroupsType::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIGenreGroupsType::getDeprecatedSince() const {
    return m_deprecated_since;
}
void OAIGenreGroupsType::setDeprecatedSince(const QString &deprecated_since) {
    m_deprecated_since = deprecated_since;
    m_deprecated_since_isSet = true;
}

bool OAIGenreGroupsType::is_deprecated_since_Set() const{
    return m_deprecated_since_isSet;
}

bool OAIGenreGroupsType::is_deprecated_since_Valid() const{
    return m_deprecated_since_isValid;
}

QString OAIGenreGroupsType::getReplacedBy() const {
    return m_replaced_by;
}
void OAIGenreGroupsType::setReplacedBy(const QString &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAIGenreGroupsType::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAIGenreGroupsType::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

QList<OAIGenre_group> OAIGenreGroupsType::getGenreGroup() const {
    return m_genre_group;
}
void OAIGenreGroupsType::setGenreGroup(const QList<OAIGenre_group> &genre_group) {
    m_genre_group = genre_group;
    m_genre_group_isSet = true;
}

bool OAIGenreGroupsType::is_genre_group_Set() const{
    return m_genre_group_isSet;
}

bool OAIGenreGroupsType::is_genre_group_Valid() const{
    return m_genre_group_isValid;
}

bool OAIGenreGroupsType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenreGroupsType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_result_type_isValid && m_deprecated_isValid && m_deprecated_since_isValid && m_replaced_by_isValid && true;
}

} // namespace OpenAPI
