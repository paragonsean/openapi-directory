/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromotion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromotion::OAIPromotion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromotion::OAIPromotion() {
    this->initializeModel();
}

OAIPromotion::~OAIPromotion() {}

void OAIPromotion::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_promoted_by_isSet = false;
    m_promoted_by_isValid = false;

    m_promoted_for_isSet = false;
    m_promoted_for_isValid = false;

    m_promotion_of_isSet = false;
    m_promotion_of_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPromotion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromotion::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_promoted_by_isValid = ::OpenAPI::fromJsonValue(m_promoted_by, json[QString("promoted_by")]);
    m_promoted_by_isSet = !json[QString("promoted_by")].isNull() && m_promoted_by_isValid;

    m_promoted_for_isValid = ::OpenAPI::fromJsonValue(m_promoted_for, json[QString("promoted_for")]);
    m_promoted_for_isSet = !json[QString("promoted_for")].isNull() && m_promoted_for_isValid;

    m_promotion_of_isValid = ::OpenAPI::fromJsonValue(m_promotion_of, json[QString("promotion_of")]);
    m_promotion_of_isSet = !json[QString("promotion_of")].isNull() && m_promotion_of_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("related_links")]);
    m_related_links_isSet = !json[QString("related_links")].isNull() && m_related_links_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPromotion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromotion::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_promoted_by_isSet) {
        obj.insert(QString("promoted_by"), ::OpenAPI::toJsonValue(m_promoted_by));
    }
    if (m_promoted_for_isSet) {
        obj.insert(QString("promoted_for"), ::OpenAPI::toJsonValue(m_promoted_for));
    }
    if (m_promotion_of.isSet()) {
        obj.insert(QString("promotion_of"), ::OpenAPI::toJsonValue(m_promotion_of));
    }
    if (m_related_links.isSet()) {
        obj.insert(QString("related_links"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIContext OAIPromotion::getContext() const {
    return m_context;
}
void OAIPromotion::setContext(const OAIContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIPromotion::is_context_Set() const{
    return m_context_isSet;
}

bool OAIPromotion::is_context_Valid() const{
    return m_context_isValid;
}

QDateTime OAIPromotion::getEndTime() const {
    return m_end_time;
}
void OAIPromotion::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPromotion::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPromotion::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIIdentifiers OAIPromotion::getIdentifiers() const {
    return m_identifiers;
}
void OAIPromotion::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIPromotion::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIPromotion::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIPromotion::getPartner() const {
    return m_partner;
}
void OAIPromotion::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIPromotion::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIPromotion::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIPromotion::getPid() const {
    return m_pid;
}
void OAIPromotion::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIPromotion::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIPromotion::is_pid_Valid() const{
    return m_pid_isValid;
}

qint32 OAIPromotion::getPriority() const {
    return m_priority;
}
void OAIPromotion::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIPromotion::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIPromotion::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIPromotion::getPromotedBy() const {
    return m_promoted_by;
}
void OAIPromotion::setPromotedBy(const QString &promoted_by) {
    m_promoted_by = promoted_by;
    m_promoted_by_isSet = true;
}

bool OAIPromotion::is_promoted_by_Set() const{
    return m_promoted_by_isSet;
}

bool OAIPromotion::is_promoted_by_Valid() const{
    return m_promoted_by_isValid;
}

QString OAIPromotion::getPromotedFor() const {
    return m_promoted_for;
}
void OAIPromotion::setPromotedFor(const QString &promoted_for) {
    m_promoted_for = promoted_for;
    m_promoted_for_isSet = true;
}

bool OAIPromotion::is_promoted_for_Set() const{
    return m_promoted_for_isSet;
}

bool OAIPromotion::is_promoted_for_Valid() const{
    return m_promoted_for_isValid;
}

OAIPidReference OAIPromotion::getPromotionOf() const {
    return m_promotion_of;
}
void OAIPromotion::setPromotionOf(const OAIPidReference &promotion_of) {
    m_promotion_of = promotion_of;
    m_promotion_of_isSet = true;
}

bool OAIPromotion::is_promotion_of_Set() const{
    return m_promotion_of_isSet;
}

bool OAIPromotion::is_promotion_of_Valid() const{
    return m_promotion_of_isValid;
}

OAIRelated_links OAIPromotion::getRelatedLinks() const {
    return m_related_links;
}
void OAIPromotion::setRelatedLinks(const OAIRelated_links &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAIPromotion::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAIPromotion::is_related_links_Valid() const{
    return m_related_links_isValid;
}

QDateTime OAIPromotion::getStartTime() const {
    return m_start_time;
}
void OAIPromotion::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPromotion::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPromotion::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIPromotion::getStatus() const {
    return m_status;
}
void OAIPromotion::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPromotion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPromotion::is_status_Valid() const{
    return m_status_isValid;
}

OAISynopses OAIPromotion::getSynopses() const {
    return m_synopses;
}
void OAIPromotion::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIPromotion::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIPromotion::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIPromotion::getTitle() const {
    return m_title;
}
void OAIPromotion::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPromotion::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPromotion::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPromotion::getUpdatedTime() const {
    return m_updated_time;
}
void OAIPromotion::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIPromotion::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIPromotion::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIPromotion::getUri() const {
    return m_uri;
}
void OAIPromotion::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPromotion::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPromotion::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPromotion::getUrl() const {
    return m_url;
}
void OAIPromotion::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPromotion::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPromotion::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPromotion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromotion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partner_isValid && m_pid_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
