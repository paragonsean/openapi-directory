/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffset_in.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffset_in::OAIOffset_in(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffset_in::OAIOffset_in() {
    this->initializeModel();
}

OAIOffset_in::~OAIOffset_in() {}

void OAIOffset_in::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_programme_isSet = false;
    m_programme_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOffset_in::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffset_in::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_programme_isValid = ::OpenAPI::fromJsonValue(m_programme, json[QString("programme")]);
    m_programme_isSet = !json[QString("programme")].isNull() && m_programme_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOffset_in::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffset_in::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_programme_isSet) {
        obj.insert(QString("programme"), ::OpenAPI::toJsonValue(m_programme));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIOffset_in::getHref() const {
    return m_href;
}
void OAIOffset_in::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIOffset_in::is_href_Set() const{
    return m_href_isSet;
}

bool OAIOffset_in::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAIOffset_in::getOffset() const {
    return m_offset;
}
void OAIOffset_in::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIOffset_in::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIOffset_in::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAIOffset_in::getPosition() const {
    return m_position;
}
void OAIOffset_in::setPosition(const double &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIOffset_in::is_position_Set() const{
    return m_position_isSet;
}

bool OAIOffset_in::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIOffset_in::getProgramme() const {
    return m_programme;
}
void OAIOffset_in::setProgramme(const QString &programme) {
    m_programme = programme;
    m_programme_isSet = true;
}

bool OAIOffset_in::is_programme_Set() const{
    return m_programme_isSet;
}

bool OAIOffset_in::is_programme_Valid() const{
    return m_programme_isValid;
}

QString OAIOffset_in::getVersion() const {
    return m_version;
}
void OAIOffset_in::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOffset_in::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOffset_in::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOffset_in::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffset_in::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_programme_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
