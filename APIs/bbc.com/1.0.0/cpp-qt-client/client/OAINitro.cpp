/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINitro.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINitro::OAINitro(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINitro::OAINitro() {
    this->initializeModel();
}

OAINitro::~OAINitro() {}

void OAINitro::initializeModel() {

    m_deprecations_isSet = false;
    m_deprecations_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_mixins_isSet = false;
    m_mixins_isValid = false;

    m_pagination_isSet = false;
    m_pagination_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_sorts_isSet = false;
    m_sorts_isValid = false;
}

void OAINitro::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINitro::fromJsonObject(QJsonObject json) {

    m_deprecations_isValid = ::OpenAPI::fromJsonValue(m_deprecations, json[QString("deprecations")]);
    m_deprecations_isSet = !json[QString("deprecations")].isNull() && m_deprecations_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_mixins_isValid = ::OpenAPI::fromJsonValue(m_mixins, json[QString("mixins")]);
    m_mixins_isSet = !json[QString("mixins")].isNull() && m_mixins_isValid;

    m_pagination_isValid = ::OpenAPI::fromJsonValue(m_pagination, json[QString("pagination")]);
    m_pagination_isSet = !json[QString("pagination")].isNull() && m_pagination_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_sorts_isValid = ::OpenAPI::fromJsonValue(m_sorts, json[QString("sorts")]);
    m_sorts_isSet = !json[QString("sorts")].isNull() && m_sorts_isValid;
}

QString OAINitro::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINitro::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecations.isSet()) {
        obj.insert(QString("deprecations"), ::OpenAPI::toJsonValue(m_deprecations));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_mixins.isSet()) {
        obj.insert(QString("mixins"), ::OpenAPI::toJsonValue(m_mixins));
    }
    if (m_pagination.isSet()) {
        obj.insert(QString("pagination"), ::OpenAPI::toJsonValue(m_pagination));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_sorts.isSet()) {
        obj.insert(QString("sorts"), ::OpenAPI::toJsonValue(m_sorts));
    }
    return obj;
}

OAIDeprecations OAINitro::getDeprecations() const {
    return m_deprecations;
}
void OAINitro::setDeprecations(const OAIDeprecations &deprecations) {
    m_deprecations = deprecations;
    m_deprecations_isSet = true;
}

bool OAINitro::is_deprecations_Set() const{
    return m_deprecations_isSet;
}

bool OAINitro::is_deprecations_Valid() const{
    return m_deprecations_isValid;
}

OAIFilters OAINitro::getFilters() const {
    return m_filters;
}
void OAINitro::setFilters(const OAIFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAINitro::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAINitro::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIMixins OAINitro::getMixins() const {
    return m_mixins;
}
void OAINitro::setMixins(const OAIMixins &mixins) {
    m_mixins = mixins;
    m_mixins_isSet = true;
}

bool OAINitro::is_mixins_Set() const{
    return m_mixins_isSet;
}

bool OAINitro::is_mixins_Valid() const{
    return m_mixins_isValid;
}

OAIPagination OAINitro::getPagination() const {
    return m_pagination;
}
void OAINitro::setPagination(const OAIPagination &pagination) {
    m_pagination = pagination;
    m_pagination_isSet = true;
}

bool OAINitro::is_pagination_Set() const{
    return m_pagination_isSet;
}

bool OAINitro::is_pagination_Valid() const{
    return m_pagination_isValid;
}

OAIResults OAINitro::getResults() const {
    return m_results;
}
void OAINitro::setResults(const OAIResults &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAINitro::is_results_Set() const{
    return m_results_isSet;
}

bool OAINitro::is_results_Valid() const{
    return m_results_isValid;
}

OAISorts OAINitro::getSorts() const {
    return m_sorts;
}
void OAINitro::setSorts(const OAISorts &sorts) {
    m_sorts = sorts;
    m_sorts_isSet = true;
}

bool OAINitro::is_sorts_Set() const{
    return m_sorts_isSet;
}

bool OAINitro::is_sorts_Valid() const{
    return m_sorts_isValid;
}

bool OAINitro::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINitro::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
