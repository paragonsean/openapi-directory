/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailable_versions_element_version_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailable_versions_element_version_inner::OAIAvailable_versions_element_version_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailable_versions_element_version_inner::OAIAvailable_versions_element_version_inner() {
    this->initializeModel();
}

OAIAvailable_versions_element_version_inner::~OAIAvailable_versions_element_version_inner() {}

void OAIAvailable_versions_element_version_inner::initializeModel() {

    m_available_mixins_isSet = false;
    m_available_mixins_isValid = false;

    m_competition_warning_isSet = false;
    m_competition_warning_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_guidance_warnings_isSet = false;
    m_guidance_warnings_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAvailable_versions_element_version_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailable_versions_element_version_inner::fromJsonObject(QJsonObject json) {

    m_available_mixins_isValid = ::OpenAPI::fromJsonValue(m_available_mixins, json[QString("available_mixins")]);
    m_available_mixins_isSet = !json[QString("available_mixins")].isNull() && m_available_mixins_isValid;

    m_competition_warning_isValid = ::OpenAPI::fromJsonValue(m_competition_warning, json[QString("competition_warning")]);
    m_competition_warning_isSet = !json[QString("competition_warning")].isNull() && m_competition_warning_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_guidance_warnings_isValid = ::OpenAPI::fromJsonValue(m_guidance_warnings, json[QString("guidance_warnings")]);
    m_guidance_warnings_isSet = !json[QString("guidance_warnings")].isNull() && m_guidance_warnings_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAvailable_versions_element_version_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailable_versions_element_version_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_available_mixins.isSet()) {
        obj.insert(QString("available_mixins"), ::OpenAPI::toJsonValue(m_available_mixins));
    }
    if (m_competition_warning_isSet) {
        obj.insert(QString("competition_warning"), ::OpenAPI::toJsonValue(m_competition_warning));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_guidance_warnings.isSet()) {
        obj.insert(QString("guidance_warnings"), ::OpenAPI::toJsonValue(m_guidance_warnings));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIAvailable_mixins OAIAvailable_versions_element_version_inner::getAvailableMixins() const {
    return m_available_mixins;
}
void OAIAvailable_versions_element_version_inner::setAvailableMixins(const OAIAvailable_mixins &available_mixins) {
    m_available_mixins = available_mixins;
    m_available_mixins_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_available_mixins_Set() const{
    return m_available_mixins_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_available_mixins_Valid() const{
    return m_available_mixins_isValid;
}

bool OAIAvailable_versions_element_version_inner::isCompetitionWarning() const {
    return m_competition_warning;
}
void OAIAvailable_versions_element_version_inner::setCompetitionWarning(const bool &competition_warning) {
    m_competition_warning = competition_warning;
    m_competition_warning_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_competition_warning_Set() const{
    return m_competition_warning_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_competition_warning_Valid() const{
    return m_competition_warning_isValid;
}

QString OAIAvailable_versions_element_version_inner::getDuration() const {
    return m_duration;
}
void OAIAvailable_versions_element_version_inner::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIGuidance_warnings OAIAvailable_versions_element_version_inner::getGuidanceWarnings() const {
    return m_guidance_warnings;
}
void OAIAvailable_versions_element_version_inner::setGuidanceWarnings(const OAIGuidance_warnings &guidance_warnings) {
    m_guidance_warnings = guidance_warnings;
    m_guidance_warnings_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_guidance_warnings_Set() const{
    return m_guidance_warnings_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_guidance_warnings_Valid() const{
    return m_guidance_warnings_isValid;
}

QString OAIAvailable_versions_element_version_inner::getPid() const {
    return m_pid;
}
void OAIAvailable_versions_element_version_inner::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_pid_Valid() const{
    return m_pid_isValid;
}

QList<OAIAvailable_versions_element_version_inner_types_inner> OAIAvailable_versions_element_version_inner::getTypes() const {
    return m_types;
}
void OAIAvailable_versions_element_version_inner::setTypes(const QList<OAIAvailable_versions_element_version_inner_types_inner> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_types_Set() const{
    return m_types_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_types_Valid() const{
    return m_types_isValid;
}

QList<OAIAvailable_versions_element_version_inner_version_inner> OAIAvailable_versions_element_version_inner::getVersion() const {
    return m_version;
}
void OAIAvailable_versions_element_version_inner::setVersion(const QList<OAIAvailable_versions_element_version_inner_version_inner> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAvailable_versions_element_version_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAvailable_versions_element_version_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAvailable_versions_element_version_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_mixins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_competition_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailable_versions_element_version_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_types_isValid && true;
}

} // namespace OpenAPI
