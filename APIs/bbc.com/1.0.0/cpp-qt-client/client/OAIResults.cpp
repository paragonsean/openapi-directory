/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResults::OAIResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResults::OAIResults() {
    this->initializeModel();
}

OAIResults::~OAIResults() {}

void OAIResults::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_broadcast_isSet = false;
    m_broadcast_isValid = false;

    m_chapter_isSet = false;
    m_chapter_isValid = false;

    m_clip_isSet = false;
    m_clip_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_contributor_isSet = false;
    m_contributor_isValid = false;

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_franchise_isSet = false;
    m_franchise_isValid = false;

    m_gallery_isSet = false;
    m_gallery_isValid = false;

    m_highlight_isSet = false;
    m_highlight_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_master_brand_isSet = false;
    m_master_brand_isValid = false;

    m_more_than_isSet = false;
    m_more_than_isValid = false;

    m_music_isSet = false;
    m_music_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_promotion_isSet = false;
    m_promotion_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_speech_isSet = false;
    m_speech_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_version_group_isSet = false;
    m_version_group_isValid = false;

    m_window_isSet = false;
    m_window_isValid = false;
}

void OAIResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResults::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_broadcast_isValid = ::OpenAPI::fromJsonValue(m_broadcast, json[QString("broadcast")]);
    m_broadcast_isSet = !json[QString("broadcast")].isNull() && m_broadcast_isValid;

    m_chapter_isValid = ::OpenAPI::fromJsonValue(m_chapter, json[QString("chapter")]);
    m_chapter_isSet = !json[QString("chapter")].isNull() && m_chapter_isValid;

    m_clip_isValid = ::OpenAPI::fromJsonValue(m_clip, json[QString("clip")]);
    m_clip_isSet = !json[QString("clip")].isNull() && m_clip_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_contributor_isValid = ::OpenAPI::fromJsonValue(m_contributor, json[QString("contributor")]);
    m_contributor_isSet = !json[QString("contributor")].isNull() && m_contributor_isValid;

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_franchise_isValid = ::OpenAPI::fromJsonValue(m_franchise, json[QString("franchise")]);
    m_franchise_isSet = !json[QString("franchise")].isNull() && m_franchise_isValid;

    m_gallery_isValid = ::OpenAPI::fromJsonValue(m_gallery, json[QString("gallery")]);
    m_gallery_isSet = !json[QString("gallery")].isNull() && m_gallery_isValid;

    m_highlight_isValid = ::OpenAPI::fromJsonValue(m_highlight, json[QString("highlight")]);
    m_highlight_isSet = !json[QString("highlight")].isNull() && m_highlight_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_master_brand_isValid = ::OpenAPI::fromJsonValue(m_master_brand, json[QString("master_brand")]);
    m_master_brand_isSet = !json[QString("master_brand")].isNull() && m_master_brand_isValid;

    m_more_than_isValid = ::OpenAPI::fromJsonValue(m_more_than, json[QString("more_than")]);
    m_more_than_isSet = !json[QString("more_than")].isNull() && m_more_than_isValid;

    m_music_isValid = ::OpenAPI::fromJsonValue(m_music, json[QString("music")]);
    m_music_isSet = !json[QString("music")].isNull() && m_music_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_promotion_isValid = ::OpenAPI::fromJsonValue(m_promotion, json[QString("promotion")]);
    m_promotion_isSet = !json[QString("promotion")].isNull() && m_promotion_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_speech_isValid = ::OpenAPI::fromJsonValue(m_speech, json[QString("speech")]);
    m_speech_isSet = !json[QString("speech")].isNull() && m_speech_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_version_group_isValid = ::OpenAPI::fromJsonValue(m_version_group, json[QString("version_group")]);
    m_version_group_isSet = !json[QString("version_group")].isNull() && m_version_group_isValid;

    m_window_isValid = ::OpenAPI::fromJsonValue(m_window, json[QString("window")]);
    m_window_isSet = !json[QString("window")].isNull() && m_window_isValid;
}

QString OAIResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResults::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_brand.isSet()) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_broadcast.isSet()) {
        obj.insert(QString("broadcast"), ::OpenAPI::toJsonValue(m_broadcast));
    }
    if (m_chapter.isSet()) {
        obj.insert(QString("chapter"), ::OpenAPI::toJsonValue(m_chapter));
    }
    if (m_clip.isSet()) {
        obj.insert(QString("clip"), ::OpenAPI::toJsonValue(m_clip));
    }
    if (m_collection.isSet()) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_contributor.isSet()) {
        obj.insert(QString("contributor"), ::OpenAPI::toJsonValue(m_contributor));
    }
    if (m_episode.isSet()) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_franchise.isSet()) {
        obj.insert(QString("franchise"), ::OpenAPI::toJsonValue(m_franchise));
    }
    if (m_gallery.isSet()) {
        obj.insert(QString("gallery"), ::OpenAPI::toJsonValue(m_gallery));
    }
    if (m_highlight.isSet()) {
        obj.insert(QString("highlight"), ::OpenAPI::toJsonValue(m_highlight));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_master_brand.isSet()) {
        obj.insert(QString("master_brand"), ::OpenAPI::toJsonValue(m_master_brand));
    }
    if (m_more_than_isSet) {
        obj.insert(QString("more_than"), ::OpenAPI::toJsonValue(m_more_than));
    }
    if (m_music.isSet()) {
        obj.insert(QString("music"), ::OpenAPI::toJsonValue(m_music));
    }
    if (m_other.isSet()) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_promotion.isSet()) {
        obj.insert(QString("promotion"), ::OpenAPI::toJsonValue(m_promotion));
    }
    if (m_season.isSet()) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_speech.isSet()) {
        obj.insert(QString("speech"), ::OpenAPI::toJsonValue(m_speech));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_version_group.isSet()) {
        obj.insert(QString("version_group"), ::OpenAPI::toJsonValue(m_version_group));
    }
    if (m_window.isSet()) {
        obj.insert(QString("window"), ::OpenAPI::toJsonValue(m_window));
    }
    return obj;
}

OAIAvailability OAIResults::getAvailability() const {
    return m_availability;
}
void OAIResults::setAvailability(const OAIAvailability &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIResults::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIResults::is_availability_Valid() const{
    return m_availability_isValid;
}

OAIBrand OAIResults::getBrand() const {
    return m_brand;
}
void OAIResults::setBrand(const OAIBrand &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIResults::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIResults::is_brand_Valid() const{
    return m_brand_isValid;
}

OAIBroadcast OAIResults::getBroadcast() const {
    return m_broadcast;
}
void OAIResults::setBroadcast(const OAIBroadcast &broadcast) {
    m_broadcast = broadcast;
    m_broadcast_isSet = true;
}

bool OAIResults::is_broadcast_Set() const{
    return m_broadcast_isSet;
}

bool OAIResults::is_broadcast_Valid() const{
    return m_broadcast_isValid;
}

OAIItem OAIResults::getChapter() const {
    return m_chapter;
}
void OAIResults::setChapter(const OAIItem &chapter) {
    m_chapter = chapter;
    m_chapter_isSet = true;
}

bool OAIResults::is_chapter_Set() const{
    return m_chapter_isSet;
}

bool OAIResults::is_chapter_Valid() const{
    return m_chapter_isValid;
}

OAIClip OAIResults::getClip() const {
    return m_clip;
}
void OAIResults::setClip(const OAIClip &clip) {
    m_clip = clip;
    m_clip_isSet = true;
}

bool OAIResults::is_clip_Set() const{
    return m_clip_isSet;
}

bool OAIResults::is_clip_Valid() const{
    return m_clip_isValid;
}

OAIGroup_body OAIResults::getCollection() const {
    return m_collection;
}
void OAIResults::setCollection(const OAIGroup_body &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIResults::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIResults::is_collection_Valid() const{
    return m_collection_isValid;
}

OAIContributor OAIResults::getContributor() const {
    return m_contributor;
}
void OAIResults::setContributor(const OAIContributor &contributor) {
    m_contributor = contributor;
    m_contributor_isSet = true;
}

bool OAIResults::is_contributor_Set() const{
    return m_contributor_isSet;
}

bool OAIResults::is_contributor_Valid() const{
    return m_contributor_isValid;
}

OAIEpisode OAIResults::getEpisode() const {
    return m_episode;
}
void OAIResults::setEpisode(const OAIEpisode &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIResults::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIResults::is_episode_Valid() const{
    return m_episode_isValid;
}

OAIGroup_body OAIResults::getFranchise() const {
    return m_franchise;
}
void OAIResults::setFranchise(const OAIGroup_body &franchise) {
    m_franchise = franchise;
    m_franchise_isSet = true;
}

bool OAIResults::is_franchise_Set() const{
    return m_franchise_isSet;
}

bool OAIResults::is_franchise_Valid() const{
    return m_franchise_isValid;
}

OAIGroup_body OAIResults::getGallery() const {
    return m_gallery;
}
void OAIResults::setGallery(const OAIGroup_body &gallery) {
    m_gallery = gallery;
    m_gallery_isSet = true;
}

bool OAIResults::is_gallery_Set() const{
    return m_gallery_isSet;
}

bool OAIResults::is_gallery_Valid() const{
    return m_gallery_isValid;
}

OAIItem OAIResults::getHighlight() const {
    return m_highlight;
}
void OAIResults::setHighlight(const OAIItem &highlight) {
    m_highlight = highlight;
    m_highlight_isSet = true;
}

bool OAIResults::is_highlight_Set() const{
    return m_highlight_isSet;
}

bool OAIResults::is_highlight_Valid() const{
    return m_highlight_isValid;
}

OAIImage OAIResults::getImage() const {
    return m_image;
}
void OAIResults::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIResults::is_image_Set() const{
    return m_image_isSet;
}

bool OAIResults::is_image_Valid() const{
    return m_image_isValid;
}

OAIMaster_brand OAIResults::getMasterBrand() const {
    return m_master_brand;
}
void OAIResults::setMasterBrand(const OAIMaster_brand &master_brand) {
    m_master_brand = master_brand;
    m_master_brand_isSet = true;
}

bool OAIResults::is_master_brand_Set() const{
    return m_master_brand_isSet;
}

bool OAIResults::is_master_brand_Valid() const{
    return m_master_brand_isValid;
}

qint32 OAIResults::getMoreThan() const {
    return m_more_than;
}
void OAIResults::setMoreThan(const qint32 &more_than) {
    m_more_than = more_than;
    m_more_than_isSet = true;
}

bool OAIResults::is_more_than_Set() const{
    return m_more_than_isSet;
}

bool OAIResults::is_more_than_Valid() const{
    return m_more_than_isValid;
}

OAIItem OAIResults::getMusic() const {
    return m_music;
}
void OAIResults::setMusic(const OAIItem &music) {
    m_music = music;
    m_music_isSet = true;
}

bool OAIResults::is_music_Set() const{
    return m_music_isSet;
}

bool OAIResults::is_music_Valid() const{
    return m_music_isValid;
}

OAIItem OAIResults::getOther() const {
    return m_other;
}
void OAIResults::setOther(const OAIItem &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAIResults::is_other_Set() const{
    return m_other_isSet;
}

bool OAIResults::is_other_Valid() const{
    return m_other_isValid;
}

qint32 OAIResults::getPage() const {
    return m_page;
}
void OAIResults::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIResults::is_page_Set() const{
    return m_page_isSet;
}

bool OAIResults::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIResults::getPageSize() const {
    return m_page_size;
}
void OAIResults::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIResults::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIResults::is_page_size_Valid() const{
    return m_page_size_isValid;
}

OAIPromotion OAIResults::getPromotion() const {
    return m_promotion;
}
void OAIResults::setPromotion(const OAIPromotion &promotion) {
    m_promotion = promotion;
    m_promotion_isSet = true;
}

bool OAIResults::is_promotion_Set() const{
    return m_promotion_isSet;
}

bool OAIResults::is_promotion_Valid() const{
    return m_promotion_isValid;
}

OAIGroup_body OAIResults::getSeason() const {
    return m_season;
}
void OAIResults::setSeason(const OAIGroup_body &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIResults::is_season_Set() const{
    return m_season_isSet;
}

bool OAIResults::is_season_Valid() const{
    return m_season_isValid;
}

OAISeries OAIResults::getSeries() const {
    return m_series;
}
void OAIResults::setSeries(const OAISeries &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIResults::is_series_Set() const{
    return m_series_isSet;
}

bool OAIResults::is_series_Valid() const{
    return m_series_isValid;
}

OAIService OAIResults::getService() const {
    return m_service;
}
void OAIResults::setService(const OAIService &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIResults::is_service_Set() const{
    return m_service_isSet;
}

bool OAIResults::is_service_Valid() const{
    return m_service_isValid;
}

OAIItem OAIResults::getSpeech() const {
    return m_speech;
}
void OAIResults::setSpeech(const OAIItem &speech) {
    m_speech = speech;
    m_speech_isSet = true;
}

bool OAIResults::is_speech_Set() const{
    return m_speech_isSet;
}

bool OAIResults::is_speech_Valid() const{
    return m_speech_isValid;
}

qint32 OAIResults::getTotal() const {
    return m_total;
}
void OAIResults::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIResults::is_total_Set() const{
    return m_total_isSet;
}

bool OAIResults::is_total_Valid() const{
    return m_total_isValid;
}

OAIVersion_group OAIResults::getVersionGroup() const {
    return m_version_group;
}
void OAIResults::setVersionGroup(const OAIVersion_group &version_group) {
    m_version_group = version_group;
    m_version_group_isSet = true;
}

bool OAIResults::is_version_group_Set() const{
    return m_version_group_isSet;
}

bool OAIResults::is_version_group_Valid() const{
    return m_version_group_isValid;
}

OAIWindow OAIResults::getWindow() const {
    return m_window;
}
void OAIResults::setWindow(const OAIWindow &window) {
    m_window = window;
    m_window_isSet = true;
}

bool OAIResults::is_window_Set() const{
    return m_window_isSet;
}

bool OAIResults::is_window_Valid() const{
    return m_window_isValid;
}

bool OAIResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_franchise.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gallery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_than_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_season.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_isValid && m_page_size_isValid && true;
}

} // namespace OpenAPI
