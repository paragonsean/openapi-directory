/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelated_link.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelated_link::OAIRelated_link(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelated_link::OAIRelated_link() {
    this->initializeModel();
}

OAIRelated_link::~OAIRelated_link() {}

void OAIRelated_link::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_is_external_isSet = false;
    m_is_external_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIRelated_link::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelated_link::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_is_external_isValid = ::OpenAPI::fromJsonValue(m_is_external, json[QString("is_external")]);
    m_is_external_isSet = !json[QString("is_external")].isNull() && m_is_external_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIRelated_link::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelated_link::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_is_external_isSet) {
        obj.insert(QString("is_external"), ::OpenAPI::toJsonValue(m_is_external));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIMaster_brand_master_brand_date_range OAIRelated_link::getAvailability() const {
    return m_availability;
}
void OAIRelated_link::setAvailability(const OAIMaster_brand_master_brand_date_range &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIRelated_link::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIRelated_link::is_availability_Valid() const{
    return m_availability_isValid;
}

bool OAIRelated_link::isIsExternal() const {
    return m_is_external;
}
void OAIRelated_link::setIsExternal(const bool &is_external) {
    m_is_external = is_external;
    m_is_external_isSet = true;
}

bool OAIRelated_link::is_is_external_Set() const{
    return m_is_external_isSet;
}

bool OAIRelated_link::is_is_external_Valid() const{
    return m_is_external_isValid;
}

QString OAIRelated_link::getPid() const {
    return m_pid;
}
void OAIRelated_link::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIRelated_link::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIRelated_link::is_pid_Valid() const{
    return m_pid_isValid;
}

qint32 OAIRelated_link::getPosition() const {
    return m_position;
}
void OAIRelated_link::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIRelated_link::is_position_Set() const{
    return m_position_isSet;
}

bool OAIRelated_link::is_position_Valid() const{
    return m_position_isValid;
}

OAISynopses OAIRelated_link::getSynopses() const {
    return m_synopses;
}
void OAIRelated_link::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIRelated_link::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIRelated_link::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIRelated_link::getTitle() const {
    return m_title;
}
void OAIRelated_link::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRelated_link::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRelated_link::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIRelated_link::getType() const {
    return m_type;
}
void OAIRelated_link::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRelated_link::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRelated_link::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRelated_link::getUri() const {
    return m_uri;
}
void OAIRelated_link::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIRelated_link::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIRelated_link::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIRelated_link::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelated_link::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pid_isValid && true;
}

} // namespace OpenAPI
