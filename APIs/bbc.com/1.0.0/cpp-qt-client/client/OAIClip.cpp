/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClip::OAIClip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClip::OAIClip() {
    this->initializeModel();
}

OAIClip::~OAIClip() {}

void OAIClip::initializeModel() {

    m_advertising_allowed_isSet = false;
    m_advertising_allowed_isValid = false;

    m_alternate_images_mixin_isSet = false;
    m_alternate_images_mixin_isValid = false;

    m_ancestor_titles_isSet = false;
    m_ancestor_titles_isValid = false;

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_ancestors_titles_isSet = false;
    m_ancestors_titles_isValid = false;

    m_availability_mixin_isSet = false;
    m_availability_mixin_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_clip_of_isSet = false;
    m_clip_of_isValid = false;

    m_contributions_mixin_isSet = false;
    m_contributions_mixin_isValid = false;

    m_embargoed_isSet = false;
    m_embargoed_isValid = false;

    m_genre_groupings_isSet = false;
    m_genre_groupings_isValid = false;

    m_genre_groups_isSet = false;
    m_genre_groups_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_images_mixin_isSet = false;
    m_images_mixin_isValid = false;

    m_is_embeddable_isSet = false;
    m_is_embeddable_isValid = false;

    m_items_for_isSet = false;
    m_items_for_isValid = false;

    m_master_brand_link_isSet = false;
    m_master_brand_link_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_original_version_duration_isSet = false;
    m_original_version_duration_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_previous_next_mixin_isSet = false;
    m_previous_next_mixin_isValid = false;

    m_programme_formats_isSet = false;
    m_programme_formats_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_release_date_group_isSet = false;
    m_release_date_group_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_versions_mixin_isSet = false;
    m_versions_mixin_isValid = false;
}

void OAIClip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClip::fromJsonObject(QJsonObject json) {

    m_advertising_allowed_isValid = ::OpenAPI::fromJsonValue(m_advertising_allowed, json[QString("advertising_allowed")]);
    m_advertising_allowed_isSet = !json[QString("advertising_allowed")].isNull() && m_advertising_allowed_isValid;

    m_alternate_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_alternate_images_mixin, json[QString("alternate_images_mixin")]);
    m_alternate_images_mixin_isSet = !json[QString("alternate_images_mixin")].isNull() && m_alternate_images_mixin_isValid;

    m_ancestor_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestor_titles, json[QString("ancestor_titles")]);
    m_ancestor_titles_isSet = !json[QString("ancestor_titles")].isNull() && m_ancestor_titles_isValid;

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_ancestors_titles_isValid = ::OpenAPI::fromJsonValue(m_ancestors_titles, json[QString("ancestors_titles")]);
    m_ancestors_titles_isSet = !json[QString("ancestors_titles")].isNull() && m_ancestors_titles_isValid;

    m_availability_mixin_isValid = ::OpenAPI::fromJsonValue(m_availability_mixin, json[QString("availability_mixin")]);
    m_availability_mixin_isSet = !json[QString("availability_mixin")].isNull() && m_availability_mixin_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_clip_of_isValid = ::OpenAPI::fromJsonValue(m_clip_of, json[QString("clip_of")]);
    m_clip_of_isSet = !json[QString("clip_of")].isNull() && m_clip_of_isValid;

    m_contributions_mixin_isValid = ::OpenAPI::fromJsonValue(m_contributions_mixin, json[QString("contributions_mixin")]);
    m_contributions_mixin_isSet = !json[QString("contributions_mixin")].isNull() && m_contributions_mixin_isValid;

    m_embargoed_isValid = ::OpenAPI::fromJsonValue(m_embargoed, json[QString("embargoed")]);
    m_embargoed_isSet = !json[QString("embargoed")].isNull() && m_embargoed_isValid;

    m_genre_groupings_isValid = ::OpenAPI::fromJsonValue(m_genre_groupings, json[QString("genre_groupings")]);
    m_genre_groupings_isSet = !json[QString("genre_groupings")].isNull() && m_genre_groupings_isValid;

    m_genre_groups_isValid = ::OpenAPI::fromJsonValue(m_genre_groups, json[QString("genre_groups")]);
    m_genre_groups_isSet = !json[QString("genre_groups")].isNull() && m_genre_groups_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("image_link")]);
    m_image_link_isSet = !json[QString("image_link")].isNull() && m_image_link_isValid;

    m_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_images_mixin, json[QString("images_mixin")]);
    m_images_mixin_isSet = !json[QString("images_mixin")].isNull() && m_images_mixin_isValid;

    m_is_embeddable_isValid = ::OpenAPI::fromJsonValue(m_is_embeddable, json[QString("is_embeddable")]);
    m_is_embeddable_isSet = !json[QString("is_embeddable")].isNull() && m_is_embeddable_isValid;

    m_items_for_isValid = ::OpenAPI::fromJsonValue(m_items_for, json[QString("items_for")]);
    m_items_for_isSet = !json[QString("items_for")].isNull() && m_items_for_isValid;

    m_master_brand_link_isValid = ::OpenAPI::fromJsonValue(m_master_brand_link, json[QString("master_brand_link")]);
    m_master_brand_link_isSet = !json[QString("master_brand_link")].isNull() && m_master_brand_link_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_original_version_duration_isValid = ::OpenAPI::fromJsonValue(m_original_version_duration, json[QString("original_version_duration")]);
    m_original_version_duration_isSet = !json[QString("original_version_duration")].isNull() && m_original_version_duration_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_previous_next_mixin_isValid = ::OpenAPI::fromJsonValue(m_previous_next_mixin, json[QString("previous_next_mixin")]);
    m_previous_next_mixin_isSet = !json[QString("previous_next_mixin")].isNull() && m_previous_next_mixin_isValid;

    m_programme_formats_isValid = ::OpenAPI::fromJsonValue(m_programme_formats, json[QString("programme_formats")]);
    m_programme_formats_isSet = !json[QString("programme_formats")].isNull() && m_programme_formats_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("related_links")]);
    m_related_links_isSet = !json[QString("related_links")].isNull() && m_related_links_isValid;

    m_release_date_group_isValid = ::OpenAPI::fromJsonValue(m_release_date_group, json[QString("release_date_group")]);
    m_release_date_group_isSet = !json[QString("release_date_group")].isNull() && m_release_date_group_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_versions_mixin_isValid = ::OpenAPI::fromJsonValue(m_versions_mixin, json[QString("versions_mixin")]);
    m_versions_mixin_isSet = !json[QString("versions_mixin")].isNull() && m_versions_mixin_isValid;
}

QString OAIClip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClip::asJsonObject() const {
    QJsonObject obj;
    if (m_advertising_allowed_isSet) {
        obj.insert(QString("advertising_allowed"), ::OpenAPI::toJsonValue(m_advertising_allowed));
    }
    if (m_alternate_images_mixin.isSet()) {
        obj.insert(QString("alternate_images_mixin"), ::OpenAPI::toJsonValue(m_alternate_images_mixin));
    }
    if (m_ancestor_titles.isSet()) {
        obj.insert(QString("ancestor_titles"), ::OpenAPI::toJsonValue(m_ancestor_titles));
    }
    if (m_ancestors.isSet()) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_ancestors_titles.isSet()) {
        obj.insert(QString("ancestors_titles"), ::OpenAPI::toJsonValue(m_ancestors_titles));
    }
    if (m_availability_mixin.isSet()) {
        obj.insert(QString("availability_mixin"), ::OpenAPI::toJsonValue(m_availability_mixin));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_clip_of.isSet()) {
        obj.insert(QString("clip_of"), ::OpenAPI::toJsonValue(m_clip_of));
    }
    if (m_contributions_mixin.isSet()) {
        obj.insert(QString("contributions_mixin"), ::OpenAPI::toJsonValue(m_contributions_mixin));
    }
    if (m_embargoed.isSet()) {
        obj.insert(QString("embargoed"), ::OpenAPI::toJsonValue(m_embargoed));
    }
    if (m_genre_groupings.isSet()) {
        obj.insert(QString("genre_groupings"), ::OpenAPI::toJsonValue(m_genre_groupings));
    }
    if (m_genre_groups.isSet()) {
        obj.insert(QString("genre_groups"), ::OpenAPI::toJsonValue(m_genre_groups));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_image_link.isSet()) {
        obj.insert(QString("image_link"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_images_mixin.isSet()) {
        obj.insert(QString("images_mixin"), ::OpenAPI::toJsonValue(m_images_mixin));
    }
    if (m_is_embeddable_isSet) {
        obj.insert(QString("is_embeddable"), ::OpenAPI::toJsonValue(m_is_embeddable));
    }
    if (m_items_for.isSet()) {
        obj.insert(QString("items_for"), ::OpenAPI::toJsonValue(m_items_for));
    }
    if (m_master_brand_link.isSet()) {
        obj.insert(QString("master_brand_link"), ::OpenAPI::toJsonValue(m_master_brand_link));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_original_version_duration.isSet()) {
        obj.insert(QString("original_version_duration"), ::OpenAPI::toJsonValue(m_original_version_duration));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_previous_next_mixin.isSet()) {
        obj.insert(QString("previous_next_mixin"), ::OpenAPI::toJsonValue(m_previous_next_mixin));
    }
    if (m_programme_formats.isSet()) {
        obj.insert(QString("programme_formats"), ::OpenAPI::toJsonValue(m_programme_formats));
    }
    if (m_related_links.isSet()) {
        obj.insert(QString("related_links"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_release_date_group.isSet()) {
        obj.insert(QString("release_date_group"), ::OpenAPI::toJsonValue(m_release_date_group));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_versions_mixin.isSet()) {
        obj.insert(QString("versions_mixin"), ::OpenAPI::toJsonValue(m_versions_mixin));
    }
    return obj;
}

QString OAIClip::getAdvertisingAllowed() const {
    return m_advertising_allowed;
}
void OAIClip::setAdvertisingAllowed(const QString &advertising_allowed) {
    m_advertising_allowed = advertising_allowed;
    m_advertising_allowed_isSet = true;
}

bool OAIClip::is_advertising_allowed_Set() const{
    return m_advertising_allowed_isSet;
}

bool OAIClip::is_advertising_allowed_Valid() const{
    return m_advertising_allowed_isValid;
}

OAIAlternate_images_mixin OAIClip::getAlternateImagesMixin() const {
    return m_alternate_images_mixin;
}
void OAIClip::setAlternateImagesMixin(const OAIAlternate_images_mixin &alternate_images_mixin) {
    m_alternate_images_mixin = alternate_images_mixin;
    m_alternate_images_mixin_isSet = true;
}

bool OAIClip::is_alternate_images_mixin_Set() const{
    return m_alternate_images_mixin_isSet;
}

bool OAIClip::is_alternate_images_mixin_Valid() const{
    return m_alternate_images_mixin_isValid;
}

OAIAncestor_titles OAIClip::getAncestorTitles() const {
    return m_ancestor_titles;
}
void OAIClip::setAncestorTitles(const OAIAncestor_titles &ancestor_titles) {
    m_ancestor_titles = ancestor_titles;
    m_ancestor_titles_isSet = true;
}

bool OAIClip::is_ancestor_titles_Set() const{
    return m_ancestor_titles_isSet;
}

bool OAIClip::is_ancestor_titles_Valid() const{
    return m_ancestor_titles_isValid;
}

OAIReference OAIClip::getAncestors() const {
    return m_ancestors;
}
void OAIClip::setAncestors(const OAIReference &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIClip::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIClip::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

OAIAncestors_titles OAIClip::getAncestorsTitles() const {
    return m_ancestors_titles;
}
void OAIClip::setAncestorsTitles(const OAIAncestors_titles &ancestors_titles) {
    m_ancestors_titles = ancestors_titles;
    m_ancestors_titles_isSet = true;
}

bool OAIClip::is_ancestors_titles_Set() const{
    return m_ancestors_titles_isSet;
}

bool OAIClip::is_ancestors_titles_Valid() const{
    return m_ancestors_titles_isValid;
}

OAIAvailability_mixin OAIClip::getAvailabilityMixin() const {
    return m_availability_mixin;
}
void OAIClip::setAvailabilityMixin(const OAIAvailability_mixin &availability_mixin) {
    m_availability_mixin = availability_mixin;
    m_availability_mixin_isSet = true;
}

bool OAIClip::is_availability_mixin_Set() const{
    return m_availability_mixin_isSet;
}

bool OAIClip::is_availability_mixin_Valid() const{
    return m_availability_mixin_isValid;
}

QString OAIClip::getCaption() const {
    return m_caption;
}
void OAIClip::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIClip::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIClip::is_caption_Valid() const{
    return m_caption_isValid;
}

OAIPidReference OAIClip::getClipOf() const {
    return m_clip_of;
}
void OAIClip::setClipOf(const OAIPidReference &clip_of) {
    m_clip_of = clip_of;
    m_clip_of_isSet = true;
}

bool OAIClip::is_clip_of_Set() const{
    return m_clip_of_isSet;
}

bool OAIClip::is_clip_of_Valid() const{
    return m_clip_of_isValid;
}

OAIContributions_mixin OAIClip::getContributionsMixin() const {
    return m_contributions_mixin;
}
void OAIClip::setContributionsMixin(const OAIContributions_mixin &contributions_mixin) {
    m_contributions_mixin = contributions_mixin;
    m_contributions_mixin_isSet = true;
}

bool OAIClip::is_contributions_mixin_Set() const{
    return m_contributions_mixin_isSet;
}

bool OAIClip::is_contributions_mixin_Valid() const{
    return m_contributions_mixin_isValid;
}

OAIEmbargoed OAIClip::getEmbargoed() const {
    return m_embargoed;
}
void OAIClip::setEmbargoed(const OAIEmbargoed &embargoed) {
    m_embargoed = embargoed;
    m_embargoed_isSet = true;
}

bool OAIClip::is_embargoed_Set() const{
    return m_embargoed_isSet;
}

bool OAIClip::is_embargoed_Valid() const{
    return m_embargoed_isValid;
}

OAIGenreGroupingsType OAIClip::getGenreGroupings() const {
    return m_genre_groupings;
}
void OAIClip::setGenreGroupings(const OAIGenreGroupingsType &genre_groupings) {
    m_genre_groupings = genre_groupings;
    m_genre_groupings_isSet = true;
}

bool OAIClip::is_genre_groupings_Set() const{
    return m_genre_groupings_isSet;
}

bool OAIClip::is_genre_groupings_Valid() const{
    return m_genre_groupings_isValid;
}

OAIGenreGroupsType OAIClip::getGenreGroups() const {
    return m_genre_groups;
}
void OAIClip::setGenreGroups(const OAIGenreGroupsType &genre_groups) {
    m_genre_groups = genre_groups;
    m_genre_groups_isSet = true;
}

bool OAIClip::is_genre_groups_Set() const{
    return m_genre_groups_isSet;
}

bool OAIClip::is_genre_groups_Valid() const{
    return m_genre_groups_isValid;
}

OAIIdentifiers OAIClip::getIdentifiers() const {
    return m_identifiers;
}
void OAIClip::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIClip::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIClip::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIImage_link OAIClip::getImageLink() const {
    return m_image_link;
}
void OAIClip::setImageLink(const OAIImage_link &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAIClip::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAIClip::is_image_link_Valid() const{
    return m_image_link_isValid;
}

OAIImages_mixin OAIClip::getImagesMixin() const {
    return m_images_mixin;
}
void OAIClip::setImagesMixin(const OAIImages_mixin &images_mixin) {
    m_images_mixin = images_mixin;
    m_images_mixin_isSet = true;
}

bool OAIClip::is_images_mixin_Set() const{
    return m_images_mixin_isSet;
}

bool OAIClip::is_images_mixin_Valid() const{
    return m_images_mixin_isValid;
}

bool OAIClip::isIsEmbeddable() const {
    return m_is_embeddable;
}
void OAIClip::setIsEmbeddable(const bool &is_embeddable) {
    m_is_embeddable = is_embeddable;
    m_is_embeddable_isSet = true;
}

bool OAIClip::is_is_embeddable_Set() const{
    return m_is_embeddable_isSet;
}

bool OAIClip::is_is_embeddable_Valid() const{
    return m_is_embeddable_isValid;
}

OAIReference OAIClip::getItemsFor() const {
    return m_items_for;
}
void OAIClip::setItemsFor(const OAIReference &items_for) {
    m_items_for = items_for;
    m_items_for_isSet = true;
}

bool OAIClip::is_items_for_Set() const{
    return m_items_for_isSet;
}

bool OAIClip::is_items_for_Valid() const{
    return m_items_for_isValid;
}

OAIMaster_brand_link OAIClip::getMasterBrandLink() const {
    return m_master_brand_link;
}
void OAIClip::setMasterBrandLink(const OAIMaster_brand_link &master_brand_link) {
    m_master_brand_link = master_brand_link;
    m_master_brand_link_isSet = true;
}

bool OAIClip::is_master_brand_link_Set() const{
    return m_master_brand_link_isSet;
}

bool OAIClip::is_master_brand_link_Valid() const{
    return m_master_brand_link_isValid;
}

OAIMedia_type OAIClip::getMediaType() const {
    return m_media_type;
}
void OAIClip::setMediaType(const OAIMedia_type &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIClip::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIClip::is_media_type_Valid() const{
    return m_media_type_isValid;
}

OAIOriginal_version_duration OAIClip::getOriginalVersionDuration() const {
    return m_original_version_duration;
}
void OAIClip::setOriginalVersionDuration(const OAIOriginal_version_duration &original_version_duration) {
    m_original_version_duration = original_version_duration;
    m_original_version_duration_isSet = true;
}

bool OAIClip::is_original_version_duration_Set() const{
    return m_original_version_duration_isSet;
}

bool OAIClip::is_original_version_duration_Valid() const{
    return m_original_version_duration_isValid;
}

QString OAIClip::getPartner() const {
    return m_partner;
}
void OAIClip::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIClip::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIClip::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIClip::getPid() const {
    return m_pid;
}
void OAIClip::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIClip::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIClip::is_pid_Valid() const{
    return m_pid_isValid;
}

OAIPrevious_next_mixin OAIClip::getPreviousNextMixin() const {
    return m_previous_next_mixin;
}
void OAIClip::setPreviousNextMixin(const OAIPrevious_next_mixin &previous_next_mixin) {
    m_previous_next_mixin = previous_next_mixin;
    m_previous_next_mixin_isSet = true;
}

bool OAIClip::is_previous_next_mixin_Set() const{
    return m_previous_next_mixin_isSet;
}

bool OAIClip::is_previous_next_mixin_Valid() const{
    return m_previous_next_mixin_isValid;
}

OAIProgramme_formats OAIClip::getProgrammeFormats() const {
    return m_programme_formats;
}
void OAIClip::setProgrammeFormats(const OAIProgramme_formats &programme_formats) {
    m_programme_formats = programme_formats;
    m_programme_formats_isSet = true;
}

bool OAIClip::is_programme_formats_Set() const{
    return m_programme_formats_isSet;
}

bool OAIClip::is_programme_formats_Valid() const{
    return m_programme_formats_isValid;
}

OAIRelated_links OAIClip::getRelatedLinks() const {
    return m_related_links;
}
void OAIClip::setRelatedLinks(const OAIRelated_links &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAIClip::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAIClip::is_related_links_Valid() const{
    return m_related_links_isValid;
}

OAIRelease_date_group OAIClip::getReleaseDateGroup() const {
    return m_release_date_group;
}
void OAIClip::setReleaseDateGroup(const OAIRelease_date_group &release_date_group) {
    m_release_date_group = release_date_group;
    m_release_date_group_isSet = true;
}

bool OAIClip::is_release_date_group_Set() const{
    return m_release_date_group_isSet;
}

bool OAIClip::is_release_date_group_Valid() const{
    return m_release_date_group_isValid;
}

OAISynopses OAIClip::getSynopses() const {
    return m_synopses;
}
void OAIClip::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIClip::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIClip::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIClip::getTitle() const {
    return m_title;
}
void OAIClip::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIClip::is_title_Set() const{
    return m_title_isSet;
}

bool OAIClip::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIClip::getUpdatedTime() const {
    return m_updated_time;
}
void OAIClip::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIClip::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIClip::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIClip::getUri() const {
    return m_uri;
}
void OAIClip::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIClip::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIClip::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIVersions_mixin OAIClip::getVersionsMixin() const {
    return m_versions_mixin;
}
void OAIClip::setVersionsMixin(const OAIVersions_mixin &versions_mixin) {
    m_versions_mixin = versions_mixin;
    m_versions_mixin_isSet = true;
}

bool OAIClip::is_versions_mixin_Set() const{
    return m_versions_mixin_isSet;
}

bool OAIClip::is_versions_mixin_Valid() const{
    return m_versions_mixin_isValid;
}

bool OAIClip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertising_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestor_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargoed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_groupings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_embeddable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_for.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_version_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_next_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_formats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClip::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_advertising_allowed_isValid && m_embargoed_isValid && m_partner_isValid && m_pid_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
