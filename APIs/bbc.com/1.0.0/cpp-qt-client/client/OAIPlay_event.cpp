/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlay_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlay_event::OAIPlay_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlay_event::OAIPlay_event() {
    this->initializeModel();
}

OAIPlay_event::~OAIPlay_event() {}

void OAIPlay_event::initializeModel() {

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_played_in_links_isSet = false;
    m_played_in_links_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPlay_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlay_event::fromJsonObject(QJsonObject json) {

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_played_in_links_isValid = ::OpenAPI::fromJsonValue(m_played_in_links, json[QString("played_in_links")]);
    m_played_in_links_isSet = !json[QString("played_in_links")].isNull() && m_played_in_links_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPlay_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlay_event::asJsonObject() const {
    QJsonObject obj;
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_played_in_links.size() > 0) {
        obj.insert(QString("played_in_links"), ::OpenAPI::toJsonValue(m_played_in_links));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIPlay_event::getOffset() const {
    return m_offset;
}
void OAIPlay_event::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPlay_event::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPlay_event::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIPlay_event::getPid() const {
    return m_pid;
}
void OAIPlay_event::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIPlay_event::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIPlay_event::is_pid_Valid() const{
    return m_pid_isValid;
}

QList<OAIPlayed_in_links> OAIPlay_event::getPlayedInLinks() const {
    return m_played_in_links;
}
void OAIPlay_event::setPlayedInLinks(const QList<OAIPlayed_in_links> &played_in_links) {
    m_played_in_links = played_in_links;
    m_played_in_links_isSet = true;
}

bool OAIPlay_event::is_played_in_links_Set() const{
    return m_played_in_links_isSet;
}

bool OAIPlay_event::is_played_in_links_Valid() const{
    return m_played_in_links_isValid;
}

double OAIPlay_event::getPosition() const {
    return m_position;
}
void OAIPlay_event::setPosition(const double &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlay_event::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlay_event::is_position_Valid() const{
    return m_position_isValid;
}

OAISynopses OAIPlay_event::getSynopses() const {
    return m_synopses;
}
void OAIPlay_event::setSynopses(const OAISynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIPlay_event::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIPlay_event::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIPlay_event::getTitle() const {
    return m_title;
}
void OAIPlay_event::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlay_event::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlay_event::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPlay_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_played_in_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlay_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pid_isValid && true;
}

} // namespace OpenAPI
