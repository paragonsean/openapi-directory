/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaster_brand_link_master_brand_master_brand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaster_brand_link_master_brand_master_brand::OAIMaster_brand_link_master_brand_master_brand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaster_brand_link_master_brand_master_brand::OAIMaster_brand_link_master_brand_master_brand() {
    this->initializeModel();
}

OAIMaster_brand_link_master_brand_master_brand::~OAIMaster_brand_link_master_brand_master_brand() {}

void OAIMaster_brand_link_master_brand_master_brand::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_mid_isSet = false;
    m_mid_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;
}

void OAIMaster_brand_link_master_brand_master_brand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaster_brand_link_master_brand_master_brand::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_mid_isValid = ::OpenAPI::fromJsonValue(m_mid, json[QString("mid")]);
    m_mid_isSet = !json[QString("mid")].isNull() && m_mid_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("result_type")]);
    m_result_type_isSet = !json[QString("result_type")].isNull() && m_result_type_isValid;
}

QString OAIMaster_brand_link_master_brand_master_brand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaster_brand_link_master_brand_master_brand::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_mid_isSet) {
        obj.insert(QString("mid"), ::OpenAPI::toJsonValue(m_mid));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("result_type"), ::OpenAPI::toJsonValue(m_result_type));
    }
    return obj;
}

QString OAIMaster_brand_link_master_brand_master_brand::getHref() const {
    return m_href;
}
void OAIMaster_brand_link_master_brand_master_brand::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIMaster_brand_link_master_brand_master_brand::is_href_Set() const{
    return m_href_isSet;
}

bool OAIMaster_brand_link_master_brand_master_brand::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIMaster_brand_link_master_brand_master_brand::getMid() const {
    return m_mid;
}
void OAIMaster_brand_link_master_brand_master_brand::setMid(const QString &mid) {
    m_mid = mid;
    m_mid_isSet = true;
}

bool OAIMaster_brand_link_master_brand_master_brand::is_mid_Set() const{
    return m_mid_isSet;
}

bool OAIMaster_brand_link_master_brand_master_brand::is_mid_Valid() const{
    return m_mid_isValid;
}

QString OAIMaster_brand_link_master_brand_master_brand::getResultType() const {
    return m_result_type;
}
void OAIMaster_brand_link_master_brand_master_brand::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIMaster_brand_link_master_brand_master_brand::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIMaster_brand_link_master_brand_master_brand::is_result_type_Valid() const{
    return m_result_type_isValid;
}

bool OAIMaster_brand_link_master_brand_master_brand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaster_brand_link_master_brand_master_brand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_mid_isValid && m_result_type_isValid && true;
}

} // namespace OpenAPI
