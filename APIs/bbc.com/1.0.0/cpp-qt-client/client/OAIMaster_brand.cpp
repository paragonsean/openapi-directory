/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaster_brand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaster_brand::OAIMaster_brand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaster_brand::OAIMaster_brand() {
    this->initializeModel();
}

OAIMaster_brand::~OAIMaster_brand() {}

void OAIMaster_brand::initializeModel() {

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_competition_warning_isSet = false;
    m_competition_warning_isValid = false;

    m_ident_isSet = false;
    m_ident_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_images_mixin_isSet = false;
    m_images_mixin_isValid = false;

    m_master_brand_date_range_isSet = false;
    m_master_brand_date_range_isValid = false;

    m_mid_isSet = false;
    m_mid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_key_isSet = false;
    m_url_key_isValid = false;
}

void OAIMaster_brand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaster_brand::fromJsonObject(QJsonObject json) {

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_competition_warning_isValid = ::OpenAPI::fromJsonValue(m_competition_warning, json[QString("competition_warning")]);
    m_competition_warning_isSet = !json[QString("competition_warning")].isNull() && m_competition_warning_isValid;

    m_ident_isValid = ::OpenAPI::fromJsonValue(m_ident, json[QString("ident")]);
    m_ident_isSet = !json[QString("ident")].isNull() && m_ident_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("image_link")]);
    m_image_link_isSet = !json[QString("image_link")].isNull() && m_image_link_isValid;

    m_images_mixin_isValid = ::OpenAPI::fromJsonValue(m_images_mixin, json[QString("images_mixin")]);
    m_images_mixin_isSet = !json[QString("images_mixin")].isNull() && m_images_mixin_isValid;

    m_master_brand_date_range_isValid = ::OpenAPI::fromJsonValue(m_master_brand_date_range, json[QString("master_brand_date_range")]);
    m_master_brand_date_range_isSet = !json[QString("master_brand_date_range")].isNull() && m_master_brand_date_range_isValid;

    m_mid_isValid = ::OpenAPI::fromJsonValue(m_mid, json[QString("mid")]);
    m_mid_isSet = !json[QString("mid")].isNull() && m_mid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_key_isValid = ::OpenAPI::fromJsonValue(m_url_key, json[QString("url_key")]);
    m_url_key_isSet = !json[QString("url_key")].isNull() && m_url_key_isValid;
}

QString OAIMaster_brand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaster_brand::asJsonObject() const {
    QJsonObject obj;
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_competition_warning.isSet()) {
        obj.insert(QString("competition_warning"), ::OpenAPI::toJsonValue(m_competition_warning));
    }
    if (m_ident_isSet) {
        obj.insert(QString("ident"), ::OpenAPI::toJsonValue(m_ident));
    }
    if (m_identifiers.isSet()) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_image_link.isSet()) {
        obj.insert(QString("image_link"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_images_mixin.isSet()) {
        obj.insert(QString("images_mixin"), ::OpenAPI::toJsonValue(m_images_mixin));
    }
    if (m_master_brand_date_range.isSet()) {
        obj.insert(QString("master_brand_date_range"), ::OpenAPI::toJsonValue(m_master_brand_date_range));
    }
    if (m_mid_isSet) {
        obj.insert(QString("mid"), ::OpenAPI::toJsonValue(m_mid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_key_isSet) {
        obj.insert(QString("url_key"), ::OpenAPI::toJsonValue(m_url_key));
    }
    return obj;
}

QString OAIMaster_brand::getColour() const {
    return m_colour;
}
void OAIMaster_brand::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAIMaster_brand::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAIMaster_brand::is_colour_Valid() const{
    return m_colour_isValid;
}

OAIMaster_brand_competition_warning OAIMaster_brand::getCompetitionWarning() const {
    return m_competition_warning;
}
void OAIMaster_brand::setCompetitionWarning(const OAIMaster_brand_competition_warning &competition_warning) {
    m_competition_warning = competition_warning;
    m_competition_warning_isSet = true;
}

bool OAIMaster_brand::is_competition_warning_Set() const{
    return m_competition_warning_isSet;
}

bool OAIMaster_brand::is_competition_warning_Valid() const{
    return m_competition_warning_isValid;
}

QString OAIMaster_brand::getIdent() const {
    return m_ident;
}
void OAIMaster_brand::setIdent(const QString &ident) {
    m_ident = ident;
    m_ident_isSet = true;
}

bool OAIMaster_brand::is_ident_Set() const{
    return m_ident_isSet;
}

bool OAIMaster_brand::is_ident_Valid() const{
    return m_ident_isValid;
}

OAIIdentifiers OAIMaster_brand::getIdentifiers() const {
    return m_identifiers;
}
void OAIMaster_brand::setIdentifiers(const OAIIdentifiers &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIMaster_brand::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIMaster_brand::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIImage_link OAIMaster_brand::getImageLink() const {
    return m_image_link;
}
void OAIMaster_brand::setImageLink(const OAIImage_link &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAIMaster_brand::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAIMaster_brand::is_image_link_Valid() const{
    return m_image_link_isValid;
}

OAIImages_mixin OAIMaster_brand::getImagesMixin() const {
    return m_images_mixin;
}
void OAIMaster_brand::setImagesMixin(const OAIImages_mixin &images_mixin) {
    m_images_mixin = images_mixin;
    m_images_mixin_isSet = true;
}

bool OAIMaster_brand::is_images_mixin_Set() const{
    return m_images_mixin_isSet;
}

bool OAIMaster_brand::is_images_mixin_Valid() const{
    return m_images_mixin_isValid;
}

OAIMaster_brand_master_brand_date_range OAIMaster_brand::getMasterBrandDateRange() const {
    return m_master_brand_date_range;
}
void OAIMaster_brand::setMasterBrandDateRange(const OAIMaster_brand_master_brand_date_range &master_brand_date_range) {
    m_master_brand_date_range = master_brand_date_range;
    m_master_brand_date_range_isSet = true;
}

bool OAIMaster_brand::is_master_brand_date_range_Set() const{
    return m_master_brand_date_range_isSet;
}

bool OAIMaster_brand::is_master_brand_date_range_Valid() const{
    return m_master_brand_date_range_isValid;
}

QString OAIMaster_brand::getMid() const {
    return m_mid;
}
void OAIMaster_brand::setMid(const QString &mid) {
    m_mid = mid;
    m_mid_isSet = true;
}

bool OAIMaster_brand::is_mid_Set() const{
    return m_mid_isSet;
}

bool OAIMaster_brand::is_mid_Valid() const{
    return m_mid_isValid;
}

QString OAIMaster_brand::getName() const {
    return m_name;
}
void OAIMaster_brand::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMaster_brand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMaster_brand::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMaster_brand::getPartner() const {
    return m_partner;
}
void OAIMaster_brand::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIMaster_brand::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIMaster_brand::is_partner_Valid() const{
    return m_partner_isValid;
}

qint32 OAIMaster_brand::getPosition() const {
    return m_position;
}
void OAIMaster_brand::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIMaster_brand::is_position_Set() const{
    return m_position_isSet;
}

bool OAIMaster_brand::is_position_Valid() const{
    return m_position_isValid;
}

OAIMaster_brand_synopses OAIMaster_brand::getSynopses() const {
    return m_synopses;
}
void OAIMaster_brand::setSynopses(const OAIMaster_brand_synopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIMaster_brand::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIMaster_brand::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIMaster_brand::getTitle() const {
    return m_title;
}
void OAIMaster_brand::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMaster_brand::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMaster_brand::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMaster_brand::getUrlKey() const {
    return m_url_key;
}
void OAIMaster_brand::setUrlKey(const QString &url_key) {
    m_url_key = url_key;
    m_url_key_isSet = true;
}

bool OAIMaster_brand::is_url_key_Set() const{
    return m_url_key_isSet;
}

bool OAIMaster_brand::is_url_key_Valid() const{
    return m_url_key_isValid;
}

bool OAIMaster_brand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_competition_warning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ident_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_mixin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaster_brand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mid_isValid && m_partner_isValid && true;
}

} // namespace OpenAPI
