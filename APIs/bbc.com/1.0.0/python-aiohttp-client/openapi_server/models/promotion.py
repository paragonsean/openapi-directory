# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context import Context
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.pid_reference import PidReference
from openapi_server.models.related_links import RelatedLinks
from openapi_server.models.synopses import Synopses
import re
from openapi_server import util


class Promotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: Context=None, end_time: datetime=None, identifiers: Identifiers=None, partner: str=None, pid: str=None, priority: int=None, promoted_by: str=None, promoted_for: str=None, promotion_of: PidReference=None, related_links: RelatedLinks=None, start_time: datetime=None, status: str=None, synopses: Synopses=None, title: str=None, updated_time: datetime=None, uri: str=None, url: str=None):
        """Promotion - a model defined in OpenAPI

        :param context: The context of this Promotion.
        :param end_time: The end_time of this Promotion.
        :param identifiers: The identifiers of this Promotion.
        :param partner: The partner of this Promotion.
        :param pid: The pid of this Promotion.
        :param priority: The priority of this Promotion.
        :param promoted_by: The promoted_by of this Promotion.
        :param promoted_for: The promoted_for of this Promotion.
        :param promotion_of: The promotion_of of this Promotion.
        :param related_links: The related_links of this Promotion.
        :param start_time: The start_time of this Promotion.
        :param status: The status of this Promotion.
        :param synopses: The synopses of this Promotion.
        :param title: The title of this Promotion.
        :param updated_time: The updated_time of this Promotion.
        :param uri: The uri of this Promotion.
        :param url: The url of this Promotion.
        """
        self.openapi_types = {
            'context': Context,
            'end_time': datetime,
            'identifiers': Identifiers,
            'partner': str,
            'pid': str,
            'priority': int,
            'promoted_by': str,
            'promoted_for': str,
            'promotion_of': PidReference,
            'related_links': RelatedLinks,
            'start_time': datetime,
            'status': str,
            'synopses': Synopses,
            'title': str,
            'updated_time': datetime,
            'uri': str,
            'url': str
        }

        self.attribute_map = {
            'context': 'context',
            'end_time': 'end_time',
            'identifiers': 'identifiers',
            'partner': 'partner',
            'pid': 'pid',
            'priority': 'priority',
            'promoted_by': 'promoted_by',
            'promoted_for': 'promoted_for',
            'promotion_of': 'promotion_of',
            'related_links': 'related_links',
            'start_time': 'start_time',
            'status': 'status',
            'synopses': 'synopses',
            'title': 'title',
            'updated_time': 'updated_time',
            'uri': 'uri',
            'url': 'url'
        }

        self._context = context
        self._end_time = end_time
        self._identifiers = identifiers
        self._partner = partner
        self._pid = pid
        self._priority = priority
        self._promoted_by = promoted_by
        self._promoted_for = promoted_for
        self._promotion_of = promotion_of
        self._related_links = related_links
        self._start_time = start_time
        self._status = status
        self._synopses = synopses
        self._title = title
        self._updated_time = updated_time
        self._uri = uri
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Promotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The promotion of this Promotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this Promotion.


        :return: The context of this Promotion.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Promotion.


        :param context: The context of this Promotion.
        :type context: Context
        """

        self._context = context

    @property
    def end_time(self):
        """Gets the end_time of this Promotion.


        :return: The end_time of this Promotion.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Promotion.


        :param end_time: The end_time of this Promotion.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def identifiers(self):
        """Gets the identifiers of this Promotion.


        :return: The identifiers of this Promotion.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Promotion.


        :param identifiers: The identifiers of this Promotion.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def partner(self):
        """Gets the partner of this Promotion.


        :return: The partner of this Promotion.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Promotion.


        :param partner: The partner of this Promotion.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Promotion.


        :return: The pid of this Promotion.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Promotion.


        :param pid: The pid of this Promotion.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def priority(self):
        """Gets the priority of this Promotion.


        :return: The priority of this Promotion.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Promotion.


        :param priority: The priority of this Promotion.
        :type priority: int
        """

        self._priority = priority

    @property
    def promoted_by(self):
        """Gets the promoted_by of this Promotion.


        :return: The promoted_by of this Promotion.
        :rtype: str
        """
        return self._promoted_by

    @promoted_by.setter
    def promoted_by(self, promoted_by):
        """Sets the promoted_by of this Promotion.


        :param promoted_by: The promoted_by of this Promotion.
        :type promoted_by: str
        """

        self._promoted_by = promoted_by

    @property
    def promoted_for(self):
        """Gets the promoted_for of this Promotion.


        :return: The promoted_for of this Promotion.
        :rtype: str
        """
        return self._promoted_for

    @promoted_for.setter
    def promoted_for(self, promoted_for):
        """Sets the promoted_for of this Promotion.


        :param promoted_for: The promoted_for of this Promotion.
        :type promoted_for: str
        """

        self._promoted_for = promoted_for

    @property
    def promotion_of(self):
        """Gets the promotion_of of this Promotion.


        :return: The promotion_of of this Promotion.
        :rtype: PidReference
        """
        return self._promotion_of

    @promotion_of.setter
    def promotion_of(self, promotion_of):
        """Sets the promotion_of of this Promotion.


        :param promotion_of: The promotion_of of this Promotion.
        :type promotion_of: PidReference
        """

        self._promotion_of = promotion_of

    @property
    def related_links(self):
        """Gets the related_links of this Promotion.


        :return: The related_links of this Promotion.
        :rtype: RelatedLinks
        """
        return self._related_links

    @related_links.setter
    def related_links(self, related_links):
        """Sets the related_links of this Promotion.


        :param related_links: The related_links of this Promotion.
        :type related_links: RelatedLinks
        """

        self._related_links = related_links

    @property
    def start_time(self):
        """Gets the start_time of this Promotion.


        :return: The start_time of this Promotion.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Promotion.


        :param start_time: The start_time of this Promotion.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Promotion.


        :return: The status of this Promotion.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Promotion.


        :param status: The status of this Promotion.
        :type status: str
        """

        self._status = status

    @property
    def synopses(self):
        """Gets the synopses of this Promotion.


        :return: The synopses of this Promotion.
        :rtype: Synopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Promotion.


        :param synopses: The synopses of this Promotion.
        :type synopses: Synopses
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Promotion.


        :return: The title of this Promotion.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Promotion.


        :param title: The title of this Promotion.
        :type title: str
        """

        self._title = title

    @property
    def updated_time(self):
        """Gets the updated_time of this Promotion.


        :return: The updated_time of this Promotion.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Promotion.


        :param updated_time: The updated_time of this Promotion.
        :type updated_time: datetime
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")

        self._updated_time = updated_time

    @property
    def uri(self):
        """Gets the uri of this Promotion.


        :return: The uri of this Promotion.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Promotion.


        :param uri: The uri of this Promotion.
        :type uri: str
        """

        self._uri = uri

    @property
    def url(self):
        """Gets the url of this Promotion.


        :return: The url of this Promotion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Promotion.


        :param url: The url of this Promotion.
        :type url: str
        """

        self._url = url
