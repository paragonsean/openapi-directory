# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_images_mixin import AlternateImagesMixin
from openapi_server.models.embargoed import Embargoed
from openapi_server.models.for_programmes import ForProgrammes
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
from openapi_server.models.images_mixin import ImagesMixin
from openapi_server.models.master_brand_link import MasterBrandLink
from openapi_server.models.related_links import RelatedLinks
from openapi_server.models.scheduled import Scheduled
from openapi_server.models.synopses import Synopses
import re
from openapi_server import util


class GroupBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_images_mixin: AlternateImagesMixin=None, embargoed: Embargoed=None, for_programmes: ForProgrammes=None, identifiers: Identifiers=None, ids: Ids=None, images_mixin: ImagesMixin=None, master_brand_link: MasterBrandLink=None, partner: str=None, pid: str=None, related_links: RelatedLinks=None, scheduled: Scheduled=None, synopses: Synopses=None, title: str=None, updated_time: datetime=None, url_key: str=None):
        """GroupBody - a model defined in OpenAPI

        :param alternate_images_mixin: The alternate_images_mixin of this GroupBody.
        :param embargoed: The embargoed of this GroupBody.
        :param for_programmes: The for_programmes of this GroupBody.
        :param identifiers: The identifiers of this GroupBody.
        :param ids: The ids of this GroupBody.
        :param images_mixin: The images_mixin of this GroupBody.
        :param master_brand_link: The master_brand_link of this GroupBody.
        :param partner: The partner of this GroupBody.
        :param pid: The pid of this GroupBody.
        :param related_links: The related_links of this GroupBody.
        :param scheduled: The scheduled of this GroupBody.
        :param synopses: The synopses of this GroupBody.
        :param title: The title of this GroupBody.
        :param updated_time: The updated_time of this GroupBody.
        :param url_key: The url_key of this GroupBody.
        """
        self.openapi_types = {
            'alternate_images_mixin': AlternateImagesMixin,
            'embargoed': Embargoed,
            'for_programmes': ForProgrammes,
            'identifiers': Identifiers,
            'ids': Ids,
            'images_mixin': ImagesMixin,
            'master_brand_link': MasterBrandLink,
            'partner': str,
            'pid': str,
            'related_links': RelatedLinks,
            'scheduled': Scheduled,
            'synopses': Synopses,
            'title': str,
            'updated_time': datetime,
            'url_key': str
        }

        self.attribute_map = {
            'alternate_images_mixin': 'alternate_images_mixin',
            'embargoed': 'embargoed',
            'for_programmes': 'for_programmes',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'images_mixin': 'images_mixin',
            'master_brand_link': 'master_brand_link',
            'partner': 'partner',
            'pid': 'pid',
            'related_links': 'related_links',
            'scheduled': 'scheduled',
            'synopses': 'synopses',
            'title': 'title',
            'updated_time': 'updated_time',
            'url_key': 'url_key'
        }

        self._alternate_images_mixin = alternate_images_mixin
        self._embargoed = embargoed
        self._for_programmes = for_programmes
        self._identifiers = identifiers
        self._ids = ids
        self._images_mixin = images_mixin
        self._master_brand_link = master_brand_link
        self._partner = partner
        self._pid = pid
        self._related_links = related_links
        self._scheduled = scheduled
        self._synopses = synopses
        self._title = title
        self._updated_time = updated_time
        self._url_key = url_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group-body of this GroupBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_images_mixin(self):
        """Gets the alternate_images_mixin of this GroupBody.


        :return: The alternate_images_mixin of this GroupBody.
        :rtype: AlternateImagesMixin
        """
        return self._alternate_images_mixin

    @alternate_images_mixin.setter
    def alternate_images_mixin(self, alternate_images_mixin):
        """Sets the alternate_images_mixin of this GroupBody.


        :param alternate_images_mixin: The alternate_images_mixin of this GroupBody.
        :type alternate_images_mixin: AlternateImagesMixin
        """

        self._alternate_images_mixin = alternate_images_mixin

    @property
    def embargoed(self):
        """Gets the embargoed of this GroupBody.


        :return: The embargoed of this GroupBody.
        :rtype: Embargoed
        """
        return self._embargoed

    @embargoed.setter
    def embargoed(self, embargoed):
        """Sets the embargoed of this GroupBody.


        :param embargoed: The embargoed of this GroupBody.
        :type embargoed: Embargoed
        """
        if embargoed is None:
            raise ValueError("Invalid value for `embargoed`, must not be `None`")

        self._embargoed = embargoed

    @property
    def for_programmes(self):
        """Gets the for_programmes of this GroupBody.


        :return: The for_programmes of this GroupBody.
        :rtype: ForProgrammes
        """
        return self._for_programmes

    @for_programmes.setter
    def for_programmes(self, for_programmes):
        """Sets the for_programmes of this GroupBody.


        :param for_programmes: The for_programmes of this GroupBody.
        :type for_programmes: ForProgrammes
        """

        self._for_programmes = for_programmes

    @property
    def identifiers(self):
        """Gets the identifiers of this GroupBody.


        :return: The identifiers of this GroupBody.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this GroupBody.


        :param identifiers: The identifiers of this GroupBody.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this GroupBody.


        :return: The ids of this GroupBody.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this GroupBody.


        :param ids: The ids of this GroupBody.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def images_mixin(self):
        """Gets the images_mixin of this GroupBody.


        :return: The images_mixin of this GroupBody.
        :rtype: ImagesMixin
        """
        return self._images_mixin

    @images_mixin.setter
    def images_mixin(self, images_mixin):
        """Sets the images_mixin of this GroupBody.


        :param images_mixin: The images_mixin of this GroupBody.
        :type images_mixin: ImagesMixin
        """

        self._images_mixin = images_mixin

    @property
    def master_brand_link(self):
        """Gets the master_brand_link of this GroupBody.


        :return: The master_brand_link of this GroupBody.
        :rtype: MasterBrandLink
        """
        return self._master_brand_link

    @master_brand_link.setter
    def master_brand_link(self, master_brand_link):
        """Sets the master_brand_link of this GroupBody.


        :param master_brand_link: The master_brand_link of this GroupBody.
        :type master_brand_link: MasterBrandLink
        """

        self._master_brand_link = master_brand_link

    @property
    def partner(self):
        """Gets the partner of this GroupBody.


        :return: The partner of this GroupBody.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this GroupBody.


        :param partner: The partner of this GroupBody.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this GroupBody.


        :return: The pid of this GroupBody.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this GroupBody.


        :param pid: The pid of this GroupBody.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def related_links(self):
        """Gets the related_links of this GroupBody.


        :return: The related_links of this GroupBody.
        :rtype: RelatedLinks
        """
        return self._related_links

    @related_links.setter
    def related_links(self, related_links):
        """Sets the related_links of this GroupBody.


        :param related_links: The related_links of this GroupBody.
        :type related_links: RelatedLinks
        """

        self._related_links = related_links

    @property
    def scheduled(self):
        """Gets the scheduled of this GroupBody.


        :return: The scheduled of this GroupBody.
        :rtype: Scheduled
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this GroupBody.


        :param scheduled: The scheduled of this GroupBody.
        :type scheduled: Scheduled
        """

        self._scheduled = scheduled

    @property
    def synopses(self):
        """Gets the synopses of this GroupBody.


        :return: The synopses of this GroupBody.
        :rtype: Synopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this GroupBody.


        :param synopses: The synopses of this GroupBody.
        :type synopses: Synopses
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this GroupBody.


        :return: The title of this GroupBody.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GroupBody.


        :param title: The title of this GroupBody.
        :type title: str
        """

        self._title = title

    @property
    def updated_time(self):
        """Gets the updated_time of this GroupBody.


        :return: The updated_time of this GroupBody.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this GroupBody.


        :param updated_time: The updated_time of this GroupBody.
        :type updated_time: datetime
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")

        self._updated_time = updated_time

    @property
    def url_key(self):
        """Gets the url_key of this GroupBody.


        :return: The url_key of this GroupBody.
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key):
        """Sets the url_key of this GroupBody.


        :param url_key: The url_key of this GroupBody.
        :type url_key: str
        """

        self._url_key = url_key
