# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prohibits_filter_inner import ProhibitsFilterInner
from openapi_server import util


class ProhibitsMixinInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: List[ProhibitsFilterInner]=None, mixin: List[ProhibitsFilterInner]=None, name: str=None):
        """ProhibitsMixinInner - a model defined in OpenAPI

        :param filter: The filter of this ProhibitsMixinInner.
        :param mixin: The mixin of this ProhibitsMixinInner.
        :param name: The name of this ProhibitsMixinInner.
        """
        self.openapi_types = {
            'filter': List[ProhibitsFilterInner],
            'mixin': List[ProhibitsFilterInner],
            'name': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'mixin': 'mixin',
            'name': 'name'
        }

        self._filter = filter
        self._mixin = mixin
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProhibitsMixinInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The prohibits_mixin_inner of this ProhibitsMixinInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this ProhibitsMixinInner.


        :return: The filter of this ProhibitsMixinInner.
        :rtype: List[ProhibitsFilterInner]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ProhibitsMixinInner.


        :param filter: The filter of this ProhibitsMixinInner.
        :type filter: List[ProhibitsFilterInner]
        """

        self._filter = filter

    @property
    def mixin(self):
        """Gets the mixin of this ProhibitsMixinInner.


        :return: The mixin of this ProhibitsMixinInner.
        :rtype: List[ProhibitsFilterInner]
        """
        return self._mixin

    @mixin.setter
    def mixin(self, mixin):
        """Sets the mixin of this ProhibitsMixinInner.


        :param mixin: The mixin of this ProhibitsMixinInner.
        :type mixin: List[ProhibitsFilterInner]
        """

        self._mixin = mixin

    @property
    def name(self):
        """Gets the name of this ProhibitsMixinInner.


        :return: The name of this ProhibitsMixinInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProhibitsMixinInner.


        :param name: The name of this ProhibitsMixinInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
