# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_profile_groups import MediaProfileGroups
from openapi_server.models.pid_reference import PidReference
from openapi_server.models.service_reference import ServiceReference
from openapi_server import util


class AvailabilityDebug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_of: PidReference=None, media_profile_groups: MediaProfileGroups=None, service: ServiceReference=None, territory: str=None):
        """AvailabilityDebug - a model defined in OpenAPI

        :param availability_of: The availability_of of this AvailabilityDebug.
        :param media_profile_groups: The media_profile_groups of this AvailabilityDebug.
        :param service: The service of this AvailabilityDebug.
        :param territory: The territory of this AvailabilityDebug.
        """
        self.openapi_types = {
            'availability_of': PidReference,
            'media_profile_groups': MediaProfileGroups,
            'service': ServiceReference,
            'territory': str
        }

        self.attribute_map = {
            'availability_of': 'availability_of',
            'media_profile_groups': 'media_profile_groups',
            'service': 'service',
            'territory': 'territory'
        }

        self._availability_of = availability_of
        self._media_profile_groups = media_profile_groups
        self._service = service
        self._territory = territory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityDebug':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availability-debug of this AvailabilityDebug.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_of(self):
        """Gets the availability_of of this AvailabilityDebug.


        :return: The availability_of of this AvailabilityDebug.
        :rtype: PidReference
        """
        return self._availability_of

    @availability_of.setter
    def availability_of(self, availability_of):
        """Sets the availability_of of this AvailabilityDebug.


        :param availability_of: The availability_of of this AvailabilityDebug.
        :type availability_of: PidReference
        """
        if availability_of is None:
            raise ValueError("Invalid value for `availability_of`, must not be `None`")

        self._availability_of = availability_of

    @property
    def media_profile_groups(self):
        """Gets the media_profile_groups of this AvailabilityDebug.


        :return: The media_profile_groups of this AvailabilityDebug.
        :rtype: MediaProfileGroups
        """
        return self._media_profile_groups

    @media_profile_groups.setter
    def media_profile_groups(self, media_profile_groups):
        """Sets the media_profile_groups of this AvailabilityDebug.


        :param media_profile_groups: The media_profile_groups of this AvailabilityDebug.
        :type media_profile_groups: MediaProfileGroups
        """

        self._media_profile_groups = media_profile_groups

    @property
    def service(self):
        """Gets the service of this AvailabilityDebug.


        :return: The service of this AvailabilityDebug.
        :rtype: ServiceReference
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AvailabilityDebug.


        :param service: The service of this AvailabilityDebug.
        :type service: ServiceReference
        """

        self._service = service

    @property
    def territory(self):
        """Gets the territory of this AvailabilityDebug.


        :return: The territory of this AvailabilityDebug.
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this AvailabilityDebug.


        :param territory: The territory of this AvailabilityDebug.
        :type territory: str
        """

        self._territory = territory
