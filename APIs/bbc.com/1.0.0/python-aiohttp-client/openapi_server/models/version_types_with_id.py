# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_types_with_id_version_types import VersionTypesWithIdVersionTypes
from openapi_server import util


class VersionTypesWithId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version_types: VersionTypesWithIdVersionTypes=None):
        """VersionTypesWithId - a model defined in OpenAPI

        :param version_types: The version_types of this VersionTypesWithId.
        """
        self.openapi_types = {
            'version_types': VersionTypesWithIdVersionTypes
        }

        self.attribute_map = {
            'version_types': 'version_types'
        }

        self._version_types = version_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionTypesWithId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_types_with_id of this VersionTypesWithId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version_types(self):
        """Gets the version_types of this VersionTypesWithId.


        :return: The version_types of this VersionTypesWithId.
        :rtype: VersionTypesWithIdVersionTypes
        """
        return self._version_types

    @version_types.setter
    def version_types(self, version_types):
        """Sets the version_types of this VersionTypesWithId.


        :param version_types: The version_types of this VersionTypesWithId.
        :type version_types: VersionTypesWithIdVersionTypes
        """
        if version_types is None:
            raise ValueError("Invalid value for `version_types`, must not be `None`")

        self._version_types = version_types
