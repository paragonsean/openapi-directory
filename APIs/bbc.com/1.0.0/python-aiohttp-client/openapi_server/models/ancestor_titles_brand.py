# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AncestorTitlesBrand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pid: str=None, title: str=None):
        """AncestorTitlesBrand - a model defined in OpenAPI

        :param pid: The pid of this AncestorTitlesBrand.
        :param title: The title of this AncestorTitlesBrand.
        """
        self.openapi_types = {
            'pid': str,
            'title': str
        }

        self.attribute_map = {
            'pid': 'pid',
            'title': 'title'
        }

        self._pid = pid
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AncestorTitlesBrand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ancestor_titles_brand of this AncestorTitlesBrand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pid(self):
        """Gets the pid of this AncestorTitlesBrand.


        :return: The pid of this AncestorTitlesBrand.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AncestorTitlesBrand.


        :param pid: The pid of this AncestorTitlesBrand.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def title(self):
        """Gets the title of this AncestorTitlesBrand.


        :return: The title of this AncestorTitlesBrand.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AncestorTitlesBrand.


        :param title: The title of this AncestorTitlesBrand.
        :type title: str
        """

        self._title = title
