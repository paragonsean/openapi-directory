# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class OffsetIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, offset: int=None, position: float=None, programme: str=None, version: str=None):
        """OffsetIn - a model defined in OpenAPI

        :param href: The href of this OffsetIn.
        :param offset: The offset of this OffsetIn.
        :param position: The position of this OffsetIn.
        :param programme: The programme of this OffsetIn.
        :param version: The version of this OffsetIn.
        """
        self.openapi_types = {
            'href': str,
            'offset': int,
            'position': float,
            'programme': str,
            'version': str
        }

        self.attribute_map = {
            'href': 'href',
            'offset': 'offset',
            'position': 'position',
            'programme': 'programme',
            'version': 'version'
        }

        self._href = href
        self._offset = offset
        self._position = position
        self._programme = programme
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OffsetIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The offset_in of this OffsetIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this OffsetIn.


        :return: The href of this OffsetIn.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this OffsetIn.


        :param href: The href of this OffsetIn.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def offset(self):
        """Gets the offset of this OffsetIn.


        :return: The offset of this OffsetIn.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this OffsetIn.


        :param offset: The offset of this OffsetIn.
        :type offset: int
        """

        self._offset = offset

    @property
    def position(self):
        """Gets the position of this OffsetIn.


        :return: The position of this OffsetIn.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OffsetIn.


        :param position: The position of this OffsetIn.
        :type position: float
        """

        self._position = position

    @property
    def programme(self):
        """Gets the programme of this OffsetIn.


        :return: The programme of this OffsetIn.
        :rtype: str
        """
        return self._programme

    @programme.setter
    def programme(self, programme):
        """Sets the programme of this OffsetIn.


        :param programme: The programme of this OffsetIn.
        :type programme: str
        """
        if programme is None:
            raise ValueError("Invalid value for `programme`, must not be `None`")
        if programme is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', programme):
            raise ValueError("Invalid value for `programme`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._programme = programme

    @property
    def version(self):
        """Gets the version of this OffsetIn.


        :return: The version of this OffsetIn.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OffsetIn.


        :param version: The version of this OffsetIn.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._version = version
