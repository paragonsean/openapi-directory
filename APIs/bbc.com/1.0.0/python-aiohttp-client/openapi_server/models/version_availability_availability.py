# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_media_sets import AvailableMediaSets
from openapi_server.models.version_availability_availability_availability import VersionAvailabilityAvailabilityAvailability
from openapi_server import util


class VersionAvailabilityAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: VersionAvailabilityAvailabilityAvailability=None, availability_end: datetime=None, availability_start: datetime=None, available_media_sets: AvailableMediaSets=None, status: str=None):
        """VersionAvailabilityAvailability - a model defined in OpenAPI

        :param availability: The availability of this VersionAvailabilityAvailability.
        :param availability_end: The availability_end of this VersionAvailabilityAvailability.
        :param availability_start: The availability_start of this VersionAvailabilityAvailability.
        :param available_media_sets: The available_media_sets of this VersionAvailabilityAvailability.
        :param status: The status of this VersionAvailabilityAvailability.
        """
        self.openapi_types = {
            'availability': VersionAvailabilityAvailabilityAvailability,
            'availability_end': datetime,
            'availability_start': datetime,
            'available_media_sets': AvailableMediaSets,
            'status': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'availability_end': 'availability_end',
            'availability_start': 'availability_start',
            'available_media_sets': 'available_media_sets',
            'status': 'status'
        }

        self._availability = availability
        self._availability_end = availability_end
        self._availability_start = availability_start
        self._available_media_sets = available_media_sets
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionAvailabilityAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_availability_availability of this VersionAvailabilityAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this VersionAvailabilityAvailability.


        :return: The availability of this VersionAvailabilityAvailability.
        :rtype: VersionAvailabilityAvailabilityAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this VersionAvailabilityAvailability.


        :param availability: The availability of this VersionAvailabilityAvailability.
        :type availability: VersionAvailabilityAvailabilityAvailability
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")

        self._availability = availability

    @property
    def availability_end(self):
        """Gets the availability_end of this VersionAvailabilityAvailability.


        :return: The availability_end of this VersionAvailabilityAvailability.
        :rtype: datetime
        """
        return self._availability_end

    @availability_end.setter
    def availability_end(self, availability_end):
        """Sets the availability_end of this VersionAvailabilityAvailability.


        :param availability_end: The availability_end of this VersionAvailabilityAvailability.
        :type availability_end: datetime
        """

        self._availability_end = availability_end

    @property
    def availability_start(self):
        """Gets the availability_start of this VersionAvailabilityAvailability.


        :return: The availability_start of this VersionAvailabilityAvailability.
        :rtype: datetime
        """
        return self._availability_start

    @availability_start.setter
    def availability_start(self, availability_start):
        """Sets the availability_start of this VersionAvailabilityAvailability.


        :param availability_start: The availability_start of this VersionAvailabilityAvailability.
        :type availability_start: datetime
        """

        self._availability_start = availability_start

    @property
    def available_media_sets(self):
        """Gets the available_media_sets of this VersionAvailabilityAvailability.


        :return: The available_media_sets of this VersionAvailabilityAvailability.
        :rtype: AvailableMediaSets
        """
        return self._available_media_sets

    @available_media_sets.setter
    def available_media_sets(self, available_media_sets):
        """Sets the available_media_sets of this VersionAvailabilityAvailability.


        :param available_media_sets: The available_media_sets of this VersionAvailabilityAvailability.
        :type available_media_sets: AvailableMediaSets
        """
        if available_media_sets is None:
            raise ValueError("Invalid value for `available_media_sets`, must not be `None`")

        self._available_media_sets = available_media_sets

    @property
    def status(self):
        """Gets the status of this VersionAvailabilityAvailability.


        :return: The status of this VersionAvailabilityAvailability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VersionAvailabilityAvailability.


        :param status: The status of this VersionAvailabilityAvailability.
        :type status: str
        """

        self._status = status
