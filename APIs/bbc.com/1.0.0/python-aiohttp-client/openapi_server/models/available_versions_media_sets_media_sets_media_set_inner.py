# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_versions_media_sets_media_sets_media_set_inner_territories import AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories
from openapi_server import util


class AvailableVersionsMediaSetsMediaSetsMediaSetInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_start: datetime=None, name: str=None, territories: AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories=None):
        """AvailableVersionsMediaSetsMediaSetsMediaSetInner - a model defined in OpenAPI

        :param actual_start: The actual_start of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :param name: The name of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :param territories: The territories of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        """
        self.openapi_types = {
            'actual_start': datetime,
            'name': str,
            'territories': AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories
        }

        self.attribute_map = {
            'actual_start': 'actual_start',
            'name': 'name',
            'territories': 'territories'
        }

        self._actual_start = actual_start
        self._name = name
        self._territories = territories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableVersionsMediaSetsMediaSetsMediaSetInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The available_versions_media_sets_media_sets_media_set_inner of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_start(self):
        """Gets the actual_start of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.


        :return: The actual_start of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :rtype: datetime
        """
        return self._actual_start

    @actual_start.setter
    def actual_start(self, actual_start):
        """Sets the actual_start of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.


        :param actual_start: The actual_start of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :type actual_start: datetime
        """

        self._actual_start = actual_start

    @property
    def name(self):
        """Gets the name of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.


        :return: The name of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.


        :param name: The name of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def territories(self):
        """Gets the territories of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.


        :return: The territories of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :rtype: AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories
        """
        return self._territories

    @territories.setter
    def territories(self, territories):
        """Sets the territories of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.


        :param territories: The territories of this AvailableVersionsMediaSetsMediaSetsMediaSetInner.
        :type territories: AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories
        """

        self._territories = territories
