# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicationRights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, context: str=None, platform: str=None, territory: str=None, transport: str=None):
        """PublicationRights - a model defined in OpenAPI

        :param text: The text of this PublicationRights.
        :param context: The context of this PublicationRights.
        :param platform: The platform of this PublicationRights.
        :param territory: The territory of this PublicationRights.
        :param transport: The transport of this PublicationRights.
        """
        self.openapi_types = {
            'text': str,
            'context': str,
            'platform': str,
            'territory': str,
            'transport': str
        }

        self.attribute_map = {
            'text': '#text',
            'context': 'context',
            'platform': 'platform',
            'territory': 'territory',
            'transport': 'transport'
        }

        self._text = text
        self._context = context
        self._platform = platform
        self._territory = territory
        self._transport = transport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicationRights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The publication_rights of this PublicationRights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this PublicationRights.


        :return: The text of this PublicationRights.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PublicationRights.


        :param text: The text of this PublicationRights.
        :type text: str
        """

        self._text = text

    @property
    def context(self):
        """Gets the context of this PublicationRights.


        :return: The context of this PublicationRights.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this PublicationRights.


        :param context: The context of this PublicationRights.
        :type context: str
        """

        self._context = context

    @property
    def platform(self):
        """Gets the platform of this PublicationRights.


        :return: The platform of this PublicationRights.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this PublicationRights.


        :param platform: The platform of this PublicationRights.
        :type platform: str
        """

        self._platform = platform

    @property
    def territory(self):
        """Gets the territory of this PublicationRights.


        :return: The territory of this PublicationRights.
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this PublicationRights.


        :param territory: The territory of this PublicationRights.
        :type territory: str
        """

        self._territory = territory

    @property
    def transport(self):
        """Gets the transport of this PublicationRights.


        :return: The transport of this PublicationRights.
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this PublicationRights.


        :param transport: The transport of this PublicationRights.
        :type transport: str
        """

        self._transport = transport
