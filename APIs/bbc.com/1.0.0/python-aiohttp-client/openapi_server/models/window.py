# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor_titles import AncestorTitles
from openapi_server.models.ancestors_titles import AncestorsTitles
from openapi_server.models.date_range import DateRange
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
from openapi_server.models.image_link import ImageLink
from openapi_server.models.images_mixin import ImagesMixin
from openapi_server.models.pid_reference import PidReference
from openapi_server.models.scheduled_publication_rights import ScheduledPublicationRights
from openapi_server.models.scheduled_time import ScheduledTime
from openapi_server.models.service_reference import ServiceReference
import re
from openapi_server import util


class Window(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accurate_programme_time: DateRange=None, ancestor_titles: AncestorTitles=None, ancestors_titles: AncestorsTitles=None, identifiers: Identifiers=None, ids: Ids=None, image_link: ImageLink=None, images_mixin: ImagesMixin=None, media_availability_time: DateRange=None, partner: str=None, pid: str=None, scheduled_publication_rights: ScheduledPublicationRights=None, scheduled_time: ScheduledTime=None, service: ServiceReference=None, updated_time: datetime=None, window_of: List[PidReference]=None):
        """Window - a model defined in OpenAPI

        :param accurate_programme_time: The accurate_programme_time of this Window.
        :param ancestor_titles: The ancestor_titles of this Window.
        :param ancestors_titles: The ancestors_titles of this Window.
        :param identifiers: The identifiers of this Window.
        :param ids: The ids of this Window.
        :param image_link: The image_link of this Window.
        :param images_mixin: The images_mixin of this Window.
        :param media_availability_time: The media_availability_time of this Window.
        :param partner: The partner of this Window.
        :param pid: The pid of this Window.
        :param scheduled_publication_rights: The scheduled_publication_rights of this Window.
        :param scheduled_time: The scheduled_time of this Window.
        :param service: The service of this Window.
        :param updated_time: The updated_time of this Window.
        :param window_of: The window_of of this Window.
        """
        self.openapi_types = {
            'accurate_programme_time': DateRange,
            'ancestor_titles': AncestorTitles,
            'ancestors_titles': AncestorsTitles,
            'identifiers': Identifiers,
            'ids': Ids,
            'image_link': ImageLink,
            'images_mixin': ImagesMixin,
            'media_availability_time': DateRange,
            'partner': str,
            'pid': str,
            'scheduled_publication_rights': ScheduledPublicationRights,
            'scheduled_time': ScheduledTime,
            'service': ServiceReference,
            'updated_time': datetime,
            'window_of': List[PidReference]
        }

        self.attribute_map = {
            'accurate_programme_time': 'accurate_programme_time',
            'ancestor_titles': 'ancestor_titles',
            'ancestors_titles': 'ancestors_titles',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'image_link': 'image_link',
            'images_mixin': 'images_mixin',
            'media_availability_time': 'media_availability_time',
            'partner': 'partner',
            'pid': 'pid',
            'scheduled_publication_rights': 'scheduled_publication_rights',
            'scheduled_time': 'scheduled_time',
            'service': 'service',
            'updated_time': 'updated_time',
            'window_of': 'window_of'
        }

        self._accurate_programme_time = accurate_programme_time
        self._ancestor_titles = ancestor_titles
        self._ancestors_titles = ancestors_titles
        self._identifiers = identifiers
        self._ids = ids
        self._image_link = image_link
        self._images_mixin = images_mixin
        self._media_availability_time = media_availability_time
        self._partner = partner
        self._pid = pid
        self._scheduled_publication_rights = scheduled_publication_rights
        self._scheduled_time = scheduled_time
        self._service = service
        self._updated_time = updated_time
        self._window_of = window_of

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Window':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The window of this Window.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accurate_programme_time(self):
        """Gets the accurate_programme_time of this Window.


        :return: The accurate_programme_time of this Window.
        :rtype: DateRange
        """
        return self._accurate_programme_time

    @accurate_programme_time.setter
    def accurate_programme_time(self, accurate_programme_time):
        """Sets the accurate_programme_time of this Window.


        :param accurate_programme_time: The accurate_programme_time of this Window.
        :type accurate_programme_time: DateRange
        """

        self._accurate_programme_time = accurate_programme_time

    @property
    def ancestor_titles(self):
        """Gets the ancestor_titles of this Window.


        :return: The ancestor_titles of this Window.
        :rtype: AncestorTitles
        """
        return self._ancestor_titles

    @ancestor_titles.setter
    def ancestor_titles(self, ancestor_titles):
        """Sets the ancestor_titles of this Window.


        :param ancestor_titles: The ancestor_titles of this Window.
        :type ancestor_titles: AncestorTitles
        """

        self._ancestor_titles = ancestor_titles

    @property
    def ancestors_titles(self):
        """Gets the ancestors_titles of this Window.


        :return: The ancestors_titles of this Window.
        :rtype: AncestorsTitles
        """
        return self._ancestors_titles

    @ancestors_titles.setter
    def ancestors_titles(self, ancestors_titles):
        """Sets the ancestors_titles of this Window.


        :param ancestors_titles: The ancestors_titles of this Window.
        :type ancestors_titles: AncestorsTitles
        """

        self._ancestors_titles = ancestors_titles

    @property
    def identifiers(self):
        """Gets the identifiers of this Window.


        :return: The identifiers of this Window.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Window.


        :param identifiers: The identifiers of this Window.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this Window.


        :return: The ids of this Window.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Window.


        :param ids: The ids of this Window.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def image_link(self):
        """Gets the image_link of this Window.


        :return: The image_link of this Window.
        :rtype: ImageLink
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this Window.


        :param image_link: The image_link of this Window.
        :type image_link: ImageLink
        """

        self._image_link = image_link

    @property
    def images_mixin(self):
        """Gets the images_mixin of this Window.


        :return: The images_mixin of this Window.
        :rtype: ImagesMixin
        """
        return self._images_mixin

    @images_mixin.setter
    def images_mixin(self, images_mixin):
        """Sets the images_mixin of this Window.


        :param images_mixin: The images_mixin of this Window.
        :type images_mixin: ImagesMixin
        """

        self._images_mixin = images_mixin

    @property
    def media_availability_time(self):
        """Gets the media_availability_time of this Window.


        :return: The media_availability_time of this Window.
        :rtype: DateRange
        """
        return self._media_availability_time

    @media_availability_time.setter
    def media_availability_time(self, media_availability_time):
        """Sets the media_availability_time of this Window.


        :param media_availability_time: The media_availability_time of this Window.
        :type media_availability_time: DateRange
        """

        self._media_availability_time = media_availability_time

    @property
    def partner(self):
        """Gets the partner of this Window.


        :return: The partner of this Window.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Window.


        :param partner: The partner of this Window.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Window.


        :return: The pid of this Window.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Window.


        :param pid: The pid of this Window.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def scheduled_publication_rights(self):
        """Gets the scheduled_publication_rights of this Window.


        :return: The scheduled_publication_rights of this Window.
        :rtype: ScheduledPublicationRights
        """
        return self._scheduled_publication_rights

    @scheduled_publication_rights.setter
    def scheduled_publication_rights(self, scheduled_publication_rights):
        """Sets the scheduled_publication_rights of this Window.


        :param scheduled_publication_rights: The scheduled_publication_rights of this Window.
        :type scheduled_publication_rights: ScheduledPublicationRights
        """

        self._scheduled_publication_rights = scheduled_publication_rights

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this Window.


        :return: The scheduled_time of this Window.
        :rtype: ScheduledTime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this Window.


        :param scheduled_time: The scheduled_time of this Window.
        :type scheduled_time: ScheduledTime
        """

        self._scheduled_time = scheduled_time

    @property
    def service(self):
        """Gets the service of this Window.


        :return: The service of this Window.
        :rtype: ServiceReference
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Window.


        :param service: The service of this Window.
        :type service: ServiceReference
        """

        self._service = service

    @property
    def updated_time(self):
        """Gets the updated_time of this Window.


        :return: The updated_time of this Window.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Window.


        :param updated_time: The updated_time of this Window.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def window_of(self):
        """Gets the window_of of this Window.


        :return: The window_of of this Window.
        :rtype: List[PidReference]
        """
        return self._window_of

    @window_of.setter
    def window_of(self, window_of):
        """Sets the window_of of this Window.


        :param window_of: The window_of of this Window.
        :type window_of: List[PidReference]
        """

        self._window_of = window_of
