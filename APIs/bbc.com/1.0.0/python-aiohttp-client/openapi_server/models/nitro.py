# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deprecations import Deprecations
from openapi_server.models.filters import Filters
from openapi_server.models.mixins import Mixins
from openapi_server.models.pagination import Pagination
from openapi_server.models.results import Results
from openapi_server.models.sorts import Sorts
from openapi_server import util


class Nitro(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecations: Deprecations=None, filters: Filters=None, mixins: Mixins=None, pagination: Pagination=None, results: Results=None, sorts: Sorts=None):
        """Nitro - a model defined in OpenAPI

        :param deprecations: The deprecations of this Nitro.
        :param filters: The filters of this Nitro.
        :param mixins: The mixins of this Nitro.
        :param pagination: The pagination of this Nitro.
        :param results: The results of this Nitro.
        :param sorts: The sorts of this Nitro.
        """
        self.openapi_types = {
            'deprecations': Deprecations,
            'filters': Filters,
            'mixins': Mixins,
            'pagination': Pagination,
            'results': Results,
            'sorts': Sorts
        }

        self.attribute_map = {
            'deprecations': 'deprecations',
            'filters': 'filters',
            'mixins': 'mixins',
            'pagination': 'pagination',
            'results': 'results',
            'sorts': 'sorts'
        }

        self._deprecations = deprecations
        self._filters = filters
        self._mixins = mixins
        self._pagination = pagination
        self._results = results
        self._sorts = sorts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Nitro':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The nitro of this Nitro.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecations(self):
        """Gets the deprecations of this Nitro.


        :return: The deprecations of this Nitro.
        :rtype: Deprecations
        """
        return self._deprecations

    @deprecations.setter
    def deprecations(self, deprecations):
        """Sets the deprecations of this Nitro.


        :param deprecations: The deprecations of this Nitro.
        :type deprecations: Deprecations
        """

        self._deprecations = deprecations

    @property
    def filters(self):
        """Gets the filters of this Nitro.


        :return: The filters of this Nitro.
        :rtype: Filters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Nitro.


        :param filters: The filters of this Nitro.
        :type filters: Filters
        """

        self._filters = filters

    @property
    def mixins(self):
        """Gets the mixins of this Nitro.


        :return: The mixins of this Nitro.
        :rtype: Mixins
        """
        return self._mixins

    @mixins.setter
    def mixins(self, mixins):
        """Sets the mixins of this Nitro.


        :param mixins: The mixins of this Nitro.
        :type mixins: Mixins
        """

        self._mixins = mixins

    @property
    def pagination(self):
        """Gets the pagination of this Nitro.


        :return: The pagination of this Nitro.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this Nitro.


        :param pagination: The pagination of this Nitro.
        :type pagination: Pagination
        """

        self._pagination = pagination

    @property
    def results(self):
        """Gets the results of this Nitro.


        :return: The results of this Nitro.
        :rtype: Results
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Nitro.


        :param results: The results of this Nitro.
        :type results: Results
        """

        self._results = results

    @property
    def sorts(self):
        """Gets the sorts of this Nitro.


        :return: The sorts of this Nitro.
        :rtype: Sorts
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this Nitro.


        :param sorts: The sorts of this Nitro.
        :type sorts: Sorts
        """

        self._sorts = sorts
