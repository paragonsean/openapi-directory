# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
from openapi_server.models.pid_reference import PidReference
from openapi_server.models.types_with_id import TypesWithId
from openapi_server.models.version_types_with_id import VersionTypesWithId
from openapi_server.models.warnings import Warnings
import re
from openapi_server import util


class VersionGroupVersionVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: str=None, competition_warning: bool=None, duration: str=None, identifiers: Identifiers=None, ids: Ids=None, pid: str=None, types_with_id: TypesWithId=None, updated_time: datetime=None, version_of: PidReference=None, version_types_with_id: VersionTypesWithId=None, warnings: Warnings=None):
        """VersionGroupVersionVersion - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this VersionGroupVersionVersion.
        :param competition_warning: The competition_warning of this VersionGroupVersionVersion.
        :param duration: The duration of this VersionGroupVersionVersion.
        :param identifiers: The identifiers of this VersionGroupVersionVersion.
        :param ids: The ids of this VersionGroupVersionVersion.
        :param pid: The pid of this VersionGroupVersionVersion.
        :param types_with_id: The types_with_id of this VersionGroupVersionVersion.
        :param updated_time: The updated_time of this VersionGroupVersionVersion.
        :param version_of: The version_of of this VersionGroupVersionVersion.
        :param version_types_with_id: The version_types_with_id of this VersionGroupVersionVersion.
        :param warnings: The warnings of this VersionGroupVersionVersion.
        """
        self.openapi_types = {
            'aspect_ratio': str,
            'competition_warning': bool,
            'duration': str,
            'identifiers': Identifiers,
            'ids': Ids,
            'pid': str,
            'types_with_id': TypesWithId,
            'updated_time': datetime,
            'version_of': PidReference,
            'version_types_with_id': VersionTypesWithId,
            'warnings': Warnings
        }

        self.attribute_map = {
            'aspect_ratio': 'aspect_ratio',
            'competition_warning': 'competition_warning',
            'duration': 'duration',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'pid': 'pid',
            'types_with_id': 'types_with_id',
            'updated_time': 'updated_time',
            'version_of': 'version_of',
            'version_types_with_id': 'version_types_with_id',
            'warnings': 'warnings'
        }

        self._aspect_ratio = aspect_ratio
        self._competition_warning = competition_warning
        self._duration = duration
        self._identifiers = identifiers
        self._ids = ids
        self._pid = pid
        self._types_with_id = types_with_id
        self._updated_time = updated_time
        self._version_of = version_of
        self._version_types_with_id = version_types_with_id
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionGroupVersionVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_group_version_version of this VersionGroupVersionVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this VersionGroupVersionVersion.


        :return: The aspect_ratio of this VersionGroupVersionVersion.
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this VersionGroupVersionVersion.


        :param aspect_ratio: The aspect_ratio of this VersionGroupVersionVersion.
        :type aspect_ratio: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def competition_warning(self):
        """Gets the competition_warning of this VersionGroupVersionVersion.


        :return: The competition_warning of this VersionGroupVersionVersion.
        :rtype: bool
        """
        return self._competition_warning

    @competition_warning.setter
    def competition_warning(self, competition_warning):
        """Sets the competition_warning of this VersionGroupVersionVersion.


        :param competition_warning: The competition_warning of this VersionGroupVersionVersion.
        :type competition_warning: bool
        """

        self._competition_warning = competition_warning

    @property
    def duration(self):
        """Gets the duration of this VersionGroupVersionVersion.


        :return: The duration of this VersionGroupVersionVersion.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VersionGroupVersionVersion.


        :param duration: The duration of this VersionGroupVersionVersion.
        :type duration: str
        """
        if duration is not None and not re.search(r'^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$', duration):
            raise ValueError("Invalid value for `duration`, must be a follow pattern or equal to `/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/`")

        self._duration = duration

    @property
    def identifiers(self):
        """Gets the identifiers of this VersionGroupVersionVersion.


        :return: The identifiers of this VersionGroupVersionVersion.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this VersionGroupVersionVersion.


        :param identifiers: The identifiers of this VersionGroupVersionVersion.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this VersionGroupVersionVersion.


        :return: The ids of this VersionGroupVersionVersion.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this VersionGroupVersionVersion.


        :param ids: The ids of this VersionGroupVersionVersion.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def pid(self):
        """Gets the pid of this VersionGroupVersionVersion.


        :return: The pid of this VersionGroupVersionVersion.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this VersionGroupVersionVersion.


        :param pid: The pid of this VersionGroupVersionVersion.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def types_with_id(self):
        """Gets the types_with_id of this VersionGroupVersionVersion.


        :return: The types_with_id of this VersionGroupVersionVersion.
        :rtype: TypesWithId
        """
        return self._types_with_id

    @types_with_id.setter
    def types_with_id(self, types_with_id):
        """Sets the types_with_id of this VersionGroupVersionVersion.


        :param types_with_id: The types_with_id of this VersionGroupVersionVersion.
        :type types_with_id: TypesWithId
        """

        self._types_with_id = types_with_id

    @property
    def updated_time(self):
        """Gets the updated_time of this VersionGroupVersionVersion.


        :return: The updated_time of this VersionGroupVersionVersion.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this VersionGroupVersionVersion.


        :param updated_time: The updated_time of this VersionGroupVersionVersion.
        :type updated_time: datetime
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")

        self._updated_time = updated_time

    @property
    def version_of(self):
        """Gets the version_of of this VersionGroupVersionVersion.


        :return: The version_of of this VersionGroupVersionVersion.
        :rtype: PidReference
        """
        return self._version_of

    @version_of.setter
    def version_of(self, version_of):
        """Sets the version_of of this VersionGroupVersionVersion.


        :param version_of: The version_of of this VersionGroupVersionVersion.
        :type version_of: PidReference
        """

        self._version_of = version_of

    @property
    def version_types_with_id(self):
        """Gets the version_types_with_id of this VersionGroupVersionVersion.


        :return: The version_types_with_id of this VersionGroupVersionVersion.
        :rtype: VersionTypesWithId
        """
        return self._version_types_with_id

    @version_types_with_id.setter
    def version_types_with_id(self, version_types_with_id):
        """Sets the version_types_with_id of this VersionGroupVersionVersion.


        :param version_types_with_id: The version_types_with_id of this VersionGroupVersionVersion.
        :type version_types_with_id: VersionTypesWithId
        """

        self._version_types_with_id = version_types_with_id

    @property
    def warnings(self):
        """Gets the warnings of this VersionGroupVersionVersion.


        :return: The warnings of this VersionGroupVersionVersion.
        :rtype: Warnings
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this VersionGroupVersionVersion.


        :param warnings: The warnings of this VersionGroupVersionVersion.
        :type warnings: Warnings
        """

        self._warnings = warnings
