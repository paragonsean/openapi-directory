# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_images_mixin_alternate_images import AlternateImagesMixinAlternateImages
from openapi_server import util


class AlternateImagesMixin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_images: AlternateImagesMixinAlternateImages=None):
        """AlternateImagesMixin - a model defined in OpenAPI

        :param alternate_images: The alternate_images of this AlternateImagesMixin.
        """
        self.openapi_types = {
            'alternate_images': AlternateImagesMixinAlternateImages
        }

        self.attribute_map = {
            'alternate_images': 'alternate_images'
        }

        self._alternate_images = alternate_images

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlternateImagesMixin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alternate_images_mixin of this AlternateImagesMixin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_images(self):
        """Gets the alternate_images of this AlternateImagesMixin.


        :return: The alternate_images of this AlternateImagesMixin.
        :rtype: AlternateImagesMixinAlternateImages
        """
        return self._alternate_images

    @alternate_images.setter
    def alternate_images(self, alternate_images):
        """Sets the alternate_images of this AlternateImagesMixin.


        :param alternate_images: The alternate_images of this AlternateImagesMixin.
        :type alternate_images: AlternateImagesMixinAlternateImages
        """
        if alternate_images is None:
            raise ValueError("Invalid value for `alternate_images`, must not be `None`")

        self._alternate_images = alternate_images
