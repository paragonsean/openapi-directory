# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.availability_debug import AvailabilityDebug
from openapi_server.models.availability_of import AvailabilityOf
from openapi_server.models.availability_type import AvailabilityType
from openapi_server.models.date_range import DateRange
from openapi_server.models.scheduled_time import ScheduledTime
from openapi_server import util


class Availability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accurate_programme_time: DateRange=None, actual_start: datetime=None, availability_debug: AvailabilityDebug=None, availability_of: List[AvailabilityOf]=None, availability_type: AvailabilityType=None, media_availability_time: DateRange=None, media_set: List[str]=None, revocation_status: str=None, scheduled_time: ScheduledTime=None, status: str=None):
        """Availability - a model defined in OpenAPI

        :param accurate_programme_time: The accurate_programme_time of this Availability.
        :param actual_start: The actual_start of this Availability.
        :param availability_debug: The availability_debug of this Availability.
        :param availability_of: The availability_of of this Availability.
        :param availability_type: The availability_type of this Availability.
        :param media_availability_time: The media_availability_time of this Availability.
        :param media_set: The media_set of this Availability.
        :param revocation_status: The revocation_status of this Availability.
        :param scheduled_time: The scheduled_time of this Availability.
        :param status: The status of this Availability.
        """
        self.openapi_types = {
            'accurate_programme_time': DateRange,
            'actual_start': datetime,
            'availability_debug': AvailabilityDebug,
            'availability_of': List[AvailabilityOf],
            'availability_type': AvailabilityType,
            'media_availability_time': DateRange,
            'media_set': List[str],
            'revocation_status': str,
            'scheduled_time': ScheduledTime,
            'status': str
        }

        self.attribute_map = {
            'accurate_programme_time': 'accurate_programme_time',
            'actual_start': 'actual_start',
            'availability_debug': 'availability-debug',
            'availability_of': 'availability_of',
            'availability_type': 'availability_type',
            'media_availability_time': 'media_availability_time',
            'media_set': 'media_set',
            'revocation_status': 'revocation_status',
            'scheduled_time': 'scheduled_time',
            'status': 'status'
        }

        self._accurate_programme_time = accurate_programme_time
        self._actual_start = actual_start
        self._availability_debug = availability_debug
        self._availability_of = availability_of
        self._availability_type = availability_type
        self._media_availability_time = media_availability_time
        self._media_set = media_set
        self._revocation_status = revocation_status
        self._scheduled_time = scheduled_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Availability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availability of this Availability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accurate_programme_time(self):
        """Gets the accurate_programme_time of this Availability.


        :return: The accurate_programme_time of this Availability.
        :rtype: DateRange
        """
        return self._accurate_programme_time

    @accurate_programme_time.setter
    def accurate_programme_time(self, accurate_programme_time):
        """Sets the accurate_programme_time of this Availability.


        :param accurate_programme_time: The accurate_programme_time of this Availability.
        :type accurate_programme_time: DateRange
        """

        self._accurate_programme_time = accurate_programme_time

    @property
    def actual_start(self):
        """Gets the actual_start of this Availability.


        :return: The actual_start of this Availability.
        :rtype: datetime
        """
        return self._actual_start

    @actual_start.setter
    def actual_start(self, actual_start):
        """Sets the actual_start of this Availability.


        :param actual_start: The actual_start of this Availability.
        :type actual_start: datetime
        """

        self._actual_start = actual_start

    @property
    def availability_debug(self):
        """Gets the availability_debug of this Availability.


        :return: The availability_debug of this Availability.
        :rtype: AvailabilityDebug
        """
        return self._availability_debug

    @availability_debug.setter
    def availability_debug(self, availability_debug):
        """Sets the availability_debug of this Availability.


        :param availability_debug: The availability_debug of this Availability.
        :type availability_debug: AvailabilityDebug
        """

        self._availability_debug = availability_debug

    @property
    def availability_of(self):
        """Gets the availability_of of this Availability.


        :return: The availability_of of this Availability.
        :rtype: List[AvailabilityOf]
        """
        return self._availability_of

    @availability_of.setter
    def availability_of(self, availability_of):
        """Sets the availability_of of this Availability.


        :param availability_of: The availability_of of this Availability.
        :type availability_of: List[AvailabilityOf]
        """

        self._availability_of = availability_of

    @property
    def availability_type(self):
        """Gets the availability_type of this Availability.


        :return: The availability_type of this Availability.
        :rtype: AvailabilityType
        """
        return self._availability_type

    @availability_type.setter
    def availability_type(self, availability_type):
        """Sets the availability_type of this Availability.


        :param availability_type: The availability_type of this Availability.
        :type availability_type: AvailabilityType
        """
        if availability_type is None:
            raise ValueError("Invalid value for `availability_type`, must not be `None`")

        self._availability_type = availability_type

    @property
    def media_availability_time(self):
        """Gets the media_availability_time of this Availability.


        :return: The media_availability_time of this Availability.
        :rtype: DateRange
        """
        return self._media_availability_time

    @media_availability_time.setter
    def media_availability_time(self, media_availability_time):
        """Sets the media_availability_time of this Availability.


        :param media_availability_time: The media_availability_time of this Availability.
        :type media_availability_time: DateRange
        """

        self._media_availability_time = media_availability_time

    @property
    def media_set(self):
        """Gets the media_set of this Availability.


        :return: The media_set of this Availability.
        :rtype: List[str]
        """
        return self._media_set

    @media_set.setter
    def media_set(self, media_set):
        """Sets the media_set of this Availability.


        :param media_set: The media_set of this Availability.
        :type media_set: List[str]
        """

        self._media_set = media_set

    @property
    def revocation_status(self):
        """Gets the revocation_status of this Availability.


        :return: The revocation_status of this Availability.
        :rtype: str
        """
        return self._revocation_status

    @revocation_status.setter
    def revocation_status(self, revocation_status):
        """Sets the revocation_status of this Availability.


        :param revocation_status: The revocation_status of this Availability.
        :type revocation_status: str
        """

        self._revocation_status = revocation_status

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this Availability.


        :return: The scheduled_time of this Availability.
        :rtype: ScheduledTime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this Availability.


        :param scheduled_time: The scheduled_time of this Availability.
        :type scheduled_time: ScheduledTime
        """

        self._scheduled_time = scheduled_time

    @property
    def status(self):
        """Gets the status of this Availability.


        :return: The status of this Availability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Availability.


        :param status: The status of this Availability.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
