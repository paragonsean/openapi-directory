# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.played_in_links import PlayedInLinks
from openapi_server.models.synopses import Synopses
import re
from openapi_server import util


class PlayEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: int=None, pid: str=None, played_in_links: List[PlayedInLinks]=None, position: float=None, synopses: Synopses=None, title: str=None):
        """PlayEvent - a model defined in OpenAPI

        :param offset: The offset of this PlayEvent.
        :param pid: The pid of this PlayEvent.
        :param played_in_links: The played_in_links of this PlayEvent.
        :param position: The position of this PlayEvent.
        :param synopses: The synopses of this PlayEvent.
        :param title: The title of this PlayEvent.
        """
        self.openapi_types = {
            'offset': int,
            'pid': str,
            'played_in_links': List[PlayedInLinks],
            'position': float,
            'synopses': Synopses,
            'title': str
        }

        self.attribute_map = {
            'offset': 'offset',
            'pid': 'pid',
            'played_in_links': 'played_in_links',
            'position': 'position',
            'synopses': 'synopses',
            'title': 'title'
        }

        self._offset = offset
        self._pid = pid
        self._played_in_links = played_in_links
        self._position = position
        self._synopses = synopses
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The play_event of this PlayEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this PlayEvent.


        :return: The offset of this PlayEvent.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PlayEvent.


        :param offset: The offset of this PlayEvent.
        :type offset: int
        """

        self._offset = offset

    @property
    def pid(self):
        """Gets the pid of this PlayEvent.


        :return: The pid of this PlayEvent.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this PlayEvent.


        :param pid: The pid of this PlayEvent.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def played_in_links(self):
        """Gets the played_in_links of this PlayEvent.


        :return: The played_in_links of this PlayEvent.
        :rtype: List[PlayedInLinks]
        """
        return self._played_in_links

    @played_in_links.setter
    def played_in_links(self, played_in_links):
        """Sets the played_in_links of this PlayEvent.


        :param played_in_links: The played_in_links of this PlayEvent.
        :type played_in_links: List[PlayedInLinks]
        """

        self._played_in_links = played_in_links

    @property
    def position(self):
        """Gets the position of this PlayEvent.


        :return: The position of this PlayEvent.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayEvent.


        :param position: The position of this PlayEvent.
        :type position: float
        """

        self._position = position

    @property
    def synopses(self):
        """Gets the synopses of this PlayEvent.


        :return: The synopses of this PlayEvent.
        :rtype: Synopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this PlayEvent.


        :param synopses: The synopses of this PlayEvent.
        :type synopses: Synopses
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this PlayEvent.


        :return: The title of this PlayEvent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlayEvent.


        :param title: The title of this PlayEvent.
        :type title: str
        """

        self._title = title
