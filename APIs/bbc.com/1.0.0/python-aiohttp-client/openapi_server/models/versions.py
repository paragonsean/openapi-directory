# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_availability_mixin import VersionAvailabilityMixin
from openapi_server import util


class Versions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: int=None, version_availability_mixin: VersionAvailabilityMixin=None):
        """Versions - a model defined in OpenAPI

        :param available: The available of this Versions.
        :param version_availability_mixin: The version_availability_mixin of this Versions.
        """
        self.openapi_types = {
            'available': int,
            'version_availability_mixin': VersionAvailabilityMixin
        }

        self.attribute_map = {
            'available': 'available',
            'version_availability_mixin': 'version_availability_mixin'
        }

        self._available = available
        self._version_availability_mixin = version_availability_mixin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Versions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The versions of this Versions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this Versions.


        :return: The available of this Versions.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Versions.


        :param available: The available of this Versions.
        :type available: int
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def version_availability_mixin(self):
        """Gets the version_availability_mixin of this Versions.


        :return: The version_availability_mixin of this Versions.
        :rtype: VersionAvailabilityMixin
        """
        return self._version_availability_mixin

    @version_availability_mixin.setter
    def version_availability_mixin(self, version_availability_mixin):
        """Sets the version_availability_mixin of this Versions.


        :param version_availability_mixin: The version_availability_mixin of this Versions.
        :type version_availability_mixin: VersionAvailabilityMixin
        """
        if version_availability_mixin is None:
            raise ValueError("Invalid value for `version_availability_mixin`, must not be `None`")

        self._version_availability_mixin = version_availability_mixin
