# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.availability import Availability
from openapi_server.models.brand import Brand
from openapi_server.models.broadcast import Broadcast
from openapi_server.models.clip import Clip
from openapi_server.models.contributor import Contributor
from openapi_server.models.episode import Episode
from openapi_server.models.group_body import GroupBody
from openapi_server.models.image import Image
from openapi_server.models.item import Item
from openapi_server.models.master_brand import MasterBrand
from openapi_server.models.promotion import Promotion
from openapi_server.models.series import Series
from openapi_server.models.service import Service
from openapi_server.models.version_group import VersionGroup
from openapi_server.models.window import Window
from openapi_server import util


class Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: Availability=None, brand: Brand=None, broadcast: Broadcast=None, chapter: Item=None, clip: Clip=None, collection: GroupBody=None, contributor: Contributor=None, episode: Episode=None, franchise: GroupBody=None, gallery: GroupBody=None, highlight: Item=None, image: Image=None, master_brand: MasterBrand=None, more_than: int=None, music: Item=None, other: Item=None, page: int=None, page_size: int=None, promotion: Promotion=None, season: GroupBody=None, series: Series=None, service: Service=None, speech: Item=None, total: int=None, version_group: VersionGroup=None, window: Window=None):
        """Results - a model defined in OpenAPI

        :param availability: The availability of this Results.
        :param brand: The brand of this Results.
        :param broadcast: The broadcast of this Results.
        :param chapter: The chapter of this Results.
        :param clip: The clip of this Results.
        :param collection: The collection of this Results.
        :param contributor: The contributor of this Results.
        :param episode: The episode of this Results.
        :param franchise: The franchise of this Results.
        :param gallery: The gallery of this Results.
        :param highlight: The highlight of this Results.
        :param image: The image of this Results.
        :param master_brand: The master_brand of this Results.
        :param more_than: The more_than of this Results.
        :param music: The music of this Results.
        :param other: The other of this Results.
        :param page: The page of this Results.
        :param page_size: The page_size of this Results.
        :param promotion: The promotion of this Results.
        :param season: The season of this Results.
        :param series: The series of this Results.
        :param service: The service of this Results.
        :param speech: The speech of this Results.
        :param total: The total of this Results.
        :param version_group: The version_group of this Results.
        :param window: The window of this Results.
        """
        self.openapi_types = {
            'availability': Availability,
            'brand': Brand,
            'broadcast': Broadcast,
            'chapter': Item,
            'clip': Clip,
            'collection': GroupBody,
            'contributor': Contributor,
            'episode': Episode,
            'franchise': GroupBody,
            'gallery': GroupBody,
            'highlight': Item,
            'image': Image,
            'master_brand': MasterBrand,
            'more_than': int,
            'music': Item,
            'other': Item,
            'page': int,
            'page_size': int,
            'promotion': Promotion,
            'season': GroupBody,
            'series': Series,
            'service': Service,
            'speech': Item,
            'total': int,
            'version_group': VersionGroup,
            'window': Window
        }

        self.attribute_map = {
            'availability': 'availability',
            'brand': 'brand',
            'broadcast': 'broadcast',
            'chapter': 'chapter',
            'clip': 'clip',
            'collection': 'collection',
            'contributor': 'contributor',
            'episode': 'episode',
            'franchise': 'franchise',
            'gallery': 'gallery',
            'highlight': 'highlight',
            'image': 'image',
            'master_brand': 'master_brand',
            'more_than': 'more_than',
            'music': 'music',
            'other': 'other',
            'page': 'page',
            'page_size': 'page_size',
            'promotion': 'promotion',
            'season': 'season',
            'series': 'series',
            'service': 'service',
            'speech': 'speech',
            'total': 'total',
            'version_group': 'version_group',
            'window': 'window'
        }

        self._availability = availability
        self._brand = brand
        self._broadcast = broadcast
        self._chapter = chapter
        self._clip = clip
        self._collection = collection
        self._contributor = contributor
        self._episode = episode
        self._franchise = franchise
        self._gallery = gallery
        self._highlight = highlight
        self._image = image
        self._master_brand = master_brand
        self._more_than = more_than
        self._music = music
        self._other = other
        self._page = page
        self._page_size = page_size
        self._promotion = promotion
        self._season = season
        self._series = series
        self._service = service
        self._speech = speech
        self._total = total
        self._version_group = version_group
        self._window = window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The results of this Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this Results.


        :return: The availability of this Results.
        :rtype: Availability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Results.


        :param availability: The availability of this Results.
        :type availability: Availability
        """

        self._availability = availability

    @property
    def brand(self):
        """Gets the brand of this Results.


        :return: The brand of this Results.
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Results.


        :param brand: The brand of this Results.
        :type brand: Brand
        """

        self._brand = brand

    @property
    def broadcast(self):
        """Gets the broadcast of this Results.


        :return: The broadcast of this Results.
        :rtype: Broadcast
        """
        return self._broadcast

    @broadcast.setter
    def broadcast(self, broadcast):
        """Sets the broadcast of this Results.


        :param broadcast: The broadcast of this Results.
        :type broadcast: Broadcast
        """

        self._broadcast = broadcast

    @property
    def chapter(self):
        """Gets the chapter of this Results.


        :return: The chapter of this Results.
        :rtype: Item
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this Results.


        :param chapter: The chapter of this Results.
        :type chapter: Item
        """

        self._chapter = chapter

    @property
    def clip(self):
        """Gets the clip of this Results.


        :return: The clip of this Results.
        :rtype: Clip
        """
        return self._clip

    @clip.setter
    def clip(self, clip):
        """Sets the clip of this Results.


        :param clip: The clip of this Results.
        :type clip: Clip
        """

        self._clip = clip

    @property
    def collection(self):
        """Gets the collection of this Results.


        :return: The collection of this Results.
        :rtype: GroupBody
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Results.


        :param collection: The collection of this Results.
        :type collection: GroupBody
        """

        self._collection = collection

    @property
    def contributor(self):
        """Gets the contributor of this Results.


        :return: The contributor of this Results.
        :rtype: Contributor
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this Results.


        :param contributor: The contributor of this Results.
        :type contributor: Contributor
        """

        self._contributor = contributor

    @property
    def episode(self):
        """Gets the episode of this Results.


        :return: The episode of this Results.
        :rtype: Episode
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this Results.


        :param episode: The episode of this Results.
        :type episode: Episode
        """

        self._episode = episode

    @property
    def franchise(self):
        """Gets the franchise of this Results.


        :return: The franchise of this Results.
        :rtype: GroupBody
        """
        return self._franchise

    @franchise.setter
    def franchise(self, franchise):
        """Sets the franchise of this Results.


        :param franchise: The franchise of this Results.
        :type franchise: GroupBody
        """

        self._franchise = franchise

    @property
    def gallery(self):
        """Gets the gallery of this Results.


        :return: The gallery of this Results.
        :rtype: GroupBody
        """
        return self._gallery

    @gallery.setter
    def gallery(self, gallery):
        """Sets the gallery of this Results.


        :param gallery: The gallery of this Results.
        :type gallery: GroupBody
        """

        self._gallery = gallery

    @property
    def highlight(self):
        """Gets the highlight of this Results.


        :return: The highlight of this Results.
        :rtype: Item
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this Results.


        :param highlight: The highlight of this Results.
        :type highlight: Item
        """

        self._highlight = highlight

    @property
    def image(self):
        """Gets the image of this Results.


        :return: The image of this Results.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Results.


        :param image: The image of this Results.
        :type image: Image
        """

        self._image = image

    @property
    def master_brand(self):
        """Gets the master_brand of this Results.


        :return: The master_brand of this Results.
        :rtype: MasterBrand
        """
        return self._master_brand

    @master_brand.setter
    def master_brand(self, master_brand):
        """Sets the master_brand of this Results.


        :param master_brand: The master_brand of this Results.
        :type master_brand: MasterBrand
        """

        self._master_brand = master_brand

    @property
    def more_than(self):
        """Gets the more_than of this Results.


        :return: The more_than of this Results.
        :rtype: int
        """
        return self._more_than

    @more_than.setter
    def more_than(self, more_than):
        """Sets the more_than of this Results.


        :param more_than: The more_than of this Results.
        :type more_than: int
        """

        self._more_than = more_than

    @property
    def music(self):
        """Gets the music of this Results.


        :return: The music of this Results.
        :rtype: Item
        """
        return self._music

    @music.setter
    def music(self, music):
        """Sets the music of this Results.


        :param music: The music of this Results.
        :type music: Item
        """

        self._music = music

    @property
    def other(self):
        """Gets the other of this Results.


        :return: The other of this Results.
        :rtype: Item
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this Results.


        :param other: The other of this Results.
        :type other: Item
        """

        self._other = other

    @property
    def page(self):
        """Gets the page of this Results.


        :return: The page of this Results.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Results.


        :param page: The page of this Results.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this Results.


        :return: The page_size of this Results.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Results.


        :param page_size: The page_size of this Results.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")

        self._page_size = page_size

    @property
    def promotion(self):
        """Gets the promotion of this Results.


        :return: The promotion of this Results.
        :rtype: Promotion
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """Sets the promotion of this Results.


        :param promotion: The promotion of this Results.
        :type promotion: Promotion
        """

        self._promotion = promotion

    @property
    def season(self):
        """Gets the season of this Results.


        :return: The season of this Results.
        :rtype: GroupBody
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Results.


        :param season: The season of this Results.
        :type season: GroupBody
        """

        self._season = season

    @property
    def series(self):
        """Gets the series of this Results.


        :return: The series of this Results.
        :rtype: Series
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this Results.


        :param series: The series of this Results.
        :type series: Series
        """

        self._series = series

    @property
    def service(self):
        """Gets the service of this Results.


        :return: The service of this Results.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Results.


        :param service: The service of this Results.
        :type service: Service
        """

        self._service = service

    @property
    def speech(self):
        """Gets the speech of this Results.


        :return: The speech of this Results.
        :rtype: Item
        """
        return self._speech

    @speech.setter
    def speech(self, speech):
        """Sets the speech of this Results.


        :param speech: The speech of this Results.
        :type speech: Item
        """

        self._speech = speech

    @property
    def total(self):
        """Gets the total of this Results.


        :return: The total of this Results.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Results.


        :param total: The total of this Results.
        :type total: int
        """

        self._total = total

    @property
    def version_group(self):
        """Gets the version_group of this Results.


        :return: The version_group of this Results.
        :rtype: VersionGroup
        """
        return self._version_group

    @version_group.setter
    def version_group(self, version_group):
        """Sets the version_group of this Results.


        :param version_group: The version_group of this Results.
        :type version_group: VersionGroup
        """

        self._version_group = version_group

    @property
    def window(self):
        """Gets the window of this Results.


        :return: The window of this Results.
        :rtype: Window
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this Results.


        :param window: The window of this Results.
        :type window: Window
        """

        self._window = window
