# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ReleaseDateGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, release_date: str=None, release_year: str=None, release_year_month: str=None):
        """ReleaseDateGroup - a model defined in OpenAPI

        :param release_date: The release_date of this ReleaseDateGroup.
        :param release_year: The release_year of this ReleaseDateGroup.
        :param release_year_month: The release_year_month of this ReleaseDateGroup.
        """
        self.openapi_types = {
            'release_date': str,
            'release_year': str,
            'release_year_month': str
        }

        self.attribute_map = {
            'release_date': 'release_date',
            'release_year': 'release_year',
            'release_year_month': 'release_year_month'
        }

        self._release_date = release_date
        self._release_year = release_year
        self._release_year_month = release_year_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseDateGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The release_date_group of this ReleaseDateGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def release_date(self):
        """Gets the release_date of this ReleaseDateGroup.


        :return: The release_date of this ReleaseDateGroup.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ReleaseDateGroup.


        :param release_date: The release_date of this ReleaseDateGroup.
        :type release_date: str
        """
        if release_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', release_date):
            raise ValueError("Invalid value for `release_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._release_date = release_date

    @property
    def release_year(self):
        """Gets the release_year of this ReleaseDateGroup.


        :return: The release_year of this ReleaseDateGroup.
        :rtype: str
        """
        return self._release_year

    @release_year.setter
    def release_year(self, release_year):
        """Sets the release_year of this ReleaseDateGroup.


        :param release_year: The release_year of this ReleaseDateGroup.
        :type release_year: str
        """
        if release_year is not None and not re.search(r'[0-9]{4}', release_year):
            raise ValueError("Invalid value for `release_year`, must be a follow pattern or equal to `/[0-9]{4}/`")

        self._release_year = release_year

    @property
    def release_year_month(self):
        """Gets the release_year_month of this ReleaseDateGroup.


        :return: The release_year_month of this ReleaseDateGroup.
        :rtype: str
        """
        return self._release_year_month

    @release_year_month.setter
    def release_year_month(self, release_year_month):
        """Sets the release_year_month of this ReleaseDateGroup.


        :param release_year_month: The release_year_month of this ReleaseDateGroup.
        :type release_year_month: str
        """
        if release_year_month is not None and not re.search(r'[0-9]{4}-[0-9]{2}', release_year_month):
            raise ValueError("Invalid value for `release_year_month`, must be a follow pattern or equal to `/[0-9]{4}-[0-9]{2}/`")

        self._release_year_month = release_year_month
