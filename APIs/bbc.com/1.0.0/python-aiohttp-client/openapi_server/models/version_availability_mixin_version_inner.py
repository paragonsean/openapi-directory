# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_versions_element_version_inner_types_inner import AvailableVersionsElementVersionInnerTypesInner
from openapi_server.models.guidance_warnings import GuidanceWarnings
from openapi_server.models.version_availability_mixin_version_inner_availabilities_inner import VersionAvailabilityMixinVersionInnerAvailabilitiesInner
from openapi_server.models.version_availability_mixin_version_inner_version_inner import VersionAvailabilityMixinVersionInnerVersionInner
import re
from openapi_server import util


class VersionAvailabilityMixinVersionInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availabilities: List[VersionAvailabilityMixinVersionInnerAvailabilitiesInner]=None, competition_warning: str=None, duration: str=None, guidance_warnings: GuidanceWarnings=None, pid: str=None, types: List[AvailableVersionsElementVersionInnerTypesInner]=None, version: List[VersionAvailabilityMixinVersionInnerVersionInner]=None):
        """VersionAvailabilityMixinVersionInner - a model defined in OpenAPI

        :param availabilities: The availabilities of this VersionAvailabilityMixinVersionInner.
        :param competition_warning: The competition_warning of this VersionAvailabilityMixinVersionInner.
        :param duration: The duration of this VersionAvailabilityMixinVersionInner.
        :param guidance_warnings: The guidance_warnings of this VersionAvailabilityMixinVersionInner.
        :param pid: The pid of this VersionAvailabilityMixinVersionInner.
        :param types: The types of this VersionAvailabilityMixinVersionInner.
        :param version: The version of this VersionAvailabilityMixinVersionInner.
        """
        self.openapi_types = {
            'availabilities': List[VersionAvailabilityMixinVersionInnerAvailabilitiesInner],
            'competition_warning': str,
            'duration': str,
            'guidance_warnings': GuidanceWarnings,
            'pid': str,
            'types': List[AvailableVersionsElementVersionInnerTypesInner],
            'version': List[VersionAvailabilityMixinVersionInnerVersionInner]
        }

        self.attribute_map = {
            'availabilities': 'availabilities',
            'competition_warning': 'competition_warning',
            'duration': 'duration',
            'guidance_warnings': 'guidance_warnings',
            'pid': 'pid',
            'types': 'types',
            'version': 'version'
        }

        self._availabilities = availabilities
        self._competition_warning = competition_warning
        self._duration = duration
        self._guidance_warnings = guidance_warnings
        self._pid = pid
        self._types = types
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionAvailabilityMixinVersionInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_availability_mixin_version_inner of this VersionAvailabilityMixinVersionInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availabilities(self):
        """Gets the availabilities of this VersionAvailabilityMixinVersionInner.


        :return: The availabilities of this VersionAvailabilityMixinVersionInner.
        :rtype: List[VersionAvailabilityMixinVersionInnerAvailabilitiesInner]
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this VersionAvailabilityMixinVersionInner.


        :param availabilities: The availabilities of this VersionAvailabilityMixinVersionInner.
        :type availabilities: List[VersionAvailabilityMixinVersionInnerAvailabilitiesInner]
        """

        self._availabilities = availabilities

    @property
    def competition_warning(self):
        """Gets the competition_warning of this VersionAvailabilityMixinVersionInner.


        :return: The competition_warning of this VersionAvailabilityMixinVersionInner.
        :rtype: str
        """
        return self._competition_warning

    @competition_warning.setter
    def competition_warning(self, competition_warning):
        """Sets the competition_warning of this VersionAvailabilityMixinVersionInner.


        :param competition_warning: The competition_warning of this VersionAvailabilityMixinVersionInner.
        :type competition_warning: str
        """

        self._competition_warning = competition_warning

    @property
    def duration(self):
        """Gets the duration of this VersionAvailabilityMixinVersionInner.


        :return: The duration of this VersionAvailabilityMixinVersionInner.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VersionAvailabilityMixinVersionInner.


        :param duration: The duration of this VersionAvailabilityMixinVersionInner.
        :type duration: str
        """
        if duration is not None and not re.search(r'^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$', duration):
            raise ValueError("Invalid value for `duration`, must be a follow pattern or equal to `/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/`")

        self._duration = duration

    @property
    def guidance_warnings(self):
        """Gets the guidance_warnings of this VersionAvailabilityMixinVersionInner.


        :return: The guidance_warnings of this VersionAvailabilityMixinVersionInner.
        :rtype: GuidanceWarnings
        """
        return self._guidance_warnings

    @guidance_warnings.setter
    def guidance_warnings(self, guidance_warnings):
        """Sets the guidance_warnings of this VersionAvailabilityMixinVersionInner.


        :param guidance_warnings: The guidance_warnings of this VersionAvailabilityMixinVersionInner.
        :type guidance_warnings: GuidanceWarnings
        """

        self._guidance_warnings = guidance_warnings

    @property
    def pid(self):
        """Gets the pid of this VersionAvailabilityMixinVersionInner.


        :return: The pid of this VersionAvailabilityMixinVersionInner.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this VersionAvailabilityMixinVersionInner.


        :param pid: The pid of this VersionAvailabilityMixinVersionInner.
        :type pid: str
        """
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def types(self):
        """Gets the types of this VersionAvailabilityMixinVersionInner.


        :return: The types of this VersionAvailabilityMixinVersionInner.
        :rtype: List[AvailableVersionsElementVersionInnerTypesInner]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this VersionAvailabilityMixinVersionInner.


        :param types: The types of this VersionAvailabilityMixinVersionInner.
        :type types: List[AvailableVersionsElementVersionInnerTypesInner]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")
        if types is not None and len(types) < 1:
            raise ValueError("Invalid value for `types`, number of items must be greater than or equal to `1`")

        self._types = types

    @property
    def version(self):
        """Gets the version of this VersionAvailabilityMixinVersionInner.


        :return: The version of this VersionAvailabilityMixinVersionInner.
        :rtype: List[VersionAvailabilityMixinVersionInnerVersionInner]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionAvailabilityMixinVersionInner.


        :param version: The version of this VersionAvailabilityMixinVersionInner.
        :type version: List[VersionAvailabilityMixinVersionInnerVersionInner]
        """

        self._version = version
