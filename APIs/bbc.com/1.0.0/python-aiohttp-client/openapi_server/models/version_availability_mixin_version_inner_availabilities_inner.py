# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_availability import VersionAvailability
from openapi_server import util


class VersionAvailabilityMixinVersionInnerAvailabilitiesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version_availability: List[VersionAvailability]=None):
        """VersionAvailabilityMixinVersionInnerAvailabilitiesInner - a model defined in OpenAPI

        :param version_availability: The version_availability of this VersionAvailabilityMixinVersionInnerAvailabilitiesInner.
        """
        self.openapi_types = {
            'version_availability': List[VersionAvailability]
        }

        self.attribute_map = {
            'version_availability': 'version_availability'
        }

        self._version_availability = version_availability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionAvailabilityMixinVersionInnerAvailabilitiesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_availability_mixin_version_inner_availabilities_inner of this VersionAvailabilityMixinVersionInnerAvailabilitiesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version_availability(self):
        """Gets the version_availability of this VersionAvailabilityMixinVersionInnerAvailabilitiesInner.


        :return: The version_availability of this VersionAvailabilityMixinVersionInnerAvailabilitiesInner.
        :rtype: List[VersionAvailability]
        """
        return self._version_availability

    @version_availability.setter
    def version_availability(self, version_availability):
        """Sets the version_availability of this VersionAvailabilityMixinVersionInnerAvailabilitiesInner.


        :param version_availability: The version_availability of this VersionAvailabilityMixinVersionInnerAvailabilitiesInner.
        :type version_availability: List[VersionAvailability]
        """
        if version_availability is None:
            raise ValueError("Invalid value for `version_availability`, must not be `None`")
        if version_availability is not None and len(version_availability) < 1:
            raise ValueError("Invalid value for `version_availability`, number of items must be greater than or equal to `1`")

        self._version_availability = version_availability
