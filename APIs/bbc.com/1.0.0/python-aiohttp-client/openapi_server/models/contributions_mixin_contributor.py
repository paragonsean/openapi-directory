# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributions_mixin_contributor_contributor import ContributionsMixinContributorContributor
from openapi_server import util


class ContributionsMixinContributor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributor: ContributionsMixinContributorContributor=None):
        """ContributionsMixinContributor - a model defined in OpenAPI

        :param contributor: The contributor of this ContributionsMixinContributor.
        """
        self.openapi_types = {
            'contributor': ContributionsMixinContributorContributor
        }

        self.attribute_map = {
            'contributor': 'contributor'
        }

        self._contributor = contributor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContributionsMixinContributor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contributions_mixin_contributor of this ContributionsMixinContributor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributor(self):
        """Gets the contributor of this ContributionsMixinContributor.


        :return: The contributor of this ContributionsMixinContributor.
        :rtype: ContributionsMixinContributorContributor
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this ContributionsMixinContributor.


        :param contributor: The contributor of this ContributionsMixinContributor.
        :type contributor: ContributionsMixinContributorContributor
        """
        if contributor is None:
            raise ValueError("Invalid value for `contributor`, must not be `None`")

        self._contributor = contributor
