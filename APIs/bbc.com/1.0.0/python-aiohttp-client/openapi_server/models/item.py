# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributions_mixin import ContributionsMixin
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
from openapi_server.models.images_mixin import ImagesMixin
from openapi_server.models.offsets import Offsets
from openapi_server.models.play_events import PlayEvents
from openapi_server.models.reference import Reference
from openapi_server.models.synopses import Synopses
import re
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalogue_number: str=None, contributions_mixin: ContributionsMixin=None, duration: float=None, identifiers: Identifiers=None, ids: Ids=None, images_mixin: ImagesMixin=None, item_of: Reference=None, music_code: str=None, offsets: Offsets=None, partner: str=None, pid: str=None, play_events: PlayEvents=None, publisher: str=None, record_label: str=None, recording_date: str=None, release_title: str=None, snippet_url: str=None, source_media: str=None, synopses: Synopses=None, title: str=None, track_number: str=None, track_side: str=None, type: str=None, updated_time: datetime=None):
        """Item - a model defined in OpenAPI

        :param catalogue_number: The catalogue_number of this Item.
        :param contributions_mixin: The contributions_mixin of this Item.
        :param duration: The duration of this Item.
        :param identifiers: The identifiers of this Item.
        :param ids: The ids of this Item.
        :param images_mixin: The images_mixin of this Item.
        :param item_of: The item_of of this Item.
        :param music_code: The music_code of this Item.
        :param offsets: The offsets of this Item.
        :param partner: The partner of this Item.
        :param pid: The pid of this Item.
        :param play_events: The play_events of this Item.
        :param publisher: The publisher of this Item.
        :param record_label: The record_label of this Item.
        :param recording_date: The recording_date of this Item.
        :param release_title: The release_title of this Item.
        :param snippet_url: The snippet_url of this Item.
        :param source_media: The source_media of this Item.
        :param synopses: The synopses of this Item.
        :param title: The title of this Item.
        :param track_number: The track_number of this Item.
        :param track_side: The track_side of this Item.
        :param type: The type of this Item.
        :param updated_time: The updated_time of this Item.
        """
        self.openapi_types = {
            'catalogue_number': str,
            'contributions_mixin': ContributionsMixin,
            'duration': float,
            'identifiers': Identifiers,
            'ids': Ids,
            'images_mixin': ImagesMixin,
            'item_of': Reference,
            'music_code': str,
            'offsets': Offsets,
            'partner': str,
            'pid': str,
            'play_events': PlayEvents,
            'publisher': str,
            'record_label': str,
            'recording_date': str,
            'release_title': str,
            'snippet_url': str,
            'source_media': str,
            'synopses': Synopses,
            'title': str,
            'track_number': str,
            'track_side': str,
            'type': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'catalogue_number': 'catalogue_number',
            'contributions_mixin': 'contributions_mixin',
            'duration': 'duration',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'images_mixin': 'images_mixin',
            'item_of': 'item_of',
            'music_code': 'music_code',
            'offsets': 'offsets',
            'partner': 'partner',
            'pid': 'pid',
            'play_events': 'play_events',
            'publisher': 'publisher',
            'record_label': 'record_label',
            'recording_date': 'recording_date',
            'release_title': 'release_title',
            'snippet_url': 'snippet_url',
            'source_media': 'source_media',
            'synopses': 'synopses',
            'title': 'title',
            'track_number': 'track_number',
            'track_side': 'track_side',
            'type': 'type',
            'updated_time': 'updated_time'
        }

        self._catalogue_number = catalogue_number
        self._contributions_mixin = contributions_mixin
        self._duration = duration
        self._identifiers = identifiers
        self._ids = ids
        self._images_mixin = images_mixin
        self._item_of = item_of
        self._music_code = music_code
        self._offsets = offsets
        self._partner = partner
        self._pid = pid
        self._play_events = play_events
        self._publisher = publisher
        self._record_label = record_label
        self._recording_date = recording_date
        self._release_title = release_title
        self._snippet_url = snippet_url
        self._source_media = source_media
        self._synopses = synopses
        self._title = title
        self._track_number = track_number
        self._track_side = track_side
        self._type = type
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalogue_number(self):
        """Gets the catalogue_number of this Item.


        :return: The catalogue_number of this Item.
        :rtype: str
        """
        return self._catalogue_number

    @catalogue_number.setter
    def catalogue_number(self, catalogue_number):
        """Sets the catalogue_number of this Item.


        :param catalogue_number: The catalogue_number of this Item.
        :type catalogue_number: str
        """
        if catalogue_number is not None and len(catalogue_number) > 32:
            raise ValueError("Invalid value for `catalogue_number`, length must be less than or equal to `32`")
        if catalogue_number is not None and len(catalogue_number) < 1:
            raise ValueError("Invalid value for `catalogue_number`, length must be greater than or equal to `1`")

        self._catalogue_number = catalogue_number

    @property
    def contributions_mixin(self):
        """Gets the contributions_mixin of this Item.


        :return: The contributions_mixin of this Item.
        :rtype: ContributionsMixin
        """
        return self._contributions_mixin

    @contributions_mixin.setter
    def contributions_mixin(self, contributions_mixin):
        """Sets the contributions_mixin of this Item.


        :param contributions_mixin: The contributions_mixin of this Item.
        :type contributions_mixin: ContributionsMixin
        """

        self._contributions_mixin = contributions_mixin

    @property
    def duration(self):
        """Gets the duration of this Item.


        :return: The duration of this Item.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Item.


        :param duration: The duration of this Item.
        :type duration: float
        """

        self._duration = duration

    @property
    def identifiers(self):
        """Gets the identifiers of this Item.


        :return: The identifiers of this Item.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Item.


        :param identifiers: The identifiers of this Item.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this Item.


        :return: The ids of this Item.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Item.


        :param ids: The ids of this Item.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def images_mixin(self):
        """Gets the images_mixin of this Item.


        :return: The images_mixin of this Item.
        :rtype: ImagesMixin
        """
        return self._images_mixin

    @images_mixin.setter
    def images_mixin(self, images_mixin):
        """Sets the images_mixin of this Item.


        :param images_mixin: The images_mixin of this Item.
        :type images_mixin: ImagesMixin
        """

        self._images_mixin = images_mixin

    @property
    def item_of(self):
        """Gets the item_of of this Item.


        :return: The item_of of this Item.
        :rtype: Reference
        """
        return self._item_of

    @item_of.setter
    def item_of(self, item_of):
        """Sets the item_of of this Item.


        :param item_of: The item_of of this Item.
        :type item_of: Reference
        """

        self._item_of = item_of

    @property
    def music_code(self):
        """Gets the music_code of this Item.


        :return: The music_code of this Item.
        :rtype: str
        """
        return self._music_code

    @music_code.setter
    def music_code(self, music_code):
        """Sets the music_code of this Item.


        :param music_code: The music_code of this Item.
        :type music_code: str
        """
        if music_code is not None and len(music_code) > 8:
            raise ValueError("Invalid value for `music_code`, length must be less than or equal to `8`")
        if music_code is not None and len(music_code) < 1:
            raise ValueError("Invalid value for `music_code`, length must be greater than or equal to `1`")

        self._music_code = music_code

    @property
    def offsets(self):
        """Gets the offsets of this Item.


        :return: The offsets of this Item.
        :rtype: Offsets
        """
        return self._offsets

    @offsets.setter
    def offsets(self, offsets):
        """Sets the offsets of this Item.


        :param offsets: The offsets of this Item.
        :type offsets: Offsets
        """

        self._offsets = offsets

    @property
    def partner(self):
        """Gets the partner of this Item.


        :return: The partner of this Item.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Item.


        :param partner: The partner of this Item.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Item.


        :return: The pid of this Item.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Item.


        :param pid: The pid of this Item.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def play_events(self):
        """Gets the play_events of this Item.


        :return: The play_events of this Item.
        :rtype: PlayEvents
        """
        return self._play_events

    @play_events.setter
    def play_events(self, play_events):
        """Sets the play_events of this Item.


        :param play_events: The play_events of this Item.
        :type play_events: PlayEvents
        """

        self._play_events = play_events

    @property
    def publisher(self):
        """Gets the publisher of this Item.


        :return: The publisher of this Item.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Item.


        :param publisher: The publisher of this Item.
        :type publisher: str
        """
        if publisher is not None and len(publisher) > 255:
            raise ValueError("Invalid value for `publisher`, length must be less than or equal to `255`")
        if publisher is not None and len(publisher) < 1:
            raise ValueError("Invalid value for `publisher`, length must be greater than or equal to `1`")

        self._publisher = publisher

    @property
    def record_label(self):
        """Gets the record_label of this Item.


        :return: The record_label of this Item.
        :rtype: str
        """
        return self._record_label

    @record_label.setter
    def record_label(self, record_label):
        """Sets the record_label of this Item.


        :param record_label: The record_label of this Item.
        :type record_label: str
        """
        if record_label is not None and len(record_label) > 255:
            raise ValueError("Invalid value for `record_label`, length must be less than or equal to `255`")
        if record_label is not None and len(record_label) < 1:
            raise ValueError("Invalid value for `record_label`, length must be greater than or equal to `1`")

        self._record_label = record_label

    @property
    def recording_date(self):
        """Gets the recording_date of this Item.


        :return: The recording_date of this Item.
        :rtype: str
        """
        return self._recording_date

    @recording_date.setter
    def recording_date(self, recording_date):
        """Sets the recording_date of this Item.


        :param recording_date: The recording_date of this Item.
        :type recording_date: str
        """
        if recording_date is not None and len(recording_date) > 10:
            raise ValueError("Invalid value for `recording_date`, length must be less than or equal to `10`")
        if recording_date is not None and len(recording_date) < 4:
            raise ValueError("Invalid value for `recording_date`, length must be greater than or equal to `4`")

        self._recording_date = recording_date

    @property
    def release_title(self):
        """Gets the release_title of this Item.


        :return: The release_title of this Item.
        :rtype: str
        """
        return self._release_title

    @release_title.setter
    def release_title(self, release_title):
        """Sets the release_title of this Item.


        :param release_title: The release_title of this Item.
        :type release_title: str
        """
        if release_title is not None and len(release_title) > 255:
            raise ValueError("Invalid value for `release_title`, length must be less than or equal to `255`")
        if release_title is not None and len(release_title) < 1:
            raise ValueError("Invalid value for `release_title`, length must be greater than or equal to `1`")

        self._release_title = release_title

    @property
    def snippet_url(self):
        """Gets the snippet_url of this Item.


        :return: The snippet_url of this Item.
        :rtype: str
        """
        return self._snippet_url

    @snippet_url.setter
    def snippet_url(self, snippet_url):
        """Sets the snippet_url of this Item.


        :param snippet_url: The snippet_url of this Item.
        :type snippet_url: str
        """

        self._snippet_url = snippet_url

    @property
    def source_media(self):
        """Gets the source_media of this Item.


        :return: The source_media of this Item.
        :rtype: str
        """
        return self._source_media

    @source_media.setter
    def source_media(self, source_media):
        """Sets the source_media of this Item.


        :param source_media: The source_media of this Item.
        :type source_media: str
        """
        if source_media is not None and len(source_media) > 64:
            raise ValueError("Invalid value for `source_media`, length must be less than or equal to `64`")
        if source_media is not None and len(source_media) < 1:
            raise ValueError("Invalid value for `source_media`, length must be greater than or equal to `1`")

        self._source_media = source_media

    @property
    def synopses(self):
        """Gets the synopses of this Item.


        :return: The synopses of this Item.
        :rtype: Synopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Item.


        :param synopses: The synopses of this Item.
        :type synopses: Synopses
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Item.


        :return: The title of this Item.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Item.


        :param title: The title of this Item.
        :type title: str
        """

        self._title = title

    @property
    def track_number(self):
        """Gets the track_number of this Item.


        :return: The track_number of this Item.
        :rtype: str
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this Item.


        :param track_number: The track_number of this Item.
        :type track_number: str
        """
        if track_number is not None and len(track_number) > 8:
            raise ValueError("Invalid value for `track_number`, length must be less than or equal to `8`")
        if track_number is not None and len(track_number) < 1:
            raise ValueError("Invalid value for `track_number`, length must be greater than or equal to `1`")

        self._track_number = track_number

    @property
    def track_side(self):
        """Gets the track_side of this Item.


        :return: The track_side of this Item.
        :rtype: str
        """
        return self._track_side

    @track_side.setter
    def track_side(self, track_side):
        """Sets the track_side of this Item.


        :param track_side: The track_side of this Item.
        :type track_side: str
        """
        if track_side is not None and len(track_side) > 8:
            raise ValueError("Invalid value for `track_side`, length must be less than or equal to `8`")
        if track_side is not None and len(track_side) < 1:
            raise ValueError("Invalid value for `track_side`, length must be greater than or equal to `1`")

        self._track_side = track_side

    @property
    def type(self):
        """Gets the type of this Item.


        :return: The type of this Item.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Item.


        :param type: The type of this Item.
        :type type: str
        """

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this Item.


        :return: The updated_time of this Item.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Item.


        :param updated_time: The updated_time of this Item.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
