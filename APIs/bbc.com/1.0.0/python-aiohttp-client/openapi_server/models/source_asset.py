# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.focus_point import FocusPoint
from openapi_server.models.size import Size
from openapi_server import util


class SourceAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: Dimensions=None, focus_point: FocusPoint=None, mime_type: str=None, size: Size=None, uri: str=None):
        """SourceAsset - a model defined in OpenAPI

        :param dimensions: The dimensions of this SourceAsset.
        :param focus_point: The focus_point of this SourceAsset.
        :param mime_type: The mime_type of this SourceAsset.
        :param size: The size of this SourceAsset.
        :param uri: The uri of this SourceAsset.
        """
        self.openapi_types = {
            'dimensions': Dimensions,
            'focus_point': FocusPoint,
            'mime_type': str,
            'size': Size,
            'uri': str
        }

        self.attribute_map = {
            'dimensions': 'dimensions',
            'focus_point': 'focus_point',
            'mime_type': 'mime_type',
            'size': 'size',
            'uri': 'uri'
        }

        self._dimensions = dimensions
        self._focus_point = focus_point
        self._mime_type = mime_type
        self._size = size
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The source_asset of this SourceAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this SourceAsset.


        :return: The dimensions of this SourceAsset.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SourceAsset.


        :param dimensions: The dimensions of this SourceAsset.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def focus_point(self):
        """Gets the focus_point of this SourceAsset.


        :return: The focus_point of this SourceAsset.
        :rtype: FocusPoint
        """
        return self._focus_point

    @focus_point.setter
    def focus_point(self, focus_point):
        """Sets the focus_point of this SourceAsset.


        :param focus_point: The focus_point of this SourceAsset.
        :type focus_point: FocusPoint
        """

        self._focus_point = focus_point

    @property
    def mime_type(self):
        """Gets the mime_type of this SourceAsset.


        :return: The mime_type of this SourceAsset.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this SourceAsset.


        :param mime_type: The mime_type of this SourceAsset.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def size(self):
        """Gets the size of this SourceAsset.


        :return: The size of this SourceAsset.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SourceAsset.


        :param size: The size of this SourceAsset.
        :type size: Size
        """

        self._size = size

    @property
    def uri(self):
        """Gets the uri of this SourceAsset.


        :return: The uri of this SourceAsset.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SourceAsset.


        :param uri: The uri of this SourceAsset.
        :type uri: str
        """

        self._uri = uri
