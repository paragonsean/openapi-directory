# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Broadcaster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, result_type: str=None, sid: str=None):
        """Broadcaster - a model defined in OpenAPI

        :param href: The href of this Broadcaster.
        :param result_type: The result_type of this Broadcaster.
        :param sid: The sid of this Broadcaster.
        """
        self.openapi_types = {
            'href': str,
            'result_type': str,
            'sid': str
        }

        self.attribute_map = {
            'href': 'href',
            'result_type': 'result_type',
            'sid': 'sid'
        }

        self._href = href
        self._result_type = result_type
        self._sid = sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Broadcaster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The broadcaster of this Broadcaster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this Broadcaster.


        :return: The href of this Broadcaster.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Broadcaster.


        :param href: The href of this Broadcaster.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def result_type(self):
        """Gets the result_type of this Broadcaster.


        :return: The result_type of this Broadcaster.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this Broadcaster.


        :param result_type: The result_type of this Broadcaster.
        :type result_type: str
        """
        if result_type is None:
            raise ValueError("Invalid value for `result_type`, must not be `None`")

        self._result_type = result_type

    @property
    def sid(self):
        """Gets the sid of this Broadcaster.


        :return: The sid of this Broadcaster.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this Broadcaster.


        :param sid: The sid of this Broadcaster.
        :type sid: str
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")
        if sid is not None and not re.search(r'[a-z0-9A-Z_\.\-]+', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/[a-z0-9A-Z_\.\-]+/`")

        self._sid = sid
