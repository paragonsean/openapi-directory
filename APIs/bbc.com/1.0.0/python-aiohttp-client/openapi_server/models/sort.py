# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.release_status_type import ReleaseStatusType
from openapi_server.models.sort_direction import SortDirection
import re
from openapi_server import util


class Sort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated: bool=None, deprecated_since: str=None, guaranteed_until: str=None, is_default: str=None, name: str=None, release_status: ReleaseStatusType=None, replaced_by: str=None, sort_direction: List[SortDirection]=None, title: str=None):
        """Sort - a model defined in OpenAPI

        :param deprecated: The deprecated of this Sort.
        :param deprecated_since: The deprecated_since of this Sort.
        :param guaranteed_until: The guaranteed_until of this Sort.
        :param is_default: The is_default of this Sort.
        :param name: The name of this Sort.
        :param release_status: The release_status of this Sort.
        :param replaced_by: The replaced_by of this Sort.
        :param sort_direction: The sort_direction of this Sort.
        :param title: The title of this Sort.
        """
        self.openapi_types = {
            'deprecated': bool,
            'deprecated_since': str,
            'guaranteed_until': str,
            'is_default': str,
            'name': str,
            'release_status': ReleaseStatusType,
            'replaced_by': str,
            'sort_direction': List[SortDirection],
            'title': str
        }

        self.attribute_map = {
            'deprecated': 'deprecated',
            'deprecated_since': 'deprecated_since',
            'guaranteed_until': 'guaranteed_until',
            'is_default': 'is_default',
            'name': 'name',
            'release_status': 'release_status',
            'replaced_by': 'replaced_by',
            'sort_direction': 'sort_direction',
            'title': 'title'
        }

        self._deprecated = deprecated
        self._deprecated_since = deprecated_since
        self._guaranteed_until = guaranteed_until
        self._is_default = is_default
        self._name = name
        self._release_status = release_status
        self._replaced_by = replaced_by
        self._sort_direction = sort_direction
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sort of this Sort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated(self):
        """Gets the deprecated of this Sort.


        :return: The deprecated of this Sort.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Sort.


        :param deprecated: The deprecated of this Sort.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def deprecated_since(self):
        """Gets the deprecated_since of this Sort.


        :return: The deprecated_since of this Sort.
        :rtype: str
        """
        return self._deprecated_since

    @deprecated_since.setter
    def deprecated_since(self, deprecated_since):
        """Sets the deprecated_since of this Sort.


        :param deprecated_since: The deprecated_since of this Sort.
        :type deprecated_since: str
        """
        if deprecated_since is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', deprecated_since):
            raise ValueError("Invalid value for `deprecated_since`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._deprecated_since = deprecated_since

    @property
    def guaranteed_until(self):
        """Gets the guaranteed_until of this Sort.


        :return: The guaranteed_until of this Sort.
        :rtype: str
        """
        return self._guaranteed_until

    @guaranteed_until.setter
    def guaranteed_until(self, guaranteed_until):
        """Sets the guaranteed_until of this Sort.


        :param guaranteed_until: The guaranteed_until of this Sort.
        :type guaranteed_until: str
        """
        if guaranteed_until is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', guaranteed_until):
            raise ValueError("Invalid value for `guaranteed_until`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._guaranteed_until = guaranteed_until

    @property
    def is_default(self):
        """Gets the is_default of this Sort.


        :return: The is_default of this Sort.
        :rtype: str
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Sort.


        :param is_default: The is_default of this Sort.
        :type is_default: str
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this Sort.


        :return: The name of this Sort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sort.


        :param name: The name of this Sort.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def release_status(self):
        """Gets the release_status of this Sort.


        :return: The release_status of this Sort.
        :rtype: ReleaseStatusType
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this Sort.


        :param release_status: The release_status of this Sort.
        :type release_status: ReleaseStatusType
        """

        self._release_status = release_status

    @property
    def replaced_by(self):
        """Gets the replaced_by of this Sort.


        :return: The replaced_by of this Sort.
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this Sort.


        :param replaced_by: The replaced_by of this Sort.
        :type replaced_by: str
        """

        self._replaced_by = replaced_by

    @property
    def sort_direction(self):
        """Gets the sort_direction of this Sort.


        :return: The sort_direction of this Sort.
        :rtype: List[SortDirection]
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this Sort.


        :param sort_direction: The sort_direction of this Sort.
        :type sort_direction: List[SortDirection]
        """

        self._sort_direction = sort_direction

    @property
    def title(self):
        """Gets the title of this Sort.


        :return: The title of this Sort.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Sort.


        :param title: The title of this Sort.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
