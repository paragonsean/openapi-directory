# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deprecations import Deprecations
from openapi_server.models.filters import Filters
from openapi_server.models.mixins import Mixins
from openapi_server.models.release_status_type import ReleaseStatusType
from openapi_server.models.sorts import Sorts
from openapi_server import util


class Feed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecations: Deprecations=None, filters: Filters=None, href: str=None, mixins: Mixins=None, name: str=None, rel: str=None, release_status: ReleaseStatusType=None, sorts: Sorts=None, title: str=None):
        """Feed - a model defined in OpenAPI

        :param deprecations: The deprecations of this Feed.
        :param filters: The filters of this Feed.
        :param href: The href of this Feed.
        :param mixins: The mixins of this Feed.
        :param name: The name of this Feed.
        :param rel: The rel of this Feed.
        :param release_status: The release_status of this Feed.
        :param sorts: The sorts of this Feed.
        :param title: The title of this Feed.
        """
        self.openapi_types = {
            'deprecations': Deprecations,
            'filters': Filters,
            'href': str,
            'mixins': Mixins,
            'name': str,
            'rel': str,
            'release_status': ReleaseStatusType,
            'sorts': Sorts,
            'title': str
        }

        self.attribute_map = {
            'deprecations': 'deprecations',
            'filters': 'filters',
            'href': 'href',
            'mixins': 'mixins',
            'name': 'name',
            'rel': 'rel',
            'release_status': 'release_status',
            'sorts': 'sorts',
            'title': 'title'
        }

        self._deprecations = deprecations
        self._filters = filters
        self._href = href
        self._mixins = mixins
        self._name = name
        self._rel = rel
        self._release_status = release_status
        self._sorts = sorts
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The feed of this Feed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecations(self):
        """Gets the deprecations of this Feed.


        :return: The deprecations of this Feed.
        :rtype: Deprecations
        """
        return self._deprecations

    @deprecations.setter
    def deprecations(self, deprecations):
        """Sets the deprecations of this Feed.


        :param deprecations: The deprecations of this Feed.
        :type deprecations: Deprecations
        """

        self._deprecations = deprecations

    @property
    def filters(self):
        """Gets the filters of this Feed.


        :return: The filters of this Feed.
        :rtype: Filters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Feed.


        :param filters: The filters of this Feed.
        :type filters: Filters
        """

        self._filters = filters

    @property
    def href(self):
        """Gets the href of this Feed.


        :return: The href of this Feed.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Feed.


        :param href: The href of this Feed.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def mixins(self):
        """Gets the mixins of this Feed.


        :return: The mixins of this Feed.
        :rtype: Mixins
        """
        return self._mixins

    @mixins.setter
    def mixins(self, mixins):
        """Sets the mixins of this Feed.


        :param mixins: The mixins of this Feed.
        :type mixins: Mixins
        """

        self._mixins = mixins

    @property
    def name(self):
        """Gets the name of this Feed.


        :return: The name of this Feed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Feed.


        :param name: The name of this Feed.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rel(self):
        """Gets the rel of this Feed.


        :return: The rel of this Feed.
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this Feed.


        :param rel: The rel of this Feed.
        :type rel: str
        """
        if rel is None:
            raise ValueError("Invalid value for `rel`, must not be `None`")

        self._rel = rel

    @property
    def release_status(self):
        """Gets the release_status of this Feed.


        :return: The release_status of this Feed.
        :rtype: ReleaseStatusType
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this Feed.


        :param release_status: The release_status of this Feed.
        :type release_status: ReleaseStatusType
        """

        self._release_status = release_status

    @property
    def sorts(self):
        """Gets the sorts of this Feed.


        :return: The sorts of this Feed.
        :rtype: Sorts
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this Feed.


        :param sorts: The sorts of this Feed.
        :type sorts: Sorts
        """

        self._sorts = sorts

    @property
    def title(self):
        """Gets the title of this Feed.


        :return: The title of this Feed.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Feed.


        :param title: The title of this Feed.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
