# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embargoed import Embargoed
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.source_asset import SourceAsset
from openapi_server.models.synopses import Synopses
import re
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, embargoed: Embargoed=None, identifiers: Identifiers=None, partner: str=None, pid: str=None, shoot_date: datetime=None, source_asset: SourceAsset=None, synopses: Synopses=None, template_url: str=None, title: str=None, type: str=None):
        """Image - a model defined in OpenAPI

        :param author: The author of this Image.
        :param embargoed: The embargoed of this Image.
        :param identifiers: The identifiers of this Image.
        :param partner: The partner of this Image.
        :param pid: The pid of this Image.
        :param shoot_date: The shoot_date of this Image.
        :param source_asset: The source_asset of this Image.
        :param synopses: The synopses of this Image.
        :param template_url: The template_url of this Image.
        :param title: The title of this Image.
        :param type: The type of this Image.
        """
        self.openapi_types = {
            'author': str,
            'embargoed': Embargoed,
            'identifiers': Identifiers,
            'partner': str,
            'pid': str,
            'shoot_date': datetime,
            'source_asset': SourceAsset,
            'synopses': Synopses,
            'template_url': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'author': 'author',
            'embargoed': 'embargoed',
            'identifiers': 'identifiers',
            'partner': 'partner',
            'pid': 'pid',
            'shoot_date': 'shoot_date',
            'source_asset': 'source_asset',
            'synopses': 'synopses',
            'template_url': 'template_url',
            'title': 'title',
            'type': 'type'
        }

        self._author = author
        self._embargoed = embargoed
        self._identifiers = identifiers
        self._partner = partner
        self._pid = pid
        self._shoot_date = shoot_date
        self._source_asset = source_asset
        self._synopses = synopses
        self._template_url = template_url
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Image.


        :return: The author of this Image.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Image.


        :param author: The author of this Image.
        :type author: str
        """

        self._author = author

    @property
    def embargoed(self):
        """Gets the embargoed of this Image.


        :return: The embargoed of this Image.
        :rtype: Embargoed
        """
        return self._embargoed

    @embargoed.setter
    def embargoed(self, embargoed):
        """Sets the embargoed of this Image.


        :param embargoed: The embargoed of this Image.
        :type embargoed: Embargoed
        """
        if embargoed is None:
            raise ValueError("Invalid value for `embargoed`, must not be `None`")

        self._embargoed = embargoed

    @property
    def identifiers(self):
        """Gets the identifiers of this Image.


        :return: The identifiers of this Image.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Image.


        :param identifiers: The identifiers of this Image.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def partner(self):
        """Gets the partner of this Image.


        :return: The partner of this Image.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Image.


        :param partner: The partner of this Image.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Image.


        :return: The pid of this Image.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Image.


        :param pid: The pid of this Image.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def shoot_date(self):
        """Gets the shoot_date of this Image.


        :return: The shoot_date of this Image.
        :rtype: datetime
        """
        return self._shoot_date

    @shoot_date.setter
    def shoot_date(self, shoot_date):
        """Sets the shoot_date of this Image.


        :param shoot_date: The shoot_date of this Image.
        :type shoot_date: datetime
        """

        self._shoot_date = shoot_date

    @property
    def source_asset(self):
        """Gets the source_asset of this Image.


        :return: The source_asset of this Image.
        :rtype: SourceAsset
        """
        return self._source_asset

    @source_asset.setter
    def source_asset(self, source_asset):
        """Sets the source_asset of this Image.


        :param source_asset: The source_asset of this Image.
        :type source_asset: SourceAsset
        """

        self._source_asset = source_asset

    @property
    def synopses(self):
        """Gets the synopses of this Image.


        :return: The synopses of this Image.
        :rtype: Synopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Image.


        :param synopses: The synopses of this Image.
        :type synopses: Synopses
        """

        self._synopses = synopses

    @property
    def template_url(self):
        """Gets the template_url of this Image.


        :return: The template_url of this Image.
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this Image.


        :param template_url: The template_url of this Image.
        :type template_url: str
        """

        self._template_url = template_url

    @property
    def title(self):
        """Gets the title of this Image.


        :return: The title of this Image.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Image.


        :param title: The title of this Image.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Image.


        :return: The type of this Image.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Image.


        :param type: The type of this Image.
        :type type: str
        """

        self._type = type
