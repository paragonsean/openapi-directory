# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Reference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, result_type: str=None, href_deprecated: bool=None, result_type_deprecated: bool=None):
        """Reference - a model defined in OpenAPI

        :param href: The href of this Reference.
        :param result_type: The result_type of this Reference.
        :param href_deprecated: The href_deprecated of this Reference.
        :param result_type_deprecated: The result_type_deprecated of this Reference.
        """
        self.openapi_types = {
            'href': str,
            'result_type': str,
            'href_deprecated': bool,
            'result_type_deprecated': bool
        }

        self.attribute_map = {
            'href': 'href',
            'result_type': 'result_type',
            'href_deprecated': 'href_deprecated',
            'result_type_deprecated': 'result_type_deprecated'
        }

        self._href = href
        self._result_type = result_type
        self._href_deprecated = href_deprecated
        self._result_type_deprecated = result_type_deprecated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reference of this Reference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this Reference.


        :return: The href of this Reference.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Reference.


        :param href: The href of this Reference.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def result_type(self):
        """Gets the result_type of this Reference.


        :return: The result_type of this Reference.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this Reference.


        :param result_type: The result_type of this Reference.
        :type result_type: str
        """
        if result_type is None:
            raise ValueError("Invalid value for `result_type`, must not be `None`")

        self._result_type = result_type

    @property
    def href_deprecated(self):
        """Gets the href_deprecated of this Reference.


        :return: The href_deprecated of this Reference.
        :rtype: bool
        """
        return self._href_deprecated

    @href_deprecated.setter
    def href_deprecated(self, href_deprecated):
        """Sets the href_deprecated of this Reference.


        :param href_deprecated: The href_deprecated of this Reference.
        :type href_deprecated: bool
        """

        self._href_deprecated = href_deprecated

    @property
    def result_type_deprecated(self):
        """Gets the result_type_deprecated of this Reference.


        :return: The result_type_deprecated of this Reference.
        :rtype: bool
        """
        return self._result_type_deprecated

    @result_type_deprecated.setter
    def result_type_deprecated(self, result_type_deprecated):
        """Sets the result_type_deprecated of this Reference.


        :param result_type_deprecated: The result_type_deprecated of this Reference.
        :type result_type_deprecated: bool
        """

        self._result_type_deprecated = result_type_deprecated
