# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor_titles import AncestorTitles
from openapi_server.models.ancestors_titles import AncestorsTitles
from openapi_server.models.broadcast_time import BroadcastTime
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
from openapi_server.models.image_link import ImageLink
from openapi_server.models.images_mixin import ImagesMixin
from openapi_server.models.pid_reference import PidReference
from openapi_server.models.service_reference import ServiceReference
from openapi_server.models.tx_time import TxTime
import re
from openapi_server import util


class Broadcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestor_titles: AncestorTitles=None, ancestors_titles: AncestorsTitles=None, broadcast_of: List[PidReference]=None, identifiers: Identifiers=None, ids: Ids=None, image_link: ImageLink=None, images_mixin: ImagesMixin=None, is_audio_described: bool=None, is_blanked: bool=None, is_critical: bool=None, is_repeat: bool=None, is_simulcast: bool=None, partner: str=None, pid: str=None, published_time: BroadcastTime=None, service: ServiceReference=None, tx_time: TxTime=None, updated_time: datetime=None):
        """Broadcast - a model defined in OpenAPI

        :param ancestor_titles: The ancestor_titles of this Broadcast.
        :param ancestors_titles: The ancestors_titles of this Broadcast.
        :param broadcast_of: The broadcast_of of this Broadcast.
        :param identifiers: The identifiers of this Broadcast.
        :param ids: The ids of this Broadcast.
        :param image_link: The image_link of this Broadcast.
        :param images_mixin: The images_mixin of this Broadcast.
        :param is_audio_described: The is_audio_described of this Broadcast.
        :param is_blanked: The is_blanked of this Broadcast.
        :param is_critical: The is_critical of this Broadcast.
        :param is_repeat: The is_repeat of this Broadcast.
        :param is_simulcast: The is_simulcast of this Broadcast.
        :param partner: The partner of this Broadcast.
        :param pid: The pid of this Broadcast.
        :param published_time: The published_time of this Broadcast.
        :param service: The service of this Broadcast.
        :param tx_time: The tx_time of this Broadcast.
        :param updated_time: The updated_time of this Broadcast.
        """
        self.openapi_types = {
            'ancestor_titles': AncestorTitles,
            'ancestors_titles': AncestorsTitles,
            'broadcast_of': List[PidReference],
            'identifiers': Identifiers,
            'ids': Ids,
            'image_link': ImageLink,
            'images_mixin': ImagesMixin,
            'is_audio_described': bool,
            'is_blanked': bool,
            'is_critical': bool,
            'is_repeat': bool,
            'is_simulcast': bool,
            'partner': str,
            'pid': str,
            'published_time': BroadcastTime,
            'service': ServiceReference,
            'tx_time': TxTime,
            'updated_time': datetime
        }

        self.attribute_map = {
            'ancestor_titles': 'ancestor_titles',
            'ancestors_titles': 'ancestors_titles',
            'broadcast_of': 'broadcast_of',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'image_link': 'image_link',
            'images_mixin': 'images_mixin',
            'is_audio_described': 'is_audio_described',
            'is_blanked': 'is_blanked',
            'is_critical': 'is_critical',
            'is_repeat': 'is_repeat',
            'is_simulcast': 'is_simulcast',
            'partner': 'partner',
            'pid': 'pid',
            'published_time': 'published_time',
            'service': 'service',
            'tx_time': 'tx_time',
            'updated_time': 'updated_time'
        }

        self._ancestor_titles = ancestor_titles
        self._ancestors_titles = ancestors_titles
        self._broadcast_of = broadcast_of
        self._identifiers = identifiers
        self._ids = ids
        self._image_link = image_link
        self._images_mixin = images_mixin
        self._is_audio_described = is_audio_described
        self._is_blanked = is_blanked
        self._is_critical = is_critical
        self._is_repeat = is_repeat
        self._is_simulcast = is_simulcast
        self._partner = partner
        self._pid = pid
        self._published_time = published_time
        self._service = service
        self._tx_time = tx_time
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Broadcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The broadcast of this Broadcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestor_titles(self):
        """Gets the ancestor_titles of this Broadcast.


        :return: The ancestor_titles of this Broadcast.
        :rtype: AncestorTitles
        """
        return self._ancestor_titles

    @ancestor_titles.setter
    def ancestor_titles(self, ancestor_titles):
        """Sets the ancestor_titles of this Broadcast.


        :param ancestor_titles: The ancestor_titles of this Broadcast.
        :type ancestor_titles: AncestorTitles
        """

        self._ancestor_titles = ancestor_titles

    @property
    def ancestors_titles(self):
        """Gets the ancestors_titles of this Broadcast.


        :return: The ancestors_titles of this Broadcast.
        :rtype: AncestorsTitles
        """
        return self._ancestors_titles

    @ancestors_titles.setter
    def ancestors_titles(self, ancestors_titles):
        """Sets the ancestors_titles of this Broadcast.


        :param ancestors_titles: The ancestors_titles of this Broadcast.
        :type ancestors_titles: AncestorsTitles
        """

        self._ancestors_titles = ancestors_titles

    @property
    def broadcast_of(self):
        """Gets the broadcast_of of this Broadcast.


        :return: The broadcast_of of this Broadcast.
        :rtype: List[PidReference]
        """
        return self._broadcast_of

    @broadcast_of.setter
    def broadcast_of(self, broadcast_of):
        """Sets the broadcast_of of this Broadcast.


        :param broadcast_of: The broadcast_of of this Broadcast.
        :type broadcast_of: List[PidReference]
        """

        self._broadcast_of = broadcast_of

    @property
    def identifiers(self):
        """Gets the identifiers of this Broadcast.


        :return: The identifiers of this Broadcast.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Broadcast.


        :param identifiers: The identifiers of this Broadcast.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this Broadcast.


        :return: The ids of this Broadcast.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Broadcast.


        :param ids: The ids of this Broadcast.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def image_link(self):
        """Gets the image_link of this Broadcast.


        :return: The image_link of this Broadcast.
        :rtype: ImageLink
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this Broadcast.


        :param image_link: The image_link of this Broadcast.
        :type image_link: ImageLink
        """

        self._image_link = image_link

    @property
    def images_mixin(self):
        """Gets the images_mixin of this Broadcast.


        :return: The images_mixin of this Broadcast.
        :rtype: ImagesMixin
        """
        return self._images_mixin

    @images_mixin.setter
    def images_mixin(self, images_mixin):
        """Sets the images_mixin of this Broadcast.


        :param images_mixin: The images_mixin of this Broadcast.
        :type images_mixin: ImagesMixin
        """

        self._images_mixin = images_mixin

    @property
    def is_audio_described(self):
        """Gets the is_audio_described of this Broadcast.


        :return: The is_audio_described of this Broadcast.
        :rtype: bool
        """
        return self._is_audio_described

    @is_audio_described.setter
    def is_audio_described(self, is_audio_described):
        """Sets the is_audio_described of this Broadcast.


        :param is_audio_described: The is_audio_described of this Broadcast.
        :type is_audio_described: bool
        """

        self._is_audio_described = is_audio_described

    @property
    def is_blanked(self):
        """Gets the is_blanked of this Broadcast.


        :return: The is_blanked of this Broadcast.
        :rtype: bool
        """
        return self._is_blanked

    @is_blanked.setter
    def is_blanked(self, is_blanked):
        """Sets the is_blanked of this Broadcast.


        :param is_blanked: The is_blanked of this Broadcast.
        :type is_blanked: bool
        """

        self._is_blanked = is_blanked

    @property
    def is_critical(self):
        """Gets the is_critical of this Broadcast.


        :return: The is_critical of this Broadcast.
        :rtype: bool
        """
        return self._is_critical

    @is_critical.setter
    def is_critical(self, is_critical):
        """Sets the is_critical of this Broadcast.


        :param is_critical: The is_critical of this Broadcast.
        :type is_critical: bool
        """

        self._is_critical = is_critical

    @property
    def is_repeat(self):
        """Gets the is_repeat of this Broadcast.


        :return: The is_repeat of this Broadcast.
        :rtype: bool
        """
        return self._is_repeat

    @is_repeat.setter
    def is_repeat(self, is_repeat):
        """Sets the is_repeat of this Broadcast.


        :param is_repeat: The is_repeat of this Broadcast.
        :type is_repeat: bool
        """

        self._is_repeat = is_repeat

    @property
    def is_simulcast(self):
        """Gets the is_simulcast of this Broadcast.


        :return: The is_simulcast of this Broadcast.
        :rtype: bool
        """
        return self._is_simulcast

    @is_simulcast.setter
    def is_simulcast(self, is_simulcast):
        """Sets the is_simulcast of this Broadcast.


        :param is_simulcast: The is_simulcast of this Broadcast.
        :type is_simulcast: bool
        """

        self._is_simulcast = is_simulcast

    @property
    def partner(self):
        """Gets the partner of this Broadcast.


        :return: The partner of this Broadcast.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Broadcast.


        :param partner: The partner of this Broadcast.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Broadcast.


        :return: The pid of this Broadcast.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Broadcast.


        :param pid: The pid of this Broadcast.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def published_time(self):
        """Gets the published_time of this Broadcast.


        :return: The published_time of this Broadcast.
        :rtype: BroadcastTime
        """
        return self._published_time

    @published_time.setter
    def published_time(self, published_time):
        """Sets the published_time of this Broadcast.


        :param published_time: The published_time of this Broadcast.
        :type published_time: BroadcastTime
        """

        self._published_time = published_time

    @property
    def service(self):
        """Gets the service of this Broadcast.


        :return: The service of this Broadcast.
        :rtype: ServiceReference
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Broadcast.


        :param service: The service of this Broadcast.
        :type service: ServiceReference
        """

        self._service = service

    @property
    def tx_time(self):
        """Gets the tx_time of this Broadcast.


        :return: The tx_time of this Broadcast.
        :rtype: TxTime
        """
        return self._tx_time

    @tx_time.setter
    def tx_time(self, tx_time):
        """Sets the tx_time of this Broadcast.


        :param tx_time: The tx_time of this Broadcast.
        :type tx_time: TxTime
        """

        self._tx_time = tx_time

    @property
    def updated_time(self):
        """Gets the updated_time of this Broadcast.


        :return: The updated_time of this Broadcast.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Broadcast.


        :param updated_time: The updated_time of this Broadcast.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
