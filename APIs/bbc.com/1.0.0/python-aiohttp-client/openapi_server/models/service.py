# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
from openapi_server.models.master_brand_link import MasterBrandLink
from openapi_server.models.media_type import MediaType
import re
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, description: str=None, identifiers: Identifiers=None, ids: Ids=None, is_concrete: bool=None, is_downloadable: bool=None, is_streamable: bool=None, master_brand_link: MasterBrandLink=None, media_type: MediaType=None, name: str=None, partner: str=None, region: str=None, sid: str=None, type: str=None, updated_time: datetime=None):
        """Service - a model defined in OpenAPI

        :param date_range: The date_range of this Service.
        :param description: The description of this Service.
        :param identifiers: The identifiers of this Service.
        :param ids: The ids of this Service.
        :param is_concrete: The is_concrete of this Service.
        :param is_downloadable: The is_downloadable of this Service.
        :param is_streamable: The is_streamable of this Service.
        :param master_brand_link: The master_brand_link of this Service.
        :param media_type: The media_type of this Service.
        :param name: The name of this Service.
        :param partner: The partner of this Service.
        :param region: The region of this Service.
        :param sid: The sid of this Service.
        :param type: The type of this Service.
        :param updated_time: The updated_time of this Service.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'description': str,
            'identifiers': Identifiers,
            'ids': Ids,
            'is_concrete': bool,
            'is_downloadable': bool,
            'is_streamable': bool,
            'master_brand_link': MasterBrandLink,
            'media_type': MediaType,
            'name': str,
            'partner': str,
            'region': str,
            'sid': str,
            'type': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'date_range': 'date_range',
            'description': 'description',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'is_concrete': 'is_concrete',
            'is_downloadable': 'is_downloadable',
            'is_streamable': 'is_streamable',
            'master_brand_link': 'master_brand_link',
            'media_type': 'media_type',
            'name': 'name',
            'partner': 'partner',
            'region': 'region',
            'sid': 'sid',
            'type': 'type',
            'updated_time': 'updated_time'
        }

        self._date_range = date_range
        self._description = description
        self._identifiers = identifiers
        self._ids = ids
        self._is_concrete = is_concrete
        self._is_downloadable = is_downloadable
        self._is_streamable = is_streamable
        self._master_brand_link = master_brand_link
        self._media_type = media_type
        self._name = name
        self._partner = partner
        self._region = region
        self._sid = sid
        self._type = type
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this Service.


        :return: The date_range of this Service.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this Service.


        :param date_range: The date_range of this Service.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def description(self):
        """Gets the description of this Service.


        :return: The description of this Service.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Service.


        :param description: The description of this Service.
        :type description: str
        """

        self._description = description

    @property
    def identifiers(self):
        """Gets the identifiers of this Service.


        :return: The identifiers of this Service.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Service.


        :param identifiers: The identifiers of this Service.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this Service.


        :return: The ids of this Service.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Service.


        :param ids: The ids of this Service.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def is_concrete(self):
        """Gets the is_concrete of this Service.


        :return: The is_concrete of this Service.
        :rtype: bool
        """
        return self._is_concrete

    @is_concrete.setter
    def is_concrete(self, is_concrete):
        """Sets the is_concrete of this Service.


        :param is_concrete: The is_concrete of this Service.
        :type is_concrete: bool
        """

        self._is_concrete = is_concrete

    @property
    def is_downloadable(self):
        """Gets the is_downloadable of this Service.


        :return: The is_downloadable of this Service.
        :rtype: bool
        """
        return self._is_downloadable

    @is_downloadable.setter
    def is_downloadable(self, is_downloadable):
        """Sets the is_downloadable of this Service.


        :param is_downloadable: The is_downloadable of this Service.
        :type is_downloadable: bool
        """

        self._is_downloadable = is_downloadable

    @property
    def is_streamable(self):
        """Gets the is_streamable of this Service.


        :return: The is_streamable of this Service.
        :rtype: bool
        """
        return self._is_streamable

    @is_streamable.setter
    def is_streamable(self, is_streamable):
        """Sets the is_streamable of this Service.


        :param is_streamable: The is_streamable of this Service.
        :type is_streamable: bool
        """

        self._is_streamable = is_streamable

    @property
    def master_brand_link(self):
        """Gets the master_brand_link of this Service.


        :return: The master_brand_link of this Service.
        :rtype: MasterBrandLink
        """
        return self._master_brand_link

    @master_brand_link.setter
    def master_brand_link(self, master_brand_link):
        """Sets the master_brand_link of this Service.


        :param master_brand_link: The master_brand_link of this Service.
        :type master_brand_link: MasterBrandLink
        """

        self._master_brand_link = master_brand_link

    @property
    def media_type(self):
        """Gets the media_type of this Service.


        :return: The media_type of this Service.
        :rtype: MediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Service.


        :param media_type: The media_type of this Service.
        :type media_type: MediaType
        """

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this Service.


        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def partner(self):
        """Gets the partner of this Service.


        :return: The partner of this Service.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Service.


        :param partner: The partner of this Service.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def region(self):
        """Gets the region of this Service.


        :return: The region of this Service.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Service.


        :param region: The region of this Service.
        :type region: str
        """

        self._region = region

    @property
    def sid(self):
        """Gets the sid of this Service.


        :return: The sid of this Service.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this Service.


        :param sid: The sid of this Service.
        :type sid: str
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")
        if sid is not None and not re.search(r'[a-z0-9A-Z_\.\-]+', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/[a-z0-9A-Z_\.\-]+/`")

        self._sid = sid

    @property
    def type(self):
        """Gets the type of this Service.


        :return: The type of this Service.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.


        :param type: The type of this Service.
        :type type: str
        """

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this Service.


        :return: The updated_time of this Service.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Service.


        :param updated_time: The updated_time of this Service.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
