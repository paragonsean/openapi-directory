# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.types_with_id_types import TypesWithIdTypes
from openapi_server import util


class TypesWithId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, types: TypesWithIdTypes=None):
        """TypesWithId - a model defined in OpenAPI

        :param types: The types of this TypesWithId.
        """
        self.openapi_types = {
            'types': TypesWithIdTypes
        }

        self.attribute_map = {
            'types': 'types'
        }

        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypesWithId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The types_with_id of this TypesWithId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def types(self):
        """Gets the types of this TypesWithId.


        :return: The types of this TypesWithId.
        :rtype: TypesWithIdTypes
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this TypesWithId.


        :param types: The types of this TypesWithId.
        :type types: TypesWithIdTypes
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
