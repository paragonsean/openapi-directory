# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.genre_group_genres import GenreGroupGenres
from openapi_server import util


class GenreGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genres: GenreGroupGenres=None, id: str=None, type: str=None):
        """GenreGroup - a model defined in OpenAPI

        :param genres: The genres of this GenreGroup.
        :param id: The id of this GenreGroup.
        :param type: The type of this GenreGroup.
        """
        self.openapi_types = {
            'genres': GenreGroupGenres,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'genres': 'genres',
            'id': 'id',
            'type': 'type'
        }

        self._genres = genres
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenreGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The genre_group of this GenreGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genres(self):
        """Gets the genres of this GenreGroup.


        :return: The genres of this GenreGroup.
        :rtype: GenreGroupGenres
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this GenreGroup.


        :param genres: The genres of this GenreGroup.
        :type genres: GenreGroupGenres
        """
        if genres is None:
            raise ValueError("Invalid value for `genres`, must not be `None`")

        self._genres = genres

    @property
    def id(self):
        """Gets the id of this GenreGroup.


        :return: The id of this GenreGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenreGroup.


        :param id: The id of this GenreGroup.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this GenreGroup.


        :return: The type of this GenreGroup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GenreGroup.


        :param type: The type of this GenreGroup.
        :type type: str
        """

        self._type = type
