# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributions_mixin_contributions import ContributionsMixinContributions
from openapi_server import util


class ContributionsMixin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributions: ContributionsMixinContributions=None):
        """ContributionsMixin - a model defined in OpenAPI

        :param contributions: The contributions of this ContributionsMixin.
        """
        self.openapi_types = {
            'contributions': ContributionsMixinContributions
        }

        self.attribute_map = {
            'contributions': 'contributions'
        }

        self._contributions = contributions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContributionsMixin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contributions_mixin of this ContributionsMixin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributions(self):
        """Gets the contributions of this ContributionsMixin.


        :return: The contributions of this ContributionsMixin.
        :rtype: ContributionsMixinContributions
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this ContributionsMixin.


        :param contributions: The contributions of this ContributionsMixin.
        :type contributions: ContributionsMixinContributions
        """
        if contributions is None:
            raise ValueError("Invalid value for `contributions`, must not be `None`")

        self._contributions = contributions
