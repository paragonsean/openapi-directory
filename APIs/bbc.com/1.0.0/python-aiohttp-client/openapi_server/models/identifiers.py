# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifier import Identifier
from openapi_server import util


class Identifiers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: List[Identifier]=None):
        """Identifiers - a model defined in OpenAPI

        :param identifier: The identifier of this Identifiers.
        """
        self.openapi_types = {
            'identifier': List[Identifier]
        }

        self.attribute_map = {
            'identifier': 'identifier'
        }

        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Identifiers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The identifiers of this Identifiers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this Identifiers.


        :return: The identifier of this Identifiers.
        :rtype: List[Identifier]
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Identifiers.


        :param identifier: The identifier of this Identifiers.
        :type identifier: List[Identifier]
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, number of items must be greater than or equal to `1`")

        self._identifier = identifier
