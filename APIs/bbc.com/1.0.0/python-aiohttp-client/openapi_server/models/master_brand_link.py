# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.master_brand_link_master_brand import MasterBrandLinkMasterBrand
from openapi_server import util


class MasterBrandLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, master_brand: MasterBrandLinkMasterBrand=None):
        """MasterBrandLink - a model defined in OpenAPI

        :param master_brand: The master_brand of this MasterBrandLink.
        """
        self.openapi_types = {
            'master_brand': MasterBrandLinkMasterBrand
        }

        self.attribute_map = {
            'master_brand': 'master_brand'
        }

        self._master_brand = master_brand

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterBrandLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The master_brand_link of this MasterBrandLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def master_brand(self):
        """Gets the master_brand of this MasterBrandLink.


        :return: The master_brand of this MasterBrandLink.
        :rtype: MasterBrandLinkMasterBrand
        """
        return self._master_brand

    @master_brand.setter
    def master_brand(self, master_brand):
        """Sets the master_brand of this MasterBrandLink.


        :param master_brand: The master_brand of this MasterBrandLink.
        :type master_brand: MasterBrandLinkMasterBrand
        """
        if master_brand is None:
            raise ValueError("Invalid value for `master_brand`, must not be `None`")

        self._master_brand = master_brand
