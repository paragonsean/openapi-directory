# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor_titles_brand import AncestorTitlesBrand
from openapi_server.models.ancestor_titles_episode_episode import AncestorTitlesEpisodeEpisode
import re
from openapi_server import util


class AncestorTitlesEpisode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: AncestorTitlesBrand=None, containers_title: str=None, episode: AncestorTitlesEpisodeEpisode=None, pid: str=None, presentation_title: str=None, series: List[AncestorTitlesBrand]=None, title: str=None):
        """AncestorTitlesEpisode - a model defined in OpenAPI

        :param brand: The brand of this AncestorTitlesEpisode.
        :param containers_title: The containers_title of this AncestorTitlesEpisode.
        :param episode: The episode of this AncestorTitlesEpisode.
        :param pid: The pid of this AncestorTitlesEpisode.
        :param presentation_title: The presentation_title of this AncestorTitlesEpisode.
        :param series: The series of this AncestorTitlesEpisode.
        :param title: The title of this AncestorTitlesEpisode.
        """
        self.openapi_types = {
            'brand': AncestorTitlesBrand,
            'containers_title': str,
            'episode': AncestorTitlesEpisodeEpisode,
            'pid': str,
            'presentation_title': str,
            'series': List[AncestorTitlesBrand],
            'title': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'containers_title': 'containers_title',
            'episode': 'episode',
            'pid': 'pid',
            'presentation_title': 'presentation_title',
            'series': 'series',
            'title': 'title'
        }

        self._brand = brand
        self._containers_title = containers_title
        self._episode = episode
        self._pid = pid
        self._presentation_title = presentation_title
        self._series = series
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AncestorTitlesEpisode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ancestor_titles_episode of this AncestorTitlesEpisode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this AncestorTitlesEpisode.


        :return: The brand of this AncestorTitlesEpisode.
        :rtype: AncestorTitlesBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this AncestorTitlesEpisode.


        :param brand: The brand of this AncestorTitlesEpisode.
        :type brand: AncestorTitlesBrand
        """

        self._brand = brand

    @property
    def containers_title(self):
        """Gets the containers_title of this AncestorTitlesEpisode.


        :return: The containers_title of this AncestorTitlesEpisode.
        :rtype: str
        """
        return self._containers_title

    @containers_title.setter
    def containers_title(self, containers_title):
        """Sets the containers_title of this AncestorTitlesEpisode.


        :param containers_title: The containers_title of this AncestorTitlesEpisode.
        :type containers_title: str
        """

        self._containers_title = containers_title

    @property
    def episode(self):
        """Gets the episode of this AncestorTitlesEpisode.


        :return: The episode of this AncestorTitlesEpisode.
        :rtype: AncestorTitlesEpisodeEpisode
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this AncestorTitlesEpisode.


        :param episode: The episode of this AncestorTitlesEpisode.
        :type episode: AncestorTitlesEpisodeEpisode
        """

        self._episode = episode

    @property
    def pid(self):
        """Gets the pid of this AncestorTitlesEpisode.


        :return: The pid of this AncestorTitlesEpisode.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AncestorTitlesEpisode.


        :param pid: The pid of this AncestorTitlesEpisode.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def presentation_title(self):
        """Gets the presentation_title of this AncestorTitlesEpisode.


        :return: The presentation_title of this AncestorTitlesEpisode.
        :rtype: str
        """
        return self._presentation_title

    @presentation_title.setter
    def presentation_title(self, presentation_title):
        """Sets the presentation_title of this AncestorTitlesEpisode.


        :param presentation_title: The presentation_title of this AncestorTitlesEpisode.
        :type presentation_title: str
        """

        self._presentation_title = presentation_title

    @property
    def series(self):
        """Gets the series of this AncestorTitlesEpisode.


        :return: The series of this AncestorTitlesEpisode.
        :rtype: List[AncestorTitlesBrand]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this AncestorTitlesEpisode.


        :param series: The series of this AncestorTitlesEpisode.
        :type series: List[AncestorTitlesBrand]
        """
        if series is not None and len(series) > 5:
            raise ValueError("Invalid value for `series`, number of items must be less than or equal to `5`")

        self._series = series

    @property
    def title(self):
        """Gets the title of this AncestorTitlesEpisode.


        :return: The title of this AncestorTitlesEpisode.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AncestorTitlesEpisode.


        :param title: The title of this AncestorTitlesEpisode.
        :type title: str
        """

        self._title = title
