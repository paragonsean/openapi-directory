# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server.models.prohibits import Prohibits
from openapi_server.models.release_status_type import ReleaseStatusType
import re
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: str=None, depends_on: str=None, deprecated: bool=None, deprecated_since: str=None, guaranteed_until: str=None, max_value: int=None, min_value: int=None, multiple_values: bool=None, name: str=None, option: List[Option]=None, prefer: str=None, prohibits: List[Prohibits]=None, release_status: ReleaseStatusType=None, replaced_by: str=None, required: bool=None, title: str=None, type: str=None):
        """Filter - a model defined in OpenAPI

        :param default: The default of this Filter.
        :param depends_on: The depends_on of this Filter.
        :param deprecated: The deprecated of this Filter.
        :param deprecated_since: The deprecated_since of this Filter.
        :param guaranteed_until: The guaranteed_until of this Filter.
        :param max_value: The max_value of this Filter.
        :param min_value: The min_value of this Filter.
        :param multiple_values: The multiple_values of this Filter.
        :param name: The name of this Filter.
        :param option: The option of this Filter.
        :param prefer: The prefer of this Filter.
        :param prohibits: The prohibits of this Filter.
        :param release_status: The release_status of this Filter.
        :param replaced_by: The replaced_by of this Filter.
        :param required: The required of this Filter.
        :param title: The title of this Filter.
        :param type: The type of this Filter.
        """
        self.openapi_types = {
            'default': str,
            'depends_on': str,
            'deprecated': bool,
            'deprecated_since': str,
            'guaranteed_until': str,
            'max_value': int,
            'min_value': int,
            'multiple_values': bool,
            'name': str,
            'option': List[Option],
            'prefer': str,
            'prohibits': List[Prohibits],
            'release_status': ReleaseStatusType,
            'replaced_by': str,
            'required': bool,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'default': 'default',
            'depends_on': 'depends_on',
            'deprecated': 'deprecated',
            'deprecated_since': 'deprecated_since',
            'guaranteed_until': 'guaranteed_until',
            'max_value': 'max_value',
            'min_value': 'min_value',
            'multiple_values': 'multiple_values',
            'name': 'name',
            'option': 'option',
            'prefer': 'prefer',
            'prohibits': 'prohibits',
            'release_status': 'release_status',
            'replaced_by': 'replaced_by',
            'required': 'required',
            'title': 'title',
            'type': 'type'
        }

        self._default = default
        self._depends_on = depends_on
        self._deprecated = deprecated
        self._deprecated_since = deprecated_since
        self._guaranteed_until = guaranteed_until
        self._max_value = max_value
        self._min_value = min_value
        self._multiple_values = multiple_values
        self._name = name
        self._option = option
        self._prefer = prefer
        self._prohibits = prohibits
        self._release_status = release_status
        self._replaced_by = replaced_by
        self._required = required
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this Filter.


        :return: The default of this Filter.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Filter.


        :param default: The default of this Filter.
        :type default: str
        """

        self._default = default

    @property
    def depends_on(self):
        """Gets the depends_on of this Filter.


        :return: The depends_on of this Filter.
        :rtype: str
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this Filter.


        :param depends_on: The depends_on of this Filter.
        :type depends_on: str
        """

        self._depends_on = depends_on

    @property
    def deprecated(self):
        """Gets the deprecated of this Filter.


        :return: The deprecated of this Filter.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Filter.


        :param deprecated: The deprecated of this Filter.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def deprecated_since(self):
        """Gets the deprecated_since of this Filter.


        :return: The deprecated_since of this Filter.
        :rtype: str
        """
        return self._deprecated_since

    @deprecated_since.setter
    def deprecated_since(self, deprecated_since):
        """Sets the deprecated_since of this Filter.


        :param deprecated_since: The deprecated_since of this Filter.
        :type deprecated_since: str
        """
        if deprecated_since is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', deprecated_since):
            raise ValueError("Invalid value for `deprecated_since`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._deprecated_since = deprecated_since

    @property
    def guaranteed_until(self):
        """Gets the guaranteed_until of this Filter.


        :return: The guaranteed_until of this Filter.
        :rtype: str
        """
        return self._guaranteed_until

    @guaranteed_until.setter
    def guaranteed_until(self, guaranteed_until):
        """Sets the guaranteed_until of this Filter.


        :param guaranteed_until: The guaranteed_until of this Filter.
        :type guaranteed_until: str
        """
        if guaranteed_until is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', guaranteed_until):
            raise ValueError("Invalid value for `guaranteed_until`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._guaranteed_until = guaranteed_until

    @property
    def max_value(self):
        """Gets the max_value of this Filter.


        :return: The max_value of this Filter.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this Filter.


        :param max_value: The max_value of this Filter.
        :type max_value: int
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this Filter.


        :return: The min_value of this Filter.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this Filter.


        :param min_value: The min_value of this Filter.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def multiple_values(self):
        """Gets the multiple_values of this Filter.


        :return: The multiple_values of this Filter.
        :rtype: bool
        """
        return self._multiple_values

    @multiple_values.setter
    def multiple_values(self, multiple_values):
        """Sets the multiple_values of this Filter.


        :param multiple_values: The multiple_values of this Filter.
        :type multiple_values: bool
        """

        self._multiple_values = multiple_values

    @property
    def name(self):
        """Gets the name of this Filter.


        :return: The name of this Filter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Filter.


        :param name: The name of this Filter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def option(self):
        """Gets the option of this Filter.


        :return: The option of this Filter.
        :rtype: List[Option]
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this Filter.


        :param option: The option of this Filter.
        :type option: List[Option]
        """

        self._option = option

    @property
    def prefer(self):
        """Gets the prefer of this Filter.


        :return: The prefer of this Filter.
        :rtype: str
        """
        return self._prefer

    @prefer.setter
    def prefer(self, prefer):
        """Sets the prefer of this Filter.


        :param prefer: The prefer of this Filter.
        :type prefer: str
        """

        self._prefer = prefer

    @property
    def prohibits(self):
        """Gets the prohibits of this Filter.


        :return: The prohibits of this Filter.
        :rtype: List[Prohibits]
        """
        return self._prohibits

    @prohibits.setter
    def prohibits(self, prohibits):
        """Sets the prohibits of this Filter.


        :param prohibits: The prohibits of this Filter.
        :type prohibits: List[Prohibits]
        """

        self._prohibits = prohibits

    @property
    def release_status(self):
        """Gets the release_status of this Filter.


        :return: The release_status of this Filter.
        :rtype: ReleaseStatusType
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this Filter.


        :param release_status: The release_status of this Filter.
        :type release_status: ReleaseStatusType
        """

        self._release_status = release_status

    @property
    def replaced_by(self):
        """Gets the replaced_by of this Filter.


        :return: The replaced_by of this Filter.
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this Filter.


        :param replaced_by: The replaced_by of this Filter.
        :type replaced_by: str
        """

        self._replaced_by = replaced_by

    @property
    def required(self):
        """Gets the required of this Filter.


        :return: The required of this Filter.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Filter.


        :param required: The required of this Filter.
        :type required: bool
        """

        self._required = required

    @property
    def title(self):
        """Gets the title of this Filter.


        :return: The title of this Filter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Filter.


        :param title: The title of this Filter.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Filter.


        :return: The type of this Filter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Filter.


        :param type: The type of this Filter.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
