# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributions_mixin_contribution_contribution_contribution import ContributionsMixinContributionContributionContribution
from openapi_server.models.contributions_mixin_contribution_contribution_contribution_credit_role import ContributionsMixinContributionContributionContributionCreditRole
from openapi_server.models.contributions_mixin_contributor import ContributionsMixinContributor
from openapi_server import util


class ContributionsMixinContributionContribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_name: str=None, contribution: ContributionsMixinContributionContributionContribution=None, contributions_mixin_contributor: ContributionsMixinContributor=None, credit_role: ContributionsMixinContributionContributionContributionCreditRole=None):
        """ContributionsMixinContributionContribution - a model defined in OpenAPI

        :param character_name: The character_name of this ContributionsMixinContributionContribution.
        :param contribution: The contribution of this ContributionsMixinContributionContribution.
        :param contributions_mixin_contributor: The contributions_mixin_contributor of this ContributionsMixinContributionContribution.
        :param credit_role: The credit_role of this ContributionsMixinContributionContribution.
        """
        self.openapi_types = {
            'character_name': str,
            'contribution': ContributionsMixinContributionContributionContribution,
            'contributions_mixin_contributor': ContributionsMixinContributor,
            'credit_role': ContributionsMixinContributionContributionContributionCreditRole
        }

        self.attribute_map = {
            'character_name': 'character_name',
            'contribution': 'contribution',
            'contributions_mixin_contributor': 'contributions_mixin_contributor',
            'credit_role': 'credit_role'
        }

        self._character_name = character_name
        self._contribution = contribution
        self._contributions_mixin_contributor = contributions_mixin_contributor
        self._credit_role = credit_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContributionsMixinContributionContribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contributions_mixin_contribution_contribution of this ContributionsMixinContributionContribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_name(self):
        """Gets the character_name of this ContributionsMixinContributionContribution.


        :return: The character_name of this ContributionsMixinContributionContribution.
        :rtype: str
        """
        return self._character_name

    @character_name.setter
    def character_name(self, character_name):
        """Sets the character_name of this ContributionsMixinContributionContribution.


        :param character_name: The character_name of this ContributionsMixinContributionContribution.
        :type character_name: str
        """

        self._character_name = character_name

    @property
    def contribution(self):
        """Gets the contribution of this ContributionsMixinContributionContribution.


        :return: The contribution of this ContributionsMixinContributionContribution.
        :rtype: ContributionsMixinContributionContributionContribution
        """
        return self._contribution

    @contribution.setter
    def contribution(self, contribution):
        """Sets the contribution of this ContributionsMixinContributionContribution.


        :param contribution: The contribution of this ContributionsMixinContributionContribution.
        :type contribution: ContributionsMixinContributionContributionContribution
        """
        if contribution is None:
            raise ValueError("Invalid value for `contribution`, must not be `None`")

        self._contribution = contribution

    @property
    def contributions_mixin_contributor(self):
        """Gets the contributions_mixin_contributor of this ContributionsMixinContributionContribution.


        :return: The contributions_mixin_contributor of this ContributionsMixinContributionContribution.
        :rtype: ContributionsMixinContributor
        """
        return self._contributions_mixin_contributor

    @contributions_mixin_contributor.setter
    def contributions_mixin_contributor(self, contributions_mixin_contributor):
        """Sets the contributions_mixin_contributor of this ContributionsMixinContributionContribution.


        :param contributions_mixin_contributor: The contributions_mixin_contributor of this ContributionsMixinContributionContribution.
        :type contributions_mixin_contributor: ContributionsMixinContributor
        """

        self._contributions_mixin_contributor = contributions_mixin_contributor

    @property
    def credit_role(self):
        """Gets the credit_role of this ContributionsMixinContributionContribution.


        :return: The credit_role of this ContributionsMixinContributionContribution.
        :rtype: ContributionsMixinContributionContributionContributionCreditRole
        """
        return self._credit_role

    @credit_role.setter
    def credit_role(self, credit_role):
        """Sets the credit_role of this ContributionsMixinContributionContribution.


        :param credit_role: The credit_role of this ContributionsMixinContributionContribution.
        :type credit_role: ContributionsMixinContributionContributionContributionCreditRole
        """

        self._credit_role = credit_role
