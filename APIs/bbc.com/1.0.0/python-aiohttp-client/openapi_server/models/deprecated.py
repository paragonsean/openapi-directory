# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Deprecated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated_since: str=None, name: str=None, replaced_by: str=None, replacement_type: str=None, type: str=None):
        """Deprecated - a model defined in OpenAPI

        :param deprecated_since: The deprecated_since of this Deprecated.
        :param name: The name of this Deprecated.
        :param replaced_by: The replaced_by of this Deprecated.
        :param replacement_type: The replacement_type of this Deprecated.
        :param type: The type of this Deprecated.
        """
        self.openapi_types = {
            'deprecated_since': str,
            'name': str,
            'replaced_by': str,
            'replacement_type': str,
            'type': str
        }

        self.attribute_map = {
            'deprecated_since': 'deprecated_since',
            'name': 'name',
            'replaced_by': 'replaced_by',
            'replacement_type': 'replacement_type',
            'type': 'type'
        }

        self._deprecated_since = deprecated_since
        self._name = name
        self._replaced_by = replaced_by
        self._replacement_type = replacement_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deprecated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deprecated of this Deprecated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated_since(self):
        """Gets the deprecated_since of this Deprecated.


        :return: The deprecated_since of this Deprecated.
        :rtype: str
        """
        return self._deprecated_since

    @deprecated_since.setter
    def deprecated_since(self, deprecated_since):
        """Sets the deprecated_since of this Deprecated.


        :param deprecated_since: The deprecated_since of this Deprecated.
        :type deprecated_since: str
        """
        if deprecated_since is None:
            raise ValueError("Invalid value for `deprecated_since`, must not be `None`")
        if deprecated_since is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', deprecated_since):
            raise ValueError("Invalid value for `deprecated_since`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._deprecated_since = deprecated_since

    @property
    def name(self):
        """Gets the name of this Deprecated.


        :return: The name of this Deprecated.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Deprecated.


        :param name: The name of this Deprecated.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def replaced_by(self):
        """Gets the replaced_by of this Deprecated.


        :return: The replaced_by of this Deprecated.
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this Deprecated.


        :param replaced_by: The replaced_by of this Deprecated.
        :type replaced_by: str
        """

        self._replaced_by = replaced_by

    @property
    def replacement_type(self):
        """Gets the replacement_type of this Deprecated.


        :return: The replacement_type of this Deprecated.
        :rtype: str
        """
        return self._replacement_type

    @replacement_type.setter
    def replacement_type(self, replacement_type):
        """Sets the replacement_type of this Deprecated.


        :param replacement_type: The replacement_type of this Deprecated.
        :type replacement_type: str
        """

        self._replacement_type = replacement_type

    @property
    def type(self):
        """Gets the type of this Deprecated.


        :return: The type of this Deprecated.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Deprecated.


        :param type: The type of this Deprecated.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
