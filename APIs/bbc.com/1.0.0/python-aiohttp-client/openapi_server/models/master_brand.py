# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.image_link import ImageLink
from openapi_server.models.images_mixin import ImagesMixin
from openapi_server.models.master_brand_competition_warning import MasterBrandCompetitionWarning
from openapi_server.models.master_brand_master_brand_date_range import MasterBrandMasterBrandDateRange
from openapi_server.models.master_brand_synopses import MasterBrandSynopses
import re
from openapi_server import util


class MasterBrand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colour: str=None, competition_warning: MasterBrandCompetitionWarning=None, ident: str=None, identifiers: Identifiers=None, image_link: ImageLink=None, images_mixin: ImagesMixin=None, master_brand_date_range: MasterBrandMasterBrandDateRange=None, mid: str=None, name: str=None, partner: str=None, position: int=None, synopses: MasterBrandSynopses=None, title: str=None, url_key: str=None):
        """MasterBrand - a model defined in OpenAPI

        :param colour: The colour of this MasterBrand.
        :param competition_warning: The competition_warning of this MasterBrand.
        :param ident: The ident of this MasterBrand.
        :param identifiers: The identifiers of this MasterBrand.
        :param image_link: The image_link of this MasterBrand.
        :param images_mixin: The images_mixin of this MasterBrand.
        :param master_brand_date_range: The master_brand_date_range of this MasterBrand.
        :param mid: The mid of this MasterBrand.
        :param name: The name of this MasterBrand.
        :param partner: The partner of this MasterBrand.
        :param position: The position of this MasterBrand.
        :param synopses: The synopses of this MasterBrand.
        :param title: The title of this MasterBrand.
        :param url_key: The url_key of this MasterBrand.
        """
        self.openapi_types = {
            'colour': str,
            'competition_warning': MasterBrandCompetitionWarning,
            'ident': str,
            'identifiers': Identifiers,
            'image_link': ImageLink,
            'images_mixin': ImagesMixin,
            'master_brand_date_range': MasterBrandMasterBrandDateRange,
            'mid': str,
            'name': str,
            'partner': str,
            'position': int,
            'synopses': MasterBrandSynopses,
            'title': str,
            'url_key': str
        }

        self.attribute_map = {
            'colour': 'colour',
            'competition_warning': 'competition_warning',
            'ident': 'ident',
            'identifiers': 'identifiers',
            'image_link': 'image_link',
            'images_mixin': 'images_mixin',
            'master_brand_date_range': 'master_brand_date_range',
            'mid': 'mid',
            'name': 'name',
            'partner': 'partner',
            'position': 'position',
            'synopses': 'synopses',
            'title': 'title',
            'url_key': 'url_key'
        }

        self._colour = colour
        self._competition_warning = competition_warning
        self._ident = ident
        self._identifiers = identifiers
        self._image_link = image_link
        self._images_mixin = images_mixin
        self._master_brand_date_range = master_brand_date_range
        self._mid = mid
        self._name = name
        self._partner = partner
        self._position = position
        self._synopses = synopses
        self._title = title
        self._url_key = url_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterBrand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The master_brand of this MasterBrand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colour(self):
        """Gets the colour of this MasterBrand.


        :return: The colour of this MasterBrand.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this MasterBrand.


        :param colour: The colour of this MasterBrand.
        :type colour: str
        """

        self._colour = colour

    @property
    def competition_warning(self):
        """Gets the competition_warning of this MasterBrand.


        :return: The competition_warning of this MasterBrand.
        :rtype: MasterBrandCompetitionWarning
        """
        return self._competition_warning

    @competition_warning.setter
    def competition_warning(self, competition_warning):
        """Sets the competition_warning of this MasterBrand.


        :param competition_warning: The competition_warning of this MasterBrand.
        :type competition_warning: MasterBrandCompetitionWarning
        """

        self._competition_warning = competition_warning

    @property
    def ident(self):
        """Gets the ident of this MasterBrand.


        :return: The ident of this MasterBrand.
        :rtype: str
        """
        return self._ident

    @ident.setter
    def ident(self, ident):
        """Sets the ident of this MasterBrand.


        :param ident: The ident of this MasterBrand.
        :type ident: str
        """

        self._ident = ident

    @property
    def identifiers(self):
        """Gets the identifiers of this MasterBrand.


        :return: The identifiers of this MasterBrand.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this MasterBrand.


        :param identifiers: The identifiers of this MasterBrand.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def image_link(self):
        """Gets the image_link of this MasterBrand.


        :return: The image_link of this MasterBrand.
        :rtype: ImageLink
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this MasterBrand.


        :param image_link: The image_link of this MasterBrand.
        :type image_link: ImageLink
        """

        self._image_link = image_link

    @property
    def images_mixin(self):
        """Gets the images_mixin of this MasterBrand.


        :return: The images_mixin of this MasterBrand.
        :rtype: ImagesMixin
        """
        return self._images_mixin

    @images_mixin.setter
    def images_mixin(self, images_mixin):
        """Sets the images_mixin of this MasterBrand.


        :param images_mixin: The images_mixin of this MasterBrand.
        :type images_mixin: ImagesMixin
        """

        self._images_mixin = images_mixin

    @property
    def master_brand_date_range(self):
        """Gets the master_brand_date_range of this MasterBrand.


        :return: The master_brand_date_range of this MasterBrand.
        :rtype: MasterBrandMasterBrandDateRange
        """
        return self._master_brand_date_range

    @master_brand_date_range.setter
    def master_brand_date_range(self, master_brand_date_range):
        """Sets the master_brand_date_range of this MasterBrand.


        :param master_brand_date_range: The master_brand_date_range of this MasterBrand.
        :type master_brand_date_range: MasterBrandMasterBrandDateRange
        """

        self._master_brand_date_range = master_brand_date_range

    @property
    def mid(self):
        """Gets the mid of this MasterBrand.


        :return: The mid of this MasterBrand.
        :rtype: str
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this MasterBrand.


        :param mid: The mid of this MasterBrand.
        :type mid: str
        """
        if mid is None:
            raise ValueError("Invalid value for `mid`, must not be `None`")

        self._mid = mid

    @property
    def name(self):
        """Gets the name of this MasterBrand.


        :return: The name of this MasterBrand.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MasterBrand.


        :param name: The name of this MasterBrand.
        :type name: str
        """

        self._name = name

    @property
    def partner(self):
        """Gets the partner of this MasterBrand.


        :return: The partner of this MasterBrand.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this MasterBrand.


        :param partner: The partner of this MasterBrand.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def position(self):
        """Gets the position of this MasterBrand.


        :return: The position of this MasterBrand.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this MasterBrand.


        :param position: The position of this MasterBrand.
        :type position: int
        """

        self._position = position

    @property
    def synopses(self):
        """Gets the synopses of this MasterBrand.


        :return: The synopses of this MasterBrand.
        :rtype: MasterBrandSynopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this MasterBrand.


        :param synopses: The synopses of this MasterBrand.
        :type synopses: MasterBrandSynopses
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this MasterBrand.


        :return: The title of this MasterBrand.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MasterBrand.


        :param title: The title of this MasterBrand.
        :type title: str
        """

        self._title = title

    @property
    def url_key(self):
        """Gets the url_key of this MasterBrand.


        :return: The url_key of this MasterBrand.
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key):
        """Sets the url_key of this MasterBrand.


        :param url_key: The url_key of this MasterBrand.
        :type url_key: str
        """

        self._url_key = url_key
