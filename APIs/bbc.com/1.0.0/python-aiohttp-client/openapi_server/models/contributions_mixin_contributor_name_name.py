# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributions_mixin_contributor_name_name_name import ContributionsMixinContributorNameNameName
from openapi_server import util


class ContributionsMixinContributorNameName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family: str=None, given: str=None, name: ContributionsMixinContributorNameNameName=None, presentation: str=None, title: str=None):
        """ContributionsMixinContributorNameName - a model defined in OpenAPI

        :param family: The family of this ContributionsMixinContributorNameName.
        :param given: The given of this ContributionsMixinContributorNameName.
        :param name: The name of this ContributionsMixinContributorNameName.
        :param presentation: The presentation of this ContributionsMixinContributorNameName.
        :param title: The title of this ContributionsMixinContributorNameName.
        """
        self.openapi_types = {
            'family': str,
            'given': str,
            'name': ContributionsMixinContributorNameNameName,
            'presentation': str,
            'title': str
        }

        self.attribute_map = {
            'family': 'family',
            'given': 'given',
            'name': 'name',
            'presentation': 'presentation',
            'title': 'title'
        }

        self._family = family
        self._given = given
        self._name = name
        self._presentation = presentation
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContributionsMixinContributorNameName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contributions_mixin_contributor_name_name of this ContributionsMixinContributorNameName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family(self):
        """Gets the family of this ContributionsMixinContributorNameName.


        :return: The family of this ContributionsMixinContributorNameName.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this ContributionsMixinContributorNameName.


        :param family: The family of this ContributionsMixinContributorNameName.
        :type family: str
        """

        self._family = family

    @property
    def given(self):
        """Gets the given of this ContributionsMixinContributorNameName.


        :return: The given of this ContributionsMixinContributorNameName.
        :rtype: str
        """
        return self._given

    @given.setter
    def given(self, given):
        """Sets the given of this ContributionsMixinContributorNameName.


        :param given: The given of this ContributionsMixinContributorNameName.
        :type given: str
        """

        self._given = given

    @property
    def name(self):
        """Gets the name of this ContributionsMixinContributorNameName.


        :return: The name of this ContributionsMixinContributorNameName.
        :rtype: ContributionsMixinContributorNameNameName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContributionsMixinContributorNameName.


        :param name: The name of this ContributionsMixinContributorNameName.
        :type name: ContributionsMixinContributorNameNameName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def presentation(self):
        """Gets the presentation of this ContributionsMixinContributorNameName.


        :return: The presentation of this ContributionsMixinContributorNameName.
        :rtype: str
        """
        return self._presentation

    @presentation.setter
    def presentation(self, presentation):
        """Sets the presentation of this ContributionsMixinContributorNameName.


        :param presentation: The presentation of this ContributionsMixinContributorNameName.
        :type presentation: str
        """

        self._presentation = presentation

    @property
    def title(self):
        """Gets the title of this ContributionsMixinContributorNameName.


        :return: The title of this ContributionsMixinContributorNameName.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContributionsMixinContributorNameName.


        :param title: The title of this ContributionsMixinContributorNameName.
        :type title: str
        """

        self._title = title
