# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data import Data
from openapi_server.models.xquery_version import XqueryVersion
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, data: Data=None, error_name: str=None, expr: str=None, format_string: str=None, message: str=None, retryable: bool=None, xquery_version: XqueryVersion=None):
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.
        :param data: The data of this Error.
        :param error_name: The error_name of this Error.
        :param expr: The expr of this Error.
        :param format_string: The format_string of this Error.
        :param message: The message of this Error.
        :param retryable: The retryable of this Error.
        :param xquery_version: The xquery_version of this Error.
        """
        self.openapi_types = {
            'code': str,
            'data': Data,
            'error_name': str,
            'expr': str,
            'format_string': str,
            'message': str,
            'retryable': bool,
            'xquery_version': XqueryVersion
        }

        self.attribute_map = {
            'code': 'code',
            'data': 'data',
            'error_name': 'error-name',
            'expr': 'expr',
            'format_string': 'format-string',
            'message': 'message',
            'retryable': 'retryable',
            'xquery_version': 'xquery-version'
        }

        self._code = code
        self._data = data
        self._error_name = error_name
        self._expr = expr
        self._format_string = format_string
        self._message = message
        self._retryable = retryable
        self._xquery_version = xquery_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.


        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.


        :param code: The code of this Error.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def data(self):
        """Gets the data of this Error.


        :return: The data of this Error.
        :rtype: Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Error.


        :param data: The data of this Error.
        :type data: Data
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def error_name(self):
        """Gets the error_name of this Error.


        :return: The error_name of this Error.
        :rtype: str
        """
        return self._error_name

    @error_name.setter
    def error_name(self, error_name):
        """Sets the error_name of this Error.


        :param error_name: The error_name of this Error.
        :type error_name: str
        """
        if error_name is None:
            raise ValueError("Invalid value for `error_name`, must not be `None`")

        self._error_name = error_name

    @property
    def expr(self):
        """Gets the expr of this Error.


        :return: The expr of this Error.
        :rtype: str
        """
        return self._expr

    @expr.setter
    def expr(self, expr):
        """Sets the expr of this Error.


        :param expr: The expr of this Error.
        :type expr: str
        """
        if expr is None:
            raise ValueError("Invalid value for `expr`, must not be `None`")

        self._expr = expr

    @property
    def format_string(self):
        """Gets the format_string of this Error.


        :return: The format_string of this Error.
        :rtype: str
        """
        return self._format_string

    @format_string.setter
    def format_string(self, format_string):
        """Sets the format_string of this Error.


        :param format_string: The format_string of this Error.
        :type format_string: str
        """
        if format_string is None:
            raise ValueError("Invalid value for `format_string`, must not be `None`")

        self._format_string = format_string

    @property
    def message(self):
        """Gets the message of this Error.


        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.


        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def retryable(self):
        """Gets the retryable of this Error.


        :return: The retryable of this Error.
        :rtype: bool
        """
        return self._retryable

    @retryable.setter
    def retryable(self, retryable):
        """Sets the retryable of this Error.


        :param retryable: The retryable of this Error.
        :type retryable: bool
        """
        if retryable is None:
            raise ValueError("Invalid value for `retryable`, must not be `None`")

        self._retryable = retryable

    @property
    def xquery_version(self):
        """Gets the xquery_version of this Error.


        :return: The xquery_version of this Error.
        :rtype: XqueryVersion
        """
        return self._xquery_version

    @xquery_version.setter
    def xquery_version(self, xquery_version):
        """Sets the xquery_version of this Error.


        :param xquery_version: The xquery_version of this Error.
        :type xquery_version: XqueryVersion
        """
        if xquery_version is None:
            raise ValueError("Invalid value for `xquery_version`, must not be `None`")

        self._xquery_version = xquery_version
