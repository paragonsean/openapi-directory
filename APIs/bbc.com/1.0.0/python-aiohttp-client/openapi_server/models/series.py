# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_images_mixin import AlternateImagesMixin
from openapi_server.models.ancestor_titles import AncestorTitles
from openapi_server.models.ancestors_titles import AncestorsTitles
from openapi_server.models.availability_mixin import AvailabilityMixin
from openapi_server.models.contributions_mixin import ContributionsMixin
from openapi_server.models.embargoed import Embargoed
from openapi_server.models.genre_groupings_type import GenreGroupingsType
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.image_link import ImageLink
from openapi_server.models.images_mixin import ImagesMixin
from openapi_server.models.master_brand_link import MasterBrandLink
from openapi_server.models.pid_reference import PidReference
from openapi_server.models.previous_next_mixin import PreviousNextMixin
from openapi_server.models.programme_formats import ProgrammeFormats
from openapi_server.models.programme_type import ProgrammeType
from openapi_server.models.reference import Reference
from openapi_server.models.related_links import RelatedLinks
from openapi_server.models.release_date_group import ReleaseDateGroup
from openapi_server.models.synopses import Synopses
import re
from openapi_server import util


class Series(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_images_mixin: AlternateImagesMixin=None, ancestor_titles: AncestorTitles=None, ancestors: Reference=None, ancestors_titles: AncestorsTitles=None, availability_mixin: AvailabilityMixin=None, contributions_mixin: ContributionsMixin=None, embargoed: Embargoed=None, expected_child_count: int=None, genre_groupings: GenreGroupingsType=None, identifiers: Identifiers=None, image_link: ImageLink=None, images_mixin: ImagesMixin=None, is_embeddable: bool=None, items_for: Reference=None, master_brand_link: MasterBrandLink=None, partner: str=None, pid: str=None, previous_next_mixin: PreviousNextMixin=None, programme_formats: ProgrammeFormats=None, programme_type: ProgrammeType=None, related_links: RelatedLinks=None, release_date_group: ReleaseDateGroup=None, series_of: PidReference=None, synopses: Synopses=None, title: str=None, updated_time: datetime=None, uri: str=None):
        """Series - a model defined in OpenAPI

        :param alternate_images_mixin: The alternate_images_mixin of this Series.
        :param ancestor_titles: The ancestor_titles of this Series.
        :param ancestors: The ancestors of this Series.
        :param ancestors_titles: The ancestors_titles of this Series.
        :param availability_mixin: The availability_mixin of this Series.
        :param contributions_mixin: The contributions_mixin of this Series.
        :param embargoed: The embargoed of this Series.
        :param expected_child_count: The expected_child_count of this Series.
        :param genre_groupings: The genre_groupings of this Series.
        :param identifiers: The identifiers of this Series.
        :param image_link: The image_link of this Series.
        :param images_mixin: The images_mixin of this Series.
        :param is_embeddable: The is_embeddable of this Series.
        :param items_for: The items_for of this Series.
        :param master_brand_link: The master_brand_link of this Series.
        :param partner: The partner of this Series.
        :param pid: The pid of this Series.
        :param previous_next_mixin: The previous_next_mixin of this Series.
        :param programme_formats: The programme_formats of this Series.
        :param programme_type: The programme_type of this Series.
        :param related_links: The related_links of this Series.
        :param release_date_group: The release_date_group of this Series.
        :param series_of: The series_of of this Series.
        :param synopses: The synopses of this Series.
        :param title: The title of this Series.
        :param updated_time: The updated_time of this Series.
        :param uri: The uri of this Series.
        """
        self.openapi_types = {
            'alternate_images_mixin': AlternateImagesMixin,
            'ancestor_titles': AncestorTitles,
            'ancestors': Reference,
            'ancestors_titles': AncestorsTitles,
            'availability_mixin': AvailabilityMixin,
            'contributions_mixin': ContributionsMixin,
            'embargoed': Embargoed,
            'expected_child_count': int,
            'genre_groupings': GenreGroupingsType,
            'identifiers': Identifiers,
            'image_link': ImageLink,
            'images_mixin': ImagesMixin,
            'is_embeddable': bool,
            'items_for': Reference,
            'master_brand_link': MasterBrandLink,
            'partner': str,
            'pid': str,
            'previous_next_mixin': PreviousNextMixin,
            'programme_formats': ProgrammeFormats,
            'programme_type': ProgrammeType,
            'related_links': RelatedLinks,
            'release_date_group': ReleaseDateGroup,
            'series_of': PidReference,
            'synopses': Synopses,
            'title': str,
            'updated_time': datetime,
            'uri': str
        }

        self.attribute_map = {
            'alternate_images_mixin': 'alternate_images_mixin',
            'ancestor_titles': 'ancestor_titles',
            'ancestors': 'ancestors',
            'ancestors_titles': 'ancestors_titles',
            'availability_mixin': 'availability_mixin',
            'contributions_mixin': 'contributions_mixin',
            'embargoed': 'embargoed',
            'expected_child_count': 'expected_child_count',
            'genre_groupings': 'genre_groupings',
            'identifiers': 'identifiers',
            'image_link': 'image_link',
            'images_mixin': 'images_mixin',
            'is_embeddable': 'is_embeddable',
            'items_for': 'items_for',
            'master_brand_link': 'master_brand_link',
            'partner': 'partner',
            'pid': 'pid',
            'previous_next_mixin': 'previous_next_mixin',
            'programme_formats': 'programme_formats',
            'programme_type': 'programme_type',
            'related_links': 'related_links',
            'release_date_group': 'release_date_group',
            'series_of': 'series_of',
            'synopses': 'synopses',
            'title': 'title',
            'updated_time': 'updated_time',
            'uri': 'uri'
        }

        self._alternate_images_mixin = alternate_images_mixin
        self._ancestor_titles = ancestor_titles
        self._ancestors = ancestors
        self._ancestors_titles = ancestors_titles
        self._availability_mixin = availability_mixin
        self._contributions_mixin = contributions_mixin
        self._embargoed = embargoed
        self._expected_child_count = expected_child_count
        self._genre_groupings = genre_groupings
        self._identifiers = identifiers
        self._image_link = image_link
        self._images_mixin = images_mixin
        self._is_embeddable = is_embeddable
        self._items_for = items_for
        self._master_brand_link = master_brand_link
        self._partner = partner
        self._pid = pid
        self._previous_next_mixin = previous_next_mixin
        self._programme_formats = programme_formats
        self._programme_type = programme_type
        self._related_links = related_links
        self._release_date_group = release_date_group
        self._series_of = series_of
        self._synopses = synopses
        self._title = title
        self._updated_time = updated_time
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Series':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The series of this Series.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_images_mixin(self):
        """Gets the alternate_images_mixin of this Series.


        :return: The alternate_images_mixin of this Series.
        :rtype: AlternateImagesMixin
        """
        return self._alternate_images_mixin

    @alternate_images_mixin.setter
    def alternate_images_mixin(self, alternate_images_mixin):
        """Sets the alternate_images_mixin of this Series.


        :param alternate_images_mixin: The alternate_images_mixin of this Series.
        :type alternate_images_mixin: AlternateImagesMixin
        """

        self._alternate_images_mixin = alternate_images_mixin

    @property
    def ancestor_titles(self):
        """Gets the ancestor_titles of this Series.


        :return: The ancestor_titles of this Series.
        :rtype: AncestorTitles
        """
        return self._ancestor_titles

    @ancestor_titles.setter
    def ancestor_titles(self, ancestor_titles):
        """Sets the ancestor_titles of this Series.


        :param ancestor_titles: The ancestor_titles of this Series.
        :type ancestor_titles: AncestorTitles
        """

        self._ancestor_titles = ancestor_titles

    @property
    def ancestors(self):
        """Gets the ancestors of this Series.


        :return: The ancestors of this Series.
        :rtype: Reference
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this Series.


        :param ancestors: The ancestors of this Series.
        :type ancestors: Reference
        """

        self._ancestors = ancestors

    @property
    def ancestors_titles(self):
        """Gets the ancestors_titles of this Series.


        :return: The ancestors_titles of this Series.
        :rtype: AncestorsTitles
        """
        return self._ancestors_titles

    @ancestors_titles.setter
    def ancestors_titles(self, ancestors_titles):
        """Sets the ancestors_titles of this Series.


        :param ancestors_titles: The ancestors_titles of this Series.
        :type ancestors_titles: AncestorsTitles
        """

        self._ancestors_titles = ancestors_titles

    @property
    def availability_mixin(self):
        """Gets the availability_mixin of this Series.


        :return: The availability_mixin of this Series.
        :rtype: AvailabilityMixin
        """
        return self._availability_mixin

    @availability_mixin.setter
    def availability_mixin(self, availability_mixin):
        """Sets the availability_mixin of this Series.


        :param availability_mixin: The availability_mixin of this Series.
        :type availability_mixin: AvailabilityMixin
        """

        self._availability_mixin = availability_mixin

    @property
    def contributions_mixin(self):
        """Gets the contributions_mixin of this Series.


        :return: The contributions_mixin of this Series.
        :rtype: ContributionsMixin
        """
        return self._contributions_mixin

    @contributions_mixin.setter
    def contributions_mixin(self, contributions_mixin):
        """Sets the contributions_mixin of this Series.


        :param contributions_mixin: The contributions_mixin of this Series.
        :type contributions_mixin: ContributionsMixin
        """

        self._contributions_mixin = contributions_mixin

    @property
    def embargoed(self):
        """Gets the embargoed of this Series.


        :return: The embargoed of this Series.
        :rtype: Embargoed
        """
        return self._embargoed

    @embargoed.setter
    def embargoed(self, embargoed):
        """Sets the embargoed of this Series.


        :param embargoed: The embargoed of this Series.
        :type embargoed: Embargoed
        """
        if embargoed is None:
            raise ValueError("Invalid value for `embargoed`, must not be `None`")

        self._embargoed = embargoed

    @property
    def expected_child_count(self):
        """Gets the expected_child_count of this Series.


        :return: The expected_child_count of this Series.
        :rtype: int
        """
        return self._expected_child_count

    @expected_child_count.setter
    def expected_child_count(self, expected_child_count):
        """Sets the expected_child_count of this Series.


        :param expected_child_count: The expected_child_count of this Series.
        :type expected_child_count: int
        """

        self._expected_child_count = expected_child_count

    @property
    def genre_groupings(self):
        """Gets the genre_groupings of this Series.


        :return: The genre_groupings of this Series.
        :rtype: GenreGroupingsType
        """
        return self._genre_groupings

    @genre_groupings.setter
    def genre_groupings(self, genre_groupings):
        """Sets the genre_groupings of this Series.


        :param genre_groupings: The genre_groupings of this Series.
        :type genre_groupings: GenreGroupingsType
        """

        self._genre_groupings = genre_groupings

    @property
    def identifiers(self):
        """Gets the identifiers of this Series.


        :return: The identifiers of this Series.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Series.


        :param identifiers: The identifiers of this Series.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def image_link(self):
        """Gets the image_link of this Series.


        :return: The image_link of this Series.
        :rtype: ImageLink
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this Series.


        :param image_link: The image_link of this Series.
        :type image_link: ImageLink
        """

        self._image_link = image_link

    @property
    def images_mixin(self):
        """Gets the images_mixin of this Series.


        :return: The images_mixin of this Series.
        :rtype: ImagesMixin
        """
        return self._images_mixin

    @images_mixin.setter
    def images_mixin(self, images_mixin):
        """Sets the images_mixin of this Series.


        :param images_mixin: The images_mixin of this Series.
        :type images_mixin: ImagesMixin
        """

        self._images_mixin = images_mixin

    @property
    def is_embeddable(self):
        """Gets the is_embeddable of this Series.


        :return: The is_embeddable of this Series.
        :rtype: bool
        """
        return self._is_embeddable

    @is_embeddable.setter
    def is_embeddable(self, is_embeddable):
        """Sets the is_embeddable of this Series.


        :param is_embeddable: The is_embeddable of this Series.
        :type is_embeddable: bool
        """

        self._is_embeddable = is_embeddable

    @property
    def items_for(self):
        """Gets the items_for of this Series.


        :return: The items_for of this Series.
        :rtype: Reference
        """
        return self._items_for

    @items_for.setter
    def items_for(self, items_for):
        """Sets the items_for of this Series.


        :param items_for: The items_for of this Series.
        :type items_for: Reference
        """

        self._items_for = items_for

    @property
    def master_brand_link(self):
        """Gets the master_brand_link of this Series.


        :return: The master_brand_link of this Series.
        :rtype: MasterBrandLink
        """
        return self._master_brand_link

    @master_brand_link.setter
    def master_brand_link(self, master_brand_link):
        """Sets the master_brand_link of this Series.


        :param master_brand_link: The master_brand_link of this Series.
        :type master_brand_link: MasterBrandLink
        """

        self._master_brand_link = master_brand_link

    @property
    def partner(self):
        """Gets the partner of this Series.


        :return: The partner of this Series.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Series.


        :param partner: The partner of this Series.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Series.


        :return: The pid of this Series.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Series.


        :param pid: The pid of this Series.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def previous_next_mixin(self):
        """Gets the previous_next_mixin of this Series.


        :return: The previous_next_mixin of this Series.
        :rtype: PreviousNextMixin
        """
        return self._previous_next_mixin

    @previous_next_mixin.setter
    def previous_next_mixin(self, previous_next_mixin):
        """Sets the previous_next_mixin of this Series.


        :param previous_next_mixin: The previous_next_mixin of this Series.
        :type previous_next_mixin: PreviousNextMixin
        """

        self._previous_next_mixin = previous_next_mixin

    @property
    def programme_formats(self):
        """Gets the programme_formats of this Series.


        :return: The programme_formats of this Series.
        :rtype: ProgrammeFormats
        """
        return self._programme_formats

    @programme_formats.setter
    def programme_formats(self, programme_formats):
        """Sets the programme_formats of this Series.


        :param programme_formats: The programme_formats of this Series.
        :type programme_formats: ProgrammeFormats
        """

        self._programme_formats = programme_formats

    @property
    def programme_type(self):
        """Gets the programme_type of this Series.


        :return: The programme_type of this Series.
        :rtype: ProgrammeType
        """
        return self._programme_type

    @programme_type.setter
    def programme_type(self, programme_type):
        """Sets the programme_type of this Series.


        :param programme_type: The programme_type of this Series.
        :type programme_type: ProgrammeType
        """

        self._programme_type = programme_type

    @property
    def related_links(self):
        """Gets the related_links of this Series.


        :return: The related_links of this Series.
        :rtype: RelatedLinks
        """
        return self._related_links

    @related_links.setter
    def related_links(self, related_links):
        """Sets the related_links of this Series.


        :param related_links: The related_links of this Series.
        :type related_links: RelatedLinks
        """

        self._related_links = related_links

    @property
    def release_date_group(self):
        """Gets the release_date_group of this Series.


        :return: The release_date_group of this Series.
        :rtype: ReleaseDateGroup
        """
        return self._release_date_group

    @release_date_group.setter
    def release_date_group(self, release_date_group):
        """Sets the release_date_group of this Series.


        :param release_date_group: The release_date_group of this Series.
        :type release_date_group: ReleaseDateGroup
        """

        self._release_date_group = release_date_group

    @property
    def series_of(self):
        """Gets the series_of of this Series.


        :return: The series_of of this Series.
        :rtype: PidReference
        """
        return self._series_of

    @series_of.setter
    def series_of(self, series_of):
        """Sets the series_of of this Series.


        :param series_of: The series_of of this Series.
        :type series_of: PidReference
        """

        self._series_of = series_of

    @property
    def synopses(self):
        """Gets the synopses of this Series.


        :return: The synopses of this Series.
        :rtype: Synopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Series.


        :param synopses: The synopses of this Series.
        :type synopses: Synopses
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Series.


        :return: The title of this Series.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Series.


        :param title: The title of this Series.
        :type title: str
        """

        self._title = title

    @property
    def updated_time(self):
        """Gets the updated_time of this Series.


        :return: The updated_time of this Series.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Series.


        :param updated_time: The updated_time of this Series.
        :type updated_time: datetime
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")

        self._updated_time = updated_time

    @property
    def uri(self):
        """Gets the uri of this Series.


        :return: The uri of this Series.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Series.


        :param uri: The uri of this Series.
        :type uri: str
        """

        self._uri = uri
