# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SortDirection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, is_default: str=None, name: str=None, value: str=None):
        """SortDirection - a model defined in OpenAPI

        :param href: The href of this SortDirection.
        :param is_default: The is_default of this SortDirection.
        :param name: The name of this SortDirection.
        :param value: The value of this SortDirection.
        """
        self.openapi_types = {
            'href': str,
            'is_default': str,
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'href': 'href',
            'is_default': 'is_default',
            'name': 'name',
            'value': 'value'
        }

        self._href = href
        self._is_default = is_default
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SortDirection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sort_direction of this SortDirection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this SortDirection.


        :return: The href of this SortDirection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SortDirection.


        :param href: The href of this SortDirection.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def is_default(self):
        """Gets the is_default of this SortDirection.


        :return: The is_default of this SortDirection.
        :rtype: str
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SortDirection.


        :param is_default: The is_default of this SortDirection.
        :type is_default: str
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this SortDirection.


        :return: The name of this SortDirection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SortDirection.


        :param name: The name of this SortDirection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this SortDirection.


        :return: The value of this SortDirection.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SortDirection.


        :param value: The value of this SortDirection.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
