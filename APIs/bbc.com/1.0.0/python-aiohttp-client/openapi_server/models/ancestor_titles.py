# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor_titles_brand import AncestorTitlesBrand
from openapi_server.models.ancestor_titles_episode import AncestorTitlesEpisode
from openapi_server import util


class AncestorTitles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: AncestorTitlesBrand=None, episode: AncestorTitlesEpisode=None, series: List[AncestorTitlesBrand]=None):
        """AncestorTitles - a model defined in OpenAPI

        :param brand: The brand of this AncestorTitles.
        :param episode: The episode of this AncestorTitles.
        :param series: The series of this AncestorTitles.
        """
        self.openapi_types = {
            'brand': AncestorTitlesBrand,
            'episode': AncestorTitlesEpisode,
            'series': List[AncestorTitlesBrand]
        }

        self.attribute_map = {
            'brand': 'brand',
            'episode': 'episode',
            'series': 'series'
        }

        self._brand = brand
        self._episode = episode
        self._series = series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AncestorTitles':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ancestor_titles of this AncestorTitles.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this AncestorTitles.


        :return: The brand of this AncestorTitles.
        :rtype: AncestorTitlesBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this AncestorTitles.


        :param brand: The brand of this AncestorTitles.
        :type brand: AncestorTitlesBrand
        """

        self._brand = brand

    @property
    def episode(self):
        """Gets the episode of this AncestorTitles.


        :return: The episode of this AncestorTitles.
        :rtype: AncestorTitlesEpisode
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this AncestorTitles.


        :param episode: The episode of this AncestorTitles.
        :type episode: AncestorTitlesEpisode
        """

        self._episode = episode

    @property
    def series(self):
        """Gets the series of this AncestorTitles.


        :return: The series of this AncestorTitles.
        :rtype: List[AncestorTitlesBrand]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this AncestorTitles.


        :param series: The series of this AncestorTitles.
        :type series: List[AncestorTitlesBrand]
        """
        if series is not None and len(series) > 5:
            raise ValueError("Invalid value for `series`, number of items must be less than or equal to `5`")

        self._series = series
