# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.images_mixin_images_image_images import ImagesMixinImagesImageImages
from openapi_server.models.images_mixin_images_image_images_image_inherited_from import ImagesMixinImagesImageImagesImageInheritedFrom
from openapi_server import util


class ImagesMixinImagesImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, images: ImagesMixinImagesImageImages=None, inherited_from: ImagesMixinImagesImageImagesImageInheritedFrom=None, template_url: str=None, type: str=None):
        """ImagesMixinImagesImage - a model defined in OpenAPI

        :param href: The href of this ImagesMixinImagesImage.
        :param images: The images of this ImagesMixinImagesImage.
        :param inherited_from: The inherited_from of this ImagesMixinImagesImage.
        :param template_url: The template_url of this ImagesMixinImagesImage.
        :param type: The type of this ImagesMixinImagesImage.
        """
        self.openapi_types = {
            'href': str,
            'images': ImagesMixinImagesImageImages,
            'inherited_from': ImagesMixinImagesImageImagesImageInheritedFrom,
            'template_url': str,
            'type': str
        }

        self.attribute_map = {
            'href': 'href',
            'images': 'images',
            'inherited_from': 'inherited_from',
            'template_url': 'template_url',
            'type': 'type'
        }

        self._href = href
        self._images = images
        self._inherited_from = inherited_from
        self._template_url = template_url
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImagesMixinImagesImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The images_mixin_images_image of this ImagesMixinImagesImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this ImagesMixinImagesImage.


        :return: The href of this ImagesMixinImagesImage.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ImagesMixinImagesImage.


        :param href: The href of this ImagesMixinImagesImage.
        :type href: str
        """

        self._href = href

    @property
    def images(self):
        """Gets the images of this ImagesMixinImagesImage.


        :return: The images of this ImagesMixinImagesImage.
        :rtype: ImagesMixinImagesImageImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ImagesMixinImagesImage.


        :param images: The images of this ImagesMixinImagesImage.
        :type images: ImagesMixinImagesImageImages
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def inherited_from(self):
        """Gets the inherited_from of this ImagesMixinImagesImage.


        :return: The inherited_from of this ImagesMixinImagesImage.
        :rtype: ImagesMixinImagesImageImagesImageInheritedFrom
        """
        return self._inherited_from

    @inherited_from.setter
    def inherited_from(self, inherited_from):
        """Sets the inherited_from of this ImagesMixinImagesImage.


        :param inherited_from: The inherited_from of this ImagesMixinImagesImage.
        :type inherited_from: ImagesMixinImagesImageImagesImageInheritedFrom
        """

        self._inherited_from = inherited_from

    @property
    def template_url(self):
        """Gets the template_url of this ImagesMixinImagesImage.


        :return: The template_url of this ImagesMixinImagesImage.
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this ImagesMixinImagesImage.


        :param template_url: The template_url of this ImagesMixinImagesImage.
        :type template_url: str
        """
        if template_url is None:
            raise ValueError("Invalid value for `template_url`, must not be `None`")

        self._template_url = template_url

    @property
    def type(self):
        """Gets the type of this ImagesMixinImagesImage.


        :return: The type of this ImagesMixinImagesImage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImagesMixinImagesImage.


        :param type: The type of this ImagesMixinImagesImage.
        :type type: str
        """

        self._type = type
