# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.availability_mixin_availability_inner_version_types_version_type_inner_version_type_inner import AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInnerVersionTypeInner
from openapi_server import util


class AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: datetime=None, id: str=None, start: datetime=None, version_type: List[AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInnerVersionTypeInner]=None):
        """AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner - a model defined in OpenAPI

        :param end: The end of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :param id: The id of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :param start: The start of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :param version_type: The version_type of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        """
        self.openapi_types = {
            'end': datetime,
            'id': str,
            'start': datetime,
            'version_type': List[AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInnerVersionTypeInner]
        }

        self.attribute_map = {
            'end': 'end',
            'id': 'id',
            'start': 'start',
            'version_type': 'version_type'
        }

        self._end = end
        self._id = id
        self._start = start
        self._version_type = version_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availability_mixin_availability_inner_version_types_version_type_inner of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :return: The end of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :param end: The end of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :type end: datetime
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :return: The id of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :param id: The id of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :type id: str
        """

        self._id = id

    @property
    def start(self):
        """Gets the start of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :return: The start of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :param start: The start of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :type start: datetime
        """

        self._start = start

    @property
    def version_type(self):
        """Gets the version_type of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :return: The version_type of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :rtype: List[AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInnerVersionTypeInner]
        """
        return self._version_type

    @version_type.setter
    def version_type(self, version_type):
        """Sets the version_type of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.


        :param version_type: The version_type of this AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInner.
        :type version_type: List[AvailabilityMixinAvailabilityInnerVersionTypesVersionTypeInnerVersionTypeInner]
        """
        if version_type is None:
            raise ValueError("Invalid value for `version_type`, must not be `None`")
        if version_type is not None and len(version_type) < 1:
            raise ValueError("Invalid value for `version_type`, number of items must be greater than or equal to `1`")

        self._version_type = version_type
