# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_types_with_id_version_types_version_type_inner_version_types import VersionTypesWithIdVersionTypesVersionTypeInnerVersionTypes
from openapi_server import util


class VersionTypesWithIdVersionTypesVersionTypeInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version_types: VersionTypesWithIdVersionTypesVersionTypeInnerVersionTypes=None):
        """VersionTypesWithIdVersionTypesVersionTypeInner - a model defined in OpenAPI

        :param id: The id of this VersionTypesWithIdVersionTypesVersionTypeInner.
        :param version_types: The version_types of this VersionTypesWithIdVersionTypesVersionTypeInner.
        """
        self.openapi_types = {
            'id': str,
            'version_types': VersionTypesWithIdVersionTypesVersionTypeInnerVersionTypes
        }

        self.attribute_map = {
            'id': 'id',
            'version_types': 'version_types'
        }

        self._id = id
        self._version_types = version_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionTypesWithIdVersionTypesVersionTypeInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_types_with_id_version_types_version_type_inner of this VersionTypesWithIdVersionTypesVersionTypeInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VersionTypesWithIdVersionTypesVersionTypeInner.


        :return: The id of this VersionTypesWithIdVersionTypesVersionTypeInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VersionTypesWithIdVersionTypesVersionTypeInner.


        :param id: The id of this VersionTypesWithIdVersionTypesVersionTypeInner.
        :type id: str
        """

        self._id = id

    @property
    def version_types(self):
        """Gets the version_types of this VersionTypesWithIdVersionTypesVersionTypeInner.


        :return: The version_types of this VersionTypesWithIdVersionTypesVersionTypeInner.
        :rtype: VersionTypesWithIdVersionTypesVersionTypeInnerVersionTypes
        """
        return self._version_types

    @version_types.setter
    def version_types(self, version_types):
        """Sets the version_types of this VersionTypesWithIdVersionTypesVersionTypeInner.


        :param version_types: The version_types of this VersionTypesWithIdVersionTypesVersionTypeInner.
        :type version_types: VersionTypesWithIdVersionTypesVersionTypeInnerVersionTypes
        """
        if version_types is None:
            raise ValueError("Invalid value for `version_types`, must not be `None`")

        self._version_types = version_types
