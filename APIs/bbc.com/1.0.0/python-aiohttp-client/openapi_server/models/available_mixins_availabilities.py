# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_mixins_availabilities_availabilities import AvailableMixinsAvailabilitiesAvailabilities
from openapi_server.models.available_mixins_availabilities_availabilities_availability_inner import AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner
from openapi_server import util


class AvailableMixinsAvailabilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availabilities: AvailableMixinsAvailabilitiesAvailabilities=None, availability: List[AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner]=None, type: str=None):
        """AvailableMixinsAvailabilities - a model defined in OpenAPI

        :param availabilities: The availabilities of this AvailableMixinsAvailabilities.
        :param availability: The availability of this AvailableMixinsAvailabilities.
        :param type: The type of this AvailableMixinsAvailabilities.
        """
        self.openapi_types = {
            'availabilities': AvailableMixinsAvailabilitiesAvailabilities,
            'availability': List[AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner],
            'type': str
        }

        self.attribute_map = {
            'availabilities': 'availabilities',
            'availability': 'availability',
            'type': 'type'
        }

        self._availabilities = availabilities
        self._availability = availability
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableMixinsAvailabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The available_mixins_availabilities of this AvailableMixinsAvailabilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availabilities(self):
        """Gets the availabilities of this AvailableMixinsAvailabilities.


        :return: The availabilities of this AvailableMixinsAvailabilities.
        :rtype: AvailableMixinsAvailabilitiesAvailabilities
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this AvailableMixinsAvailabilities.


        :param availabilities: The availabilities of this AvailableMixinsAvailabilities.
        :type availabilities: AvailableMixinsAvailabilitiesAvailabilities
        """
        if availabilities is None:
            raise ValueError("Invalid value for `availabilities`, must not be `None`")

        self._availabilities = availabilities

    @property
    def availability(self):
        """Gets the availability of this AvailableMixinsAvailabilities.


        :return: The availability of this AvailableMixinsAvailabilities.
        :rtype: List[AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AvailableMixinsAvailabilities.


        :param availability: The availability of this AvailableMixinsAvailabilities.
        :type availability: List[AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner]
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")
        if availability is not None and len(availability) < 1:
            raise ValueError("Invalid value for `availability`, number of items must be greater than or equal to `1`")

        self._availability = availability

    @property
    def type(self):
        """Gets the type of this AvailableMixinsAvailabilities.


        :return: The type of this AvailableMixinsAvailabilities.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AvailableMixinsAvailabilities.


        :param type: The type of this AvailableMixinsAvailabilities.
        :type type: str
        """

        self._type = type
