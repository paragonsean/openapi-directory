# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_versions_element import AvailableVersionsElement
from openapi_server import util


class AvailableSimulcasts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: int=None, available_versions_element: AvailableVersionsElement=None):
        """AvailableSimulcasts - a model defined in OpenAPI

        :param available: The available of this AvailableSimulcasts.
        :param available_versions_element: The available_versions_element of this AvailableSimulcasts.
        """
        self.openapi_types = {
            'available': int,
            'available_versions_element': AvailableVersionsElement
        }

        self.attribute_map = {
            'available': 'available',
            'available_versions_element': 'available_versions_element'
        }

        self._available = available
        self._available_versions_element = available_versions_element

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableSimulcasts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The available_simulcasts of this AvailableSimulcasts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this AvailableSimulcasts.


        :return: The available of this AvailableSimulcasts.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this AvailableSimulcasts.


        :param available: The available of this AvailableSimulcasts.
        :type available: int
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def available_versions_element(self):
        """Gets the available_versions_element of this AvailableSimulcasts.


        :return: The available_versions_element of this AvailableSimulcasts.
        :rtype: AvailableVersionsElement
        """
        return self._available_versions_element

    @available_versions_element.setter
    def available_versions_element(self, available_versions_element):
        """Sets the available_versions_element of this AvailableSimulcasts.


        :param available_versions_element: The available_versions_element of this AvailableSimulcasts.
        :type available_versions_element: AvailableVersionsElement
        """
        if available_versions_element is None:
            raise ValueError("Invalid value for `available_versions_element`, must not be `None`")

        self._available_versions_element = available_versions_element
