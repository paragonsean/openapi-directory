# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributor_name import ContributorName
from openapi_server.models.contributor_to import ContributorTo
from openapi_server.models.identifiers import Identifiers
from openapi_server.models.ids import Ids
import re
from openapi_server import util


class Contributor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributor_name: ContributorName=None, contributor_to: List[ContributorTo]=None, disambiguation: str=None, href: str=None, identifiers: Identifiers=None, ids: Ids=None, partner: str=None, pid: str=None, type: str=None):
        """Contributor - a model defined in OpenAPI

        :param contributor_name: The contributor_name of this Contributor.
        :param contributor_to: The contributor_to of this Contributor.
        :param disambiguation: The disambiguation of this Contributor.
        :param href: The href of this Contributor.
        :param identifiers: The identifiers of this Contributor.
        :param ids: The ids of this Contributor.
        :param partner: The partner of this Contributor.
        :param pid: The pid of this Contributor.
        :param type: The type of this Contributor.
        """
        self.openapi_types = {
            'contributor_name': ContributorName,
            'contributor_to': List[ContributorTo],
            'disambiguation': str,
            'href': str,
            'identifiers': Identifiers,
            'ids': Ids,
            'partner': str,
            'pid': str,
            'type': str
        }

        self.attribute_map = {
            'contributor_name': 'contributor_name',
            'contributor_to': 'contributor_to',
            'disambiguation': 'disambiguation',
            'href': 'href',
            'identifiers': 'identifiers',
            'ids': 'ids',
            'partner': 'partner',
            'pid': 'pid',
            'type': 'type'
        }

        self._contributor_name = contributor_name
        self._contributor_to = contributor_to
        self._disambiguation = disambiguation
        self._href = href
        self._identifiers = identifiers
        self._ids = ids
        self._partner = partner
        self._pid = pid
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contributor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contributor of this Contributor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributor_name(self):
        """Gets the contributor_name of this Contributor.


        :return: The contributor_name of this Contributor.
        :rtype: ContributorName
        """
        return self._contributor_name

    @contributor_name.setter
    def contributor_name(self, contributor_name):
        """Sets the contributor_name of this Contributor.


        :param contributor_name: The contributor_name of this Contributor.
        :type contributor_name: ContributorName
        """

        self._contributor_name = contributor_name

    @property
    def contributor_to(self):
        """Gets the contributor_to of this Contributor.


        :return: The contributor_to of this Contributor.
        :rtype: List[ContributorTo]
        """
        return self._contributor_to

    @contributor_to.setter
    def contributor_to(self, contributor_to):
        """Sets the contributor_to of this Contributor.


        :param contributor_to: The contributor_to of this Contributor.
        :type contributor_to: List[ContributorTo]
        """

        self._contributor_to = contributor_to

    @property
    def disambiguation(self):
        """Gets the disambiguation of this Contributor.


        :return: The disambiguation of this Contributor.
        :rtype: str
        """
        return self._disambiguation

    @disambiguation.setter
    def disambiguation(self, disambiguation):
        """Sets the disambiguation of this Contributor.


        :param disambiguation: The disambiguation of this Contributor.
        :type disambiguation: str
        """

        self._disambiguation = disambiguation

    @property
    def href(self):
        """Gets the href of this Contributor.


        :return: The href of this Contributor.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Contributor.


        :param href: The href of this Contributor.
        :type href: str
        """

        self._href = href

    @property
    def identifiers(self):
        """Gets the identifiers of this Contributor.


        :return: The identifiers of this Contributor.
        :rtype: Identifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Contributor.


        :param identifiers: The identifiers of this Contributor.
        :type identifiers: Identifiers
        """

        self._identifiers = identifiers

    @property
    def ids(self):
        """Gets the ids of this Contributor.


        :return: The ids of this Contributor.
        :rtype: Ids
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Contributor.


        :param ids: The ids of this Contributor.
        :type ids: Ids
        """

        self._ids = ids

    @property
    def partner(self):
        """Gets the partner of this Contributor.


        :return: The partner of this Contributor.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Contributor.


        :param partner: The partner of this Contributor.
        :type partner: str
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")
        if partner is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', partner):
            raise ValueError("Invalid value for `partner`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._partner = partner

    @property
    def pid(self):
        """Gets the pid of this Contributor.


        :return: The pid of this Contributor.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Contributor.


        :param pid: The pid of this Contributor.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def type(self):
        """Gets the type of this Contributor.


        :return: The type of this Contributor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Contributor.


        :param type: The type of this Contributor.
        :type type: str
        """

        self._type = type
