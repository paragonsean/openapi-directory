# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_mixins_availabilities import AvailableMixinsAvailabilities
from openapi_server import util


class AvailableMixins(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availabilities: AvailableMixinsAvailabilities=None):
        """AvailableMixins - a model defined in OpenAPI

        :param availabilities: The availabilities of this AvailableMixins.
        """
        self.openapi_types = {
            'availabilities': AvailableMixinsAvailabilities
        }

        self.attribute_map = {
            'availabilities': 'availabilities'
        }

        self._availabilities = availabilities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableMixins':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The available_mixins of this AvailableMixins.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availabilities(self):
        """Gets the availabilities of this AvailableMixins.


        :return: The availabilities of this AvailableMixins.
        :rtype: AvailableMixinsAvailabilities
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this AvailableMixins.


        :param availabilities: The availabilities of this AvailableMixins.
        :type availabilities: AvailableMixinsAvailabilities
        """
        if availabilities is None:
            raise ValueError("Invalid value for `availabilities`, must not be `None`")

        self._availabilities = availabilities
