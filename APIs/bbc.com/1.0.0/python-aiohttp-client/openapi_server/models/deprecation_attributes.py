# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeprecationAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated: bool=None, deprecated_since: str=None, replaced_by: str=None):
        """DeprecationAttributes - a model defined in OpenAPI

        :param deprecated: The deprecated of this DeprecationAttributes.
        :param deprecated_since: The deprecated_since of this DeprecationAttributes.
        :param replaced_by: The replaced_by of this DeprecationAttributes.
        """
        self.openapi_types = {
            'deprecated': bool,
            'deprecated_since': str,
            'replaced_by': str
        }

        self.attribute_map = {
            'deprecated': 'deprecated',
            'deprecated_since': 'deprecated_since',
            'replaced_by': 'replaced_by'
        }

        self._deprecated = deprecated
        self._deprecated_since = deprecated_since
        self._replaced_by = replaced_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeprecationAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deprecationAttributes of this DeprecationAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated(self):
        """Gets the deprecated of this DeprecationAttributes.


        :return: The deprecated of this DeprecationAttributes.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this DeprecationAttributes.


        :param deprecated: The deprecated of this DeprecationAttributes.
        :type deprecated: bool
        """
        if deprecated is None:
            raise ValueError("Invalid value for `deprecated`, must not be `None`")

        self._deprecated = deprecated

    @property
    def deprecated_since(self):
        """Gets the deprecated_since of this DeprecationAttributes.


        :return: The deprecated_since of this DeprecationAttributes.
        :rtype: str
        """
        return self._deprecated_since

    @deprecated_since.setter
    def deprecated_since(self, deprecated_since):
        """Sets the deprecated_since of this DeprecationAttributes.


        :param deprecated_since: The deprecated_since of this DeprecationAttributes.
        :type deprecated_since: str
        """
        if deprecated_since is None:
            raise ValueError("Invalid value for `deprecated_since`, must not be `None`")
        if deprecated_since is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$', deprecated_since):
            raise ValueError("Invalid value for `deprecated_since`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$/`")

        self._deprecated_since = deprecated_since

    @property
    def replaced_by(self):
        """Gets the replaced_by of this DeprecationAttributes.


        :return: The replaced_by of this DeprecationAttributes.
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this DeprecationAttributes.


        :param replaced_by: The replaced_by of this DeprecationAttributes.
        :type replaced_by: str
        """
        if replaced_by is None:
            raise ValueError("Invalid value for `replaced_by`, must not be `None`")

        self._replaced_by = replaced_by
