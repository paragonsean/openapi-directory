# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_simulcasts import AvailableSimulcasts
from openapi_server.models.available_versions import AvailableVersions
from openapi_server.models.available_webcasts import AvailableWebcasts
from openapi_server.models.versions import Versions
from openapi_server import util


class VersionsMixin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_simulcasts: AvailableSimulcasts=None, available_versions: AvailableVersions=None, available_webcasts: AvailableWebcasts=None, versions: List[Versions]=None):
        """VersionsMixin - a model defined in OpenAPI

        :param available_simulcasts: The available_simulcasts of this VersionsMixin.
        :param available_versions: The available_versions of this VersionsMixin.
        :param available_webcasts: The available_webcasts of this VersionsMixin.
        :param versions: The versions of this VersionsMixin.
        """
        self.openapi_types = {
            'available_simulcasts': AvailableSimulcasts,
            'available_versions': AvailableVersions,
            'available_webcasts': AvailableWebcasts,
            'versions': List[Versions]
        }

        self.attribute_map = {
            'available_simulcasts': 'available_simulcasts',
            'available_versions': 'available_versions',
            'available_webcasts': 'available_webcasts',
            'versions': 'versions'
        }

        self._available_simulcasts = available_simulcasts
        self._available_versions = available_versions
        self._available_webcasts = available_webcasts
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionsMixin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The versions_mixin of this VersionsMixin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_simulcasts(self):
        """Gets the available_simulcasts of this VersionsMixin.


        :return: The available_simulcasts of this VersionsMixin.
        :rtype: AvailableSimulcasts
        """
        return self._available_simulcasts

    @available_simulcasts.setter
    def available_simulcasts(self, available_simulcasts):
        """Sets the available_simulcasts of this VersionsMixin.


        :param available_simulcasts: The available_simulcasts of this VersionsMixin.
        :type available_simulcasts: AvailableSimulcasts
        """

        self._available_simulcasts = available_simulcasts

    @property
    def available_versions(self):
        """Gets the available_versions of this VersionsMixin.


        :return: The available_versions of this VersionsMixin.
        :rtype: AvailableVersions
        """
        return self._available_versions

    @available_versions.setter
    def available_versions(self, available_versions):
        """Sets the available_versions of this VersionsMixin.


        :param available_versions: The available_versions of this VersionsMixin.
        :type available_versions: AvailableVersions
        """

        self._available_versions = available_versions

    @property
    def available_webcasts(self):
        """Gets the available_webcasts of this VersionsMixin.


        :return: The available_webcasts of this VersionsMixin.
        :rtype: AvailableWebcasts
        """
        return self._available_webcasts

    @available_webcasts.setter
    def available_webcasts(self, available_webcasts):
        """Sets the available_webcasts of this VersionsMixin.


        :param available_webcasts: The available_webcasts of this VersionsMixin.
        :type available_webcasts: AvailableWebcasts
        """

        self._available_webcasts = available_webcasts

    @property
    def versions(self):
        """Gets the versions of this VersionsMixin.


        :return: The versions of this VersionsMixin.
        :rtype: List[Versions]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this VersionsMixin.


        :param versions: The versions of this VersionsMixin.
        :type versions: List[Versions]
        """

        self._versions = versions
