# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_availability_availability import VersionAvailabilityAvailability
from openapi_server import util


class VersionAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: VersionAvailabilityAvailability=None):
        """VersionAvailability - a model defined in OpenAPI

        :param availability: The availability of this VersionAvailability.
        """
        self.openapi_types = {
            'availability': VersionAvailabilityAvailability
        }

        self.attribute_map = {
            'availability': 'availability'
        }

        self._availability = availability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The version_availability of this VersionAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this VersionAvailability.


        :return: The availability of this VersionAvailability.
        :rtype: VersionAvailabilityAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this VersionAvailability.


        :param availability: The availability of this VersionAvailability.
        :type availability: VersionAvailabilityAvailability
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")

        self._availability = availability
