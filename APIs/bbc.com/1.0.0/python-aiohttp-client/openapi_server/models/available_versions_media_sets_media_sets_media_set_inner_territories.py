# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_versions_media_sets_media_sets_media_set_inner_territories_media_sets import AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritoriesMediaSets
from openapi_server import util


class AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_sets: AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritoriesMediaSets=None, territory: List[str]=None):
        """AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories - a model defined in OpenAPI

        :param media_sets: The media_sets of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        :param territory: The territory of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        """
        self.openapi_types = {
            'media_sets': AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritoriesMediaSets,
            'territory': List[str]
        }

        self.attribute_map = {
            'media_sets': 'media_sets',
            'territory': 'territory'
        }

        self._media_sets = media_sets
        self._territory = territory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The available_versions_media_sets_media_sets_media_set_inner_territories of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_sets(self):
        """Gets the media_sets of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.


        :return: The media_sets of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        :rtype: AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritoriesMediaSets
        """
        return self._media_sets

    @media_sets.setter
    def media_sets(self, media_sets):
        """Sets the media_sets of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.


        :param media_sets: The media_sets of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        :type media_sets: AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritoriesMediaSets
        """

        self._media_sets = media_sets

    @property
    def territory(self):
        """Gets the territory of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.


        :return: The territory of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        :rtype: List[str]
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.


        :param territory: The territory of this AvailableVersionsMediaSetsMediaSetsMediaSetInnerTerritories.
        :type territory: List[str]
        """

        self._territory = territory
