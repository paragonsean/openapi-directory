# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.previous_next_mixin_previous_next import PreviousNextMixinPreviousNext
from openapi_server import util


class PreviousNextMixin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, previous_next: PreviousNextMixinPreviousNext=None):
        """PreviousNextMixin - a model defined in OpenAPI

        :param previous_next: The previous_next of this PreviousNextMixin.
        """
        self.openapi_types = {
            'previous_next': PreviousNextMixinPreviousNext
        }

        self.attribute_map = {
            'previous_next': 'previous_next'
        }

        self._previous_next = previous_next

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreviousNextMixin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The previous_next_mixin of this PreviousNextMixin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def previous_next(self):
        """Gets the previous_next of this PreviousNextMixin.


        :return: The previous_next of this PreviousNextMixin.
        :rtype: PreviousNextMixinPreviousNext
        """
        return self._previous_next

    @previous_next.setter
    def previous_next(self, previous_next):
        """Sets the previous_next of this PreviousNextMixin.


        :param previous_next: The previous_next of this PreviousNextMixin.
        :type previous_next: PreviousNextMixinPreviousNext
        """
        if previous_next is None:
            raise ValueError("Invalid value for `previous_next`, must not be `None`")

        self._previous_next = previous_next
