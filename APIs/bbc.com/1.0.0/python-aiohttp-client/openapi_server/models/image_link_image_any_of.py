# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_link_image_any_of_image import ImageLinkImageAnyOfImage
import re
from openapi_server import util


class ImageLinkImageAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: ImageLinkImageAnyOfImage=None, pid: str=None, template_url: str=None):
        """ImageLinkImageAnyOf - a model defined in OpenAPI

        :param image: The image of this ImageLinkImageAnyOf.
        :param pid: The pid of this ImageLinkImageAnyOf.
        :param template_url: The template_url of this ImageLinkImageAnyOf.
        """
        self.openapi_types = {
            'image': ImageLinkImageAnyOfImage,
            'pid': str,
            'template_url': str
        }

        self.attribute_map = {
            'image': 'image',
            'pid': 'pid',
            'template_url': 'template_url'
        }

        self._image = image
        self._pid = pid
        self._template_url = template_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageLinkImageAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The image_link_image_anyOf of this ImageLinkImageAnyOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this ImageLinkImageAnyOf.


        :return: The image of this ImageLinkImageAnyOf.
        :rtype: ImageLinkImageAnyOfImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageLinkImageAnyOf.


        :param image: The image of this ImageLinkImageAnyOf.
        :type image: ImageLinkImageAnyOfImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def pid(self):
        """Gets the pid of this ImageLinkImageAnyOf.


        :return: The pid of this ImageLinkImageAnyOf.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ImageLinkImageAnyOf.


        :param pid: The pid of this ImageLinkImageAnyOf.
        :type pid: str
        """
        if pid is not None and not re.search(r'([a-z0-9\.\-]+|.*PID.*)', pid):
            raise ValueError("Invalid value for `pid`, must be a follow pattern or equal to `/([a-z0-9\.\-]+|.*PID.*)/`")

        self._pid = pid

    @property
    def template_url(self):
        """Gets the template_url of this ImageLinkImageAnyOf.


        :return: The template_url of this ImageLinkImageAnyOf.
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this ImageLinkImageAnyOf.


        :param template_url: The template_url of this ImageLinkImageAnyOf.
        :type template_url: str
        """
        if template_url is None:
            raise ValueError("Invalid value for `template_url`, must not be `None`")

        self._template_url = template_url
