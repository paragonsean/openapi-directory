/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import java.time.LocalDate;
import org.openapitools.client.model.Nitro;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeedsApi
 */
@Disabled
public class FeedsApiTest {

    private final FeedsApi api = new FeedsApi();

    /**
     * Discover details of on-demand availability for programmes and their versions
     *
     * Discover details of on-demand availability for programmes and their versions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailabilityTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> availability = null;
        List<String> descendantsOf = null;
        List<String> mediaSet = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> territory = null;
        Boolean debug = null;
        Nitro response = api.listAvailability(sort, sortDirection, availability, descendantsOf, mediaSet, page, pageSize, territory, debug);
        // TODO: test validations
    }

    /**
     * Build schedules and find metadata for TV and radio broadcasts
     *
     * Fetch metadata about linear Broadcasts and Services, allowing the generation of Television and Radio schedules and other datasets for broadcast items. Use /schedules instead of this feed as it is more efficient. Broadcasts will be deprecated in the future.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBroadcastsTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> mixin = null;
        List<String> authority = null;
        List<String> descendantsOf = null;
        OffsetDateTime endFrom = null;
        OffsetDateTime endTo = null;
        List<String> format = null;
        List<String> genre = null;
        List<String> id = null;
        List<String> item = null;
        Integer page = null;
        Integer pageSize = null;
        String people = null;
        List<String> pid = null;
        String q = null;
        LocalDate scheduleDay = null;
        LocalDate scheduleDayFrom = null;
        LocalDate scheduleDayTo = null;
        List<String> serviceMasterBrand = null;
        List<String> sid = null;
        OffsetDateTime startFrom = null;
        OffsetDateTime startTo = null;
        List<String> version = null;
        Nitro response = api.listBroadcasts(sort, sortDirection, mixin, authority, descendantsOf, endFrom, endTo, format, genre, id, item, page, pageSize, people, pid, q, scheduleDay, scheduleDayFrom, scheduleDayTo, serviceMasterBrand, sid, startFrom, startTo, version);
        // TODO: test validations
    }

    /**
     * Find metadata for curated groups: seasons, collections, galleries or franchises
     *
     * Long-lived curated collections of programmes and more, including Collections, Seasons, Franchises and Galleries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> mixin = null;
        String forDescendantsOf = null;
        String forProgramme = null;
        String group = null;
        List<String> groupType = null;
        String member = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        List<String> pid = null;
        String q = null;
        String embargoed = null;
        Nitro response = api.listGroups(sort, sortDirection, mixin, forDescendantsOf, forProgramme, group, groupType, member, page, pageSize, partnerId, partnerPid, pid, q, embargoed);
        // TODO: test validations
    }

    /**
     * Find metadata for images
     *
     * Find metadata for images, particularly those in galleries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImagesTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        String group = null;
        List<String> imageType = null;
        String isAlternateImageFor = null;
        String isImageFor = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        List<String> pid = null;
        String q = null;
        String embargoed = null;
        Nitro response = api.listImages(sort, sortDirection, group, imageType, isAlternateImageFor, isImageFor, page, pageSize, partnerId, partnerPid, pid, q, embargoed);
        // TODO: test validations
    }

    /**
     * Look inside programmes to find segments: chapters, tracks and more
     *
     * Look inside programmes to find segments: chapters, tracks and more
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listItemsTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> mixin = null;
        String authority = null;
        List<String> id = null;
        String idType = null;
        List<String> itemType = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        String people = null;
        List<String> pid = null;
        String programme = null;
        String q = null;
        String segmentEvent = null;
        Nitro response = api.listItems(sort, sortDirection, mixin, authority, id, idType, itemType, page, pageSize, partnerId, partnerPid, people, pid, programme, q, segmentEvent);
        // TODO: test validations
    }

    /**
     * List all Master Brands
     *
     * List all Master Brands
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMasterbrandsTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> mixin = null;
        List<String> mid = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        String q = null;
        Nitro response = api.listMasterbrands(sort, sortDirection, mixin, mid, page, pageSize, partnerId, partnerPid, q);
        // TODO: test validations
    }

    /**
     * Find the people behind and in programmes: cast, crew, guests and more
     *
     * The People feed allows you to search for the people and groups that contribute to programmes. This is the starting point for cast and crew credits, as well as finding contributors using external IDs (such as Wikipedia URLs)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPeopleTest() throws ApiException {
        String authority = null;
        List<String> hasExternalId = null;
        List<String> id = null;
        String idType = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        List<String> pid = null;
        String programme = null;
        String q = null;
        Nitro response = api.listPeople(authority, hasExternalId, id, idType, page, pageSize, partnerId, partnerPid, pid, programme, q);
        // TODO: test validations
    }

    /**
     * Look inside pips entities
     *
     * Look inside pips entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPipsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String q = null;
        Nitro response = api.listPips(page, pageSize, q);
        // TODO: test validations
    }

    /**
     * Exposes programme information for a single pid
     *
     * Exposes programme information for a single pid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProgrammeDetailsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String partnerPid = null;
        String pid = null;
        Nitro response = api.listProgrammeDetails(page, pageSize, partnerPid, pid);
        // TODO: test validations
    }

    /**
     * Start here for programmes metadata: Brands, Series, Episodes and Clips
     *
     * Fetch metadata about Programmes (brands, series, episodes, clips). By applying different filter restrictions this feed can be used in many ways, for example to retrieve all series belonging to a brand, all the episodes and/or clips for a specific series, or any TLEO objects for a masterbrand. Other filters permit restricting to specific formats and/or genres, and you can request specific versions (for example Signed or Audio-Described). Parameters may be combined in any way suitable for your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProgrammesTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> mixin = null;
        List<String> audioDescribed = null;
        List<String> availability = null;
        List<String> availabilityEntityType = null;
        OffsetDateTime availabilityFrom = null;
        List<String> availabilityType = null;
        List<String> childrenOf = null;
        List<String> descendantsOf = null;
        List<String> duration = null;
        List<String> entityType = null;
        List<String> format = null;
        List<String> genre = null;
        String group = null;
        String initialLetter = null;
        String initialLetterEnd = null;
        String initialLetterStart = null;
        List<String> initialLetterStrict = null;
        List<String> item = null;
        List<String> masterBrand = null;
        String mediaSet = null;
        List<String> mediaType = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        List<String> paymentType = null;
        String people = null;
        List<String> pid = null;
        String promotedFor = null;
        String q = null;
        List<String> signed = null;
        String tagName = null;
        String tagScheme = null;
        List<String> tleo = null;
        List<String> version = null;
        String embargoed = null;
        Nitro response = api.listProgrammes(sort, sortDirection, mixin, audioDescribed, availability, availabilityEntityType, availabilityFrom, availabilityType, childrenOf, descendantsOf, duration, entityType, format, genre, group, initialLetter, initialLetterEnd, initialLetterStart, initialLetterStrict, item, masterBrand, mediaSet, mediaType, page, pageSize, partnerId, partnerPid, paymentType, people, pid, promotedFor, q, signed, tagName, tagScheme, tleo, version, embargoed);
        // TODO: test validations
    }

    /**
     * Discover metadata for content promotions
     *
     * Details of short-term editorially curated \&quot;promotions\&quot;, for instance those programmes featured on iPlayer today
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPromotionsTest() throws ApiException {
        List<String> mixin = null;
        String context = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        List<String> pid = null;
        List<String> promotedBy = null;
        List<String> promotedFor = null;
        String q = null;
        List<String> status = null;
        Nitro response = api.listPromotions(mixin, context, page, pageSize, partnerId, partnerPid, pid, promotedBy, promotedFor, q, status);
        // TODO: test validations
    }

    /**
     * Build schedules and find metadata for TV and radio broadcasts and webcasts
     *
     * Dates, Times, Schedules: when and where are programmes being shown?
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchedulesTest() throws ApiException {
        String sort = null;
        String sortDirection = null;
        List<String> mixin = null;
        List<String> authority = null;
        List<String> descendantsOf = null;
        OffsetDateTime endFrom = null;
        OffsetDateTime endTo = null;
        List<String> format = null;
        List<String> genre = null;
        String group = null;
        List<String> id = null;
        List<String> idType = null;
        List<String> item = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        String people = null;
        List<String> pid = null;
        String q = null;
        Boolean repeat = null;
        LocalDate scheduleDay = null;
        LocalDate scheduleDayFrom = null;
        LocalDate scheduleDayTo = null;
        List<String> serviceMasterBrand = null;
        List<String> sid = null;
        OffsetDateTime startFrom = null;
        OffsetDateTime startTo = null;
        List<String> version = null;
        Nitro response = api.listSchedules(sort, sortDirection, mixin, authority, descendantsOf, endFrom, endTo, format, genre, group, id, idType, item, page, pageSize, partnerId, partnerPid, people, pid, q, repeat, scheduleDay, scheduleDayFrom, scheduleDayTo, serviceMasterBrand, sid, startFrom, startTo, version);
        // TODO: test validations
    }

    /**
     * Information about the linear services used for broadcast transmissions
     *
     * The services feed exposes the linear broadcast \&quot;services\&quot; from PIPs. These are the actual services which broadcast programmes (eg bbc_one_oxford is the service for BBC One in Oxford).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServicesTest() throws ApiException {
        OffsetDateTime endFrom = null;
        OffsetDateTime endTo = null;
        List<String> mid = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        String q = null;
        List<String> serviceType = null;
        List<String> sid = null;
        OffsetDateTime startFrom = null;
        OffsetDateTime startTo = null;
        Nitro response = api.listServices(endFrom, endTo, mid, page, pageSize, partnerId, partnerPid, q, serviceType, sid, startFrom, startTo);
        // TODO: test validations
    }

    /**
     * Metadata on editorial programme versions: original, signed, audio-described, etc
     *
     * The versions feed exposes editorial \&quot;Versions\&quot; of programmes. These are concepts used to capture different presentations of an overall programme: for example, versions of a programme may include one with sign language, one with audio description, one edited for content and more. Versions are also important to understand for broadcasts: a linear broadcast or an ondemand is always of a specific version, not merely of a programme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVersionsTest() throws ApiException {
        List<String> availability = null;
        List<String> descendantsOf = null;
        List<String> mediaSet = null;
        Integer page = null;
        Integer pageSize = null;
        List<String> partnerId = null;
        List<String> partnerPid = null;
        List<String> paymentType = null;
        List<String> pid = null;
        String embargoed = null;
        Nitro response = api.listVersions(availability, descendantsOf, mediaSet, page, pageSize, partnerId, partnerPid, paymentType, pid, embargoed);
        // TODO: test validations
    }

}
