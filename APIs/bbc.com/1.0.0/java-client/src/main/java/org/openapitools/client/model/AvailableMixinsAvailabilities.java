/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailableMixinsAvailabilitiesAvailabilities;
import org.openapitools.client.model.AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AvailableMixinsAvailabilities
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableMixinsAvailabilities {
  public static final String SERIALIZED_NAME_AVAILABILITIES = "availabilities";
  @SerializedName(SERIALIZED_NAME_AVAILABILITIES)
  private AvailableMixinsAvailabilitiesAvailabilities availabilities;

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private List<AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner> availability = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AvailableMixinsAvailabilities() {
  }

  public AvailableMixinsAvailabilities availabilities(AvailableMixinsAvailabilitiesAvailabilities availabilities) {
    this.availabilities = availabilities;
    return this;
  }

  /**
   * Get availabilities
   * @return availabilities
   */
  @javax.annotation.Nonnull
  public AvailableMixinsAvailabilitiesAvailabilities getAvailabilities() {
    return availabilities;
  }

  public void setAvailabilities(AvailableMixinsAvailabilitiesAvailabilities availabilities) {
    this.availabilities = availabilities;
  }


  public AvailableMixinsAvailabilities availability(List<AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner> availability) {
    this.availability = availability;
    return this;
  }

  public AvailableMixinsAvailabilities addAvailabilityItem(AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

  /**
   * Get availability
   * @return availability
   */
  @javax.annotation.Nonnull
  public List<AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner> getAvailability() {
    return availability;
  }

  public void setAvailability(List<AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner> availability) {
    this.availability = availability;
  }


  public AvailableMixinsAvailabilities type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableMixinsAvailabilities availableMixinsAvailabilities = (AvailableMixinsAvailabilities) o;
    return Objects.equals(this.availabilities, availableMixinsAvailabilities.availabilities) &&
        Objects.equals(this.availability, availableMixinsAvailabilities.availability) &&
        Objects.equals(this.type, availableMixinsAvailabilities.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilities, availability, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableMixinsAvailabilities {\n");
    sb.append("    availabilities: ").append(toIndentedString(availabilities)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilities");
    openapiFields.add("availability");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availabilities");
    openapiRequiredFields.add("availability");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableMixinsAvailabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableMixinsAvailabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableMixinsAvailabilities is not found in the empty JSON string", AvailableMixinsAvailabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableMixinsAvailabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableMixinsAvailabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailableMixinsAvailabilities.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `availabilities`
      AvailableMixinsAvailabilitiesAvailabilities.validateJsonElement(jsonObj.get("availabilities"));
      // ensure the json data is an array
      if (!jsonObj.get("availability").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be an array in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }

      JsonArray jsonArrayavailability = jsonObj.getAsJsonArray("availability");
      // validate the required field `availability` (array)
      for (int i = 0; i < jsonArrayavailability.size(); i++) {
        AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.validateJsonElement(jsonArrayavailability.get(i));
      };
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableMixinsAvailabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableMixinsAvailabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableMixinsAvailabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableMixinsAvailabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableMixinsAvailabilities>() {
           @Override
           public void write(JsonWriter out, AvailableMixinsAvailabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableMixinsAvailabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableMixinsAvailabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableMixinsAvailabilities
   * @throws IOException if the JSON string is invalid with respect to AvailableMixinsAvailabilities
   */
  public static AvailableMixinsAvailabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableMixinsAvailabilities.class);
  }

  /**
   * Convert an instance of AvailableMixinsAvailabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

