/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailabilityDebug;
import org.openapitools.client.model.AvailabilityOf;
import org.openapitools.client.model.AvailabilityType;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.ScheduledTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Availability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Availability {
  public static final String SERIALIZED_NAME_ACCURATE_PROGRAMME_TIME = "accurate_programme_time";
  @SerializedName(SERIALIZED_NAME_ACCURATE_PROGRAMME_TIME)
  private DateRange accurateProgrammeTime;

  public static final String SERIALIZED_NAME_ACTUAL_START = "actual_start";
  @SerializedName(SERIALIZED_NAME_ACTUAL_START)
  private OffsetDateTime actualStart;

  public static final String SERIALIZED_NAME_AVAILABILITY_DEBUG = "availability-debug";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_DEBUG)
  private AvailabilityDebug availabilityDebug;

  public static final String SERIALIZED_NAME_AVAILABILITY_OF = "availability_of";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_OF)
  private List<AvailabilityOf> availabilityOf = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABILITY_TYPE = "availability_type";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_TYPE)
  private AvailabilityType availabilityType;

  public static final String SERIALIZED_NAME_MEDIA_AVAILABILITY_TIME = "media_availability_time";
  @SerializedName(SERIALIZED_NAME_MEDIA_AVAILABILITY_TIME)
  private DateRange mediaAvailabilityTime;

  public static final String SERIALIZED_NAME_MEDIA_SET = "media_set";
  @SerializedName(SERIALIZED_NAME_MEDIA_SET)
  private List<String> mediaSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVOCATION_STATUS = "revocation_status";
  @SerializedName(SERIALIZED_NAME_REVOCATION_STATUS)
  private String revocationStatus;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduled_time";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private ScheduledTime scheduledTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Availability() {
  }

  public Availability accurateProgrammeTime(DateRange accurateProgrammeTime) {
    this.accurateProgrammeTime = accurateProgrammeTime;
    return this;
  }

  /**
   * Get accurateProgrammeTime
   * @return accurateProgrammeTime
   */
  @javax.annotation.Nullable
  public DateRange getAccurateProgrammeTime() {
    return accurateProgrammeTime;
  }

  public void setAccurateProgrammeTime(DateRange accurateProgrammeTime) {
    this.accurateProgrammeTime = accurateProgrammeTime;
  }


  public Availability actualStart(OffsetDateTime actualStart) {
    this.actualStart = actualStart;
    return this;
  }

  /**
   * Get actualStart
   * @return actualStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualStart() {
    return actualStart;
  }

  public void setActualStart(OffsetDateTime actualStart) {
    this.actualStart = actualStart;
  }


  public Availability availabilityDebug(AvailabilityDebug availabilityDebug) {
    this.availabilityDebug = availabilityDebug;
    return this;
  }

  /**
   * Get availabilityDebug
   * @return availabilityDebug
   */
  @javax.annotation.Nullable
  public AvailabilityDebug getAvailabilityDebug() {
    return availabilityDebug;
  }

  public void setAvailabilityDebug(AvailabilityDebug availabilityDebug) {
    this.availabilityDebug = availabilityDebug;
  }


  public Availability availabilityOf(List<AvailabilityOf> availabilityOf) {
    this.availabilityOf = availabilityOf;
    return this;
  }

  public Availability addAvailabilityOfItem(AvailabilityOf availabilityOfItem) {
    if (this.availabilityOf == null) {
      this.availabilityOf = new ArrayList<>();
    }
    this.availabilityOf.add(availabilityOfItem);
    return this;
  }

  /**
   * Get availabilityOf
   * @return availabilityOf
   */
  @javax.annotation.Nullable
  public List<AvailabilityOf> getAvailabilityOf() {
    return availabilityOf;
  }

  public void setAvailabilityOf(List<AvailabilityOf> availabilityOf) {
    this.availabilityOf = availabilityOf;
  }


  public Availability availabilityType(AvailabilityType availabilityType) {
    this.availabilityType = availabilityType;
    return this;
  }

  /**
   * Get availabilityType
   * @return availabilityType
   */
  @javax.annotation.Nonnull
  public AvailabilityType getAvailabilityType() {
    return availabilityType;
  }

  public void setAvailabilityType(AvailabilityType availabilityType) {
    this.availabilityType = availabilityType;
  }


  public Availability mediaAvailabilityTime(DateRange mediaAvailabilityTime) {
    this.mediaAvailabilityTime = mediaAvailabilityTime;
    return this;
  }

  /**
   * Get mediaAvailabilityTime
   * @return mediaAvailabilityTime
   */
  @javax.annotation.Nullable
  public DateRange getMediaAvailabilityTime() {
    return mediaAvailabilityTime;
  }

  public void setMediaAvailabilityTime(DateRange mediaAvailabilityTime) {
    this.mediaAvailabilityTime = mediaAvailabilityTime;
  }


  public Availability mediaSet(List<String> mediaSet) {
    this.mediaSet = mediaSet;
    return this;
  }

  public Availability addMediaSetItem(String mediaSetItem) {
    if (this.mediaSet == null) {
      this.mediaSet = new ArrayList<>();
    }
    this.mediaSet.add(mediaSetItem);
    return this;
  }

  /**
   * Get mediaSet
   * @return mediaSet
   */
  @javax.annotation.Nullable
  public List<String> getMediaSet() {
    return mediaSet;
  }

  public void setMediaSet(List<String> mediaSet) {
    this.mediaSet = mediaSet;
  }


  public Availability revocationStatus(String revocationStatus) {
    this.revocationStatus = revocationStatus;
    return this;
  }

  /**
   * Get revocationStatus
   * @return revocationStatus
   */
  @javax.annotation.Nullable
  public String getRevocationStatus() {
    return revocationStatus;
  }

  public void setRevocationStatus(String revocationStatus) {
    this.revocationStatus = revocationStatus;
  }


  public Availability scheduledTime(ScheduledTime scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Get scheduledTime
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public ScheduledTime getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(ScheduledTime scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public Availability status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Availability availability = (Availability) o;
    return Objects.equals(this.accurateProgrammeTime, availability.accurateProgrammeTime) &&
        Objects.equals(this.actualStart, availability.actualStart) &&
        Objects.equals(this.availabilityDebug, availability.availabilityDebug) &&
        Objects.equals(this.availabilityOf, availability.availabilityOf) &&
        Objects.equals(this.availabilityType, availability.availabilityType) &&
        Objects.equals(this.mediaAvailabilityTime, availability.mediaAvailabilityTime) &&
        Objects.equals(this.mediaSet, availability.mediaSet) &&
        Objects.equals(this.revocationStatus, availability.revocationStatus) &&
        Objects.equals(this.scheduledTime, availability.scheduledTime) &&
        Objects.equals(this.status, availability.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accurateProgrammeTime, actualStart, availabilityDebug, availabilityOf, availabilityType, mediaAvailabilityTime, mediaSet, revocationStatus, scheduledTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Availability {\n");
    sb.append("    accurateProgrammeTime: ").append(toIndentedString(accurateProgrammeTime)).append("\n");
    sb.append("    actualStart: ").append(toIndentedString(actualStart)).append("\n");
    sb.append("    availabilityDebug: ").append(toIndentedString(availabilityDebug)).append("\n");
    sb.append("    availabilityOf: ").append(toIndentedString(availabilityOf)).append("\n");
    sb.append("    availabilityType: ").append(toIndentedString(availabilityType)).append("\n");
    sb.append("    mediaAvailabilityTime: ").append(toIndentedString(mediaAvailabilityTime)).append("\n");
    sb.append("    mediaSet: ").append(toIndentedString(mediaSet)).append("\n");
    sb.append("    revocationStatus: ").append(toIndentedString(revocationStatus)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accurate_programme_time");
    openapiFields.add("actual_start");
    openapiFields.add("availability-debug");
    openapiFields.add("availability_of");
    openapiFields.add("availability_type");
    openapiFields.add("media_availability_time");
    openapiFields.add("media_set");
    openapiFields.add("revocation_status");
    openapiFields.add("scheduled_time");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availability_type");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Availability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Availability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Availability is not found in the empty JSON string", Availability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Availability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Availability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Availability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accurate_programme_time`
      if (jsonObj.get("accurate_programme_time") != null && !jsonObj.get("accurate_programme_time").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("accurate_programme_time"));
      }
      // validate the optional field `availability-debug`
      if (jsonObj.get("availability-debug") != null && !jsonObj.get("availability-debug").isJsonNull()) {
        AvailabilityDebug.validateJsonElement(jsonObj.get("availability-debug"));
      }
      if (jsonObj.get("availability_of") != null && !jsonObj.get("availability_of").isJsonNull()) {
        JsonArray jsonArrayavailabilityOf = jsonObj.getAsJsonArray("availability_of");
        if (jsonArrayavailabilityOf != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability_of").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability_of` to be an array in the JSON string but got `%s`", jsonObj.get("availability_of").toString()));
          }

          // validate the optional field `availability_of` (array)
          for (int i = 0; i < jsonArrayavailabilityOf.size(); i++) {
            AvailabilityOf.validateJsonElement(jsonArrayavailabilityOf.get(i));
          };
        }
      }
      // validate the required field `availability_type`
      AvailabilityType.validateJsonElement(jsonObj.get("availability_type"));
      // validate the optional field `media_availability_time`
      if (jsonObj.get("media_availability_time") != null && !jsonObj.get("media_availability_time").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("media_availability_time"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("media_set") != null && !jsonObj.get("media_set").isJsonNull() && !jsonObj.get("media_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_set` to be an array in the JSON string but got `%s`", jsonObj.get("media_set").toString()));
      }
      if ((jsonObj.get("revocation_status") != null && !jsonObj.get("revocation_status").isJsonNull()) && !jsonObj.get("revocation_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocation_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocation_status").toString()));
      }
      // validate the optional field `scheduled_time`
      if (jsonObj.get("scheduled_time") != null && !jsonObj.get("scheduled_time").isJsonNull()) {
        ScheduledTime.validateJsonElement(jsonObj.get("scheduled_time"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Availability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Availability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Availability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Availability.class));

       return (TypeAdapter<T>) new TypeAdapter<Availability>() {
           @Override
           public void write(JsonWriter out, Availability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Availability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Availability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Availability
   * @throws IOException if the JSON string is invalid with respect to Availability
   */
  public static Availability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Availability.class);
  }

  /**
   * Convert an instance of Availability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

