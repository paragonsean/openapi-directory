/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Deprecations;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Mixins;
import org.openapitools.client.model.ReleaseStatusType;
import org.openapitools.client.model.Sorts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Feed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feed {
  public static final String SERIALIZED_NAME_DEPRECATIONS = "deprecations";
  @SerializedName(SERIALIZED_NAME_DEPRECATIONS)
  private Deprecations deprecations;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Filters filters;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_MIXINS = "mixins";
  @SerializedName(SERIALIZED_NAME_MIXINS)
  private Mixins mixins;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REL = "rel";
  @SerializedName(SERIALIZED_NAME_REL)
  private String rel;

  public static final String SERIALIZED_NAME_RELEASE_STATUS = "release_status";
  @SerializedName(SERIALIZED_NAME_RELEASE_STATUS)
  private ReleaseStatusType releaseStatus;

  public static final String SERIALIZED_NAME_SORTS = "sorts";
  @SerializedName(SERIALIZED_NAME_SORTS)
  private Sorts sorts;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Feed() {
  }

  public Feed deprecations(Deprecations deprecations) {
    this.deprecations = deprecations;
    return this;
  }

  /**
   * Get deprecations
   * @return deprecations
   */
  @javax.annotation.Nullable
  public Deprecations getDeprecations() {
    return deprecations;
  }

  public void setDeprecations(Deprecations deprecations) {
    this.deprecations = deprecations;
  }


  public Feed filters(Filters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public Filters getFilters() {
    return filters;
  }

  public void setFilters(Filters filters) {
    this.filters = filters;
  }


  public Feed href(String href) {
    this.href = href;
    return this;
  }

  /**
   * Get href
   * @return href
   */
  @javax.annotation.Nonnull
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public Feed mixins(Mixins mixins) {
    this.mixins = mixins;
    return this;
  }

  /**
   * Get mixins
   * @return mixins
   */
  @javax.annotation.Nullable
  public Mixins getMixins() {
    return mixins;
  }

  public void setMixins(Mixins mixins) {
    this.mixins = mixins;
  }


  public Feed name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Feed rel(String rel) {
    this.rel = rel;
    return this;
  }

  /**
   * Get rel
   * @return rel
   */
  @javax.annotation.Nonnull
  public String getRel() {
    return rel;
  }

  public void setRel(String rel) {
    this.rel = rel;
  }


  public Feed releaseStatus(ReleaseStatusType releaseStatus) {
    this.releaseStatus = releaseStatus;
    return this;
  }

  /**
   * Get releaseStatus
   * @return releaseStatus
   */
  @javax.annotation.Nullable
  public ReleaseStatusType getReleaseStatus() {
    return releaseStatus;
  }

  public void setReleaseStatus(ReleaseStatusType releaseStatus) {
    this.releaseStatus = releaseStatus;
  }


  public Feed sorts(Sorts sorts) {
    this.sorts = sorts;
    return this;
  }

  /**
   * Get sorts
   * @return sorts
   */
  @javax.annotation.Nullable
  public Sorts getSorts() {
    return sorts;
  }

  public void setSorts(Sorts sorts) {
    this.sorts = sorts;
  }


  public Feed title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feed feed = (Feed) o;
    return Objects.equals(this.deprecations, feed.deprecations) &&
        Objects.equals(this.filters, feed.filters) &&
        Objects.equals(this.href, feed.href) &&
        Objects.equals(this.mixins, feed.mixins) &&
        Objects.equals(this.name, feed.name) &&
        Objects.equals(this.rel, feed.rel) &&
        Objects.equals(this.releaseStatus, feed.releaseStatus) &&
        Objects.equals(this.sorts, feed.sorts) &&
        Objects.equals(this.title, feed.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecations, filters, href, mixins, name, rel, releaseStatus, sorts, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feed {\n");
    sb.append("    deprecations: ").append(toIndentedString(deprecations)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    mixins: ").append(toIndentedString(mixins)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rel: ").append(toIndentedString(rel)).append("\n");
    sb.append("    releaseStatus: ").append(toIndentedString(releaseStatus)).append("\n");
    sb.append("    sorts: ").append(toIndentedString(sorts)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecations");
    openapiFields.add("filters");
    openapiFields.add("href");
    openapiFields.add("mixins");
    openapiFields.add("name");
    openapiFields.add("rel");
    openapiFields.add("release_status");
    openapiFields.add("sorts");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("href");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("rel");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feed is not found in the empty JSON string", Feed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Feed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deprecations`
      if (jsonObj.get("deprecations") != null && !jsonObj.get("deprecations").isJsonNull()) {
        Deprecations.validateJsonElement(jsonObj.get("deprecations"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        Filters.validateJsonElement(jsonObj.get("filters"));
      }
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `mixins`
      if (jsonObj.get("mixins") != null && !jsonObj.get("mixins").isJsonNull()) {
        Mixins.validateJsonElement(jsonObj.get("mixins"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("rel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rel").toString()));
      }
      // validate the optional field `release_status`
      if (jsonObj.get("release_status") != null && !jsonObj.get("release_status").isJsonNull()) {
        ReleaseStatusType.validateJsonElement(jsonObj.get("release_status"));
      }
      // validate the optional field `sorts`
      if (jsonObj.get("sorts") != null && !jsonObj.get("sorts").isJsonNull()) {
        Sorts.validateJsonElement(jsonObj.get("sorts"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feed.class));

       return (TypeAdapter<T>) new TypeAdapter<Feed>() {
           @Override
           public void write(JsonWriter out, Feed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feed
   * @throws IOException if the JSON string is invalid with respect to Feed
   */
  public static Feed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feed.class);
  }

  /**
   * Convert an instance of Feed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

