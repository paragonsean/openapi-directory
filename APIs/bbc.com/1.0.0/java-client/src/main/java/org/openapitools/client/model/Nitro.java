/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Deprecations;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Mixins;
import org.openapitools.client.model.Pagination;
import org.openapitools.client.model.Results;
import org.openapitools.client.model.Sorts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Nitro
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Nitro {
  public static final String SERIALIZED_NAME_DEPRECATIONS = "deprecations";
  @SerializedName(SERIALIZED_NAME_DEPRECATIONS)
  private Deprecations deprecations;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Filters filters;

  public static final String SERIALIZED_NAME_MIXINS = "mixins";
  @SerializedName(SERIALIZED_NAME_MIXINS)
  private Mixins mixins;

  public static final String SERIALIZED_NAME_PAGINATION = "pagination";
  @SerializedName(SERIALIZED_NAME_PAGINATION)
  private Pagination pagination;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private Results results;

  public static final String SERIALIZED_NAME_SORTS = "sorts";
  @SerializedName(SERIALIZED_NAME_SORTS)
  private Sorts sorts;

  public Nitro() {
  }

  public Nitro deprecations(Deprecations deprecations) {
    this.deprecations = deprecations;
    return this;
  }

  /**
   * Get deprecations
   * @return deprecations
   */
  @javax.annotation.Nullable
  public Deprecations getDeprecations() {
    return deprecations;
  }

  public void setDeprecations(Deprecations deprecations) {
    this.deprecations = deprecations;
  }


  public Nitro filters(Filters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public Filters getFilters() {
    return filters;
  }

  public void setFilters(Filters filters) {
    this.filters = filters;
  }


  public Nitro mixins(Mixins mixins) {
    this.mixins = mixins;
    return this;
  }

  /**
   * Get mixins
   * @return mixins
   */
  @javax.annotation.Nullable
  public Mixins getMixins() {
    return mixins;
  }

  public void setMixins(Mixins mixins) {
    this.mixins = mixins;
  }


  public Nitro pagination(Pagination pagination) {
    this.pagination = pagination;
    return this;
  }

  /**
   * Get pagination
   * @return pagination
   */
  @javax.annotation.Nullable
  public Pagination getPagination() {
    return pagination;
  }

  public void setPagination(Pagination pagination) {
    this.pagination = pagination;
  }


  public Nitro results(Results results) {
    this.results = results;
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public Results getResults() {
    return results;
  }

  public void setResults(Results results) {
    this.results = results;
  }


  public Nitro sorts(Sorts sorts) {
    this.sorts = sorts;
    return this;
  }

  /**
   * Get sorts
   * @return sorts
   */
  @javax.annotation.Nullable
  public Sorts getSorts() {
    return sorts;
  }

  public void setSorts(Sorts sorts) {
    this.sorts = sorts;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Nitro instance itself
   */
  public Nitro putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Nitro nitro = (Nitro) o;
    return Objects.equals(this.deprecations, nitro.deprecations) &&
        Objects.equals(this.filters, nitro.filters) &&
        Objects.equals(this.mixins, nitro.mixins) &&
        Objects.equals(this.pagination, nitro.pagination) &&
        Objects.equals(this.results, nitro.results) &&
        Objects.equals(this.sorts, nitro.sorts)&&
        Objects.equals(this.additionalProperties, nitro.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecations, filters, mixins, pagination, results, sorts, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Nitro {\n");
    sb.append("    deprecations: ").append(toIndentedString(deprecations)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    mixins: ").append(toIndentedString(mixins)).append("\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    sorts: ").append(toIndentedString(sorts)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecations");
    openapiFields.add("filters");
    openapiFields.add("mixins");
    openapiFields.add("pagination");
    openapiFields.add("results");
    openapiFields.add("sorts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Nitro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Nitro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Nitro is not found in the empty JSON string", Nitro.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deprecations`
      if (jsonObj.get("deprecations") != null && !jsonObj.get("deprecations").isJsonNull()) {
        Deprecations.validateJsonElement(jsonObj.get("deprecations"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        Filters.validateJsonElement(jsonObj.get("filters"));
      }
      // validate the optional field `mixins`
      if (jsonObj.get("mixins") != null && !jsonObj.get("mixins").isJsonNull()) {
        Mixins.validateJsonElement(jsonObj.get("mixins"));
      }
      // validate the optional field `pagination`
      if (jsonObj.get("pagination") != null && !jsonObj.get("pagination").isJsonNull()) {
        Pagination.validateJsonElement(jsonObj.get("pagination"));
      }
      // validate the optional field `results`
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        Results.validateJsonElement(jsonObj.get("results"));
      }
      // validate the optional field `sorts`
      if (jsonObj.get("sorts") != null && !jsonObj.get("sorts").isJsonNull()) {
        Sorts.validateJsonElement(jsonObj.get("sorts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Nitro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Nitro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Nitro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Nitro.class));

       return (TypeAdapter<T>) new TypeAdapter<Nitro>() {
           @Override
           public void write(JsonWriter out, Nitro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Nitro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Nitro instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Nitro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Nitro
   * @throws IOException if the JSON string is invalid with respect to Nitro
   */
  public static Nitro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Nitro.class);
  }

  /**
   * Convert an instance of Nitro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

