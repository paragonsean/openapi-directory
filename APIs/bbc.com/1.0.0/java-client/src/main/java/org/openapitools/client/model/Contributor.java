/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContributorName;
import org.openapitools.client.model.ContributorTo;
import org.openapitools.client.model.Identifiers;
import org.openapitools.client.model.Ids;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contributor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Contributor {
  public static final String SERIALIZED_NAME_CONTRIBUTOR_NAME = "contributor_name";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_NAME)
  private ContributorName contributorName;

  public static final String SERIALIZED_NAME_CONTRIBUTOR_TO = "contributor_to";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_TO)
  private List<ContributorTo> contributorTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISAMBIGUATION = "disambiguation";
  @SerializedName(SERIALIZED_NAME_DISAMBIGUATION)
  private String disambiguation;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Identifiers identifiers;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private Ids ids;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Contributor() {
  }

  public Contributor contributorName(ContributorName contributorName) {
    this.contributorName = contributorName;
    return this;
  }

  /**
   * Get contributorName
   * @return contributorName
   */
  @javax.annotation.Nullable
  public ContributorName getContributorName() {
    return contributorName;
  }

  public void setContributorName(ContributorName contributorName) {
    this.contributorName = contributorName;
  }


  public Contributor contributorTo(List<ContributorTo> contributorTo) {
    this.contributorTo = contributorTo;
    return this;
  }

  public Contributor addContributorToItem(ContributorTo contributorToItem) {
    if (this.contributorTo == null) {
      this.contributorTo = new ArrayList<>();
    }
    this.contributorTo.add(contributorToItem);
    return this;
  }

  /**
   * Get contributorTo
   * @return contributorTo
   */
  @javax.annotation.Nullable
  public List<ContributorTo> getContributorTo() {
    return contributorTo;
  }

  public void setContributorTo(List<ContributorTo> contributorTo) {
    this.contributorTo = contributorTo;
  }


  public Contributor disambiguation(String disambiguation) {
    this.disambiguation = disambiguation;
    return this;
  }

  /**
   * Get disambiguation
   * @return disambiguation
   */
  @javax.annotation.Nullable
  public String getDisambiguation() {
    return disambiguation;
  }

  public void setDisambiguation(String disambiguation) {
    this.disambiguation = disambiguation;
  }


  public Contributor href(String href) {
    this.href = href;
    return this;
  }

  /**
   * Get href
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public Contributor identifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Identifiers getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
  }


  public Contributor ids(Ids ids) {
    this.ids = ids;
    return this;
  }

  /**
   * Get ids
   * @return ids
   */
  @javax.annotation.Nullable
  public Ids getIds() {
    return ids;
  }

  public void setIds(Ids ids) {
    this.ids = ids;
  }


  public Contributor partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nonnull
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public Contributor pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public Contributor type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contributor contributor = (Contributor) o;
    return Objects.equals(this.contributorName, contributor.contributorName) &&
        Objects.equals(this.contributorTo, contributor.contributorTo) &&
        Objects.equals(this.disambiguation, contributor.disambiguation) &&
        Objects.equals(this.href, contributor.href) &&
        Objects.equals(this.identifiers, contributor.identifiers) &&
        Objects.equals(this.ids, contributor.ids) &&
        Objects.equals(this.partner, contributor.partner) &&
        Objects.equals(this.pid, contributor.pid) &&
        Objects.equals(this.type, contributor.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contributorName, contributorTo, disambiguation, href, identifiers, ids, partner, pid, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contributor {\n");
    sb.append("    contributorName: ").append(toIndentedString(contributorName)).append("\n");
    sb.append("    contributorTo: ").append(toIndentedString(contributorTo)).append("\n");
    sb.append("    disambiguation: ").append(toIndentedString(disambiguation)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contributor_name");
    openapiFields.add("contributor_to");
    openapiFields.add("disambiguation");
    openapiFields.add("href");
    openapiFields.add("identifiers");
    openapiFields.add("ids");
    openapiFields.add("partner");
    openapiFields.add("pid");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("partner");
    openapiRequiredFields.add("pid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Contributor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Contributor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contributor is not found in the empty JSON string", Contributor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Contributor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Contributor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Contributor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contributor_name`
      if (jsonObj.get("contributor_name") != null && !jsonObj.get("contributor_name").isJsonNull()) {
        ContributorName.validateJsonElement(jsonObj.get("contributor_name"));
      }
      if (jsonObj.get("contributor_to") != null && !jsonObj.get("contributor_to").isJsonNull()) {
        JsonArray jsonArraycontributorTo = jsonObj.getAsJsonArray("contributor_to");
        if (jsonArraycontributorTo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contributor_to").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contributor_to` to be an array in the JSON string but got `%s`", jsonObj.get("contributor_to").toString()));
          }

          // validate the optional field `contributor_to` (array)
          for (int i = 0; i < jsonArraycontributorTo.size(); i++) {
            ContributorTo.validateJsonElement(jsonArraycontributorTo.get(i));
          };
        }
      }
      if ((jsonObj.get("disambiguation") != null && !jsonObj.get("disambiguation").isJsonNull()) && !jsonObj.get("disambiguation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disambiguation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disambiguation").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        Identifiers.validateJsonElement(jsonObj.get("identifiers"));
      }
      // validate the optional field `ids`
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) {
        Ids.validateJsonElement(jsonObj.get("ids"));
      }
      if (!jsonObj.get("partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner").toString()));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contributor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contributor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contributor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contributor.class));

       return (TypeAdapter<T>) new TypeAdapter<Contributor>() {
           @Override
           public void write(JsonWriter out, Contributor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Contributor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Contributor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Contributor
   * @throws IOException if the JSON string is invalid with respect to Contributor
   */
  public static Contributor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contributor.class);
  }

  /**
   * Convert an instance of Contributor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

