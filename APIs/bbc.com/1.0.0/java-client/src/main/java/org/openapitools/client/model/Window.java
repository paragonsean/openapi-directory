/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AncestorTitles;
import org.openapitools.client.model.AncestorsTitles;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.Identifiers;
import org.openapitools.client.model.Ids;
import org.openapitools.client.model.ImageLink;
import org.openapitools.client.model.ImagesMixin;
import org.openapitools.client.model.PidReference;
import org.openapitools.client.model.ScheduledPublicationRights;
import org.openapitools.client.model.ScheduledTime;
import org.openapitools.client.model.ServiceReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Window
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Window {
  public static final String SERIALIZED_NAME_ACCURATE_PROGRAMME_TIME = "accurate_programme_time";
  @SerializedName(SERIALIZED_NAME_ACCURATE_PROGRAMME_TIME)
  private DateRange accurateProgrammeTime;

  public static final String SERIALIZED_NAME_ANCESTOR_TITLES = "ancestor_titles";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_TITLES)
  private AncestorTitles ancestorTitles;

  public static final String SERIALIZED_NAME_ANCESTORS_TITLES = "ancestors_titles";
  @SerializedName(SERIALIZED_NAME_ANCESTORS_TITLES)
  private AncestorsTitles ancestorsTitles;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Identifiers identifiers;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private Ids ids;

  public static final String SERIALIZED_NAME_IMAGE_LINK = "image_link";
  @SerializedName(SERIALIZED_NAME_IMAGE_LINK)
  private ImageLink imageLink;

  public static final String SERIALIZED_NAME_IMAGES_MIXIN = "images_mixin";
  @SerializedName(SERIALIZED_NAME_IMAGES_MIXIN)
  private ImagesMixin imagesMixin;

  public static final String SERIALIZED_NAME_MEDIA_AVAILABILITY_TIME = "media_availability_time";
  @SerializedName(SERIALIZED_NAME_MEDIA_AVAILABILITY_TIME)
  private DateRange mediaAvailabilityTime;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_SCHEDULED_PUBLICATION_RIGHTS = "scheduled_publication_rights";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_PUBLICATION_RIGHTS)
  private ScheduledPublicationRights scheduledPublicationRights;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduled_time";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private ScheduledTime scheduledTime;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceReference service;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_WINDOW_OF = "window_of";
  @SerializedName(SERIALIZED_NAME_WINDOW_OF)
  private List<PidReference> windowOf = new ArrayList<>();

  public Window() {
  }

  public Window accurateProgrammeTime(DateRange accurateProgrammeTime) {
    this.accurateProgrammeTime = accurateProgrammeTime;
    return this;
  }

  /**
   * Get accurateProgrammeTime
   * @return accurateProgrammeTime
   */
  @javax.annotation.Nullable
  public DateRange getAccurateProgrammeTime() {
    return accurateProgrammeTime;
  }

  public void setAccurateProgrammeTime(DateRange accurateProgrammeTime) {
    this.accurateProgrammeTime = accurateProgrammeTime;
  }


  public Window ancestorTitles(AncestorTitles ancestorTitles) {
    this.ancestorTitles = ancestorTitles;
    return this;
  }

  /**
   * Get ancestorTitles
   * @return ancestorTitles
   */
  @javax.annotation.Nullable
  public AncestorTitles getAncestorTitles() {
    return ancestorTitles;
  }

  public void setAncestorTitles(AncestorTitles ancestorTitles) {
    this.ancestorTitles = ancestorTitles;
  }


  public Window ancestorsTitles(AncestorsTitles ancestorsTitles) {
    this.ancestorsTitles = ancestorsTitles;
    return this;
  }

  /**
   * Get ancestorsTitles
   * @return ancestorsTitles
   */
  @javax.annotation.Nullable
  public AncestorsTitles getAncestorsTitles() {
    return ancestorsTitles;
  }

  public void setAncestorsTitles(AncestorsTitles ancestorsTitles) {
    this.ancestorsTitles = ancestorsTitles;
  }


  public Window identifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Identifiers getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
  }


  public Window ids(Ids ids) {
    this.ids = ids;
    return this;
  }

  /**
   * Get ids
   * @return ids
   */
  @javax.annotation.Nullable
  public Ids getIds() {
    return ids;
  }

  public void setIds(Ids ids) {
    this.ids = ids;
  }


  public Window imageLink(ImageLink imageLink) {
    this.imageLink = imageLink;
    return this;
  }

  /**
   * Get imageLink
   * @return imageLink
   */
  @javax.annotation.Nullable
  public ImageLink getImageLink() {
    return imageLink;
  }

  public void setImageLink(ImageLink imageLink) {
    this.imageLink = imageLink;
  }


  public Window imagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
    return this;
  }

  /**
   * Get imagesMixin
   * @return imagesMixin
   */
  @javax.annotation.Nullable
  public ImagesMixin getImagesMixin() {
    return imagesMixin;
  }

  public void setImagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
  }


  public Window mediaAvailabilityTime(DateRange mediaAvailabilityTime) {
    this.mediaAvailabilityTime = mediaAvailabilityTime;
    return this;
  }

  /**
   * Get mediaAvailabilityTime
   * @return mediaAvailabilityTime
   */
  @javax.annotation.Nullable
  public DateRange getMediaAvailabilityTime() {
    return mediaAvailabilityTime;
  }

  public void setMediaAvailabilityTime(DateRange mediaAvailabilityTime) {
    this.mediaAvailabilityTime = mediaAvailabilityTime;
  }


  public Window partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nonnull
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public Window pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public Window scheduledPublicationRights(ScheduledPublicationRights scheduledPublicationRights) {
    this.scheduledPublicationRights = scheduledPublicationRights;
    return this;
  }

  /**
   * Get scheduledPublicationRights
   * @return scheduledPublicationRights
   */
  @javax.annotation.Nullable
  public ScheduledPublicationRights getScheduledPublicationRights() {
    return scheduledPublicationRights;
  }

  public void setScheduledPublicationRights(ScheduledPublicationRights scheduledPublicationRights) {
    this.scheduledPublicationRights = scheduledPublicationRights;
  }


  public Window scheduledTime(ScheduledTime scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Get scheduledTime
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public ScheduledTime getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(ScheduledTime scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public Window service(ServiceReference service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public ServiceReference getService() {
    return service;
  }

  public void setService(ServiceReference service) {
    this.service = service;
  }


  public Window updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public Window windowOf(List<PidReference> windowOf) {
    this.windowOf = windowOf;
    return this;
  }

  public Window addWindowOfItem(PidReference windowOfItem) {
    if (this.windowOf == null) {
      this.windowOf = new ArrayList<>();
    }
    this.windowOf.add(windowOfItem);
    return this;
  }

  /**
   * Get windowOf
   * @return windowOf
   */
  @javax.annotation.Nullable
  public List<PidReference> getWindowOf() {
    return windowOf;
  }

  public void setWindowOf(List<PidReference> windowOf) {
    this.windowOf = windowOf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Window window = (Window) o;
    return Objects.equals(this.accurateProgrammeTime, window.accurateProgrammeTime) &&
        Objects.equals(this.ancestorTitles, window.ancestorTitles) &&
        Objects.equals(this.ancestorsTitles, window.ancestorsTitles) &&
        Objects.equals(this.identifiers, window.identifiers) &&
        Objects.equals(this.ids, window.ids) &&
        Objects.equals(this.imageLink, window.imageLink) &&
        Objects.equals(this.imagesMixin, window.imagesMixin) &&
        Objects.equals(this.mediaAvailabilityTime, window.mediaAvailabilityTime) &&
        Objects.equals(this.partner, window.partner) &&
        Objects.equals(this.pid, window.pid) &&
        Objects.equals(this.scheduledPublicationRights, window.scheduledPublicationRights) &&
        Objects.equals(this.scheduledTime, window.scheduledTime) &&
        Objects.equals(this.service, window.service) &&
        Objects.equals(this.updatedTime, window.updatedTime) &&
        Objects.equals(this.windowOf, window.windowOf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accurateProgrammeTime, ancestorTitles, ancestorsTitles, identifiers, ids, imageLink, imagesMixin, mediaAvailabilityTime, partner, pid, scheduledPublicationRights, scheduledTime, service, updatedTime, windowOf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Window {\n");
    sb.append("    accurateProgrammeTime: ").append(toIndentedString(accurateProgrammeTime)).append("\n");
    sb.append("    ancestorTitles: ").append(toIndentedString(ancestorTitles)).append("\n");
    sb.append("    ancestorsTitles: ").append(toIndentedString(ancestorsTitles)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    imageLink: ").append(toIndentedString(imageLink)).append("\n");
    sb.append("    imagesMixin: ").append(toIndentedString(imagesMixin)).append("\n");
    sb.append("    mediaAvailabilityTime: ").append(toIndentedString(mediaAvailabilityTime)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    scheduledPublicationRights: ").append(toIndentedString(scheduledPublicationRights)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    windowOf: ").append(toIndentedString(windowOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accurate_programme_time");
    openapiFields.add("ancestor_titles");
    openapiFields.add("ancestors_titles");
    openapiFields.add("identifiers");
    openapiFields.add("ids");
    openapiFields.add("image_link");
    openapiFields.add("images_mixin");
    openapiFields.add("media_availability_time");
    openapiFields.add("partner");
    openapiFields.add("pid");
    openapiFields.add("scheduled_publication_rights");
    openapiFields.add("scheduled_time");
    openapiFields.add("service");
    openapiFields.add("updated_time");
    openapiFields.add("window_of");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("partner");
    openapiRequiredFields.add("pid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Window
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Window.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Window is not found in the empty JSON string", Window.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Window.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Window` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Window.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accurate_programme_time`
      if (jsonObj.get("accurate_programme_time") != null && !jsonObj.get("accurate_programme_time").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("accurate_programme_time"));
      }
      // validate the optional field `ancestor_titles`
      if (jsonObj.get("ancestor_titles") != null && !jsonObj.get("ancestor_titles").isJsonNull()) {
        AncestorTitles.validateJsonElement(jsonObj.get("ancestor_titles"));
      }
      // validate the optional field `ancestors_titles`
      if (jsonObj.get("ancestors_titles") != null && !jsonObj.get("ancestors_titles").isJsonNull()) {
        AncestorsTitles.validateJsonElement(jsonObj.get("ancestors_titles"));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        Identifiers.validateJsonElement(jsonObj.get("identifiers"));
      }
      // validate the optional field `ids`
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) {
        Ids.validateJsonElement(jsonObj.get("ids"));
      }
      // validate the optional field `image_link`
      if (jsonObj.get("image_link") != null && !jsonObj.get("image_link").isJsonNull()) {
        ImageLink.validateJsonElement(jsonObj.get("image_link"));
      }
      // validate the optional field `images_mixin`
      if (jsonObj.get("images_mixin") != null && !jsonObj.get("images_mixin").isJsonNull()) {
        ImagesMixin.validateJsonElement(jsonObj.get("images_mixin"));
      }
      // validate the optional field `media_availability_time`
      if (jsonObj.get("media_availability_time") != null && !jsonObj.get("media_availability_time").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("media_availability_time"));
      }
      if (!jsonObj.get("partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner").toString()));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      // validate the optional field `scheduled_publication_rights`
      if (jsonObj.get("scheduled_publication_rights") != null && !jsonObj.get("scheduled_publication_rights").isJsonNull()) {
        ScheduledPublicationRights.validateJsonElement(jsonObj.get("scheduled_publication_rights"));
      }
      // validate the optional field `scheduled_time`
      if (jsonObj.get("scheduled_time") != null && !jsonObj.get("scheduled_time").isJsonNull()) {
        ScheduledTime.validateJsonElement(jsonObj.get("scheduled_time"));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        ServiceReference.validateJsonElement(jsonObj.get("service"));
      }
      if (jsonObj.get("window_of") != null && !jsonObj.get("window_of").isJsonNull()) {
        JsonArray jsonArraywindowOf = jsonObj.getAsJsonArray("window_of");
        if (jsonArraywindowOf != null) {
          // ensure the json data is an array
          if (!jsonObj.get("window_of").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `window_of` to be an array in the JSON string but got `%s`", jsonObj.get("window_of").toString()));
          }

          // validate the optional field `window_of` (array)
          for (int i = 0; i < jsonArraywindowOf.size(); i++) {
            PidReference.validateJsonElement(jsonArraywindowOf.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Window.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Window' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Window> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Window.class));

       return (TypeAdapter<T>) new TypeAdapter<Window>() {
           @Override
           public void write(JsonWriter out, Window value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Window read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Window given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Window
   * @throws IOException if the JSON string is invalid with respect to Window
   */
  public static Window fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Window.class);
  }

  /**
   * Convert an instance of Window to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

