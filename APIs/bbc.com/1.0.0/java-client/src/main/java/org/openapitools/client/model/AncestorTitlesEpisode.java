/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AncestorTitlesBrand;
import org.openapitools.client.model.AncestorTitlesEpisodeEpisode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AncestorTitlesEpisode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AncestorTitlesEpisode {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private AncestorTitlesBrand brand;

  public static final String SERIALIZED_NAME_CONTAINERS_TITLE = "containers_title";
  @SerializedName(SERIALIZED_NAME_CONTAINERS_TITLE)
  private String containersTitle;

  public static final String SERIALIZED_NAME_EPISODE = "episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private AncestorTitlesEpisodeEpisode episode;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_PRESENTATION_TITLE = "presentation_title";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_TITLE)
  private String presentationTitle;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private List<AncestorTitlesBrand> series = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public AncestorTitlesEpisode() {
  }

  public AncestorTitlesEpisode brand(AncestorTitlesBrand brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Get brand
   * @return brand
   */
  @javax.annotation.Nullable
  public AncestorTitlesBrand getBrand() {
    return brand;
  }

  public void setBrand(AncestorTitlesBrand brand) {
    this.brand = brand;
  }


  public AncestorTitlesEpisode containersTitle(String containersTitle) {
    this.containersTitle = containersTitle;
    return this;
  }

  /**
   * Get containersTitle
   * @return containersTitle
   */
  @javax.annotation.Nullable
  public String getContainersTitle() {
    return containersTitle;
  }

  public void setContainersTitle(String containersTitle) {
    this.containersTitle = containersTitle;
  }


  public AncestorTitlesEpisode episode(AncestorTitlesEpisodeEpisode episode) {
    this.episode = episode;
    return this;
  }

  /**
   * Get episode
   * @return episode
   */
  @javax.annotation.Nullable
  public AncestorTitlesEpisodeEpisode getEpisode() {
    return episode;
  }

  public void setEpisode(AncestorTitlesEpisodeEpisode episode) {
    this.episode = episode;
  }


  public AncestorTitlesEpisode pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public AncestorTitlesEpisode presentationTitle(String presentationTitle) {
    this.presentationTitle = presentationTitle;
    return this;
  }

  /**
   * Get presentationTitle
   * @return presentationTitle
   */
  @javax.annotation.Nullable
  public String getPresentationTitle() {
    return presentationTitle;
  }

  public void setPresentationTitle(String presentationTitle) {
    this.presentationTitle = presentationTitle;
  }


  public AncestorTitlesEpisode series(List<AncestorTitlesBrand> series) {
    this.series = series;
    return this;
  }

  public AncestorTitlesEpisode addSeriesItem(AncestorTitlesBrand seriesItem) {
    if (this.series == null) {
      this.series = new ArrayList<>();
    }
    this.series.add(seriesItem);
    return this;
  }

  /**
   * Get series
   * @return series
   */
  @javax.annotation.Nullable
  public List<AncestorTitlesBrand> getSeries() {
    return series;
  }

  public void setSeries(List<AncestorTitlesBrand> series) {
    this.series = series;
  }


  public AncestorTitlesEpisode title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AncestorTitlesEpisode ancestorTitlesEpisode = (AncestorTitlesEpisode) o;
    return Objects.equals(this.brand, ancestorTitlesEpisode.brand) &&
        Objects.equals(this.containersTitle, ancestorTitlesEpisode.containersTitle) &&
        Objects.equals(this.episode, ancestorTitlesEpisode.episode) &&
        Objects.equals(this.pid, ancestorTitlesEpisode.pid) &&
        Objects.equals(this.presentationTitle, ancestorTitlesEpisode.presentationTitle) &&
        Objects.equals(this.series, ancestorTitlesEpisode.series) &&
        Objects.equals(this.title, ancestorTitlesEpisode.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, containersTitle, episode, pid, presentationTitle, series, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AncestorTitlesEpisode {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    containersTitle: ").append(toIndentedString(containersTitle)).append("\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    presentationTitle: ").append(toIndentedString(presentationTitle)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("containers_title");
    openapiFields.add("episode");
    openapiFields.add("pid");
    openapiFields.add("presentation_title");
    openapiFields.add("series");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AncestorTitlesEpisode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AncestorTitlesEpisode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AncestorTitlesEpisode is not found in the empty JSON string", AncestorTitlesEpisode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AncestorTitlesEpisode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AncestorTitlesEpisode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AncestorTitlesEpisode.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `brand`
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
        AncestorTitlesBrand.validateJsonElement(jsonObj.get("brand"));
      }
      if ((jsonObj.get("containers_title") != null && !jsonObj.get("containers_title").isJsonNull()) && !jsonObj.get("containers_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containers_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containers_title").toString()));
      }
      // validate the optional field `episode`
      if (jsonObj.get("episode") != null && !jsonObj.get("episode").isJsonNull()) {
        AncestorTitlesEpisodeEpisode.validateJsonElement(jsonObj.get("episode"));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if ((jsonObj.get("presentation_title") != null && !jsonObj.get("presentation_title").isJsonNull()) && !jsonObj.get("presentation_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentation_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentation_title").toString()));
      }
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
        if (jsonArrayseries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("series").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `series` to be an array in the JSON string but got `%s`", jsonObj.get("series").toString()));
          }

          // validate the optional field `series` (array)
          for (int i = 0; i < jsonArrayseries.size(); i++) {
            AncestorTitlesBrand.validateJsonElement(jsonArrayseries.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AncestorTitlesEpisode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AncestorTitlesEpisode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AncestorTitlesEpisode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AncestorTitlesEpisode.class));

       return (TypeAdapter<T>) new TypeAdapter<AncestorTitlesEpisode>() {
           @Override
           public void write(JsonWriter out, AncestorTitlesEpisode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AncestorTitlesEpisode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AncestorTitlesEpisode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AncestorTitlesEpisode
   * @throws IOException if the JSON string is invalid with respect to AncestorTitlesEpisode
   */
  public static AncestorTitlesEpisode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AncestorTitlesEpisode.class);
  }

  /**
   * Convert an instance of AncestorTitlesEpisode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

