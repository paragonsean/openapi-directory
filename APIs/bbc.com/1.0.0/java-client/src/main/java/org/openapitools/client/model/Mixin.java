/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AffectedBy;
import org.openapitools.client.model.DependencyOn;
import org.openapitools.client.model.Prohibits;
import org.openapitools.client.model.ReleaseStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Mixin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mixin {
  public static final String SERIALIZED_NAME_AFFECTED_BY = "affected_by";
  @SerializedName(SERIALIZED_NAME_AFFECTED_BY)
  private List<AffectedBy> affectedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPENDENCY_ON = "dependency_on";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_ON)
  private List<DependencyOn> dependencyOn = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPENDS_ON = "depends_on";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private String dependsOn;

  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DEPRECATED_SINCE = "deprecated_since";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_SINCE)
  private String deprecatedSince;

  public static final String SERIALIZED_NAME_GUARANTEED_UNTIL = "guaranteed_until";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_UNTIL)
  private String guaranteedUntil;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROHIBITS = "prohibits";
  @SerializedName(SERIALIZED_NAME_PROHIBITS)
  private List<Prohibits> prohibits = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASE_STATUS = "release_status";
  @SerializedName(SERIALIZED_NAME_RELEASE_STATUS)
  private ReleaseStatusType releaseStatus;

  public static final String SERIALIZED_NAME_REPLACED_BY = "replaced_by";
  @SerializedName(SERIALIZED_NAME_REPLACED_BY)
  private String replacedBy;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Mixin() {
  }

  public Mixin affectedBy(List<AffectedBy> affectedBy) {
    this.affectedBy = affectedBy;
    return this;
  }

  public Mixin addAffectedByItem(AffectedBy affectedByItem) {
    if (this.affectedBy == null) {
      this.affectedBy = new ArrayList<>();
    }
    this.affectedBy.add(affectedByItem);
    return this;
  }

  /**
   * Get affectedBy
   * @return affectedBy
   */
  @javax.annotation.Nullable
  public List<AffectedBy> getAffectedBy() {
    return affectedBy;
  }

  public void setAffectedBy(List<AffectedBy> affectedBy) {
    this.affectedBy = affectedBy;
  }


  public Mixin dependencyOn(List<DependencyOn> dependencyOn) {
    this.dependencyOn = dependencyOn;
    return this;
  }

  public Mixin addDependencyOnItem(DependencyOn dependencyOnItem) {
    if (this.dependencyOn == null) {
      this.dependencyOn = new ArrayList<>();
    }
    this.dependencyOn.add(dependencyOnItem);
    return this;
  }

  /**
   * Get dependencyOn
   * @return dependencyOn
   */
  @javax.annotation.Nullable
  public List<DependencyOn> getDependencyOn() {
    return dependencyOn;
  }

  public void setDependencyOn(List<DependencyOn> dependencyOn) {
    this.dependencyOn = dependencyOn;
  }


  public Mixin dependsOn(String dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  /**
   * Get dependsOn
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public String getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(String dependsOn) {
    this.dependsOn = dependsOn;
  }


  public Mixin deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Get deprecated
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public Mixin deprecatedSince(String deprecatedSince) {
    this.deprecatedSince = deprecatedSince;
    return this;
  }

  /**
   * Get deprecatedSince
   * @return deprecatedSince
   */
  @javax.annotation.Nullable
  public String getDeprecatedSince() {
    return deprecatedSince;
  }

  public void setDeprecatedSince(String deprecatedSince) {
    this.deprecatedSince = deprecatedSince;
  }


  public Mixin guaranteedUntil(String guaranteedUntil) {
    this.guaranteedUntil = guaranteedUntil;
    return this;
  }

  /**
   * Get guaranteedUntil
   * @return guaranteedUntil
   */
  @javax.annotation.Nullable
  public String getGuaranteedUntil() {
    return guaranteedUntil;
  }

  public void setGuaranteedUntil(String guaranteedUntil) {
    this.guaranteedUntil = guaranteedUntil;
  }


  public Mixin href(String href) {
    this.href = href;
    return this;
  }

  /**
   * Get href
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public Mixin name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Mixin prohibits(List<Prohibits> prohibits) {
    this.prohibits = prohibits;
    return this;
  }

  public Mixin addProhibitsItem(Prohibits prohibitsItem) {
    if (this.prohibits == null) {
      this.prohibits = new ArrayList<>();
    }
    this.prohibits.add(prohibitsItem);
    return this;
  }

  /**
   * Get prohibits
   * @return prohibits
   */
  @javax.annotation.Nullable
  public List<Prohibits> getProhibits() {
    return prohibits;
  }

  public void setProhibits(List<Prohibits> prohibits) {
    this.prohibits = prohibits;
  }


  public Mixin releaseStatus(ReleaseStatusType releaseStatus) {
    this.releaseStatus = releaseStatus;
    return this;
  }

  /**
   * Get releaseStatus
   * @return releaseStatus
   */
  @javax.annotation.Nullable
  public ReleaseStatusType getReleaseStatus() {
    return releaseStatus;
  }

  public void setReleaseStatus(ReleaseStatusType releaseStatus) {
    this.releaseStatus = releaseStatus;
  }


  public Mixin replacedBy(String replacedBy) {
    this.replacedBy = replacedBy;
    return this;
  }

  /**
   * Get replacedBy
   * @return replacedBy
   */
  @javax.annotation.Nullable
  public String getReplacedBy() {
    return replacedBy;
  }

  public void setReplacedBy(String replacedBy) {
    this.replacedBy = replacedBy;
  }


  public Mixin title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mixin mixin = (Mixin) o;
    return Objects.equals(this.affectedBy, mixin.affectedBy) &&
        Objects.equals(this.dependencyOn, mixin.dependencyOn) &&
        Objects.equals(this.dependsOn, mixin.dependsOn) &&
        Objects.equals(this.deprecated, mixin.deprecated) &&
        Objects.equals(this.deprecatedSince, mixin.deprecatedSince) &&
        Objects.equals(this.guaranteedUntil, mixin.guaranteedUntil) &&
        Objects.equals(this.href, mixin.href) &&
        Objects.equals(this.name, mixin.name) &&
        Objects.equals(this.prohibits, mixin.prohibits) &&
        Objects.equals(this.releaseStatus, mixin.releaseStatus) &&
        Objects.equals(this.replacedBy, mixin.replacedBy) &&
        Objects.equals(this.title, mixin.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedBy, dependencyOn, dependsOn, deprecated, deprecatedSince, guaranteedUntil, href, name, prohibits, releaseStatus, replacedBy, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mixin {\n");
    sb.append("    affectedBy: ").append(toIndentedString(affectedBy)).append("\n");
    sb.append("    dependencyOn: ").append(toIndentedString(dependencyOn)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    deprecatedSince: ").append(toIndentedString(deprecatedSince)).append("\n");
    sb.append("    guaranteedUntil: ").append(toIndentedString(guaranteedUntil)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prohibits: ").append(toIndentedString(prohibits)).append("\n");
    sb.append("    releaseStatus: ").append(toIndentedString(releaseStatus)).append("\n");
    sb.append("    replacedBy: ").append(toIndentedString(replacedBy)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affected_by");
    openapiFields.add("dependency_on");
    openapiFields.add("depends_on");
    openapiFields.add("deprecated");
    openapiFields.add("deprecated_since");
    openapiFields.add("guaranteed_until");
    openapiFields.add("href");
    openapiFields.add("name");
    openapiFields.add("prohibits");
    openapiFields.add("release_status");
    openapiFields.add("replaced_by");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mixin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mixin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mixin is not found in the empty JSON string", Mixin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mixin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mixin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Mixin.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("affected_by") != null && !jsonObj.get("affected_by").isJsonNull()) {
        JsonArray jsonArrayaffectedBy = jsonObj.getAsJsonArray("affected_by");
        if (jsonArrayaffectedBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("affected_by").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `affected_by` to be an array in the JSON string but got `%s`", jsonObj.get("affected_by").toString()));
          }

          // validate the optional field `affected_by` (array)
          for (int i = 0; i < jsonArrayaffectedBy.size(); i++) {
            AffectedBy.validateJsonElement(jsonArrayaffectedBy.get(i));
          };
        }
      }
      if (jsonObj.get("dependency_on") != null && !jsonObj.get("dependency_on").isJsonNull()) {
        JsonArray jsonArraydependencyOn = jsonObj.getAsJsonArray("dependency_on");
        if (jsonArraydependencyOn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependency_on").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependency_on` to be an array in the JSON string but got `%s`", jsonObj.get("dependency_on").toString()));
          }

          // validate the optional field `dependency_on` (array)
          for (int i = 0; i < jsonArraydependencyOn.size(); i++) {
            DependencyOn.validateJsonElement(jsonArraydependencyOn.get(i));
          };
        }
      }
      if ((jsonObj.get("depends_on") != null && !jsonObj.get("depends_on").isJsonNull()) && !jsonObj.get("depends_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depends_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depends_on").toString()));
      }
      if ((jsonObj.get("deprecated_since") != null && !jsonObj.get("deprecated_since").isJsonNull()) && !jsonObj.get("deprecated_since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecated_since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecated_since").toString()));
      }
      if ((jsonObj.get("guaranteed_until") != null && !jsonObj.get("guaranteed_until").isJsonNull()) && !jsonObj.get("guaranteed_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guaranteed_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guaranteed_until").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("prohibits") != null && !jsonObj.get("prohibits").isJsonNull()) {
        JsonArray jsonArrayprohibits = jsonObj.getAsJsonArray("prohibits");
        if (jsonArrayprohibits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prohibits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prohibits` to be an array in the JSON string but got `%s`", jsonObj.get("prohibits").toString()));
          }

          // validate the optional field `prohibits` (array)
          for (int i = 0; i < jsonArrayprohibits.size(); i++) {
            Prohibits.validateJsonElement(jsonArrayprohibits.get(i));
          };
        }
      }
      // validate the optional field `release_status`
      if (jsonObj.get("release_status") != null && !jsonObj.get("release_status").isJsonNull()) {
        ReleaseStatusType.validateJsonElement(jsonObj.get("release_status"));
      }
      if ((jsonObj.get("replaced_by") != null && !jsonObj.get("replaced_by").isJsonNull()) && !jsonObj.get("replaced_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaced_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaced_by").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mixin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mixin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mixin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mixin.class));

       return (TypeAdapter<T>) new TypeAdapter<Mixin>() {
           @Override
           public void write(JsonWriter out, Mixin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mixin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mixin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mixin
   * @throws IOException if the JSON string is invalid with respect to Mixin
   */
  public static Mixin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mixin.class);
  }

  /**
   * Convert an instance of Mixin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

