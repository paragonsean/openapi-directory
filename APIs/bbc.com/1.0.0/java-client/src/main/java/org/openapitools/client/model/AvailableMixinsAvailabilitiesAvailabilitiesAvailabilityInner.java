/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AvailableVersionsMediaSets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner {
  public static final String SERIALIZED_NAME_ACCURATE_END = "accurate_end";
  @SerializedName(SERIALIZED_NAME_ACCURATE_END)
  private OffsetDateTime accurateEnd;

  public static final String SERIALIZED_NAME_ACCURATE_START = "accurate_start";
  @SerializedName(SERIALIZED_NAME_ACCURATE_START)
  private OffsetDateTime accurateStart;

  public static final String SERIALIZED_NAME_AVAILABLE_VERSIONS_MEDIA_SETS = "available_versions_media_sets";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_VERSIONS_MEDIA_SETS)
  private AvailableVersionsMediaSets availableVersionsMediaSets;

  public static final String SERIALIZED_NAME_MEDIA_AVAILABILITY_END = "media_availability_end";
  @SerializedName(SERIALIZED_NAME_MEDIA_AVAILABILITY_END)
  private OffsetDateTime mediaAvailabilityEnd;

  public static final String SERIALIZED_NAME_MEDIA_AVAILABILITY_START = "media_availability_start";
  @SerializedName(SERIALIZED_NAME_MEDIA_AVAILABILITY_START)
  private OffsetDateTime mediaAvailabilityStart;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_SCHEDULED_END = "scheduled_end";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_END)
  private OffsetDateTime scheduledEnd;

  public static final String SERIALIZED_NAME_SCHEDULED_START = "scheduled_start";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START)
  private OffsetDateTime scheduledStart;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner() {
  }

  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner accurateEnd(OffsetDateTime accurateEnd) {
    this.accurateEnd = accurateEnd;
    return this;
  }

  /**
   * Get accurateEnd
   * @return accurateEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccurateEnd() {
    return accurateEnd;
  }

  public void setAccurateEnd(OffsetDateTime accurateEnd) {
    this.accurateEnd = accurateEnd;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner accurateStart(OffsetDateTime accurateStart) {
    this.accurateStart = accurateStart;
    return this;
  }

  /**
   * Get accurateStart
   * @return accurateStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccurateStart() {
    return accurateStart;
  }

  public void setAccurateStart(OffsetDateTime accurateStart) {
    this.accurateStart = accurateStart;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner availableVersionsMediaSets(AvailableVersionsMediaSets availableVersionsMediaSets) {
    this.availableVersionsMediaSets = availableVersionsMediaSets;
    return this;
  }

  /**
   * Get availableVersionsMediaSets
   * @return availableVersionsMediaSets
   */
  @javax.annotation.Nonnull
  public AvailableVersionsMediaSets getAvailableVersionsMediaSets() {
    return availableVersionsMediaSets;
  }

  public void setAvailableVersionsMediaSets(AvailableVersionsMediaSets availableVersionsMediaSets) {
    this.availableVersionsMediaSets = availableVersionsMediaSets;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner mediaAvailabilityEnd(OffsetDateTime mediaAvailabilityEnd) {
    this.mediaAvailabilityEnd = mediaAvailabilityEnd;
    return this;
  }

  /**
   * Get mediaAvailabilityEnd
   * @return mediaAvailabilityEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMediaAvailabilityEnd() {
    return mediaAvailabilityEnd;
  }

  public void setMediaAvailabilityEnd(OffsetDateTime mediaAvailabilityEnd) {
    this.mediaAvailabilityEnd = mediaAvailabilityEnd;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner mediaAvailabilityStart(OffsetDateTime mediaAvailabilityStart) {
    this.mediaAvailabilityStart = mediaAvailabilityStart;
    return this;
  }

  /**
   * Get mediaAvailabilityStart
   * @return mediaAvailabilityStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMediaAvailabilityStart() {
    return mediaAvailabilityStart;
  }

  public void setMediaAvailabilityStart(OffsetDateTime mediaAvailabilityStart) {
    this.mediaAvailabilityStart = mediaAvailabilityStart;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner scheduledEnd(OffsetDateTime scheduledEnd) {
    this.scheduledEnd = scheduledEnd;
    return this;
  }

  /**
   * Get scheduledEnd
   * @return scheduledEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledEnd() {
    return scheduledEnd;
  }

  public void setScheduledEnd(OffsetDateTime scheduledEnd) {
    this.scheduledEnd = scheduledEnd;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner scheduledStart(OffsetDateTime scheduledStart) {
    this.scheduledStart = scheduledStart;
    return this;
  }

  /**
   * Get scheduledStart
   * @return scheduledStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledStart() {
    return scheduledStart;
  }

  public void setScheduledStart(OffsetDateTime scheduledStart) {
    this.scheduledStart = scheduledStart;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner = (AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner) o;
    return Objects.equals(this.accurateEnd, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.accurateEnd) &&
        Objects.equals(this.accurateStart, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.accurateStart) &&
        Objects.equals(this.availableVersionsMediaSets, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.availableVersionsMediaSets) &&
        Objects.equals(this.mediaAvailabilityEnd, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.mediaAvailabilityEnd) &&
        Objects.equals(this.mediaAvailabilityStart, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.mediaAvailabilityStart) &&
        Objects.equals(this.paymentType, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.paymentType) &&
        Objects.equals(this.scheduledEnd, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.scheduledEnd) &&
        Objects.equals(this.scheduledStart, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.scheduledStart) &&
        Objects.equals(this.status, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.status) &&
        Objects.equals(this.type, availableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accurateEnd, accurateStart, availableVersionsMediaSets, mediaAvailabilityEnd, mediaAvailabilityStart, paymentType, scheduledEnd, scheduledStart, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner {\n");
    sb.append("    accurateEnd: ").append(toIndentedString(accurateEnd)).append("\n");
    sb.append("    accurateStart: ").append(toIndentedString(accurateStart)).append("\n");
    sb.append("    availableVersionsMediaSets: ").append(toIndentedString(availableVersionsMediaSets)).append("\n");
    sb.append("    mediaAvailabilityEnd: ").append(toIndentedString(mediaAvailabilityEnd)).append("\n");
    sb.append("    mediaAvailabilityStart: ").append(toIndentedString(mediaAvailabilityStart)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    scheduledEnd: ").append(toIndentedString(scheduledEnd)).append("\n");
    sb.append("    scheduledStart: ").append(toIndentedString(scheduledStart)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accurate_end");
    openapiFields.add("accurate_start");
    openapiFields.add("available_versions_media_sets");
    openapiFields.add("media_availability_end");
    openapiFields.add("media_availability_start");
    openapiFields.add("payment_type");
    openapiFields.add("scheduled_end");
    openapiFields.add("scheduled_start");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("available_versions_media_sets");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner is not found in the empty JSON string", AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `available_versions_media_sets`
      AvailableVersionsMediaSets.validateJsonElement(jsonObj.get("available_versions_media_sets"));
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner>() {
           @Override
           public void write(JsonWriter out, AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner
   * @throws IOException if the JSON string is invalid with respect to AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner
   */
  public static AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner.class);
  }

  /**
   * Convert an instance of AvailableMixinsAvailabilitiesAvailabilitiesAvailabilityInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

