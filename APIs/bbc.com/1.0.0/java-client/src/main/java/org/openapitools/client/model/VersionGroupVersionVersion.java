/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Identifiers;
import org.openapitools.client.model.Ids;
import org.openapitools.client.model.PidReference;
import org.openapitools.client.model.TypesWithId;
import org.openapitools.client.model.VersionTypesWithId;
import org.openapitools.client.model.Warnings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VersionGroupVersionVersion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionGroupVersionVersion {
  public static final String SERIALIZED_NAME_ASPECT_RATIO = "aspect_ratio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private String aspectRatio;

  public static final String SERIALIZED_NAME_COMPETITION_WARNING = "competition_warning";
  @SerializedName(SERIALIZED_NAME_COMPETITION_WARNING)
  private Boolean competitionWarning;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Identifiers identifiers;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private Ids ids;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_TYPES_WITH_ID = "types_with_id";
  @SerializedName(SERIALIZED_NAME_TYPES_WITH_ID)
  private TypesWithId typesWithId;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_VERSION_OF = "version_of";
  @SerializedName(SERIALIZED_NAME_VERSION_OF)
  private PidReference versionOf;

  public static final String SERIALIZED_NAME_VERSION_TYPES_WITH_ID = "version_types_with_id";
  @SerializedName(SERIALIZED_NAME_VERSION_TYPES_WITH_ID)
  private VersionTypesWithId versionTypesWithId;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private Warnings warnings;

  public VersionGroupVersionVersion() {
  }

  public VersionGroupVersionVersion aspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

  /**
   * Get aspectRatio
   * @return aspectRatio
   */
  @javax.annotation.Nullable
  public String getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
  }


  public VersionGroupVersionVersion competitionWarning(Boolean competitionWarning) {
    this.competitionWarning = competitionWarning;
    return this;
  }

  /**
   * Get competitionWarning
   * @return competitionWarning
   */
  @javax.annotation.Nullable
  public Boolean getCompetitionWarning() {
    return competitionWarning;
  }

  public void setCompetitionWarning(Boolean competitionWarning) {
    this.competitionWarning = competitionWarning;
  }


  public VersionGroupVersionVersion duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public VersionGroupVersionVersion identifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Identifiers getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
  }


  public VersionGroupVersionVersion ids(Ids ids) {
    this.ids = ids;
    return this;
  }

  /**
   * Get ids
   * @return ids
   */
  @javax.annotation.Nullable
  public Ids getIds() {
    return ids;
  }

  public void setIds(Ids ids) {
    this.ids = ids;
  }


  public VersionGroupVersionVersion pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public VersionGroupVersionVersion typesWithId(TypesWithId typesWithId) {
    this.typesWithId = typesWithId;
    return this;
  }

  /**
   * Get typesWithId
   * @return typesWithId
   */
  @javax.annotation.Nullable
  public TypesWithId getTypesWithId() {
    return typesWithId;
  }

  public void setTypesWithId(TypesWithId typesWithId) {
    this.typesWithId = typesWithId;
  }


  public VersionGroupVersionVersion updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public VersionGroupVersionVersion versionOf(PidReference versionOf) {
    this.versionOf = versionOf;
    return this;
  }

  /**
   * Get versionOf
   * @return versionOf
   */
  @javax.annotation.Nullable
  public PidReference getVersionOf() {
    return versionOf;
  }

  public void setVersionOf(PidReference versionOf) {
    this.versionOf = versionOf;
  }


  public VersionGroupVersionVersion versionTypesWithId(VersionTypesWithId versionTypesWithId) {
    this.versionTypesWithId = versionTypesWithId;
    return this;
  }

  /**
   * Get versionTypesWithId
   * @return versionTypesWithId
   */
  @javax.annotation.Nullable
  public VersionTypesWithId getVersionTypesWithId() {
    return versionTypesWithId;
  }

  public void setVersionTypesWithId(VersionTypesWithId versionTypesWithId) {
    this.versionTypesWithId = versionTypesWithId;
  }


  public VersionGroupVersionVersion warnings(Warnings warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public Warnings getWarnings() {
    return warnings;
  }

  public void setWarnings(Warnings warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionGroupVersionVersion versionGroupVersionVersion = (VersionGroupVersionVersion) o;
    return Objects.equals(this.aspectRatio, versionGroupVersionVersion.aspectRatio) &&
        Objects.equals(this.competitionWarning, versionGroupVersionVersion.competitionWarning) &&
        Objects.equals(this.duration, versionGroupVersionVersion.duration) &&
        Objects.equals(this.identifiers, versionGroupVersionVersion.identifiers) &&
        Objects.equals(this.ids, versionGroupVersionVersion.ids) &&
        Objects.equals(this.pid, versionGroupVersionVersion.pid) &&
        Objects.equals(this.typesWithId, versionGroupVersionVersion.typesWithId) &&
        Objects.equals(this.updatedTime, versionGroupVersionVersion.updatedTime) &&
        Objects.equals(this.versionOf, versionGroupVersionVersion.versionOf) &&
        Objects.equals(this.versionTypesWithId, versionGroupVersionVersion.versionTypesWithId) &&
        Objects.equals(this.warnings, versionGroupVersionVersion.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatio, competitionWarning, duration, identifiers, ids, pid, typesWithId, updatedTime, versionOf, versionTypesWithId, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionGroupVersionVersion {\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    competitionWarning: ").append(toIndentedString(competitionWarning)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    typesWithId: ").append(toIndentedString(typesWithId)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    versionOf: ").append(toIndentedString(versionOf)).append("\n");
    sb.append("    versionTypesWithId: ").append(toIndentedString(versionTypesWithId)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspect_ratio");
    openapiFields.add("competition_warning");
    openapiFields.add("duration");
    openapiFields.add("identifiers");
    openapiFields.add("ids");
    openapiFields.add("pid");
    openapiFields.add("types_with_id");
    openapiFields.add("updated_time");
    openapiFields.add("version_of");
    openapiFields.add("version_types_with_id");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pid");
    openapiRequiredFields.add("updated_time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionGroupVersionVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionGroupVersionVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionGroupVersionVersion is not found in the empty JSON string", VersionGroupVersionVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionGroupVersionVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionGroupVersionVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VersionGroupVersionVersion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aspect_ratio") != null && !jsonObj.get("aspect_ratio").isJsonNull()) && !jsonObj.get("aspect_ratio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspect_ratio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspect_ratio").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        Identifiers.validateJsonElement(jsonObj.get("identifiers"));
      }
      // validate the optional field `ids`
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) {
        Ids.validateJsonElement(jsonObj.get("ids"));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      // validate the optional field `types_with_id`
      if (jsonObj.get("types_with_id") != null && !jsonObj.get("types_with_id").isJsonNull()) {
        TypesWithId.validateJsonElement(jsonObj.get("types_with_id"));
      }
      // validate the optional field `version_of`
      if (jsonObj.get("version_of") != null && !jsonObj.get("version_of").isJsonNull()) {
        PidReference.validateJsonElement(jsonObj.get("version_of"));
      }
      // validate the optional field `version_types_with_id`
      if (jsonObj.get("version_types_with_id") != null && !jsonObj.get("version_types_with_id").isJsonNull()) {
        VersionTypesWithId.validateJsonElement(jsonObj.get("version_types_with_id"));
      }
      // validate the optional field `warnings`
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        Warnings.validateJsonElement(jsonObj.get("warnings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionGroupVersionVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionGroupVersionVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionGroupVersionVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionGroupVersionVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionGroupVersionVersion>() {
           @Override
           public void write(JsonWriter out, VersionGroupVersionVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionGroupVersionVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionGroupVersionVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionGroupVersionVersion
   * @throws IOException if the JSON string is invalid with respect to VersionGroupVersionVersion
   */
  public static VersionGroupVersionVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionGroupVersionVersion.class);
  }

  /**
   * Convert an instance of VersionGroupVersionVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

