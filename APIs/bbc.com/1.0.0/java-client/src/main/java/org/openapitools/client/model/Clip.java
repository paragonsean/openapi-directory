/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AlternateImagesMixin;
import org.openapitools.client.model.AncestorTitles;
import org.openapitools.client.model.AncestorsTitles;
import org.openapitools.client.model.AvailabilityMixin;
import org.openapitools.client.model.ContributionsMixin;
import org.openapitools.client.model.Embargoed;
import org.openapitools.client.model.GenreGroupingsType;
import org.openapitools.client.model.GenreGroupsType;
import org.openapitools.client.model.Identifiers;
import org.openapitools.client.model.ImageLink;
import org.openapitools.client.model.ImagesMixin;
import org.openapitools.client.model.MasterBrandLink;
import org.openapitools.client.model.MediaType;
import org.openapitools.client.model.OriginalVersionDuration;
import org.openapitools.client.model.PidReference;
import org.openapitools.client.model.PreviousNextMixin;
import org.openapitools.client.model.ProgrammeFormats;
import org.openapitools.client.model.Reference;
import org.openapitools.client.model.RelatedLinks;
import org.openapitools.client.model.ReleaseDateGroup;
import org.openapitools.client.model.Synopses;
import org.openapitools.client.model.VersionsMixin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Clip
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Clip {
  public static final String SERIALIZED_NAME_ADVERTISING_ALLOWED = "advertising_allowed";
  @SerializedName(SERIALIZED_NAME_ADVERTISING_ALLOWED)
  private String advertisingAllowed;

  public static final String SERIALIZED_NAME_ALTERNATE_IMAGES_MIXIN = "alternate_images_mixin";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_IMAGES_MIXIN)
  private AlternateImagesMixin alternateImagesMixin;

  public static final String SERIALIZED_NAME_ANCESTOR_TITLES = "ancestor_titles";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_TITLES)
  private AncestorTitles ancestorTitles;

  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private Reference ancestors;

  public static final String SERIALIZED_NAME_ANCESTORS_TITLES = "ancestors_titles";
  @SerializedName(SERIALIZED_NAME_ANCESTORS_TITLES)
  private AncestorsTitles ancestorsTitles;

  public static final String SERIALIZED_NAME_AVAILABILITY_MIXIN = "availability_mixin";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_MIXIN)
  private AvailabilityMixin availabilityMixin;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CLIP_OF = "clip_of";
  @SerializedName(SERIALIZED_NAME_CLIP_OF)
  private PidReference clipOf;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS_MIXIN = "contributions_mixin";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS_MIXIN)
  private ContributionsMixin contributionsMixin;

  public static final String SERIALIZED_NAME_EMBARGOED = "embargoed";
  @SerializedName(SERIALIZED_NAME_EMBARGOED)
  private Embargoed embargoed;

  public static final String SERIALIZED_NAME_GENRE_GROUPINGS = "genre_groupings";
  @SerializedName(SERIALIZED_NAME_GENRE_GROUPINGS)
  private GenreGroupingsType genreGroupings;

  public static final String SERIALIZED_NAME_GENRE_GROUPS = "genre_groups";
  @SerializedName(SERIALIZED_NAME_GENRE_GROUPS)
  private GenreGroupsType genreGroups;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Identifiers identifiers;

  public static final String SERIALIZED_NAME_IMAGE_LINK = "image_link";
  @SerializedName(SERIALIZED_NAME_IMAGE_LINK)
  private ImageLink imageLink;

  public static final String SERIALIZED_NAME_IMAGES_MIXIN = "images_mixin";
  @SerializedName(SERIALIZED_NAME_IMAGES_MIXIN)
  private ImagesMixin imagesMixin;

  public static final String SERIALIZED_NAME_IS_EMBEDDABLE = "is_embeddable";
  @SerializedName(SERIALIZED_NAME_IS_EMBEDDABLE)
  private Boolean isEmbeddable;

  public static final String SERIALIZED_NAME_ITEMS_FOR = "items_for";
  @SerializedName(SERIALIZED_NAME_ITEMS_FOR)
  private Reference itemsFor;

  public static final String SERIALIZED_NAME_MASTER_BRAND_LINK = "master_brand_link";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND_LINK)
  private MasterBrandLink masterBrandLink;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaType mediaType;

  public static final String SERIALIZED_NAME_ORIGINAL_VERSION_DURATION = "original_version_duration";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_VERSION_DURATION)
  private OriginalVersionDuration originalVersionDuration;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_PREVIOUS_NEXT_MIXIN = "previous_next_mixin";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_NEXT_MIXIN)
  private PreviousNextMixin previousNextMixin;

  public static final String SERIALIZED_NAME_PROGRAMME_FORMATS = "programme_formats";
  @SerializedName(SERIALIZED_NAME_PROGRAMME_FORMATS)
  private ProgrammeFormats programmeFormats;

  public static final String SERIALIZED_NAME_RELATED_LINKS = "related_links";
  @SerializedName(SERIALIZED_NAME_RELATED_LINKS)
  private RelatedLinks relatedLinks;

  public static final String SERIALIZED_NAME_RELEASE_DATE_GROUP = "release_date_group";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE_GROUP)
  private ReleaseDateGroup releaseDateGroup;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private Synopses synopses;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VERSIONS_MIXIN = "versions_mixin";
  @SerializedName(SERIALIZED_NAME_VERSIONS_MIXIN)
  private VersionsMixin versionsMixin;

  public Clip() {
  }

  public Clip advertisingAllowed(String advertisingAllowed) {
    this.advertisingAllowed = advertisingAllowed;
    return this;
  }

  /**
   * Get advertisingAllowed
   * @return advertisingAllowed
   */
  @javax.annotation.Nonnull
  public String getAdvertisingAllowed() {
    return advertisingAllowed;
  }

  public void setAdvertisingAllowed(String advertisingAllowed) {
    this.advertisingAllowed = advertisingAllowed;
  }


  public Clip alternateImagesMixin(AlternateImagesMixin alternateImagesMixin) {
    this.alternateImagesMixin = alternateImagesMixin;
    return this;
  }

  /**
   * Get alternateImagesMixin
   * @return alternateImagesMixin
   */
  @javax.annotation.Nullable
  public AlternateImagesMixin getAlternateImagesMixin() {
    return alternateImagesMixin;
  }

  public void setAlternateImagesMixin(AlternateImagesMixin alternateImagesMixin) {
    this.alternateImagesMixin = alternateImagesMixin;
  }


  public Clip ancestorTitles(AncestorTitles ancestorTitles) {
    this.ancestorTitles = ancestorTitles;
    return this;
  }

  /**
   * Get ancestorTitles
   * @return ancestorTitles
   */
  @javax.annotation.Nullable
  public AncestorTitles getAncestorTitles() {
    return ancestorTitles;
  }

  public void setAncestorTitles(AncestorTitles ancestorTitles) {
    this.ancestorTitles = ancestorTitles;
  }


  public Clip ancestors(Reference ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  /**
   * Get ancestors
   * @return ancestors
   */
  @javax.annotation.Nullable
  public Reference getAncestors() {
    return ancestors;
  }

  public void setAncestors(Reference ancestors) {
    this.ancestors = ancestors;
  }


  public Clip ancestorsTitles(AncestorsTitles ancestorsTitles) {
    this.ancestorsTitles = ancestorsTitles;
    return this;
  }

  /**
   * Get ancestorsTitles
   * @return ancestorsTitles
   */
  @javax.annotation.Nullable
  public AncestorsTitles getAncestorsTitles() {
    return ancestorsTitles;
  }

  public void setAncestorsTitles(AncestorsTitles ancestorsTitles) {
    this.ancestorsTitles = ancestorsTitles;
  }


  public Clip availabilityMixin(AvailabilityMixin availabilityMixin) {
    this.availabilityMixin = availabilityMixin;
    return this;
  }

  /**
   * Get availabilityMixin
   * @return availabilityMixin
   */
  @javax.annotation.Nullable
  public AvailabilityMixin getAvailabilityMixin() {
    return availabilityMixin;
  }

  public void setAvailabilityMixin(AvailabilityMixin availabilityMixin) {
    this.availabilityMixin = availabilityMixin;
  }


  public Clip caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public Clip clipOf(PidReference clipOf) {
    this.clipOf = clipOf;
    return this;
  }

  /**
   * Get clipOf
   * @return clipOf
   */
  @javax.annotation.Nullable
  public PidReference getClipOf() {
    return clipOf;
  }

  public void setClipOf(PidReference clipOf) {
    this.clipOf = clipOf;
  }


  public Clip contributionsMixin(ContributionsMixin contributionsMixin) {
    this.contributionsMixin = contributionsMixin;
    return this;
  }

  /**
   * Get contributionsMixin
   * @return contributionsMixin
   */
  @javax.annotation.Nullable
  public ContributionsMixin getContributionsMixin() {
    return contributionsMixin;
  }

  public void setContributionsMixin(ContributionsMixin contributionsMixin) {
    this.contributionsMixin = contributionsMixin;
  }


  public Clip embargoed(Embargoed embargoed) {
    this.embargoed = embargoed;
    return this;
  }

  /**
   * Get embargoed
   * @return embargoed
   */
  @javax.annotation.Nonnull
  public Embargoed getEmbargoed() {
    return embargoed;
  }

  public void setEmbargoed(Embargoed embargoed) {
    this.embargoed = embargoed;
  }


  public Clip genreGroupings(GenreGroupingsType genreGroupings) {
    this.genreGroupings = genreGroupings;
    return this;
  }

  /**
   * Get genreGroupings
   * @return genreGroupings
   */
  @javax.annotation.Nullable
  public GenreGroupingsType getGenreGroupings() {
    return genreGroupings;
  }

  public void setGenreGroupings(GenreGroupingsType genreGroupings) {
    this.genreGroupings = genreGroupings;
  }


  public Clip genreGroups(GenreGroupsType genreGroups) {
    this.genreGroups = genreGroups;
    return this;
  }

  /**
   * Get genreGroups
   * @return genreGroups
   */
  @javax.annotation.Nullable
  public GenreGroupsType getGenreGroups() {
    return genreGroups;
  }

  public void setGenreGroups(GenreGroupsType genreGroups) {
    this.genreGroups = genreGroups;
  }


  public Clip identifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Identifiers getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
  }


  public Clip imageLink(ImageLink imageLink) {
    this.imageLink = imageLink;
    return this;
  }

  /**
   * Get imageLink
   * @return imageLink
   */
  @javax.annotation.Nullable
  public ImageLink getImageLink() {
    return imageLink;
  }

  public void setImageLink(ImageLink imageLink) {
    this.imageLink = imageLink;
  }


  public Clip imagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
    return this;
  }

  /**
   * Get imagesMixin
   * @return imagesMixin
   */
  @javax.annotation.Nullable
  public ImagesMixin getImagesMixin() {
    return imagesMixin;
  }

  public void setImagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
  }


  public Clip isEmbeddable(Boolean isEmbeddable) {
    this.isEmbeddable = isEmbeddable;
    return this;
  }

  /**
   * Get isEmbeddable
   * @return isEmbeddable
   */
  @javax.annotation.Nullable
  public Boolean getIsEmbeddable() {
    return isEmbeddable;
  }

  public void setIsEmbeddable(Boolean isEmbeddable) {
    this.isEmbeddable = isEmbeddable;
  }


  public Clip itemsFor(Reference itemsFor) {
    this.itemsFor = itemsFor;
    return this;
  }

  /**
   * Get itemsFor
   * @return itemsFor
   */
  @javax.annotation.Nullable
  public Reference getItemsFor() {
    return itemsFor;
  }

  public void setItemsFor(Reference itemsFor) {
    this.itemsFor = itemsFor;
  }


  public Clip masterBrandLink(MasterBrandLink masterBrandLink) {
    this.masterBrandLink = masterBrandLink;
    return this;
  }

  /**
   * Get masterBrandLink
   * @return masterBrandLink
   */
  @javax.annotation.Nullable
  public MasterBrandLink getMasterBrandLink() {
    return masterBrandLink;
  }

  public void setMasterBrandLink(MasterBrandLink masterBrandLink) {
    this.masterBrandLink = masterBrandLink;
  }


  public Clip mediaType(MediaType mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nullable
  public MediaType getMediaType() {
    return mediaType;
  }

  public void setMediaType(MediaType mediaType) {
    this.mediaType = mediaType;
  }


  public Clip originalVersionDuration(OriginalVersionDuration originalVersionDuration) {
    this.originalVersionDuration = originalVersionDuration;
    return this;
  }

  /**
   * Get originalVersionDuration
   * @return originalVersionDuration
   */
  @javax.annotation.Nullable
  public OriginalVersionDuration getOriginalVersionDuration() {
    return originalVersionDuration;
  }

  public void setOriginalVersionDuration(OriginalVersionDuration originalVersionDuration) {
    this.originalVersionDuration = originalVersionDuration;
  }


  public Clip partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nonnull
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public Clip pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public Clip previousNextMixin(PreviousNextMixin previousNextMixin) {
    this.previousNextMixin = previousNextMixin;
    return this;
  }

  /**
   * Get previousNextMixin
   * @return previousNextMixin
   */
  @javax.annotation.Nullable
  public PreviousNextMixin getPreviousNextMixin() {
    return previousNextMixin;
  }

  public void setPreviousNextMixin(PreviousNextMixin previousNextMixin) {
    this.previousNextMixin = previousNextMixin;
  }


  public Clip programmeFormats(ProgrammeFormats programmeFormats) {
    this.programmeFormats = programmeFormats;
    return this;
  }

  /**
   * Get programmeFormats
   * @return programmeFormats
   */
  @javax.annotation.Nullable
  public ProgrammeFormats getProgrammeFormats() {
    return programmeFormats;
  }

  public void setProgrammeFormats(ProgrammeFormats programmeFormats) {
    this.programmeFormats = programmeFormats;
  }


  public Clip relatedLinks(RelatedLinks relatedLinks) {
    this.relatedLinks = relatedLinks;
    return this;
  }

  /**
   * Get relatedLinks
   * @return relatedLinks
   */
  @javax.annotation.Nullable
  public RelatedLinks getRelatedLinks() {
    return relatedLinks;
  }

  public void setRelatedLinks(RelatedLinks relatedLinks) {
    this.relatedLinks = relatedLinks;
  }


  public Clip releaseDateGroup(ReleaseDateGroup releaseDateGroup) {
    this.releaseDateGroup = releaseDateGroup;
    return this;
  }

  /**
   * Get releaseDateGroup
   * @return releaseDateGroup
   */
  @javax.annotation.Nullable
  public ReleaseDateGroup getReleaseDateGroup() {
    return releaseDateGroup;
  }

  public void setReleaseDateGroup(ReleaseDateGroup releaseDateGroup) {
    this.releaseDateGroup = releaseDateGroup;
  }


  public Clip synopses(Synopses synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nullable
  public Synopses getSynopses() {
    return synopses;
  }

  public void setSynopses(Synopses synopses) {
    this.synopses = synopses;
  }


  public Clip title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Clip updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public Clip uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public Clip versionsMixin(VersionsMixin versionsMixin) {
    this.versionsMixin = versionsMixin;
    return this;
  }

  /**
   * Get versionsMixin
   * @return versionsMixin
   */
  @javax.annotation.Nullable
  public VersionsMixin getVersionsMixin() {
    return versionsMixin;
  }

  public void setVersionsMixin(VersionsMixin versionsMixin) {
    this.versionsMixin = versionsMixin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Clip clip = (Clip) o;
    return Objects.equals(this.advertisingAllowed, clip.advertisingAllowed) &&
        Objects.equals(this.alternateImagesMixin, clip.alternateImagesMixin) &&
        Objects.equals(this.ancestorTitles, clip.ancestorTitles) &&
        Objects.equals(this.ancestors, clip.ancestors) &&
        Objects.equals(this.ancestorsTitles, clip.ancestorsTitles) &&
        Objects.equals(this.availabilityMixin, clip.availabilityMixin) &&
        Objects.equals(this.caption, clip.caption) &&
        Objects.equals(this.clipOf, clip.clipOf) &&
        Objects.equals(this.contributionsMixin, clip.contributionsMixin) &&
        Objects.equals(this.embargoed, clip.embargoed) &&
        Objects.equals(this.genreGroupings, clip.genreGroupings) &&
        Objects.equals(this.genreGroups, clip.genreGroups) &&
        Objects.equals(this.identifiers, clip.identifiers) &&
        Objects.equals(this.imageLink, clip.imageLink) &&
        Objects.equals(this.imagesMixin, clip.imagesMixin) &&
        Objects.equals(this.isEmbeddable, clip.isEmbeddable) &&
        Objects.equals(this.itemsFor, clip.itemsFor) &&
        Objects.equals(this.masterBrandLink, clip.masterBrandLink) &&
        Objects.equals(this.mediaType, clip.mediaType) &&
        Objects.equals(this.originalVersionDuration, clip.originalVersionDuration) &&
        Objects.equals(this.partner, clip.partner) &&
        Objects.equals(this.pid, clip.pid) &&
        Objects.equals(this.previousNextMixin, clip.previousNextMixin) &&
        Objects.equals(this.programmeFormats, clip.programmeFormats) &&
        Objects.equals(this.relatedLinks, clip.relatedLinks) &&
        Objects.equals(this.releaseDateGroup, clip.releaseDateGroup) &&
        Objects.equals(this.synopses, clip.synopses) &&
        Objects.equals(this.title, clip.title) &&
        Objects.equals(this.updatedTime, clip.updatedTime) &&
        Objects.equals(this.uri, clip.uri) &&
        Objects.equals(this.versionsMixin, clip.versionsMixin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertisingAllowed, alternateImagesMixin, ancestorTitles, ancestors, ancestorsTitles, availabilityMixin, caption, clipOf, contributionsMixin, embargoed, genreGroupings, genreGroups, identifiers, imageLink, imagesMixin, isEmbeddable, itemsFor, masterBrandLink, mediaType, originalVersionDuration, partner, pid, previousNextMixin, programmeFormats, relatedLinks, releaseDateGroup, synopses, title, updatedTime, uri, versionsMixin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Clip {\n");
    sb.append("    advertisingAllowed: ").append(toIndentedString(advertisingAllowed)).append("\n");
    sb.append("    alternateImagesMixin: ").append(toIndentedString(alternateImagesMixin)).append("\n");
    sb.append("    ancestorTitles: ").append(toIndentedString(ancestorTitles)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    ancestorsTitles: ").append(toIndentedString(ancestorsTitles)).append("\n");
    sb.append("    availabilityMixin: ").append(toIndentedString(availabilityMixin)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    clipOf: ").append(toIndentedString(clipOf)).append("\n");
    sb.append("    contributionsMixin: ").append(toIndentedString(contributionsMixin)).append("\n");
    sb.append("    embargoed: ").append(toIndentedString(embargoed)).append("\n");
    sb.append("    genreGroupings: ").append(toIndentedString(genreGroupings)).append("\n");
    sb.append("    genreGroups: ").append(toIndentedString(genreGroups)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    imageLink: ").append(toIndentedString(imageLink)).append("\n");
    sb.append("    imagesMixin: ").append(toIndentedString(imagesMixin)).append("\n");
    sb.append("    isEmbeddable: ").append(toIndentedString(isEmbeddable)).append("\n");
    sb.append("    itemsFor: ").append(toIndentedString(itemsFor)).append("\n");
    sb.append("    masterBrandLink: ").append(toIndentedString(masterBrandLink)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    originalVersionDuration: ").append(toIndentedString(originalVersionDuration)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    previousNextMixin: ").append(toIndentedString(previousNextMixin)).append("\n");
    sb.append("    programmeFormats: ").append(toIndentedString(programmeFormats)).append("\n");
    sb.append("    relatedLinks: ").append(toIndentedString(relatedLinks)).append("\n");
    sb.append("    releaseDateGroup: ").append(toIndentedString(releaseDateGroup)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    versionsMixin: ").append(toIndentedString(versionsMixin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertising_allowed");
    openapiFields.add("alternate_images_mixin");
    openapiFields.add("ancestor_titles");
    openapiFields.add("ancestors");
    openapiFields.add("ancestors_titles");
    openapiFields.add("availability_mixin");
    openapiFields.add("caption");
    openapiFields.add("clip_of");
    openapiFields.add("contributions_mixin");
    openapiFields.add("embargoed");
    openapiFields.add("genre_groupings");
    openapiFields.add("genre_groups");
    openapiFields.add("identifiers");
    openapiFields.add("image_link");
    openapiFields.add("images_mixin");
    openapiFields.add("is_embeddable");
    openapiFields.add("items_for");
    openapiFields.add("master_brand_link");
    openapiFields.add("media_type");
    openapiFields.add("original_version_duration");
    openapiFields.add("partner");
    openapiFields.add("pid");
    openapiFields.add("previous_next_mixin");
    openapiFields.add("programme_formats");
    openapiFields.add("related_links");
    openapiFields.add("release_date_group");
    openapiFields.add("synopses");
    openapiFields.add("title");
    openapiFields.add("updated_time");
    openapiFields.add("uri");
    openapiFields.add("versions_mixin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("advertising_allowed");
    openapiRequiredFields.add("embargoed");
    openapiRequiredFields.add("partner");
    openapiRequiredFields.add("pid");
    openapiRequiredFields.add("updated_time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Clip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Clip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Clip is not found in the empty JSON string", Clip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Clip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Clip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Clip.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("advertising_allowed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertising_allowed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertising_allowed").toString()));
      }
      // validate the optional field `alternate_images_mixin`
      if (jsonObj.get("alternate_images_mixin") != null && !jsonObj.get("alternate_images_mixin").isJsonNull()) {
        AlternateImagesMixin.validateJsonElement(jsonObj.get("alternate_images_mixin"));
      }
      // validate the optional field `ancestor_titles`
      if (jsonObj.get("ancestor_titles") != null && !jsonObj.get("ancestor_titles").isJsonNull()) {
        AncestorTitles.validateJsonElement(jsonObj.get("ancestor_titles"));
      }
      // validate the optional field `ancestors`
      if (jsonObj.get("ancestors") != null && !jsonObj.get("ancestors").isJsonNull()) {
        Reference.validateJsonElement(jsonObj.get("ancestors"));
      }
      // validate the optional field `ancestors_titles`
      if (jsonObj.get("ancestors_titles") != null && !jsonObj.get("ancestors_titles").isJsonNull()) {
        AncestorsTitles.validateJsonElement(jsonObj.get("ancestors_titles"));
      }
      // validate the optional field `availability_mixin`
      if (jsonObj.get("availability_mixin") != null && !jsonObj.get("availability_mixin").isJsonNull()) {
        AvailabilityMixin.validateJsonElement(jsonObj.get("availability_mixin"));
      }
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      // validate the optional field `clip_of`
      if (jsonObj.get("clip_of") != null && !jsonObj.get("clip_of").isJsonNull()) {
        PidReference.validateJsonElement(jsonObj.get("clip_of"));
      }
      // validate the optional field `contributions_mixin`
      if (jsonObj.get("contributions_mixin") != null && !jsonObj.get("contributions_mixin").isJsonNull()) {
        ContributionsMixin.validateJsonElement(jsonObj.get("contributions_mixin"));
      }
      // validate the required field `embargoed`
      Embargoed.validateJsonElement(jsonObj.get("embargoed"));
      // validate the optional field `genre_groupings`
      if (jsonObj.get("genre_groupings") != null && !jsonObj.get("genre_groupings").isJsonNull()) {
        GenreGroupingsType.validateJsonElement(jsonObj.get("genre_groupings"));
      }
      // validate the optional field `genre_groups`
      if (jsonObj.get("genre_groups") != null && !jsonObj.get("genre_groups").isJsonNull()) {
        GenreGroupsType.validateJsonElement(jsonObj.get("genre_groups"));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        Identifiers.validateJsonElement(jsonObj.get("identifiers"));
      }
      // validate the optional field `image_link`
      if (jsonObj.get("image_link") != null && !jsonObj.get("image_link").isJsonNull()) {
        ImageLink.validateJsonElement(jsonObj.get("image_link"));
      }
      // validate the optional field `images_mixin`
      if (jsonObj.get("images_mixin") != null && !jsonObj.get("images_mixin").isJsonNull()) {
        ImagesMixin.validateJsonElement(jsonObj.get("images_mixin"));
      }
      // validate the optional field `items_for`
      if (jsonObj.get("items_for") != null && !jsonObj.get("items_for").isJsonNull()) {
        Reference.validateJsonElement(jsonObj.get("items_for"));
      }
      // validate the optional field `master_brand_link`
      if (jsonObj.get("master_brand_link") != null && !jsonObj.get("master_brand_link").isJsonNull()) {
        MasterBrandLink.validateJsonElement(jsonObj.get("master_brand_link"));
      }
      // validate the optional field `media_type`
      if (jsonObj.get("media_type") != null && !jsonObj.get("media_type").isJsonNull()) {
        MediaType.validateJsonElement(jsonObj.get("media_type"));
      }
      // validate the optional field `original_version_duration`
      if (jsonObj.get("original_version_duration") != null && !jsonObj.get("original_version_duration").isJsonNull()) {
        OriginalVersionDuration.validateJsonElement(jsonObj.get("original_version_duration"));
      }
      if (!jsonObj.get("partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner").toString()));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      // validate the optional field `previous_next_mixin`
      if (jsonObj.get("previous_next_mixin") != null && !jsonObj.get("previous_next_mixin").isJsonNull()) {
        PreviousNextMixin.validateJsonElement(jsonObj.get("previous_next_mixin"));
      }
      // validate the optional field `programme_formats`
      if (jsonObj.get("programme_formats") != null && !jsonObj.get("programme_formats").isJsonNull()) {
        ProgrammeFormats.validateJsonElement(jsonObj.get("programme_formats"));
      }
      // validate the optional field `related_links`
      if (jsonObj.get("related_links") != null && !jsonObj.get("related_links").isJsonNull()) {
        RelatedLinks.validateJsonElement(jsonObj.get("related_links"));
      }
      // validate the optional field `release_date_group`
      if (jsonObj.get("release_date_group") != null && !jsonObj.get("release_date_group").isJsonNull()) {
        ReleaseDateGroup.validateJsonElement(jsonObj.get("release_date_group"));
      }
      // validate the optional field `synopses`
      if (jsonObj.get("synopses") != null && !jsonObj.get("synopses").isJsonNull()) {
        Synopses.validateJsonElement(jsonObj.get("synopses"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the optional field `versions_mixin`
      if (jsonObj.get("versions_mixin") != null && !jsonObj.get("versions_mixin").isJsonNull()) {
        VersionsMixin.validateJsonElement(jsonObj.get("versions_mixin"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Clip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Clip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Clip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Clip.class));

       return (TypeAdapter<T>) new TypeAdapter<Clip>() {
           @Override
           public void write(JsonWriter out, Clip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Clip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Clip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Clip
   * @throws IOException if the JSON string is invalid with respect to Clip
   */
  public static Clip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Clip.class);
  }

  /**
   * Convert an instance of Clip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

