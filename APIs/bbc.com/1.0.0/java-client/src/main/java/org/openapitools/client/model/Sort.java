/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReleaseStatusType;
import org.openapitools.client.model.SortDirection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sort
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sort {
  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DEPRECATED_SINCE = "deprecated_since";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_SINCE)
  private String deprecatedSince;

  public static final String SERIALIZED_NAME_GUARANTEED_UNTIL = "guaranteed_until";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_UNTIL)
  private String guaranteedUntil;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private String isDefault;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_STATUS = "release_status";
  @SerializedName(SERIALIZED_NAME_RELEASE_STATUS)
  private ReleaseStatusType releaseStatus;

  public static final String SERIALIZED_NAME_REPLACED_BY = "replaced_by";
  @SerializedName(SERIALIZED_NAME_REPLACED_BY)
  private String replacedBy;

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sort_direction";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  private List<SortDirection> sortDirection = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Sort() {
  }

  public Sort deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Get deprecated
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public Sort deprecatedSince(String deprecatedSince) {
    this.deprecatedSince = deprecatedSince;
    return this;
  }

  /**
   * Get deprecatedSince
   * @return deprecatedSince
   */
  @javax.annotation.Nullable
  public String getDeprecatedSince() {
    return deprecatedSince;
  }

  public void setDeprecatedSince(String deprecatedSince) {
    this.deprecatedSince = deprecatedSince;
  }


  public Sort guaranteedUntil(String guaranteedUntil) {
    this.guaranteedUntil = guaranteedUntil;
    return this;
  }

  /**
   * Get guaranteedUntil
   * @return guaranteedUntil
   */
  @javax.annotation.Nullable
  public String getGuaranteedUntil() {
    return guaranteedUntil;
  }

  public void setGuaranteedUntil(String guaranteedUntil) {
    this.guaranteedUntil = guaranteedUntil;
  }


  public Sort isDefault(String isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public String getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(String isDefault) {
    this.isDefault = isDefault;
  }


  public Sort name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sort releaseStatus(ReleaseStatusType releaseStatus) {
    this.releaseStatus = releaseStatus;
    return this;
  }

  /**
   * Get releaseStatus
   * @return releaseStatus
   */
  @javax.annotation.Nullable
  public ReleaseStatusType getReleaseStatus() {
    return releaseStatus;
  }

  public void setReleaseStatus(ReleaseStatusType releaseStatus) {
    this.releaseStatus = releaseStatus;
  }


  public Sort replacedBy(String replacedBy) {
    this.replacedBy = replacedBy;
    return this;
  }

  /**
   * Get replacedBy
   * @return replacedBy
   */
  @javax.annotation.Nullable
  public String getReplacedBy() {
    return replacedBy;
  }

  public void setReplacedBy(String replacedBy) {
    this.replacedBy = replacedBy;
  }


  public Sort sortDirection(List<SortDirection> sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  public Sort addSortDirectionItem(SortDirection sortDirectionItem) {
    if (this.sortDirection == null) {
      this.sortDirection = new ArrayList<>();
    }
    this.sortDirection.add(sortDirectionItem);
    return this;
  }

  /**
   * Get sortDirection
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public List<SortDirection> getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(List<SortDirection> sortDirection) {
    this.sortDirection = sortDirection;
  }


  public Sort title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sort sort = (Sort) o;
    return Objects.equals(this.deprecated, sort.deprecated) &&
        Objects.equals(this.deprecatedSince, sort.deprecatedSince) &&
        Objects.equals(this.guaranteedUntil, sort.guaranteedUntil) &&
        Objects.equals(this.isDefault, sort.isDefault) &&
        Objects.equals(this.name, sort.name) &&
        Objects.equals(this.releaseStatus, sort.releaseStatus) &&
        Objects.equals(this.replacedBy, sort.replacedBy) &&
        Objects.equals(this.sortDirection, sort.sortDirection) &&
        Objects.equals(this.title, sort.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecated, deprecatedSince, guaranteedUntil, isDefault, name, releaseStatus, replacedBy, sortDirection, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sort {\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    deprecatedSince: ").append(toIndentedString(deprecatedSince)).append("\n");
    sb.append("    guaranteedUntil: ").append(toIndentedString(guaranteedUntil)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseStatus: ").append(toIndentedString(releaseStatus)).append("\n");
    sb.append("    replacedBy: ").append(toIndentedString(replacedBy)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecated");
    openapiFields.add("deprecated_since");
    openapiFields.add("guaranteed_until");
    openapiFields.add("is_default");
    openapiFields.add("name");
    openapiFields.add("release_status");
    openapiFields.add("replaced_by");
    openapiFields.add("sort_direction");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sort
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sort.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sort is not found in the empty JSON string", Sort.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sort.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sort` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sort.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deprecated_since") != null && !jsonObj.get("deprecated_since").isJsonNull()) && !jsonObj.get("deprecated_since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecated_since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecated_since").toString()));
      }
      if ((jsonObj.get("guaranteed_until") != null && !jsonObj.get("guaranteed_until").isJsonNull()) && !jsonObj.get("guaranteed_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guaranteed_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guaranteed_until").toString()));
      }
      if ((jsonObj.get("is_default") != null && !jsonObj.get("is_default").isJsonNull()) && !jsonObj.get("is_default").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_default` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_default").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `release_status`
      if (jsonObj.get("release_status") != null && !jsonObj.get("release_status").isJsonNull()) {
        ReleaseStatusType.validateJsonElement(jsonObj.get("release_status"));
      }
      if ((jsonObj.get("replaced_by") != null && !jsonObj.get("replaced_by").isJsonNull()) && !jsonObj.get("replaced_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaced_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaced_by").toString()));
      }
      if (jsonObj.get("sort_direction") != null && !jsonObj.get("sort_direction").isJsonNull()) {
        JsonArray jsonArraysortDirection = jsonObj.getAsJsonArray("sort_direction");
        if (jsonArraysortDirection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort_direction").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort_direction` to be an array in the JSON string but got `%s`", jsonObj.get("sort_direction").toString()));
          }

          // validate the optional field `sort_direction` (array)
          for (int i = 0; i < jsonArraysortDirection.size(); i++) {
            SortDirection.validateJsonElement(jsonArraysortDirection.get(i));
          };
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sort.class));

       return (TypeAdapter<T>) new TypeAdapter<Sort>() {
           @Override
           public void write(JsonWriter out, Sort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sort read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sort given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sort
   * @throws IOException if the JSON string is invalid with respect to Sort
   */
  public static Sort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sort.class);
  }

  /**
   * Convert an instance of Sort to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

