/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ContributionsMixin;
import org.openapitools.client.model.Identifiers;
import org.openapitools.client.model.Ids;
import org.openapitools.client.model.ImagesMixin;
import org.openapitools.client.model.Offsets;
import org.openapitools.client.model.PlayEvents;
import org.openapitools.client.model.Reference;
import org.openapitools.client.model.Synopses;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_CATALOGUE_NUMBER = "catalogue_number";
  @SerializedName(SERIALIZED_NAME_CATALOGUE_NUMBER)
  private String catalogueNumber;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS_MIXIN = "contributions_mixin";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS_MIXIN)
  private ContributionsMixin contributionsMixin;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Float duration;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Identifiers identifiers;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private Ids ids;

  public static final String SERIALIZED_NAME_IMAGES_MIXIN = "images_mixin";
  @SerializedName(SERIALIZED_NAME_IMAGES_MIXIN)
  private ImagesMixin imagesMixin;

  public static final String SERIALIZED_NAME_ITEM_OF = "item_of";
  @SerializedName(SERIALIZED_NAME_ITEM_OF)
  private Reference itemOf;

  public static final String SERIALIZED_NAME_MUSIC_CODE = "music_code";
  @SerializedName(SERIALIZED_NAME_MUSIC_CODE)
  private String musicCode;

  public static final String SERIALIZED_NAME_OFFSETS = "offsets";
  @SerializedName(SERIALIZED_NAME_OFFSETS)
  private Offsets offsets;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_PLAY_EVENTS = "play_events";
  @SerializedName(SERIALIZED_NAME_PLAY_EVENTS)
  private PlayEvents playEvents;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_RECORD_LABEL = "record_label";
  @SerializedName(SERIALIZED_NAME_RECORD_LABEL)
  private String recordLabel;

  public static final String SERIALIZED_NAME_RECORDING_DATE = "recording_date";
  @SerializedName(SERIALIZED_NAME_RECORDING_DATE)
  private String recordingDate;

  public static final String SERIALIZED_NAME_RELEASE_TITLE = "release_title";
  @SerializedName(SERIALIZED_NAME_RELEASE_TITLE)
  private String releaseTitle;

  public static final String SERIALIZED_NAME_SNIPPET_URL = "snippet_url";
  @SerializedName(SERIALIZED_NAME_SNIPPET_URL)
  private String snippetUrl;

  public static final String SERIALIZED_NAME_SOURCE_MEDIA = "source_media";
  @SerializedName(SERIALIZED_NAME_SOURCE_MEDIA)
  private String sourceMedia;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private Synopses synopses;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRACK_NUMBER = "track_number";
  @SerializedName(SERIALIZED_NAME_TRACK_NUMBER)
  private String trackNumber;

  public static final String SERIALIZED_NAME_TRACK_SIDE = "track_side";
  @SerializedName(SERIALIZED_NAME_TRACK_SIDE)
  private String trackSide;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public Item() {
  }

  public Item catalogueNumber(String catalogueNumber) {
    this.catalogueNumber = catalogueNumber;
    return this;
  }

  /**
   * Get catalogueNumber
   * @return catalogueNumber
   */
  @javax.annotation.Nullable
  public String getCatalogueNumber() {
    return catalogueNumber;
  }

  public void setCatalogueNumber(String catalogueNumber) {
    this.catalogueNumber = catalogueNumber;
  }


  public Item contributionsMixin(ContributionsMixin contributionsMixin) {
    this.contributionsMixin = contributionsMixin;
    return this;
  }

  /**
   * Get contributionsMixin
   * @return contributionsMixin
   */
  @javax.annotation.Nullable
  public ContributionsMixin getContributionsMixin() {
    return contributionsMixin;
  }

  public void setContributionsMixin(ContributionsMixin contributionsMixin) {
    this.contributionsMixin = contributionsMixin;
  }


  public Item duration(Float duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Float getDuration() {
    return duration;
  }

  public void setDuration(Float duration) {
    this.duration = duration;
  }


  public Item identifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Identifiers getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
  }


  public Item ids(Ids ids) {
    this.ids = ids;
    return this;
  }

  /**
   * Get ids
   * @return ids
   */
  @javax.annotation.Nullable
  public Ids getIds() {
    return ids;
  }

  public void setIds(Ids ids) {
    this.ids = ids;
  }


  public Item imagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
    return this;
  }

  /**
   * Get imagesMixin
   * @return imagesMixin
   */
  @javax.annotation.Nullable
  public ImagesMixin getImagesMixin() {
    return imagesMixin;
  }

  public void setImagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
  }


  public Item itemOf(Reference itemOf) {
    this.itemOf = itemOf;
    return this;
  }

  /**
   * Get itemOf
   * @return itemOf
   */
  @javax.annotation.Nullable
  public Reference getItemOf() {
    return itemOf;
  }

  public void setItemOf(Reference itemOf) {
    this.itemOf = itemOf;
  }


  public Item musicCode(String musicCode) {
    this.musicCode = musicCode;
    return this;
  }

  /**
   * Get musicCode
   * @return musicCode
   */
  @javax.annotation.Nullable
  public String getMusicCode() {
    return musicCode;
  }

  public void setMusicCode(String musicCode) {
    this.musicCode = musicCode;
  }


  public Item offsets(Offsets offsets) {
    this.offsets = offsets;
    return this;
  }

  /**
   * Get offsets
   * @return offsets
   */
  @javax.annotation.Nullable
  public Offsets getOffsets() {
    return offsets;
  }

  public void setOffsets(Offsets offsets) {
    this.offsets = offsets;
  }


  public Item partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nonnull
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public Item pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public Item playEvents(PlayEvents playEvents) {
    this.playEvents = playEvents;
    return this;
  }

  /**
   * Get playEvents
   * @return playEvents
   */
  @javax.annotation.Nullable
  public PlayEvents getPlayEvents() {
    return playEvents;
  }

  public void setPlayEvents(PlayEvents playEvents) {
    this.playEvents = playEvents;
  }


  public Item publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Get publisher
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public Item recordLabel(String recordLabel) {
    this.recordLabel = recordLabel;
    return this;
  }

  /**
   * Get recordLabel
   * @return recordLabel
   */
  @javax.annotation.Nullable
  public String getRecordLabel() {
    return recordLabel;
  }

  public void setRecordLabel(String recordLabel) {
    this.recordLabel = recordLabel;
  }


  public Item recordingDate(String recordingDate) {
    this.recordingDate = recordingDate;
    return this;
  }

  /**
   * Get recordingDate
   * @return recordingDate
   */
  @javax.annotation.Nullable
  public String getRecordingDate() {
    return recordingDate;
  }

  public void setRecordingDate(String recordingDate) {
    this.recordingDate = recordingDate;
  }


  public Item releaseTitle(String releaseTitle) {
    this.releaseTitle = releaseTitle;
    return this;
  }

  /**
   * Get releaseTitle
   * @return releaseTitle
   */
  @javax.annotation.Nullable
  public String getReleaseTitle() {
    return releaseTitle;
  }

  public void setReleaseTitle(String releaseTitle) {
    this.releaseTitle = releaseTitle;
  }


  public Item snippetUrl(String snippetUrl) {
    this.snippetUrl = snippetUrl;
    return this;
  }

  /**
   * Get snippetUrl
   * @return snippetUrl
   */
  @javax.annotation.Nullable
  public String getSnippetUrl() {
    return snippetUrl;
  }

  public void setSnippetUrl(String snippetUrl) {
    this.snippetUrl = snippetUrl;
  }


  public Item sourceMedia(String sourceMedia) {
    this.sourceMedia = sourceMedia;
    return this;
  }

  /**
   * Get sourceMedia
   * @return sourceMedia
   */
  @javax.annotation.Nullable
  public String getSourceMedia() {
    return sourceMedia;
  }

  public void setSourceMedia(String sourceMedia) {
    this.sourceMedia = sourceMedia;
  }


  public Item synopses(Synopses synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nullable
  public Synopses getSynopses() {
    return synopses;
  }

  public void setSynopses(Synopses synopses) {
    this.synopses = synopses;
  }


  public Item title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Item trackNumber(String trackNumber) {
    this.trackNumber = trackNumber;
    return this;
  }

  /**
   * Get trackNumber
   * @return trackNumber
   */
  @javax.annotation.Nullable
  public String getTrackNumber() {
    return trackNumber;
  }

  public void setTrackNumber(String trackNumber) {
    this.trackNumber = trackNumber;
  }


  public Item trackSide(String trackSide) {
    this.trackSide = trackSide;
    return this;
  }

  /**
   * Get trackSide
   * @return trackSide
   */
  @javax.annotation.Nullable
  public String getTrackSide() {
    return trackSide;
  }

  public void setTrackSide(String trackSide) {
    this.trackSide = trackSide;
  }


  public Item type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Item updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.catalogueNumber, item.catalogueNumber) &&
        Objects.equals(this.contributionsMixin, item.contributionsMixin) &&
        Objects.equals(this.duration, item.duration) &&
        Objects.equals(this.identifiers, item.identifiers) &&
        Objects.equals(this.ids, item.ids) &&
        Objects.equals(this.imagesMixin, item.imagesMixin) &&
        Objects.equals(this.itemOf, item.itemOf) &&
        Objects.equals(this.musicCode, item.musicCode) &&
        Objects.equals(this.offsets, item.offsets) &&
        Objects.equals(this.partner, item.partner) &&
        Objects.equals(this.pid, item.pid) &&
        Objects.equals(this.playEvents, item.playEvents) &&
        Objects.equals(this.publisher, item.publisher) &&
        Objects.equals(this.recordLabel, item.recordLabel) &&
        Objects.equals(this.recordingDate, item.recordingDate) &&
        Objects.equals(this.releaseTitle, item.releaseTitle) &&
        Objects.equals(this.snippetUrl, item.snippetUrl) &&
        Objects.equals(this.sourceMedia, item.sourceMedia) &&
        Objects.equals(this.synopses, item.synopses) &&
        Objects.equals(this.title, item.title) &&
        Objects.equals(this.trackNumber, item.trackNumber) &&
        Objects.equals(this.trackSide, item.trackSide) &&
        Objects.equals(this.type, item.type) &&
        Objects.equals(this.updatedTime, item.updatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogueNumber, contributionsMixin, duration, identifiers, ids, imagesMixin, itemOf, musicCode, offsets, partner, pid, playEvents, publisher, recordLabel, recordingDate, releaseTitle, snippetUrl, sourceMedia, synopses, title, trackNumber, trackSide, type, updatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    catalogueNumber: ").append(toIndentedString(catalogueNumber)).append("\n");
    sb.append("    contributionsMixin: ").append(toIndentedString(contributionsMixin)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    imagesMixin: ").append(toIndentedString(imagesMixin)).append("\n");
    sb.append("    itemOf: ").append(toIndentedString(itemOf)).append("\n");
    sb.append("    musicCode: ").append(toIndentedString(musicCode)).append("\n");
    sb.append("    offsets: ").append(toIndentedString(offsets)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    playEvents: ").append(toIndentedString(playEvents)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    recordLabel: ").append(toIndentedString(recordLabel)).append("\n");
    sb.append("    recordingDate: ").append(toIndentedString(recordingDate)).append("\n");
    sb.append("    releaseTitle: ").append(toIndentedString(releaseTitle)).append("\n");
    sb.append("    snippetUrl: ").append(toIndentedString(snippetUrl)).append("\n");
    sb.append("    sourceMedia: ").append(toIndentedString(sourceMedia)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trackNumber: ").append(toIndentedString(trackNumber)).append("\n");
    sb.append("    trackSide: ").append(toIndentedString(trackSide)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catalogue_number");
    openapiFields.add("contributions_mixin");
    openapiFields.add("duration");
    openapiFields.add("identifiers");
    openapiFields.add("ids");
    openapiFields.add("images_mixin");
    openapiFields.add("item_of");
    openapiFields.add("music_code");
    openapiFields.add("offsets");
    openapiFields.add("partner");
    openapiFields.add("pid");
    openapiFields.add("play_events");
    openapiFields.add("publisher");
    openapiFields.add("record_label");
    openapiFields.add("recording_date");
    openapiFields.add("release_title");
    openapiFields.add("snippet_url");
    openapiFields.add("source_media");
    openapiFields.add("synopses");
    openapiFields.add("title");
    openapiFields.add("track_number");
    openapiFields.add("track_side");
    openapiFields.add("type");
    openapiFields.add("updated_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("partner");
    openapiRequiredFields.add("pid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catalogue_number") != null && !jsonObj.get("catalogue_number").isJsonNull()) && !jsonObj.get("catalogue_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogue_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogue_number").toString()));
      }
      // validate the optional field `contributions_mixin`
      if (jsonObj.get("contributions_mixin") != null && !jsonObj.get("contributions_mixin").isJsonNull()) {
        ContributionsMixin.validateJsonElement(jsonObj.get("contributions_mixin"));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        Identifiers.validateJsonElement(jsonObj.get("identifiers"));
      }
      // validate the optional field `ids`
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) {
        Ids.validateJsonElement(jsonObj.get("ids"));
      }
      // validate the optional field `images_mixin`
      if (jsonObj.get("images_mixin") != null && !jsonObj.get("images_mixin").isJsonNull()) {
        ImagesMixin.validateJsonElement(jsonObj.get("images_mixin"));
      }
      // validate the optional field `item_of`
      if (jsonObj.get("item_of") != null && !jsonObj.get("item_of").isJsonNull()) {
        Reference.validateJsonElement(jsonObj.get("item_of"));
      }
      if ((jsonObj.get("music_code") != null && !jsonObj.get("music_code").isJsonNull()) && !jsonObj.get("music_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `music_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("music_code").toString()));
      }
      // validate the optional field `offsets`
      if (jsonObj.get("offsets") != null && !jsonObj.get("offsets").isJsonNull()) {
        Offsets.validateJsonElement(jsonObj.get("offsets"));
      }
      if (!jsonObj.get("partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner").toString()));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      // validate the optional field `play_events`
      if (jsonObj.get("play_events") != null && !jsonObj.get("play_events").isJsonNull()) {
        PlayEvents.validateJsonElement(jsonObj.get("play_events"));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("record_label") != null && !jsonObj.get("record_label").isJsonNull()) && !jsonObj.get("record_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `record_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("record_label").toString()));
      }
      if ((jsonObj.get("recording_date") != null && !jsonObj.get("recording_date").isJsonNull()) && !jsonObj.get("recording_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_date").toString()));
      }
      if ((jsonObj.get("release_title") != null && !jsonObj.get("release_title").isJsonNull()) && !jsonObj.get("release_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_title").toString()));
      }
      if ((jsonObj.get("snippet_url") != null && !jsonObj.get("snippet_url").isJsonNull()) && !jsonObj.get("snippet_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet_url").toString()));
      }
      if ((jsonObj.get("source_media") != null && !jsonObj.get("source_media").isJsonNull()) && !jsonObj.get("source_media").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_media` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_media").toString()));
      }
      // validate the optional field `synopses`
      if (jsonObj.get("synopses") != null && !jsonObj.get("synopses").isJsonNull()) {
        Synopses.validateJsonElement(jsonObj.get("synopses"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("track_number") != null && !jsonObj.get("track_number").isJsonNull()) && !jsonObj.get("track_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track_number").toString()));
      }
      if ((jsonObj.get("track_side") != null && !jsonObj.get("track_side").isJsonNull()) && !jsonObj.get("track_side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track_side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track_side").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

