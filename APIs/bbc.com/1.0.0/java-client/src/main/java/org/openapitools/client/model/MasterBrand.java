/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Identifiers;
import org.openapitools.client.model.ImageLink;
import org.openapitools.client.model.ImagesMixin;
import org.openapitools.client.model.MasterBrandCompetitionWarning;
import org.openapitools.client.model.MasterBrandMasterBrandDateRange;
import org.openapitools.client.model.MasterBrandSynopses;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MasterBrand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MasterBrand {
  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_COMPETITION_WARNING = "competition_warning";
  @SerializedName(SERIALIZED_NAME_COMPETITION_WARNING)
  private MasterBrandCompetitionWarning competitionWarning;

  public static final String SERIALIZED_NAME_IDENT = "ident";
  @SerializedName(SERIALIZED_NAME_IDENT)
  private String ident;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Identifiers identifiers;

  public static final String SERIALIZED_NAME_IMAGE_LINK = "image_link";
  @SerializedName(SERIALIZED_NAME_IMAGE_LINK)
  private ImageLink imageLink;

  public static final String SERIALIZED_NAME_IMAGES_MIXIN = "images_mixin";
  @SerializedName(SERIALIZED_NAME_IMAGES_MIXIN)
  private ImagesMixin imagesMixin;

  public static final String SERIALIZED_NAME_MASTER_BRAND_DATE_RANGE = "master_brand_date_range";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND_DATE_RANGE)
  private MasterBrandMasterBrandDateRange masterBrandDateRange;

  public static final String SERIALIZED_NAME_MID = "mid";
  @SerializedName(SERIALIZED_NAME_MID)
  private String mid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private MasterBrandSynopses synopses;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL_KEY = "url_key";
  @SerializedName(SERIALIZED_NAME_URL_KEY)
  private String urlKey;

  public MasterBrand() {
  }

  public MasterBrand colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * Get colour
   * @return colour
   */
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }


  public MasterBrand competitionWarning(MasterBrandCompetitionWarning competitionWarning) {
    this.competitionWarning = competitionWarning;
    return this;
  }

  /**
   * Get competitionWarning
   * @return competitionWarning
   */
  @javax.annotation.Nullable
  public MasterBrandCompetitionWarning getCompetitionWarning() {
    return competitionWarning;
  }

  public void setCompetitionWarning(MasterBrandCompetitionWarning competitionWarning) {
    this.competitionWarning = competitionWarning;
  }


  public MasterBrand ident(String ident) {
    this.ident = ident;
    return this;
  }

  /**
   * Get ident
   * @return ident
   */
  @javax.annotation.Nullable
  public String getIdent() {
    return ident;
  }

  public void setIdent(String ident) {
    this.ident = ident;
  }


  public MasterBrand identifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Identifiers getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Identifiers identifiers) {
    this.identifiers = identifiers;
  }


  public MasterBrand imageLink(ImageLink imageLink) {
    this.imageLink = imageLink;
    return this;
  }

  /**
   * Get imageLink
   * @return imageLink
   */
  @javax.annotation.Nullable
  public ImageLink getImageLink() {
    return imageLink;
  }

  public void setImageLink(ImageLink imageLink) {
    this.imageLink = imageLink;
  }


  public MasterBrand imagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
    return this;
  }

  /**
   * Get imagesMixin
   * @return imagesMixin
   */
  @javax.annotation.Nullable
  public ImagesMixin getImagesMixin() {
    return imagesMixin;
  }

  public void setImagesMixin(ImagesMixin imagesMixin) {
    this.imagesMixin = imagesMixin;
  }


  public MasterBrand masterBrandDateRange(MasterBrandMasterBrandDateRange masterBrandDateRange) {
    this.masterBrandDateRange = masterBrandDateRange;
    return this;
  }

  /**
   * Get masterBrandDateRange
   * @return masterBrandDateRange
   */
  @javax.annotation.Nullable
  public MasterBrandMasterBrandDateRange getMasterBrandDateRange() {
    return masterBrandDateRange;
  }

  public void setMasterBrandDateRange(MasterBrandMasterBrandDateRange masterBrandDateRange) {
    this.masterBrandDateRange = masterBrandDateRange;
  }


  public MasterBrand mid(String mid) {
    this.mid = mid;
    return this;
  }

  /**
   * Get mid
   * @return mid
   */
  @javax.annotation.Nonnull
  public String getMid() {
    return mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }


  public MasterBrand name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MasterBrand partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nonnull
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public MasterBrand position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public MasterBrand synopses(MasterBrandSynopses synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nullable
  public MasterBrandSynopses getSynopses() {
    return synopses;
  }

  public void setSynopses(MasterBrandSynopses synopses) {
    this.synopses = synopses;
  }


  public MasterBrand title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MasterBrand urlKey(String urlKey) {
    this.urlKey = urlKey;
    return this;
  }

  /**
   * Get urlKey
   * @return urlKey
   */
  @javax.annotation.Nullable
  public String getUrlKey() {
    return urlKey;
  }

  public void setUrlKey(String urlKey) {
    this.urlKey = urlKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterBrand masterBrand = (MasterBrand) o;
    return Objects.equals(this.colour, masterBrand.colour) &&
        Objects.equals(this.competitionWarning, masterBrand.competitionWarning) &&
        Objects.equals(this.ident, masterBrand.ident) &&
        Objects.equals(this.identifiers, masterBrand.identifiers) &&
        Objects.equals(this.imageLink, masterBrand.imageLink) &&
        Objects.equals(this.imagesMixin, masterBrand.imagesMixin) &&
        Objects.equals(this.masterBrandDateRange, masterBrand.masterBrandDateRange) &&
        Objects.equals(this.mid, masterBrand.mid) &&
        Objects.equals(this.name, masterBrand.name) &&
        Objects.equals(this.partner, masterBrand.partner) &&
        Objects.equals(this.position, masterBrand.position) &&
        Objects.equals(this.synopses, masterBrand.synopses) &&
        Objects.equals(this.title, masterBrand.title) &&
        Objects.equals(this.urlKey, masterBrand.urlKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colour, competitionWarning, ident, identifiers, imageLink, imagesMixin, masterBrandDateRange, mid, name, partner, position, synopses, title, urlKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterBrand {\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    competitionWarning: ").append(toIndentedString(competitionWarning)).append("\n");
    sb.append("    ident: ").append(toIndentedString(ident)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    imageLink: ").append(toIndentedString(imageLink)).append("\n");
    sb.append("    imagesMixin: ").append(toIndentedString(imagesMixin)).append("\n");
    sb.append("    masterBrandDateRange: ").append(toIndentedString(masterBrandDateRange)).append("\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    urlKey: ").append(toIndentedString(urlKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colour");
    openapiFields.add("competition_warning");
    openapiFields.add("ident");
    openapiFields.add("identifiers");
    openapiFields.add("image_link");
    openapiFields.add("images_mixin");
    openapiFields.add("master_brand_date_range");
    openapiFields.add("mid");
    openapiFields.add("name");
    openapiFields.add("partner");
    openapiFields.add("position");
    openapiFields.add("synopses");
    openapiFields.add("title");
    openapiFields.add("url_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mid");
    openapiRequiredFields.add("partner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MasterBrand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasterBrand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasterBrand is not found in the empty JSON string", MasterBrand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasterBrand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasterBrand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MasterBrand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      // validate the optional field `competition_warning`
      if (jsonObj.get("competition_warning") != null && !jsonObj.get("competition_warning").isJsonNull()) {
        MasterBrandCompetitionWarning.validateJsonElement(jsonObj.get("competition_warning"));
      }
      if ((jsonObj.get("ident") != null && !jsonObj.get("ident").isJsonNull()) && !jsonObj.get("ident").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ident` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ident").toString()));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        Identifiers.validateJsonElement(jsonObj.get("identifiers"));
      }
      // validate the optional field `image_link`
      if (jsonObj.get("image_link") != null && !jsonObj.get("image_link").isJsonNull()) {
        ImageLink.validateJsonElement(jsonObj.get("image_link"));
      }
      // validate the optional field `images_mixin`
      if (jsonObj.get("images_mixin") != null && !jsonObj.get("images_mixin").isJsonNull()) {
        ImagesMixin.validateJsonElement(jsonObj.get("images_mixin"));
      }
      // validate the optional field `master_brand_date_range`
      if (jsonObj.get("master_brand_date_range") != null && !jsonObj.get("master_brand_date_range").isJsonNull()) {
        MasterBrandMasterBrandDateRange.validateJsonElement(jsonObj.get("master_brand_date_range"));
      }
      if (!jsonObj.get("mid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner").toString()));
      }
      // validate the optional field `synopses`
      if (jsonObj.get("synopses") != null && !jsonObj.get("synopses").isJsonNull()) {
        MasterBrandSynopses.validateJsonElement(jsonObj.get("synopses"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url_key") != null && !jsonObj.get("url_key").isJsonNull()) && !jsonObj.get("url_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasterBrand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasterBrand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasterBrand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasterBrand.class));

       return (TypeAdapter<T>) new TypeAdapter<MasterBrand>() {
           @Override
           public void write(JsonWriter out, MasterBrand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasterBrand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MasterBrand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MasterBrand
   * @throws IOException if the JSON string is invalid with respect to MasterBrand
   */
  public static MasterBrand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasterBrand.class);
  }

  /**
   * Convert an instance of MasterBrand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

