/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeprecationAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:25.242429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeprecationAttributes {
  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DEPRECATED_SINCE = "deprecated_since";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_SINCE)
  private String deprecatedSince;

  public static final String SERIALIZED_NAME_REPLACED_BY = "replaced_by";
  @SerializedName(SERIALIZED_NAME_REPLACED_BY)
  private String replacedBy;

  public DeprecationAttributes() {
  }

  public DeprecationAttributes deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Get deprecated
   * @return deprecated
   */
  @javax.annotation.Nonnull
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public DeprecationAttributes deprecatedSince(String deprecatedSince) {
    this.deprecatedSince = deprecatedSince;
    return this;
  }

  /**
   * Get deprecatedSince
   * @return deprecatedSince
   */
  @javax.annotation.Nonnull
  public String getDeprecatedSince() {
    return deprecatedSince;
  }

  public void setDeprecatedSince(String deprecatedSince) {
    this.deprecatedSince = deprecatedSince;
  }


  public DeprecationAttributes replacedBy(String replacedBy) {
    this.replacedBy = replacedBy;
    return this;
  }

  /**
   * Get replacedBy
   * @return replacedBy
   */
  @javax.annotation.Nonnull
  public String getReplacedBy() {
    return replacedBy;
  }

  public void setReplacedBy(String replacedBy) {
    this.replacedBy = replacedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeprecationAttributes deprecationAttributes = (DeprecationAttributes) o;
    return Objects.equals(this.deprecated, deprecationAttributes.deprecated) &&
        Objects.equals(this.deprecatedSince, deprecationAttributes.deprecatedSince) &&
        Objects.equals(this.replacedBy, deprecationAttributes.replacedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecated, deprecatedSince, replacedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeprecationAttributes {\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    deprecatedSince: ").append(toIndentedString(deprecatedSince)).append("\n");
    sb.append("    replacedBy: ").append(toIndentedString(replacedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecated");
    openapiFields.add("deprecated_since");
    openapiFields.add("replaced_by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deprecated");
    openapiRequiredFields.add("deprecated_since");
    openapiRequiredFields.add("replaced_by");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeprecationAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeprecationAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeprecationAttributes is not found in the empty JSON string", DeprecationAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeprecationAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeprecationAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeprecationAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deprecated_since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecated_since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecated_since").toString()));
      }
      if (!jsonObj.get("replaced_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaced_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaced_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeprecationAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeprecationAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeprecationAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeprecationAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<DeprecationAttributes>() {
           @Override
           public void write(JsonWriter out, DeprecationAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeprecationAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeprecationAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeprecationAttributes
   * @throws IOException if the JSON string is invalid with respect to DeprecationAttributes
   */
  public static DeprecationAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeprecationAttributes.class);
  }

  /**
   * Convert an instance of DeprecationAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

