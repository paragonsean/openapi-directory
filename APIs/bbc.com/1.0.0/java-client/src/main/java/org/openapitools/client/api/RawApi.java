/*
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Nitro;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RawApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RawApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RawApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRawAncestors
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawAncestorsCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/episodes/{pid}/ancestors/"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawAncestorsValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawAncestors(Async)");
        }

        return getRawAncestorsCall(pid, _callback);

    }

    /**
     * Get raw ancestors
     * Get raw ancestors
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawAncestors(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawAncestorsWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw ancestors
     * Get raw ancestors
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawAncestorsWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawAncestorsValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw ancestors (asynchronously)
     * Get raw ancestors
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawAncestorsAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawAncestorsValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawBrand
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawBrandCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brands/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawBrandValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawBrand(Async)");
        }

        return getRawBrandCall(pid, _callback);

    }

    /**
     * Get raw brand
     * Get raw brand
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawBrand(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawBrandWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw brand
     * Get raw brand
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawBrandWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawBrandValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw brand (asynchronously)
     * Get raw brand
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawBrandAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawBrandValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawBrandFranchises
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawBrandFranchisesCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brands/{pid}/franchises/"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawBrandFranchisesValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawBrandFranchises(Async)");
        }

        return getRawBrandFranchisesCall(pid, _callback);

    }

    /**
     * Get raw brand franchise
     * Get raw brand franchises
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawBrandFranchises(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawBrandFranchisesWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw brand franchise
     * Get raw brand franchises
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawBrandFranchisesWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawBrandFranchisesValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw brand franchise (asynchronously)
     * Get raw brand franchises
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawBrandFranchisesAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawBrandFranchisesValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawEpisode
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawEpisodeCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/episodes/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawEpisodeValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawEpisode(Async)");
        }

        return getRawEpisodeCall(pid, _callback);

    }

    /**
     * Get raw episode
     * Get raw episode
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawEpisode(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawEpisodeWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw episode
     * Get raw episode
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawEpisodeWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawEpisodeValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw episode (asynchronously)
     * Get raw episode
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawEpisodeAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawEpisodeValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawFormats
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawFormatsCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/episodes/{pid}/formats/"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawFormatsValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawFormats(Async)");
        }

        return getRawFormatsCall(pid, _callback);

    }

    /**
     * Get raw formats
     * Get raw formats
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawFormats(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawFormatsWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw formats
     * Get raw formats
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawFormatsWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawFormatsValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw formats (asynchronously)
     * Get raw formats
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawFormatsAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawFormatsValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawGenreGroups
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawGenreGroupsCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/episodes/{pid}/genre_groups/"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawGenreGroupsValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawGenreGroups(Async)");
        }

        return getRawGenreGroupsCall(pid, _callback);

    }

    /**
     * Get raw genre groups
     * Get raw genre groups
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawGenreGroups(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawGenreGroupsWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw genre groups
     * Get raw genre groups
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawGenreGroupsWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawGenreGroupsValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw genre groups (asynchronously)
     * Get raw genre groups
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawGenreGroupsAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawGenreGroupsValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawImage
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawImageCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/images/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawImageValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawImage(Async)");
        }

        return getRawImageCall(pid, _callback);

    }

    /**
     * Get raw image
     * Get raw image
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawImage(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawImageWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw image
     * Get raw image
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawImageWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawImageValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw image (asynchronously)
     * Get raw image
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawImageAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawImageValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawMasterbrand
     * @param mbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawMasterbrandCall(String mbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/master_brands/{mbid}"
            .replace("{" + "mbid" + "}", localVarApiClient.escapeString(mbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawMasterbrandValidateBeforeCall(String mbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mbid' is set
        if (mbid == null) {
            throw new ApiException("Missing the required parameter 'mbid' when calling getRawMasterbrand(Async)");
        }

        return getRawMasterbrandCall(mbid, _callback);

    }

    /**
     * Get raw masterbrand
     * Get raw masterbrand
     * @param mbid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawMasterbrand(String mbid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawMasterbrandWithHttpInfo(mbid);
        return localVarResp.getData();
    }

    /**
     * Get raw masterbrand
     * Get raw masterbrand
     * @param mbid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawMasterbrandWithHttpInfo(String mbid) throws ApiException {
        okhttp3.Call localVarCall = getRawMasterbrandValidateBeforeCall(mbid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw masterbrand (asynchronously)
     * Get raw masterbrand
     * @param mbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawMasterbrandAsync(String mbid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawMasterbrandValidateBeforeCall(mbid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawPromotion
     * @param pid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawPromotionCall(String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawPromotionValidateBeforeCall(String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRawPromotion(Async)");
        }

        return getRawPromotionCall(pid, _callback);

    }

    /**
     * Get raw promotion
     * Get raw promotion
     * @param pid  (required)
     * @return Nitro
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public Nitro getRawPromotion(String pid) throws ApiException {
        ApiResponse<Nitro> localVarResp = getRawPromotionWithHttpInfo(pid);
        return localVarResp.getData();
    }

    /**
     * Get raw promotion
     * Get raw promotion
     * @param pid  (required)
     * @return ApiResponse&lt;Nitro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nitro> getRawPromotionWithHttpInfo(String pid) throws ApiException {
        okhttp3.Call localVarCall = getRawPromotionValidateBeforeCall(pid, null);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get raw promotion (asynchronously)
     * Get raw promotion
     * @param pid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nitro response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawPromotionAsync(String pid, final ApiCallback<Nitro> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawPromotionValidateBeforeCall(pid, _callback);
        Type localVarReturnType = new TypeToken<Nitro>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
