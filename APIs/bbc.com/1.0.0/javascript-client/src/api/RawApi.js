/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Nitro from '../model/Nitro';

/**
* Raw service.
* @module api/RawApi
* @version 1.0.0
*/
export default class RawApi {

    /**
    * Constructs a new RawApi. 
    * @alias module:api/RawApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRawAncestors operation.
     * @callback module:api/RawApi~getRawAncestorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw ancestors
     * Get raw ancestors
     * @param {String} pid 
     * @param {module:api/RawApi~getRawAncestorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawAncestors(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawAncestors");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/episodes/{pid}/ancestors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawBrand operation.
     * @callback module:api/RawApi~getRawBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw brand
     * Get raw brand
     * @param {String} pid 
     * @param {module:api/RawApi~getRawBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawBrand(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawBrand");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/brands/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawBrandFranchises operation.
     * @callback module:api/RawApi~getRawBrandFranchisesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw brand franchise
     * Get raw brand franchises
     * @param {String} pid 
     * @param {module:api/RawApi~getRawBrandFranchisesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawBrandFranchises(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawBrandFranchises");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/brands/{pid}/franchises/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawEpisode operation.
     * @callback module:api/RawApi~getRawEpisodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw episode
     * Get raw episode
     * @param {String} pid 
     * @param {module:api/RawApi~getRawEpisodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawEpisode(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawEpisode");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/episodes/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawFormats operation.
     * @callback module:api/RawApi~getRawFormatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw formats
     * Get raw formats
     * @param {String} pid 
     * @param {module:api/RawApi~getRawFormatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawFormats(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawFormats");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/episodes/{pid}/formats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawGenreGroups operation.
     * @callback module:api/RawApi~getRawGenreGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw genre groups
     * Get raw genre groups
     * @param {String} pid 
     * @param {module:api/RawApi~getRawGenreGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawGenreGroups(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawGenreGroups");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/episodes/{pid}/genre_groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawImage operation.
     * @callback module:api/RawApi~getRawImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw image
     * Get raw image
     * @param {String} pid 
     * @param {module:api/RawApi~getRawImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawImage(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawImage");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/images/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawMasterbrand operation.
     * @callback module:api/RawApi~getRawMasterbrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw masterbrand
     * Get raw masterbrand
     * @param {String} mbid 
     * @param {module:api/RawApi~getRawMasterbrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawMasterbrand(mbid, callback) {
      let postBody = null;
      // verify the required parameter 'mbid' is set
      if (mbid === undefined || mbid === null) {
        throw new Error("Missing the required parameter 'mbid' when calling getRawMasterbrand");
      }

      let pathParams = {
        'mbid': mbid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/master_brands/{mbid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawPromotion operation.
     * @callback module:api/RawApi~getRawPromotionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nitro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw promotion
     * Get raw promotion
     * @param {String} pid 
     * @param {module:api/RawApi~getRawPromotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nitro}
     */
    getRawPromotion(pid, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRawPromotion");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Nitro;
      return this.apiClient.callApi(
        '/v1/promotions/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
