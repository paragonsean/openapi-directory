/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffectedBy from './AffectedBy';
import DependencyOn from './DependencyOn';
import Prohibits from './Prohibits';
import ReleaseStatusType from './ReleaseStatusType';

/**
 * The Mixin model module.
 * @module model/Mixin
 * @version 1.0.0
 */
class Mixin {
    /**
     * Constructs a new <code>Mixin</code>.
     * @alias module:model/Mixin
     * @param name {String} 
     * @param title {String} 
     */
    constructor(name, title) { 
        
        Mixin.initialize(this, name, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, title) { 
        obj['name'] = name;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Mixin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mixin} obj Optional instance to populate.
     * @return {module:model/Mixin} The populated <code>Mixin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mixin();

            if (data.hasOwnProperty('affected_by')) {
                obj['affected_by'] = ApiClient.convertToType(data['affected_by'], [AffectedBy]);
            }
            if (data.hasOwnProperty('dependency_on')) {
                obj['dependency_on'] = ApiClient.convertToType(data['dependency_on'], [DependencyOn]);
            }
            if (data.hasOwnProperty('depends_on')) {
                obj['depends_on'] = ApiClient.convertToType(data['depends_on'], 'String');
            }
            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('deprecated_since')) {
                obj['deprecated_since'] = ApiClient.convertToType(data['deprecated_since'], 'String');
            }
            if (data.hasOwnProperty('guaranteed_until')) {
                obj['guaranteed_until'] = ApiClient.convertToType(data['guaranteed_until'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prohibits')) {
                obj['prohibits'] = ApiClient.convertToType(data['prohibits'], [Prohibits]);
            }
            if (data.hasOwnProperty('release_status')) {
                obj['release_status'] = ReleaseStatusType.constructFromObject(data['release_status']);
            }
            if (data.hasOwnProperty('replaced_by')) {
                obj['replaced_by'] = ApiClient.convertToType(data['replaced_by'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mixin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mixin</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Mixin.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['affected_by']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['affected_by'])) {
                throw new Error("Expected the field `affected_by` to be an array in the JSON data but got " + data['affected_by']);
            }
            // validate the optional field `affected_by` (array)
            for (const item of data['affected_by']) {
                AffectedBy.validateJSON(item);
            };
        }
        if (data['dependency_on']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependency_on'])) {
                throw new Error("Expected the field `dependency_on` to be an array in the JSON data but got " + data['dependency_on']);
            }
            // validate the optional field `dependency_on` (array)
            for (const item of data['dependency_on']) {
                DependencyOn.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['depends_on'] && !(typeof data['depends_on'] === 'string' || data['depends_on'] instanceof String)) {
            throw new Error("Expected the field `depends_on` to be a primitive type in the JSON string but got " + data['depends_on']);
        }
        // ensure the json data is a string
        if (data['deprecated_since'] && !(typeof data['deprecated_since'] === 'string' || data['deprecated_since'] instanceof String)) {
            throw new Error("Expected the field `deprecated_since` to be a primitive type in the JSON string but got " + data['deprecated_since']);
        }
        // ensure the json data is a string
        if (data['guaranteed_until'] && !(typeof data['guaranteed_until'] === 'string' || data['guaranteed_until'] instanceof String)) {
            throw new Error("Expected the field `guaranteed_until` to be a primitive type in the JSON string but got " + data['guaranteed_until']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['prohibits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prohibits'])) {
                throw new Error("Expected the field `prohibits` to be an array in the JSON data but got " + data['prohibits']);
            }
            // validate the optional field `prohibits` (array)
            for (const item of data['prohibits']) {
                Prohibits.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['replaced_by'] && !(typeof data['replaced_by'] === 'string' || data['replaced_by'] instanceof String)) {
            throw new Error("Expected the field `replaced_by` to be a primitive type in the JSON string but got " + data['replaced_by']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Mixin.RequiredProperties = ["name", "title"];

/**
 * @member {Array.<module:model/AffectedBy>} affected_by
 */
Mixin.prototype['affected_by'] = undefined;

/**
 * @member {Array.<module:model/DependencyOn>} dependency_on
 */
Mixin.prototype['dependency_on'] = undefined;

/**
 * @member {String} depends_on
 */
Mixin.prototype['depends_on'] = undefined;

/**
 * @member {Boolean} deprecated
 */
Mixin.prototype['deprecated'] = undefined;

/**
 * @member {String} deprecated_since
 */
Mixin.prototype['deprecated_since'] = undefined;

/**
 * @member {String} guaranteed_until
 */
Mixin.prototype['guaranteed_until'] = undefined;

/**
 * @member {String} href
 */
Mixin.prototype['href'] = undefined;

/**
 * @member {String} name
 */
Mixin.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Prohibits>} prohibits
 */
Mixin.prototype['prohibits'] = undefined;

/**
 * @member {module:model/ReleaseStatusType} release_status
 */
Mixin.prototype['release_status'] = undefined;

/**
 * @member {String} replaced_by
 */
Mixin.prototype['replaced_by'] = undefined;

/**
 * @member {String} title
 */
Mixin.prototype['title'] = undefined;






export default Mixin;

