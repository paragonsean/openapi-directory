/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenreGroupGenres from './GenreGroupGenres';

/**
 * The GenreGroup model module.
 * @module model/GenreGroup
 * @version 1.0.0
 */
class GenreGroup {
    /**
     * Constructs a new <code>GenreGroup</code>.
     * @alias module:model/GenreGroup
     * @param genres {module:model/GenreGroupGenres} 
     */
    constructor(genres) { 
        
        GenreGroup.initialize(this, genres);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, genres) { 
        obj['genres'] = genres;
    }

    /**
     * Constructs a <code>GenreGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenreGroup} obj Optional instance to populate.
     * @return {module:model/GenreGroup} The populated <code>GenreGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenreGroup();

            if (data.hasOwnProperty('genres')) {
                obj['genres'] = GenreGroupGenres.constructFromObject(data['genres']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenreGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenreGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GenreGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `genres`
        if (data['genres']) { // data not null
          GenreGroupGenres.validateJSON(data['genres']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GenreGroup.RequiredProperties = ["genres"];

/**
 * @member {module:model/GenreGroupGenres} genres
 */
GenreGroup.prototype['genres'] = undefined;

/**
 * @member {String} id
 */
GenreGroup.prototype['id'] = undefined;

/**
 * @member {String} type
 */
GenreGroup.prototype['type'] = undefined;






export default GenreGroup;

