/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Embargoed from './Embargoed';
import Identifiers from './Identifiers';
import SourceAsset from './SourceAsset';
import Synopses from './Synopses';

/**
 * The Image model module.
 * @module model/Image
 * @version 1.0.0
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * @alias module:model/Image
     * @param embargoed {module:model/Embargoed} 
     * @param partner {String} 
     * @param pid {String} 
     */
    constructor(embargoed, partner, pid) { 
        
        Image.initialize(this, embargoed, partner, pid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, embargoed, partner, pid) { 
        obj['embargoed'] = embargoed;
        obj['partner'] = partner;
        obj['pid'] = pid;
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('embargoed')) {
                obj['embargoed'] = Embargoed.constructFromObject(data['embargoed']);
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('shoot_date')) {
                obj['shoot_date'] = ApiClient.convertToType(data['shoot_date'], 'Date');
            }
            if (data.hasOwnProperty('source_asset')) {
                obj['source_asset'] = SourceAsset.constructFromObject(data['source_asset']);
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = Synopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('template_url')) {
                obj['template_url'] = ApiClient.convertToType(data['template_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Image.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `source_asset`
        if (data['source_asset']) { // data not null
          SourceAsset.validateJSON(data['source_asset']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          Synopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['template_url'] && !(typeof data['template_url'] === 'string' || data['template_url'] instanceof String)) {
            throw new Error("Expected the field `template_url` to be a primitive type in the JSON string but got " + data['template_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Image.RequiredProperties = ["embargoed", "partner", "pid"];

/**
 * @member {String} author
 */
Image.prototype['author'] = undefined;

/**
 * @member {module:model/Embargoed} embargoed
 */
Image.prototype['embargoed'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Image.prototype['identifiers'] = undefined;

/**
 * @member {String} partner
 */
Image.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
Image.prototype['pid'] = undefined;

/**
 * @member {Date} shoot_date
 */
Image.prototype['shoot_date'] = undefined;

/**
 * @member {module:model/SourceAsset} source_asset
 */
Image.prototype['source_asset'] = undefined;

/**
 * @member {module:model/Synopses} synopses
 */
Image.prototype['synopses'] = undefined;

/**
 * @member {String} template_url
 */
Image.prototype['template_url'] = undefined;

/**
 * @member {String} title
 */
Image.prototype['title'] = undefined;

/**
 * @member {String} type
 */
Image.prototype['type'] = undefined;






export default Image;

