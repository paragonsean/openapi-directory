/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilityDebug from './AvailabilityDebug';
import AvailabilityOf from './AvailabilityOf';
import AvailabilityType from './AvailabilityType';
import DateRange from './DateRange';
import ScheduledTime from './ScheduledTime';

/**
 * The Availability model module.
 * @module model/Availability
 * @version 1.0.0
 */
class Availability {
    /**
     * Constructs a new <code>Availability</code>.
     * @alias module:model/Availability
     * @param availabilityType {module:model/AvailabilityType} 
     * @param status {String} 
     */
    constructor(availabilityType, status) { 
        
        Availability.initialize(this, availabilityType, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availabilityType, status) { 
        obj['availability_type'] = availabilityType;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Availability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Availability} obj Optional instance to populate.
     * @return {module:model/Availability} The populated <code>Availability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Availability();

            if (data.hasOwnProperty('accurate_programme_time')) {
                obj['accurate_programme_time'] = DateRange.constructFromObject(data['accurate_programme_time']);
            }
            if (data.hasOwnProperty('actual_start')) {
                obj['actual_start'] = ApiClient.convertToType(data['actual_start'], 'Date');
            }
            if (data.hasOwnProperty('availability-debug')) {
                obj['availability-debug'] = AvailabilityDebug.constructFromObject(data['availability-debug']);
            }
            if (data.hasOwnProperty('availability_of')) {
                obj['availability_of'] = ApiClient.convertToType(data['availability_of'], [AvailabilityOf]);
            }
            if (data.hasOwnProperty('availability_type')) {
                obj['availability_type'] = AvailabilityType.constructFromObject(data['availability_type']);
            }
            if (data.hasOwnProperty('media_availability_time')) {
                obj['media_availability_time'] = DateRange.constructFromObject(data['media_availability_time']);
            }
            if (data.hasOwnProperty('media_set')) {
                obj['media_set'] = ApiClient.convertToType(data['media_set'], ['String']);
            }
            if (data.hasOwnProperty('revocation_status')) {
                obj['revocation_status'] = ApiClient.convertToType(data['revocation_status'], 'String');
            }
            if (data.hasOwnProperty('scheduled_time')) {
                obj['scheduled_time'] = ScheduledTime.constructFromObject(data['scheduled_time']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Availability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Availability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Availability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accurate_programme_time`
        if (data['accurate_programme_time']) { // data not null
          DateRange.validateJSON(data['accurate_programme_time']);
        }
        // validate the optional field `availability-debug`
        if (data['availability-debug']) { // data not null
          AvailabilityDebug.validateJSON(data['availability-debug']);
        }
        if (data['availability_of']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability_of'])) {
                throw new Error("Expected the field `availability_of` to be an array in the JSON data but got " + data['availability_of']);
            }
            // validate the optional field `availability_of` (array)
            for (const item of data['availability_of']) {
                AvailabilityOf.validateJSON(item);
            };
        }
        // validate the optional field `media_availability_time`
        if (data['media_availability_time']) { // data not null
          DateRange.validateJSON(data['media_availability_time']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['media_set'])) {
            throw new Error("Expected the field `media_set` to be an array in the JSON data but got " + data['media_set']);
        }
        // ensure the json data is a string
        if (data['revocation_status'] && !(typeof data['revocation_status'] === 'string' || data['revocation_status'] instanceof String)) {
            throw new Error("Expected the field `revocation_status` to be a primitive type in the JSON string but got " + data['revocation_status']);
        }
        // validate the optional field `scheduled_time`
        if (data['scheduled_time']) { // data not null
          ScheduledTime.validateJSON(data['scheduled_time']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Availability.RequiredProperties = ["availability_type", "status"];

/**
 * @member {module:model/DateRange} accurate_programme_time
 */
Availability.prototype['accurate_programme_time'] = undefined;

/**
 * @member {Date} actual_start
 */
Availability.prototype['actual_start'] = undefined;

/**
 * @member {module:model/AvailabilityDebug} availability-debug
 */
Availability.prototype['availability-debug'] = undefined;

/**
 * @member {Array.<module:model/AvailabilityOf>} availability_of
 */
Availability.prototype['availability_of'] = undefined;

/**
 * @member {module:model/AvailabilityType} availability_type
 */
Availability.prototype['availability_type'] = undefined;

/**
 * @member {module:model/DateRange} media_availability_time
 */
Availability.prototype['media_availability_time'] = undefined;

/**
 * @member {Array.<String>} media_set
 */
Availability.prototype['media_set'] = undefined;

/**
 * @member {String} revocation_status
 */
Availability.prototype['revocation_status'] = undefined;

/**
 * @member {module:model/ScheduledTime} scheduled_time
 */
Availability.prototype['scheduled_time'] = undefined;

/**
 * @member {String} status
 */
Availability.prototype['status'] = undefined;






export default Availability;

