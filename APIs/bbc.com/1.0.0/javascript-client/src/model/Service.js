/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';
import Identifiers from './Identifiers';
import Ids from './Ids';
import MasterBrandLink from './MasterBrandLink';
import MediaType from './MediaType';

/**
 * The Service model module.
 * @module model/Service
 * @version 1.0.0
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * @alias module:model/Service
     * @param partner {String} 
     * @param sid {String} 
     */
    constructor(partner, sid) { 
        
        Service.initialize(this, partner, sid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partner, sid) { 
        obj['partner'] = partner;
        obj['sid'] = sid;
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('date_range')) {
                obj['date_range'] = DateRange.constructFromObject(data['date_range']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = Ids.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('is_concrete')) {
                obj['is_concrete'] = ApiClient.convertToType(data['is_concrete'], 'Boolean');
            }
            if (data.hasOwnProperty('is_downloadable')) {
                obj['is_downloadable'] = ApiClient.convertToType(data['is_downloadable'], 'Boolean');
            }
            if (data.hasOwnProperty('is_streamable')) {
                obj['is_streamable'] = ApiClient.convertToType(data['is_streamable'], 'Boolean');
            }
            if (data.hasOwnProperty('master_brand_link')) {
                obj['master_brand_link'] = MasterBrandLink.constructFromObject(data['master_brand_link']);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = MediaType.constructFromObject(data['media_type']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Service.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `date_range`
        if (data['date_range']) { // data not null
          DateRange.validateJSON(data['date_range']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `ids`
        if (data['ids']) { // data not null
          Ids.validateJSON(data['ids']);
        }
        // validate the optional field `master_brand_link`
        if (data['master_brand_link']) { // data not null
          MasterBrandLink.validateJSON(data['master_brand_link']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Service.RequiredProperties = ["partner", "sid"];

/**
 * @member {module:model/DateRange} date_range
 */
Service.prototype['date_range'] = undefined;

/**
 * @member {String} description
 */
Service.prototype['description'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Service.prototype['identifiers'] = undefined;

/**
 * @member {module:model/Ids} ids
 */
Service.prototype['ids'] = undefined;

/**
 * @member {Boolean} is_concrete
 */
Service.prototype['is_concrete'] = undefined;

/**
 * @member {Boolean} is_downloadable
 */
Service.prototype['is_downloadable'] = undefined;

/**
 * @member {Boolean} is_streamable
 */
Service.prototype['is_streamable'] = undefined;

/**
 * @member {module:model/MasterBrandLink} master_brand_link
 */
Service.prototype['master_brand_link'] = undefined;

/**
 * @member {module:model/MediaType} media_type
 */
Service.prototype['media_type'] = undefined;

/**
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * @member {String} partner
 */
Service.prototype['partner'] = undefined;

/**
 * @member {String} region
 */
Service.prototype['region'] = undefined;

/**
 * @member {String} sid
 */
Service.prototype['sid'] = undefined;

/**
 * @member {String} type
 */
Service.prototype['type'] = undefined;

/**
 * @member {Date} updated_time
 */
Service.prototype['updated_time'] = undefined;






export default Service;

