/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Deprecated model module.
 * @module model/Deprecated
 * @version 1.0.0
 */
class Deprecated {
    /**
     * Constructs a new <code>Deprecated</code>.
     * @alias module:model/Deprecated
     * @param deprecatedSince {String} 
     * @param name {String} 
     * @param type {String} 
     */
    constructor(deprecatedSince, name, type) { 
        
        Deprecated.initialize(this, deprecatedSince, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deprecatedSince, name, type) { 
        obj['deprecated_since'] = deprecatedSince;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Deprecated</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deprecated} obj Optional instance to populate.
     * @return {module:model/Deprecated} The populated <code>Deprecated</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deprecated();

            if (data.hasOwnProperty('deprecated_since')) {
                obj['deprecated_since'] = ApiClient.convertToType(data['deprecated_since'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('replaced_by')) {
                obj['replaced_by'] = ApiClient.convertToType(data['replaced_by'], 'String');
            }
            if (data.hasOwnProperty('replacement_type')) {
                obj['replacement_type'] = ApiClient.convertToType(data['replacement_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deprecated</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deprecated</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Deprecated.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deprecated_since'] && !(typeof data['deprecated_since'] === 'string' || data['deprecated_since'] instanceof String)) {
            throw new Error("Expected the field `deprecated_since` to be a primitive type in the JSON string but got " + data['deprecated_since']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['replaced_by'] && !(typeof data['replaced_by'] === 'string' || data['replaced_by'] instanceof String)) {
            throw new Error("Expected the field `replaced_by` to be a primitive type in the JSON string but got " + data['replaced_by']);
        }
        // ensure the json data is a string
        if (data['replacement_type'] && !(typeof data['replacement_type'] === 'string' || data['replacement_type'] instanceof String)) {
            throw new Error("Expected the field `replacement_type` to be a primitive type in the JSON string but got " + data['replacement_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Deprecated.RequiredProperties = ["deprecated_since", "name", "type"];

/**
 * @member {String} deprecated_since
 */
Deprecated.prototype['deprecated_since'] = undefined;

/**
 * @member {String} name
 */
Deprecated.prototype['name'] = undefined;

/**
 * @member {String} replaced_by
 */
Deprecated.prototype['replaced_by'] = undefined;

/**
 * @member {String} replacement_type
 */
Deprecated.prototype['replacement_type'] = undefined;

/**
 * @member {String} type
 */
Deprecated.prototype['type'] = undefined;






export default Deprecated;

