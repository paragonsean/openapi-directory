/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Identifiers from './Identifiers';
import Ids from './Ids';
import PidReference from './PidReference';
import TypesWithId from './TypesWithId';
import VersionTypesWithId from './VersionTypesWithId';
import Warnings from './Warnings';

/**
 * The VersionGroupVersionVersion model module.
 * @module model/VersionGroupVersionVersion
 * @version 1.0.0
 */
class VersionGroupVersionVersion {
    /**
     * Constructs a new <code>VersionGroupVersionVersion</code>.
     * @alias module:model/VersionGroupVersionVersion
     * @param pid {String} 
     * @param updatedTime {Date} 
     */
    constructor(pid, updatedTime) { 
        
        VersionGroupVersionVersion.initialize(this, pid, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pid, updatedTime) { 
        obj['pid'] = pid;
        obj['updated_time'] = updatedTime;
    }

    /**
     * Constructs a <code>VersionGroupVersionVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionGroupVersionVersion} obj Optional instance to populate.
     * @return {module:model/VersionGroupVersionVersion} The populated <code>VersionGroupVersionVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionGroupVersionVersion();

            if (data.hasOwnProperty('aspect_ratio')) {
                obj['aspect_ratio'] = ApiClient.convertToType(data['aspect_ratio'], 'String');
            }
            if (data.hasOwnProperty('competition_warning')) {
                obj['competition_warning'] = ApiClient.convertToType(data['competition_warning'], 'Boolean');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = Ids.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('types_with_id')) {
                obj['types_with_id'] = TypesWithId.constructFromObject(data['types_with_id']);
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
            if (data.hasOwnProperty('version_of')) {
                obj['version_of'] = PidReference.constructFromObject(data['version_of']);
            }
            if (data.hasOwnProperty('version_types_with_id')) {
                obj['version_types_with_id'] = VersionTypesWithId.constructFromObject(data['version_types_with_id']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = Warnings.constructFromObject(data['warnings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionGroupVersionVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionGroupVersionVersion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VersionGroupVersionVersion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aspect_ratio'] && !(typeof data['aspect_ratio'] === 'string' || data['aspect_ratio'] instanceof String)) {
            throw new Error("Expected the field `aspect_ratio` to be a primitive type in the JSON string but got " + data['aspect_ratio']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `ids`
        if (data['ids']) { // data not null
          Ids.validateJSON(data['ids']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `types_with_id`
        if (data['types_with_id']) { // data not null
          TypesWithId.validateJSON(data['types_with_id']);
        }
        // validate the optional field `version_of`
        if (data['version_of']) { // data not null
          PidReference.validateJSON(data['version_of']);
        }
        // validate the optional field `version_types_with_id`
        if (data['version_types_with_id']) { // data not null
          VersionTypesWithId.validateJSON(data['version_types_with_id']);
        }
        // validate the optional field `warnings`
        if (data['warnings']) { // data not null
          Warnings.validateJSON(data['warnings']);
        }

        return true;
    }


}

VersionGroupVersionVersion.RequiredProperties = ["pid", "updated_time"];

/**
 * @member {String} aspect_ratio
 */
VersionGroupVersionVersion.prototype['aspect_ratio'] = undefined;

/**
 * @member {Boolean} competition_warning
 */
VersionGroupVersionVersion.prototype['competition_warning'] = undefined;

/**
 * @member {String} duration
 */
VersionGroupVersionVersion.prototype['duration'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
VersionGroupVersionVersion.prototype['identifiers'] = undefined;

/**
 * @member {module:model/Ids} ids
 */
VersionGroupVersionVersion.prototype['ids'] = undefined;

/**
 * @member {String} pid
 */
VersionGroupVersionVersion.prototype['pid'] = undefined;

/**
 * @member {module:model/TypesWithId} types_with_id
 */
VersionGroupVersionVersion.prototype['types_with_id'] = undefined;

/**
 * @member {Date} updated_time
 */
VersionGroupVersionVersion.prototype['updated_time'] = undefined;

/**
 * @member {module:model/PidReference} version_of
 */
VersionGroupVersionVersion.prototype['version_of'] = undefined;

/**
 * @member {module:model/VersionTypesWithId} version_types_with_id
 */
VersionGroupVersionVersion.prototype['version_types_with_id'] = undefined;

/**
 * @member {module:model/Warnings} warnings
 */
VersionGroupVersionVersion.prototype['warnings'] = undefined;






export default VersionGroupVersionVersion;

