/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AncestorTitles from './AncestorTitles';
import AncestorsTitles from './AncestorsTitles';
import DateRange from './DateRange';
import Identifiers from './Identifiers';
import Ids from './Ids';
import ImageLink from './ImageLink';
import ImagesMixin from './ImagesMixin';
import PidReference from './PidReference';
import ScheduledPublicationRights from './ScheduledPublicationRights';
import ScheduledTime from './ScheduledTime';
import ServiceReference from './ServiceReference';

/**
 * The Window model module.
 * @module model/Window
 * @version 1.0.0
 */
class Window {
    /**
     * Constructs a new <code>Window</code>.
     * @alias module:model/Window
     * @param partner {String} 
     * @param pid {String} 
     */
    constructor(partner, pid) { 
        
        Window.initialize(this, partner, pid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partner, pid) { 
        obj['partner'] = partner;
        obj['pid'] = pid;
    }

    /**
     * Constructs a <code>Window</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Window} obj Optional instance to populate.
     * @return {module:model/Window} The populated <code>Window</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Window();

            if (data.hasOwnProperty('accurate_programme_time')) {
                obj['accurate_programme_time'] = DateRange.constructFromObject(data['accurate_programme_time']);
            }
            if (data.hasOwnProperty('ancestor_titles')) {
                obj['ancestor_titles'] = AncestorTitles.constructFromObject(data['ancestor_titles']);
            }
            if (data.hasOwnProperty('ancestors_titles')) {
                obj['ancestors_titles'] = AncestorsTitles.constructFromObject(data['ancestors_titles']);
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = Ids.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('image_link')) {
                obj['image_link'] = ImageLink.constructFromObject(data['image_link']);
            }
            if (data.hasOwnProperty('images_mixin')) {
                obj['images_mixin'] = ImagesMixin.constructFromObject(data['images_mixin']);
            }
            if (data.hasOwnProperty('media_availability_time')) {
                obj['media_availability_time'] = DateRange.constructFromObject(data['media_availability_time']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('scheduled_publication_rights')) {
                obj['scheduled_publication_rights'] = ScheduledPublicationRights.constructFromObject(data['scheduled_publication_rights']);
            }
            if (data.hasOwnProperty('scheduled_time')) {
                obj['scheduled_time'] = ScheduledTime.constructFromObject(data['scheduled_time']);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ServiceReference.constructFromObject(data['service']);
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
            if (data.hasOwnProperty('window_of')) {
                obj['window_of'] = ApiClient.convertToType(data['window_of'], [PidReference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Window</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Window</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Window.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accurate_programme_time`
        if (data['accurate_programme_time']) { // data not null
          DateRange.validateJSON(data['accurate_programme_time']);
        }
        // validate the optional field `ancestor_titles`
        if (data['ancestor_titles']) { // data not null
          AncestorTitles.validateJSON(data['ancestor_titles']);
        }
        // validate the optional field `ancestors_titles`
        if (data['ancestors_titles']) { // data not null
          AncestorsTitles.validateJSON(data['ancestors_titles']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `ids`
        if (data['ids']) { // data not null
          Ids.validateJSON(data['ids']);
        }
        // validate the optional field `image_link`
        if (data['image_link']) { // data not null
          ImageLink.validateJSON(data['image_link']);
        }
        // validate the optional field `images_mixin`
        if (data['images_mixin']) { // data not null
          ImagesMixin.validateJSON(data['images_mixin']);
        }
        // validate the optional field `media_availability_time`
        if (data['media_availability_time']) { // data not null
          DateRange.validateJSON(data['media_availability_time']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `scheduled_publication_rights`
        if (data['scheduled_publication_rights']) { // data not null
          ScheduledPublicationRights.validateJSON(data['scheduled_publication_rights']);
        }
        // validate the optional field `scheduled_time`
        if (data['scheduled_time']) { // data not null
          ScheduledTime.validateJSON(data['scheduled_time']);
        }
        // validate the optional field `service`
        if (data['service']) { // data not null
          ServiceReference.validateJSON(data['service']);
        }
        if (data['window_of']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['window_of'])) {
                throw new Error("Expected the field `window_of` to be an array in the JSON data but got " + data['window_of']);
            }
            // validate the optional field `window_of` (array)
            for (const item of data['window_of']) {
                PidReference.validateJSON(item);
            };
        }

        return true;
    }


}

Window.RequiredProperties = ["partner", "pid"];

/**
 * @member {module:model/DateRange} accurate_programme_time
 */
Window.prototype['accurate_programme_time'] = undefined;

/**
 * @member {module:model/AncestorTitles} ancestor_titles
 */
Window.prototype['ancestor_titles'] = undefined;

/**
 * @member {module:model/AncestorsTitles} ancestors_titles
 */
Window.prototype['ancestors_titles'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Window.prototype['identifiers'] = undefined;

/**
 * @member {module:model/Ids} ids
 */
Window.prototype['ids'] = undefined;

/**
 * @member {module:model/ImageLink} image_link
 */
Window.prototype['image_link'] = undefined;

/**
 * @member {module:model/ImagesMixin} images_mixin
 */
Window.prototype['images_mixin'] = undefined;

/**
 * @member {module:model/DateRange} media_availability_time
 */
Window.prototype['media_availability_time'] = undefined;

/**
 * @member {String} partner
 */
Window.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
Window.prototype['pid'] = undefined;

/**
 * @member {module:model/ScheduledPublicationRights} scheduled_publication_rights
 */
Window.prototype['scheduled_publication_rights'] = undefined;

/**
 * @member {module:model/ScheduledTime} scheduled_time
 */
Window.prototype['scheduled_time'] = undefined;

/**
 * @member {module:model/ServiceReference} service
 */
Window.prototype['service'] = undefined;

/**
 * @member {Date} updated_time
 */
Window.prototype['updated_time'] = undefined;

/**
 * @member {Array.<module:model/PidReference>} window_of
 */
Window.prototype['window_of'] = undefined;






export default Window;

