/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContributorNameNameName model module.
 * @module model/ContributorNameNameName
 * @version 1.0.0
 */
class ContributorNameNameName {
    /**
     * Constructs a new <code>ContributorNameNameName</code>.
     * @alias module:model/ContributorNameNameName
     */
    constructor() { 
        
        ContributorNameNameName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContributorNameNameName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContributorNameNameName} obj Optional instance to populate.
     * @return {module:model/ContributorNameNameName} The populated <code>ContributorNameNameName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContributorNameNameName();

            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('given')) {
                obj['given'] = ApiClient.convertToType(data['given'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('presentation')) {
                obj['presentation'] = ApiClient.convertToType(data['presentation'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContributorNameNameName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContributorNameNameName</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }
        // ensure the json data is a string
        if (data['given'] && !(typeof data['given'] === 'string' || data['given'] instanceof String)) {
            throw new Error("Expected the field `given` to be a primitive type in the JSON string but got " + data['given']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['presentation'] && !(typeof data['presentation'] === 'string' || data['presentation'] instanceof String)) {
            throw new Error("Expected the field `presentation` to be a primitive type in the JSON string but got " + data['presentation']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} family
 */
ContributorNameNameName.prototype['family'] = undefined;

/**
 * @member {String} given
 */
ContributorNameNameName.prototype['given'] = undefined;

/**
 * @member {String} lang
 */
ContributorNameNameName.prototype['lang'] = undefined;

/**
 * @member {String} presentation
 */
ContributorNameNameName.prototype['presentation'] = undefined;

/**
 * @member {String} title
 */
ContributorNameNameName.prototype['title'] = undefined;






export default ContributorNameNameName;

