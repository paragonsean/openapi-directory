/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableSimulcasts from './AvailableSimulcasts';
import AvailableVersions from './AvailableVersions';
import AvailableWebcasts from './AvailableWebcasts';
import Versions from './Versions';

/**
 * The VersionsMixin model module.
 * @module model/VersionsMixin
 * @version 1.0.0
 */
class VersionsMixin {
    /**
     * Constructs a new <code>VersionsMixin</code>.
     * @alias module:model/VersionsMixin
     */
    constructor() { 
        
        VersionsMixin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VersionsMixin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionsMixin} obj Optional instance to populate.
     * @return {module:model/VersionsMixin} The populated <code>VersionsMixin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionsMixin();

            if (data.hasOwnProperty('available_simulcasts')) {
                obj['available_simulcasts'] = AvailableSimulcasts.constructFromObject(data['available_simulcasts']);
            }
            if (data.hasOwnProperty('available_versions')) {
                obj['available_versions'] = AvailableVersions.constructFromObject(data['available_versions']);
            }
            if (data.hasOwnProperty('available_webcasts')) {
                obj['available_webcasts'] = AvailableWebcasts.constructFromObject(data['available_webcasts']);
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [Versions]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionsMixin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionsMixin</code>.
     */
    static validateJSON(data) {
        // validate the optional field `available_simulcasts`
        if (data['available_simulcasts']) { // data not null
          AvailableSimulcasts.validateJSON(data['available_simulcasts']);
        }
        // validate the optional field `available_versions`
        if (data['available_versions']) { // data not null
          AvailableVersions.validateJSON(data['available_versions']);
        }
        // validate the optional field `available_webcasts`
        if (data['available_webcasts']) { // data not null
          AvailableWebcasts.validateJSON(data['available_webcasts']);
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                Versions.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/AvailableSimulcasts} available_simulcasts
 */
VersionsMixin.prototype['available_simulcasts'] = undefined;

/**
 * @member {module:model/AvailableVersions} available_versions
 */
VersionsMixin.prototype['available_versions'] = undefined;

/**
 * @member {module:model/AvailableWebcasts} available_webcasts
 */
VersionsMixin.prototype['available_webcasts'] = undefined;

/**
 * @member {Array.<module:model/Versions>} versions
 */
VersionsMixin.prototype['versions'] = undefined;






export default VersionsMixin;

