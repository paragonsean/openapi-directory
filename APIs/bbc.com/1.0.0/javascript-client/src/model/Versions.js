/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VersionAvailabilityMixin from './VersionAvailabilityMixin';

/**
 * The Versions model module.
 * @module model/Versions
 * @version 1.0.0
 */
class Versions {
    /**
     * Constructs a new <code>Versions</code>.
     * @alias module:model/Versions
     * @param available {Number} 
     * @param versionAvailabilityMixin {module:model/VersionAvailabilityMixin} 
     */
    constructor(available, versionAvailabilityMixin) { 
        
        Versions.initialize(this, available, versionAvailabilityMixin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available, versionAvailabilityMixin) { 
        obj['available'] = available;
        obj['version_availability_mixin'] = versionAvailabilityMixin;
    }

    /**
     * Constructs a <code>Versions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Versions} obj Optional instance to populate.
     * @return {module:model/Versions} The populated <code>Versions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Versions();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('version_availability_mixin')) {
                obj['version_availability_mixin'] = VersionAvailabilityMixin.constructFromObject(data['version_availability_mixin']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Versions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Versions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Versions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `version_availability_mixin`
        if (data['version_availability_mixin']) { // data not null
          VersionAvailabilityMixin.validateJSON(data['version_availability_mixin']);
        }

        return true;
    }


}

Versions.RequiredProperties = ["available", "version_availability_mixin"];

/**
 * @member {Number} available
 */
Versions.prototype['available'] = undefined;

/**
 * @member {module:model/VersionAvailabilityMixin} version_availability_mixin
 */
Versions.prototype['version_availability_mixin'] = undefined;






export default Versions;

