/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableVersionsElementVersionInnerTypesInner from './AvailableVersionsElementVersionInnerTypesInner';
import GuidanceWarnings from './GuidanceWarnings';
import VersionAvailabilityMixinVersionInnerAvailabilitiesInner from './VersionAvailabilityMixinVersionInnerAvailabilitiesInner';
import VersionAvailabilityMixinVersionInnerVersionInner from './VersionAvailabilityMixinVersionInnerVersionInner';

/**
 * The VersionAvailabilityMixinVersionInner model module.
 * @module model/VersionAvailabilityMixinVersionInner
 * @version 1.0.0
 */
class VersionAvailabilityMixinVersionInner {
    /**
     * Constructs a new <code>VersionAvailabilityMixinVersionInner</code>.
     * @alias module:model/VersionAvailabilityMixinVersionInner
     * @param types {Array.<module:model/AvailableVersionsElementVersionInnerTypesInner>} 
     */
    constructor(types) { 
        
        VersionAvailabilityMixinVersionInner.initialize(this, types);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, types) { 
        obj['types'] = types;
    }

    /**
     * Constructs a <code>VersionAvailabilityMixinVersionInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionAvailabilityMixinVersionInner} obj Optional instance to populate.
     * @return {module:model/VersionAvailabilityMixinVersionInner} The populated <code>VersionAvailabilityMixinVersionInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionAvailabilityMixinVersionInner();

            if (data.hasOwnProperty('availabilities')) {
                obj['availabilities'] = ApiClient.convertToType(data['availabilities'], [VersionAvailabilityMixinVersionInnerAvailabilitiesInner]);
            }
            if (data.hasOwnProperty('competition_warning')) {
                obj['competition_warning'] = ApiClient.convertToType(data['competition_warning'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('guidance_warnings')) {
                obj['guidance_warnings'] = GuidanceWarnings.constructFromObject(data['guidance_warnings']);
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], [AvailableVersionsElementVersionInnerTypesInner]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], [VersionAvailabilityMixinVersionInnerVersionInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionAvailabilityMixinVersionInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionAvailabilityMixinVersionInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VersionAvailabilityMixinVersionInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['availabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availabilities'])) {
                throw new Error("Expected the field `availabilities` to be an array in the JSON data but got " + data['availabilities']);
            }
            // validate the optional field `availabilities` (array)
            for (const item of data['availabilities']) {
                VersionAvailabilityMixinVersionInnerAvailabilitiesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['competition_warning'] && !(typeof data['competition_warning'] === 'string' || data['competition_warning'] instanceof String)) {
            throw new Error("Expected the field `competition_warning` to be a primitive type in the JSON string but got " + data['competition_warning']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // validate the optional field `guidance_warnings`
        if (data['guidance_warnings']) { // data not null
          GuidanceWarnings.validateJSON(data['guidance_warnings']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        if (data['types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['types'])) {
                throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
            }
            // validate the optional field `types` (array)
            for (const item of data['types']) {
                AvailableVersionsElementVersionInnerTypesInner.validateJSON(item);
            };
        }
        if (data['version']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['version'])) {
                throw new Error("Expected the field `version` to be an array in the JSON data but got " + data['version']);
            }
            // validate the optional field `version` (array)
            for (const item of data['version']) {
                VersionAvailabilityMixinVersionInnerVersionInner.validateJSON(item);
            };
        }

        return true;
    }


}

VersionAvailabilityMixinVersionInner.RequiredProperties = ["types"];

/**
 * @member {Array.<module:model/VersionAvailabilityMixinVersionInnerAvailabilitiesInner>} availabilities
 */
VersionAvailabilityMixinVersionInner.prototype['availabilities'] = undefined;

/**
 * @member {String} competition_warning
 */
VersionAvailabilityMixinVersionInner.prototype['competition_warning'] = undefined;

/**
 * @member {String} duration
 */
VersionAvailabilityMixinVersionInner.prototype['duration'] = undefined;

/**
 * @member {module:model/GuidanceWarnings} guidance_warnings
 */
VersionAvailabilityMixinVersionInner.prototype['guidance_warnings'] = undefined;

/**
 * @member {String} pid
 */
VersionAvailabilityMixinVersionInner.prototype['pid'] = undefined;

/**
 * @member {Array.<module:model/AvailableVersionsElementVersionInnerTypesInner>} types
 */
VersionAvailabilityMixinVersionInner.prototype['types'] = undefined;

/**
 * @member {Array.<module:model/VersionAvailabilityMixinVersionInnerVersionInner>} version
 */
VersionAvailabilityMixinVersionInner.prototype['version'] = undefined;






export default VersionAvailabilityMixinVersionInner;

