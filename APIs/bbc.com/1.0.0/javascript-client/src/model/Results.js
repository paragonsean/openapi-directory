/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Availability from './Availability';
import Brand from './Brand';
import Broadcast from './Broadcast';
import Clip from './Clip';
import Contributor from './Contributor';
import Episode from './Episode';
import GroupBody from './GroupBody';
import Image from './Image';
import Item from './Item';
import MasterBrand from './MasterBrand';
import Promotion from './Promotion';
import Series from './Series';
import Service from './Service';
import VersionGroup from './VersionGroup';
import Window from './Window';

/**
 * The Results model module.
 * @module model/Results
 * @version 1.0.0
 */
class Results {
    /**
     * Constructs a new <code>Results</code>.
     * @alias module:model/Results
     * @param page {Number} 
     * @param pageSize {Number} 
     */
    constructor(page, pageSize) { 
        
        Results.initialize(this, page, pageSize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, page, pageSize) { 
        obj['page'] = page;
        obj['page_size'] = pageSize;
    }

    /**
     * Constructs a <code>Results</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Results} obj Optional instance to populate.
     * @return {module:model/Results} The populated <code>Results</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Results();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = Availability.constructFromObject(data['availability']);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = Brand.constructFromObject(data['brand']);
            }
            if (data.hasOwnProperty('broadcast')) {
                obj['broadcast'] = Broadcast.constructFromObject(data['broadcast']);
            }
            if (data.hasOwnProperty('chapter')) {
                obj['chapter'] = Item.constructFromObject(data['chapter']);
            }
            if (data.hasOwnProperty('clip')) {
                obj['clip'] = Clip.constructFromObject(data['clip']);
            }
            if (data.hasOwnProperty('collection')) {
                obj['collection'] = GroupBody.constructFromObject(data['collection']);
            }
            if (data.hasOwnProperty('contributor')) {
                obj['contributor'] = Contributor.constructFromObject(data['contributor']);
            }
            if (data.hasOwnProperty('episode')) {
                obj['episode'] = Episode.constructFromObject(data['episode']);
            }
            if (data.hasOwnProperty('franchise')) {
                obj['franchise'] = GroupBody.constructFromObject(data['franchise']);
            }
            if (data.hasOwnProperty('gallery')) {
                obj['gallery'] = GroupBody.constructFromObject(data['gallery']);
            }
            if (data.hasOwnProperty('highlight')) {
                obj['highlight'] = Item.constructFromObject(data['highlight']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('master_brand')) {
                obj['master_brand'] = MasterBrand.constructFromObject(data['master_brand']);
            }
            if (data.hasOwnProperty('more_than')) {
                obj['more_than'] = ApiClient.convertToType(data['more_than'], 'Number');
            }
            if (data.hasOwnProperty('music')) {
                obj['music'] = Item.constructFromObject(data['music']);
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = Item.constructFromObject(data['other']);
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('page_size')) {
                obj['page_size'] = ApiClient.convertToType(data['page_size'], 'Number');
            }
            if (data.hasOwnProperty('promotion')) {
                obj['promotion'] = Promotion.constructFromObject(data['promotion']);
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = GroupBody.constructFromObject(data['season']);
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = Series.constructFromObject(data['series']);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = Service.constructFromObject(data['service']);
            }
            if (data.hasOwnProperty('speech')) {
                obj['speech'] = Item.constructFromObject(data['speech']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('version_group')) {
                obj['version_group'] = VersionGroup.constructFromObject(data['version_group']);
            }
            if (data.hasOwnProperty('window')) {
                obj['window'] = Window.constructFromObject(data['window']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Results</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Results</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Results.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `availability`
        if (data['availability']) { // data not null
          Availability.validateJSON(data['availability']);
        }
        // validate the optional field `brand`
        if (data['brand']) { // data not null
          Brand.validateJSON(data['brand']);
        }
        // validate the optional field `broadcast`
        if (data['broadcast']) { // data not null
          Broadcast.validateJSON(data['broadcast']);
        }
        // validate the optional field `chapter`
        if (data['chapter']) { // data not null
          Item.validateJSON(data['chapter']);
        }
        // validate the optional field `clip`
        if (data['clip']) { // data not null
          Clip.validateJSON(data['clip']);
        }
        // validate the optional field `collection`
        if (data['collection']) { // data not null
          GroupBody.validateJSON(data['collection']);
        }
        // validate the optional field `contributor`
        if (data['contributor']) { // data not null
          Contributor.validateJSON(data['contributor']);
        }
        // validate the optional field `episode`
        if (data['episode']) { // data not null
          Episode.validateJSON(data['episode']);
        }
        // validate the optional field `franchise`
        if (data['franchise']) { // data not null
          GroupBody.validateJSON(data['franchise']);
        }
        // validate the optional field `gallery`
        if (data['gallery']) { // data not null
          GroupBody.validateJSON(data['gallery']);
        }
        // validate the optional field `highlight`
        if (data['highlight']) { // data not null
          Item.validateJSON(data['highlight']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // validate the optional field `master_brand`
        if (data['master_brand']) { // data not null
          MasterBrand.validateJSON(data['master_brand']);
        }
        // validate the optional field `music`
        if (data['music']) { // data not null
          Item.validateJSON(data['music']);
        }
        // validate the optional field `other`
        if (data['other']) { // data not null
          Item.validateJSON(data['other']);
        }
        // validate the optional field `promotion`
        if (data['promotion']) { // data not null
          Promotion.validateJSON(data['promotion']);
        }
        // validate the optional field `season`
        if (data['season']) { // data not null
          GroupBody.validateJSON(data['season']);
        }
        // validate the optional field `series`
        if (data['series']) { // data not null
          Series.validateJSON(data['series']);
        }
        // validate the optional field `service`
        if (data['service']) { // data not null
          Service.validateJSON(data['service']);
        }
        // validate the optional field `speech`
        if (data['speech']) { // data not null
          Item.validateJSON(data['speech']);
        }
        // validate the optional field `version_group`
        if (data['version_group']) { // data not null
          VersionGroup.validateJSON(data['version_group']);
        }
        // validate the optional field `window`
        if (data['window']) { // data not null
          Window.validateJSON(data['window']);
        }

        return true;
    }


}

Results.RequiredProperties = ["page", "page_size"];

/**
 * @member {module:model/Availability} availability
 */
Results.prototype['availability'] = undefined;

/**
 * @member {module:model/Brand} brand
 */
Results.prototype['brand'] = undefined;

/**
 * @member {module:model/Broadcast} broadcast
 */
Results.prototype['broadcast'] = undefined;

/**
 * @member {module:model/Item} chapter
 */
Results.prototype['chapter'] = undefined;

/**
 * @member {module:model/Clip} clip
 */
Results.prototype['clip'] = undefined;

/**
 * @member {module:model/GroupBody} collection
 */
Results.prototype['collection'] = undefined;

/**
 * @member {module:model/Contributor} contributor
 */
Results.prototype['contributor'] = undefined;

/**
 * @member {module:model/Episode} episode
 */
Results.prototype['episode'] = undefined;

/**
 * @member {module:model/GroupBody} franchise
 */
Results.prototype['franchise'] = undefined;

/**
 * @member {module:model/GroupBody} gallery
 */
Results.prototype['gallery'] = undefined;

/**
 * @member {module:model/Item} highlight
 */
Results.prototype['highlight'] = undefined;

/**
 * @member {module:model/Image} image
 */
Results.prototype['image'] = undefined;

/**
 * @member {module:model/MasterBrand} master_brand
 */
Results.prototype['master_brand'] = undefined;

/**
 * @member {Number} more_than
 */
Results.prototype['more_than'] = undefined;

/**
 * @member {module:model/Item} music
 */
Results.prototype['music'] = undefined;

/**
 * @member {module:model/Item} other
 */
Results.prototype['other'] = undefined;

/**
 * @member {Number} page
 */
Results.prototype['page'] = undefined;

/**
 * @member {Number} page_size
 */
Results.prototype['page_size'] = undefined;

/**
 * @member {module:model/Promotion} promotion
 */
Results.prototype['promotion'] = undefined;

/**
 * @member {module:model/GroupBody} season
 */
Results.prototype['season'] = undefined;

/**
 * @member {module:model/Series} series
 */
Results.prototype['series'] = undefined;

/**
 * @member {module:model/Service} service
 */
Results.prototype['service'] = undefined;

/**
 * @member {module:model/Item} speech
 */
Results.prototype['speech'] = undefined;

/**
 * @member {Number} total
 */
Results.prototype['total'] = undefined;

/**
 * @member {module:model/VersionGroup} version_group
 */
Results.prototype['version_group'] = undefined;

/**
 * @member {module:model/Window} window
 */
Results.prototype['window'] = undefined;






export default Results;

