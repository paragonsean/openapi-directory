/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PreviousNextMixinPreviousNextPreviousNext from './PreviousNextMixinPreviousNextPreviousNext';
import Reference from './Reference';

/**
 * The PreviousNextMixinPreviousNext model module.
 * @module model/PreviousNextMixinPreviousNext
 * @version 1.0.0
 */
class PreviousNextMixinPreviousNext {
    /**
     * Constructs a new <code>PreviousNextMixinPreviousNext</code>.
     * @alias module:model/PreviousNextMixinPreviousNext
     * @param previousNext {module:model/PreviousNextMixinPreviousNextPreviousNext} 
     */
    constructor(previousNext) { 
        
        PreviousNextMixinPreviousNext.initialize(this, previousNext);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, previousNext) { 
        obj['previous_next'] = previousNext;
    }

    /**
     * Constructs a <code>PreviousNextMixinPreviousNext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PreviousNextMixinPreviousNext} obj Optional instance to populate.
     * @return {module:model/PreviousNextMixinPreviousNext} The populated <code>PreviousNextMixinPreviousNext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PreviousNextMixinPreviousNext();

            if (data.hasOwnProperty('next')) {
                obj['next'] = Reference.constructFromObject(data['next']);
            }
            if (data.hasOwnProperty('previous')) {
                obj['previous'] = Reference.constructFromObject(data['previous']);
            }
            if (data.hasOwnProperty('previous_next')) {
                obj['previous_next'] = PreviousNextMixinPreviousNextPreviousNext.constructFromObject(data['previous_next']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PreviousNextMixinPreviousNext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PreviousNextMixinPreviousNext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PreviousNextMixinPreviousNext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `next`
        if (data['next']) { // data not null
          Reference.validateJSON(data['next']);
        }
        // validate the optional field `previous`
        if (data['previous']) { // data not null
          Reference.validateJSON(data['previous']);
        }
        // validate the optional field `previous_next`
        if (data['previous_next']) { // data not null
          PreviousNextMixinPreviousNextPreviousNext.validateJSON(data['previous_next']);
        }

        return true;
    }


}

PreviousNextMixinPreviousNext.RequiredProperties = ["previous_next"];

/**
 * @member {module:model/Reference} next
 */
PreviousNextMixinPreviousNext.prototype['next'] = undefined;

/**
 * @member {module:model/Reference} previous
 */
PreviousNextMixinPreviousNext.prototype['previous'] = undefined;

/**
 * @member {module:model/PreviousNextMixinPreviousNextPreviousNext} previous_next
 */
PreviousNextMixinPreviousNext.prototype['previous_next'] = undefined;






export default PreviousNextMixinPreviousNext;

