/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContributorName from './ContributorName';
import ContributorTo from './ContributorTo';
import Identifiers from './Identifiers';
import Ids from './Ids';

/**
 * The Contributor model module.
 * @module model/Contributor
 * @version 1.0.0
 */
class Contributor {
    /**
     * Constructs a new <code>Contributor</code>.
     * @alias module:model/Contributor
     * @param partner {String} 
     * @param pid {String} 
     */
    constructor(partner, pid) { 
        
        Contributor.initialize(this, partner, pid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partner, pid) { 
        obj['partner'] = partner;
        obj['pid'] = pid;
    }

    /**
     * Constructs a <code>Contributor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contributor} obj Optional instance to populate.
     * @return {module:model/Contributor} The populated <code>Contributor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contributor();

            if (data.hasOwnProperty('contributor_name')) {
                obj['contributor_name'] = ContributorName.constructFromObject(data['contributor_name']);
            }
            if (data.hasOwnProperty('contributor_to')) {
                obj['contributor_to'] = ApiClient.convertToType(data['contributor_to'], [ContributorTo]);
            }
            if (data.hasOwnProperty('disambiguation')) {
                obj['disambiguation'] = ApiClient.convertToType(data['disambiguation'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = Ids.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contributor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contributor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Contributor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contributor_name`
        if (data['contributor_name']) { // data not null
          ContributorName.validateJSON(data['contributor_name']);
        }
        if (data['contributor_to']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contributor_to'])) {
                throw new Error("Expected the field `contributor_to` to be an array in the JSON data but got " + data['contributor_to']);
            }
            // validate the optional field `contributor_to` (array)
            for (const item of data['contributor_to']) {
                ContributorTo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['disambiguation'] && !(typeof data['disambiguation'] === 'string' || data['disambiguation'] instanceof String)) {
            throw new Error("Expected the field `disambiguation` to be a primitive type in the JSON string but got " + data['disambiguation']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `ids`
        if (data['ids']) { // data not null
          Ids.validateJSON(data['ids']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Contributor.RequiredProperties = ["partner", "pid"];

/**
 * @member {module:model/ContributorName} contributor_name
 */
Contributor.prototype['contributor_name'] = undefined;

/**
 * @member {Array.<module:model/ContributorTo>} contributor_to
 */
Contributor.prototype['contributor_to'] = undefined;

/**
 * @member {String} disambiguation
 */
Contributor.prototype['disambiguation'] = undefined;

/**
 * @member {String} href
 */
Contributor.prototype['href'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Contributor.prototype['identifiers'] = undefined;

/**
 * @member {module:model/Ids} ids
 */
Contributor.prototype['ids'] = undefined;

/**
 * @member {String} partner
 */
Contributor.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
Contributor.prototype['pid'] = undefined;

/**
 * @member {String} type
 */
Contributor.prototype['type'] = undefined;






export default Contributor;

