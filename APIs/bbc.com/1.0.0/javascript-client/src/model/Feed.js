/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Deprecations from './Deprecations';
import Filters from './Filters';
import Mixins from './Mixins';
import ReleaseStatusType from './ReleaseStatusType';
import Sorts from './Sorts';

/**
 * The Feed model module.
 * @module model/Feed
 * @version 1.0.0
 */
class Feed {
    /**
     * Constructs a new <code>Feed</code>.
     * @alias module:model/Feed
     * @param href {String} 
     * @param name {String} 
     * @param rel {String} 
     * @param title {String} 
     */
    constructor(href, name, rel, title) { 
        
        Feed.initialize(this, href, name, rel, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href, name, rel, title) { 
        obj['href'] = href;
        obj['name'] = name;
        obj['rel'] = rel;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Feed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feed} obj Optional instance to populate.
     * @return {module:model/Feed} The populated <code>Feed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feed();

            if (data.hasOwnProperty('deprecations')) {
                obj['deprecations'] = Deprecations.constructFromObject(data['deprecations']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = Filters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('mixins')) {
                obj['mixins'] = Mixins.constructFromObject(data['mixins']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rel')) {
                obj['rel'] = ApiClient.convertToType(data['rel'], 'String');
            }
            if (data.hasOwnProperty('release_status')) {
                obj['release_status'] = ReleaseStatusType.constructFromObject(data['release_status']);
            }
            if (data.hasOwnProperty('sorts')) {
                obj['sorts'] = Sorts.constructFromObject(data['sorts']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Feed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `deprecations`
        if (data['deprecations']) { // data not null
          Deprecations.validateJSON(data['deprecations']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          Filters.validateJSON(data['filters']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // validate the optional field `mixins`
        if (data['mixins']) { // data not null
          Mixins.validateJSON(data['mixins']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rel'] && !(typeof data['rel'] === 'string' || data['rel'] instanceof String)) {
            throw new Error("Expected the field `rel` to be a primitive type in the JSON string but got " + data['rel']);
        }
        // validate the optional field `sorts`
        if (data['sorts']) { // data not null
          Sorts.validateJSON(data['sorts']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Feed.RequiredProperties = ["href", "name", "rel", "title"];

/**
 * @member {module:model/Deprecations} deprecations
 */
Feed.prototype['deprecations'] = undefined;

/**
 * @member {module:model/Filters} filters
 */
Feed.prototype['filters'] = undefined;

/**
 * @member {String} href
 */
Feed.prototype['href'] = undefined;

/**
 * @member {module:model/Mixins} mixins
 */
Feed.prototype['mixins'] = undefined;

/**
 * @member {String} name
 */
Feed.prototype['name'] = undefined;

/**
 * @member {String} rel
 */
Feed.prototype['rel'] = undefined;

/**
 * @member {module:model/ReleaseStatusType} release_status
 */
Feed.prototype['release_status'] = undefined;

/**
 * @member {module:model/Sorts} sorts
 */
Feed.prototype['sorts'] = undefined;

/**
 * @member {String} title
 */
Feed.prototype['title'] = undefined;






export default Feed;

