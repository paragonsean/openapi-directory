/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Data from './Data';
import XqueryVersion from './XqueryVersion';

/**
 * The Error model module.
 * @module model/Error
 * @version 1.0.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * @alias module:model/Error
     * @param code {String} 
     * @param data {module:model/Data} 
     * @param errorName {String} 
     * @param expr {String} 
     * @param formatString {String} 
     * @param message {String} 
     * @param retryable {Boolean} 
     * @param xqueryVersion {module:model/XqueryVersion} 
     */
    constructor(code, data, errorName, expr, formatString, message, retryable, xqueryVersion) { 
        
        Error.initialize(this, code, data, errorName, expr, formatString, message, retryable, xqueryVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, data, errorName, expr, formatString, message, retryable, xqueryVersion) { 
        obj['code'] = code;
        obj['data'] = data;
        obj['error-name'] = errorName;
        obj['expr'] = expr;
        obj['format-string'] = formatString;
        obj['message'] = message;
        obj['retryable'] = retryable;
        obj['xquery-version'] = xqueryVersion;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = Data.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('error-name')) {
                obj['error-name'] = ApiClient.convertToType(data['error-name'], 'String');
            }
            if (data.hasOwnProperty('expr')) {
                obj['expr'] = ApiClient.convertToType(data['expr'], 'String');
            }
            if (data.hasOwnProperty('format-string')) {
                obj['format-string'] = ApiClient.convertToType(data['format-string'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('retryable')) {
                obj['retryable'] = ApiClient.convertToType(data['retryable'], 'Boolean');
            }
            if (data.hasOwnProperty('xquery-version')) {
                obj['xquery-version'] = XqueryVersion.constructFromObject(data['xquery-version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          Data.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['error-name'] && !(typeof data['error-name'] === 'string' || data['error-name'] instanceof String)) {
            throw new Error("Expected the field `error-name` to be a primitive type in the JSON string but got " + data['error-name']);
        }
        // ensure the json data is a string
        if (data['expr'] && !(typeof data['expr'] === 'string' || data['expr'] instanceof String)) {
            throw new Error("Expected the field `expr` to be a primitive type in the JSON string but got " + data['expr']);
        }
        // ensure the json data is a string
        if (data['format-string'] && !(typeof data['format-string'] === 'string' || data['format-string'] instanceof String)) {
            throw new Error("Expected the field `format-string` to be a primitive type in the JSON string but got " + data['format-string']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}

Error.RequiredProperties = ["code", "data", "error-name", "expr", "format-string", "message", "retryable", "xquery-version"];

/**
 * @member {String} code
 */
Error.prototype['code'] = undefined;

/**
 * @member {module:model/Data} data
 */
Error.prototype['data'] = undefined;

/**
 * @member {String} error-name
 */
Error.prototype['error-name'] = undefined;

/**
 * @member {String} expr
 */
Error.prototype['expr'] = undefined;

/**
 * @member {String} format-string
 */
Error.prototype['format-string'] = undefined;

/**
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * @member {Boolean} retryable
 */
Error.prototype['retryable'] = undefined;

/**
 * @member {module:model/XqueryVersion} xquery-version
 */
Error.prototype['xquery-version'] = undefined;






export default Error;

