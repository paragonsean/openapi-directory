/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimensions from './Dimensions';
import FocusPoint from './FocusPoint';
import Size from './Size';

/**
 * The SourceAsset model module.
 * @module model/SourceAsset
 * @version 1.0.0
 */
class SourceAsset {
    /**
     * Constructs a new <code>SourceAsset</code>.
     * @alias module:model/SourceAsset
     */
    constructor() { 
        
        SourceAsset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceAsset} obj Optional instance to populate.
     * @return {module:model/SourceAsset} The populated <code>SourceAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceAsset();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('focus_point')) {
                obj['focus_point'] = FocusPoint.constructFromObject(data['focus_point']);
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceAsset</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Dimensions.validateJSON(data['dimensions']);
        }
        // validate the optional field `focus_point`
        if (data['focus_point']) { // data not null
          FocusPoint.validateJSON(data['focus_point']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {module:model/Dimensions} dimensions
 */
SourceAsset.prototype['dimensions'] = undefined;

/**
 * @member {module:model/FocusPoint} focus_point
 */
SourceAsset.prototype['focus_point'] = undefined;

/**
 * @member {String} mime_type
 */
SourceAsset.prototype['mime_type'] = undefined;

/**
 * @member {module:model/Size} size
 */
SourceAsset.prototype['size'] = undefined;

/**
 * @member {String} uri
 */
SourceAsset.prototype['uri'] = undefined;






export default SourceAsset;

