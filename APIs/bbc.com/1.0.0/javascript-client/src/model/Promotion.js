/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Context from './Context';
import Identifiers from './Identifiers';
import PidReference from './PidReference';
import RelatedLinks from './RelatedLinks';
import Synopses from './Synopses';

/**
 * The Promotion model module.
 * @module model/Promotion
 * @version 1.0.0
 */
class Promotion {
    /**
     * Constructs a new <code>Promotion</code>.
     * @alias module:model/Promotion
     * @param partner {String} 
     * @param pid {String} 
     * @param updatedTime {Date} 
     */
    constructor(partner, pid, updatedTime) { 
        
        Promotion.initialize(this, partner, pid, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partner, pid, updatedTime) { 
        obj['partner'] = partner;
        obj['pid'] = pid;
        obj['updated_time'] = updatedTime;
    }

    /**
     * Constructs a <code>Promotion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Promotion} obj Optional instance to populate.
     * @return {module:model/Promotion} The populated <code>Promotion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Promotion();

            if (data.hasOwnProperty('context')) {
                obj['context'] = Context.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'Date');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('promoted_by')) {
                obj['promoted_by'] = ApiClient.convertToType(data['promoted_by'], 'String');
            }
            if (data.hasOwnProperty('promoted_for')) {
                obj['promoted_for'] = ApiClient.convertToType(data['promoted_for'], 'String');
            }
            if (data.hasOwnProperty('promotion_of')) {
                obj['promotion_of'] = PidReference.constructFromObject(data['promotion_of']);
            }
            if (data.hasOwnProperty('related_links')) {
                obj['related_links'] = RelatedLinks.constructFromObject(data['related_links']);
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = Synopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Promotion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Promotion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Promotion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          Context.validateJSON(data['context']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['promoted_by'] && !(typeof data['promoted_by'] === 'string' || data['promoted_by'] instanceof String)) {
            throw new Error("Expected the field `promoted_by` to be a primitive type in the JSON string but got " + data['promoted_by']);
        }
        // ensure the json data is a string
        if (data['promoted_for'] && !(typeof data['promoted_for'] === 'string' || data['promoted_for'] instanceof String)) {
            throw new Error("Expected the field `promoted_for` to be a primitive type in the JSON string but got " + data['promoted_for']);
        }
        // validate the optional field `promotion_of`
        if (data['promotion_of']) { // data not null
          PidReference.validateJSON(data['promotion_of']);
        }
        // validate the optional field `related_links`
        if (data['related_links']) { // data not null
          RelatedLinks.validateJSON(data['related_links']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          Synopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Promotion.RequiredProperties = ["partner", "pid", "updated_time"];

/**
 * @member {module:model/Context} context
 */
Promotion.prototype['context'] = undefined;

/**
 * @member {Date} end_time
 */
Promotion.prototype['end_time'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Promotion.prototype['identifiers'] = undefined;

/**
 * @member {String} partner
 */
Promotion.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
Promotion.prototype['pid'] = undefined;

/**
 * @member {Number} priority
 */
Promotion.prototype['priority'] = undefined;

/**
 * @member {String} promoted_by
 */
Promotion.prototype['promoted_by'] = undefined;

/**
 * @member {String} promoted_for
 */
Promotion.prototype['promoted_for'] = undefined;

/**
 * @member {module:model/PidReference} promotion_of
 */
Promotion.prototype['promotion_of'] = undefined;

/**
 * @member {module:model/RelatedLinks} related_links
 */
Promotion.prototype['related_links'] = undefined;

/**
 * @member {Date} start_time
 */
Promotion.prototype['start_time'] = undefined;

/**
 * @member {String} status
 */
Promotion.prototype['status'] = undefined;

/**
 * @member {module:model/Synopses} synopses
 */
Promotion.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Promotion.prototype['title'] = undefined;

/**
 * @member {Date} updated_time
 */
Promotion.prototype['updated_time'] = undefined;

/**
 * @member {String} uri
 */
Promotion.prototype['uri'] = undefined;

/**
 * @member {String} url
 */
Promotion.prototype['url'] = undefined;






export default Promotion;

