/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContributionsMixinContributionContribution from './ContributionsMixinContributionContribution';

/**
 * The ContributionsMixinContribution model module.
 * @module model/ContributionsMixinContribution
 * @version 1.0.0
 */
class ContributionsMixinContribution {
    /**
     * Constructs a new <code>ContributionsMixinContribution</code>.
     * @alias module:model/ContributionsMixinContribution
     * @param contribution {module:model/ContributionsMixinContributionContribution} 
     */
    constructor(contribution) { 
        
        ContributionsMixinContribution.initialize(this, contribution);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contribution) { 
        obj['contribution'] = contribution;
    }

    /**
     * Constructs a <code>ContributionsMixinContribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContributionsMixinContribution} obj Optional instance to populate.
     * @return {module:model/ContributionsMixinContribution} The populated <code>ContributionsMixinContribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContributionsMixinContribution();

            if (data.hasOwnProperty('contribution')) {
                obj['contribution'] = ContributionsMixinContributionContribution.constructFromObject(data['contribution']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContributionsMixinContribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContributionsMixinContribution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContributionsMixinContribution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contribution`
        if (data['contribution']) { // data not null
          ContributionsMixinContributionContribution.validateJSON(data['contribution']);
        }

        return true;
    }


}

ContributionsMixinContribution.RequiredProperties = ["contribution"];

/**
 * @member {module:model/ContributionsMixinContributionContribution} contribution
 */
ContributionsMixinContribution.prototype['contribution'] = undefined;






export default ContributionsMixinContribution;

