/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Deprecations from './Deprecations';
import Filters from './Filters';
import Mixins from './Mixins';
import Pagination from './Pagination';
import Results from './Results';
import Sorts from './Sorts';

/**
 * The Nitro model module.
 * @module model/Nitro
 * @version 1.0.0
 */
class Nitro {
    /**
     * Constructs a new <code>Nitro</code>.
     * @alias module:model/Nitro
     * @extends Object
     */
    constructor() { 
        
        Nitro.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Nitro</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Nitro} obj Optional instance to populate.
     * @return {module:model/Nitro} The populated <code>Nitro</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nitro();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('deprecations')) {
                obj['deprecations'] = Deprecations.constructFromObject(data['deprecations']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = Filters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('mixins')) {
                obj['mixins'] = Mixins.constructFromObject(data['mixins']);
            }
            if (data.hasOwnProperty('pagination')) {
                obj['pagination'] = Pagination.constructFromObject(data['pagination']);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = Results.constructFromObject(data['results']);
            }
            if (data.hasOwnProperty('sorts')) {
                obj['sorts'] = Sorts.constructFromObject(data['sorts']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Nitro</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Nitro</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deprecations`
        if (data['deprecations']) { // data not null
          Deprecations.validateJSON(data['deprecations']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          Filters.validateJSON(data['filters']);
        }
        // validate the optional field `mixins`
        if (data['mixins']) { // data not null
          Mixins.validateJSON(data['mixins']);
        }
        // validate the optional field `pagination`
        if (data['pagination']) { // data not null
          Pagination.validateJSON(data['pagination']);
        }
        // validate the optional field `results`
        if (data['results']) { // data not null
          Results.validateJSON(data['results']);
        }
        // validate the optional field `sorts`
        if (data['sorts']) { // data not null
          Sorts.validateJSON(data['sorts']);
        }

        return true;
    }


}



/**
 * @member {module:model/Deprecations} deprecations
 */
Nitro.prototype['deprecations'] = undefined;

/**
 * @member {module:model/Filters} filters
 */
Nitro.prototype['filters'] = undefined;

/**
 * @member {module:model/Mixins} mixins
 */
Nitro.prototype['mixins'] = undefined;

/**
 * @member {module:model/Pagination} pagination
 */
Nitro.prototype['pagination'] = undefined;

/**
 * @member {module:model/Results} results
 */
Nitro.prototype['results'] = undefined;

/**
 * @member {module:model/Sorts} sorts
 */
Nitro.prototype['sorts'] = undefined;






export default Nitro;

