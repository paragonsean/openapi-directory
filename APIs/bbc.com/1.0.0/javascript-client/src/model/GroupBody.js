/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlternateImagesMixin from './AlternateImagesMixin';
import Embargoed from './Embargoed';
import ForProgrammes from './ForProgrammes';
import Identifiers from './Identifiers';
import Ids from './Ids';
import ImagesMixin from './ImagesMixin';
import MasterBrandLink from './MasterBrandLink';
import RelatedLinks from './RelatedLinks';
import Scheduled from './Scheduled';
import Synopses from './Synopses';

/**
 * The GroupBody model module.
 * @module model/GroupBody
 * @version 1.0.0
 */
class GroupBody {
    /**
     * Constructs a new <code>GroupBody</code>.
     * @alias module:model/GroupBody
     * @param embargoed {module:model/Embargoed} 
     * @param partner {String} 
     * @param pid {String} 
     * @param updatedTime {Date} 
     */
    constructor(embargoed, partner, pid, updatedTime) { 
        
        GroupBody.initialize(this, embargoed, partner, pid, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, embargoed, partner, pid, updatedTime) { 
        obj['embargoed'] = embargoed;
        obj['partner'] = partner;
        obj['pid'] = pid;
        obj['updated_time'] = updatedTime;
    }

    /**
     * Constructs a <code>GroupBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupBody} obj Optional instance to populate.
     * @return {module:model/GroupBody} The populated <code>GroupBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupBody();

            if (data.hasOwnProperty('alternate_images_mixin')) {
                obj['alternate_images_mixin'] = AlternateImagesMixin.constructFromObject(data['alternate_images_mixin']);
            }
            if (data.hasOwnProperty('embargoed')) {
                obj['embargoed'] = Embargoed.constructFromObject(data['embargoed']);
            }
            if (data.hasOwnProperty('for_programmes')) {
                obj['for_programmes'] = ForProgrammes.constructFromObject(data['for_programmes']);
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = Ids.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('images_mixin')) {
                obj['images_mixin'] = ImagesMixin.constructFromObject(data['images_mixin']);
            }
            if (data.hasOwnProperty('master_brand_link')) {
                obj['master_brand_link'] = MasterBrandLink.constructFromObject(data['master_brand_link']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('related_links')) {
                obj['related_links'] = RelatedLinks.constructFromObject(data['related_links']);
            }
            if (data.hasOwnProperty('scheduled')) {
                obj['scheduled'] = Scheduled.constructFromObject(data['scheduled']);
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = Synopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
            if (data.hasOwnProperty('url_key')) {
                obj['url_key'] = ApiClient.convertToType(data['url_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `alternate_images_mixin`
        if (data['alternate_images_mixin']) { // data not null
          AlternateImagesMixin.validateJSON(data['alternate_images_mixin']);
        }
        // validate the optional field `for_programmes`
        if (data['for_programmes']) { // data not null
          ForProgrammes.validateJSON(data['for_programmes']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `ids`
        if (data['ids']) { // data not null
          Ids.validateJSON(data['ids']);
        }
        // validate the optional field `images_mixin`
        if (data['images_mixin']) { // data not null
          ImagesMixin.validateJSON(data['images_mixin']);
        }
        // validate the optional field `master_brand_link`
        if (data['master_brand_link']) { // data not null
          MasterBrandLink.validateJSON(data['master_brand_link']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `related_links`
        if (data['related_links']) { // data not null
          RelatedLinks.validateJSON(data['related_links']);
        }
        // validate the optional field `scheduled`
        if (data['scheduled']) { // data not null
          Scheduled.validateJSON(data['scheduled']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          Synopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url_key'] && !(typeof data['url_key'] === 'string' || data['url_key'] instanceof String)) {
            throw new Error("Expected the field `url_key` to be a primitive type in the JSON string but got " + data['url_key']);
        }

        return true;
    }


}

GroupBody.RequiredProperties = ["embargoed", "partner", "pid", "updated_time"];

/**
 * @member {module:model/AlternateImagesMixin} alternate_images_mixin
 */
GroupBody.prototype['alternate_images_mixin'] = undefined;

/**
 * @member {module:model/Embargoed} embargoed
 */
GroupBody.prototype['embargoed'] = undefined;

/**
 * @member {module:model/ForProgrammes} for_programmes
 */
GroupBody.prototype['for_programmes'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
GroupBody.prototype['identifiers'] = undefined;

/**
 * @member {module:model/Ids} ids
 */
GroupBody.prototype['ids'] = undefined;

/**
 * @member {module:model/ImagesMixin} images_mixin
 */
GroupBody.prototype['images_mixin'] = undefined;

/**
 * @member {module:model/MasterBrandLink} master_brand_link
 */
GroupBody.prototype['master_brand_link'] = undefined;

/**
 * @member {String} partner
 */
GroupBody.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
GroupBody.prototype['pid'] = undefined;

/**
 * @member {module:model/RelatedLinks} related_links
 */
GroupBody.prototype['related_links'] = undefined;

/**
 * @member {module:model/Scheduled} scheduled
 */
GroupBody.prototype['scheduled'] = undefined;

/**
 * @member {module:model/Synopses} synopses
 */
GroupBody.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
GroupBody.prototype['title'] = undefined;

/**
 * @member {Date} updated_time
 */
GroupBody.prototype['updated_time'] = undefined;

/**
 * @member {String} url_key
 */
GroupBody.prototype['url_key'] = undefined;






export default GroupBody;

