/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContributionsMixin from './ContributionsMixin';
import Identifiers from './Identifiers';
import Ids from './Ids';
import ImagesMixin from './ImagesMixin';
import Offsets from './Offsets';
import PlayEvents from './PlayEvents';
import Reference from './Reference';
import Synopses from './Synopses';

/**
 * The Item model module.
 * @module model/Item
 * @version 1.0.0
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * @alias module:model/Item
     * @param partner {String} 
     * @param pid {String} 
     */
    constructor(partner, pid) { 
        
        Item.initialize(this, partner, pid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partner, pid) { 
        obj['partner'] = partner;
        obj['pid'] = pid;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('catalogue_number')) {
                obj['catalogue_number'] = ApiClient.convertToType(data['catalogue_number'], 'String');
            }
            if (data.hasOwnProperty('contributions_mixin')) {
                obj['contributions_mixin'] = ContributionsMixin.constructFromObject(data['contributions_mixin']);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = Ids.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('images_mixin')) {
                obj['images_mixin'] = ImagesMixin.constructFromObject(data['images_mixin']);
            }
            if (data.hasOwnProperty('item_of')) {
                obj['item_of'] = Reference.constructFromObject(data['item_of']);
            }
            if (data.hasOwnProperty('music_code')) {
                obj['music_code'] = ApiClient.convertToType(data['music_code'], 'String');
            }
            if (data.hasOwnProperty('offsets')) {
                obj['offsets'] = Offsets.constructFromObject(data['offsets']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('play_events')) {
                obj['play_events'] = PlayEvents.constructFromObject(data['play_events']);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('record_label')) {
                obj['record_label'] = ApiClient.convertToType(data['record_label'], 'String');
            }
            if (data.hasOwnProperty('recording_date')) {
                obj['recording_date'] = ApiClient.convertToType(data['recording_date'], 'String');
            }
            if (data.hasOwnProperty('release_title')) {
                obj['release_title'] = ApiClient.convertToType(data['release_title'], 'String');
            }
            if (data.hasOwnProperty('snippet_url')) {
                obj['snippet_url'] = ApiClient.convertToType(data['snippet_url'], 'String');
            }
            if (data.hasOwnProperty('source_media')) {
                obj['source_media'] = ApiClient.convertToType(data['source_media'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = Synopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('track_number')) {
                obj['track_number'] = ApiClient.convertToType(data['track_number'], 'String');
            }
            if (data.hasOwnProperty('track_side')) {
                obj['track_side'] = ApiClient.convertToType(data['track_side'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['catalogue_number'] && !(typeof data['catalogue_number'] === 'string' || data['catalogue_number'] instanceof String)) {
            throw new Error("Expected the field `catalogue_number` to be a primitive type in the JSON string but got " + data['catalogue_number']);
        }
        // validate the optional field `contributions_mixin`
        if (data['contributions_mixin']) { // data not null
          ContributionsMixin.validateJSON(data['contributions_mixin']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `ids`
        if (data['ids']) { // data not null
          Ids.validateJSON(data['ids']);
        }
        // validate the optional field `images_mixin`
        if (data['images_mixin']) { // data not null
          ImagesMixin.validateJSON(data['images_mixin']);
        }
        // validate the optional field `item_of`
        if (data['item_of']) { // data not null
          Reference.validateJSON(data['item_of']);
        }
        // ensure the json data is a string
        if (data['music_code'] && !(typeof data['music_code'] === 'string' || data['music_code'] instanceof String)) {
            throw new Error("Expected the field `music_code` to be a primitive type in the JSON string but got " + data['music_code']);
        }
        // validate the optional field `offsets`
        if (data['offsets']) { // data not null
          Offsets.validateJSON(data['offsets']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `play_events`
        if (data['play_events']) { // data not null
          PlayEvents.validateJSON(data['play_events']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['record_label'] && !(typeof data['record_label'] === 'string' || data['record_label'] instanceof String)) {
            throw new Error("Expected the field `record_label` to be a primitive type in the JSON string but got " + data['record_label']);
        }
        // ensure the json data is a string
        if (data['recording_date'] && !(typeof data['recording_date'] === 'string' || data['recording_date'] instanceof String)) {
            throw new Error("Expected the field `recording_date` to be a primitive type in the JSON string but got " + data['recording_date']);
        }
        // ensure the json data is a string
        if (data['release_title'] && !(typeof data['release_title'] === 'string' || data['release_title'] instanceof String)) {
            throw new Error("Expected the field `release_title` to be a primitive type in the JSON string but got " + data['release_title']);
        }
        // ensure the json data is a string
        if (data['snippet_url'] && !(typeof data['snippet_url'] === 'string' || data['snippet_url'] instanceof String)) {
            throw new Error("Expected the field `snippet_url` to be a primitive type in the JSON string but got " + data['snippet_url']);
        }
        // ensure the json data is a string
        if (data['source_media'] && !(typeof data['source_media'] === 'string' || data['source_media'] instanceof String)) {
            throw new Error("Expected the field `source_media` to be a primitive type in the JSON string but got " + data['source_media']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          Synopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['track_number'] && !(typeof data['track_number'] === 'string' || data['track_number'] instanceof String)) {
            throw new Error("Expected the field `track_number` to be a primitive type in the JSON string but got " + data['track_number']);
        }
        // ensure the json data is a string
        if (data['track_side'] && !(typeof data['track_side'] === 'string' || data['track_side'] instanceof String)) {
            throw new Error("Expected the field `track_side` to be a primitive type in the JSON string but got " + data['track_side']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Item.RequiredProperties = ["partner", "pid"];

/**
 * @member {String} catalogue_number
 */
Item.prototype['catalogue_number'] = undefined;

/**
 * @member {module:model/ContributionsMixin} contributions_mixin
 */
Item.prototype['contributions_mixin'] = undefined;

/**
 * @member {Number} duration
 */
Item.prototype['duration'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Item.prototype['identifiers'] = undefined;

/**
 * @member {module:model/Ids} ids
 */
Item.prototype['ids'] = undefined;

/**
 * @member {module:model/ImagesMixin} images_mixin
 */
Item.prototype['images_mixin'] = undefined;

/**
 * @member {module:model/Reference} item_of
 */
Item.prototype['item_of'] = undefined;

/**
 * @member {String} music_code
 */
Item.prototype['music_code'] = undefined;

/**
 * @member {module:model/Offsets} offsets
 */
Item.prototype['offsets'] = undefined;

/**
 * @member {String} partner
 */
Item.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
Item.prototype['pid'] = undefined;

/**
 * @member {module:model/PlayEvents} play_events
 */
Item.prototype['play_events'] = undefined;

/**
 * @member {String} publisher
 */
Item.prototype['publisher'] = undefined;

/**
 * @member {String} record_label
 */
Item.prototype['record_label'] = undefined;

/**
 * @member {String} recording_date
 */
Item.prototype['recording_date'] = undefined;

/**
 * @member {String} release_title
 */
Item.prototype['release_title'] = undefined;

/**
 * @member {String} snippet_url
 */
Item.prototype['snippet_url'] = undefined;

/**
 * @member {String} source_media
 */
Item.prototype['source_media'] = undefined;

/**
 * @member {module:model/Synopses} synopses
 */
Item.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Item.prototype['title'] = undefined;

/**
 * @member {String} track_number
 */
Item.prototype['track_number'] = undefined;

/**
 * @member {String} track_side
 */
Item.prototype['track_side'] = undefined;

/**
 * @member {String} type
 */
Item.prototype['type'] = undefined;

/**
 * @member {Date} updated_time
 */
Item.prototype['updated_time'] = undefined;






export default Item;

