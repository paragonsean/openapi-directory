/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlternateImagesMixin from './AlternateImagesMixin';
import AncestorTitles from './AncestorTitles';
import AncestorsTitles from './AncestorsTitles';
import AvailabilityMixin from './AvailabilityMixin';
import ContributionsMixin from './ContributionsMixin';
import Embargoed from './Embargoed';
import GenreGroupingsType from './GenreGroupingsType';
import GenreGroupsType from './GenreGroupsType';
import Identifiers from './Identifiers';
import ImageLink from './ImageLink';
import ImagesMixin from './ImagesMixin';
import MasterBrandLink from './MasterBrandLink';
import MediaType from './MediaType';
import OriginalVersionDuration from './OriginalVersionDuration';
import PidReference from './PidReference';
import PreviousNextMixin from './PreviousNextMixin';
import ProgrammeFormats from './ProgrammeFormats';
import ProgrammeType from './ProgrammeType';
import Reference from './Reference';
import RelatedLinks from './RelatedLinks';
import ReleaseDateGroup from './ReleaseDateGroup';
import Synopses from './Synopses';
import VersionsMixin from './VersionsMixin';

/**
 * The Episode model module.
 * @module model/Episode
 * @version 1.0.0
 */
class Episode {
    /**
     * Constructs a new <code>Episode</code>.
     * @alias module:model/Episode
     * @param advertisingAllowed {String} 
     * @param embargoed {module:model/Embargoed} 
     * @param partner {String} 
     * @param pid {String} 
     * @param updatedTime {Date} 
     */
    constructor(advertisingAllowed, embargoed, partner, pid, updatedTime) { 
        
        Episode.initialize(this, advertisingAllowed, embargoed, partner, pid, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, advertisingAllowed, embargoed, partner, pid, updatedTime) { 
        obj['advertising_allowed'] = advertisingAllowed;
        obj['embargoed'] = embargoed;
        obj['partner'] = partner;
        obj['pid'] = pid;
        obj['updated_time'] = updatedTime;
    }

    /**
     * Constructs a <code>Episode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Episode} obj Optional instance to populate.
     * @return {module:model/Episode} The populated <code>Episode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Episode();

            if (data.hasOwnProperty('advertising_allowed')) {
                obj['advertising_allowed'] = ApiClient.convertToType(data['advertising_allowed'], 'String');
            }
            if (data.hasOwnProperty('alternate_images_mixin')) {
                obj['alternate_images_mixin'] = AlternateImagesMixin.constructFromObject(data['alternate_images_mixin']);
            }
            if (data.hasOwnProperty('ancestor_titles')) {
                obj['ancestor_titles'] = AncestorTitles.constructFromObject(data['ancestor_titles']);
            }
            if (data.hasOwnProperty('ancestors')) {
                obj['ancestors'] = Reference.constructFromObject(data['ancestors']);
            }
            if (data.hasOwnProperty('ancestors_titles')) {
                obj['ancestors_titles'] = AncestorsTitles.constructFromObject(data['ancestors_titles']);
            }
            if (data.hasOwnProperty('availability_mixin')) {
                obj['availability_mixin'] = AvailabilityMixin.constructFromObject(data['availability_mixin']);
            }
            if (data.hasOwnProperty('contributions_mixin')) {
                obj['contributions_mixin'] = ContributionsMixin.constructFromObject(data['contributions_mixin']);
            }
            if (data.hasOwnProperty('embargoed')) {
                obj['embargoed'] = Embargoed.constructFromObject(data['embargoed']);
            }
            if (data.hasOwnProperty('episode_of')) {
                obj['episode_of'] = PidReference.constructFromObject(data['episode_of']);
            }
            if (data.hasOwnProperty('genre_groupings')) {
                obj['genre_groupings'] = GenreGroupingsType.constructFromObject(data['genre_groupings']);
            }
            if (data.hasOwnProperty('genre_groups')) {
                obj['genre_groups'] = GenreGroupsType.constructFromObject(data['genre_groups']);
            }
            if (data.hasOwnProperty('has_guidance')) {
                obj['has_guidance'] = ApiClient.convertToType(data['has_guidance'], 'Boolean');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = Identifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('image_link')) {
                obj['image_link'] = ImageLink.constructFromObject(data['image_link']);
            }
            if (data.hasOwnProperty('images_mixin')) {
                obj['images_mixin'] = ImagesMixin.constructFromObject(data['images_mixin']);
            }
            if (data.hasOwnProperty('is_embeddable')) {
                obj['is_embeddable'] = ApiClient.convertToType(data['is_embeddable'], 'Boolean');
            }
            if (data.hasOwnProperty('is_stacked')) {
                obj['is_stacked'] = ApiClient.convertToType(data['is_stacked'], 'Boolean');
            }
            if (data.hasOwnProperty('items_for')) {
                obj['items_for'] = Reference.constructFromObject(data['items_for']);
            }
            if (data.hasOwnProperty('master_brand_link')) {
                obj['master_brand_link'] = MasterBrandLink.constructFromObject(data['master_brand_link']);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = MediaType.constructFromObject(data['media_type']);
            }
            if (data.hasOwnProperty('original_version_duration')) {
                obj['original_version_duration'] = OriginalVersionDuration.constructFromObject(data['original_version_duration']);
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('presentation_title')) {
                obj['presentation_title'] = ApiClient.convertToType(data['presentation_title'], 'String');
            }
            if (data.hasOwnProperty('previous_next_mixin')) {
                obj['previous_next_mixin'] = PreviousNextMixin.constructFromObject(data['previous_next_mixin']);
            }
            if (data.hasOwnProperty('programme_formats')) {
                obj['programme_formats'] = ProgrammeFormats.constructFromObject(data['programme_formats']);
            }
            if (data.hasOwnProperty('programme_type')) {
                obj['programme_type'] = ProgrammeType.constructFromObject(data['programme_type']);
            }
            if (data.hasOwnProperty('related_links')) {
                obj['related_links'] = RelatedLinks.constructFromObject(data['related_links']);
            }
            if (data.hasOwnProperty('release_date_group')) {
                obj['release_date_group'] = ReleaseDateGroup.constructFromObject(data['release_date_group']);
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = Synopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('versions_mixin')) {
                obj['versions_mixin'] = VersionsMixin.constructFromObject(data['versions_mixin']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Episode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Episode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Episode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['advertising_allowed'] && !(typeof data['advertising_allowed'] === 'string' || data['advertising_allowed'] instanceof String)) {
            throw new Error("Expected the field `advertising_allowed` to be a primitive type in the JSON string but got " + data['advertising_allowed']);
        }
        // validate the optional field `alternate_images_mixin`
        if (data['alternate_images_mixin']) { // data not null
          AlternateImagesMixin.validateJSON(data['alternate_images_mixin']);
        }
        // validate the optional field `ancestor_titles`
        if (data['ancestor_titles']) { // data not null
          AncestorTitles.validateJSON(data['ancestor_titles']);
        }
        // validate the optional field `ancestors`
        if (data['ancestors']) { // data not null
          Reference.validateJSON(data['ancestors']);
        }
        // validate the optional field `ancestors_titles`
        if (data['ancestors_titles']) { // data not null
          AncestorsTitles.validateJSON(data['ancestors_titles']);
        }
        // validate the optional field `availability_mixin`
        if (data['availability_mixin']) { // data not null
          AvailabilityMixin.validateJSON(data['availability_mixin']);
        }
        // validate the optional field `contributions_mixin`
        if (data['contributions_mixin']) { // data not null
          ContributionsMixin.validateJSON(data['contributions_mixin']);
        }
        // validate the optional field `episode_of`
        if (data['episode_of']) { // data not null
          PidReference.validateJSON(data['episode_of']);
        }
        // validate the optional field `genre_groupings`
        if (data['genre_groupings']) { // data not null
          GenreGroupingsType.validateJSON(data['genre_groupings']);
        }
        // validate the optional field `genre_groups`
        if (data['genre_groups']) { // data not null
          GenreGroupsType.validateJSON(data['genre_groups']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          Identifiers.validateJSON(data['identifiers']);
        }
        // validate the optional field `image_link`
        if (data['image_link']) { // data not null
          ImageLink.validateJSON(data['image_link']);
        }
        // validate the optional field `images_mixin`
        if (data['images_mixin']) { // data not null
          ImagesMixin.validateJSON(data['images_mixin']);
        }
        // validate the optional field `items_for`
        if (data['items_for']) { // data not null
          Reference.validateJSON(data['items_for']);
        }
        // validate the optional field `master_brand_link`
        if (data['master_brand_link']) { // data not null
          MasterBrandLink.validateJSON(data['master_brand_link']);
        }
        // validate the optional field `original_version_duration`
        if (data['original_version_duration']) { // data not null
          OriginalVersionDuration.validateJSON(data['original_version_duration']);
        }
        // ensure the json data is a string
        if (data['partner'] && !(typeof data['partner'] === 'string' || data['partner'] instanceof String)) {
            throw new Error("Expected the field `partner` to be a primitive type in the JSON string but got " + data['partner']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['presentation_title'] && !(typeof data['presentation_title'] === 'string' || data['presentation_title'] instanceof String)) {
            throw new Error("Expected the field `presentation_title` to be a primitive type in the JSON string but got " + data['presentation_title']);
        }
        // validate the optional field `previous_next_mixin`
        if (data['previous_next_mixin']) { // data not null
          PreviousNextMixin.validateJSON(data['previous_next_mixin']);
        }
        // validate the optional field `programme_formats`
        if (data['programme_formats']) { // data not null
          ProgrammeFormats.validateJSON(data['programme_formats']);
        }
        // validate the optional field `programme_type`
        if (data['programme_type']) { // data not null
          ProgrammeType.validateJSON(data['programme_type']);
        }
        // validate the optional field `related_links`
        if (data['related_links']) { // data not null
          RelatedLinks.validateJSON(data['related_links']);
        }
        // validate the optional field `release_date_group`
        if (data['release_date_group']) { // data not null
          ReleaseDateGroup.validateJSON(data['release_date_group']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          Synopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `versions_mixin`
        if (data['versions_mixin']) { // data not null
          VersionsMixin.validateJSON(data['versions_mixin']);
        }

        return true;
    }


}

Episode.RequiredProperties = ["advertising_allowed", "embargoed", "partner", "pid", "updated_time"];

/**
 * @member {String} advertising_allowed
 */
Episode.prototype['advertising_allowed'] = undefined;

/**
 * @member {module:model/AlternateImagesMixin} alternate_images_mixin
 */
Episode.prototype['alternate_images_mixin'] = undefined;

/**
 * @member {module:model/AncestorTitles} ancestor_titles
 */
Episode.prototype['ancestor_titles'] = undefined;

/**
 * @member {module:model/Reference} ancestors
 */
Episode.prototype['ancestors'] = undefined;

/**
 * @member {module:model/AncestorsTitles} ancestors_titles
 */
Episode.prototype['ancestors_titles'] = undefined;

/**
 * @member {module:model/AvailabilityMixin} availability_mixin
 */
Episode.prototype['availability_mixin'] = undefined;

/**
 * @member {module:model/ContributionsMixin} contributions_mixin
 */
Episode.prototype['contributions_mixin'] = undefined;

/**
 * @member {module:model/Embargoed} embargoed
 */
Episode.prototype['embargoed'] = undefined;

/**
 * @member {module:model/PidReference} episode_of
 */
Episode.prototype['episode_of'] = undefined;

/**
 * @member {module:model/GenreGroupingsType} genre_groupings
 */
Episode.prototype['genre_groupings'] = undefined;

/**
 * @member {module:model/GenreGroupsType} genre_groups
 */
Episode.prototype['genre_groups'] = undefined;

/**
 * @member {Boolean} has_guidance
 */
Episode.prototype['has_guidance'] = undefined;

/**
 * @member {module:model/Identifiers} identifiers
 */
Episode.prototype['identifiers'] = undefined;

/**
 * @member {module:model/ImageLink} image_link
 */
Episode.prototype['image_link'] = undefined;

/**
 * @member {module:model/ImagesMixin} images_mixin
 */
Episode.prototype['images_mixin'] = undefined;

/**
 * @member {Boolean} is_embeddable
 */
Episode.prototype['is_embeddable'] = undefined;

/**
 * @member {Boolean} is_stacked
 */
Episode.prototype['is_stacked'] = undefined;

/**
 * @member {module:model/Reference} items_for
 */
Episode.prototype['items_for'] = undefined;

/**
 * @member {module:model/MasterBrandLink} master_brand_link
 */
Episode.prototype['master_brand_link'] = undefined;

/**
 * @member {module:model/MediaType} media_type
 */
Episode.prototype['media_type'] = undefined;

/**
 * @member {module:model/OriginalVersionDuration} original_version_duration
 */
Episode.prototype['original_version_duration'] = undefined;

/**
 * @member {String} partner
 */
Episode.prototype['partner'] = undefined;

/**
 * @member {String} pid
 */
Episode.prototype['pid'] = undefined;

/**
 * @member {String} presentation_title
 */
Episode.prototype['presentation_title'] = undefined;

/**
 * @member {module:model/PreviousNextMixin} previous_next_mixin
 */
Episode.prototype['previous_next_mixin'] = undefined;

/**
 * @member {module:model/ProgrammeFormats} programme_formats
 */
Episode.prototype['programme_formats'] = undefined;

/**
 * @member {module:model/ProgrammeType} programme_type
 */
Episode.prototype['programme_type'] = undefined;

/**
 * @member {module:model/RelatedLinks} related_links
 */
Episode.prototype['related_links'] = undefined;

/**
 * @member {module:model/ReleaseDateGroup} release_date_group
 */
Episode.prototype['release_date_group'] = undefined;

/**
 * @member {module:model/Synopses} synopses
 */
Episode.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Episode.prototype['title'] = undefined;

/**
 * @member {Date} updated_time
 */
Episode.prototype['updated_time'] = undefined;

/**
 * @member {String} uri
 */
Episode.prototype['uri'] = undefined;

/**
 * @member {module:model/VersionsMixin} versions_mixin
 */
Episode.prototype['versions_mixin'] = undefined;






export default Episode;

