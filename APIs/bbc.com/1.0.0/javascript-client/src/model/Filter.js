/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Option from './Option';
import Prohibits from './Prohibits';
import ReleaseStatusType from './ReleaseStatusType';

/**
 * The Filter model module.
 * @module model/Filter
 * @version 1.0.0
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * @alias module:model/Filter
     * @param name {String} 
     * @param title {String} 
     * @param type {String} 
     */
    constructor(name, title, type) { 
        
        Filter.initialize(this, name, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, title, type) { 
        obj['name'] = name;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('depends_on')) {
                obj['depends_on'] = ApiClient.convertToType(data['depends_on'], 'String');
            }
            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('deprecated_since')) {
                obj['deprecated_since'] = ApiClient.convertToType(data['deprecated_since'], 'String');
            }
            if (data.hasOwnProperty('guaranteed_until')) {
                obj['guaranteed_until'] = ApiClient.convertToType(data['guaranteed_until'], 'String');
            }
            if (data.hasOwnProperty('max_value')) {
                obj['max_value'] = ApiClient.convertToType(data['max_value'], 'Number');
            }
            if (data.hasOwnProperty('min_value')) {
                obj['min_value'] = ApiClient.convertToType(data['min_value'], 'Number');
            }
            if (data.hasOwnProperty('multiple_values')) {
                obj['multiple_values'] = ApiClient.convertToType(data['multiple_values'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('option')) {
                obj['option'] = ApiClient.convertToType(data['option'], [Option]);
            }
            if (data.hasOwnProperty('prefer')) {
                obj['prefer'] = ApiClient.convertToType(data['prefer'], 'String');
            }
            if (data.hasOwnProperty('prohibits')) {
                obj['prohibits'] = ApiClient.convertToType(data['prohibits'], [Prohibits]);
            }
            if (data.hasOwnProperty('release_status')) {
                obj['release_status'] = ReleaseStatusType.constructFromObject(data['release_status']);
            }
            if (data.hasOwnProperty('replaced_by')) {
                obj['replaced_by'] = ApiClient.convertToType(data['replaced_by'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Filter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }
        // ensure the json data is a string
        if (data['depends_on'] && !(typeof data['depends_on'] === 'string' || data['depends_on'] instanceof String)) {
            throw new Error("Expected the field `depends_on` to be a primitive type in the JSON string but got " + data['depends_on']);
        }
        // ensure the json data is a string
        if (data['deprecated_since'] && !(typeof data['deprecated_since'] === 'string' || data['deprecated_since'] instanceof String)) {
            throw new Error("Expected the field `deprecated_since` to be a primitive type in the JSON string but got " + data['deprecated_since']);
        }
        // ensure the json data is a string
        if (data['guaranteed_until'] && !(typeof data['guaranteed_until'] === 'string' || data['guaranteed_until'] instanceof String)) {
            throw new Error("Expected the field `guaranteed_until` to be a primitive type in the JSON string but got " + data['guaranteed_until']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['option']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['option'])) {
                throw new Error("Expected the field `option` to be an array in the JSON data but got " + data['option']);
            }
            // validate the optional field `option` (array)
            for (const item of data['option']) {
                Option.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['prefer'] && !(typeof data['prefer'] === 'string' || data['prefer'] instanceof String)) {
            throw new Error("Expected the field `prefer` to be a primitive type in the JSON string but got " + data['prefer']);
        }
        if (data['prohibits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prohibits'])) {
                throw new Error("Expected the field `prohibits` to be an array in the JSON data but got " + data['prohibits']);
            }
            // validate the optional field `prohibits` (array)
            for (const item of data['prohibits']) {
                Prohibits.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['replaced_by'] && !(typeof data['replaced_by'] === 'string' || data['replaced_by'] instanceof String)) {
            throw new Error("Expected the field `replaced_by` to be a primitive type in the JSON string but got " + data['replaced_by']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Filter.RequiredProperties = ["name", "title", "type"];

/**
 * @member {String} default
 */
Filter.prototype['default'] = undefined;

/**
 * @member {String} depends_on
 */
Filter.prototype['depends_on'] = undefined;

/**
 * @member {Boolean} deprecated
 */
Filter.prototype['deprecated'] = undefined;

/**
 * @member {String} deprecated_since
 */
Filter.prototype['deprecated_since'] = undefined;

/**
 * @member {String} guaranteed_until
 */
Filter.prototype['guaranteed_until'] = undefined;

/**
 * @member {Number} max_value
 */
Filter.prototype['max_value'] = undefined;

/**
 * @member {Number} min_value
 */
Filter.prototype['min_value'] = undefined;

/**
 * @member {Boolean} multiple_values
 */
Filter.prototype['multiple_values'] = undefined;

/**
 * @member {String} name
 */
Filter.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Option>} option
 */
Filter.prototype['option'] = undefined;

/**
 * @member {String} prefer
 */
Filter.prototype['prefer'] = undefined;

/**
 * @member {Array.<module:model/Prohibits>} prohibits
 */
Filter.prototype['prohibits'] = undefined;

/**
 * @member {module:model/ReleaseStatusType} release_status
 */
Filter.prototype['release_status'] = undefined;

/**
 * @member {String} replaced_by
 */
Filter.prototype['replaced_by'] = undefined;

/**
 * @member {Boolean} required
 */
Filter.prototype['required'] = undefined;

/**
 * @member {String} title
 */
Filter.prototype['title'] = undefined;

/**
 * @member {String} type
 */
Filter.prototype['type'] = undefined;






export default Filter;

