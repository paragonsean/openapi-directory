/**
 * BBC Nitro API
 * BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nitro@bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BbcNitroApi);
  }
}(this, function(expect, BbcNitroApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BbcNitroApi.FeedsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FeedsApi', function() {
    describe('listAvailability', function() {
      it('should call listAvailability successfully', function(done) {
        //uncomment below and update the code to test listAvailability
        //instance.listAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBroadcasts', function() {
      it('should call listBroadcasts successfully', function(done) {
        //uncomment below and update the code to test listBroadcasts
        //instance.listBroadcasts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGroups', function() {
      it('should call listGroups successfully', function(done) {
        //uncomment below and update the code to test listGroups
        //instance.listGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImages', function() {
      it('should call listImages successfully', function(done) {
        //uncomment below and update the code to test listImages
        //instance.listImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listItems', function() {
      it('should call listItems successfully', function(done) {
        //uncomment below and update the code to test listItems
        //instance.listItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMasterbrands', function() {
      it('should call listMasterbrands successfully', function(done) {
        //uncomment below and update the code to test listMasterbrands
        //instance.listMasterbrands(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPeople', function() {
      it('should call listPeople successfully', function(done) {
        //uncomment below and update the code to test listPeople
        //instance.listPeople(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPips', function() {
      it('should call listPips successfully', function(done) {
        //uncomment below and update the code to test listPips
        //instance.listPips(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProgrammeDetails', function() {
      it('should call listProgrammeDetails successfully', function(done) {
        //uncomment below and update the code to test listProgrammeDetails
        //instance.listProgrammeDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProgrammes', function() {
      it('should call listProgrammes successfully', function(done) {
        //uncomment below and update the code to test listProgrammes
        //instance.listProgrammes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPromotions', function() {
      it('should call listPromotions successfully', function(done) {
        //uncomment below and update the code to test listPromotions
        //instance.listPromotions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSchedules', function() {
      it('should call listSchedules successfully', function(done) {
        //uncomment below and update the code to test listSchedules
        //instance.listSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServices', function() {
      it('should call listServices successfully', function(done) {
        //uncomment below and update the code to test listServices
        //instance.listServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVersions', function() {
      it('should call listVersions successfully', function(done) {
        //uncomment below and update the code to test listVersions
        //instance.listVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
