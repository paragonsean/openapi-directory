# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PrivateIndividualName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, dob: str=None, forename: str=None, gender: str=None, middle_name: str=None, phone_number: str=None, surname: str=None):
        """PrivateIndividualName - a model defined in OpenAPI

        :param address: The address of this PrivateIndividualName.
        :param dob: The dob of this PrivateIndividualName.
        :param forename: The forename of this PrivateIndividualName.
        :param gender: The gender of this PrivateIndividualName.
        :param middle_name: The middle_name of this PrivateIndividualName.
        :param phone_number: The phone_number of this PrivateIndividualName.
        :param surname: The surname of this PrivateIndividualName.
        """
        self.openapi_types = {
            'address': str,
            'dob': str,
            'forename': str,
            'gender': str,
            'middle_name': str,
            'phone_number': str,
            'surname': str
        }

        self.attribute_map = {
            'address': 'address',
            'dob': 'dob',
            'forename': 'forename',
            'gender': 'gender',
            'middle_name': 'middle_name',
            'phone_number': 'phone_number',
            'surname': 'surname'
        }

        self._address = address
        self._dob = dob
        self._forename = forename
        self._gender = gender
        self._middle_name = middle_name
        self._phone_number = phone_number
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateIndividualName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateIndividualName of this PrivateIndividualName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PrivateIndividualName.


        :return: The address of this PrivateIndividualName.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PrivateIndividualName.


        :param address: The address of this PrivateIndividualName.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")
        if address is not None and not re.search(r'[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9](?:A-Z-245|[^CIKMOV]){2}', address):
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9](?:A-Z-245|[^CIKMOV]){2}/`")

        self._address = address

    @property
    def dob(self):
        """Gets the dob of this PrivateIndividualName.


        :return: The dob of this PrivateIndividualName.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PrivateIndividualName.


        :param dob: The dob of this PrivateIndividualName.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")
        if dob is not None and not re.search(r'^(0[1-9]|[12][0-9]|3[01])[\/\-](0[1-9]|1[012])[\/\-]\d{4}$', dob):
            raise ValueError("Invalid value for `dob`, must be a follow pattern or equal to `/^(0[1-9]|[12][0-9]|3[01])[\/\-](0[1-9]|1[012])[\/\-]\d{4}$/`")

        self._dob = dob

    @property
    def forename(self):
        """Gets the forename of this PrivateIndividualName.


        :return: The forename of this PrivateIndividualName.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this PrivateIndividualName.


        :param forename: The forename of this PrivateIndividualName.
        :type forename: str
        """
        if forename is None:
            raise ValueError("Invalid value for `forename`, must not be `None`")
        if forename is not None and not re.search(r'^(?!\s*$).+', forename):
            raise ValueError("Invalid value for `forename`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._forename = forename

    @property
    def gender(self):
        """Gets the gender of this PrivateIndividualName.


        :return: The gender of this PrivateIndividualName.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PrivateIndividualName.


        :param gender: The gender of this PrivateIndividualName.
        :type gender: str
        """
        allowed_values = ["Male", "Female", "Not Specified"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def middle_name(self):
        """Gets the middle_name of this PrivateIndividualName.


        :return: The middle_name of this PrivateIndividualName.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this PrivateIndividualName.


        :param middle_name: The middle_name of this PrivateIndividualName.
        :type middle_name: str
        """
        if middle_name is not None and not re.search(r'^(?!\s*$).+', middle_name):
            raise ValueError("Invalid value for `middle_name`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._middle_name = middle_name

    @property
    def phone_number(self):
        """Gets the phone_number of this PrivateIndividualName.


        :return: The phone_number of this PrivateIndividualName.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PrivateIndividualName.


        :param phone_number: The phone_number of this PrivateIndividualName.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")
        if phone_number is not None and not re.search(r'^(07[\d]{9})$', phone_number):
            raise ValueError("Invalid value for `phone_number`, must be a follow pattern or equal to `/^(07[\d]{9})$/`")

        self._phone_number = phone_number

    @property
    def surname(self):
        """Gets the surname of this PrivateIndividualName.


        :return: The surname of this PrivateIndividualName.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this PrivateIndividualName.


        :param surname: The surname of this PrivateIndividualName.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")
        if surname is not None and not re.search(r'^(?!\s*$).+', surname):
            raise ValueError("Invalid value for `surname`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._surname = surname
