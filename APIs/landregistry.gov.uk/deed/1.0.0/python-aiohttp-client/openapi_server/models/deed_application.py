# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_individual_name import PrivateIndividualName
import re
from openapi_server import util


class DeedApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, borrowers: List[PrivateIndividualName]=None, identity_checked: str=None, md_ref: str=None, property_address: str=None, title_number: str=None):
        """DeedApplication - a model defined in OpenAPI

        :param borrowers: The borrowers of this DeedApplication.
        :param identity_checked: The identity_checked of this DeedApplication.
        :param md_ref: The md_ref of this DeedApplication.
        :param property_address: The property_address of this DeedApplication.
        :param title_number: The title_number of this DeedApplication.
        """
        self.openapi_types = {
            'borrowers': List[PrivateIndividualName],
            'identity_checked': str,
            'md_ref': str,
            'property_address': str,
            'title_number': str
        }

        self.attribute_map = {
            'borrowers': 'borrowers',
            'identity_checked': 'identity_checked',
            'md_ref': 'md_ref',
            'property_address': 'property_address',
            'title_number': 'title_number'
        }

        self._borrowers = borrowers
        self._identity_checked = identity_checked
        self._md_ref = md_ref
        self._property_address = property_address
        self._title_number = title_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeedApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deed_Application of this DeedApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def borrowers(self):
        """Gets the borrowers of this DeedApplication.


        :return: The borrowers of this DeedApplication.
        :rtype: List[PrivateIndividualName]
        """
        return self._borrowers

    @borrowers.setter
    def borrowers(self, borrowers):
        """Sets the borrowers of this DeedApplication.


        :param borrowers: The borrowers of this DeedApplication.
        :type borrowers: List[PrivateIndividualName]
        """
        if borrowers is None:
            raise ValueError("Invalid value for `borrowers`, must not be `None`")
        if borrowers is not None and len(borrowers) < 1:
            raise ValueError("Invalid value for `borrowers`, number of items must be greater than or equal to `1`")

        self._borrowers = borrowers

    @property
    def identity_checked(self):
        """Gets the identity_checked of this DeedApplication.


        :return: The identity_checked of this DeedApplication.
        :rtype: str
        """
        return self._identity_checked

    @identity_checked.setter
    def identity_checked(self, identity_checked):
        """Sets the identity_checked of this DeedApplication.


        :param identity_checked: The identity_checked of this DeedApplication.
        :type identity_checked: str
        """
        if identity_checked is None:
            raise ValueError("Invalid value for `identity_checked`, must not be `None`")
        if identity_checked is not None and not re.search(r'^[Y]$', identity_checked):
            raise ValueError("Invalid value for `identity_checked`, must be a follow pattern or equal to `/^[Y]$/`")

        self._identity_checked = identity_checked

    @property
    def md_ref(self):
        """Gets the md_ref of this DeedApplication.


        :return: The md_ref of this DeedApplication.
        :rtype: str
        """
        return self._md_ref

    @md_ref.setter
    def md_ref(self, md_ref):
        """Sets the md_ref of this DeedApplication.


        :param md_ref: The md_ref of this DeedApplication.
        :type md_ref: str
        """
        if md_ref is None:
            raise ValueError("Invalid value for `md_ref`, must not be `None`")
        if md_ref is not None and not re.search(r'^e-MD([0-9]{5}|([0-9]{3,4}[A-Z]{1}))$', md_ref):
            raise ValueError("Invalid value for `md_ref`, must be a follow pattern or equal to `/^e-MD([0-9]{5}|([0-9]{3,4}[A-Z]{1}))$/`")

        self._md_ref = md_ref

    @property
    def property_address(self):
        """Gets the property_address of this DeedApplication.

        The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA

        :return: The property_address of this DeedApplication.
        :rtype: str
        """
        return self._property_address

    @property_address.setter
    def property_address(self, property_address):
        """Sets the property_address of this DeedApplication.

        The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA

        :param property_address: The property_address of this DeedApplication.
        :type property_address: str
        """
        if property_address is None:
            raise ValueError("Invalid value for `property_address`, must not be `None`")
        if property_address is not None and not re.search(r'^(?!\s*$).+', property_address):
            raise ValueError("Invalid value for `property_address`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._property_address = property_address

    @property
    def title_number(self):
        """Gets the title_number of this DeedApplication.


        :return: The title_number of this DeedApplication.
        :rtype: str
        """
        return self._title_number

    @title_number.setter
    def title_number(self, title_number):
        """Sets the title_number of this DeedApplication.


        :param title_number: The title_number of this DeedApplication.
        :type title_number: str
        """
        if title_number is None:
            raise ValueError("Invalid value for `title_number`, must not be `None`")
        if title_number is not None and not re.search(r'^([A-Z]{0,3}[1-9][0-9]{0,5}|[0-9]{1,6}[ZT])$', title_number):
            raise ValueError("Invalid value for `title_number`, must be a follow pattern or equal to `/^([A-Z]{0,3}[1-9][0-9]{0,5}|[0-9]{1,6}[ZT])$/`")

        self._title_number = title_number
