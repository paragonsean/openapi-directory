# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Borrower(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forename: str=None, id: str=None, middle_name: str=None, surname: str=None, token: str=None):
        """Borrower - a model defined in OpenAPI

        :param forename: The forename of this Borrower.
        :param id: The id of this Borrower.
        :param middle_name: The middle_name of this Borrower.
        :param surname: The surname of this Borrower.
        :param token: The token of this Borrower.
        """
        self.openapi_types = {
            'forename': str,
            'id': str,
            'middle_name': str,
            'surname': str,
            'token': str
        }

        self.attribute_map = {
            'forename': 'forename',
            'id': 'id',
            'middle_name': 'middle_name',
            'surname': 'surname',
            'token': 'token'
        }

        self._forename = forename
        self._id = id
        self._middle_name = middle_name
        self._surname = surname
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Borrower':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Borrower of this Borrower.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forename(self):
        """Gets the forename of this Borrower.


        :return: The forename of this Borrower.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this Borrower.


        :param forename: The forename of this Borrower.
        :type forename: str
        """
        if forename is None:
            raise ValueError("Invalid value for `forename`, must not be `None`")
        if forename is not None and not re.search(r'^(?!\s*$).+', forename):
            raise ValueError("Invalid value for `forename`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._forename = forename

    @property
    def id(self):
        """Gets the id of this Borrower.


        :return: The id of this Borrower.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Borrower.


        :param id: The id of this Borrower.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]+$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]+$/`")

        self._id = id

    @property
    def middle_name(self):
        """Gets the middle_name of this Borrower.


        :return: The middle_name of this Borrower.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Borrower.


        :param middle_name: The middle_name of this Borrower.
        :type middle_name: str
        """
        if middle_name is not None and not re.search(r'^(?!\s*$).+', middle_name):
            raise ValueError("Invalid value for `middle_name`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._middle_name = middle_name

    @property
    def surname(self):
        """Gets the surname of this Borrower.


        :return: The surname of this Borrower.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Borrower.


        :param surname: The surname of this Borrower.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")
        if surname is not None and not re.search(r'^(?!\s*$).+', surname):
            raise ValueError("Invalid value for `surname`, must be a follow pattern or equal to `/^(?!\s*$).+/`")

        self._surname = surname

    @property
    def token(self):
        """Gets the token of this Borrower.


        :return: The token of this Borrower.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Borrower.


        :param token: The token of this Borrower.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")
        if token is not None and not re.search(r'^([a-zA-Z0-9]{8})$', token):
            raise ValueError("Invalid value for `token`, must be a follow pattern or equal to `/^([a-zA-Z0-9]{8})$/`")

        self._token = token
