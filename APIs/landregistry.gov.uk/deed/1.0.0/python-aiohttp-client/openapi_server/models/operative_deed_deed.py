# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_provisions_inner import AdditionalProvisionsInner
from openapi_server.models.borrower import Borrower
from openapi_server.models.charge_clause import ChargeClause
from openapi_server.models.lender import Lender
from openapi_server import util


class OperativeDeedDeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_provisions: List[AdditionalProvisionsInner]=None, borrowers: List[Borrower]=None, charge_clause: ChargeClause=None, deed_status: str=None, effective_clause: str=None, lender: Lender=None, md_ref: str=None, property_address: str=None, title_number: str=None):
        """OperativeDeedDeed - a model defined in OpenAPI

        :param additional_provisions: The additional_provisions of this OperativeDeedDeed.
        :param borrowers: The borrowers of this OperativeDeedDeed.
        :param charge_clause: The charge_clause of this OperativeDeedDeed.
        :param deed_status: The deed_status of this OperativeDeedDeed.
        :param effective_clause: The effective_clause of this OperativeDeedDeed.
        :param lender: The lender of this OperativeDeedDeed.
        :param md_ref: The md_ref of this OperativeDeedDeed.
        :param property_address: The property_address of this OperativeDeedDeed.
        :param title_number: The title_number of this OperativeDeedDeed.
        """
        self.openapi_types = {
            'additional_provisions': List[AdditionalProvisionsInner],
            'borrowers': List[Borrower],
            'charge_clause': ChargeClause,
            'deed_status': str,
            'effective_clause': str,
            'lender': Lender,
            'md_ref': str,
            'property_address': str,
            'title_number': str
        }

        self.attribute_map = {
            'additional_provisions': 'additional_provisions',
            'borrowers': 'borrowers',
            'charge_clause': 'charge_clause',
            'deed_status': 'deed_status',
            'effective_clause': 'effective_clause',
            'lender': 'lender',
            'md_ref': 'md_ref',
            'property_address': 'property_address',
            'title_number': 'title_number'
        }

        self._additional_provisions = additional_provisions
        self._borrowers = borrowers
        self._charge_clause = charge_clause
        self._deed_status = deed_status
        self._effective_clause = effective_clause
        self._lender = lender
        self._md_ref = md_ref
        self._property_address = property_address
        self._title_number = title_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperativeDeedDeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operative_Deed_deed of this OperativeDeedDeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_provisions(self):
        """Gets the additional_provisions of this OperativeDeedDeed.


        :return: The additional_provisions of this OperativeDeedDeed.
        :rtype: List[AdditionalProvisionsInner]
        """
        return self._additional_provisions

    @additional_provisions.setter
    def additional_provisions(self, additional_provisions):
        """Sets the additional_provisions of this OperativeDeedDeed.


        :param additional_provisions: The additional_provisions of this OperativeDeedDeed.
        :type additional_provisions: List[AdditionalProvisionsInner]
        """
        if additional_provisions is not None and len(additional_provisions) < 0:
            raise ValueError("Invalid value for `additional_provisions`, number of items must be greater than or equal to `0`")

        self._additional_provisions = additional_provisions

    @property
    def borrowers(self):
        """Gets the borrowers of this OperativeDeedDeed.


        :return: The borrowers of this OperativeDeedDeed.
        :rtype: List[Borrower]
        """
        return self._borrowers

    @borrowers.setter
    def borrowers(self, borrowers):
        """Sets the borrowers of this OperativeDeedDeed.


        :param borrowers: The borrowers of this OperativeDeedDeed.
        :type borrowers: List[Borrower]
        """
        if borrowers is not None and len(borrowers) < 1:
            raise ValueError("Invalid value for `borrowers`, number of items must be greater than or equal to `1`")

        self._borrowers = borrowers

    @property
    def charge_clause(self):
        """Gets the charge_clause of this OperativeDeedDeed.


        :return: The charge_clause of this OperativeDeedDeed.
        :rtype: ChargeClause
        """
        return self._charge_clause

    @charge_clause.setter
    def charge_clause(self, charge_clause):
        """Sets the charge_clause of this OperativeDeedDeed.


        :param charge_clause: The charge_clause of this OperativeDeedDeed.
        :type charge_clause: ChargeClause
        """

        self._charge_clause = charge_clause

    @property
    def deed_status(self):
        """Gets the deed_status of this OperativeDeedDeed.

        Current state of the deed

        :return: The deed_status of this OperativeDeedDeed.
        :rtype: str
        """
        return self._deed_status

    @deed_status.setter
    def deed_status(self, deed_status):
        """Sets the deed_status of this OperativeDeedDeed.

        Current state of the deed

        :param deed_status: The deed_status of this OperativeDeedDeed.
        :type deed_status: str
        """

        self._deed_status = deed_status

    @property
    def effective_clause(self):
        """Gets the effective_clause of this OperativeDeedDeed.

        Text to display the make effective clause

        :return: The effective_clause of this OperativeDeedDeed.
        :rtype: str
        """
        return self._effective_clause

    @effective_clause.setter
    def effective_clause(self, effective_clause):
        """Sets the effective_clause of this OperativeDeedDeed.

        Text to display the make effective clause

        :param effective_clause: The effective_clause of this OperativeDeedDeed.
        :type effective_clause: str
        """

        self._effective_clause = effective_clause

    @property
    def lender(self):
        """Gets the lender of this OperativeDeedDeed.


        :return: The lender of this OperativeDeedDeed.
        :rtype: Lender
        """
        return self._lender

    @lender.setter
    def lender(self, lender):
        """Sets the lender of this OperativeDeedDeed.


        :param lender: The lender of this OperativeDeedDeed.
        :type lender: Lender
        """

        self._lender = lender

    @property
    def md_ref(self):
        """Gets the md_ref of this OperativeDeedDeed.

        Land Registry assigned number for a Mortgage Deed (MD). If you wish to use an existing MD reference please prefix it with e- to comply with our system (eg e-MD12345)

        :return: The md_ref of this OperativeDeedDeed.
        :rtype: str
        """
        return self._md_ref

    @md_ref.setter
    def md_ref(self, md_ref):
        """Sets the md_ref of this OperativeDeedDeed.

        Land Registry assigned number for a Mortgage Deed (MD). If you wish to use an existing MD reference please prefix it with e- to comply with our system (eg e-MD12345)

        :param md_ref: The md_ref of this OperativeDeedDeed.
        :type md_ref: str
        """

        self._md_ref = md_ref

    @property
    def property_address(self):
        """Gets the property_address of this OperativeDeedDeed.

        The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA

        :return: The property_address of this OperativeDeedDeed.
        :rtype: str
        """
        return self._property_address

    @property_address.setter
    def property_address(self, property_address):
        """Sets the property_address of this OperativeDeedDeed.

        The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA

        :param property_address: The property_address of this OperativeDeedDeed.
        :type property_address: str
        """

        self._property_address = property_address

    @property
    def title_number(self):
        """Gets the title_number of this OperativeDeedDeed.

        Unique Land Registry identifier for the registered estate.

        :return: The title_number of this OperativeDeedDeed.
        :rtype: str
        """
        return self._title_number

    @title_number.setter
    def title_number(self, title_number):
        """Sets the title_number of this OperativeDeedDeed.

        Unique Land Registry identifier for the registered estate.

        :param title_number: The title_number of this OperativeDeedDeed.
        :type title_number: str
        """

        self._title_number = title_number
