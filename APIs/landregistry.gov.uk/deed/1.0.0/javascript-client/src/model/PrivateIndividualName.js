/**
 * Deed API
 * Land Registry Deed API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrivateIndividualName model module.
 * @module model/PrivateIndividualName
 * @version 1.0.0
 */
class PrivateIndividualName {
    /**
     * Constructs a new <code>PrivateIndividualName</code>.
     * @alias module:model/PrivateIndividualName
     * @param address {String} 
     * @param dob {String} 
     * @param forename {String} 
     * @param phoneNumber {String} 
     * @param surname {String} 
     */
    constructor(address, dob, forename, phoneNumber, surname) { 
        
        PrivateIndividualName.initialize(this, address, dob, forename, phoneNumber, surname);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, dob, forename, phoneNumber, surname) { 
        obj['address'] = address;
        obj['dob'] = dob;
        obj['forename'] = forename;
        obj['phone_number'] = phoneNumber;
        obj['surname'] = surname;
    }

    /**
     * Constructs a <code>PrivateIndividualName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateIndividualName} obj Optional instance to populate.
     * @return {module:model/PrivateIndividualName} The populated <code>PrivateIndividualName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateIndividualName();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('dob')) {
                obj['dob'] = ApiClient.convertToType(data['dob'], 'String');
            }
            if (data.hasOwnProperty('forename')) {
                obj['forename'] = ApiClient.convertToType(data['forename'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('middle_name')) {
                obj['middle_name'] = ApiClient.convertToType(data['middle_name'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateIndividualName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateIndividualName</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PrivateIndividualName.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['dob'] && !(typeof data['dob'] === 'string' || data['dob'] instanceof String)) {
            throw new Error("Expected the field `dob` to be a primitive type in the JSON string but got " + data['dob']);
        }
        // ensure the json data is a string
        if (data['forename'] && !(typeof data['forename'] === 'string' || data['forename'] instanceof String)) {
            throw new Error("Expected the field `forename` to be a primitive type in the JSON string but got " + data['forename']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['middle_name'] && !(typeof data['middle_name'] === 'string' || data['middle_name'] instanceof String)) {
            throw new Error("Expected the field `middle_name` to be a primitive type in the JSON string but got " + data['middle_name']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }

        return true;
    }


}

PrivateIndividualName.RequiredProperties = ["address", "dob", "forename", "phone_number", "surname"];

/**
 * @member {String} address
 */
PrivateIndividualName.prototype['address'] = undefined;

/**
 * @member {String} dob
 */
PrivateIndividualName.prototype['dob'] = undefined;

/**
 * @member {String} forename
 */
PrivateIndividualName.prototype['forename'] = undefined;

/**
 * @member {module:model/PrivateIndividualName.GenderEnum} gender
 */
PrivateIndividualName.prototype['gender'] = undefined;

/**
 * @member {String} middle_name
 */
PrivateIndividualName.prototype['middle_name'] = undefined;

/**
 * @member {String} phone_number
 */
PrivateIndividualName.prototype['phone_number'] = undefined;

/**
 * @member {String} surname
 */
PrivateIndividualName.prototype['surname'] = undefined;





/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
PrivateIndividualName['GenderEnum'] = {

    /**
     * value: "Male"
     * @const
     */
    "Male": "Male",

    /**
     * value: "Female"
     * @const
     */
    "Female": "Female",

    /**
     * value: "Not Specified"
     * @const
     */
    "Not Specified": "Not Specified"
};



export default PrivateIndividualName;

