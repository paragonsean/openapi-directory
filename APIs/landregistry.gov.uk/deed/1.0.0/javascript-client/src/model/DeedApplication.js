/**
 * Deed API
 * Land Registry Deed API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivateIndividualName from './PrivateIndividualName';

/**
 * The DeedApplication model module.
 * @module model/DeedApplication
 * @version 1.0.0
 */
class DeedApplication {
    /**
     * Constructs a new <code>DeedApplication</code>.
     * @alias module:model/DeedApplication
     * @param borrowers {Array.<module:model/PrivateIndividualName>} 
     * @param identityChecked {String} 
     * @param mdRef {String} 
     * @param propertyAddress {String} The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA
     * @param titleNumber {String} 
     */
    constructor(borrowers, identityChecked, mdRef, propertyAddress, titleNumber) { 
        
        DeedApplication.initialize(this, borrowers, identityChecked, mdRef, propertyAddress, titleNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, borrowers, identityChecked, mdRef, propertyAddress, titleNumber) { 
        obj['borrowers'] = borrowers;
        obj['identity_checked'] = identityChecked;
        obj['md_ref'] = mdRef;
        obj['property_address'] = propertyAddress;
        obj['title_number'] = titleNumber;
    }

    /**
     * Constructs a <code>DeedApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeedApplication} obj Optional instance to populate.
     * @return {module:model/DeedApplication} The populated <code>DeedApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeedApplication();

            if (data.hasOwnProperty('borrowers')) {
                obj['borrowers'] = ApiClient.convertToType(data['borrowers'], [PrivateIndividualName]);
            }
            if (data.hasOwnProperty('identity_checked')) {
                obj['identity_checked'] = ApiClient.convertToType(data['identity_checked'], 'String');
            }
            if (data.hasOwnProperty('md_ref')) {
                obj['md_ref'] = ApiClient.convertToType(data['md_ref'], 'String');
            }
            if (data.hasOwnProperty('property_address')) {
                obj['property_address'] = ApiClient.convertToType(data['property_address'], 'String');
            }
            if (data.hasOwnProperty('title_number')) {
                obj['title_number'] = ApiClient.convertToType(data['title_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeedApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeedApplication</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeedApplication.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['borrowers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['borrowers'])) {
                throw new Error("Expected the field `borrowers` to be an array in the JSON data but got " + data['borrowers']);
            }
            // validate the optional field `borrowers` (array)
            for (const item of data['borrowers']) {
                PrivateIndividualName.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['identity_checked'] && !(typeof data['identity_checked'] === 'string' || data['identity_checked'] instanceof String)) {
            throw new Error("Expected the field `identity_checked` to be a primitive type in the JSON string but got " + data['identity_checked']);
        }
        // ensure the json data is a string
        if (data['md_ref'] && !(typeof data['md_ref'] === 'string' || data['md_ref'] instanceof String)) {
            throw new Error("Expected the field `md_ref` to be a primitive type in the JSON string but got " + data['md_ref']);
        }
        // ensure the json data is a string
        if (data['property_address'] && !(typeof data['property_address'] === 'string' || data['property_address'] instanceof String)) {
            throw new Error("Expected the field `property_address` to be a primitive type in the JSON string but got " + data['property_address']);
        }
        // ensure the json data is a string
        if (data['title_number'] && !(typeof data['title_number'] === 'string' || data['title_number'] instanceof String)) {
            throw new Error("Expected the field `title_number` to be a primitive type in the JSON string but got " + data['title_number']);
        }

        return true;
    }


}

DeedApplication.RequiredProperties = ["borrowers", "identity_checked", "md_ref", "property_address", "title_number"];

/**
 * @member {Array.<module:model/PrivateIndividualName>} borrowers
 */
DeedApplication.prototype['borrowers'] = undefined;

/**
 * @member {String} identity_checked
 */
DeedApplication.prototype['identity_checked'] = undefined;

/**
 * @member {String} md_ref
 */
DeedApplication.prototype['md_ref'] = undefined;

/**
 * The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA
 * @member {String} property_address
 */
DeedApplication.prototype['property_address'] = undefined;

/**
 * @member {String} title_number
 */
DeedApplication.prototype['title_number'] = undefined;






export default DeedApplication;

