/**
 * Deed API
 * Land Registry Deed API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalProvisionsInner from './AdditionalProvisionsInner';
import Borrower from './Borrower';
import ChargeClause from './ChargeClause';
import Lender from './Lender';

/**
 * The OperativeDeedDeed model module.
 * @module model/OperativeDeedDeed
 * @version 1.0.0
 */
class OperativeDeedDeed {
    /**
     * Constructs a new <code>OperativeDeedDeed</code>.
     * Unique deed, consisting of property, borrower and charge information as well as clauses for the deed.
     * @alias module:model/OperativeDeedDeed
     */
    constructor() { 
        
        OperativeDeedDeed.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperativeDeedDeed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperativeDeedDeed} obj Optional instance to populate.
     * @return {module:model/OperativeDeedDeed} The populated <code>OperativeDeedDeed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperativeDeedDeed();

            if (data.hasOwnProperty('additional_provisions')) {
                obj['additional_provisions'] = ApiClient.convertToType(data['additional_provisions'], [AdditionalProvisionsInner]);
            }
            if (data.hasOwnProperty('borrowers')) {
                obj['borrowers'] = ApiClient.convertToType(data['borrowers'], [Borrower]);
            }
            if (data.hasOwnProperty('charge_clause')) {
                obj['charge_clause'] = ChargeClause.constructFromObject(data['charge_clause']);
            }
            if (data.hasOwnProperty('deed_status')) {
                obj['deed_status'] = ApiClient.convertToType(data['deed_status'], 'String');
            }
            if (data.hasOwnProperty('effective_clause')) {
                obj['effective_clause'] = ApiClient.convertToType(data['effective_clause'], 'String');
            }
            if (data.hasOwnProperty('lender')) {
                obj['lender'] = Lender.constructFromObject(data['lender']);
            }
            if (data.hasOwnProperty('md_ref')) {
                obj['md_ref'] = ApiClient.convertToType(data['md_ref'], 'String');
            }
            if (data.hasOwnProperty('property_address')) {
                obj['property_address'] = ApiClient.convertToType(data['property_address'], 'String');
            }
            if (data.hasOwnProperty('title_number')) {
                obj['title_number'] = ApiClient.convertToType(data['title_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperativeDeedDeed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperativeDeedDeed</code>.
     */
    static validateJSON(data) {
        if (data['additional_provisions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_provisions'])) {
                throw new Error("Expected the field `additional_provisions` to be an array in the JSON data but got " + data['additional_provisions']);
            }
            // validate the optional field `additional_provisions` (array)
            for (const item of data['additional_provisions']) {
                AdditionalProvisionsInner.validateJSON(item);
            };
        }
        if (data['borrowers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['borrowers'])) {
                throw new Error("Expected the field `borrowers` to be an array in the JSON data but got " + data['borrowers']);
            }
            // validate the optional field `borrowers` (array)
            for (const item of data['borrowers']) {
                Borrower.validateJSON(item);
            };
        }
        // validate the optional field `charge_clause`
        if (data['charge_clause']) { // data not null
          ChargeClause.validateJSON(data['charge_clause']);
        }
        // ensure the json data is a string
        if (data['deed_status'] && !(typeof data['deed_status'] === 'string' || data['deed_status'] instanceof String)) {
            throw new Error("Expected the field `deed_status` to be a primitive type in the JSON string but got " + data['deed_status']);
        }
        // ensure the json data is a string
        if (data['effective_clause'] && !(typeof data['effective_clause'] === 'string' || data['effective_clause'] instanceof String)) {
            throw new Error("Expected the field `effective_clause` to be a primitive type in the JSON string but got " + data['effective_clause']);
        }
        // validate the optional field `lender`
        if (data['lender']) { // data not null
          Lender.validateJSON(data['lender']);
        }
        // ensure the json data is a string
        if (data['md_ref'] && !(typeof data['md_ref'] === 'string' || data['md_ref'] instanceof String)) {
            throw new Error("Expected the field `md_ref` to be a primitive type in the JSON string but got " + data['md_ref']);
        }
        // ensure the json data is a string
        if (data['property_address'] && !(typeof data['property_address'] === 'string' || data['property_address'] instanceof String)) {
            throw new Error("Expected the field `property_address` to be a primitive type in the JSON string but got " + data['property_address']);
        }
        // ensure the json data is a string
        if (data['title_number'] && !(typeof data['title_number'] === 'string' || data['title_number'] instanceof String)) {
            throw new Error("Expected the field `title_number` to be a primitive type in the JSON string but got " + data['title_number']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AdditionalProvisionsInner>} additional_provisions
 */
OperativeDeedDeed.prototype['additional_provisions'] = undefined;

/**
 * @member {Array.<module:model/Borrower>} borrowers
 */
OperativeDeedDeed.prototype['borrowers'] = undefined;

/**
 * @member {module:model/ChargeClause} charge_clause
 */
OperativeDeedDeed.prototype['charge_clause'] = undefined;

/**
 * Current state of the deed
 * @member {String} deed_status
 */
OperativeDeedDeed.prototype['deed_status'] = undefined;

/**
 * Text to display the make effective clause
 * @member {String} effective_clause
 */
OperativeDeedDeed.prototype['effective_clause'] = undefined;

/**
 * @member {module:model/Lender} lender
 */
OperativeDeedDeed.prototype['lender'] = undefined;

/**
 * Land Registry assigned number for a Mortgage Deed (MD). If you wish to use an existing MD reference please prefix it with e- to comply with our system (eg e-MD12345)
 * @member {String} md_ref
 */
OperativeDeedDeed.prototype['md_ref'] = undefined;

/**
 * The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA
 * @member {String} property_address
 */
OperativeDeedDeed.prototype['property_address'] = undefined;

/**
 * Unique Land Registry identifier for the registered estate.
 * @member {String} title_number
 */
OperativeDeedDeed.prototype['title_number'] = undefined;






export default OperativeDeedDeed;

