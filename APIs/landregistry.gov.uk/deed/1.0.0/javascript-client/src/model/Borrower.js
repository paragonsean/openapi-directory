/**
 * Deed API
 * Land Registry Deed API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Borrower model module.
 * @module model/Borrower
 * @version 1.0.0
 */
class Borrower {
    /**
     * Constructs a new <code>Borrower</code>.
     * @alias module:model/Borrower
     * @param forename {String} 
     * @param id {String} 
     * @param surname {String} 
     * @param token {String} 
     */
    constructor(forename, id, surname, token) { 
        
        Borrower.initialize(this, forename, id, surname, token);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, forename, id, surname, token) { 
        obj['forename'] = forename;
        obj['id'] = id;
        obj['surname'] = surname;
        obj['token'] = token;
    }

    /**
     * Constructs a <code>Borrower</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Borrower} obj Optional instance to populate.
     * @return {module:model/Borrower} The populated <code>Borrower</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Borrower();

            if (data.hasOwnProperty('forename')) {
                obj['forename'] = ApiClient.convertToType(data['forename'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('middle_name')) {
                obj['middle_name'] = ApiClient.convertToType(data['middle_name'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Borrower</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Borrower</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Borrower.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['forename'] && !(typeof data['forename'] === 'string' || data['forename'] instanceof String)) {
            throw new Error("Expected the field `forename` to be a primitive type in the JSON string but got " + data['forename']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['middle_name'] && !(typeof data['middle_name'] === 'string' || data['middle_name'] instanceof String)) {
            throw new Error("Expected the field `middle_name` to be a primitive type in the JSON string but got " + data['middle_name']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

Borrower.RequiredProperties = ["forename", "id", "surname", "token"];

/**
 * @member {String} forename
 */
Borrower.prototype['forename'] = undefined;

/**
 * @member {String} id
 */
Borrower.prototype['id'] = undefined;

/**
 * @member {String} middle_name
 */
Borrower.prototype['middle_name'] = undefined;

/**
 * @member {String} surname
 */
Borrower.prototype['surname'] = undefined;

/**
 * @member {String} token
 */
Borrower.prototype['token'] = undefined;






export default Borrower;

