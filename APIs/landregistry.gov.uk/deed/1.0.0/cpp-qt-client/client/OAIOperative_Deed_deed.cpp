/**
 * Deed API
 * Land Registry Deed API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperative_Deed_deed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperative_Deed_deed::OAIOperative_Deed_deed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperative_Deed_deed::OAIOperative_Deed_deed() {
    this->initializeModel();
}

OAIOperative_Deed_deed::~OAIOperative_Deed_deed() {}

void OAIOperative_Deed_deed::initializeModel() {

    m_additional_provisions_isSet = false;
    m_additional_provisions_isValid = false;

    m_borrowers_isSet = false;
    m_borrowers_isValid = false;

    m_charge_clause_isSet = false;
    m_charge_clause_isValid = false;

    m_deed_status_isSet = false;
    m_deed_status_isValid = false;

    m_effective_clause_isSet = false;
    m_effective_clause_isValid = false;

    m_lender_isSet = false;
    m_lender_isValid = false;

    m_md_ref_isSet = false;
    m_md_ref_isValid = false;

    m_property_address_isSet = false;
    m_property_address_isValid = false;

    m_title_number_isSet = false;
    m_title_number_isValid = false;
}

void OAIOperative_Deed_deed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperative_Deed_deed::fromJsonObject(QJsonObject json) {

    m_additional_provisions_isValid = ::OpenAPI::fromJsonValue(m_additional_provisions, json[QString("additional_provisions")]);
    m_additional_provisions_isSet = !json[QString("additional_provisions")].isNull() && m_additional_provisions_isValid;

    m_borrowers_isValid = ::OpenAPI::fromJsonValue(m_borrowers, json[QString("borrowers")]);
    m_borrowers_isSet = !json[QString("borrowers")].isNull() && m_borrowers_isValid;

    m_charge_clause_isValid = ::OpenAPI::fromJsonValue(m_charge_clause, json[QString("charge_clause")]);
    m_charge_clause_isSet = !json[QString("charge_clause")].isNull() && m_charge_clause_isValid;

    m_deed_status_isValid = ::OpenAPI::fromJsonValue(m_deed_status, json[QString("deed_status")]);
    m_deed_status_isSet = !json[QString("deed_status")].isNull() && m_deed_status_isValid;

    m_effective_clause_isValid = ::OpenAPI::fromJsonValue(m_effective_clause, json[QString("effective_clause")]);
    m_effective_clause_isSet = !json[QString("effective_clause")].isNull() && m_effective_clause_isValid;

    m_lender_isValid = ::OpenAPI::fromJsonValue(m_lender, json[QString("lender")]);
    m_lender_isSet = !json[QString("lender")].isNull() && m_lender_isValid;

    m_md_ref_isValid = ::OpenAPI::fromJsonValue(m_md_ref, json[QString("md_ref")]);
    m_md_ref_isSet = !json[QString("md_ref")].isNull() && m_md_ref_isValid;

    m_property_address_isValid = ::OpenAPI::fromJsonValue(m_property_address, json[QString("property_address")]);
    m_property_address_isSet = !json[QString("property_address")].isNull() && m_property_address_isValid;

    m_title_number_isValid = ::OpenAPI::fromJsonValue(m_title_number, json[QString("title_number")]);
    m_title_number_isSet = !json[QString("title_number")].isNull() && m_title_number_isValid;
}

QString OAIOperative_Deed_deed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperative_Deed_deed::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_provisions.size() > 0) {
        obj.insert(QString("additional_provisions"), ::OpenAPI::toJsonValue(m_additional_provisions));
    }
    if (m_borrowers.size() > 0) {
        obj.insert(QString("borrowers"), ::OpenAPI::toJsonValue(m_borrowers));
    }
    if (m_charge_clause.isSet()) {
        obj.insert(QString("charge_clause"), ::OpenAPI::toJsonValue(m_charge_clause));
    }
    if (m_deed_status_isSet) {
        obj.insert(QString("deed_status"), ::OpenAPI::toJsonValue(m_deed_status));
    }
    if (m_effective_clause_isSet) {
        obj.insert(QString("effective_clause"), ::OpenAPI::toJsonValue(m_effective_clause));
    }
    if (m_lender.isSet()) {
        obj.insert(QString("lender"), ::OpenAPI::toJsonValue(m_lender));
    }
    if (m_md_ref_isSet) {
        obj.insert(QString("md_ref"), ::OpenAPI::toJsonValue(m_md_ref));
    }
    if (m_property_address_isSet) {
        obj.insert(QString("property_address"), ::OpenAPI::toJsonValue(m_property_address));
    }
    if (m_title_number_isSet) {
        obj.insert(QString("title_number"), ::OpenAPI::toJsonValue(m_title_number));
    }
    return obj;
}

QList<OAIAdditionalProvisions_inner> OAIOperative_Deed_deed::getAdditionalProvisions() const {
    return m_additional_provisions;
}
void OAIOperative_Deed_deed::setAdditionalProvisions(const QList<OAIAdditionalProvisions_inner> &additional_provisions) {
    m_additional_provisions = additional_provisions;
    m_additional_provisions_isSet = true;
}

bool OAIOperative_Deed_deed::is_additional_provisions_Set() const{
    return m_additional_provisions_isSet;
}

bool OAIOperative_Deed_deed::is_additional_provisions_Valid() const{
    return m_additional_provisions_isValid;
}

QList<OAIBorrower> OAIOperative_Deed_deed::getBorrowers() const {
    return m_borrowers;
}
void OAIOperative_Deed_deed::setBorrowers(const QList<OAIBorrower> &borrowers) {
    m_borrowers = borrowers;
    m_borrowers_isSet = true;
}

bool OAIOperative_Deed_deed::is_borrowers_Set() const{
    return m_borrowers_isSet;
}

bool OAIOperative_Deed_deed::is_borrowers_Valid() const{
    return m_borrowers_isValid;
}

OAIChargeClause OAIOperative_Deed_deed::getChargeClause() const {
    return m_charge_clause;
}
void OAIOperative_Deed_deed::setChargeClause(const OAIChargeClause &charge_clause) {
    m_charge_clause = charge_clause;
    m_charge_clause_isSet = true;
}

bool OAIOperative_Deed_deed::is_charge_clause_Set() const{
    return m_charge_clause_isSet;
}

bool OAIOperative_Deed_deed::is_charge_clause_Valid() const{
    return m_charge_clause_isValid;
}

QString OAIOperative_Deed_deed::getDeedStatus() const {
    return m_deed_status;
}
void OAIOperative_Deed_deed::setDeedStatus(const QString &deed_status) {
    m_deed_status = deed_status;
    m_deed_status_isSet = true;
}

bool OAIOperative_Deed_deed::is_deed_status_Set() const{
    return m_deed_status_isSet;
}

bool OAIOperative_Deed_deed::is_deed_status_Valid() const{
    return m_deed_status_isValid;
}

QString OAIOperative_Deed_deed::getEffectiveClause() const {
    return m_effective_clause;
}
void OAIOperative_Deed_deed::setEffectiveClause(const QString &effective_clause) {
    m_effective_clause = effective_clause;
    m_effective_clause_isSet = true;
}

bool OAIOperative_Deed_deed::is_effective_clause_Set() const{
    return m_effective_clause_isSet;
}

bool OAIOperative_Deed_deed::is_effective_clause_Valid() const{
    return m_effective_clause_isValid;
}

OAILender OAIOperative_Deed_deed::getLender() const {
    return m_lender;
}
void OAIOperative_Deed_deed::setLender(const OAILender &lender) {
    m_lender = lender;
    m_lender_isSet = true;
}

bool OAIOperative_Deed_deed::is_lender_Set() const{
    return m_lender_isSet;
}

bool OAIOperative_Deed_deed::is_lender_Valid() const{
    return m_lender_isValid;
}

QString OAIOperative_Deed_deed::getMdRef() const {
    return m_md_ref;
}
void OAIOperative_Deed_deed::setMdRef(const QString &md_ref) {
    m_md_ref = md_ref;
    m_md_ref_isSet = true;
}

bool OAIOperative_Deed_deed::is_md_ref_Set() const{
    return m_md_ref_isSet;
}

bool OAIOperative_Deed_deed::is_md_ref_Valid() const{
    return m_md_ref_isValid;
}

QString OAIOperative_Deed_deed::getPropertyAddress() const {
    return m_property_address;
}
void OAIOperative_Deed_deed::setPropertyAddress(const QString &property_address) {
    m_property_address = property_address;
    m_property_address_isSet = true;
}

bool OAIOperative_Deed_deed::is_property_address_Set() const{
    return m_property_address_isSet;
}

bool OAIOperative_Deed_deed::is_property_address_Valid() const{
    return m_property_address_isValid;
}

QString OAIOperative_Deed_deed::getTitleNumber() const {
    return m_title_number;
}
void OAIOperative_Deed_deed::setTitleNumber(const QString &title_number) {
    m_title_number = title_number;
    m_title_number_isSet = true;
}

bool OAIOperative_Deed_deed::is_title_number_Set() const{
    return m_title_number_isSet;
}

bool OAIOperative_Deed_deed::is_title_number_Valid() const{
    return m_title_number_isValid;
}

bool OAIOperative_Deed_deed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_provisions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_borrowers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_clause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_clause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_md_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperative_Deed_deed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
