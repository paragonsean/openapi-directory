/*
 * Deed API
 * Land Registry Deed API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PrivateIndividualName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeedApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:38.816082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeedApplication {
  public static final String SERIALIZED_NAME_BORROWERS = "borrowers";
  @SerializedName(SERIALIZED_NAME_BORROWERS)
  private List<PrivateIndividualName> borrowers = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_CHECKED = "identity_checked";
  @SerializedName(SERIALIZED_NAME_IDENTITY_CHECKED)
  private String identityChecked;

  public static final String SERIALIZED_NAME_MD_REF = "md_ref";
  @SerializedName(SERIALIZED_NAME_MD_REF)
  private String mdRef;

  public static final String SERIALIZED_NAME_PROPERTY_ADDRESS = "property_address";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ADDRESS)
  private String propertyAddress;

  public static final String SERIALIZED_NAME_TITLE_NUMBER = "title_number";
  @SerializedName(SERIALIZED_NAME_TITLE_NUMBER)
  private String titleNumber;

  public DeedApplication() {
  }

  public DeedApplication borrowers(List<PrivateIndividualName> borrowers) {
    this.borrowers = borrowers;
    return this;
  }

  public DeedApplication addBorrowersItem(PrivateIndividualName borrowersItem) {
    if (this.borrowers == null) {
      this.borrowers = new ArrayList<>();
    }
    this.borrowers.add(borrowersItem);
    return this;
  }

  /**
   * Get borrowers
   * @return borrowers
   */
  @javax.annotation.Nonnull
  public List<PrivateIndividualName> getBorrowers() {
    return borrowers;
  }

  public void setBorrowers(List<PrivateIndividualName> borrowers) {
    this.borrowers = borrowers;
  }


  public DeedApplication identityChecked(String identityChecked) {
    this.identityChecked = identityChecked;
    return this;
  }

  /**
   * Get identityChecked
   * @return identityChecked
   */
  @javax.annotation.Nonnull
  public String getIdentityChecked() {
    return identityChecked;
  }

  public void setIdentityChecked(String identityChecked) {
    this.identityChecked = identityChecked;
  }


  public DeedApplication mdRef(String mdRef) {
    this.mdRef = mdRef;
    return this;
  }

  /**
   * Get mdRef
   * @return mdRef
   */
  @javax.annotation.Nonnull
  public String getMdRef() {
    return mdRef;
  }

  public void setMdRef(String mdRef) {
    this.mdRef = mdRef;
  }


  public DeedApplication propertyAddress(String propertyAddress) {
    this.propertyAddress = propertyAddress;
    return this;
  }

  /**
   * The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA
   * @return propertyAddress
   */
  @javax.annotation.Nonnull
  public String getPropertyAddress() {
    return propertyAddress;
  }

  public void setPropertyAddress(String propertyAddress) {
    this.propertyAddress = propertyAddress;
  }


  public DeedApplication titleNumber(String titleNumber) {
    this.titleNumber = titleNumber;
    return this;
  }

  /**
   * Get titleNumber
   * @return titleNumber
   */
  @javax.annotation.Nonnull
  public String getTitleNumber() {
    return titleNumber;
  }

  public void setTitleNumber(String titleNumber) {
    this.titleNumber = titleNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeedApplication deedApplication = (DeedApplication) o;
    return Objects.equals(this.borrowers, deedApplication.borrowers) &&
        Objects.equals(this.identityChecked, deedApplication.identityChecked) &&
        Objects.equals(this.mdRef, deedApplication.mdRef) &&
        Objects.equals(this.propertyAddress, deedApplication.propertyAddress) &&
        Objects.equals(this.titleNumber, deedApplication.titleNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(borrowers, identityChecked, mdRef, propertyAddress, titleNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeedApplication {\n");
    sb.append("    borrowers: ").append(toIndentedString(borrowers)).append("\n");
    sb.append("    identityChecked: ").append(toIndentedString(identityChecked)).append("\n");
    sb.append("    mdRef: ").append(toIndentedString(mdRef)).append("\n");
    sb.append("    propertyAddress: ").append(toIndentedString(propertyAddress)).append("\n");
    sb.append("    titleNumber: ").append(toIndentedString(titleNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("borrowers");
    openapiFields.add("identity_checked");
    openapiFields.add("md_ref");
    openapiFields.add("property_address");
    openapiFields.add("title_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("borrowers");
    openapiRequiredFields.add("identity_checked");
    openapiRequiredFields.add("md_ref");
    openapiRequiredFields.add("property_address");
    openapiRequiredFields.add("title_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeedApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeedApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeedApplication is not found in the empty JSON string", DeedApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeedApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeedApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeedApplication.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("borrowers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `borrowers` to be an array in the JSON string but got `%s`", jsonObj.get("borrowers").toString()));
      }

      JsonArray jsonArrayborrowers = jsonObj.getAsJsonArray("borrowers");
      // validate the required field `borrowers` (array)
      for (int i = 0; i < jsonArrayborrowers.size(); i++) {
        PrivateIndividualName.validateJsonElement(jsonArrayborrowers.get(i));
      };
      if (!jsonObj.get("identity_checked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_checked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_checked").toString()));
      }
      if (!jsonObj.get("md_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md_ref").toString()));
      }
      if (!jsonObj.get("property_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property_address").toString()));
      }
      if (!jsonObj.get("title_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeedApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeedApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeedApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeedApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<DeedApplication>() {
           @Override
           public void write(JsonWriter out, DeedApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeedApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeedApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeedApplication
   * @throws IOException if the JSON string is invalid with respect to DeedApplication
   */
  public static DeedApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeedApplication.class);
  }

  /**
   * Convert an instance of DeedApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

