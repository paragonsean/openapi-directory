# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard import Dashboard
from openapi_server import util


class PageOfDashboards(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dashboards: List[Dashboard]=None, max_results: int=None, next: str=None, prev: str=None, start_at: int=None, total: int=None):
        """PageOfDashboards - a model defined in OpenAPI

        :param dashboards: The dashboards of this PageOfDashboards.
        :param max_results: The max_results of this PageOfDashboards.
        :param next: The next of this PageOfDashboards.
        :param prev: The prev of this PageOfDashboards.
        :param start_at: The start_at of this PageOfDashboards.
        :param total: The total of this PageOfDashboards.
        """
        self.openapi_types = {
            'dashboards': List[Dashboard],
            'max_results': int,
            'next': str,
            'prev': str,
            'start_at': int,
            'total': int
        }

        self.attribute_map = {
            'dashboards': 'dashboards',
            'max_results': 'maxResults',
            'next': 'next',
            'prev': 'prev',
            'start_at': 'startAt',
            'total': 'total'
        }

        self._dashboards = dashboards
        self._max_results = max_results
        self._next = next
        self._prev = prev
        self._start_at = start_at
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageOfDashboards':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageOfDashboards of this PageOfDashboards.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dashboards(self):
        """Gets the dashboards of this PageOfDashboards.

        List of dashboards.

        :return: The dashboards of this PageOfDashboards.
        :rtype: List[Dashboard]
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this PageOfDashboards.

        List of dashboards.

        :param dashboards: The dashboards of this PageOfDashboards.
        :type dashboards: List[Dashboard]
        """

        self._dashboards = dashboards

    @property
    def max_results(self):
        """Gets the max_results of this PageOfDashboards.

        The maximum number of results that could be on the page.

        :return: The max_results of this PageOfDashboards.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this PageOfDashboards.

        The maximum number of results that could be on the page.

        :param max_results: The max_results of this PageOfDashboards.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next(self):
        """Gets the next of this PageOfDashboards.

        The URL of the next page of results, if any.

        :return: The next of this PageOfDashboards.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PageOfDashboards.

        The URL of the next page of results, if any.

        :param next: The next of this PageOfDashboards.
        :type next: str
        """

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this PageOfDashboards.

        The URL of the previous page of results, if any.

        :return: The prev of this PageOfDashboards.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PageOfDashboards.

        The URL of the previous page of results, if any.

        :param prev: The prev of this PageOfDashboards.
        :type prev: str
        """

        self._prev = prev

    @property
    def start_at(self):
        """Gets the start_at of this PageOfDashboards.

        The index of the first item returned on the page.

        :return: The start_at of this PageOfDashboards.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this PageOfDashboards.

        The index of the first item returned on the page.

        :param start_at: The start_at of this PageOfDashboards.
        :type start_at: int
        """

        self._start_at = start_at

    @property
    def total(self):
        """Gets the total of this PageOfDashboards.

        The number of results on the page.

        :return: The total of this PageOfDashboards.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PageOfDashboards.

        The number of results on the page.

        :param total: The total of this PageOfDashboards.
        :type total: int
        """

        self._total = total
