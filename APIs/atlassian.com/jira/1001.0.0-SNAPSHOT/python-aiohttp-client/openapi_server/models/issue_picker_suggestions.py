# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_picker_suggestions_issue_type import IssuePickerSuggestionsIssueType
from openapi_server import util


class IssuePickerSuggestions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sections: List[IssuePickerSuggestionsIssueType]=None):
        """IssuePickerSuggestions - a model defined in OpenAPI

        :param sections: The sections of this IssuePickerSuggestions.
        """
        self.openapi_types = {
            'sections': List[IssuePickerSuggestionsIssueType]
        }

        self.attribute_map = {
            'sections': 'sections'
        }

        self._sections = sections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuePickerSuggestions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuePickerSuggestions of this IssuePickerSuggestions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sections(self):
        """Gets the sections of this IssuePickerSuggestions.

        A list of issues for an issue type suggested for use in auto-completion.

        :return: The sections of this IssuePickerSuggestions.
        :rtype: List[IssuePickerSuggestionsIssueType]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this IssuePickerSuggestions.

        A list of issues for an issue type suggested for use in auto-completion.

        :param sections: The sections of this IssuePickerSuggestions.
        :type sections: List[IssuePickerSuggestionsIssueType]
        """

        self._sections = sections
