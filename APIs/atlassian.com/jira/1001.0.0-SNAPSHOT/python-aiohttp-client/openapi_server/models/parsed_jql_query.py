# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query import JqlQuery
from openapi_server import util


class ParsedJqlQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: list[str]=None, query: str=None, structure: JqlQuery=None):
        """ParsedJqlQuery - a model defined in OpenAPI

        :param errors: The errors of this ParsedJqlQuery.
        :param query: The query of this ParsedJqlQuery.
        :param structure: The structure of this ParsedJqlQuery.
        """
        self.openapi_types = {
            'errors': list[str],
            'query': str,
            'structure': JqlQuery
        }

        self.attribute_map = {
            'errors': 'errors',
            'query': 'query',
            'structure': 'structure'
        }

        self._errors = errors
        self._query = query
        self._structure = structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParsedJqlQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParsedJqlQuery of this ParsedJqlQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ParsedJqlQuery.

        The list of syntax or validation errors.

        :return: The errors of this ParsedJqlQuery.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ParsedJqlQuery.

        The list of syntax or validation errors.

        :param errors: The errors of this ParsedJqlQuery.
        :type errors: list[str]
        """

        self._errors = errors

    @property
    def query(self):
        """Gets the query of this ParsedJqlQuery.

        The JQL query that was parsed and validated.

        :return: The query of this ParsedJqlQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ParsedJqlQuery.

        The JQL query that was parsed and validated.

        :param query: The query of this ParsedJqlQuery.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def structure(self):
        """Gets the structure of this ParsedJqlQuery.

        The syntax tree of the query. Empty if the query was invalid.

        :return: The structure of this ParsedJqlQuery.
        :rtype: JqlQuery
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this ParsedJqlQuery.

        The syntax tree of the query. Empty if the query was invalid.

        :param structure: The structure of this ParsedJqlQuery.
        :type structure: JqlQuery
        """

        self._structure = structure
