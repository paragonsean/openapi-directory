# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_compound_condition import WorkflowCompoundCondition
from openapi_server.models.workflow_simple_condition import WorkflowSimpleCondition
from openapi_server import util


class WorkflowCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: object=None, node_type: str=None, type: str=None, conditions: List[WorkflowCondition]=None, operator: str=None):
        """WorkflowCondition - a model defined in OpenAPI

        :param configuration: The configuration of this WorkflowCondition.
        :param node_type: The node_type of this WorkflowCondition.
        :param type: The type of this WorkflowCondition.
        :param conditions: The conditions of this WorkflowCondition.
        :param operator: The operator of this WorkflowCondition.
        """
        self.openapi_types = {
            'configuration': object,
            'node_type': str,
            'type': str,
            'conditions': List[WorkflowCondition],
            'operator': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'node_type': 'nodeType',
            'type': 'type',
            'conditions': 'conditions',
            'operator': 'operator'
        }

        self._configuration = configuration
        self._node_type = node_type
        self._type = type
        self._conditions = conditions
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowCondition of this WorkflowCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this WorkflowCondition.

        EXPERIMENTAL. The configuration of the transition rule.

        :return: The configuration of this WorkflowCondition.
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this WorkflowCondition.

        EXPERIMENTAL. The configuration of the transition rule.

        :param configuration: The configuration of this WorkflowCondition.
        :type configuration: object
        """

        self._configuration = configuration

    @property
    def node_type(self):
        """Gets the node_type of this WorkflowCondition.


        :return: The node_type of this WorkflowCondition.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this WorkflowCondition.


        :param node_type: The node_type of this WorkflowCondition.
        :type node_type: str
        """
        if node_type is None:
            raise ValueError("Invalid value for `node_type`, must not be `None`")

        self._node_type = node_type

    @property
    def type(self):
        """Gets the type of this WorkflowCondition.

        The type of the transition rule.

        :return: The type of this WorkflowCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowCondition.

        The type of the transition rule.

        :param type: The type of this WorkflowCondition.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def conditions(self):
        """Gets the conditions of this WorkflowCondition.

        The list of workflow conditions.

        :return: The conditions of this WorkflowCondition.
        :rtype: List[WorkflowCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this WorkflowCondition.

        The list of workflow conditions.

        :param conditions: The conditions of this WorkflowCondition.
        :type conditions: List[WorkflowCondition]
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")

        self._conditions = conditions

    @property
    def operator(self):
        """Gets the operator of this WorkflowCondition.

        The compound condition operator.

        :return: The operator of this WorkflowCondition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this WorkflowCondition.

        The compound condition operator.

        :param operator: The operator of this WorkflowCondition.
        :type operator: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
