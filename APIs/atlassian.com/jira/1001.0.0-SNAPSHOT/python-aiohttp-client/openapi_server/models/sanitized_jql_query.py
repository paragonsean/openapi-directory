# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_collection import ErrorCollection
from openapi_server import util


class SanitizedJqlQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, errors: ErrorCollection=None, initial_query: str=None, sanitized_query: str=None):
        """SanitizedJqlQuery - a model defined in OpenAPI

        :param account_id: The account_id of this SanitizedJqlQuery.
        :param errors: The errors of this SanitizedJqlQuery.
        :param initial_query: The initial_query of this SanitizedJqlQuery.
        :param sanitized_query: The sanitized_query of this SanitizedJqlQuery.
        """
        self.openapi_types = {
            'account_id': str,
            'errors': ErrorCollection,
            'initial_query': str,
            'sanitized_query': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'errors': 'errors',
            'initial_query': 'initialQuery',
            'sanitized_query': 'sanitizedQuery'
        }

        self._account_id = account_id
        self._errors = errors
        self._initial_query = initial_query
        self._sanitized_query = sanitized_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SanitizedJqlQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SanitizedJqlQuery of this SanitizedJqlQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this SanitizedJqlQuery.

        The account ID of the user for whom sanitization was performed.

        :return: The account_id of this SanitizedJqlQuery.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SanitizedJqlQuery.

        The account ID of the user for whom sanitization was performed.

        :param account_id: The account_id of this SanitizedJqlQuery.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 128:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `128`")

        self._account_id = account_id

    @property
    def errors(self):
        """Gets the errors of this SanitizedJqlQuery.

        The list of errors.

        :return: The errors of this SanitizedJqlQuery.
        :rtype: ErrorCollection
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SanitizedJqlQuery.

        The list of errors.

        :param errors: The errors of this SanitizedJqlQuery.
        :type errors: ErrorCollection
        """

        self._errors = errors

    @property
    def initial_query(self):
        """Gets the initial_query of this SanitizedJqlQuery.

        The initial query.

        :return: The initial_query of this SanitizedJqlQuery.
        :rtype: str
        """
        return self._initial_query

    @initial_query.setter
    def initial_query(self, initial_query):
        """Sets the initial_query of this SanitizedJqlQuery.

        The initial query.

        :param initial_query: The initial_query of this SanitizedJqlQuery.
        :type initial_query: str
        """

        self._initial_query = initial_query

    @property
    def sanitized_query(self):
        """Gets the sanitized_query of this SanitizedJqlQuery.

        The sanitized query, if there were no errors.

        :return: The sanitized_query of this SanitizedJqlQuery.
        :rtype: str
        """
        return self._sanitized_query

    @sanitized_query.setter
    def sanitized_query(self, sanitized_query):
        """Sets the sanitized_query of this SanitizedJqlQuery.

        The sanitized query, if there were no errors.

        :param sanitized_query: The sanitized_query of this SanitizedJqlQuery.
        :type sanitized_query: str
        """

        self._sanitized_query = sanitized_query
