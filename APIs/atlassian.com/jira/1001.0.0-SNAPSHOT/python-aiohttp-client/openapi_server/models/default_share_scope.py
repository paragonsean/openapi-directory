# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DefaultShareScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope: str=None):
        """DefaultShareScope - a model defined in OpenAPI

        :param scope: The scope of this DefaultShareScope.
        """
        self.openapi_types = {
            'scope': str
        }

        self.attribute_map = {
            'scope': 'scope'
        }

        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultShareScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultShareScope of this DefaultShareScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self):
        """Gets the scope of this DefaultShareScope.

        The scope of the default sharing for new filters and dashboards:   *  `AUTHENTICATED` Shared with all logged-in users.  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.  *  `PRIVATE` Not shared with any users.

        :return: The scope of this DefaultShareScope.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DefaultShareScope.

        The scope of the default sharing for new filters and dashboards:   *  `AUTHENTICATED` Shared with all logged-in users.  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.  *  `PRIVATE` Not shared with any users.

        :param scope: The scope of this DefaultShareScope.
        :type scope: str
        """
        allowed_values = ["GLOBAL", "AUTHENTICATED", "PRIVATE"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
