# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JexpJqlIssues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, query: str=None, start_at: int=None, validation: str='strict'):
        """JexpJqlIssues - a model defined in OpenAPI

        :param max_results: The max_results of this JexpJqlIssues.
        :param query: The query of this JexpJqlIssues.
        :param start_at: The start_at of this JexpJqlIssues.
        :param validation: The validation of this JexpJqlIssues.
        """
        self.openapi_types = {
            'max_results': int,
            'query': str,
            'start_at': int,
            'validation': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'query': 'query',
            'start_at': 'startAt',
            'validation': 'validation'
        }

        self._max_results = max_results
        self._query = query
        self._start_at = start_at
        self._validation = validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JexpJqlIssues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JexpJqlIssues of this JexpJqlIssues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this JexpJqlIssues.

        The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.

        :return: The max_results of this JexpJqlIssues.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this JexpJqlIssues.

        The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.

        :param max_results: The max_results of this JexpJqlIssues.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def query(self):
        """Gets the query of this JexpJqlIssues.

        The JQL query.

        :return: The query of this JexpJqlIssues.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this JexpJqlIssues.

        The JQL query.

        :param query: The query of this JexpJqlIssues.
        :type query: str
        """

        self._query = query

    @property
    def start_at(self):
        """Gets the start_at of this JexpJqlIssues.

        The index of the first issue to return from the JQL query.

        :return: The start_at of this JexpJqlIssues.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this JexpJqlIssues.

        The index of the first issue to return from the JQL query.

        :param start_at: The start_at of this JexpJqlIssues.
        :type start_at: int
        """

        self._start_at = start_at

    @property
    def validation(self):
        """Gets the validation of this JexpJqlIssues.

        Determines how to validate the JQL query and treat the validation results.

        :return: The validation of this JexpJqlIssues.
        :rtype: str
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this JexpJqlIssues.

        Determines how to validate the JQL query and treat the validation results.

        :param validation: The validation of this JexpJqlIssues.
        :type validation: str
        """
        allowed_values = ["strict", "warn", "none"]  # noqa: E501
        if validation not in allowed_values:
            raise ValueError(
                "Invalid value for `validation` ({0}), must be one of {1}"
                .format(validation, allowed_values)
            )

        self._validation = validation
