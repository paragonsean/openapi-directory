# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_clause_time_predicate import JqlQueryClauseTimePredicate
from openapi_server.models.jql_query_field import JqlQueryField
from openapi_server import util


class FieldChangedClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: JqlQueryField=None, operator: str=None, predicates: List[JqlQueryClauseTimePredicate]=None):
        """FieldChangedClause - a model defined in OpenAPI

        :param _field: The _field of this FieldChangedClause.
        :param operator: The operator of this FieldChangedClause.
        :param predicates: The predicates of this FieldChangedClause.
        """
        self.openapi_types = {
            '_field': JqlQueryField,
            'operator': str,
            'predicates': List[JqlQueryClauseTimePredicate]
        }

        self.attribute_map = {
            '_field': 'field',
            'operator': 'operator',
            'predicates': 'predicates'
        }

        self.__field = _field
        self._operator = operator
        self._predicates = predicates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldChangedClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldChangedClause of this FieldChangedClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FieldChangedClause.


        :return: The _field of this FieldChangedClause.
        :rtype: JqlQueryField
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FieldChangedClause.


        :param _field: The _field of this FieldChangedClause.
        :type _field: JqlQueryField
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def operator(self):
        """Gets the operator of this FieldChangedClause.

        The operator applied to the field.

        :return: The operator of this FieldChangedClause.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this FieldChangedClause.

        The operator applied to the field.

        :param operator: The operator of this FieldChangedClause.
        :type operator: str
        """
        allowed_values = ["changed"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def predicates(self):
        """Gets the predicates of this FieldChangedClause.

        The list of time predicates.

        :return: The predicates of this FieldChangedClause.
        :rtype: List[JqlQueryClauseTimePredicate]
        """
        return self._predicates

    @predicates.setter
    def predicates(self, predicates):
        """Sets the predicates of this FieldChangedClause.

        The list of time predicates.

        :param predicates: The predicates of this FieldChangedClause.
        :type predicates: List[JqlQueryClauseTimePredicate]
        """
        if predicates is None:
            raise ValueError("Invalid value for `predicates`, must not be `None`")

        self._predicates = predicates
