# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_details import ProjectDetails
from openapi_server.models.published_workflow_id import PublishedWorkflowId
from openapi_server.models.transition import Transition
from openapi_server.models.workflow_operations import WorkflowOperations
from openapi_server.models.workflow_scheme_id_name import WorkflowSchemeIdName
from openapi_server.models.workflow_status import WorkflowStatus
from openapi_server import util


class Workflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, has_draft_workflow: bool=None, id: PublishedWorkflowId=None, is_default: bool=None, operations: WorkflowOperations=None, projects: List[ProjectDetails]=None, schemes: List[WorkflowSchemeIdName]=None, statuses: List[WorkflowStatus]=None, transitions: List[Transition]=None, updated: datetime=None):
        """Workflow - a model defined in OpenAPI

        :param created: The created of this Workflow.
        :param description: The description of this Workflow.
        :param has_draft_workflow: The has_draft_workflow of this Workflow.
        :param id: The id of this Workflow.
        :param is_default: The is_default of this Workflow.
        :param operations: The operations of this Workflow.
        :param projects: The projects of this Workflow.
        :param schemes: The schemes of this Workflow.
        :param statuses: The statuses of this Workflow.
        :param transitions: The transitions of this Workflow.
        :param updated: The updated of this Workflow.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'has_draft_workflow': bool,
            'id': PublishedWorkflowId,
            'is_default': bool,
            'operations': WorkflowOperations,
            'projects': List[ProjectDetails],
            'schemes': List[WorkflowSchemeIdName],
            'statuses': List[WorkflowStatus],
            'transitions': List[Transition],
            'updated': datetime
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'has_draft_workflow': 'hasDraftWorkflow',
            'id': 'id',
            'is_default': 'isDefault',
            'operations': 'operations',
            'projects': 'projects',
            'schemes': 'schemes',
            'statuses': 'statuses',
            'transitions': 'transitions',
            'updated': 'updated'
        }

        self._created = created
        self._description = description
        self._has_draft_workflow = has_draft_workflow
        self._id = id
        self._is_default = is_default
        self._operations = operations
        self._projects = projects
        self._schemes = schemes
        self._statuses = statuses
        self._transitions = transitions
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workflow of this Workflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Workflow.

        The creation date of the workflow.

        :return: The created of this Workflow.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Workflow.

        The creation date of the workflow.

        :param created: The created of this Workflow.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Workflow.

        The description of the workflow.

        :return: The description of this Workflow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.

        The description of the workflow.

        :param description: The description of this Workflow.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def has_draft_workflow(self):
        """Gets the has_draft_workflow of this Workflow.

        Whether the workflow has a draft version.

        :return: The has_draft_workflow of this Workflow.
        :rtype: bool
        """
        return self._has_draft_workflow

    @has_draft_workflow.setter
    def has_draft_workflow(self, has_draft_workflow):
        """Sets the has_draft_workflow of this Workflow.

        Whether the workflow has a draft version.

        :param has_draft_workflow: The has_draft_workflow of this Workflow.
        :type has_draft_workflow: bool
        """

        self._has_draft_workflow = has_draft_workflow

    @property
    def id(self):
        """Gets the id of this Workflow.


        :return: The id of this Workflow.
        :rtype: PublishedWorkflowId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workflow.


        :param id: The id of this Workflow.
        :type id: PublishedWorkflowId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this Workflow.

        Whether this is the default workflow.

        :return: The is_default of this Workflow.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Workflow.

        Whether this is the default workflow.

        :param is_default: The is_default of this Workflow.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def operations(self):
        """Gets the operations of this Workflow.


        :return: The operations of this Workflow.
        :rtype: WorkflowOperations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Workflow.


        :param operations: The operations of this Workflow.
        :type operations: WorkflowOperations
        """

        self._operations = operations

    @property
    def projects(self):
        """Gets the projects of this Workflow.

        The projects the workflow is assigned to, through workflow schemes.

        :return: The projects of this Workflow.
        :rtype: List[ProjectDetails]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Workflow.

        The projects the workflow is assigned to, through workflow schemes.

        :param projects: The projects of this Workflow.
        :type projects: List[ProjectDetails]
        """

        self._projects = projects

    @property
    def schemes(self):
        """Gets the schemes of this Workflow.

        The workflow schemes the workflow is assigned to.

        :return: The schemes of this Workflow.
        :rtype: List[WorkflowSchemeIdName]
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this Workflow.

        The workflow schemes the workflow is assigned to.

        :param schemes: The schemes of this Workflow.
        :type schemes: List[WorkflowSchemeIdName]
        """

        self._schemes = schemes

    @property
    def statuses(self):
        """Gets the statuses of this Workflow.

        The statuses of the workflow.

        :return: The statuses of this Workflow.
        :rtype: List[WorkflowStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this Workflow.

        The statuses of the workflow.

        :param statuses: The statuses of this Workflow.
        :type statuses: List[WorkflowStatus]
        """

        self._statuses = statuses

    @property
    def transitions(self):
        """Gets the transitions of this Workflow.

        The transitions of the workflow.

        :return: The transitions of this Workflow.
        :rtype: List[Transition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this Workflow.

        The transitions of the workflow.

        :param transitions: The transitions of this Workflow.
        :type transitions: List[Transition]
        """

        self._transitions = transitions

    @property
    def updated(self):
        """Gets the updated of this Workflow.

        The last edited date of the workflow.

        :return: The updated of this Workflow.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Workflow.

        The last edited date of the workflow.

        :param updated: The updated of this Workflow.
        :type updated: datetime
        """

        self._updated = updated
