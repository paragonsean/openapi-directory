# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectScopeBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: list[str]=None, id: int=None):
        """ProjectScopeBean - a model defined in OpenAPI

        :param attributes: The attributes of this ProjectScopeBean.
        :param id: The id of this ProjectScopeBean.
        """
        self.openapi_types = {
            'attributes': list[str],
            'id': int
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id'
        }

        self._attributes = attributes
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectScopeBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectScopeBean of this ProjectScopeBean.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ProjectScopeBean.

        Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.

        :return: The attributes of this ProjectScopeBean.
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProjectScopeBean.

        Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.

        :param attributes: The attributes of this ProjectScopeBean.
        :type attributes: list[str]
        """
        allowed_values = ["notSelectable", "defaultValue"]  # noqa: E501
        if not set(attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this ProjectScopeBean.

        The ID of the project that the option's behavior applies to.

        :return: The id of this ProjectScopeBean.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectScopeBean.

        The ID of the project that the option's behavior applies to.

        :param id: The id of this ProjectScopeBean.
        :type id: int
        """

        self._id = id
