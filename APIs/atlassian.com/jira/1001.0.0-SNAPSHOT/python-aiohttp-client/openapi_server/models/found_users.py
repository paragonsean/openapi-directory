# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_picker_user import UserPickerUser
from openapi_server import util


class FoundUsers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, header: str=None, total: int=None, users: List[UserPickerUser]=None):
        """FoundUsers - a model defined in OpenAPI

        :param header: The header of this FoundUsers.
        :param total: The total of this FoundUsers.
        :param users: The users of this FoundUsers.
        """
        self.openapi_types = {
            'header': str,
            'total': int,
            'users': List[UserPickerUser]
        }

        self.attribute_map = {
            'header': 'header',
            'total': 'total',
            'users': 'users'
        }

        self._header = header
        self._total = total
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoundUsers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoundUsers of this FoundUsers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def header(self):
        """Gets the header of this FoundUsers.

        Header text indicating the number of users in the response and the total number of users found in the search.

        :return: The header of this FoundUsers.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this FoundUsers.

        Header text indicating the number of users in the response and the total number of users found in the search.

        :param header: The header of this FoundUsers.
        :type header: str
        """

        self._header = header

    @property
    def total(self):
        """Gets the total of this FoundUsers.

        The total number of users found in the search.

        :return: The total of this FoundUsers.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this FoundUsers.

        The total number of users found in the search.

        :param total: The total of this FoundUsers.
        :type total: int
        """

        self._total = total

    @property
    def users(self):
        """Gets the users of this FoundUsers.


        :return: The users of this FoundUsers.
        :rtype: List[UserPickerUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this FoundUsers.


        :param users: The users of this FoundUsers.
        :type users: List[UserPickerUser]
        """

        self._users = users
