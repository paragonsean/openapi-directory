# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContextDefaultValueCascadingOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cascading_option_id: str=None, context_id: str=None, option_id: str=None, type: str=None):
        """CustomFieldContextDefaultValueCascadingOption - a model defined in OpenAPI

        :param cascading_option_id: The cascading_option_id of this CustomFieldContextDefaultValueCascadingOption.
        :param context_id: The context_id of this CustomFieldContextDefaultValueCascadingOption.
        :param option_id: The option_id of this CustomFieldContextDefaultValueCascadingOption.
        :param type: The type of this CustomFieldContextDefaultValueCascadingOption.
        """
        self.openapi_types = {
            'cascading_option_id': str,
            'context_id': str,
            'option_id': str,
            'type': str
        }

        self.attribute_map = {
            'cascading_option_id': 'cascadingOptionId',
            'context_id': 'contextId',
            'option_id': 'optionId',
            'type': 'type'
        }

        self._cascading_option_id = cascading_option_id
        self._context_id = context_id
        self._option_id = option_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldContextDefaultValueCascadingOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldContextDefaultValueCascadingOption of this CustomFieldContextDefaultValueCascadingOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cascading_option_id(self):
        """Gets the cascading_option_id of this CustomFieldContextDefaultValueCascadingOption.

        The ID of the default cascading option.

        :return: The cascading_option_id of this CustomFieldContextDefaultValueCascadingOption.
        :rtype: str
        """
        return self._cascading_option_id

    @cascading_option_id.setter
    def cascading_option_id(self, cascading_option_id):
        """Sets the cascading_option_id of this CustomFieldContextDefaultValueCascadingOption.

        The ID of the default cascading option.

        :param cascading_option_id: The cascading_option_id of this CustomFieldContextDefaultValueCascadingOption.
        :type cascading_option_id: str
        """

        self._cascading_option_id = cascading_option_id

    @property
    def context_id(self):
        """Gets the context_id of this CustomFieldContextDefaultValueCascadingOption.

        The ID of the context.

        :return: The context_id of this CustomFieldContextDefaultValueCascadingOption.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this CustomFieldContextDefaultValueCascadingOption.

        The ID of the context.

        :param context_id: The context_id of this CustomFieldContextDefaultValueCascadingOption.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")

        self._context_id = context_id

    @property
    def option_id(self):
        """Gets the option_id of this CustomFieldContextDefaultValueCascadingOption.

        The ID of the default option.

        :return: The option_id of this CustomFieldContextDefaultValueCascadingOption.
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this CustomFieldContextDefaultValueCascadingOption.

        The ID of the default option.

        :param option_id: The option_id of this CustomFieldContextDefaultValueCascadingOption.
        :type option_id: str
        """
        if option_id is None:
            raise ValueError("Invalid value for `option_id`, must not be `None`")

        self._option_id = option_id

    @property
    def type(self):
        """Gets the type of this CustomFieldContextDefaultValueCascadingOption.


        :return: The type of this CustomFieldContextDefaultValueCascadingOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldContextDefaultValueCascadingOption.


        :param type: The type of this CustomFieldContextDefaultValueCascadingOption.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
