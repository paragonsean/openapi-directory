# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuggestedIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, img: str=None, key: str=None, key_html: str=None, summary: str=None, summary_text: str=None):
        """SuggestedIssue - a model defined in OpenAPI

        :param id: The id of this SuggestedIssue.
        :param img: The img of this SuggestedIssue.
        :param key: The key of this SuggestedIssue.
        :param key_html: The key_html of this SuggestedIssue.
        :param summary: The summary of this SuggestedIssue.
        :param summary_text: The summary_text of this SuggestedIssue.
        """
        self.openapi_types = {
            'id': int,
            'img': str,
            'key': str,
            'key_html': str,
            'summary': str,
            'summary_text': str
        }

        self.attribute_map = {
            'id': 'id',
            'img': 'img',
            'key': 'key',
            'key_html': 'keyHtml',
            'summary': 'summary',
            'summary_text': 'summaryText'
        }

        self._id = id
        self._img = img
        self._key = key
        self._key_html = key_html
        self._summary = summary
        self._summary_text = summary_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestedIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestedIssue of this SuggestedIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SuggestedIssue.

        The ID of the issue.

        :return: The id of this SuggestedIssue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SuggestedIssue.

        The ID of the issue.

        :param id: The id of this SuggestedIssue.
        :type id: int
        """

        self._id = id

    @property
    def img(self):
        """Gets the img of this SuggestedIssue.

        The URL of the issue type's avatar.

        :return: The img of this SuggestedIssue.
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this SuggestedIssue.

        The URL of the issue type's avatar.

        :param img: The img of this SuggestedIssue.
        :type img: str
        """

        self._img = img

    @property
    def key(self):
        """Gets the key of this SuggestedIssue.

        The key of the issue.

        :return: The key of this SuggestedIssue.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SuggestedIssue.

        The key of the issue.

        :param key: The key of this SuggestedIssue.
        :type key: str
        """

        self._key = key

    @property
    def key_html(self):
        """Gets the key_html of this SuggestedIssue.

        The key of the issue in HTML format.

        :return: The key_html of this SuggestedIssue.
        :rtype: str
        """
        return self._key_html

    @key_html.setter
    def key_html(self, key_html):
        """Sets the key_html of this SuggestedIssue.

        The key of the issue in HTML format.

        :param key_html: The key_html of this SuggestedIssue.
        :type key_html: str
        """

        self._key_html = key_html

    @property
    def summary(self):
        """Gets the summary of this SuggestedIssue.

        The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.

        :return: The summary of this SuggestedIssue.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SuggestedIssue.

        The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.

        :param summary: The summary of this SuggestedIssue.
        :type summary: str
        """

        self._summary = summary

    @property
    def summary_text(self):
        """Gets the summary_text of this SuggestedIssue.

        The phrase containing the query string, as plain text.

        :return: The summary_text of this SuggestedIssue.
        :rtype: str
        """
        return self._summary_text

    @summary_text.setter
    def summary_text(self, summary_text):
        """Sets the summary_text of this SuggestedIssue.

        The phrase containing the query string, as plain text.

        :param summary_text: The summary_text of this SuggestedIssue.
        :type summary_text: str
        """

        self._summary_text = summary_text
