# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecuritySchemeWithProjects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_level: int=None, description: str=None, id: int=None, name: str=None, project_ids: list[int]=None, _self: str=None):
        """SecuritySchemeWithProjects - a model defined in OpenAPI

        :param default_level: The default_level of this SecuritySchemeWithProjects.
        :param description: The description of this SecuritySchemeWithProjects.
        :param id: The id of this SecuritySchemeWithProjects.
        :param name: The name of this SecuritySchemeWithProjects.
        :param project_ids: The project_ids of this SecuritySchemeWithProjects.
        :param _self: The _self of this SecuritySchemeWithProjects.
        """
        self.openapi_types = {
            'default_level': int,
            'description': str,
            'id': int,
            'name': str,
            'project_ids': list[int],
            '_self': str
        }

        self.attribute_map = {
            'default_level': 'defaultLevel',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'project_ids': 'projectIds',
            '_self': 'self'
        }

        self._default_level = default_level
        self._description = description
        self._id = id
        self._name = name
        self._project_ids = project_ids
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecuritySchemeWithProjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecuritySchemeWithProjects of this SecuritySchemeWithProjects.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_level(self):
        """Gets the default_level of this SecuritySchemeWithProjects.

        The default level ID of the issue security scheme.

        :return: The default_level of this SecuritySchemeWithProjects.
        :rtype: int
        """
        return self._default_level

    @default_level.setter
    def default_level(self, default_level):
        """Sets the default_level of this SecuritySchemeWithProjects.

        The default level ID of the issue security scheme.

        :param default_level: The default_level of this SecuritySchemeWithProjects.
        :type default_level: int
        """

        self._default_level = default_level

    @property
    def description(self):
        """Gets the description of this SecuritySchemeWithProjects.

        The description of the issue security scheme.

        :return: The description of this SecuritySchemeWithProjects.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecuritySchemeWithProjects.

        The description of the issue security scheme.

        :param description: The description of this SecuritySchemeWithProjects.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this SecuritySchemeWithProjects.

        The ID of the issue security scheme.

        :return: The id of this SecuritySchemeWithProjects.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecuritySchemeWithProjects.

        The ID of the issue security scheme.

        :param id: The id of this SecuritySchemeWithProjects.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this SecuritySchemeWithProjects.

        The name of the issue security scheme.

        :return: The name of this SecuritySchemeWithProjects.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecuritySchemeWithProjects.

        The name of the issue security scheme.

        :param name: The name of this SecuritySchemeWithProjects.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project_ids(self):
        """Gets the project_ids of this SecuritySchemeWithProjects.

        The list of project IDs associated with the issue security scheme.

        :return: The project_ids of this SecuritySchemeWithProjects.
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this SecuritySchemeWithProjects.

        The list of project IDs associated with the issue security scheme.

        :param project_ids: The project_ids of this SecuritySchemeWithProjects.
        :type project_ids: list[int]
        """

        self._project_ids = project_ids

    @property
    def _self(self):
        """Gets the _self of this SecuritySchemeWithProjects.

        The URL of the issue security scheme.

        :return: The _self of this SecuritySchemeWithProjects.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this SecuritySchemeWithProjects.

        The URL of the issue security scheme.

        :param _self: The _self of this SecuritySchemeWithProjects.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
