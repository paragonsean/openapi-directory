# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scope import Scope
from openapi_server import util


class ProjectRoleDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, default: bool=None, description: str=None, id: int=None, name: str=None, role_configurable: bool=None, scope: Scope=None, _self: str=None, translated_name: str=None):
        """ProjectRoleDetails - a model defined in OpenAPI

        :param admin: The admin of this ProjectRoleDetails.
        :param default: The default of this ProjectRoleDetails.
        :param description: The description of this ProjectRoleDetails.
        :param id: The id of this ProjectRoleDetails.
        :param name: The name of this ProjectRoleDetails.
        :param role_configurable: The role_configurable of this ProjectRoleDetails.
        :param scope: The scope of this ProjectRoleDetails.
        :param _self: The _self of this ProjectRoleDetails.
        :param translated_name: The translated_name of this ProjectRoleDetails.
        """
        self.openapi_types = {
            'admin': bool,
            'default': bool,
            'description': str,
            'id': int,
            'name': str,
            'role_configurable': bool,
            'scope': Scope,
            '_self': str,
            'translated_name': str
        }

        self.attribute_map = {
            'admin': 'admin',
            'default': 'default',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'role_configurable': 'roleConfigurable',
            'scope': 'scope',
            '_self': 'self',
            'translated_name': 'translatedName'
        }

        self._admin = admin
        self._default = default
        self._description = description
        self._id = id
        self._name = name
        self._role_configurable = role_configurable
        self._scope = scope
        self.__self = _self
        self._translated_name = translated_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectRoleDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectRoleDetails of this ProjectRoleDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this ProjectRoleDetails.

        Whether this role is the admin role for the project.

        :return: The admin of this ProjectRoleDetails.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this ProjectRoleDetails.

        Whether this role is the admin role for the project.

        :param admin: The admin of this ProjectRoleDetails.
        :type admin: bool
        """

        self._admin = admin

    @property
    def default(self):
        """Gets the default of this ProjectRoleDetails.

        Whether this role is the default role for the project.

        :return: The default of this ProjectRoleDetails.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ProjectRoleDetails.

        Whether this role is the default role for the project.

        :param default: The default of this ProjectRoleDetails.
        :type default: bool
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this ProjectRoleDetails.

        The description of the project role.

        :return: The description of this ProjectRoleDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectRoleDetails.

        The description of the project role.

        :param description: The description of this ProjectRoleDetails.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProjectRoleDetails.

        The ID of the project role.

        :return: The id of this ProjectRoleDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectRoleDetails.

        The ID of the project role.

        :param id: The id of this ProjectRoleDetails.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectRoleDetails.

        The name of the project role.

        :return: The name of this ProjectRoleDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectRoleDetails.

        The name of the project role.

        :param name: The name of this ProjectRoleDetails.
        :type name: str
        """

        self._name = name

    @property
    def role_configurable(self):
        """Gets the role_configurable of this ProjectRoleDetails.

        Whether the roles are configurable for this project.

        :return: The role_configurable of this ProjectRoleDetails.
        :rtype: bool
        """
        return self._role_configurable

    @role_configurable.setter
    def role_configurable(self, role_configurable):
        """Sets the role_configurable of this ProjectRoleDetails.

        Whether the roles are configurable for this project.

        :param role_configurable: The role_configurable of this ProjectRoleDetails.
        :type role_configurable: bool
        """

        self._role_configurable = role_configurable

    @property
    def scope(self):
        """Gets the scope of this ProjectRoleDetails.

        The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).

        :return: The scope of this ProjectRoleDetails.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ProjectRoleDetails.

        The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).

        :param scope: The scope of this ProjectRoleDetails.
        :type scope: Scope
        """

        self._scope = scope

    @property
    def _self(self):
        """Gets the _self of this ProjectRoleDetails.

        The URL the project role details.

        :return: The _self of this ProjectRoleDetails.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ProjectRoleDetails.

        The URL the project role details.

        :param _self: The _self of this ProjectRoleDetails.
        :type _self: str
        """

        self.__self = _self

    @property
    def translated_name(self):
        """Gets the translated_name of this ProjectRoleDetails.

        The translated name of the project role.

        :return: The translated_name of this ProjectRoleDetails.
        :rtype: str
        """
        return self._translated_name

    @translated_name.setter
    def translated_name(self, translated_name):
        """Sets the translated_name of this ProjectRoleDetails.

        The translated name of the project role.

        :param translated_name: The translated_name of this ProjectRoleDetails.
        :type translated_name: str
        """

        self._translated_name = translated_name
