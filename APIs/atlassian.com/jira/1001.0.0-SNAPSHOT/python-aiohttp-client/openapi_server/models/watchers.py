# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_details import UserDetails
from openapi_server import util


class Watchers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_watching: bool=None, _self: str=None, watch_count: int=None, watchers: List[UserDetails]=None):
        """Watchers - a model defined in OpenAPI

        :param is_watching: The is_watching of this Watchers.
        :param _self: The _self of this Watchers.
        :param watch_count: The watch_count of this Watchers.
        :param watchers: The watchers of this Watchers.
        """
        self.openapi_types = {
            'is_watching': bool,
            '_self': str,
            'watch_count': int,
            'watchers': List[UserDetails]
        }

        self.attribute_map = {
            'is_watching': 'isWatching',
            '_self': 'self',
            'watch_count': 'watchCount',
            'watchers': 'watchers'
        }

        self._is_watching = is_watching
        self.__self = _self
        self._watch_count = watch_count
        self._watchers = watchers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Watchers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Watchers of this Watchers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_watching(self):
        """Gets the is_watching of this Watchers.

        Whether the calling user is watching this issue.

        :return: The is_watching of this Watchers.
        :rtype: bool
        """
        return self._is_watching

    @is_watching.setter
    def is_watching(self, is_watching):
        """Sets the is_watching of this Watchers.

        Whether the calling user is watching this issue.

        :param is_watching: The is_watching of this Watchers.
        :type is_watching: bool
        """

        self._is_watching = is_watching

    @property
    def _self(self):
        """Gets the _self of this Watchers.

        The URL of these issue watcher details.

        :return: The _self of this Watchers.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Watchers.

        The URL of these issue watcher details.

        :param _self: The _self of this Watchers.
        :type _self: str
        """

        self.__self = _self

    @property
    def watch_count(self):
        """Gets the watch_count of this Watchers.

        The number of users watching this issue.

        :return: The watch_count of this Watchers.
        :rtype: int
        """
        return self._watch_count

    @watch_count.setter
    def watch_count(self, watch_count):
        """Sets the watch_count of this Watchers.

        The number of users watching this issue.

        :param watch_count: The watch_count of this Watchers.
        :type watch_count: int
        """

        self._watch_count = watch_count

    @property
    def watchers(self):
        """Gets the watchers of this Watchers.

        Details of the users watching this issue.

        :return: The watchers of this Watchers.
        :rtype: List[UserDetails]
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers):
        """Sets the watchers of this Watchers.

        Details of the users watching this issue.

        :param watchers: The watchers of this Watchers.
        :type watchers: List[UserDetails]
        """

        self._watchers = watchers
