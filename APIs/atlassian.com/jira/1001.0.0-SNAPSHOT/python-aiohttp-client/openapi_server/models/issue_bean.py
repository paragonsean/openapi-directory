# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.included_fields import IncludedFields
from openapi_server.models.issue_transition import IssueTransition
from openapi_server.models.issue_update_metadata import IssueUpdateMetadata
from openapi_server.models.json_type_bean import JsonTypeBean
from openapi_server.models.operations import Operations
from openapi_server.models.page_of_changelogs import PageOfChangelogs
from openapi_server import util


class IssueBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changelog: PageOfChangelogs=None, editmeta: IssueUpdateMetadata=None, expand: str=None, fields: Dict[str, object]=None, fields_to_include: IncludedFields=None, id: str=None, key: str=None, names: Dict[str, str]=None, operations: Operations=None, properties: Dict[str, object]=None, rendered_fields: Dict[str, object]=None, _schema: Dict[str, JsonTypeBean]=None, _self: str=None, transitions: List[IssueTransition]=None, versioned_representations: Dict[str, Dict[str, object]]=None):
        """IssueBean - a model defined in OpenAPI

        :param changelog: The changelog of this IssueBean.
        :param editmeta: The editmeta of this IssueBean.
        :param expand: The expand of this IssueBean.
        :param fields: The fields of this IssueBean.
        :param fields_to_include: The fields_to_include of this IssueBean.
        :param id: The id of this IssueBean.
        :param key: The key of this IssueBean.
        :param names: The names of this IssueBean.
        :param operations: The operations of this IssueBean.
        :param properties: The properties of this IssueBean.
        :param rendered_fields: The rendered_fields of this IssueBean.
        :param _schema: The _schema of this IssueBean.
        :param _self: The _self of this IssueBean.
        :param transitions: The transitions of this IssueBean.
        :param versioned_representations: The versioned_representations of this IssueBean.
        """
        self.openapi_types = {
            'changelog': PageOfChangelogs,
            'editmeta': IssueUpdateMetadata,
            'expand': str,
            'fields': Dict[str, object],
            'fields_to_include': IncludedFields,
            'id': str,
            'key': str,
            'names': Dict[str, str],
            'operations': Operations,
            'properties': Dict[str, object],
            'rendered_fields': Dict[str, object],
            '_schema': Dict[str, JsonTypeBean],
            '_self': str,
            'transitions': List[IssueTransition],
            'versioned_representations': Dict[str, Dict[str, object]]
        }

        self.attribute_map = {
            'changelog': 'changelog',
            'editmeta': 'editmeta',
            'expand': 'expand',
            'fields': 'fields',
            'fields_to_include': 'fieldsToInclude',
            'id': 'id',
            'key': 'key',
            'names': 'names',
            'operations': 'operations',
            'properties': 'properties',
            'rendered_fields': 'renderedFields',
            '_schema': 'schema',
            '_self': 'self',
            'transitions': 'transitions',
            'versioned_representations': 'versionedRepresentations'
        }

        self._changelog = changelog
        self._editmeta = editmeta
        self._expand = expand
        self._fields = fields
        self._fields_to_include = fields_to_include
        self._id = id
        self._key = key
        self._names = names
        self._operations = operations
        self._properties = properties
        self._rendered_fields = rendered_fields
        self.__schema = _schema
        self.__self = _self
        self._transitions = transitions
        self._versioned_representations = versioned_representations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueBean of this IssueBean.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changelog(self):
        """Gets the changelog of this IssueBean.

        Details of changelogs associated with the issue.

        :return: The changelog of this IssueBean.
        :rtype: PageOfChangelogs
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this IssueBean.

        Details of changelogs associated with the issue.

        :param changelog: The changelog of this IssueBean.
        :type changelog: PageOfChangelogs
        """

        self._changelog = changelog

    @property
    def editmeta(self):
        """Gets the editmeta of this IssueBean.

        The metadata for the fields on the issue that can be amended.

        :return: The editmeta of this IssueBean.
        :rtype: IssueUpdateMetadata
        """
        return self._editmeta

    @editmeta.setter
    def editmeta(self, editmeta):
        """Sets the editmeta of this IssueBean.

        The metadata for the fields on the issue that can be amended.

        :param editmeta: The editmeta of this IssueBean.
        :type editmeta: IssueUpdateMetadata
        """

        self._editmeta = editmeta

    @property
    def expand(self):
        """Gets the expand of this IssueBean.

        Expand options that include additional issue details in the response.

        :return: The expand of this IssueBean.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this IssueBean.

        Expand options that include additional issue details in the response.

        :param expand: The expand of this IssueBean.
        :type expand: str
        """

        self._expand = expand

    @property
    def fields(self):
        """Gets the fields of this IssueBean.


        :return: The fields of this IssueBean.
        :rtype: Dict[str, object]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this IssueBean.


        :param fields: The fields of this IssueBean.
        :type fields: Dict[str, object]
        """

        self._fields = fields

    @property
    def fields_to_include(self):
        """Gets the fields_to_include of this IssueBean.


        :return: The fields_to_include of this IssueBean.
        :rtype: IncludedFields
        """
        return self._fields_to_include

    @fields_to_include.setter
    def fields_to_include(self, fields_to_include):
        """Sets the fields_to_include of this IssueBean.


        :param fields_to_include: The fields_to_include of this IssueBean.
        :type fields_to_include: IncludedFields
        """

        self._fields_to_include = fields_to_include

    @property
    def id(self):
        """Gets the id of this IssueBean.

        The ID of the issue.

        :return: The id of this IssueBean.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueBean.

        The ID of the issue.

        :param id: The id of this IssueBean.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this IssueBean.

        The key of the issue.

        :return: The key of this IssueBean.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IssueBean.

        The key of the issue.

        :param key: The key of this IssueBean.
        :type key: str
        """

        self._key = key

    @property
    def names(self):
        """Gets the names of this IssueBean.

        The ID and name of each field present on the issue.

        :return: The names of this IssueBean.
        :rtype: Dict[str, str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this IssueBean.

        The ID and name of each field present on the issue.

        :param names: The names of this IssueBean.
        :type names: Dict[str, str]
        """

        self._names = names

    @property
    def operations(self):
        """Gets the operations of this IssueBean.

        The operations that can be performed on the issue.

        :return: The operations of this IssueBean.
        :rtype: Operations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this IssueBean.

        The operations that can be performed on the issue.

        :param operations: The operations of this IssueBean.
        :type operations: Operations
        """

        self._operations = operations

    @property
    def properties(self):
        """Gets the properties of this IssueBean.

        Details of the issue properties identified in the request.

        :return: The properties of this IssueBean.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IssueBean.

        Details of the issue properties identified in the request.

        :param properties: The properties of this IssueBean.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def rendered_fields(self):
        """Gets the rendered_fields of this IssueBean.

        The rendered value of each field present on the issue.

        :return: The rendered_fields of this IssueBean.
        :rtype: Dict[str, object]
        """
        return self._rendered_fields

    @rendered_fields.setter
    def rendered_fields(self, rendered_fields):
        """Sets the rendered_fields of this IssueBean.

        The rendered value of each field present on the issue.

        :param rendered_fields: The rendered_fields of this IssueBean.
        :type rendered_fields: Dict[str, object]
        """

        self._rendered_fields = rendered_fields

    @property
    def _schema(self):
        """Gets the _schema of this IssueBean.

        The schema describing each field present on the issue.

        :return: The _schema of this IssueBean.
        :rtype: Dict[str, JsonTypeBean]
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this IssueBean.

        The schema describing each field present on the issue.

        :param _schema: The _schema of this IssueBean.
        :type _schema: Dict[str, JsonTypeBean]
        """

        self.__schema = _schema

    @property
    def _self(self):
        """Gets the _self of this IssueBean.

        The URL of the issue details.

        :return: The _self of this IssueBean.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IssueBean.

        The URL of the issue details.

        :param _self: The _self of this IssueBean.
        :type _self: str
        """

        self.__self = _self

    @property
    def transitions(self):
        """Gets the transitions of this IssueBean.

        The transitions that can be performed on the issue.

        :return: The transitions of this IssueBean.
        :rtype: List[IssueTransition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this IssueBean.

        The transitions that can be performed on the issue.

        :param transitions: The transitions of this IssueBean.
        :type transitions: List[IssueTransition]
        """

        self._transitions = transitions

    @property
    def versioned_representations(self):
        """Gets the versioned_representations of this IssueBean.

        The versions of each field on the issue.

        :return: The versioned_representations of this IssueBean.
        :rtype: Dict[str, Dict[str, object]]
        """
        return self._versioned_representations

    @versioned_representations.setter
    def versioned_representations(self, versioned_representations):
        """Sets the versioned_representations of this IssueBean.

        The versions of each field on the issue.

        :param versioned_representations: The versioned_representations of this IssueBean.
        :type versioned_representations: Dict[str, Dict[str, object]]
        """

        self._versioned_representations = versioned_representations
