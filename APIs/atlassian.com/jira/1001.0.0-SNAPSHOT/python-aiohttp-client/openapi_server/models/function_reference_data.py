# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FunctionReferenceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, is_list: str=None, types: List[str]=None, value: str=None):
        """FunctionReferenceData - a model defined in OpenAPI

        :param display_name: The display_name of this FunctionReferenceData.
        :param is_list: The is_list of this FunctionReferenceData.
        :param types: The types of this FunctionReferenceData.
        :param value: The value of this FunctionReferenceData.
        """
        self.openapi_types = {
            'display_name': str,
            'is_list': str,
            'types': List[str],
            'value': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'is_list': 'isList',
            'types': 'types',
            'value': 'value'
        }

        self._display_name = display_name
        self._is_list = is_list
        self._types = types
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FunctionReferenceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FunctionReferenceData of this FunctionReferenceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this FunctionReferenceData.

        The display name of the function.

        :return: The display_name of this FunctionReferenceData.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FunctionReferenceData.

        The display name of the function.

        :param display_name: The display_name of this FunctionReferenceData.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_list(self):
        """Gets the is_list of this FunctionReferenceData.

        Whether the function can take a list of arguments.

        :return: The is_list of this FunctionReferenceData.
        :rtype: str
        """
        return self._is_list

    @is_list.setter
    def is_list(self, is_list):
        """Sets the is_list of this FunctionReferenceData.

        Whether the function can take a list of arguments.

        :param is_list: The is_list of this FunctionReferenceData.
        :type is_list: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if is_list not in allowed_values:
            raise ValueError(
                "Invalid value for `is_list` ({0}), must be one of {1}"
                .format(is_list, allowed_values)
            )

        self._is_list = is_list

    @property
    def types(self):
        """Gets the types of this FunctionReferenceData.

        The data types returned by the function.

        :return: The types of this FunctionReferenceData.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this FunctionReferenceData.

        The data types returned by the function.

        :param types: The types of this FunctionReferenceData.
        :type types: List[str]
        """

        self._types = types

    @property
    def value(self):
        """Gets the value of this FunctionReferenceData.

        The function identifier.

        :return: The value of this FunctionReferenceData.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FunctionReferenceData.

        The function identifier.

        :param value: The value of this FunctionReferenceData.
        :type value: str
        """

        self._value = value
