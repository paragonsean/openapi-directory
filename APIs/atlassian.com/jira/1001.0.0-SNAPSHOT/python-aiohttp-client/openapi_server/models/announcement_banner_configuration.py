# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnouncementBannerConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hash_id: str=None, is_dismissible: bool=None, is_enabled: bool=None, message: str=None, visibility: str=None):
        """AnnouncementBannerConfiguration - a model defined in OpenAPI

        :param hash_id: The hash_id of this AnnouncementBannerConfiguration.
        :param is_dismissible: The is_dismissible of this AnnouncementBannerConfiguration.
        :param is_enabled: The is_enabled of this AnnouncementBannerConfiguration.
        :param message: The message of this AnnouncementBannerConfiguration.
        :param visibility: The visibility of this AnnouncementBannerConfiguration.
        """
        self.openapi_types = {
            'hash_id': str,
            'is_dismissible': bool,
            'is_enabled': bool,
            'message': str,
            'visibility': str
        }

        self.attribute_map = {
            'hash_id': 'hashId',
            'is_dismissible': 'isDismissible',
            'is_enabled': 'isEnabled',
            'message': 'message',
            'visibility': 'visibility'
        }

        self._hash_id = hash_id
        self._is_dismissible = is_dismissible
        self._is_enabled = is_enabled
        self._message = message
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnouncementBannerConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnouncementBannerConfiguration of this AnnouncementBannerConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash_id(self):
        """Gets the hash_id of this AnnouncementBannerConfiguration.

        Hash of the banner data. The client detects updates by comparing hash IDs.

        :return: The hash_id of this AnnouncementBannerConfiguration.
        :rtype: str
        """
        return self._hash_id

    @hash_id.setter
    def hash_id(self, hash_id):
        """Sets the hash_id of this AnnouncementBannerConfiguration.

        Hash of the banner data. The client detects updates by comparing hash IDs.

        :param hash_id: The hash_id of this AnnouncementBannerConfiguration.
        :type hash_id: str
        """

        self._hash_id = hash_id

    @property
    def is_dismissible(self):
        """Gets the is_dismissible of this AnnouncementBannerConfiguration.

        Flag indicating if the announcement banner can be dismissed by the user.

        :return: The is_dismissible of this AnnouncementBannerConfiguration.
        :rtype: bool
        """
        return self._is_dismissible

    @is_dismissible.setter
    def is_dismissible(self, is_dismissible):
        """Sets the is_dismissible of this AnnouncementBannerConfiguration.

        Flag indicating if the announcement banner can be dismissed by the user.

        :param is_dismissible: The is_dismissible of this AnnouncementBannerConfiguration.
        :type is_dismissible: bool
        """

        self._is_dismissible = is_dismissible

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AnnouncementBannerConfiguration.

        Flag indicating if the announcement banner is enabled or not.

        :return: The is_enabled of this AnnouncementBannerConfiguration.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AnnouncementBannerConfiguration.

        Flag indicating if the announcement banner is enabled or not.

        :param is_enabled: The is_enabled of this AnnouncementBannerConfiguration.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def message(self):
        """Gets the message of this AnnouncementBannerConfiguration.

        The text on the announcement banner.

        :return: The message of this AnnouncementBannerConfiguration.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AnnouncementBannerConfiguration.

        The text on the announcement banner.

        :param message: The message of this AnnouncementBannerConfiguration.
        :type message: str
        """

        self._message = message

    @property
    def visibility(self):
        """Gets the visibility of this AnnouncementBannerConfiguration.

        Visibility of the announcement banner.

        :return: The visibility of this AnnouncementBannerConfiguration.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this AnnouncementBannerConfiguration.

        Visibility of the announcement banner.

        :param visibility: The visibility of this AnnouncementBannerConfiguration.
        :type visibility: str
        """
        allowed_values = ["PUBLIC", "PRIVATE"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
