# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_role_group import ProjectRoleGroup
from openapi_server.models.project_role_user import ProjectRoleUser
from openapi_server import util


class RoleActor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor_group: ProjectRoleGroup=None, actor_user: ProjectRoleUser=None, avatar_url: str=None, display_name: str=None, id: int=None, name: str=None, type: str=None):
        """RoleActor - a model defined in OpenAPI

        :param actor_group: The actor_group of this RoleActor.
        :param actor_user: The actor_user of this RoleActor.
        :param avatar_url: The avatar_url of this RoleActor.
        :param display_name: The display_name of this RoleActor.
        :param id: The id of this RoleActor.
        :param name: The name of this RoleActor.
        :param type: The type of this RoleActor.
        """
        self.openapi_types = {
            'actor_group': ProjectRoleGroup,
            'actor_user': ProjectRoleUser,
            'avatar_url': str,
            'display_name': str,
            'id': int,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'actor_group': 'actorGroup',
            'actor_user': 'actorUser',
            'avatar_url': 'avatarUrl',
            'display_name': 'displayName',
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._actor_group = actor_group
        self._actor_user = actor_user
        self._avatar_url = avatar_url
        self._display_name = display_name
        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleActor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleActor of this RoleActor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_group(self):
        """Gets the actor_group of this RoleActor.


        :return: The actor_group of this RoleActor.
        :rtype: ProjectRoleGroup
        """
        return self._actor_group

    @actor_group.setter
    def actor_group(self, actor_group):
        """Sets the actor_group of this RoleActor.


        :param actor_group: The actor_group of this RoleActor.
        :type actor_group: ProjectRoleGroup
        """

        self._actor_group = actor_group

    @property
    def actor_user(self):
        """Gets the actor_user of this RoleActor.


        :return: The actor_user of this RoleActor.
        :rtype: ProjectRoleUser
        """
        return self._actor_user

    @actor_user.setter
    def actor_user(self, actor_user):
        """Sets the actor_user of this RoleActor.


        :param actor_user: The actor_user of this RoleActor.
        :type actor_user: ProjectRoleUser
        """

        self._actor_user = actor_user

    @property
    def avatar_url(self):
        """Gets the avatar_url of this RoleActor.

        The avatar of the role actor.

        :return: The avatar_url of this RoleActor.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this RoleActor.

        The avatar of the role actor.

        :param avatar_url: The avatar_url of this RoleActor.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """Gets the display_name of this RoleActor.

        The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.

        :return: The display_name of this RoleActor.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoleActor.

        The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.

        :param display_name: The display_name of this RoleActor.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this RoleActor.

        The ID of the role actor.

        :return: The id of this RoleActor.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoleActor.

        The ID of the role actor.

        :param id: The id of this RoleActor.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RoleActor.

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.

        :return: The name of this RoleActor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleActor.

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.

        :param name: The name of this RoleActor.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this RoleActor.

        The type of role actor.

        :return: The type of this RoleActor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoleActor.

        The type of role actor.

        :param type: The type of this RoleActor.
        :type type: str
        """
        allowed_values = ["atlassian-group-role-actor", "atlassian-user-role-actor"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
