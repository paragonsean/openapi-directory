# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_type_details import IssueTypeDetails
from openapi_server.models.user import User
from openapi_server import util


class WorkflowScheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_workflow: str=None, description: str=None, draft: bool=None, id: int=None, issue_type_mappings: Dict[str, str]=None, issue_types: Dict[str, IssueTypeDetails]=None, last_modified: str=None, last_modified_user: User=None, name: str=None, original_default_workflow: str=None, original_issue_type_mappings: Dict[str, str]=None, _self: str=None, update_draft_if_needed: bool=None):
        """WorkflowScheme - a model defined in OpenAPI

        :param default_workflow: The default_workflow of this WorkflowScheme.
        :param description: The description of this WorkflowScheme.
        :param draft: The draft of this WorkflowScheme.
        :param id: The id of this WorkflowScheme.
        :param issue_type_mappings: The issue_type_mappings of this WorkflowScheme.
        :param issue_types: The issue_types of this WorkflowScheme.
        :param last_modified: The last_modified of this WorkflowScheme.
        :param last_modified_user: The last_modified_user of this WorkflowScheme.
        :param name: The name of this WorkflowScheme.
        :param original_default_workflow: The original_default_workflow of this WorkflowScheme.
        :param original_issue_type_mappings: The original_issue_type_mappings of this WorkflowScheme.
        :param _self: The _self of this WorkflowScheme.
        :param update_draft_if_needed: The update_draft_if_needed of this WorkflowScheme.
        """
        self.openapi_types = {
            'default_workflow': str,
            'description': str,
            'draft': bool,
            'id': int,
            'issue_type_mappings': Dict[str, str],
            'issue_types': Dict[str, IssueTypeDetails],
            'last_modified': str,
            'last_modified_user': User,
            'name': str,
            'original_default_workflow': str,
            'original_issue_type_mappings': Dict[str, str],
            '_self': str,
            'update_draft_if_needed': bool
        }

        self.attribute_map = {
            'default_workflow': 'defaultWorkflow',
            'description': 'description',
            'draft': 'draft',
            'id': 'id',
            'issue_type_mappings': 'issueTypeMappings',
            'issue_types': 'issueTypes',
            'last_modified': 'lastModified',
            'last_modified_user': 'lastModifiedUser',
            'name': 'name',
            'original_default_workflow': 'originalDefaultWorkflow',
            'original_issue_type_mappings': 'originalIssueTypeMappings',
            '_self': 'self',
            'update_draft_if_needed': 'updateDraftIfNeeded'
        }

        self._default_workflow = default_workflow
        self._description = description
        self._draft = draft
        self._id = id
        self._issue_type_mappings = issue_type_mappings
        self._issue_types = issue_types
        self._last_modified = last_modified
        self._last_modified_user = last_modified_user
        self._name = name
        self._original_default_workflow = original_default_workflow
        self._original_issue_type_mappings = original_issue_type_mappings
        self.__self = _self
        self._update_draft_if_needed = update_draft_if_needed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowScheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowScheme of this WorkflowScheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_workflow(self):
        """Gets the default_workflow of this WorkflowScheme.

        The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.

        :return: The default_workflow of this WorkflowScheme.
        :rtype: str
        """
        return self._default_workflow

    @default_workflow.setter
    def default_workflow(self, default_workflow):
        """Sets the default_workflow of this WorkflowScheme.

        The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.

        :param default_workflow: The default_workflow of this WorkflowScheme.
        :type default_workflow: str
        """

        self._default_workflow = default_workflow

    @property
    def description(self):
        """Gets the description of this WorkflowScheme.

        The description of the workflow scheme.

        :return: The description of this WorkflowScheme.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowScheme.

        The description of the workflow scheme.

        :param description: The description of this WorkflowScheme.
        :type description: str
        """

        self._description = description

    @property
    def draft(self):
        """Gets the draft of this WorkflowScheme.

        Whether the workflow scheme is a draft or not.

        :return: The draft of this WorkflowScheme.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this WorkflowScheme.

        Whether the workflow scheme is a draft or not.

        :param draft: The draft of this WorkflowScheme.
        :type draft: bool
        """

        self._draft = draft

    @property
    def id(self):
        """Gets the id of this WorkflowScheme.

        The ID of the workflow scheme.

        :return: The id of this WorkflowScheme.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowScheme.

        The ID of the workflow scheme.

        :param id: The id of this WorkflowScheme.
        :type id: int
        """

        self._id = id

    @property
    def issue_type_mappings(self):
        """Gets the issue_type_mappings of this WorkflowScheme.

        The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.

        :return: The issue_type_mappings of this WorkflowScheme.
        :rtype: Dict[str, str]
        """
        return self._issue_type_mappings

    @issue_type_mappings.setter
    def issue_type_mappings(self, issue_type_mappings):
        """Sets the issue_type_mappings of this WorkflowScheme.

        The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.

        :param issue_type_mappings: The issue_type_mappings of this WorkflowScheme.
        :type issue_type_mappings: Dict[str, str]
        """

        self._issue_type_mappings = issue_type_mappings

    @property
    def issue_types(self):
        """Gets the issue_types of this WorkflowScheme.

        The issue types available in Jira.

        :return: The issue_types of this WorkflowScheme.
        :rtype: Dict[str, IssueTypeDetails]
        """
        return self._issue_types

    @issue_types.setter
    def issue_types(self, issue_types):
        """Sets the issue_types of this WorkflowScheme.

        The issue types available in Jira.

        :param issue_types: The issue_types of this WorkflowScheme.
        :type issue_types: Dict[str, IssueTypeDetails]
        """

        self._issue_types = issue_types

    @property
    def last_modified(self):
        """Gets the last_modified of this WorkflowScheme.

        The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.

        :return: The last_modified of this WorkflowScheme.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this WorkflowScheme.

        The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.

        :param last_modified: The last_modified of this WorkflowScheme.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this WorkflowScheme.

        The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.

        :return: The last_modified_user of this WorkflowScheme.
        :rtype: User
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this WorkflowScheme.

        The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.

        :param last_modified_user: The last_modified_user of this WorkflowScheme.
        :type last_modified_user: User
        """

        self._last_modified_user = last_modified_user

    @property
    def name(self):
        """Gets the name of this WorkflowScheme.

        The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.

        :return: The name of this WorkflowScheme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowScheme.

        The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.

        :param name: The name of this WorkflowScheme.
        :type name: str
        """

        self._name = name

    @property
    def original_default_workflow(self):
        """Gets the original_default_workflow of this WorkflowScheme.

        For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.

        :return: The original_default_workflow of this WorkflowScheme.
        :rtype: str
        """
        return self._original_default_workflow

    @original_default_workflow.setter
    def original_default_workflow(self, original_default_workflow):
        """Sets the original_default_workflow of this WorkflowScheme.

        For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.

        :param original_default_workflow: The original_default_workflow of this WorkflowScheme.
        :type original_default_workflow: str
        """

        self._original_default_workflow = original_default_workflow

    @property
    def original_issue_type_mappings(self):
        """Gets the original_issue_type_mappings of this WorkflowScheme.

        For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.

        :return: The original_issue_type_mappings of this WorkflowScheme.
        :rtype: Dict[str, str]
        """
        return self._original_issue_type_mappings

    @original_issue_type_mappings.setter
    def original_issue_type_mappings(self, original_issue_type_mappings):
        """Sets the original_issue_type_mappings of this WorkflowScheme.

        For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.

        :param original_issue_type_mappings: The original_issue_type_mappings of this WorkflowScheme.
        :type original_issue_type_mappings: Dict[str, str]
        """

        self._original_issue_type_mappings = original_issue_type_mappings

    @property
    def _self(self):
        """Gets the _self of this WorkflowScheme.


        :return: The _self of this WorkflowScheme.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this WorkflowScheme.


        :param _self: The _self of this WorkflowScheme.
        :type _self: str
        """

        self.__self = _self

    @property
    def update_draft_if_needed(self):
        """Gets the update_draft_if_needed of this WorkflowScheme.

        Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to `false`.

        :return: The update_draft_if_needed of this WorkflowScheme.
        :rtype: bool
        """
        return self._update_draft_if_needed

    @update_draft_if_needed.setter
    def update_draft_if_needed(self, update_draft_if_needed):
        """Sets the update_draft_if_needed of this WorkflowScheme.

        Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to `false`.

        :param update_draft_if_needed: The update_draft_if_needed of this WorkflowScheme.
        :type update_draft_if_needed: bool
        """

        self._update_draft_if_needed = update_draft_if_needed
