# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_last_used import FieldLastUsed
from openapi_server.models.json_type_bean import JsonTypeBean
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts_count: int=None, description: str=None, id: str=None, is_locked: bool=None, is_unscreenable: bool=None, key: str=None, last_used: FieldLastUsed=None, name: str=None, projects_count: int=None, _schema: JsonTypeBean=None, screens_count: int=None, searcher_key: str=None):
        """ModelField - a model defined in OpenAPI

        :param contexts_count: The contexts_count of this ModelField.
        :param description: The description of this ModelField.
        :param id: The id of this ModelField.
        :param is_locked: The is_locked of this ModelField.
        :param is_unscreenable: The is_unscreenable of this ModelField.
        :param key: The key of this ModelField.
        :param last_used: The last_used of this ModelField.
        :param name: The name of this ModelField.
        :param projects_count: The projects_count of this ModelField.
        :param _schema: The _schema of this ModelField.
        :param screens_count: The screens_count of this ModelField.
        :param searcher_key: The searcher_key of this ModelField.
        """
        self.openapi_types = {
            'contexts_count': int,
            'description': str,
            'id': str,
            'is_locked': bool,
            'is_unscreenable': bool,
            'key': str,
            'last_used': FieldLastUsed,
            'name': str,
            'projects_count': int,
            '_schema': JsonTypeBean,
            'screens_count': int,
            'searcher_key': str
        }

        self.attribute_map = {
            'contexts_count': 'contextsCount',
            'description': 'description',
            'id': 'id',
            'is_locked': 'isLocked',
            'is_unscreenable': 'isUnscreenable',
            'key': 'key',
            'last_used': 'lastUsed',
            'name': 'name',
            'projects_count': 'projectsCount',
            '_schema': 'schema',
            'screens_count': 'screensCount',
            'searcher_key': 'searcherKey'
        }

        self._contexts_count = contexts_count
        self._description = description
        self._id = id
        self._is_locked = is_locked
        self._is_unscreenable = is_unscreenable
        self._key = key
        self._last_used = last_used
        self._name = name
        self._projects_count = projects_count
        self.__schema = _schema
        self._screens_count = screens_count
        self._searcher_key = searcher_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts_count(self):
        """Gets the contexts_count of this ModelField.

        Number of contexts where the field is used.

        :return: The contexts_count of this ModelField.
        :rtype: int
        """
        return self._contexts_count

    @contexts_count.setter
    def contexts_count(self, contexts_count):
        """Sets the contexts_count of this ModelField.

        Number of contexts where the field is used.

        :param contexts_count: The contexts_count of this ModelField.
        :type contexts_count: int
        """

        self._contexts_count = contexts_count

    @property
    def description(self):
        """Gets the description of this ModelField.

        The description of the field.

        :return: The description of this ModelField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelField.

        The description of the field.

        :param description: The description of this ModelField.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ModelField.

        The ID of the field.

        :return: The id of this ModelField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelField.

        The ID of the field.

        :param id: The id of this ModelField.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_locked(self):
        """Gets the is_locked of this ModelField.

        Whether the field is locked.

        :return: The is_locked of this ModelField.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this ModelField.

        Whether the field is locked.

        :param is_locked: The is_locked of this ModelField.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def is_unscreenable(self):
        """Gets the is_unscreenable of this ModelField.

        Whether the field is shown on screen or not.

        :return: The is_unscreenable of this ModelField.
        :rtype: bool
        """
        return self._is_unscreenable

    @is_unscreenable.setter
    def is_unscreenable(self, is_unscreenable):
        """Sets the is_unscreenable of this ModelField.

        Whether the field is shown on screen or not.

        :param is_unscreenable: The is_unscreenable of this ModelField.
        :type is_unscreenable: bool
        """

        self._is_unscreenable = is_unscreenable

    @property
    def key(self):
        """Gets the key of this ModelField.

        The key of the field.

        :return: The key of this ModelField.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ModelField.

        The key of the field.

        :param key: The key of this ModelField.
        :type key: str
        """

        self._key = key

    @property
    def last_used(self):
        """Gets the last_used of this ModelField.


        :return: The last_used of this ModelField.
        :rtype: FieldLastUsed
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this ModelField.


        :param last_used: The last_used of this ModelField.
        :type last_used: FieldLastUsed
        """

        self._last_used = last_used

    @property
    def name(self):
        """Gets the name of this ModelField.

        The name of the field.

        :return: The name of this ModelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelField.

        The name of the field.

        :param name: The name of this ModelField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def projects_count(self):
        """Gets the projects_count of this ModelField.

        Number of projects where the field is used.

        :return: The projects_count of this ModelField.
        :rtype: int
        """
        return self._projects_count

    @projects_count.setter
    def projects_count(self, projects_count):
        """Sets the projects_count of this ModelField.

        Number of projects where the field is used.

        :param projects_count: The projects_count of this ModelField.
        :type projects_count: int
        """

        self._projects_count = projects_count

    @property
    def _schema(self):
        """Gets the _schema of this ModelField.


        :return: The _schema of this ModelField.
        :rtype: JsonTypeBean
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ModelField.


        :param _schema: The _schema of this ModelField.
        :type _schema: JsonTypeBean
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def screens_count(self):
        """Gets the screens_count of this ModelField.

        Number of screens where the field is used.

        :return: The screens_count of this ModelField.
        :rtype: int
        """
        return self._screens_count

    @screens_count.setter
    def screens_count(self, screens_count):
        """Sets the screens_count of this ModelField.

        Number of screens where the field is used.

        :param screens_count: The screens_count of this ModelField.
        :type screens_count: int
        """

        self._screens_count = screens_count

    @property
    def searcher_key(self):
        """Gets the searcher_key of this ModelField.

        The searcher key of the field. Returned for custom fields.

        :return: The searcher_key of this ModelField.
        :rtype: str
        """
        return self._searcher_key

    @searcher_key.setter
    def searcher_key(self, searcher_key):
        """Sets the searcher_key of this ModelField.

        The searcher key of the field. Returned for custom fields.

        :param searcher_key: The searcher_key of this ModelField.
        :type searcher_key: str
        """

        self._searcher_key = searcher_key
