# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_field_option_configuration import IssueFieldOptionConfiguration
from openapi_server import util


class IssueFieldOptionCreateBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: IssueFieldOptionConfiguration=None, properties: Dict[str, object]=None, value: str=None):
        """IssueFieldOptionCreateBean - a model defined in OpenAPI

        :param config: The config of this IssueFieldOptionCreateBean.
        :param properties: The properties of this IssueFieldOptionCreateBean.
        :param value: The value of this IssueFieldOptionCreateBean.
        """
        self.openapi_types = {
            'config': IssueFieldOptionConfiguration,
            'properties': Dict[str, object],
            'value': str
        }

        self.attribute_map = {
            'config': 'config',
            'properties': 'properties',
            'value': 'value'
        }

        self._config = config
        self._properties = properties
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueFieldOptionCreateBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueFieldOptionCreateBean of this IssueFieldOptionCreateBean.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this IssueFieldOptionCreateBean.


        :return: The config of this IssueFieldOptionCreateBean.
        :rtype: IssueFieldOptionConfiguration
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IssueFieldOptionCreateBean.


        :param config: The config of this IssueFieldOptionCreateBean.
        :type config: IssueFieldOptionConfiguration
        """

        self._config = config

    @property
    def properties(self):
        """Gets the properties of this IssueFieldOptionCreateBean.

        The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.

        :return: The properties of this IssueFieldOptionCreateBean.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IssueFieldOptionCreateBean.

        The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.

        :param properties: The properties of this IssueFieldOptionCreateBean.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def value(self):
        """Gets the value of this IssueFieldOptionCreateBean.

        The option's name, which is displayed in Jira.

        :return: The value of this IssueFieldOptionCreateBean.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IssueFieldOptionCreateBean.

        The option's name, which is displayed in Jira.

        :param value: The value of this IssueFieldOptionCreateBean.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
