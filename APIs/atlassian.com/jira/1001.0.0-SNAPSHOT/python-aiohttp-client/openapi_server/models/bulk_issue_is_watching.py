# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BulkIssueIsWatching(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issues_is_watching: Dict[str, bool]=None):
        """BulkIssueIsWatching - a model defined in OpenAPI

        :param issues_is_watching: The issues_is_watching of this BulkIssueIsWatching.
        """
        self.openapi_types = {
            'issues_is_watching': Dict[str, bool]
        }

        self.attribute_map = {
            'issues_is_watching': 'issuesIsWatching'
        }

        self._issues_is_watching = issues_is_watching

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BulkIssueIsWatching':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BulkIssueIsWatching of this BulkIssueIsWatching.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issues_is_watching(self):
        """Gets the issues_is_watching of this BulkIssueIsWatching.

        The map of issue ID to boolean watch status.

        :return: The issues_is_watching of this BulkIssueIsWatching.
        :rtype: Dict[str, bool]
        """
        return self._issues_is_watching

    @issues_is_watching.setter
    def issues_is_watching(self, issues_is_watching):
        """Sets the issues_is_watching of this BulkIssueIsWatching.

        The map of issue ID to boolean watch status.

        :param issues_is_watching: The issues_is_watching of this BulkIssueIsWatching.
        :type issues_is_watching: Dict[str, bool]
        """

        self._issues_is_watching = issues_is_watching
