# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesAndJQLQueries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_ids: list[int]=None, jqls: List[str]=None):
        """IssuesAndJQLQueries - a model defined in OpenAPI

        :param issue_ids: The issue_ids of this IssuesAndJQLQueries.
        :param jqls: The jqls of this IssuesAndJQLQueries.
        """
        self.openapi_types = {
            'issue_ids': list[int],
            'jqls': List[str]
        }

        self.attribute_map = {
            'issue_ids': 'issueIds',
            'jqls': 'jqls'
        }

        self._issue_ids = issue_ids
        self._jqls = jqls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesAndJQLQueries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuesAndJQLQueries of this IssuesAndJQLQueries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_ids(self):
        """Gets the issue_ids of this IssuesAndJQLQueries.

        A list of issue IDs.

        :return: The issue_ids of this IssuesAndJQLQueries.
        :rtype: list[int]
        """
        return self._issue_ids

    @issue_ids.setter
    def issue_ids(self, issue_ids):
        """Sets the issue_ids of this IssuesAndJQLQueries.

        A list of issue IDs.

        :param issue_ids: The issue_ids of this IssuesAndJQLQueries.
        :type issue_ids: list[int]
        """
        if issue_ids is None:
            raise ValueError("Invalid value for `issue_ids`, must not be `None`")

        self._issue_ids = issue_ids

    @property
    def jqls(self):
        """Gets the jqls of this IssuesAndJQLQueries.

        A list of JQL queries.

        :return: The jqls of this IssuesAndJQLQueries.
        :rtype: List[str]
        """
        return self._jqls

    @jqls.setter
    def jqls(self, jqls):
        """Sets the jqls of this IssuesAndJQLQueries.

        A list of JQL queries.

        :param jqls: The jqls of this IssuesAndJQLQueries.
        :type jqls: List[str]
        """
        if jqls is None:
            raise ValueError("Invalid value for `jqls`, must not be `None`")

        self._jqls = jqls
