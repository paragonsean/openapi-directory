# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTypeScheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_issue_type_id: str=None, description: str=None, id: str=None, is_default: bool=None, name: str=None):
        """IssueTypeScheme - a model defined in OpenAPI

        :param default_issue_type_id: The default_issue_type_id of this IssueTypeScheme.
        :param description: The description of this IssueTypeScheme.
        :param id: The id of this IssueTypeScheme.
        :param is_default: The is_default of this IssueTypeScheme.
        :param name: The name of this IssueTypeScheme.
        """
        self.openapi_types = {
            'default_issue_type_id': str,
            'description': str,
            'id': str,
            'is_default': bool,
            'name': str
        }

        self.attribute_map = {
            'default_issue_type_id': 'defaultIssueTypeId',
            'description': 'description',
            'id': 'id',
            'is_default': 'isDefault',
            'name': 'name'
        }

        self._default_issue_type_id = default_issue_type_id
        self._description = description
        self._id = id
        self._is_default = is_default
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTypeScheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTypeScheme of this IssueTypeScheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_issue_type_id(self):
        """Gets the default_issue_type_id of this IssueTypeScheme.

        The ID of the default issue type of the issue type scheme.

        :return: The default_issue_type_id of this IssueTypeScheme.
        :rtype: str
        """
        return self._default_issue_type_id

    @default_issue_type_id.setter
    def default_issue_type_id(self, default_issue_type_id):
        """Sets the default_issue_type_id of this IssueTypeScheme.

        The ID of the default issue type of the issue type scheme.

        :param default_issue_type_id: The default_issue_type_id of this IssueTypeScheme.
        :type default_issue_type_id: str
        """

        self._default_issue_type_id = default_issue_type_id

    @property
    def description(self):
        """Gets the description of this IssueTypeScheme.

        The description of the issue type scheme.

        :return: The description of this IssueTypeScheme.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueTypeScheme.

        The description of the issue type scheme.

        :param description: The description of this IssueTypeScheme.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this IssueTypeScheme.

        The ID of the issue type scheme.

        :return: The id of this IssueTypeScheme.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueTypeScheme.

        The ID of the issue type scheme.

        :param id: The id of this IssueTypeScheme.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this IssueTypeScheme.

        Whether the issue type scheme is the default.

        :return: The is_default of this IssueTypeScheme.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this IssueTypeScheme.

        Whether the issue type scheme is the default.

        :param is_default: The is_default of this IssueTypeScheme.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this IssueTypeScheme.

        The name of the issue type scheme.

        :return: The name of this IssueTypeScheme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTypeScheme.

        The name of the issue type scheme.

        :param name: The name of this IssueTypeScheme.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
