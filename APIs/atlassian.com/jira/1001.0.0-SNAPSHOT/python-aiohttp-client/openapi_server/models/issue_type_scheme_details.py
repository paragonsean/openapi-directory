# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTypeSchemeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_issue_type_id: str=None, description: str=None, issue_type_ids: List[str]=None, name: str=None):
        """IssueTypeSchemeDetails - a model defined in OpenAPI

        :param default_issue_type_id: The default_issue_type_id of this IssueTypeSchemeDetails.
        :param description: The description of this IssueTypeSchemeDetails.
        :param issue_type_ids: The issue_type_ids of this IssueTypeSchemeDetails.
        :param name: The name of this IssueTypeSchemeDetails.
        """
        self.openapi_types = {
            'default_issue_type_id': str,
            'description': str,
            'issue_type_ids': List[str],
            'name': str
        }

        self.attribute_map = {
            'default_issue_type_id': 'defaultIssueTypeId',
            'description': 'description',
            'issue_type_ids': 'issueTypeIds',
            'name': 'name'
        }

        self._default_issue_type_id = default_issue_type_id
        self._description = description
        self._issue_type_ids = issue_type_ids
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTypeSchemeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTypeSchemeDetails of this IssueTypeSchemeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_issue_type_id(self):
        """Gets the default_issue_type_id of this IssueTypeSchemeDetails.

        The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.

        :return: The default_issue_type_id of this IssueTypeSchemeDetails.
        :rtype: str
        """
        return self._default_issue_type_id

    @default_issue_type_id.setter
    def default_issue_type_id(self, default_issue_type_id):
        """Sets the default_issue_type_id of this IssueTypeSchemeDetails.

        The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.

        :param default_issue_type_id: The default_issue_type_id of this IssueTypeSchemeDetails.
        :type default_issue_type_id: str
        """

        self._default_issue_type_id = default_issue_type_id

    @property
    def description(self):
        """Gets the description of this IssueTypeSchemeDetails.

        The description of the issue type scheme. The maximum length is 4000 characters.

        :return: The description of this IssueTypeSchemeDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueTypeSchemeDetails.

        The description of the issue type scheme. The maximum length is 4000 characters.

        :param description: The description of this IssueTypeSchemeDetails.
        :type description: str
        """

        self._description = description

    @property
    def issue_type_ids(self):
        """Gets the issue_type_ids of this IssueTypeSchemeDetails.

        The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.

        :return: The issue_type_ids of this IssueTypeSchemeDetails.
        :rtype: List[str]
        """
        return self._issue_type_ids

    @issue_type_ids.setter
    def issue_type_ids(self, issue_type_ids):
        """Sets the issue_type_ids of this IssueTypeSchemeDetails.

        The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.

        :param issue_type_ids: The issue_type_ids of this IssueTypeSchemeDetails.
        :type issue_type_ids: List[str]
        """
        if issue_type_ids is None:
            raise ValueError("Invalid value for `issue_type_ids`, must not be `None`")

        self._issue_type_ids = issue_type_ids

    @property
    def name(self):
        """Gets the name of this IssueTypeSchemeDetails.

        The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.

        :return: The name of this IssueTypeSchemeDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTypeSchemeDetails.

        The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.

        :param name: The name of this IssueTypeSchemeDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
