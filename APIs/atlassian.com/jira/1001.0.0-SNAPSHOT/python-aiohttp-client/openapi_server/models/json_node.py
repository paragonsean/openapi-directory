# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array: bool=None, big_decimal: bool=None, big_integer: bool=None, big_integer_value: int=None, binary: bool=None, binary_value: List[str]=None, boolean: bool=None, boolean_value: bool=None, container_node: bool=None, decimal_value: float=None, double: bool=None, double_value: float=None, elements: object=None, field_names: object=None, fields: object=None, floating_point_number: bool=None, int: bool=None, int_value: int=None, integral_number: bool=None, long: bool=None, long_value: int=None, missing_node: bool=None, null: bool=None, number: bool=None, number_type: str=None, number_value: float=None, object: bool=None, pojo: bool=None, text_value: str=None, textual: bool=None, value_as_boolean: bool=None, value_as_double: float=None, value_as_int: int=None, value_as_long: int=None, value_as_text: str=None, value_node: bool=None):
        """JsonNode - a model defined in OpenAPI

        :param array: The array of this JsonNode.
        :param big_decimal: The big_decimal of this JsonNode.
        :param big_integer: The big_integer of this JsonNode.
        :param big_integer_value: The big_integer_value of this JsonNode.
        :param binary: The binary of this JsonNode.
        :param binary_value: The binary_value of this JsonNode.
        :param boolean: The boolean of this JsonNode.
        :param boolean_value: The boolean_value of this JsonNode.
        :param container_node: The container_node of this JsonNode.
        :param decimal_value: The decimal_value of this JsonNode.
        :param double: The double of this JsonNode.
        :param double_value: The double_value of this JsonNode.
        :param elements: The elements of this JsonNode.
        :param field_names: The field_names of this JsonNode.
        :param fields: The fields of this JsonNode.
        :param floating_point_number: The floating_point_number of this JsonNode.
        :param int: The int of this JsonNode.
        :param int_value: The int_value of this JsonNode.
        :param integral_number: The integral_number of this JsonNode.
        :param long: The long of this JsonNode.
        :param long_value: The long_value of this JsonNode.
        :param missing_node: The missing_node of this JsonNode.
        :param null: The null of this JsonNode.
        :param number: The number of this JsonNode.
        :param number_type: The number_type of this JsonNode.
        :param number_value: The number_value of this JsonNode.
        :param object: The object of this JsonNode.
        :param pojo: The pojo of this JsonNode.
        :param text_value: The text_value of this JsonNode.
        :param textual: The textual of this JsonNode.
        :param value_as_boolean: The value_as_boolean of this JsonNode.
        :param value_as_double: The value_as_double of this JsonNode.
        :param value_as_int: The value_as_int of this JsonNode.
        :param value_as_long: The value_as_long of this JsonNode.
        :param value_as_text: The value_as_text of this JsonNode.
        :param value_node: The value_node of this JsonNode.
        """
        self.openapi_types = {
            'array': bool,
            'big_decimal': bool,
            'big_integer': bool,
            'big_integer_value': int,
            'binary': bool,
            'binary_value': List[str],
            'boolean': bool,
            'boolean_value': bool,
            'container_node': bool,
            'decimal_value': float,
            'double': bool,
            'double_value': float,
            'elements': object,
            'field_names': object,
            'fields': object,
            'floating_point_number': bool,
            'int': bool,
            'int_value': int,
            'integral_number': bool,
            'long': bool,
            'long_value': int,
            'missing_node': bool,
            'null': bool,
            'number': bool,
            'number_type': str,
            'number_value': float,
            'object': bool,
            'pojo': bool,
            'text_value': str,
            'textual': bool,
            'value_as_boolean': bool,
            'value_as_double': float,
            'value_as_int': int,
            'value_as_long': int,
            'value_as_text': str,
            'value_node': bool
        }

        self.attribute_map = {
            'array': 'array',
            'big_decimal': 'bigDecimal',
            'big_integer': 'bigInteger',
            'big_integer_value': 'bigIntegerValue',
            'binary': 'binary',
            'binary_value': 'binaryValue',
            'boolean': 'boolean',
            'boolean_value': 'booleanValue',
            'container_node': 'containerNode',
            'decimal_value': 'decimalValue',
            'double': 'double',
            'double_value': 'doubleValue',
            'elements': 'elements',
            'field_names': 'fieldNames',
            'fields': 'fields',
            'floating_point_number': 'floatingPointNumber',
            'int': 'int',
            'int_value': 'intValue',
            'integral_number': 'integralNumber',
            'long': 'long',
            'long_value': 'longValue',
            'missing_node': 'missingNode',
            'null': 'null',
            'number': 'number',
            'number_type': 'numberType',
            'number_value': 'numberValue',
            'object': 'object',
            'pojo': 'pojo',
            'text_value': 'textValue',
            'textual': 'textual',
            'value_as_boolean': 'valueAsBoolean',
            'value_as_double': 'valueAsDouble',
            'value_as_int': 'valueAsInt',
            'value_as_long': 'valueAsLong',
            'value_as_text': 'valueAsText',
            'value_node': 'valueNode'
        }

        self._array = array
        self._big_decimal = big_decimal
        self._big_integer = big_integer
        self._big_integer_value = big_integer_value
        self._binary = binary
        self._binary_value = binary_value
        self._boolean = boolean
        self._boolean_value = boolean_value
        self._container_node = container_node
        self._decimal_value = decimal_value
        self._double = double
        self._double_value = double_value
        self._elements = elements
        self._field_names = field_names
        self._fields = fields
        self._floating_point_number = floating_point_number
        self._int = int
        self._int_value = int_value
        self._integral_number = integral_number
        self._long = long
        self._long_value = long_value
        self._missing_node = missing_node
        self._null = null
        self._number = number
        self._number_type = number_type
        self._number_value = number_value
        self._object = object
        self._pojo = pojo
        self._text_value = text_value
        self._textual = textual
        self._value_as_boolean = value_as_boolean
        self._value_as_double = value_as_double
        self._value_as_int = value_as_int
        self._value_as_long = value_as_long
        self._value_as_text = value_as_text
        self._value_node = value_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonNode of this JsonNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array(self):
        """Gets the array of this JsonNode.


        :return: The array of this JsonNode.
        :rtype: bool
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this JsonNode.


        :param array: The array of this JsonNode.
        :type array: bool
        """

        self._array = array

    @property
    def big_decimal(self):
        """Gets the big_decimal of this JsonNode.


        :return: The big_decimal of this JsonNode.
        :rtype: bool
        """
        return self._big_decimal

    @big_decimal.setter
    def big_decimal(self, big_decimal):
        """Sets the big_decimal of this JsonNode.


        :param big_decimal: The big_decimal of this JsonNode.
        :type big_decimal: bool
        """

        self._big_decimal = big_decimal

    @property
    def big_integer(self):
        """Gets the big_integer of this JsonNode.


        :return: The big_integer of this JsonNode.
        :rtype: bool
        """
        return self._big_integer

    @big_integer.setter
    def big_integer(self, big_integer):
        """Sets the big_integer of this JsonNode.


        :param big_integer: The big_integer of this JsonNode.
        :type big_integer: bool
        """

        self._big_integer = big_integer

    @property
    def big_integer_value(self):
        """Gets the big_integer_value of this JsonNode.


        :return: The big_integer_value of this JsonNode.
        :rtype: int
        """
        return self._big_integer_value

    @big_integer_value.setter
    def big_integer_value(self, big_integer_value):
        """Sets the big_integer_value of this JsonNode.


        :param big_integer_value: The big_integer_value of this JsonNode.
        :type big_integer_value: int
        """

        self._big_integer_value = big_integer_value

    @property
    def binary(self):
        """Gets the binary of this JsonNode.


        :return: The binary of this JsonNode.
        :rtype: bool
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this JsonNode.


        :param binary: The binary of this JsonNode.
        :type binary: bool
        """

        self._binary = binary

    @property
    def binary_value(self):
        """Gets the binary_value of this JsonNode.


        :return: The binary_value of this JsonNode.
        :rtype: List[str]
        """
        return self._binary_value

    @binary_value.setter
    def binary_value(self, binary_value):
        """Sets the binary_value of this JsonNode.


        :param binary_value: The binary_value of this JsonNode.
        :type binary_value: List[str]
        """

        self._binary_value = binary_value

    @property
    def boolean(self):
        """Gets the boolean of this JsonNode.


        :return: The boolean of this JsonNode.
        :rtype: bool
        """
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        """Sets the boolean of this JsonNode.


        :param boolean: The boolean of this JsonNode.
        :type boolean: bool
        """

        self._boolean = boolean

    @property
    def boolean_value(self):
        """Gets the boolean_value of this JsonNode.


        :return: The boolean_value of this JsonNode.
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """Sets the boolean_value of this JsonNode.


        :param boolean_value: The boolean_value of this JsonNode.
        :type boolean_value: bool
        """

        self._boolean_value = boolean_value

    @property
    def container_node(self):
        """Gets the container_node of this JsonNode.


        :return: The container_node of this JsonNode.
        :rtype: bool
        """
        return self._container_node

    @container_node.setter
    def container_node(self, container_node):
        """Sets the container_node of this JsonNode.


        :param container_node: The container_node of this JsonNode.
        :type container_node: bool
        """

        self._container_node = container_node

    @property
    def decimal_value(self):
        """Gets the decimal_value of this JsonNode.


        :return: The decimal_value of this JsonNode.
        :rtype: float
        """
        return self._decimal_value

    @decimal_value.setter
    def decimal_value(self, decimal_value):
        """Sets the decimal_value of this JsonNode.


        :param decimal_value: The decimal_value of this JsonNode.
        :type decimal_value: float
        """

        self._decimal_value = decimal_value

    @property
    def double(self):
        """Gets the double of this JsonNode.


        :return: The double of this JsonNode.
        :rtype: bool
        """
        return self._double

    @double.setter
    def double(self, double):
        """Sets the double of this JsonNode.


        :param double: The double of this JsonNode.
        :type double: bool
        """

        self._double = double

    @property
    def double_value(self):
        """Gets the double_value of this JsonNode.


        :return: The double_value of this JsonNode.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this JsonNode.


        :param double_value: The double_value of this JsonNode.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def elements(self):
        """Gets the elements of this JsonNode.


        :return: The elements of this JsonNode.
        :rtype: object
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this JsonNode.


        :param elements: The elements of this JsonNode.
        :type elements: object
        """

        self._elements = elements

    @property
    def field_names(self):
        """Gets the field_names of this JsonNode.


        :return: The field_names of this JsonNode.
        :rtype: object
        """
        return self._field_names

    @field_names.setter
    def field_names(self, field_names):
        """Sets the field_names of this JsonNode.


        :param field_names: The field_names of this JsonNode.
        :type field_names: object
        """

        self._field_names = field_names

    @property
    def fields(self):
        """Gets the fields of this JsonNode.


        :return: The fields of this JsonNode.
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this JsonNode.


        :param fields: The fields of this JsonNode.
        :type fields: object
        """

        self._fields = fields

    @property
    def floating_point_number(self):
        """Gets the floating_point_number of this JsonNode.


        :return: The floating_point_number of this JsonNode.
        :rtype: bool
        """
        return self._floating_point_number

    @floating_point_number.setter
    def floating_point_number(self, floating_point_number):
        """Sets the floating_point_number of this JsonNode.


        :param floating_point_number: The floating_point_number of this JsonNode.
        :type floating_point_number: bool
        """

        self._floating_point_number = floating_point_number

    @property
    def int(self):
        """Gets the int of this JsonNode.


        :return: The int of this JsonNode.
        :rtype: bool
        """
        return self._int

    @int.setter
    def int(self, int):
        """Sets the int of this JsonNode.


        :param int: The int of this JsonNode.
        :type int: bool
        """

        self._int = int

    @property
    def int_value(self):
        """Gets the int_value of this JsonNode.


        :return: The int_value of this JsonNode.
        :rtype: int
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this JsonNode.


        :param int_value: The int_value of this JsonNode.
        :type int_value: int
        """

        self._int_value = int_value

    @property
    def integral_number(self):
        """Gets the integral_number of this JsonNode.


        :return: The integral_number of this JsonNode.
        :rtype: bool
        """
        return self._integral_number

    @integral_number.setter
    def integral_number(self, integral_number):
        """Sets the integral_number of this JsonNode.


        :param integral_number: The integral_number of this JsonNode.
        :type integral_number: bool
        """

        self._integral_number = integral_number

    @property
    def long(self):
        """Gets the long of this JsonNode.


        :return: The long of this JsonNode.
        :rtype: bool
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this JsonNode.


        :param long: The long of this JsonNode.
        :type long: bool
        """

        self._long = long

    @property
    def long_value(self):
        """Gets the long_value of this JsonNode.


        :return: The long_value of this JsonNode.
        :rtype: int
        """
        return self._long_value

    @long_value.setter
    def long_value(self, long_value):
        """Sets the long_value of this JsonNode.


        :param long_value: The long_value of this JsonNode.
        :type long_value: int
        """

        self._long_value = long_value

    @property
    def missing_node(self):
        """Gets the missing_node of this JsonNode.


        :return: The missing_node of this JsonNode.
        :rtype: bool
        """
        return self._missing_node

    @missing_node.setter
    def missing_node(self, missing_node):
        """Sets the missing_node of this JsonNode.


        :param missing_node: The missing_node of this JsonNode.
        :type missing_node: bool
        """

        self._missing_node = missing_node

    @property
    def null(self):
        """Gets the null of this JsonNode.


        :return: The null of this JsonNode.
        :rtype: bool
        """
        return self._null

    @null.setter
    def null(self, null):
        """Sets the null of this JsonNode.


        :param null: The null of this JsonNode.
        :type null: bool
        """

        self._null = null

    @property
    def number(self):
        """Gets the number of this JsonNode.


        :return: The number of this JsonNode.
        :rtype: bool
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this JsonNode.


        :param number: The number of this JsonNode.
        :type number: bool
        """

        self._number = number

    @property
    def number_type(self):
        """Gets the number_type of this JsonNode.


        :return: The number_type of this JsonNode.
        :rtype: str
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this JsonNode.


        :param number_type: The number_type of this JsonNode.
        :type number_type: str
        """
        allowed_values = ["INT", "LONG", "BIG_INTEGER", "FLOAT", "DOUBLE", "BIG_DECIMAL"]  # noqa: E501
        if number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_type` ({0}), must be one of {1}"
                .format(number_type, allowed_values)
            )

        self._number_type = number_type

    @property
    def number_value(self):
        """Gets the number_value of this JsonNode.


        :return: The number_value of this JsonNode.
        :rtype: float
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this JsonNode.


        :param number_value: The number_value of this JsonNode.
        :type number_value: float
        """

        self._number_value = number_value

    @property
    def object(self):
        """Gets the object of this JsonNode.


        :return: The object of this JsonNode.
        :rtype: bool
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this JsonNode.


        :param object: The object of this JsonNode.
        :type object: bool
        """

        self._object = object

    @property
    def pojo(self):
        """Gets the pojo of this JsonNode.


        :return: The pojo of this JsonNode.
        :rtype: bool
        """
        return self._pojo

    @pojo.setter
    def pojo(self, pojo):
        """Sets the pojo of this JsonNode.


        :param pojo: The pojo of this JsonNode.
        :type pojo: bool
        """

        self._pojo = pojo

    @property
    def text_value(self):
        """Gets the text_value of this JsonNode.


        :return: The text_value of this JsonNode.
        :rtype: str
        """
        return self._text_value

    @text_value.setter
    def text_value(self, text_value):
        """Sets the text_value of this JsonNode.


        :param text_value: The text_value of this JsonNode.
        :type text_value: str
        """

        self._text_value = text_value

    @property
    def textual(self):
        """Gets the textual of this JsonNode.


        :return: The textual of this JsonNode.
        :rtype: bool
        """
        return self._textual

    @textual.setter
    def textual(self, textual):
        """Sets the textual of this JsonNode.


        :param textual: The textual of this JsonNode.
        :type textual: bool
        """

        self._textual = textual

    @property
    def value_as_boolean(self):
        """Gets the value_as_boolean of this JsonNode.


        :return: The value_as_boolean of this JsonNode.
        :rtype: bool
        """
        return self._value_as_boolean

    @value_as_boolean.setter
    def value_as_boolean(self, value_as_boolean):
        """Sets the value_as_boolean of this JsonNode.


        :param value_as_boolean: The value_as_boolean of this JsonNode.
        :type value_as_boolean: bool
        """

        self._value_as_boolean = value_as_boolean

    @property
    def value_as_double(self):
        """Gets the value_as_double of this JsonNode.


        :return: The value_as_double of this JsonNode.
        :rtype: float
        """
        return self._value_as_double

    @value_as_double.setter
    def value_as_double(self, value_as_double):
        """Sets the value_as_double of this JsonNode.


        :param value_as_double: The value_as_double of this JsonNode.
        :type value_as_double: float
        """

        self._value_as_double = value_as_double

    @property
    def value_as_int(self):
        """Gets the value_as_int of this JsonNode.


        :return: The value_as_int of this JsonNode.
        :rtype: int
        """
        return self._value_as_int

    @value_as_int.setter
    def value_as_int(self, value_as_int):
        """Sets the value_as_int of this JsonNode.


        :param value_as_int: The value_as_int of this JsonNode.
        :type value_as_int: int
        """

        self._value_as_int = value_as_int

    @property
    def value_as_long(self):
        """Gets the value_as_long of this JsonNode.


        :return: The value_as_long of this JsonNode.
        :rtype: int
        """
        return self._value_as_long

    @value_as_long.setter
    def value_as_long(self, value_as_long):
        """Sets the value_as_long of this JsonNode.


        :param value_as_long: The value_as_long of this JsonNode.
        :type value_as_long: int
        """

        self._value_as_long = value_as_long

    @property
    def value_as_text(self):
        """Gets the value_as_text of this JsonNode.


        :return: The value_as_text of this JsonNode.
        :rtype: str
        """
        return self._value_as_text

    @value_as_text.setter
    def value_as_text(self, value_as_text):
        """Sets the value_as_text of this JsonNode.


        :param value_as_text: The value_as_text of this JsonNode.
        :type value_as_text: str
        """

        self._value_as_text = value_as_text

    @property
    def value_node(self):
        """Gets the value_node of this JsonNode.


        :return: The value_node of this JsonNode.
        :rtype: bool
        """
        return self._value_node

    @value_node.setter
    def value_node(self, value_node):
        """Sets the value_node of this JsonNode.


        :param value_node: The value_node of this JsonNode.
        :type value_node: bool
        """

        self._value_node = value_node
