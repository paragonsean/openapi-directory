# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Votes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_voted: bool=None, _self: str=None, voters: List[User]=None, votes: int=None):
        """Votes - a model defined in OpenAPI

        :param has_voted: The has_voted of this Votes.
        :param _self: The _self of this Votes.
        :param voters: The voters of this Votes.
        :param votes: The votes of this Votes.
        """
        self.openapi_types = {
            'has_voted': bool,
            '_self': str,
            'voters': List[User],
            'votes': int
        }

        self.attribute_map = {
            'has_voted': 'hasVoted',
            '_self': 'self',
            'voters': 'voters',
            'votes': 'votes'
        }

        self._has_voted = has_voted
        self.__self = _self
        self._voters = voters
        self._votes = votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Votes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Votes of this Votes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_voted(self):
        """Gets the has_voted of this Votes.

        Whether the user making this request has voted on the issue.

        :return: The has_voted of this Votes.
        :rtype: bool
        """
        return self._has_voted

    @has_voted.setter
    def has_voted(self, has_voted):
        """Sets the has_voted of this Votes.

        Whether the user making this request has voted on the issue.

        :param has_voted: The has_voted of this Votes.
        :type has_voted: bool
        """

        self._has_voted = has_voted

    @property
    def _self(self):
        """Gets the _self of this Votes.

        The URL of these issue vote details.

        :return: The _self of this Votes.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Votes.

        The URL of these issue vote details.

        :param _self: The _self of this Votes.
        :type _self: str
        """

        self.__self = _self

    @property
    def voters(self):
        """Gets the voters of this Votes.

        List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.

        :return: The voters of this Votes.
        :rtype: List[User]
        """
        return self._voters

    @voters.setter
    def voters(self, voters):
        """Sets the voters of this Votes.

        List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.

        :param voters: The voters of this Votes.
        :type voters: List[User]
        """

        self._voters = voters

    @property
    def votes(self):
        """Gets the votes of this Votes.

        The number of votes on the issue.

        :return: The votes of this Votes.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this Votes.

        The number of votes on the issue.

        :param votes: The votes of this Votes.
        :type votes: int
        """

        self._votes = votes
