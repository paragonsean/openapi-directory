# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.page_bean_issue_type_screen_scheme import PageBeanIssueTypeScreenScheme
from openapi_server.models.screen_types import ScreenTypes
from openapi_server import util


class ScreenScheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, issue_type_screen_schemes: PageBeanIssueTypeScreenScheme=None, name: str=None, screens: ScreenTypes=None):
        """ScreenScheme - a model defined in OpenAPI

        :param description: The description of this ScreenScheme.
        :param id: The id of this ScreenScheme.
        :param issue_type_screen_schemes: The issue_type_screen_schemes of this ScreenScheme.
        :param name: The name of this ScreenScheme.
        :param screens: The screens of this ScreenScheme.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'issue_type_screen_schemes': PageBeanIssueTypeScreenScheme,
            'name': str,
            'screens': ScreenTypes
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'issue_type_screen_schemes': 'issueTypeScreenSchemes',
            'name': 'name',
            'screens': 'screens'
        }

        self._description = description
        self._id = id
        self._issue_type_screen_schemes = issue_type_screen_schemes
        self._name = name
        self._screens = screens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScreenScheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScreenScheme of this ScreenScheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ScreenScheme.

        The description of the screen scheme.

        :return: The description of this ScreenScheme.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScreenScheme.

        The description of the screen scheme.

        :param description: The description of this ScreenScheme.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ScreenScheme.

        The ID of the screen scheme.

        :return: The id of this ScreenScheme.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScreenScheme.

        The ID of the screen scheme.

        :param id: The id of this ScreenScheme.
        :type id: int
        """

        self._id = id

    @property
    def issue_type_screen_schemes(self):
        """Gets the issue_type_screen_schemes of this ScreenScheme.

        Details of the issue type screen schemes associated with the screen scheme.

        :return: The issue_type_screen_schemes of this ScreenScheme.
        :rtype: PageBeanIssueTypeScreenScheme
        """
        return self._issue_type_screen_schemes

    @issue_type_screen_schemes.setter
    def issue_type_screen_schemes(self, issue_type_screen_schemes):
        """Sets the issue_type_screen_schemes of this ScreenScheme.

        Details of the issue type screen schemes associated with the screen scheme.

        :param issue_type_screen_schemes: The issue_type_screen_schemes of this ScreenScheme.
        :type issue_type_screen_schemes: PageBeanIssueTypeScreenScheme
        """

        self._issue_type_screen_schemes = issue_type_screen_schemes

    @property
    def name(self):
        """Gets the name of this ScreenScheme.

        The name of the screen scheme.

        :return: The name of this ScreenScheme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScreenScheme.

        The name of the screen scheme.

        :param name: The name of this ScreenScheme.
        :type name: str
        """

        self._name = name

    @property
    def screens(self):
        """Gets the screens of this ScreenScheme.

        The IDs of the screens for the screen types of the screen scheme.

        :return: The screens of this ScreenScheme.
        :rtype: ScreenTypes
        """
        return self._screens

    @screens.setter
    def screens(self, screens):
        """Sets the screens of this ScreenScheme.

        The IDs of the screens for the screen types of the screen scheme.

        :param screens: The screens of this ScreenScheme.
        :type screens: ScreenTypes
        """

        self._screens = screens
