# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldConfigurationIssueTypeItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_configuration_id: str=None, field_configuration_scheme_id: str=None, issue_type_id: str=None):
        """FieldConfigurationIssueTypeItem - a model defined in OpenAPI

        :param field_configuration_id: The field_configuration_id of this FieldConfigurationIssueTypeItem.
        :param field_configuration_scheme_id: The field_configuration_scheme_id of this FieldConfigurationIssueTypeItem.
        :param issue_type_id: The issue_type_id of this FieldConfigurationIssueTypeItem.
        """
        self.openapi_types = {
            'field_configuration_id': str,
            'field_configuration_scheme_id': str,
            'issue_type_id': str
        }

        self.attribute_map = {
            'field_configuration_id': 'fieldConfigurationId',
            'field_configuration_scheme_id': 'fieldConfigurationSchemeId',
            'issue_type_id': 'issueTypeId'
        }

        self._field_configuration_id = field_configuration_id
        self._field_configuration_scheme_id = field_configuration_scheme_id
        self._issue_type_id = issue_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldConfigurationIssueTypeItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldConfigurationIssueTypeItem of this FieldConfigurationIssueTypeItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_configuration_id(self):
        """Gets the field_configuration_id of this FieldConfigurationIssueTypeItem.

        The ID of the field configuration.

        :return: The field_configuration_id of this FieldConfigurationIssueTypeItem.
        :rtype: str
        """
        return self._field_configuration_id

    @field_configuration_id.setter
    def field_configuration_id(self, field_configuration_id):
        """Sets the field_configuration_id of this FieldConfigurationIssueTypeItem.

        The ID of the field configuration.

        :param field_configuration_id: The field_configuration_id of this FieldConfigurationIssueTypeItem.
        :type field_configuration_id: str
        """
        if field_configuration_id is None:
            raise ValueError("Invalid value for `field_configuration_id`, must not be `None`")

        self._field_configuration_id = field_configuration_id

    @property
    def field_configuration_scheme_id(self):
        """Gets the field_configuration_scheme_id of this FieldConfigurationIssueTypeItem.

        The ID of the field configuration scheme.

        :return: The field_configuration_scheme_id of this FieldConfigurationIssueTypeItem.
        :rtype: str
        """
        return self._field_configuration_scheme_id

    @field_configuration_scheme_id.setter
    def field_configuration_scheme_id(self, field_configuration_scheme_id):
        """Sets the field_configuration_scheme_id of this FieldConfigurationIssueTypeItem.

        The ID of the field configuration scheme.

        :param field_configuration_scheme_id: The field_configuration_scheme_id of this FieldConfigurationIssueTypeItem.
        :type field_configuration_scheme_id: str
        """
        if field_configuration_scheme_id is None:
            raise ValueError("Invalid value for `field_configuration_scheme_id`, must not be `None`")

        self._field_configuration_scheme_id = field_configuration_scheme_id

    @property
    def issue_type_id(self):
        """Gets the issue_type_id of this FieldConfigurationIssueTypeItem.

        The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.

        :return: The issue_type_id of this FieldConfigurationIssueTypeItem.
        :rtype: str
        """
        return self._issue_type_id

    @issue_type_id.setter
    def issue_type_id(self, issue_type_id):
        """Sets the issue_type_id of this FieldConfigurationIssueTypeItem.

        The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.

        :param issue_type_id: The issue_type_id of this FieldConfigurationIssueTypeItem.
        :type issue_type_id: str
        """
        if issue_type_id is None:
            raise ValueError("Invalid value for `issue_type_id`, must not be `None`")

        self._issue_type_id = issue_type_id
