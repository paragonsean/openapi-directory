# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_tracking_configuration import TimeTrackingConfiguration
from openapi_server import util


class Configuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments_enabled: bool=None, issue_linking_enabled: bool=None, sub_tasks_enabled: bool=None, time_tracking_configuration: TimeTrackingConfiguration=None, time_tracking_enabled: bool=None, unassigned_issues_allowed: bool=None, voting_enabled: bool=None, watching_enabled: bool=None):
        """Configuration - a model defined in OpenAPI

        :param attachments_enabled: The attachments_enabled of this Configuration.
        :param issue_linking_enabled: The issue_linking_enabled of this Configuration.
        :param sub_tasks_enabled: The sub_tasks_enabled of this Configuration.
        :param time_tracking_configuration: The time_tracking_configuration of this Configuration.
        :param time_tracking_enabled: The time_tracking_enabled of this Configuration.
        :param unassigned_issues_allowed: The unassigned_issues_allowed of this Configuration.
        :param voting_enabled: The voting_enabled of this Configuration.
        :param watching_enabled: The watching_enabled of this Configuration.
        """
        self.openapi_types = {
            'attachments_enabled': bool,
            'issue_linking_enabled': bool,
            'sub_tasks_enabled': bool,
            'time_tracking_configuration': TimeTrackingConfiguration,
            'time_tracking_enabled': bool,
            'unassigned_issues_allowed': bool,
            'voting_enabled': bool,
            'watching_enabled': bool
        }

        self.attribute_map = {
            'attachments_enabled': 'attachmentsEnabled',
            'issue_linking_enabled': 'issueLinkingEnabled',
            'sub_tasks_enabled': 'subTasksEnabled',
            'time_tracking_configuration': 'timeTrackingConfiguration',
            'time_tracking_enabled': 'timeTrackingEnabled',
            'unassigned_issues_allowed': 'unassignedIssuesAllowed',
            'voting_enabled': 'votingEnabled',
            'watching_enabled': 'watchingEnabled'
        }

        self._attachments_enabled = attachments_enabled
        self._issue_linking_enabled = issue_linking_enabled
        self._sub_tasks_enabled = sub_tasks_enabled
        self._time_tracking_configuration = time_tracking_configuration
        self._time_tracking_enabled = time_tracking_enabled
        self._unassigned_issues_allowed = unassigned_issues_allowed
        self._voting_enabled = voting_enabled
        self._watching_enabled = watching_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Configuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Configuration of this Configuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments_enabled(self):
        """Gets the attachments_enabled of this Configuration.

        Whether the ability to add attachments to issues is enabled.

        :return: The attachments_enabled of this Configuration.
        :rtype: bool
        """
        return self._attachments_enabled

    @attachments_enabled.setter
    def attachments_enabled(self, attachments_enabled):
        """Sets the attachments_enabled of this Configuration.

        Whether the ability to add attachments to issues is enabled.

        :param attachments_enabled: The attachments_enabled of this Configuration.
        :type attachments_enabled: bool
        """

        self._attachments_enabled = attachments_enabled

    @property
    def issue_linking_enabled(self):
        """Gets the issue_linking_enabled of this Configuration.

        Whether the ability to link issues is enabled.

        :return: The issue_linking_enabled of this Configuration.
        :rtype: bool
        """
        return self._issue_linking_enabled

    @issue_linking_enabled.setter
    def issue_linking_enabled(self, issue_linking_enabled):
        """Sets the issue_linking_enabled of this Configuration.

        Whether the ability to link issues is enabled.

        :param issue_linking_enabled: The issue_linking_enabled of this Configuration.
        :type issue_linking_enabled: bool
        """

        self._issue_linking_enabled = issue_linking_enabled

    @property
    def sub_tasks_enabled(self):
        """Gets the sub_tasks_enabled of this Configuration.

        Whether the ability to create subtasks for issues is enabled.

        :return: The sub_tasks_enabled of this Configuration.
        :rtype: bool
        """
        return self._sub_tasks_enabled

    @sub_tasks_enabled.setter
    def sub_tasks_enabled(self, sub_tasks_enabled):
        """Sets the sub_tasks_enabled of this Configuration.

        Whether the ability to create subtasks for issues is enabled.

        :param sub_tasks_enabled: The sub_tasks_enabled of this Configuration.
        :type sub_tasks_enabled: bool
        """

        self._sub_tasks_enabled = sub_tasks_enabled

    @property
    def time_tracking_configuration(self):
        """Gets the time_tracking_configuration of this Configuration.

        The configuration of time tracking.

        :return: The time_tracking_configuration of this Configuration.
        :rtype: TimeTrackingConfiguration
        """
        return self._time_tracking_configuration

    @time_tracking_configuration.setter
    def time_tracking_configuration(self, time_tracking_configuration):
        """Sets the time_tracking_configuration of this Configuration.

        The configuration of time tracking.

        :param time_tracking_configuration: The time_tracking_configuration of this Configuration.
        :type time_tracking_configuration: TimeTrackingConfiguration
        """

        self._time_tracking_configuration = time_tracking_configuration

    @property
    def time_tracking_enabled(self):
        """Gets the time_tracking_enabled of this Configuration.

        Whether the ability to track time is enabled. This property is deprecated.

        :return: The time_tracking_enabled of this Configuration.
        :rtype: bool
        """
        return self._time_tracking_enabled

    @time_tracking_enabled.setter
    def time_tracking_enabled(self, time_tracking_enabled):
        """Sets the time_tracking_enabled of this Configuration.

        Whether the ability to track time is enabled. This property is deprecated.

        :param time_tracking_enabled: The time_tracking_enabled of this Configuration.
        :type time_tracking_enabled: bool
        """

        self._time_tracking_enabled = time_tracking_enabled

    @property
    def unassigned_issues_allowed(self):
        """Gets the unassigned_issues_allowed of this Configuration.

        Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

        :return: The unassigned_issues_allowed of this Configuration.
        :rtype: bool
        """
        return self._unassigned_issues_allowed

    @unassigned_issues_allowed.setter
    def unassigned_issues_allowed(self, unassigned_issues_allowed):
        """Sets the unassigned_issues_allowed of this Configuration.

        Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

        :param unassigned_issues_allowed: The unassigned_issues_allowed of this Configuration.
        :type unassigned_issues_allowed: bool
        """

        self._unassigned_issues_allowed = unassigned_issues_allowed

    @property
    def voting_enabled(self):
        """Gets the voting_enabled of this Configuration.

        Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

        :return: The voting_enabled of this Configuration.
        :rtype: bool
        """
        return self._voting_enabled

    @voting_enabled.setter
    def voting_enabled(self, voting_enabled):
        """Sets the voting_enabled of this Configuration.

        Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

        :param voting_enabled: The voting_enabled of this Configuration.
        :type voting_enabled: bool
        """

        self._voting_enabled = voting_enabled

    @property
    def watching_enabled(self):
        """Gets the watching_enabled of this Configuration.

        Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

        :return: The watching_enabled of this Configuration.
        :rtype: bool
        """
        return self._watching_enabled

    @watching_enabled.setter
    def watching_enabled(self, watching_enabled):
        """Sets the watching_enabled of this Configuration.

        Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

        :param watching_enabled: The watching_enabled of this Configuration.
        :type watching_enabled: bool
        """

        self._watching_enabled = watching_enabled
