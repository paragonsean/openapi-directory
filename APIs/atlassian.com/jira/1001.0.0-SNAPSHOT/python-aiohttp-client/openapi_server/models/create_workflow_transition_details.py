# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_workflow_transition_rules_details import CreateWorkflowTransitionRulesDetails
from openapi_server.models.create_workflow_transition_screen_details import CreateWorkflowTransitionScreenDetails
from openapi_server import util


class CreateWorkflowTransitionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, _from: List[str]=None, name: str=None, properties: Dict[str, str]=None, rules: CreateWorkflowTransitionRulesDetails=None, screen: CreateWorkflowTransitionScreenDetails=None, to: str=None, type: str=None):
        """CreateWorkflowTransitionDetails - a model defined in OpenAPI

        :param description: The description of this CreateWorkflowTransitionDetails.
        :param _from: The _from of this CreateWorkflowTransitionDetails.
        :param name: The name of this CreateWorkflowTransitionDetails.
        :param properties: The properties of this CreateWorkflowTransitionDetails.
        :param rules: The rules of this CreateWorkflowTransitionDetails.
        :param screen: The screen of this CreateWorkflowTransitionDetails.
        :param to: The to of this CreateWorkflowTransitionDetails.
        :param type: The type of this CreateWorkflowTransitionDetails.
        """
        self.openapi_types = {
            'description': str,
            '_from': List[str],
            'name': str,
            'properties': Dict[str, str],
            'rules': CreateWorkflowTransitionRulesDetails,
            'screen': CreateWorkflowTransitionScreenDetails,
            'to': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            '_from': 'from',
            'name': 'name',
            'properties': 'properties',
            'rules': 'rules',
            'screen': 'screen',
            'to': 'to',
            'type': 'type'
        }

        self._description = description
        self.__from = _from
        self._name = name
        self._properties = properties
        self._rules = rules
        self._screen = screen
        self._to = to
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkflowTransitionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkflowTransitionDetails of this CreateWorkflowTransitionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateWorkflowTransitionDetails.

        The description of the transition. The maximum length is 1000 characters.

        :return: The description of this CreateWorkflowTransitionDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWorkflowTransitionDetails.

        The description of the transition. The maximum length is 1000 characters.

        :param description: The description of this CreateWorkflowTransitionDetails.
        :type description: str
        """

        self._description = description

    @property
    def _from(self):
        """Gets the _from of this CreateWorkflowTransitionDetails.

        The statuses the transition can start from.

        :return: The _from of this CreateWorkflowTransitionDetails.
        :rtype: List[str]
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CreateWorkflowTransitionDetails.

        The statuses the transition can start from.

        :param _from: The _from of this CreateWorkflowTransitionDetails.
        :type _from: List[str]
        """

        self.__from = _from

    @property
    def name(self):
        """Gets the name of this CreateWorkflowTransitionDetails.

        The name of the transition. The maximum length is 60 characters.

        :return: The name of this CreateWorkflowTransitionDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorkflowTransitionDetails.

        The name of the transition. The maximum length is 60 characters.

        :param name: The name of this CreateWorkflowTransitionDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this CreateWorkflowTransitionDetails.

        The properties of the transition.

        :return: The properties of this CreateWorkflowTransitionDetails.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateWorkflowTransitionDetails.

        The properties of the transition.

        :param properties: The properties of this CreateWorkflowTransitionDetails.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def rules(self):
        """Gets the rules of this CreateWorkflowTransitionDetails.

        The rules of the transition.

        :return: The rules of this CreateWorkflowTransitionDetails.
        :rtype: CreateWorkflowTransitionRulesDetails
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CreateWorkflowTransitionDetails.

        The rules of the transition.

        :param rules: The rules of this CreateWorkflowTransitionDetails.
        :type rules: CreateWorkflowTransitionRulesDetails
        """

        self._rules = rules

    @property
    def screen(self):
        """Gets the screen of this CreateWorkflowTransitionDetails.

        The screen of the transition.

        :return: The screen of this CreateWorkflowTransitionDetails.
        :rtype: CreateWorkflowTransitionScreenDetails
        """
        return self._screen

    @screen.setter
    def screen(self, screen):
        """Sets the screen of this CreateWorkflowTransitionDetails.

        The screen of the transition.

        :param screen: The screen of this CreateWorkflowTransitionDetails.
        :type screen: CreateWorkflowTransitionScreenDetails
        """

        self._screen = screen

    @property
    def to(self):
        """Gets the to of this CreateWorkflowTransitionDetails.

        The status the transition goes to.

        :return: The to of this CreateWorkflowTransitionDetails.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CreateWorkflowTransitionDetails.

        The status the transition goes to.

        :param to: The to of this CreateWorkflowTransitionDetails.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def type(self):
        """Gets the type of this CreateWorkflowTransitionDetails.

        The type of the transition.

        :return: The type of this CreateWorkflowTransitionDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateWorkflowTransitionDetails.

        The type of the transition.

        :param type: The type of this CreateWorkflowTransitionDetails.
        :type type: str
        """
        allowed_values = ["global", "initial", "directed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
