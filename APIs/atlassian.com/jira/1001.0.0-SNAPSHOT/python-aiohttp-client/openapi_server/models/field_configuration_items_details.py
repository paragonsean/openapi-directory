# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_configuration_item import FieldConfigurationItem
from openapi_server import util


class FieldConfigurationItemsDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_configuration_items: List[FieldConfigurationItem]=None):
        """FieldConfigurationItemsDetails - a model defined in OpenAPI

        :param field_configuration_items: The field_configuration_items of this FieldConfigurationItemsDetails.
        """
        self.openapi_types = {
            'field_configuration_items': List[FieldConfigurationItem]
        }

        self.attribute_map = {
            'field_configuration_items': 'fieldConfigurationItems'
        }

        self._field_configuration_items = field_configuration_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldConfigurationItemsDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldConfigurationItemsDetails of this FieldConfigurationItemsDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_configuration_items(self):
        """Gets the field_configuration_items of this FieldConfigurationItemsDetails.

        Details of fields in a field configuration.

        :return: The field_configuration_items of this FieldConfigurationItemsDetails.
        :rtype: List[FieldConfigurationItem]
        """
        return self._field_configuration_items

    @field_configuration_items.setter
    def field_configuration_items(self, field_configuration_items):
        """Sets the field_configuration_items of this FieldConfigurationItemsDetails.

        Details of fields in a field configuration.

        :param field_configuration_items: The field_configuration_items of this FieldConfigurationItemsDetails.
        :type field_configuration_items: List[FieldConfigurationItem]
        """
        if field_configuration_items is None:
            raise ValueError("Invalid value for `field_configuration_items`, must not be `None`")

        self._field_configuration_items = field_configuration_items
