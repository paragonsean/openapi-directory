# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_label import GroupLabel
from openapi_server import util


class FoundGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, html: str=None, labels: List[GroupLabel]=None, name: str=None):
        """FoundGroup - a model defined in OpenAPI

        :param group_id: The group_id of this FoundGroup.
        :param html: The html of this FoundGroup.
        :param labels: The labels of this FoundGroup.
        :param name: The name of this FoundGroup.
        """
        self.openapi_types = {
            'group_id': str,
            'html': str,
            'labels': List[GroupLabel],
            'name': str
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'html': 'html',
            'labels': 'labels',
            'name': 'name'
        }

        self._group_id = group_id
        self._html = html
        self._labels = labels
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoundGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoundGroup of this FoundGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this FoundGroup.

        The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.

        :return: The group_id of this FoundGroup.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this FoundGroup.

        The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.

        :param group_id: The group_id of this FoundGroup.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def html(self):
        """Gets the html of this FoundGroup.

        The group name with the matched query string highlighted with the HTML bold tag.

        :return: The html of this FoundGroup.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this FoundGroup.

        The group name with the matched query string highlighted with the HTML bold tag.

        :param html: The html of this FoundGroup.
        :type html: str
        """

        self._html = html

    @property
    def labels(self):
        """Gets the labels of this FoundGroup.


        :return: The labels of this FoundGroup.
        :rtype: List[GroupLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FoundGroup.


        :param labels: The labels of this FoundGroup.
        :type labels: List[GroupLabel]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this FoundGroup.

        The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`

        :return: The name of this FoundGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FoundGroup.

        The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`

        :param name: The name of this FoundGroup.
        :type name: str
        """

        self._name = name
