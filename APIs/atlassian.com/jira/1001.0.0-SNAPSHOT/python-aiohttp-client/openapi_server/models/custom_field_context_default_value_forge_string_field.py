# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContextDefaultValueForgeStringField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_id: str=None, text: str=None, type: str=None):
        """CustomFieldContextDefaultValueForgeStringField - a model defined in OpenAPI

        :param context_id: The context_id of this CustomFieldContextDefaultValueForgeStringField.
        :param text: The text of this CustomFieldContextDefaultValueForgeStringField.
        :param type: The type of this CustomFieldContextDefaultValueForgeStringField.
        """
        self.openapi_types = {
            'context_id': str,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'context_id': 'contextId',
            'text': 'text',
            'type': 'type'
        }

        self._context_id = context_id
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldContextDefaultValueForgeStringField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldContextDefaultValueForgeStringField of this CustomFieldContextDefaultValueForgeStringField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_id(self):
        """Gets the context_id of this CustomFieldContextDefaultValueForgeStringField.

        The ID of the context.

        :return: The context_id of this CustomFieldContextDefaultValueForgeStringField.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this CustomFieldContextDefaultValueForgeStringField.

        The ID of the context.

        :param context_id: The context_id of this CustomFieldContextDefaultValueForgeStringField.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")

        self._context_id = context_id

    @property
    def text(self):
        """Gets the text of this CustomFieldContextDefaultValueForgeStringField.

        The default text. The maximum length is 254 characters.

        :return: The text of this CustomFieldContextDefaultValueForgeStringField.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CustomFieldContextDefaultValueForgeStringField.

        The default text. The maximum length is 254 characters.

        :param text: The text of this CustomFieldContextDefaultValueForgeStringField.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this CustomFieldContextDefaultValueForgeStringField.


        :return: The type of this CustomFieldContextDefaultValueForgeStringField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldContextDefaultValueForgeStringField.


        :param type: The type of this CustomFieldContextDefaultValueForgeStringField.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
