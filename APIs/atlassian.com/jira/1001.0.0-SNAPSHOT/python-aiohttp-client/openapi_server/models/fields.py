# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_type_details import IssueTypeDetails
from openapi_server.models.priority import Priority
from openapi_server.models.status_details import StatusDetails
from openapi_server.models.time_tracking_details import TimeTrackingDetails
from openapi_server.models.user_details import UserDetails
from openapi_server import util


class Fields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: UserDetails=None, issue_type: IssueTypeDetails=None, issuetype: IssueTypeDetails=None, priority: Priority=None, status: StatusDetails=None, summary: str=None, timetracking: TimeTrackingDetails=None):
        """Fields - a model defined in OpenAPI

        :param assignee: The assignee of this Fields.
        :param issue_type: The issue_type of this Fields.
        :param issuetype: The issuetype of this Fields.
        :param priority: The priority of this Fields.
        :param status: The status of this Fields.
        :param summary: The summary of this Fields.
        :param timetracking: The timetracking of this Fields.
        """
        self.openapi_types = {
            'assignee': UserDetails,
            'issue_type': IssueTypeDetails,
            'issuetype': IssueTypeDetails,
            'priority': Priority,
            'status': StatusDetails,
            'summary': str,
            'timetracking': TimeTrackingDetails
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'issue_type': 'issueType',
            'issuetype': 'issuetype',
            'priority': 'priority',
            'status': 'status',
            'summary': 'summary',
            'timetracking': 'timetracking'
        }

        self._assignee = assignee
        self._issue_type = issue_type
        self._issuetype = issuetype
        self._priority = priority
        self._status = status
        self._summary = summary
        self._timetracking = timetracking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fields of this Fields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this Fields.

        The assignee of the linked issue.

        :return: The assignee of this Fields.
        :rtype: UserDetails
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Fields.

        The assignee of the linked issue.

        :param assignee: The assignee of this Fields.
        :type assignee: UserDetails
        """

        self._assignee = assignee

    @property
    def issue_type(self):
        """Gets the issue_type of this Fields.

        The type of the linked issue.

        :return: The issue_type of this Fields.
        :rtype: IssueTypeDetails
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this Fields.

        The type of the linked issue.

        :param issue_type: The issue_type of this Fields.
        :type issue_type: IssueTypeDetails
        """

        self._issue_type = issue_type

    @property
    def issuetype(self):
        """Gets the issuetype of this Fields.


        :return: The issuetype of this Fields.
        :rtype: IssueTypeDetails
        """
        return self._issuetype

    @issuetype.setter
    def issuetype(self, issuetype):
        """Sets the issuetype of this Fields.


        :param issuetype: The issuetype of this Fields.
        :type issuetype: IssueTypeDetails
        """

        self._issuetype = issuetype

    @property
    def priority(self):
        """Gets the priority of this Fields.

        The priority of the linked issue.

        :return: The priority of this Fields.
        :rtype: Priority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Fields.

        The priority of the linked issue.

        :param priority: The priority of this Fields.
        :type priority: Priority
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this Fields.

        The status of the linked issue.

        :return: The status of this Fields.
        :rtype: StatusDetails
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Fields.

        The status of the linked issue.

        :param status: The status of this Fields.
        :type status: StatusDetails
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this Fields.

        The summary description of the linked issue.

        :return: The summary of this Fields.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Fields.

        The summary description of the linked issue.

        :param summary: The summary of this Fields.
        :type summary: str
        """

        self._summary = summary

    @property
    def timetracking(self):
        """Gets the timetracking of this Fields.

        The time tracking of the linked issue.

        :return: The timetracking of this Fields.
        :rtype: TimeTrackingDetails
        """
        return self._timetracking

    @timetracking.setter
    def timetracking(self, timetracking):
        """Sets the timetracking of this Fields.

        The time tracking of the linked issue.

        :param timetracking: The timetracking of this Fields.
        :type timetracking: TimeTrackingDetails
        """

        self._timetracking = timetracking
