# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_scheme_event import NotificationSchemeEvent
from openapi_server.models.scope import Scope
from openapi_server import util


class NotificationScheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, expand: str=None, id: int=None, name: str=None, notification_scheme_events: List[NotificationSchemeEvent]=None, projects: List[int]=None, scope: Scope=None, _self: str=None):
        """NotificationScheme - a model defined in OpenAPI

        :param description: The description of this NotificationScheme.
        :param expand: The expand of this NotificationScheme.
        :param id: The id of this NotificationScheme.
        :param name: The name of this NotificationScheme.
        :param notification_scheme_events: The notification_scheme_events of this NotificationScheme.
        :param projects: The projects of this NotificationScheme.
        :param scope: The scope of this NotificationScheme.
        :param _self: The _self of this NotificationScheme.
        """
        self.openapi_types = {
            'description': str,
            'expand': str,
            'id': int,
            'name': str,
            'notification_scheme_events': List[NotificationSchemeEvent],
            'projects': List[int],
            'scope': Scope,
            '_self': str
        }

        self.attribute_map = {
            'description': 'description',
            'expand': 'expand',
            'id': 'id',
            'name': 'name',
            'notification_scheme_events': 'notificationSchemeEvents',
            'projects': 'projects',
            'scope': 'scope',
            '_self': 'self'
        }

        self._description = description
        self._expand = expand
        self._id = id
        self._name = name
        self._notification_scheme_events = notification_scheme_events
        self._projects = projects
        self._scope = scope
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationScheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationScheme of this NotificationScheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NotificationScheme.

        The description of the notification scheme.

        :return: The description of this NotificationScheme.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationScheme.

        The description of the notification scheme.

        :param description: The description of this NotificationScheme.
        :type description: str
        """

        self._description = description

    @property
    def expand(self):
        """Gets the expand of this NotificationScheme.

        Expand options that include additional notification scheme details in the response.

        :return: The expand of this NotificationScheme.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this NotificationScheme.

        Expand options that include additional notification scheme details in the response.

        :param expand: The expand of this NotificationScheme.
        :type expand: str
        """

        self._expand = expand

    @property
    def id(self):
        """Gets the id of this NotificationScheme.

        The ID of the notification scheme.

        :return: The id of this NotificationScheme.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationScheme.

        The ID of the notification scheme.

        :param id: The id of this NotificationScheme.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NotificationScheme.

        The name of the notification scheme.

        :return: The name of this NotificationScheme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationScheme.

        The name of the notification scheme.

        :param name: The name of this NotificationScheme.
        :type name: str
        """

        self._name = name

    @property
    def notification_scheme_events(self):
        """Gets the notification_scheme_events of this NotificationScheme.

        The notification events and associated recipients.

        :return: The notification_scheme_events of this NotificationScheme.
        :rtype: List[NotificationSchemeEvent]
        """
        return self._notification_scheme_events

    @notification_scheme_events.setter
    def notification_scheme_events(self, notification_scheme_events):
        """Sets the notification_scheme_events of this NotificationScheme.

        The notification events and associated recipients.

        :param notification_scheme_events: The notification_scheme_events of this NotificationScheme.
        :type notification_scheme_events: List[NotificationSchemeEvent]
        """

        self._notification_scheme_events = notification_scheme_events

    @property
    def projects(self):
        """Gets the projects of this NotificationScheme.

        The list of project IDs associated with the notification scheme.

        :return: The projects of this NotificationScheme.
        :rtype: List[int]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this NotificationScheme.

        The list of project IDs associated with the notification scheme.

        :param projects: The projects of this NotificationScheme.
        :type projects: List[int]
        """

        self._projects = projects

    @property
    def scope(self):
        """Gets the scope of this NotificationScheme.

        The scope of the notification scheme.

        :return: The scope of this NotificationScheme.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NotificationScheme.

        The scope of the notification scheme.

        :param scope: The scope of this NotificationScheme.
        :type scope: Scope
        """

        self._scope = scope

    @property
    def _self(self):
        """Gets the _self of this NotificationScheme.


        :return: The _self of this NotificationScheme.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this NotificationScheme.


        :param _self: The _self of this NotificationScheme.
        :type _self: str
        """

        self.__self = _self
