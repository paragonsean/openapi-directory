# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_link import SimpleLink
from openapi_server.models.version_issues_status import VersionIssuesStatus
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, description: str=None, expand: str=None, id: str=None, issues_status_for_fix_version: VersionIssuesStatus=None, move_unfixed_issues_to: str=None, name: str=None, operations: List[SimpleLink]=None, overdue: bool=None, project: str=None, project_id: int=None, release_date: date=None, released: bool=None, _self: str=None, start_date: date=None, user_release_date: str=None, user_start_date: str=None):
        """Version - a model defined in OpenAPI

        :param archived: The archived of this Version.
        :param description: The description of this Version.
        :param expand: The expand of this Version.
        :param id: The id of this Version.
        :param issues_status_for_fix_version: The issues_status_for_fix_version of this Version.
        :param move_unfixed_issues_to: The move_unfixed_issues_to of this Version.
        :param name: The name of this Version.
        :param operations: The operations of this Version.
        :param overdue: The overdue of this Version.
        :param project: The project of this Version.
        :param project_id: The project_id of this Version.
        :param release_date: The release_date of this Version.
        :param released: The released of this Version.
        :param _self: The _self of this Version.
        :param start_date: The start_date of this Version.
        :param user_release_date: The user_release_date of this Version.
        :param user_start_date: The user_start_date of this Version.
        """
        self.openapi_types = {
            'archived': bool,
            'description': str,
            'expand': str,
            'id': str,
            'issues_status_for_fix_version': VersionIssuesStatus,
            'move_unfixed_issues_to': str,
            'name': str,
            'operations': List[SimpleLink],
            'overdue': bool,
            'project': str,
            'project_id': int,
            'release_date': date,
            'released': bool,
            '_self': str,
            'start_date': date,
            'user_release_date': str,
            'user_start_date': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'description': 'description',
            'expand': 'expand',
            'id': 'id',
            'issues_status_for_fix_version': 'issuesStatusForFixVersion',
            'move_unfixed_issues_to': 'moveUnfixedIssuesTo',
            'name': 'name',
            'operations': 'operations',
            'overdue': 'overdue',
            'project': 'project',
            'project_id': 'projectId',
            'release_date': 'releaseDate',
            'released': 'released',
            '_self': 'self',
            'start_date': 'startDate',
            'user_release_date': 'userReleaseDate',
            'user_start_date': 'userStartDate'
        }

        self._archived = archived
        self._description = description
        self._expand = expand
        self._id = id
        self._issues_status_for_fix_version = issues_status_for_fix_version
        self._move_unfixed_issues_to = move_unfixed_issues_to
        self._name = name
        self._operations = operations
        self._overdue = overdue
        self._project = project
        self._project_id = project_id
        self._release_date = release_date
        self._released = released
        self.__self = _self
        self._start_date = start_date
        self._user_release_date = user_release_date
        self._user_start_date = user_start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this Version.

        Indicates that the version is archived. Optional when creating or updating a version.

        :return: The archived of this Version.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Version.

        Indicates that the version is archived. Optional when creating or updating a version.

        :param archived: The archived of this Version.
        :type archived: bool
        """

        self._archived = archived

    @property
    def description(self):
        """Gets the description of this Version.

        The description of the version. Optional when creating or updating a version.

        :return: The description of this Version.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Version.

        The description of the version. Optional when creating or updating a version.

        :param description: The description of this Version.
        :type description: str
        """

        self._description = description

    @property
    def expand(self):
        """Gets the expand of this Version.

        Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update.

        :return: The expand of this Version.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this Version.

        Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update.

        :param expand: The expand of this Version.
        :type expand: str
        """

        self._expand = expand

    @property
    def id(self):
        """Gets the id of this Version.

        The ID of the version.

        :return: The id of this Version.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Version.

        The ID of the version.

        :param id: The id of this Version.
        :type id: str
        """

        self._id = id

    @property
    def issues_status_for_fix_version(self):
        """Gets the issues_status_for_fix_version of this Version.

        If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.

        :return: The issues_status_for_fix_version of this Version.
        :rtype: VersionIssuesStatus
        """
        return self._issues_status_for_fix_version

    @issues_status_for_fix_version.setter
    def issues_status_for_fix_version(self, issues_status_for_fix_version):
        """Sets the issues_status_for_fix_version of this Version.

        If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.

        :param issues_status_for_fix_version: The issues_status_for_fix_version of this Version.
        :type issues_status_for_fix_version: VersionIssuesStatus
        """

        self._issues_status_for_fix_version = issues_status_for_fix_version

    @property
    def move_unfixed_issues_to(self):
        """Gets the move_unfixed_issues_to of this Version.

        The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.

        :return: The move_unfixed_issues_to of this Version.
        :rtype: str
        """
        return self._move_unfixed_issues_to

    @move_unfixed_issues_to.setter
    def move_unfixed_issues_to(self, move_unfixed_issues_to):
        """Sets the move_unfixed_issues_to of this Version.

        The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.

        :param move_unfixed_issues_to: The move_unfixed_issues_to of this Version.
        :type move_unfixed_issues_to: str
        """

        self._move_unfixed_issues_to = move_unfixed_issues_to

    @property
    def name(self):
        """Gets the name of this Version.

        The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.

        :return: The name of this Version.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Version.

        The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.

        :param name: The name of this Version.
        :type name: str
        """

        self._name = name

    @property
    def operations(self):
        """Gets the operations of this Version.

        If the expand option `operations` is used, returns the list of operations available for this version.

        :return: The operations of this Version.
        :rtype: List[SimpleLink]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Version.

        If the expand option `operations` is used, returns the list of operations available for this version.

        :param operations: The operations of this Version.
        :type operations: List[SimpleLink]
        """

        self._operations = operations

    @property
    def overdue(self):
        """Gets the overdue of this Version.

        Indicates that the version is overdue.

        :return: The overdue of this Version.
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """Sets the overdue of this Version.

        Indicates that the version is overdue.

        :param overdue: The overdue of this Version.
        :type overdue: bool
        """

        self._overdue = overdue

    @property
    def project(self):
        """Gets the project of this Version.

        Deprecated. Use `projectId`.

        :return: The project of this Version.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Version.

        Deprecated. Use `projectId`.

        :param project: The project of this Version.
        :type project: str
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this Version.

        The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.

        :return: The project_id of this Version.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Version.

        The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.

        :param project_id: The project_id of this Version.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def release_date(self):
        """Gets the release_date of this Version.

        The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.

        :return: The release_date of this Version.
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Version.

        The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.

        :param release_date: The release_date of this Version.
        :type release_date: date
        """

        self._release_date = release_date

    @property
    def released(self):
        """Gets the released of this Version.

        Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.

        :return: The released of this Version.
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this Version.

        Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.

        :param released: The released of this Version.
        :type released: bool
        """

        self._released = released

    @property
    def _self(self):
        """Gets the _self of this Version.

        The URL of the version.

        :return: The _self of this Version.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Version.

        The URL of the version.

        :param _self: The _self of this Version.
        :type _self: str
        """

        self.__self = _self

    @property
    def start_date(self):
        """Gets the start_date of this Version.

        The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.

        :return: The start_date of this Version.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Version.

        The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.

        :param start_date: The start_date of this Version.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def user_release_date(self):
        """Gets the user_release_date of this Version.

        The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.

        :return: The user_release_date of this Version.
        :rtype: str
        """
        return self._user_release_date

    @user_release_date.setter
    def user_release_date(self, user_release_date):
        """Sets the user_release_date of this Version.

        The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.

        :param user_release_date: The user_release_date of this Version.
        :type user_release_date: str
        """

        self._user_release_date = user_release_date

    @property
    def user_start_date(self):
        """Gets the user_start_date of this Version.

        The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.

        :return: The user_start_date of this Version.
        :rtype: str
        """
        return self._user_start_date

    @user_start_date.setter
    def user_start_date(self, user_start_date):
        """Sets the user_start_date of this Version.

        The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.

        :param user_start_date: The user_start_date of this Version.
        :type user_start_date: str
        """

        self._user_start_date = user_start_date
