# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_id import ProjectId
from openapi_server import util


class StatusScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project: ProjectId=None, type: str=None):
        """StatusScope - a model defined in OpenAPI

        :param project: The project of this StatusScope.
        :param type: The type of this StatusScope.
        """
        self.openapi_types = {
            'project': ProjectId,
            'type': str
        }

        self.attribute_map = {
            'project': 'project',
            'type': 'type'
        }

        self._project = project
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusScope of this StatusScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project(self):
        """Gets the project of this StatusScope.


        :return: The project of this StatusScope.
        :rtype: ProjectId
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this StatusScope.


        :param project: The project of this StatusScope.
        :type project: ProjectId
        """

        self._project = project

    @property
    def type(self):
        """Gets the type of this StatusScope.

        The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.

        :return: The type of this StatusScope.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatusScope.

        The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.

        :param type: The type of this StatusScope.
        :type type: str
        """
        allowed_values = ["PROJECT", "GLOBAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
