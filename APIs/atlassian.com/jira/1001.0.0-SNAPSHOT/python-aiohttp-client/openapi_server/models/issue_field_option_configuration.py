# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_field_option_scope_bean import IssueFieldOptionScopeBean
from openapi_server import util


class IssueFieldOptionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: list[str]=None, scope: IssueFieldOptionScopeBean=None):
        """IssueFieldOptionConfiguration - a model defined in OpenAPI

        :param attributes: The attributes of this IssueFieldOptionConfiguration.
        :param scope: The scope of this IssueFieldOptionConfiguration.
        """
        self.openapi_types = {
            'attributes': list[str],
            'scope': IssueFieldOptionScopeBean
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'scope': 'scope'
        }

        self._attributes = attributes
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueFieldOptionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueFieldOptionConfiguration of this IssueFieldOptionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this IssueFieldOptionConfiguration.

        DEPRECATED

        :return: The attributes of this IssueFieldOptionConfiguration.
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this IssueFieldOptionConfiguration.

        DEPRECATED

        :param attributes: The attributes of this IssueFieldOptionConfiguration.
        :type attributes: list[str]
        """
        allowed_values = ["notSelectable", "defaultValue"]  # noqa: E501
        if not set(attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._attributes = attributes

    @property
    def scope(self):
        """Gets the scope of this IssueFieldOptionConfiguration.

        Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.

        :return: The scope of this IssueFieldOptionConfiguration.
        :rtype: IssueFieldOptionScopeBean
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this IssueFieldOptionConfiguration.

        Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.

        :param scope: The scope of this IssueFieldOptionConfiguration.
        :type scope: IssueFieldOptionScopeBean
        """

        self._scope = scope
