# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldConfigurationItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, is_hidden: bool=None, is_required: bool=None, renderer: str=None):
        """FieldConfigurationItem - a model defined in OpenAPI

        :param description: The description of this FieldConfigurationItem.
        :param id: The id of this FieldConfigurationItem.
        :param is_hidden: The is_hidden of this FieldConfigurationItem.
        :param is_required: The is_required of this FieldConfigurationItem.
        :param renderer: The renderer of this FieldConfigurationItem.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'is_hidden': bool,
            'is_required': bool,
            'renderer': str
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'is_hidden': 'isHidden',
            'is_required': 'isRequired',
            'renderer': 'renderer'
        }

        self._description = description
        self._id = id
        self._is_hidden = is_hidden
        self._is_required = is_required
        self._renderer = renderer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldConfigurationItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldConfigurationItem of this FieldConfigurationItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this FieldConfigurationItem.

        The description of the field within the field configuration.

        :return: The description of this FieldConfigurationItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FieldConfigurationItem.

        The description of the field within the field configuration.

        :param description: The description of this FieldConfigurationItem.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this FieldConfigurationItem.

        The ID of the field within the field configuration.

        :return: The id of this FieldConfigurationItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldConfigurationItem.

        The ID of the field within the field configuration.

        :param id: The id of this FieldConfigurationItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_hidden(self):
        """Gets the is_hidden of this FieldConfigurationItem.

        Whether the field is hidden in the field configuration.

        :return: The is_hidden of this FieldConfigurationItem.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this FieldConfigurationItem.

        Whether the field is hidden in the field configuration.

        :param is_hidden: The is_hidden of this FieldConfigurationItem.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_required(self):
        """Gets the is_required of this FieldConfigurationItem.

        Whether the field is required in the field configuration.

        :return: The is_required of this FieldConfigurationItem.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this FieldConfigurationItem.

        Whether the field is required in the field configuration.

        :param is_required: The is_required of this FieldConfigurationItem.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def renderer(self):
        """Gets the renderer of this FieldConfigurationItem.

        The renderer type for the field within the field configuration.

        :return: The renderer of this FieldConfigurationItem.
        :rtype: str
        """
        return self._renderer

    @renderer.setter
    def renderer(self, renderer):
        """Sets the renderer of this FieldConfigurationItem.

        The renderer type for the field within the field configuration.

        :param renderer: The renderer of this FieldConfigurationItem.
        :type renderer: str
        """

        self._renderer = renderer
