# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Avatar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_name: str=None, id: str=None, is_deletable: bool=None, is_selected: bool=None, is_system_avatar: bool=None, owner: str=None, urls: Dict[str, str]=None):
        """Avatar - a model defined in OpenAPI

        :param file_name: The file_name of this Avatar.
        :param id: The id of this Avatar.
        :param is_deletable: The is_deletable of this Avatar.
        :param is_selected: The is_selected of this Avatar.
        :param is_system_avatar: The is_system_avatar of this Avatar.
        :param owner: The owner of this Avatar.
        :param urls: The urls of this Avatar.
        """
        self.openapi_types = {
            'file_name': str,
            'id': str,
            'is_deletable': bool,
            'is_selected': bool,
            'is_system_avatar': bool,
            'owner': str,
            'urls': Dict[str, str]
        }

        self.attribute_map = {
            'file_name': 'fileName',
            'id': 'id',
            'is_deletable': 'isDeletable',
            'is_selected': 'isSelected',
            'is_system_avatar': 'isSystemAvatar',
            'owner': 'owner',
            'urls': 'urls'
        }

        self._file_name = file_name
        self._id = id
        self._is_deletable = is_deletable
        self._is_selected = is_selected
        self._is_system_avatar = is_system_avatar
        self._owner = owner
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Avatar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Avatar of this Avatar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_name(self):
        """Gets the file_name of this Avatar.

        The file name of the avatar icon. Returned for system avatars.

        :return: The file_name of this Avatar.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Avatar.

        The file name of the avatar icon. Returned for system avatars.

        :param file_name: The file_name of this Avatar.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this Avatar.

        The ID of the avatar.

        :return: The id of this Avatar.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Avatar.

        The ID of the avatar.

        :param id: The id of this Avatar.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_deletable(self):
        """Gets the is_deletable of this Avatar.

        Whether the avatar can be deleted.

        :return: The is_deletable of this Avatar.
        :rtype: bool
        """
        return self._is_deletable

    @is_deletable.setter
    def is_deletable(self, is_deletable):
        """Sets the is_deletable of this Avatar.

        Whether the avatar can be deleted.

        :param is_deletable: The is_deletable of this Avatar.
        :type is_deletable: bool
        """

        self._is_deletable = is_deletable

    @property
    def is_selected(self):
        """Gets the is_selected of this Avatar.

        Whether the avatar is used in Jira. For example, shown as a project's avatar.

        :return: The is_selected of this Avatar.
        :rtype: bool
        """
        return self._is_selected

    @is_selected.setter
    def is_selected(self, is_selected):
        """Sets the is_selected of this Avatar.

        Whether the avatar is used in Jira. For example, shown as a project's avatar.

        :param is_selected: The is_selected of this Avatar.
        :type is_selected: bool
        """

        self._is_selected = is_selected

    @property
    def is_system_avatar(self):
        """Gets the is_system_avatar of this Avatar.

        Whether the avatar is a system avatar.

        :return: The is_system_avatar of this Avatar.
        :rtype: bool
        """
        return self._is_system_avatar

    @is_system_avatar.setter
    def is_system_avatar(self, is_system_avatar):
        """Sets the is_system_avatar of this Avatar.

        Whether the avatar is a system avatar.

        :param is_system_avatar: The is_system_avatar of this Avatar.
        :type is_system_avatar: bool
        """

        self._is_system_avatar = is_system_avatar

    @property
    def owner(self):
        """Gets the owner of this Avatar.

        The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.

        :return: The owner of this Avatar.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Avatar.

        The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.

        :param owner: The owner of this Avatar.
        :type owner: str
        """

        self._owner = owner

    @property
    def urls(self):
        """Gets the urls of this Avatar.

        The list of avatar icon URLs.

        :return: The urls of this Avatar.
        :rtype: Dict[str, str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Avatar.

        The list of avatar icon URLs.

        :param urls: The urls of this Avatar.
        :type urls: Dict[str, str]
        """

        self._urls = urls
