# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_workflow_status_details import CreateWorkflowStatusDetails
from openapi_server.models.create_workflow_transition_details import CreateWorkflowTransitionDetails
from openapi_server import util


class CreateWorkflowDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, statuses: list[CreateWorkflowStatusDetails]=None, transitions: List[CreateWorkflowTransitionDetails]=None):
        """CreateWorkflowDetails - a model defined in OpenAPI

        :param description: The description of this CreateWorkflowDetails.
        :param name: The name of this CreateWorkflowDetails.
        :param statuses: The statuses of this CreateWorkflowDetails.
        :param transitions: The transitions of this CreateWorkflowDetails.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'statuses': list[CreateWorkflowStatusDetails],
            'transitions': List[CreateWorkflowTransitionDetails]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'statuses': 'statuses',
            'transitions': 'transitions'
        }

        self._description = description
        self._name = name
        self._statuses = statuses
        self._transitions = transitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkflowDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkflowDetails of this CreateWorkflowDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateWorkflowDetails.

        The description of the workflow. The maximum length is 1000 characters.

        :return: The description of this CreateWorkflowDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWorkflowDetails.

        The description of the workflow. The maximum length is 1000 characters.

        :param description: The description of this CreateWorkflowDetails.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateWorkflowDetails.

        The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.

        :return: The name of this CreateWorkflowDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorkflowDetails.

        The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.

        :param name: The name of this CreateWorkflowDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def statuses(self):
        """Gets the statuses of this CreateWorkflowDetails.

        The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.

        :return: The statuses of this CreateWorkflowDetails.
        :rtype: list[CreateWorkflowStatusDetails]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this CreateWorkflowDetails.

        The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.

        :param statuses: The statuses of this CreateWorkflowDetails.
        :type statuses: list[CreateWorkflowStatusDetails]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")

        self._statuses = statuses

    @property
    def transitions(self):
        """Gets the transitions of this CreateWorkflowDetails.

        The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique 'to' status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a 'from' status on *initial* and *global* transitions.  *  have a 'from' status on *directed* transitions.  All the transition statuses must be included in `statuses`.

        :return: The transitions of this CreateWorkflowDetails.
        :rtype: List[CreateWorkflowTransitionDetails]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this CreateWorkflowDetails.

        The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique 'to' status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a 'from' status on *initial* and *global* transitions.  *  have a 'from' status on *directed* transitions.  All the transition statuses must be included in `statuses`.

        :param transitions: The transitions of this CreateWorkflowDetails.
        :type transitions: List[CreateWorkflowTransitionDetails]
        """
        if transitions is None:
            raise ValueError("Invalid value for `transitions`, must not be `None`")

        self._transitions = transitions
