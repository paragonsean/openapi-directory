# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scope import Scope
from openapi_server import util


class Screen(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, name: str=None, scope: Scope=None):
        """Screen - a model defined in OpenAPI

        :param description: The description of this Screen.
        :param id: The id of this Screen.
        :param name: The name of this Screen.
        :param scope: The scope of this Screen.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'name': str,
            'scope': Scope
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'scope': 'scope'
        }

        self._description = description
        self._id = id
        self._name = name
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Screen':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Screen of this Screen.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Screen.

        The description of the screen.

        :return: The description of this Screen.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Screen.

        The description of the screen.

        :param description: The description of this Screen.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Screen.

        The ID of the screen.

        :return: The id of this Screen.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Screen.

        The ID of the screen.

        :param id: The id of this Screen.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Screen.

        The name of the screen.

        :return: The name of this Screen.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Screen.

        The name of the screen.

        :param name: The name of this Screen.
        :type name: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this Screen.

        The scope of the screen.

        :return: The scope of this Screen.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Screen.

        The scope of the screen.

        :param scope: The scope of this Screen.
        :type scope: Scope
        """

        self._scope = scope
