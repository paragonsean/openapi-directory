# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_details import StatusDetails
from openapi_server import util


class IssueTypeWithStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, _self: str=None, statuses: List[StatusDetails]=None, subtask: bool=None):
        """IssueTypeWithStatus - a model defined in OpenAPI

        :param id: The id of this IssueTypeWithStatus.
        :param name: The name of this IssueTypeWithStatus.
        :param _self: The _self of this IssueTypeWithStatus.
        :param statuses: The statuses of this IssueTypeWithStatus.
        :param subtask: The subtask of this IssueTypeWithStatus.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            '_self': str,
            'statuses': List[StatusDetails],
            'subtask': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            '_self': 'self',
            'statuses': 'statuses',
            'subtask': 'subtask'
        }

        self._id = id
        self._name = name
        self.__self = _self
        self._statuses = statuses
        self._subtask = subtask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTypeWithStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTypeWithStatus of this IssueTypeWithStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this IssueTypeWithStatus.

        The ID of the issue type.

        :return: The id of this IssueTypeWithStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueTypeWithStatus.

        The ID of the issue type.

        :param id: The id of this IssueTypeWithStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this IssueTypeWithStatus.

        The name of the issue type.

        :return: The name of this IssueTypeWithStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTypeWithStatus.

        The name of the issue type.

        :param name: The name of this IssueTypeWithStatus.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this IssueTypeWithStatus.

        The URL of the issue type's status details.

        :return: The _self of this IssueTypeWithStatus.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IssueTypeWithStatus.

        The URL of the issue type's status details.

        :param _self: The _self of this IssueTypeWithStatus.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def statuses(self):
        """Gets the statuses of this IssueTypeWithStatus.

        List of status details for the issue type.

        :return: The statuses of this IssueTypeWithStatus.
        :rtype: List[StatusDetails]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this IssueTypeWithStatus.

        List of status details for the issue type.

        :param statuses: The statuses of this IssueTypeWithStatus.
        :type statuses: List[StatusDetails]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")

        self._statuses = statuses

    @property
    def subtask(self):
        """Gets the subtask of this IssueTypeWithStatus.

        Whether this issue type represents subtasks.

        :return: The subtask of this IssueTypeWithStatus.
        :rtype: bool
        """
        return self._subtask

    @subtask.setter
    def subtask(self, subtask):
        """Sets the subtask of this IssueTypeWithStatus.

        Whether this issue type represents subtasks.

        :param subtask: The subtask of this IssueTypeWithStatus.
        :type subtask: bool
        """
        if subtask is None:
            raise ValueError("Invalid value for `subtask`, must not be `None`")

        self._subtask = subtask
