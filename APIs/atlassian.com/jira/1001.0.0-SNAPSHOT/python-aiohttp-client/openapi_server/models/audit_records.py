# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_record_bean import AuditRecordBean
from openapi_server import util


class AuditRecords(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=None, offset: int=None, records: List[AuditRecordBean]=None, total: int=None):
        """AuditRecords - a model defined in OpenAPI

        :param limit: The limit of this AuditRecords.
        :param offset: The offset of this AuditRecords.
        :param records: The records of this AuditRecords.
        :param total: The total of this AuditRecords.
        """
        self.openapi_types = {
            'limit': int,
            'offset': int,
            'records': List[AuditRecordBean],
            'total': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'offset': 'offset',
            'records': 'records',
            'total': 'total'
        }

        self._limit = limit
        self._offset = offset
        self._records = records
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditRecords':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditRecords of this AuditRecords.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this AuditRecords.

        The requested or default limit on the number of audit items to be returned.

        :return: The limit of this AuditRecords.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AuditRecords.

        The requested or default limit on the number of audit items to be returned.

        :param limit: The limit of this AuditRecords.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this AuditRecords.

        The number of audit items skipped before the first item in this list.

        :return: The offset of this AuditRecords.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this AuditRecords.

        The number of audit items skipped before the first item in this list.

        :param offset: The offset of this AuditRecords.
        :type offset: int
        """

        self._offset = offset

    @property
    def records(self):
        """Gets the records of this AuditRecords.

        The list of audit items.

        :return: The records of this AuditRecords.
        :rtype: List[AuditRecordBean]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this AuditRecords.

        The list of audit items.

        :param records: The records of this AuditRecords.
        :type records: List[AuditRecordBean]
        """

        self._records = records

    @property
    def total(self):
        """Gets the total of this AuditRecords.

        The total number of audit items returned.

        :return: The total of this AuditRecords.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AuditRecords.

        The total number of audit items returned.

        :param total: The total of this AuditRecords.
        :type total: int
        """

        self._total = total
