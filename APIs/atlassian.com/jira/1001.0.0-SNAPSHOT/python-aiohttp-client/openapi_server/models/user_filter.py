# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, groups: list[str]=None, role_ids: list[int]=None):
        """UserFilter - a model defined in OpenAPI

        :param enabled: The enabled of this UserFilter.
        :param groups: The groups of this UserFilter.
        :param role_ids: The role_ids of this UserFilter.
        """
        self.openapi_types = {
            'enabled': bool,
            'groups': list[str],
            'role_ids': list[int]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'groups': 'groups',
            'role_ids': 'roleIds'
        }

        self._enabled = enabled
        self._groups = groups
        self._role_ids = role_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserFilter of this UserFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this UserFilter.

        Whether the filter is enabled.

        :return: The enabled of this UserFilter.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserFilter.

        Whether the filter is enabled.

        :param enabled: The enabled of this UserFilter.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def groups(self):
        """Gets the groups of this UserFilter.

        User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.

        :return: The groups of this UserFilter.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserFilter.

        User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.

        :param groups: The groups of this UserFilter.
        :type groups: list[str]
        """

        self._groups = groups

    @property
    def role_ids(self):
        """Gets the role_ids of this UserFilter.

        Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.

        :return: The role_ids of this UserFilter.
        :rtype: list[int]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this UserFilter.

        Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.

        :param role_ids: The role_ids of this UserFilter.
        :type role_ids: list[int]
        """

        self._role_ids = role_ids
