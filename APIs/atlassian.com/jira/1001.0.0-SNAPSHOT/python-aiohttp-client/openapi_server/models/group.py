# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.paged_list_user_details_application_user import PagedListUserDetailsApplicationUser
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand: str=None, group_id: str=None, name: str=None, _self: str=None, users: PagedListUserDetailsApplicationUser=None):
        """Group - a model defined in OpenAPI

        :param expand: The expand of this Group.
        :param group_id: The group_id of this Group.
        :param name: The name of this Group.
        :param _self: The _self of this Group.
        :param users: The users of this Group.
        """
        self.openapi_types = {
            'expand': str,
            'group_id': str,
            'name': str,
            '_self': str,
            'users': PagedListUserDetailsApplicationUser
        }

        self.attribute_map = {
            'expand': 'expand',
            'group_id': 'groupId',
            'name': 'name',
            '_self': 'self',
            'users': 'users'
        }

        self._expand = expand
        self._group_id = group_id
        self._name = name
        self.__self = _self
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self):
        """Gets the expand of this Group.

        Expand options that include additional group details in the response.

        :return: The expand of this Group.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this Group.

        Expand options that include additional group details in the response.

        :param expand: The expand of this Group.
        :type expand: str
        """

        self._expand = expand

    @property
    def group_id(self):
        """Gets the group_id of this Group.

        The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.

        :return: The group_id of this Group.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Group.

        The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.

        :param group_id: The group_id of this Group.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this Group.

        The name of group.

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The name of group.

        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this Group.

        The URL for these group details.

        :return: The _self of this Group.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Group.

        The URL for these group details.

        :param _self: The _self of this Group.
        :type _self: str
        """

        self.__self = _self

    @property
    def users(self):
        """Gets the users of this Group.

        A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.

        :return: The users of this Group.
        :rtype: PagedListUserDetailsApplicationUser
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Group.

        A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.

        :param users: The users of this Group.
        :type users: PagedListUserDetailsApplicationUser
        """

        self._users = users
