# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_gadget_position import DashboardGadgetPosition
from openapi_server import util


class DashboardGadgetUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, position: DashboardGadgetPosition=None, title: str=None):
        """DashboardGadgetUpdateRequest - a model defined in OpenAPI

        :param color: The color of this DashboardGadgetUpdateRequest.
        :param position: The position of this DashboardGadgetUpdateRequest.
        :param title: The title of this DashboardGadgetUpdateRequest.
        """
        self.openapi_types = {
            'color': str,
            'position': DashboardGadgetPosition,
            'title': str
        }

        self.attribute_map = {
            'color': 'color',
            'position': 'position',
            'title': 'title'
        }

        self._color = color
        self._position = position
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardGadgetUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardGadgetUpdateRequest of this DashboardGadgetUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this DashboardGadgetUpdateRequest.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.

        :return: The color of this DashboardGadgetUpdateRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DashboardGadgetUpdateRequest.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.

        :param color: The color of this DashboardGadgetUpdateRequest.
        :type color: str
        """

        self._color = color

    @property
    def position(self):
        """Gets the position of this DashboardGadgetUpdateRequest.

        The position of the gadget.

        :return: The position of this DashboardGadgetUpdateRequest.
        :rtype: DashboardGadgetPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardGadgetUpdateRequest.

        The position of the gadget.

        :param position: The position of this DashboardGadgetUpdateRequest.
        :type position: DashboardGadgetPosition
        """

        self._position = position

    @property
    def title(self):
        """Gets the title of this DashboardGadgetUpdateRequest.

        The title of the gadget.

        :return: The title of this DashboardGadgetUpdateRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardGadgetUpdateRequest.

        The title of the gadget.

        :param title: The title of this DashboardGadgetUpdateRequest.
        :type title: str
        """

        self._title = title
