# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_type_bean import JsonTypeBean
from openapi_server.models.scope import Scope
from openapi_server import util


class FieldDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clause_names: list[str]=None, custom: bool=None, id: str=None, key: str=None, name: str=None, navigable: bool=None, orderable: bool=None, _schema: JsonTypeBean=None, scope: Scope=None, searchable: bool=None):
        """FieldDetails - a model defined in OpenAPI

        :param clause_names: The clause_names of this FieldDetails.
        :param custom: The custom of this FieldDetails.
        :param id: The id of this FieldDetails.
        :param key: The key of this FieldDetails.
        :param name: The name of this FieldDetails.
        :param navigable: The navigable of this FieldDetails.
        :param orderable: The orderable of this FieldDetails.
        :param _schema: The _schema of this FieldDetails.
        :param scope: The scope of this FieldDetails.
        :param searchable: The searchable of this FieldDetails.
        """
        self.openapi_types = {
            'clause_names': list[str],
            'custom': bool,
            'id': str,
            'key': str,
            'name': str,
            'navigable': bool,
            'orderable': bool,
            '_schema': JsonTypeBean,
            'scope': Scope,
            'searchable': bool
        }

        self.attribute_map = {
            'clause_names': 'clauseNames',
            'custom': 'custom',
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'navigable': 'navigable',
            'orderable': 'orderable',
            '_schema': 'schema',
            'scope': 'scope',
            'searchable': 'searchable'
        }

        self._clause_names = clause_names
        self._custom = custom
        self._id = id
        self._key = key
        self._name = name
        self._navigable = navigable
        self._orderable = orderable
        self.__schema = _schema
        self._scope = scope
        self._searchable = searchable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldDetails of this FieldDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clause_names(self):
        """Gets the clause_names of this FieldDetails.

        The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).

        :return: The clause_names of this FieldDetails.
        :rtype: list[str]
        """
        return self._clause_names

    @clause_names.setter
    def clause_names(self, clause_names):
        """Sets the clause_names of this FieldDetails.

        The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).

        :param clause_names: The clause_names of this FieldDetails.
        :type clause_names: list[str]
        """

        self._clause_names = clause_names

    @property
    def custom(self):
        """Gets the custom of this FieldDetails.

        Whether the field is a custom field.

        :return: The custom of this FieldDetails.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this FieldDetails.

        Whether the field is a custom field.

        :param custom: The custom of this FieldDetails.
        :type custom: bool
        """

        self._custom = custom

    @property
    def id(self):
        """Gets the id of this FieldDetails.

        The ID of the field.

        :return: The id of this FieldDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldDetails.

        The ID of the field.

        :param id: The id of this FieldDetails.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this FieldDetails.

        The key of the field.

        :return: The key of this FieldDetails.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FieldDetails.

        The key of the field.

        :param key: The key of this FieldDetails.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this FieldDetails.

        The name of the field.

        :return: The name of this FieldDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldDetails.

        The name of the field.

        :param name: The name of this FieldDetails.
        :type name: str
        """

        self._name = name

    @property
    def navigable(self):
        """Gets the navigable of this FieldDetails.

        Whether the field can be used as a column on the issue navigator.

        :return: The navigable of this FieldDetails.
        :rtype: bool
        """
        return self._navigable

    @navigable.setter
    def navigable(self, navigable):
        """Sets the navigable of this FieldDetails.

        Whether the field can be used as a column on the issue navigator.

        :param navigable: The navigable of this FieldDetails.
        :type navigable: bool
        """

        self._navigable = navigable

    @property
    def orderable(self):
        """Gets the orderable of this FieldDetails.

        Whether the content of the field can be used to order lists.

        :return: The orderable of this FieldDetails.
        :rtype: bool
        """
        return self._orderable

    @orderable.setter
    def orderable(self, orderable):
        """Sets the orderable of this FieldDetails.

        Whether the content of the field can be used to order lists.

        :param orderable: The orderable of this FieldDetails.
        :type orderable: bool
        """

        self._orderable = orderable

    @property
    def _schema(self):
        """Gets the _schema of this FieldDetails.

        The data schema for the field.

        :return: The _schema of this FieldDetails.
        :rtype: JsonTypeBean
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this FieldDetails.

        The data schema for the field.

        :param _schema: The _schema of this FieldDetails.
        :type _schema: JsonTypeBean
        """

        self.__schema = _schema

    @property
    def scope(self):
        """Gets the scope of this FieldDetails.

        The scope of the field.

        :return: The scope of this FieldDetails.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this FieldDetails.

        The scope of the field.

        :param scope: The scope of this FieldDetails.
        :type scope: Scope
        """

        self._scope = scope

    @property
    def searchable(self):
        """Gets the searchable of this FieldDetails.

        Whether the content of the field can be searched.

        :return: The searchable of this FieldDetails.
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this FieldDetails.

        Whether the content of the field can be searched.

        :param searchable: The searchable of this FieldDetails.
        :type searchable: bool
        """

        self._searchable = searchable
