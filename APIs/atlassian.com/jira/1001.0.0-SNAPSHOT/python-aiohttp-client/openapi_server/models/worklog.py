# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_property import EntityProperty
from openapi_server.models.user_details import UserDetails
from openapi_server.models.visibility import Visibility
from openapi_server import util


class Worklog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: UserDetails=None, comment: object=None, created: datetime=None, id: str=None, issue_id: str=None, properties: List[EntityProperty]=None, _self: str=None, started: datetime=None, time_spent: str=None, time_spent_seconds: int=None, update_author: UserDetails=None, updated: datetime=None, visibility: Visibility=None):
        """Worklog - a model defined in OpenAPI

        :param author: The author of this Worklog.
        :param comment: The comment of this Worklog.
        :param created: The created of this Worklog.
        :param id: The id of this Worklog.
        :param issue_id: The issue_id of this Worklog.
        :param properties: The properties of this Worklog.
        :param _self: The _self of this Worklog.
        :param started: The started of this Worklog.
        :param time_spent: The time_spent of this Worklog.
        :param time_spent_seconds: The time_spent_seconds of this Worklog.
        :param update_author: The update_author of this Worklog.
        :param updated: The updated of this Worklog.
        :param visibility: The visibility of this Worklog.
        """
        self.openapi_types = {
            'author': UserDetails,
            'comment': object,
            'created': datetime,
            'id': str,
            'issue_id': str,
            'properties': List[EntityProperty],
            '_self': str,
            'started': datetime,
            'time_spent': str,
            'time_spent_seconds': int,
            'update_author': UserDetails,
            'updated': datetime,
            'visibility': Visibility
        }

        self.attribute_map = {
            'author': 'author',
            'comment': 'comment',
            'created': 'created',
            'id': 'id',
            'issue_id': 'issueId',
            'properties': 'properties',
            '_self': 'self',
            'started': 'started',
            'time_spent': 'timeSpent',
            'time_spent_seconds': 'timeSpentSeconds',
            'update_author': 'updateAuthor',
            'updated': 'updated',
            'visibility': 'visibility'
        }

        self._author = author
        self._comment = comment
        self._created = created
        self._id = id
        self._issue_id = issue_id
        self._properties = properties
        self.__self = _self
        self._started = started
        self._time_spent = time_spent
        self._time_spent_seconds = time_spent_seconds
        self._update_author = update_author
        self._updated = updated
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Worklog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Worklog of this Worklog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Worklog.

        Details of the user who created the worklog.

        :return: The author of this Worklog.
        :rtype: UserDetails
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Worklog.

        Details of the user who created the worklog.

        :param author: The author of this Worklog.
        :type author: UserDetails
        """

        self._author = author

    @property
    def comment(self):
        """Gets the comment of this Worklog.

        A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.

        :return: The comment of this Worklog.
        :rtype: object
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Worklog.

        A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.

        :param comment: The comment of this Worklog.
        :type comment: object
        """

        self._comment = comment

    @property
    def created(self):
        """Gets the created of this Worklog.

        The datetime on which the worklog was created.

        :return: The created of this Worklog.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Worklog.

        The datetime on which the worklog was created.

        :param created: The created of this Worklog.
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Worklog.

        The ID of the worklog record.

        :return: The id of this Worklog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Worklog.

        The ID of the worklog record.

        :param id: The id of this Worklog.
        :type id: str
        """

        self._id = id

    @property
    def issue_id(self):
        """Gets the issue_id of this Worklog.

        The ID of the issue this worklog is for.

        :return: The issue_id of this Worklog.
        :rtype: str
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this Worklog.

        The ID of the issue this worklog is for.

        :param issue_id: The issue_id of this Worklog.
        :type issue_id: str
        """

        self._issue_id = issue_id

    @property
    def properties(self):
        """Gets the properties of this Worklog.

        Details of properties for the worklog. Optional when creating or updating a worklog.

        :return: The properties of this Worklog.
        :rtype: List[EntityProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Worklog.

        Details of properties for the worklog. Optional when creating or updating a worklog.

        :param properties: The properties of this Worklog.
        :type properties: List[EntityProperty]
        """

        self._properties = properties

    @property
    def _self(self):
        """Gets the _self of this Worklog.

        The URL of the worklog item.

        :return: The _self of this Worklog.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Worklog.

        The URL of the worklog item.

        :param _self: The _self of this Worklog.
        :type _self: str
        """

        self.__self = _self

    @property
    def started(self):
        """Gets the started of this Worklog.

        The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.

        :return: The started of this Worklog.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Worklog.

        The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.

        :param started: The started of this Worklog.
        :type started: datetime
        """

        self._started = started

    @property
    def time_spent(self):
        """Gets the time_spent of this Worklog.

        The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.

        :return: The time_spent of this Worklog.
        :rtype: str
        """
        return self._time_spent

    @time_spent.setter
    def time_spent(self, time_spent):
        """Sets the time_spent of this Worklog.

        The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.

        :param time_spent: The time_spent of this Worklog.
        :type time_spent: str
        """

        self._time_spent = time_spent

    @property
    def time_spent_seconds(self):
        """Gets the time_spent_seconds of this Worklog.

        The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.

        :return: The time_spent_seconds of this Worklog.
        :rtype: int
        """
        return self._time_spent_seconds

    @time_spent_seconds.setter
    def time_spent_seconds(self, time_spent_seconds):
        """Sets the time_spent_seconds of this Worklog.

        The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.

        :param time_spent_seconds: The time_spent_seconds of this Worklog.
        :type time_spent_seconds: int
        """

        self._time_spent_seconds = time_spent_seconds

    @property
    def update_author(self):
        """Gets the update_author of this Worklog.

        Details of the user who last updated the worklog.

        :return: The update_author of this Worklog.
        :rtype: UserDetails
        """
        return self._update_author

    @update_author.setter
    def update_author(self, update_author):
        """Sets the update_author of this Worklog.

        Details of the user who last updated the worklog.

        :param update_author: The update_author of this Worklog.
        :type update_author: UserDetails
        """

        self._update_author = update_author

    @property
    def updated(self):
        """Gets the updated of this Worklog.

        The datetime on which the worklog was last updated.

        :return: The updated of this Worklog.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Worklog.

        The datetime on which the worklog was last updated.

        :param updated: The updated of this Worklog.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def visibility(self):
        """Gets the visibility of this Worklog.

        Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.

        :return: The visibility of this Worklog.
        :rtype: Visibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Worklog.

        Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.

        :param visibility: The visibility of this Worklog.
        :type visibility: Visibility
        """

        self._visibility = visibility
