# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_messages: List[str]=None, errors: Dict[str, str]=None, status: int=None):
        """ErrorCollection - a model defined in OpenAPI

        :param error_messages: The error_messages of this ErrorCollection.
        :param errors: The errors of this ErrorCollection.
        :param status: The status of this ErrorCollection.
        """
        self.openapi_types = {
            'error_messages': List[str],
            'errors': Dict[str, str],
            'status': int
        }

        self.attribute_map = {
            'error_messages': 'errorMessages',
            'errors': 'errors',
            'status': 'status'
        }

        self._error_messages = error_messages
        self._errors = errors
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorCollection of this ErrorCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_messages(self):
        """Gets the error_messages of this ErrorCollection.

        The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"

        :return: The error_messages of this ErrorCollection.
        :rtype: List[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this ErrorCollection.

        The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"

        :param error_messages: The error_messages of this ErrorCollection.
        :type error_messages: List[str]
        """

        self._error_messages = error_messages

    @property
    def errors(self):
        """Gets the errors of this ErrorCollection.

        The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"

        :return: The errors of this ErrorCollection.
        :rtype: Dict[str, str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorCollection.

        The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"

        :param errors: The errors of this ErrorCollection.
        :type errors: Dict[str, str]
        """

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this ErrorCollection.


        :return: The status of this ErrorCollection.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorCollection.


        :param status: The status of this ErrorCollection.
        :type status: int
        """

        self._status = status
