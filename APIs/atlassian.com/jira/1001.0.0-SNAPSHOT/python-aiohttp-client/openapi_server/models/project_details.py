# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.avatar_urls_bean import AvatarUrlsBean
from openapi_server.models.updated_project_category import UpdatedProjectCategory
from openapi_server import util


class ProjectDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_urls: AvatarUrlsBean=None, id: str=None, key: str=None, name: str=None, project_category: UpdatedProjectCategory=None, project_type_key: str=None, _self: str=None, simplified: bool=None):
        """ProjectDetails - a model defined in OpenAPI

        :param avatar_urls: The avatar_urls of this ProjectDetails.
        :param id: The id of this ProjectDetails.
        :param key: The key of this ProjectDetails.
        :param name: The name of this ProjectDetails.
        :param project_category: The project_category of this ProjectDetails.
        :param project_type_key: The project_type_key of this ProjectDetails.
        :param _self: The _self of this ProjectDetails.
        :param simplified: The simplified of this ProjectDetails.
        """
        self.openapi_types = {
            'avatar_urls': AvatarUrlsBean,
            'id': str,
            'key': str,
            'name': str,
            'project_category': UpdatedProjectCategory,
            'project_type_key': str,
            '_self': str,
            'simplified': bool
        }

        self.attribute_map = {
            'avatar_urls': 'avatarUrls',
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'project_category': 'projectCategory',
            'project_type_key': 'projectTypeKey',
            '_self': 'self',
            'simplified': 'simplified'
        }

        self._avatar_urls = avatar_urls
        self._id = id
        self._key = key
        self._name = name
        self._project_category = project_category
        self._project_type_key = project_type_key
        self.__self = _self
        self._simplified = simplified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectDetails of this ProjectDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_urls(self):
        """Gets the avatar_urls of this ProjectDetails.

        The URLs of the project's avatars.

        :return: The avatar_urls of this ProjectDetails.
        :rtype: AvatarUrlsBean
        """
        return self._avatar_urls

    @avatar_urls.setter
    def avatar_urls(self, avatar_urls):
        """Sets the avatar_urls of this ProjectDetails.

        The URLs of the project's avatars.

        :param avatar_urls: The avatar_urls of this ProjectDetails.
        :type avatar_urls: AvatarUrlsBean
        """

        self._avatar_urls = avatar_urls

    @property
    def id(self):
        """Gets the id of this ProjectDetails.

        The ID of the project.

        :return: The id of this ProjectDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectDetails.

        The ID of the project.

        :param id: The id of this ProjectDetails.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ProjectDetails.

        The key of the project.

        :return: The key of this ProjectDetails.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ProjectDetails.

        The key of the project.

        :param key: The key of this ProjectDetails.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ProjectDetails.

        The name of the project.

        :return: The name of this ProjectDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDetails.

        The name of the project.

        :param name: The name of this ProjectDetails.
        :type name: str
        """

        self._name = name

    @property
    def project_category(self):
        """Gets the project_category of this ProjectDetails.

        The category the project belongs to.

        :return: The project_category of this ProjectDetails.
        :rtype: UpdatedProjectCategory
        """
        return self._project_category

    @project_category.setter
    def project_category(self, project_category):
        """Sets the project_category of this ProjectDetails.

        The category the project belongs to.

        :param project_category: The project_category of this ProjectDetails.
        :type project_category: UpdatedProjectCategory
        """

        self._project_category = project_category

    @property
    def project_type_key(self):
        """Gets the project_type_key of this ProjectDetails.

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.

        :return: The project_type_key of this ProjectDetails.
        :rtype: str
        """
        return self._project_type_key

    @project_type_key.setter
    def project_type_key(self, project_type_key):
        """Sets the project_type_key of this ProjectDetails.

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.

        :param project_type_key: The project_type_key of this ProjectDetails.
        :type project_type_key: str
        """
        allowed_values = ["software", "service_desk", "business"]  # noqa: E501
        if project_type_key not in allowed_values:
            raise ValueError(
                "Invalid value for `project_type_key` ({0}), must be one of {1}"
                .format(project_type_key, allowed_values)
            )

        self._project_type_key = project_type_key

    @property
    def _self(self):
        """Gets the _self of this ProjectDetails.

        The URL of the project details.

        :return: The _self of this ProjectDetails.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ProjectDetails.

        The URL of the project details.

        :param _self: The _self of this ProjectDetails.
        :type _self: str
        """

        self.__self = _self

    @property
    def simplified(self):
        """Gets the simplified of this ProjectDetails.

        Whether or not the project is simplified.

        :return: The simplified of this ProjectDetails.
        :rtype: bool
        """
        return self._simplified

    @simplified.setter
    def simplified(self, simplified):
        """Sets the simplified of this ProjectDetails.

        Whether or not the project is simplified.

        :param simplified: The simplified of this ProjectDetails.
        :type simplified: bool
        """

        self._simplified = simplified
