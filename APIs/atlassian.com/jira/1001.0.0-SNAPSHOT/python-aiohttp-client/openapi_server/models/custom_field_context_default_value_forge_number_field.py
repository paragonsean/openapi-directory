# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContextDefaultValueForgeNumberField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_id: str=None, number: float=None, type: str=None):
        """CustomFieldContextDefaultValueForgeNumberField - a model defined in OpenAPI

        :param context_id: The context_id of this CustomFieldContextDefaultValueForgeNumberField.
        :param number: The number of this CustomFieldContextDefaultValueForgeNumberField.
        :param type: The type of this CustomFieldContextDefaultValueForgeNumberField.
        """
        self.openapi_types = {
            'context_id': str,
            'number': float,
            'type': str
        }

        self.attribute_map = {
            'context_id': 'contextId',
            'number': 'number',
            'type': 'type'
        }

        self._context_id = context_id
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldContextDefaultValueForgeNumberField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldContextDefaultValueForgeNumberField of this CustomFieldContextDefaultValueForgeNumberField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_id(self):
        """Gets the context_id of this CustomFieldContextDefaultValueForgeNumberField.

        The ID of the context.

        :return: The context_id of this CustomFieldContextDefaultValueForgeNumberField.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this CustomFieldContextDefaultValueForgeNumberField.

        The ID of the context.

        :param context_id: The context_id of this CustomFieldContextDefaultValueForgeNumberField.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")

        self._context_id = context_id

    @property
    def number(self):
        """Gets the number of this CustomFieldContextDefaultValueForgeNumberField.

        The default floating-point number.

        :return: The number of this CustomFieldContextDefaultValueForgeNumberField.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CustomFieldContextDefaultValueForgeNumberField.

        The default floating-point number.

        :param number: The number of this CustomFieldContextDefaultValueForgeNumberField.
        :type number: float
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this CustomFieldContextDefaultValueForgeNumberField.


        :return: The type of this CustomFieldContextDefaultValueForgeNumberField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldContextDefaultValueForgeNumberField.


        :param type: The type of this CustomFieldContextDefaultValueForgeNumberField.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
