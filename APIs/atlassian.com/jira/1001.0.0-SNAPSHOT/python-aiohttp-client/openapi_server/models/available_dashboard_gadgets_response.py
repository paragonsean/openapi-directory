# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_dashboard_gadget import AvailableDashboardGadget
from openapi_server import util


class AvailableDashboardGadgetsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gadgets: List[AvailableDashboardGadget]=None):
        """AvailableDashboardGadgetsResponse - a model defined in OpenAPI

        :param gadgets: The gadgets of this AvailableDashboardGadgetsResponse.
        """
        self.openapi_types = {
            'gadgets': List[AvailableDashboardGadget]
        }

        self.attribute_map = {
            'gadgets': 'gadgets'
        }

        self._gadgets = gadgets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableDashboardGadgetsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableDashboardGadgetsResponse of this AvailableDashboardGadgetsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gadgets(self):
        """Gets the gadgets of this AvailableDashboardGadgetsResponse.

        The list of available gadgets.

        :return: The gadgets of this AvailableDashboardGadgetsResponse.
        :rtype: List[AvailableDashboardGadget]
        """
        return self._gadgets

    @gadgets.setter
    def gadgets(self, gadgets):
        """Sets the gadgets of this AvailableDashboardGadgetsResponse.

        The list of available gadgets.

        :param gadgets: The gadgets of this AvailableDashboardGadgetsResponse.
        :type gadgets: List[AvailableDashboardGadget]
        """
        if gadgets is None:
            raise ValueError("Invalid value for `gadgets`, must not be `None`")

        self._gadgets = gadgets
