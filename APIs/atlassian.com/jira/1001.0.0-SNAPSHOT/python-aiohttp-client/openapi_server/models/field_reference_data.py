# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldReferenceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto: str=None, cfid: str=None, deprecated: str=None, deprecated_searcher_key: str=None, display_name: str=None, operators: List[str]=None, orderable: str=None, searchable: str=None, types: List[str]=None, value: str=None):
        """FieldReferenceData - a model defined in OpenAPI

        :param auto: The auto of this FieldReferenceData.
        :param cfid: The cfid of this FieldReferenceData.
        :param deprecated: The deprecated of this FieldReferenceData.
        :param deprecated_searcher_key: The deprecated_searcher_key of this FieldReferenceData.
        :param display_name: The display_name of this FieldReferenceData.
        :param operators: The operators of this FieldReferenceData.
        :param orderable: The orderable of this FieldReferenceData.
        :param searchable: The searchable of this FieldReferenceData.
        :param types: The types of this FieldReferenceData.
        :param value: The value of this FieldReferenceData.
        """
        self.openapi_types = {
            'auto': str,
            'cfid': str,
            'deprecated': str,
            'deprecated_searcher_key': str,
            'display_name': str,
            'operators': List[str],
            'orderable': str,
            'searchable': str,
            'types': List[str],
            'value': str
        }

        self.attribute_map = {
            'auto': 'auto',
            'cfid': 'cfid',
            'deprecated': 'deprecated',
            'deprecated_searcher_key': 'deprecatedSearcherKey',
            'display_name': 'displayName',
            'operators': 'operators',
            'orderable': 'orderable',
            'searchable': 'searchable',
            'types': 'types',
            'value': 'value'
        }

        self._auto = auto
        self._cfid = cfid
        self._deprecated = deprecated
        self._deprecated_searcher_key = deprecated_searcher_key
        self._display_name = display_name
        self._operators = operators
        self._orderable = orderable
        self._searchable = searchable
        self._types = types
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldReferenceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldReferenceData of this FieldReferenceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto(self):
        """Gets the auto of this FieldReferenceData.

        Whether the field provide auto-complete suggestions.

        :return: The auto of this FieldReferenceData.
        :rtype: str
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this FieldReferenceData.

        Whether the field provide auto-complete suggestions.

        :param auto: The auto of this FieldReferenceData.
        :type auto: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if auto not in allowed_values:
            raise ValueError(
                "Invalid value for `auto` ({0}), must be one of {1}"
                .format(auto, allowed_values)
            )

        self._auto = auto

    @property
    def cfid(self):
        """Gets the cfid of this FieldReferenceData.

        If the item is a custom field, the ID of the custom field.

        :return: The cfid of this FieldReferenceData.
        :rtype: str
        """
        return self._cfid

    @cfid.setter
    def cfid(self, cfid):
        """Sets the cfid of this FieldReferenceData.

        If the item is a custom field, the ID of the custom field.

        :param cfid: The cfid of this FieldReferenceData.
        :type cfid: str
        """

        self._cfid = cfid

    @property
    def deprecated(self):
        """Gets the deprecated of this FieldReferenceData.

        Whether this field has been deprecated.

        :return: The deprecated of this FieldReferenceData.
        :rtype: str
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this FieldReferenceData.

        Whether this field has been deprecated.

        :param deprecated: The deprecated of this FieldReferenceData.
        :type deprecated: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if deprecated not in allowed_values:
            raise ValueError(
                "Invalid value for `deprecated` ({0}), must be one of {1}"
                .format(deprecated, allowed_values)
            )

        self._deprecated = deprecated

    @property
    def deprecated_searcher_key(self):
        """Gets the deprecated_searcher_key of this FieldReferenceData.

        The searcher key of the field, only passed when the field is deprecated.

        :return: The deprecated_searcher_key of this FieldReferenceData.
        :rtype: str
        """
        return self._deprecated_searcher_key

    @deprecated_searcher_key.setter
    def deprecated_searcher_key(self, deprecated_searcher_key):
        """Sets the deprecated_searcher_key of this FieldReferenceData.

        The searcher key of the field, only passed when the field is deprecated.

        :param deprecated_searcher_key: The deprecated_searcher_key of this FieldReferenceData.
        :type deprecated_searcher_key: str
        """

        self._deprecated_searcher_key = deprecated_searcher_key

    @property
    def display_name(self):
        """Gets the display_name of this FieldReferenceData.

        The display name contains the following:   *  for system fields, the field name. For example, `Summary`.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.

        :return: The display_name of this FieldReferenceData.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FieldReferenceData.

        The display name contains the following:   *  for system fields, the field name. For example, `Summary`.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.

        :param display_name: The display_name of this FieldReferenceData.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def operators(self):
        """Gets the operators of this FieldReferenceData.

        The valid search operators for the field.

        :return: The operators of this FieldReferenceData.
        :rtype: List[str]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """Sets the operators of this FieldReferenceData.

        The valid search operators for the field.

        :param operators: The operators of this FieldReferenceData.
        :type operators: List[str]
        """

        self._operators = operators

    @property
    def orderable(self):
        """Gets the orderable of this FieldReferenceData.

        Whether the field can be used in a query's `ORDER BY` clause.

        :return: The orderable of this FieldReferenceData.
        :rtype: str
        """
        return self._orderable

    @orderable.setter
    def orderable(self, orderable):
        """Sets the orderable of this FieldReferenceData.

        Whether the field can be used in a query's `ORDER BY` clause.

        :param orderable: The orderable of this FieldReferenceData.
        :type orderable: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if orderable not in allowed_values:
            raise ValueError(
                "Invalid value for `orderable` ({0}), must be one of {1}"
                .format(orderable, allowed_values)
            )

        self._orderable = orderable

    @property
    def searchable(self):
        """Gets the searchable of this FieldReferenceData.

        Whether the content of this field can be searched.

        :return: The searchable of this FieldReferenceData.
        :rtype: str
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this FieldReferenceData.

        Whether the content of this field can be searched.

        :param searchable: The searchable of this FieldReferenceData.
        :type searchable: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if searchable not in allowed_values:
            raise ValueError(
                "Invalid value for `searchable` ({0}), must be one of {1}"
                .format(searchable, allowed_values)
            )

        self._searchable = searchable

    @property
    def types(self):
        """Gets the types of this FieldReferenceData.

        The data types of items in the field.

        :return: The types of this FieldReferenceData.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this FieldReferenceData.

        The data types of items in the field.

        :param types: The types of this FieldReferenceData.
        :type types: List[str]
        """

        self._types = types

    @property
    def value(self):
        """Gets the value of this FieldReferenceData.

        The field identifier.

        :return: The value of this FieldReferenceData.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldReferenceData.

        The field identifier.

        :param value: The value of this FieldReferenceData.
        :type value: str
        """

        self._value = value
