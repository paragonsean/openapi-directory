# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_subscriptions_list import FilterSubscriptionsList
from openapi_server.models.share_permission import SharePermission
from openapi_server.models.user import User
from openapi_server.models.user_list import UserList
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, edit_permissions: List[SharePermission]=None, favourite: bool=None, favourited_count: int=None, id: str=None, jql: str=None, name: str=None, owner: User=None, search_url: str=None, _self: str=None, share_permissions: List[SharePermission]=None, shared_users: UserList=None, subscriptions: FilterSubscriptionsList=None, view_url: str=None):
        """Filter - a model defined in OpenAPI

        :param description: The description of this Filter.
        :param edit_permissions: The edit_permissions of this Filter.
        :param favourite: The favourite of this Filter.
        :param favourited_count: The favourited_count of this Filter.
        :param id: The id of this Filter.
        :param jql: The jql of this Filter.
        :param name: The name of this Filter.
        :param owner: The owner of this Filter.
        :param search_url: The search_url of this Filter.
        :param _self: The _self of this Filter.
        :param share_permissions: The share_permissions of this Filter.
        :param shared_users: The shared_users of this Filter.
        :param subscriptions: The subscriptions of this Filter.
        :param view_url: The view_url of this Filter.
        """
        self.openapi_types = {
            'description': str,
            'edit_permissions': List[SharePermission],
            'favourite': bool,
            'favourited_count': int,
            'id': str,
            'jql': str,
            'name': str,
            'owner': User,
            'search_url': str,
            '_self': str,
            'share_permissions': List[SharePermission],
            'shared_users': UserList,
            'subscriptions': FilterSubscriptionsList,
            'view_url': str
        }

        self.attribute_map = {
            'description': 'description',
            'edit_permissions': 'editPermissions',
            'favourite': 'favourite',
            'favourited_count': 'favouritedCount',
            'id': 'id',
            'jql': 'jql',
            'name': 'name',
            'owner': 'owner',
            'search_url': 'searchUrl',
            '_self': 'self',
            'share_permissions': 'sharePermissions',
            'shared_users': 'sharedUsers',
            'subscriptions': 'subscriptions',
            'view_url': 'viewUrl'
        }

        self._description = description
        self._edit_permissions = edit_permissions
        self._favourite = favourite
        self._favourited_count = favourited_count
        self._id = id
        self._jql = jql
        self._name = name
        self._owner = owner
        self._search_url = search_url
        self.__self = _self
        self._share_permissions = share_permissions
        self._shared_users = shared_users
        self._subscriptions = subscriptions
        self._view_url = view_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Filter.

        A description of the filter.

        :return: The description of this Filter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Filter.

        A description of the filter.

        :param description: The description of this Filter.
        :type description: str
        """

        self._description = description

    @property
    def edit_permissions(self):
        """Gets the edit_permissions of this Filter.

        The groups and projects that can edit the filter.

        :return: The edit_permissions of this Filter.
        :rtype: List[SharePermission]
        """
        return self._edit_permissions

    @edit_permissions.setter
    def edit_permissions(self, edit_permissions):
        """Sets the edit_permissions of this Filter.

        The groups and projects that can edit the filter.

        :param edit_permissions: The edit_permissions of this Filter.
        :type edit_permissions: List[SharePermission]
        """

        self._edit_permissions = edit_permissions

    @property
    def favourite(self):
        """Gets the favourite of this Filter.

        Whether the filter is selected as a favorite.

        :return: The favourite of this Filter.
        :rtype: bool
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite):
        """Sets the favourite of this Filter.

        Whether the filter is selected as a favorite.

        :param favourite: The favourite of this Filter.
        :type favourite: bool
        """

        self._favourite = favourite

    @property
    def favourited_count(self):
        """Gets the favourited_count of this Filter.

        The count of how many users have selected this filter as a favorite, including the filter owner.

        :return: The favourited_count of this Filter.
        :rtype: int
        """
        return self._favourited_count

    @favourited_count.setter
    def favourited_count(self, favourited_count):
        """Sets the favourited_count of this Filter.

        The count of how many users have selected this filter as a favorite, including the filter owner.

        :param favourited_count: The favourited_count of this Filter.
        :type favourited_count: int
        """

        self._favourited_count = favourited_count

    @property
    def id(self):
        """Gets the id of this Filter.

        The unique identifier for the filter.

        :return: The id of this Filter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Filter.

        The unique identifier for the filter.

        :param id: The id of this Filter.
        :type id: str
        """

        self._id = id

    @property
    def jql(self):
        """Gets the jql of this Filter.

        The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.

        :return: The jql of this Filter.
        :rtype: str
        """
        return self._jql

    @jql.setter
    def jql(self, jql):
        """Sets the jql of this Filter.

        The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.

        :param jql: The jql of this Filter.
        :type jql: str
        """

        self._jql = jql

    @property
    def name(self):
        """Gets the name of this Filter.

        The name of the filter. Must be unique.

        :return: The name of this Filter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Filter.

        The name of the filter. Must be unique.

        :param name: The name of this Filter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Filter.

        The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.

        :return: The owner of this Filter.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Filter.

        The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.

        :param owner: The owner of this Filter.
        :type owner: User
        """

        self._owner = owner

    @property
    def search_url(self):
        """Gets the search_url of this Filter.

        A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.

        :return: The search_url of this Filter.
        :rtype: str
        """
        return self._search_url

    @search_url.setter
    def search_url(self, search_url):
        """Sets the search_url of this Filter.

        A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.

        :param search_url: The search_url of this Filter.
        :type search_url: str
        """

        self._search_url = search_url

    @property
    def _self(self):
        """Gets the _self of this Filter.

        The URL of the filter.

        :return: The _self of this Filter.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Filter.

        The URL of the filter.

        :param _self: The _self of this Filter.
        :type _self: str
        """

        self.__self = _self

    @property
    def share_permissions(self):
        """Gets the share_permissions of this Filter.

        The groups and projects that the filter is shared with.

        :return: The share_permissions of this Filter.
        :rtype: List[SharePermission]
        """
        return self._share_permissions

    @share_permissions.setter
    def share_permissions(self, share_permissions):
        """Sets the share_permissions of this Filter.

        The groups and projects that the filter is shared with.

        :param share_permissions: The share_permissions of this Filter.
        :type share_permissions: List[SharePermission]
        """

        self._share_permissions = share_permissions

    @property
    def shared_users(self):
        """Gets the shared_users of this Filter.

        A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.

        :return: The shared_users of this Filter.
        :rtype: UserList
        """
        return self._shared_users

    @shared_users.setter
    def shared_users(self, shared_users):
        """Sets the shared_users of this Filter.

        A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.

        :param shared_users: The shared_users of this Filter.
        :type shared_users: UserList
        """

        self._shared_users = shared_users

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Filter.

        A paginated list of the users that are subscribed to the filter.

        :return: The subscriptions of this Filter.
        :rtype: FilterSubscriptionsList
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Filter.

        A paginated list of the users that are subscribed to the filter.

        :param subscriptions: The subscriptions of this Filter.
        :type subscriptions: FilterSubscriptionsList
        """

        self._subscriptions = subscriptions

    @property
    def view_url(self):
        """Gets the view_url of this Filter.

        A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.

        :return: The view_url of this Filter.
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this Filter.

        A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.

        :param view_url: The view_url of this Filter.
        :type view_url: str
        """

        self._view_url = view_url
