# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowOperations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_delete: bool=None, can_edit: bool=None):
        """WorkflowOperations - a model defined in OpenAPI

        :param can_delete: The can_delete of this WorkflowOperations.
        :param can_edit: The can_edit of this WorkflowOperations.
        """
        self.openapi_types = {
            'can_delete': bool,
            'can_edit': bool
        }

        self.attribute_map = {
            'can_delete': 'canDelete',
            'can_edit': 'canEdit'
        }

        self._can_delete = can_delete
        self._can_edit = can_edit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowOperations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowOperations of this WorkflowOperations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_delete(self):
        """Gets the can_delete of this WorkflowOperations.

        Whether the workflow can be deleted.

        :return: The can_delete of this WorkflowOperations.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this WorkflowOperations.

        Whether the workflow can be deleted.

        :param can_delete: The can_delete of this WorkflowOperations.
        :type can_delete: bool
        """
        if can_delete is None:
            raise ValueError("Invalid value for `can_delete`, must not be `None`")

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this WorkflowOperations.

        Whether the workflow can be updated.

        :return: The can_edit of this WorkflowOperations.
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this WorkflowOperations.

        Whether the workflow can be updated.

        :param can_edit: The can_edit of this WorkflowOperations.
        :type can_edit: bool
        """
        if can_edit is None:
            raise ValueError("Invalid value for `can_edit`, must not be `None`")

        self._can_edit = can_edit
