# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTypeSchemeID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_type_scheme_id: str=None):
        """IssueTypeSchemeID - a model defined in OpenAPI

        :param issue_type_scheme_id: The issue_type_scheme_id of this IssueTypeSchemeID.
        """
        self.openapi_types = {
            'issue_type_scheme_id': str
        }

        self.attribute_map = {
            'issue_type_scheme_id': 'issueTypeSchemeId'
        }

        self._issue_type_scheme_id = issue_type_scheme_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTypeSchemeID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTypeSchemeID of this IssueTypeSchemeID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_type_scheme_id(self):
        """Gets the issue_type_scheme_id of this IssueTypeSchemeID.

        The ID of the issue type scheme.

        :return: The issue_type_scheme_id of this IssueTypeSchemeID.
        :rtype: str
        """
        return self._issue_type_scheme_id

    @issue_type_scheme_id.setter
    def issue_type_scheme_id(self, issue_type_scheme_id):
        """Sets the issue_type_scheme_id of this IssueTypeSchemeID.

        The ID of the issue type scheme.

        :param issue_type_scheme_id: The issue_type_scheme_id of this IssueTypeSchemeID.
        :type issue_type_scheme_id: str
        """
        if issue_type_scheme_id is None:
            raise ValueError("Invalid value for `issue_type_scheme_id`, must not be `None`")

        self._issue_type_scheme_id = issue_type_scheme_id
