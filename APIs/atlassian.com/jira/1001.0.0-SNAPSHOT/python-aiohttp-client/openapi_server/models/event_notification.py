# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_details import FieldDetails
from openapi_server.models.group_name import GroupName
from openapi_server.models.project_role import ProjectRole
from openapi_server.models.user_details import UserDetails
from openapi_server import util


class EventNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, expand: str=None, _field: FieldDetails=None, group: GroupName=None, id: int=None, notification_type: str=None, parameter: str=None, project_role: ProjectRole=None, recipient: str=None, user: UserDetails=None):
        """EventNotification - a model defined in OpenAPI

        :param email_address: The email_address of this EventNotification.
        :param expand: The expand of this EventNotification.
        :param _field: The _field of this EventNotification.
        :param group: The group of this EventNotification.
        :param id: The id of this EventNotification.
        :param notification_type: The notification_type of this EventNotification.
        :param parameter: The parameter of this EventNotification.
        :param project_role: The project_role of this EventNotification.
        :param recipient: The recipient of this EventNotification.
        :param user: The user of this EventNotification.
        """
        self.openapi_types = {
            'email_address': str,
            'expand': str,
            '_field': FieldDetails,
            'group': GroupName,
            'id': int,
            'notification_type': str,
            'parameter': str,
            'project_role': ProjectRole,
            'recipient': str,
            'user': UserDetails
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'expand': 'expand',
            '_field': 'field',
            'group': 'group',
            'id': 'id',
            'notification_type': 'notificationType',
            'parameter': 'parameter',
            'project_role': 'projectRole',
            'recipient': 'recipient',
            'user': 'user'
        }

        self._email_address = email_address
        self._expand = expand
        self.__field = _field
        self._group = group
        self._id = id
        self._notification_type = notification_type
        self._parameter = parameter
        self._project_role = project_role
        self._recipient = recipient
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventNotification of this EventNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this EventNotification.

        The email address.

        :return: The email_address of this EventNotification.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EventNotification.

        The email address.

        :param email_address: The email_address of this EventNotification.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def expand(self):
        """Gets the expand of this EventNotification.

        Expand options that include additional event notification details in the response.

        :return: The expand of this EventNotification.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this EventNotification.

        Expand options that include additional event notification details in the response.

        :param expand: The expand of this EventNotification.
        :type expand: str
        """

        self._expand = expand

    @property
    def _field(self):
        """Gets the _field of this EventNotification.

        The custom user or group field.

        :return: The _field of this EventNotification.
        :rtype: FieldDetails
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this EventNotification.

        The custom user or group field.

        :param _field: The _field of this EventNotification.
        :type _field: FieldDetails
        """

        self.__field = _field

    @property
    def group(self):
        """Gets the group of this EventNotification.

        The specified group.

        :return: The group of this EventNotification.
        :rtype: GroupName
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this EventNotification.

        The specified group.

        :param group: The group of this EventNotification.
        :type group: GroupName
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this EventNotification.

        The ID of the notification.

        :return: The id of this EventNotification.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventNotification.

        The ID of the notification.

        :param id: The id of this EventNotification.
        :type id: int
        """

        self._id = id

    @property
    def notification_type(self):
        """Gets the notification_type of this EventNotification.

        Identifies the recipients of the notification.

        :return: The notification_type of this EventNotification.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this EventNotification.

        Identifies the recipients of the notification.

        :param notification_type: The notification_type of this EventNotification.
        :type notification_type: str
        """
        allowed_values = ["CurrentAssignee", "Reporter", "CurrentUser", "ProjectLead", "ComponentLead", "User", "Group", "ProjectRole", "EmailAddress", "AllWatchers", "UserCustomField", "GroupCustomField"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def parameter(self):
        """Gets the parameter of this EventNotification.

        As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.

        :return: The parameter of this EventNotification.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this EventNotification.

        As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.

        :param parameter: The parameter of this EventNotification.
        :type parameter: str
        """

        self._parameter = parameter

    @property
    def project_role(self):
        """Gets the project_role of this EventNotification.

        The specified project role.

        :return: The project_role of this EventNotification.
        :rtype: ProjectRole
        """
        return self._project_role

    @project_role.setter
    def project_role(self, project_role):
        """Sets the project_role of this EventNotification.

        The specified project role.

        :param project_role: The project_role of this EventNotification.
        :type project_role: ProjectRole
        """

        self._project_role = project_role

    @property
    def recipient(self):
        """Gets the recipient of this EventNotification.

        The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.

        :return: The recipient of this EventNotification.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this EventNotification.

        The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.

        :param recipient: The recipient of this EventNotification.
        :type recipient: str
        """

        self._recipient = recipient

    @property
    def user(self):
        """Gets the user of this EventNotification.

        The specified user.

        :return: The user of this EventNotification.
        :rtype: UserDetails
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventNotification.

        The specified user.

        :param user: The user of this EventNotification.
        :type user: UserDetails
        """

        self._user = user
