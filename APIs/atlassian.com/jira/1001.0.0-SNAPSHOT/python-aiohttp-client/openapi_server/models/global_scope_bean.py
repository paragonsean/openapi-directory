# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GlobalScopeBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: list[str]=None):
        """GlobalScopeBean - a model defined in OpenAPI

        :param attributes: The attributes of this GlobalScopeBean.
        """
        self.openapi_types = {
            'attributes': list[str]
        }

        self.attribute_map = {
            'attributes': 'attributes'
        }

        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalScopeBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalScopeBean of this GlobalScopeBean.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this GlobalScopeBean.

        Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.

        :return: The attributes of this GlobalScopeBean.
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GlobalScopeBean.

        Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.

        :param attributes: The attributes of this GlobalScopeBean.
        :type attributes: list[str]
        """
        allowed_values = ["notSelectable", "defaultValue"]  # noqa: E501
        if not set(attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._attributes = attributes
