# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldLastUsed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, value: datetime=None):
        """FieldLastUsed - a model defined in OpenAPI

        :param type: The type of this FieldLastUsed.
        :param value: The value of this FieldLastUsed.
        """
        self.openapi_types = {
            'type': str,
            'value': datetime
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value'
        }

        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldLastUsed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldLastUsed of this FieldLastUsed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this FieldLastUsed.

        Last used value type:   *  *TRACKED*: field is tracked and a last used date is available.  *  *NOT\\_TRACKED*: field is not tracked, last used date is not available.  *  *NO\\_INFORMATION*: field is tracked, but no last used date is available.

        :return: The type of this FieldLastUsed.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldLastUsed.

        Last used value type:   *  *TRACKED*: field is tracked and a last used date is available.  *  *NOT\\_TRACKED*: field is not tracked, last used date is not available.  *  *NO\\_INFORMATION*: field is tracked, but no last used date is available.

        :param type: The type of this FieldLastUsed.
        :type type: str
        """
        allowed_values = ["TRACKED", "NOT_TRACKED", "NO_INFORMATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this FieldLastUsed.

        The date when the value of the field last changed.

        :return: The value of this FieldLastUsed.
        :rtype: datetime
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldLastUsed.

        The date when the value of the field last changed.

        :param value: The value of this FieldLastUsed.
        :type value: datetime
        """

        self._value = value
