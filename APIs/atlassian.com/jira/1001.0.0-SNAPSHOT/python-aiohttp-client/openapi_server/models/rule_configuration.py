# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuleConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled: bool=False, tag: str=None, value: str=None):
        """RuleConfiguration - a model defined in OpenAPI

        :param disabled: The disabled of this RuleConfiguration.
        :param tag: The tag of this RuleConfiguration.
        :param value: The value of this RuleConfiguration.
        """
        self.openapi_types = {
            'disabled': bool,
            'tag': str,
            'value': str
        }

        self.attribute_map = {
            'disabled': 'disabled',
            'tag': 'tag',
            'value': 'value'
        }

        self._disabled = disabled
        self._tag = tag
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleConfiguration of this RuleConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self):
        """Gets the disabled of this RuleConfiguration.

        EXPERIMENTAL: Whether the rule is disabled.

        :return: The disabled of this RuleConfiguration.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this RuleConfiguration.

        EXPERIMENTAL: Whether the rule is disabled.

        :param disabled: The disabled of this RuleConfiguration.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def tag(self):
        """Gets the tag of this RuleConfiguration.

        EXPERIMENTAL: A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).

        :return: The tag of this RuleConfiguration.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this RuleConfiguration.

        EXPERIMENTAL: A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).

        :param tag: The tag of this RuleConfiguration.
        :type tag: str
        """
        if tag is not None and len(tag) > 255:
            raise ValueError("Invalid value for `tag`, length must be less than or equal to `255`")

        self._tag = tag

    @property
    def value(self):
        """Gets the value of this RuleConfiguration.

        Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page.

        :return: The value of this RuleConfiguration.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RuleConfiguration.

        Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page.

        :param value: The value of this RuleConfiguration.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
