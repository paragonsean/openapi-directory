# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_property import EntityProperty
from openapi_server.models.user_details import UserDetails
from openapi_server.models.visibility import Visibility
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: UserDetails=None, body: object=None, created: datetime=None, id: str=None, jsd_author_can_see_request: bool=None, jsd_public: bool=None, properties: List[EntityProperty]=None, rendered_body: str=None, _self: str=None, update_author: UserDetails=None, updated: datetime=None, visibility: Visibility=None):
        """Comment - a model defined in OpenAPI

        :param author: The author of this Comment.
        :param body: The body of this Comment.
        :param created: The created of this Comment.
        :param id: The id of this Comment.
        :param jsd_author_can_see_request: The jsd_author_can_see_request of this Comment.
        :param jsd_public: The jsd_public of this Comment.
        :param properties: The properties of this Comment.
        :param rendered_body: The rendered_body of this Comment.
        :param _self: The _self of this Comment.
        :param update_author: The update_author of this Comment.
        :param updated: The updated of this Comment.
        :param visibility: The visibility of this Comment.
        """
        self.openapi_types = {
            'author': UserDetails,
            'body': object,
            'created': datetime,
            'id': str,
            'jsd_author_can_see_request': bool,
            'jsd_public': bool,
            'properties': List[EntityProperty],
            'rendered_body': str,
            '_self': str,
            'update_author': UserDetails,
            'updated': datetime,
            'visibility': Visibility
        }

        self.attribute_map = {
            'author': 'author',
            'body': 'body',
            'created': 'created',
            'id': 'id',
            'jsd_author_can_see_request': 'jsdAuthorCanSeeRequest',
            'jsd_public': 'jsdPublic',
            'properties': 'properties',
            'rendered_body': 'renderedBody',
            '_self': 'self',
            'update_author': 'updateAuthor',
            'updated': 'updated',
            'visibility': 'visibility'
        }

        self._author = author
        self._body = body
        self._created = created
        self._id = id
        self._jsd_author_can_see_request = jsd_author_can_see_request
        self._jsd_public = jsd_public
        self._properties = properties
        self._rendered_body = rendered_body
        self.__self = _self
        self._update_author = update_author
        self._updated = updated
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Comment.

        The ID of the user who created the comment.

        :return: The author of this Comment.
        :rtype: UserDetails
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Comment.

        The ID of the user who created the comment.

        :param author: The author of this Comment.
        :type author: UserDetails
        """

        self._author = author

    @property
    def body(self):
        """Gets the body of this Comment.

        The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).

        :return: The body of this Comment.
        :rtype: object
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Comment.

        The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).

        :param body: The body of this Comment.
        :type body: object
        """

        self._body = body

    @property
    def created(self):
        """Gets the created of this Comment.

        The date and time at which the comment was created.

        :return: The created of this Comment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Comment.

        The date and time at which the comment was created.

        :param created: The created of this Comment.
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Comment.

        The ID of the comment.

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        The ID of the comment.

        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def jsd_author_can_see_request(self):
        """Gets the jsd_author_can_see_request of this Comment.

        Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.

        :return: The jsd_author_can_see_request of this Comment.
        :rtype: bool
        """
        return self._jsd_author_can_see_request

    @jsd_author_can_see_request.setter
    def jsd_author_can_see_request(self, jsd_author_can_see_request):
        """Sets the jsd_author_can_see_request of this Comment.

        Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.

        :param jsd_author_can_see_request: The jsd_author_can_see_request of this Comment.
        :type jsd_author_can_see_request: bool
        """

        self._jsd_author_can_see_request = jsd_author_can_see_request

    @property
    def jsd_public(self):
        """Gets the jsd_public of this Comment.

        Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.

        :return: The jsd_public of this Comment.
        :rtype: bool
        """
        return self._jsd_public

    @jsd_public.setter
    def jsd_public(self, jsd_public):
        """Sets the jsd_public of this Comment.

        Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.

        :param jsd_public: The jsd_public of this Comment.
        :type jsd_public: bool
        """

        self._jsd_public = jsd_public

    @property
    def properties(self):
        """Gets the properties of this Comment.

        A list of comment properties. Optional on create and update.

        :return: The properties of this Comment.
        :rtype: List[EntityProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Comment.

        A list of comment properties. Optional on create and update.

        :param properties: The properties of this Comment.
        :type properties: List[EntityProperty]
        """

        self._properties = properties

    @property
    def rendered_body(self):
        """Gets the rendered_body of this Comment.

        The rendered version of the comment.

        :return: The rendered_body of this Comment.
        :rtype: str
        """
        return self._rendered_body

    @rendered_body.setter
    def rendered_body(self, rendered_body):
        """Sets the rendered_body of this Comment.

        The rendered version of the comment.

        :param rendered_body: The rendered_body of this Comment.
        :type rendered_body: str
        """

        self._rendered_body = rendered_body

    @property
    def _self(self):
        """Gets the _self of this Comment.

        The URL of the comment.

        :return: The _self of this Comment.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Comment.

        The URL of the comment.

        :param _self: The _self of this Comment.
        :type _self: str
        """

        self.__self = _self

    @property
    def update_author(self):
        """Gets the update_author of this Comment.

        The ID of the user who updated the comment last.

        :return: The update_author of this Comment.
        :rtype: UserDetails
        """
        return self._update_author

    @update_author.setter
    def update_author(self, update_author):
        """Sets the update_author of this Comment.

        The ID of the user who updated the comment last.

        :param update_author: The update_author of this Comment.
        :type update_author: UserDetails
        """

        self._update_author = update_author

    @property
    def updated(self):
        """Gets the updated of this Comment.

        The date and time at which the comment was updated last.

        :return: The updated of this Comment.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Comment.

        The date and time at which the comment was updated last.

        :param updated: The updated of this Comment.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def visibility(self):
        """Gets the visibility of this Comment.

        The group or role to which this comment is visible. Optional on create and update.

        :return: The visibility of this Comment.
        :rtype: Visibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Comment.

        The group or role to which this comment is visible. Optional on create and update.

        :param visibility: The visibility of this Comment.
        :type visibility: Visibility
        """

        self._visibility = visibility
