# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowRulesSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand: str=None, rule_ids: List[str]=None, workflow_entity_id: str=None):
        """WorkflowRulesSearch - a model defined in OpenAPI

        :param expand: The expand of this WorkflowRulesSearch.
        :param rule_ids: The rule_ids of this WorkflowRulesSearch.
        :param workflow_entity_id: The workflow_entity_id of this WorkflowRulesSearch.
        """
        self.openapi_types = {
            'expand': str,
            'rule_ids': List[str],
            'workflow_entity_id': str
        }

        self.attribute_map = {
            'expand': 'expand',
            'rule_ids': 'ruleIds',
            'workflow_entity_id': 'workflowEntityId'
        }

        self._expand = expand
        self._rule_ids = rule_ids
        self._workflow_entity_id = workflow_entity_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowRulesSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowRulesSearch of this WorkflowRulesSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self):
        """Gets the expand of this WorkflowRulesSearch.

        Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.

        :return: The expand of this WorkflowRulesSearch.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this WorkflowRulesSearch.

        Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.

        :param expand: The expand of this WorkflowRulesSearch.
        :type expand: str
        """

        self._expand = expand

    @property
    def rule_ids(self):
        """Gets the rule_ids of this WorkflowRulesSearch.

        The list of workflow rule IDs.

        :return: The rule_ids of this WorkflowRulesSearch.
        :rtype: List[str]
        """
        return self._rule_ids

    @rule_ids.setter
    def rule_ids(self, rule_ids):
        """Sets the rule_ids of this WorkflowRulesSearch.

        The list of workflow rule IDs.

        :param rule_ids: The rule_ids of this WorkflowRulesSearch.
        :type rule_ids: List[str]
        """
        if rule_ids is None:
            raise ValueError("Invalid value for `rule_ids`, must not be `None`")
        if rule_ids is not None and len(rule_ids) > 10:
            raise ValueError("Invalid value for `rule_ids`, number of items must be less than or equal to `10`")
        if rule_ids is not None and len(rule_ids) < 1:
            raise ValueError("Invalid value for `rule_ids`, number of items must be greater than or equal to `1`")

        self._rule_ids = rule_ids

    @property
    def workflow_entity_id(self):
        """Gets the workflow_entity_id of this WorkflowRulesSearch.

        The workflow ID.

        :return: The workflow_entity_id of this WorkflowRulesSearch.
        :rtype: str
        """
        return self._workflow_entity_id

    @workflow_entity_id.setter
    def workflow_entity_id(self, workflow_entity_id):
        """Sets the workflow_entity_id of this WorkflowRulesSearch.

        The workflow ID.

        :param workflow_entity_id: The workflow_entity_id of this WorkflowRulesSearch.
        :type workflow_entity_id: str
        """
        if workflow_entity_id is None:
            raise ValueError("Invalid value for `workflow_entity_id`, must not be `None`")

        self._workflow_entity_id = workflow_entity_id
