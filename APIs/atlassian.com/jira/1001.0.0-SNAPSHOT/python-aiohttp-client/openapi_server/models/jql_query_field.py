# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_field_entity_property import JqlQueryFieldEntityProperty
from openapi_server import util


class JqlQueryField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_name: str=None, name: str=None, _property: List[JqlQueryFieldEntityProperty]=None):
        """JqlQueryField - a model defined in OpenAPI

        :param encoded_name: The encoded_name of this JqlQueryField.
        :param name: The name of this JqlQueryField.
        :param _property: The _property of this JqlQueryField.
        """
        self.openapi_types = {
            'encoded_name': str,
            'name': str,
            '_property': List[JqlQueryFieldEntityProperty]
        }

        self.attribute_map = {
            'encoded_name': 'encodedName',
            'name': 'name',
            '_property': 'property'
        }

        self._encoded_name = encoded_name
        self._name = name
        self.__property = _property

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JqlQueryField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JqlQueryField of this JqlQueryField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_name(self):
        """Gets the encoded_name of this JqlQueryField.

        The encoded name of the field, which can be used directly in a JQL query.

        :return: The encoded_name of this JqlQueryField.
        :rtype: str
        """
        return self._encoded_name

    @encoded_name.setter
    def encoded_name(self, encoded_name):
        """Sets the encoded_name of this JqlQueryField.

        The encoded name of the field, which can be used directly in a JQL query.

        :param encoded_name: The encoded_name of this JqlQueryField.
        :type encoded_name: str
        """

        self._encoded_name = encoded_name

    @property
    def name(self):
        """Gets the name of this JqlQueryField.

        The name of the field.

        :return: The name of this JqlQueryField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JqlQueryField.

        The name of the field.

        :param name: The name of this JqlQueryField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def _property(self):
        """Gets the _property of this JqlQueryField.

        When the field refers to a value in an entity property, details of the entity property value.

        :return: The _property of this JqlQueryField.
        :rtype: List[JqlQueryFieldEntityProperty]
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this JqlQueryField.

        When the field refers to a value in an entity property, details of the entity property value.

        :param _property: The _property of this JqlQueryField.
        :type _property: List[JqlQueryFieldEntityProperty]
        """

        self.__property = _property
