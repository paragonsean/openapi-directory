# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValueOperand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_value: str=None, value: str=None):
        """ValueOperand - a model defined in OpenAPI

        :param encoded_value: The encoded_value of this ValueOperand.
        :param value: The value of this ValueOperand.
        """
        self.openapi_types = {
            'encoded_value': str,
            'value': str
        }

        self.attribute_map = {
            'encoded_value': 'encodedValue',
            'value': 'value'
        }

        self._encoded_value = encoded_value
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueOperand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueOperand of this ValueOperand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_value(self):
        """Gets the encoded_value of this ValueOperand.

        Encoded value, which can be used directly in a JQL query.

        :return: The encoded_value of this ValueOperand.
        :rtype: str
        """
        return self._encoded_value

    @encoded_value.setter
    def encoded_value(self, encoded_value):
        """Sets the encoded_value of this ValueOperand.

        Encoded value, which can be used directly in a JQL query.

        :param encoded_value: The encoded_value of this ValueOperand.
        :type encoded_value: str
        """

        self._encoded_value = encoded_value

    @property
    def value(self):
        """Gets the value of this ValueOperand.

        The operand value.

        :return: The value of this ValueOperand.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueOperand.

        The operand value.

        :param value: The value of this ValueOperand.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
