# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class PageOfComments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[Comment]=None, max_results: int=None, start_at: int=None, total: int=None):
        """PageOfComments - a model defined in OpenAPI

        :param comments: The comments of this PageOfComments.
        :param max_results: The max_results of this PageOfComments.
        :param start_at: The start_at of this PageOfComments.
        :param total: The total of this PageOfComments.
        """
        self.openapi_types = {
            'comments': List[Comment],
            'max_results': int,
            'start_at': int,
            'total': int
        }

        self.attribute_map = {
            'comments': 'comments',
            'max_results': 'maxResults',
            'start_at': 'startAt',
            'total': 'total'
        }

        self._comments = comments
        self._max_results = max_results
        self._start_at = start_at
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageOfComments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageOfComments of this PageOfComments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this PageOfComments.

        The list of comments.

        :return: The comments of this PageOfComments.
        :rtype: List[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PageOfComments.

        The list of comments.

        :param comments: The comments of this PageOfComments.
        :type comments: List[Comment]
        """

        self._comments = comments

    @property
    def max_results(self):
        """Gets the max_results of this PageOfComments.

        The maximum number of items that could be returned.

        :return: The max_results of this PageOfComments.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this PageOfComments.

        The maximum number of items that could be returned.

        :param max_results: The max_results of this PageOfComments.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def start_at(self):
        """Gets the start_at of this PageOfComments.

        The index of the first item returned.

        :return: The start_at of this PageOfComments.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this PageOfComments.

        The index of the first item returned.

        :param start_at: The start_at of this PageOfComments.
        :type start_at: int
        """

        self._start_at = start_at

    @property
    def total(self):
        """Gets the total of this PageOfComments.

        The number of items returned.

        :return: The total of this PageOfComments.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PageOfComments.

        The number of items returned.

        :param total: The total of this PageOfComments.
        :type total: int
        """

        self._total = total
