# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeTrackingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_unit: str=None, time_format: str=None, working_days_per_week: float=None, working_hours_per_day: float=None):
        """TimeTrackingConfiguration - a model defined in OpenAPI

        :param default_unit: The default_unit of this TimeTrackingConfiguration.
        :param time_format: The time_format of this TimeTrackingConfiguration.
        :param working_days_per_week: The working_days_per_week of this TimeTrackingConfiguration.
        :param working_hours_per_day: The working_hours_per_day of this TimeTrackingConfiguration.
        """
        self.openapi_types = {
            'default_unit': str,
            'time_format': str,
            'working_days_per_week': float,
            'working_hours_per_day': float
        }

        self.attribute_map = {
            'default_unit': 'defaultUnit',
            'time_format': 'timeFormat',
            'working_days_per_week': 'workingDaysPerWeek',
            'working_hours_per_day': 'workingHoursPerDay'
        }

        self._default_unit = default_unit
        self._time_format = time_format
        self._working_days_per_week = working_days_per_week
        self._working_hours_per_day = working_hours_per_day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeTrackingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeTrackingConfiguration of this TimeTrackingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_unit(self):
        """Gets the default_unit of this TimeTrackingConfiguration.

        The default unit of time applied to logged time.

        :return: The default_unit of this TimeTrackingConfiguration.
        :rtype: str
        """
        return self._default_unit

    @default_unit.setter
    def default_unit(self, default_unit):
        """Sets the default_unit of this TimeTrackingConfiguration.

        The default unit of time applied to logged time.

        :param default_unit: The default_unit of this TimeTrackingConfiguration.
        :type default_unit: str
        """
        allowed_values = ["minute", "hour", "day", "week"]  # noqa: E501
        if default_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `default_unit` ({0}), must be one of {1}"
                .format(default_unit, allowed_values)
            )

        self._default_unit = default_unit

    @property
    def time_format(self):
        """Gets the time_format of this TimeTrackingConfiguration.

        The format that will appear on an issue's *Time Spent* field.

        :return: The time_format of this TimeTrackingConfiguration.
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this TimeTrackingConfiguration.

        The format that will appear on an issue's *Time Spent* field.

        :param time_format: The time_format of this TimeTrackingConfiguration.
        :type time_format: str
        """
        allowed_values = ["pretty", "days", "hours"]  # noqa: E501
        if time_format not in allowed_values:
            raise ValueError(
                "Invalid value for `time_format` ({0}), must be one of {1}"
                .format(time_format, allowed_values)
            )

        self._time_format = time_format

    @property
    def working_days_per_week(self):
        """Gets the working_days_per_week of this TimeTrackingConfiguration.

        The number of days in a working week.

        :return: The working_days_per_week of this TimeTrackingConfiguration.
        :rtype: float
        """
        return self._working_days_per_week

    @working_days_per_week.setter
    def working_days_per_week(self, working_days_per_week):
        """Sets the working_days_per_week of this TimeTrackingConfiguration.

        The number of days in a working week.

        :param working_days_per_week: The working_days_per_week of this TimeTrackingConfiguration.
        :type working_days_per_week: float
        """
        if working_days_per_week is None:
            raise ValueError("Invalid value for `working_days_per_week`, must not be `None`")

        self._working_days_per_week = working_days_per_week

    @property
    def working_hours_per_day(self):
        """Gets the working_hours_per_day of this TimeTrackingConfiguration.

        The number of hours in a working day.

        :return: The working_hours_per_day of this TimeTrackingConfiguration.
        :rtype: float
        """
        return self._working_hours_per_day

    @working_hours_per_day.setter
    def working_hours_per_day(self, working_hours_per_day):
        """Sets the working_hours_per_day of this TimeTrackingConfiguration.

        The number of hours in a working day.

        :param working_hours_per_day: The working_hours_per_day of this TimeTrackingConfiguration.
        :type working_hours_per_day: float
        """
        if working_hours_per_day is None:
            raise ValueError("Invalid value for `working_hours_per_day`, must not be `None`")

        self._working_hours_per_day = working_hours_per_day
