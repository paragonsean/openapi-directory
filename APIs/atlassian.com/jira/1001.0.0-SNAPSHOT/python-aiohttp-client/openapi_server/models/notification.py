# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_recipients import NotificationRecipients
from openapi_server.models.notification_recipients_restrictions import NotificationRecipientsRestrictions
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_body: str=None, restrict: NotificationRecipientsRestrictions=None, subject: str=None, text_body: str=None, to: NotificationRecipients=None):
        """Notification - a model defined in OpenAPI

        :param html_body: The html_body of this Notification.
        :param restrict: The restrict of this Notification.
        :param subject: The subject of this Notification.
        :param text_body: The text_body of this Notification.
        :param to: The to of this Notification.
        """
        self.openapi_types = {
            'html_body': str,
            'restrict': NotificationRecipientsRestrictions,
            'subject': str,
            'text_body': str,
            'to': NotificationRecipients
        }

        self.attribute_map = {
            'html_body': 'htmlBody',
            'restrict': 'restrict',
            'subject': 'subject',
            'text_body': 'textBody',
            'to': 'to'
        }

        self._html_body = html_body
        self._restrict = restrict
        self._subject = subject
        self._text_body = text_body
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_body(self):
        """Gets the html_body of this Notification.

        The HTML body of the email notification for the issue.

        :return: The html_body of this Notification.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this Notification.

        The HTML body of the email notification for the issue.

        :param html_body: The html_body of this Notification.
        :type html_body: str
        """

        self._html_body = html_body

    @property
    def restrict(self):
        """Gets the restrict of this Notification.

        Restricts the notifications to users with the specified permissions.

        :return: The restrict of this Notification.
        :rtype: NotificationRecipientsRestrictions
        """
        return self._restrict

    @restrict.setter
    def restrict(self, restrict):
        """Sets the restrict of this Notification.

        Restricts the notifications to users with the specified permissions.

        :param restrict: The restrict of this Notification.
        :type restrict: NotificationRecipientsRestrictions
        """

        self._restrict = restrict

    @property
    def subject(self):
        """Gets the subject of this Notification.

        The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.

        :return: The subject of this Notification.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Notification.

        The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.

        :param subject: The subject of this Notification.
        :type subject: str
        """

        self._subject = subject

    @property
    def text_body(self):
        """Gets the text_body of this Notification.

        The plain text body of the email notification for the issue.

        :return: The text_body of this Notification.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """Sets the text_body of this Notification.

        The plain text body of the email notification for the issue.

        :param text_body: The text_body of this Notification.
        :type text_body: str
        """

        self._text_body = text_body

    @property
    def to(self):
        """Gets the to of this Notification.

        The recipients of the email notification for the issue.

        :return: The to of this Notification.
        :rtype: NotificationRecipients
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Notification.

        The recipients of the email notification for the issue.

        :param to: The to of this Notification.
        :type to: NotificationRecipients
        """

        self._to = to
