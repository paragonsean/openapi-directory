# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, name: str=None, template_event: NotificationEvent=None):
        """NotificationEvent - a model defined in OpenAPI

        :param description: The description of this NotificationEvent.
        :param id: The id of this NotificationEvent.
        :param name: The name of this NotificationEvent.
        :param template_event: The template_event of this NotificationEvent.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'name': str,
            'template_event': NotificationEvent
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'template_event': 'templateEvent'
        }

        self._description = description
        self._id = id
        self._name = name
        self._template_event = template_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationEvent of this NotificationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NotificationEvent.

        The description of the event.

        :return: The description of this NotificationEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationEvent.

        The description of the event.

        :param description: The description of this NotificationEvent.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this NotificationEvent.

        The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).

        :return: The id of this NotificationEvent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationEvent.

        The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).

        :param id: The id of this NotificationEvent.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NotificationEvent.

        The name of the event.

        :return: The name of this NotificationEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationEvent.

        The name of the event.

        :param name: The name of this NotificationEvent.
        :type name: str
        """

        self._name = name

    @property
    def template_event(self):
        """Gets the template_event of this NotificationEvent.

        The template of the event. Only custom events configured by Jira administrators have template.

        :return: The template_event of this NotificationEvent.
        :rtype: NotificationEvent
        """
        return self._template_event

    @template_event.setter
    def template_event(self, template_event):
        """Sets the template_event of this NotificationEvent.

        The template of the event. Only custom events configured by Jira administrators have template.

        :param template_event: The template_event of this NotificationEvent.
        :type template_event: NotificationEvent
        """

        self._template_event = template_event
