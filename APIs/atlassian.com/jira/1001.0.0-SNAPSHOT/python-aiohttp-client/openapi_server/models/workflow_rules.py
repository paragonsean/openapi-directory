# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_condition import WorkflowCondition
from openapi_server.models.workflow_transition_rule import WorkflowTransitionRule
from openapi_server import util


class WorkflowRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions_tree: WorkflowCondition=None, post_functions: List[WorkflowTransitionRule]=None, validators: List[WorkflowTransitionRule]=None):
        """WorkflowRules - a model defined in OpenAPI

        :param conditions_tree: The conditions_tree of this WorkflowRules.
        :param post_functions: The post_functions of this WorkflowRules.
        :param validators: The validators of this WorkflowRules.
        """
        self.openapi_types = {
            'conditions_tree': WorkflowCondition,
            'post_functions': List[WorkflowTransitionRule],
            'validators': List[WorkflowTransitionRule]
        }

        self.attribute_map = {
            'conditions_tree': 'conditionsTree',
            'post_functions': 'postFunctions',
            'validators': 'validators'
        }

        self._conditions_tree = conditions_tree
        self._post_functions = post_functions
        self._validators = validators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowRules of this WorkflowRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions_tree(self):
        """Gets the conditions_tree of this WorkflowRules.


        :return: The conditions_tree of this WorkflowRules.
        :rtype: WorkflowCondition
        """
        return self._conditions_tree

    @conditions_tree.setter
    def conditions_tree(self, conditions_tree):
        """Sets the conditions_tree of this WorkflowRules.


        :param conditions_tree: The conditions_tree of this WorkflowRules.
        :type conditions_tree: WorkflowCondition
        """

        self._conditions_tree = conditions_tree

    @property
    def post_functions(self):
        """Gets the post_functions of this WorkflowRules.

        The workflow post functions.

        :return: The post_functions of this WorkflowRules.
        :rtype: List[WorkflowTransitionRule]
        """
        return self._post_functions

    @post_functions.setter
    def post_functions(self, post_functions):
        """Sets the post_functions of this WorkflowRules.

        The workflow post functions.

        :param post_functions: The post_functions of this WorkflowRules.
        :type post_functions: List[WorkflowTransitionRule]
        """

        self._post_functions = post_functions

    @property
    def validators(self):
        """Gets the validators of this WorkflowRules.

        The workflow validators.

        :return: The validators of this WorkflowRules.
        :rtype: List[WorkflowTransitionRule]
        """
        return self._validators

    @validators.setter
    def validators(self, validators):
        """Sets the validators of this WorkflowRules.

        The workflow validators.

        :param validators: The validators of this WorkflowRules.
        :type validators: List[WorkflowTransitionRule]
        """

        self._validators = validators
