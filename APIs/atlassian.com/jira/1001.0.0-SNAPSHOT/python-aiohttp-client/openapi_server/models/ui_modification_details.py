# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ui_modification_context_details import UiModificationContextDetails
from openapi_server import util


class UiModificationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List[UiModificationContextDetails]=None, data: str=None, description: str=None, id: str=None, name: str=None, _self: str=None):
        """UiModificationDetails - a model defined in OpenAPI

        :param contexts: The contexts of this UiModificationDetails.
        :param data: The data of this UiModificationDetails.
        :param description: The description of this UiModificationDetails.
        :param id: The id of this UiModificationDetails.
        :param name: The name of this UiModificationDetails.
        :param _self: The _self of this UiModificationDetails.
        """
        self.openapi_types = {
            'contexts': List[UiModificationContextDetails],
            'data': str,
            'description': str,
            'id': str,
            'name': str,
            '_self': str
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'data': 'data',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            '_self': 'self'
        }

        self._contexts = contexts
        self._data = data
        self._description = description
        self._id = id
        self._name = name
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UiModificationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UiModificationDetails of this UiModificationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this UiModificationDetails.

        List of contexts of the UI modification. The maximum number of contexts is 1000.

        :return: The contexts of this UiModificationDetails.
        :rtype: List[UiModificationContextDetails]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this UiModificationDetails.

        List of contexts of the UI modification. The maximum number of contexts is 1000.

        :param contexts: The contexts of this UiModificationDetails.
        :type contexts: List[UiModificationContextDetails]
        """

        self._contexts = contexts

    @property
    def data(self):
        """Gets the data of this UiModificationDetails.

        The data of the UI modification. The maximum size of the data is 50000 characters.

        :return: The data of this UiModificationDetails.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UiModificationDetails.

        The data of the UI modification. The maximum size of the data is 50000 characters.

        :param data: The data of this UiModificationDetails.
        :type data: str
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this UiModificationDetails.

        The description of the UI modification. The maximum length is 255 characters.

        :return: The description of this UiModificationDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UiModificationDetails.

        The description of the UI modification. The maximum length is 255 characters.

        :param description: The description of this UiModificationDetails.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this UiModificationDetails.

        The ID of the UI modification.

        :return: The id of this UiModificationDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UiModificationDetails.

        The ID of the UI modification.

        :param id: The id of this UiModificationDetails.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this UiModificationDetails.

        The name of the UI modification. The maximum length is 255 characters.

        :return: The name of this UiModificationDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UiModificationDetails.

        The name of the UI modification. The maximum length is 255 characters.

        :param name: The name of this UiModificationDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this UiModificationDetails.

        The URL of the UI modification.

        :return: The _self of this UiModificationDetails.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UiModificationDetails.

        The URL of the UI modification.

        :param _self: The _self of this UiModificationDetails.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
