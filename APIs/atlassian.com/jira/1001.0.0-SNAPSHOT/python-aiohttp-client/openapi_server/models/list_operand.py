# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_unitary_operand import JqlQueryUnitaryOperand
from openapi_server import util


class ListOperand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_operand: str=None, values: List[JqlQueryUnitaryOperand]=None):
        """ListOperand - a model defined in OpenAPI

        :param encoded_operand: The encoded_operand of this ListOperand.
        :param values: The values of this ListOperand.
        """
        self.openapi_types = {
            'encoded_operand': str,
            'values': List[JqlQueryUnitaryOperand]
        }

        self.attribute_map = {
            'encoded_operand': 'encodedOperand',
            'values': 'values'
        }

        self._encoded_operand = encoded_operand
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListOperand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListOperand of this ListOperand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_operand(self):
        """Gets the encoded_operand of this ListOperand.

        Encoded operand, which can be used directly in a JQL query.

        :return: The encoded_operand of this ListOperand.
        :rtype: str
        """
        return self._encoded_operand

    @encoded_operand.setter
    def encoded_operand(self, encoded_operand):
        """Sets the encoded_operand of this ListOperand.

        Encoded operand, which can be used directly in a JQL query.

        :param encoded_operand: The encoded_operand of this ListOperand.
        :type encoded_operand: str
        """

        self._encoded_operand = encoded_operand

    @property
    def values(self):
        """Gets the values of this ListOperand.

        The list of operand values.

        :return: The values of this ListOperand.
        :rtype: List[JqlQueryUnitaryOperand]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ListOperand.

        The list of operand values.

        :param values: The values of this ListOperand.
        :type values: List[JqlQueryUnitaryOperand]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
