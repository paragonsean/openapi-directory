# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[str]=None, expiration_date: int=None, field_ids_filter: List[str]=None, id: int=None, issue_property_keys_filter: List[str]=None, jql_filter: str=None):
        """Webhook - a model defined in OpenAPI

        :param events: The events of this Webhook.
        :param expiration_date: The expiration_date of this Webhook.
        :param field_ids_filter: The field_ids_filter of this Webhook.
        :param id: The id of this Webhook.
        :param issue_property_keys_filter: The issue_property_keys_filter of this Webhook.
        :param jql_filter: The jql_filter of this Webhook.
        """
        self.openapi_types = {
            'events': List[str],
            'expiration_date': int,
            'field_ids_filter': List[str],
            'id': int,
            'issue_property_keys_filter': List[str],
            'jql_filter': str
        }

        self.attribute_map = {
            'events': 'events',
            'expiration_date': 'expirationDate',
            'field_ids_filter': 'fieldIdsFilter',
            'id': 'id',
            'issue_property_keys_filter': 'issuePropertyKeysFilter',
            'jql_filter': 'jqlFilter'
        }

        self._events = events
        self._expiration_date = expiration_date
        self._field_ids_filter = field_ids_filter
        self._id = id
        self._issue_property_keys_filter = issue_property_keys_filter
        self._jql_filter = jql_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this Webhook.

        The Jira events that trigger the webhook.

        :return: The events of this Webhook.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Webhook.

        The Jira events that trigger the webhook.

        :param events: The events of this Webhook.
        :type events: List[str]
        """
        allowed_values = ["jira:issue_created", "jira:issue_updated", "jira:issue_deleted", "comment_created", "comment_updated", "comment_deleted", "issue_property_set", "issue_property_deleted"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Webhook.

        The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.

        :return: The expiration_date of this Webhook.
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Webhook.

        The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.

        :param expiration_date: The expiration_date of this Webhook.
        :type expiration_date: int
        """

        self._expiration_date = expiration_date

    @property
    def field_ids_filter(self):
        """Gets the field_ids_filter of this Webhook.

        A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.

        :return: The field_ids_filter of this Webhook.
        :rtype: List[str]
        """
        return self._field_ids_filter

    @field_ids_filter.setter
    def field_ids_filter(self, field_ids_filter):
        """Sets the field_ids_filter of this Webhook.

        A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.

        :param field_ids_filter: The field_ids_filter of this Webhook.
        :type field_ids_filter: List[str]
        """

        self._field_ids_filter = field_ids_filter

    @property
    def id(self):
        """Gets the id of this Webhook.

        The ID of the webhook.

        :return: The id of this Webhook.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        The ID of the webhook.

        :param id: The id of this Webhook.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def issue_property_keys_filter(self):
        """Gets the issue_property_keys_filter of this Webhook.

        A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.

        :return: The issue_property_keys_filter of this Webhook.
        :rtype: List[str]
        """
        return self._issue_property_keys_filter

    @issue_property_keys_filter.setter
    def issue_property_keys_filter(self, issue_property_keys_filter):
        """Sets the issue_property_keys_filter of this Webhook.

        A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.

        :param issue_property_keys_filter: The issue_property_keys_filter of this Webhook.
        :type issue_property_keys_filter: List[str]
        """

        self._issue_property_keys_filter = issue_property_keys_filter

    @property
    def jql_filter(self):
        """Gets the jql_filter of this Webhook.

        The JQL filter that specifies which issues the webhook is sent for.

        :return: The jql_filter of this Webhook.
        :rtype: str
        """
        return self._jql_filter

    @jql_filter.setter
    def jql_filter(self, jql_filter):
        """Sets the jql_filter of this Webhook.

        The JQL filter that specifies which issues the webhook is sent for.

        :param jql_filter: The jql_filter of this Webhook.
        :type jql_filter: str
        """
        if jql_filter is None:
            raise ValueError("Invalid value for `jql_filter`, must not be `None`")

        self._jql_filter = jql_filter
