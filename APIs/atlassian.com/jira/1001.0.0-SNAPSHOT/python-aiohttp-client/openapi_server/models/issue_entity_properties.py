# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_node import JsonNode
from openapi_server import util


class IssueEntityProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities_ids: list[int]=None, properties: Dict[str, JsonNode]=None):
        """IssueEntityProperties - a model defined in OpenAPI

        :param entities_ids: The entities_ids of this IssueEntityProperties.
        :param properties: The properties of this IssueEntityProperties.
        """
        self.openapi_types = {
            'entities_ids': list[int],
            'properties': Dict[str, JsonNode]
        }

        self.attribute_map = {
            'entities_ids': 'entitiesIds',
            'properties': 'properties'
        }

        self._entities_ids = entities_ids
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueEntityProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueEntityProperties of this IssueEntityProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities_ids(self):
        """Gets the entities_ids of this IssueEntityProperties.

        A list of entity property IDs.

        :return: The entities_ids of this IssueEntityProperties.
        :rtype: list[int]
        """
        return self._entities_ids

    @entities_ids.setter
    def entities_ids(self, entities_ids):
        """Sets the entities_ids of this IssueEntityProperties.

        A list of entity property IDs.

        :param entities_ids: The entities_ids of this IssueEntityProperties.
        :type entities_ids: list[int]
        """
        if entities_ids is not None and len(entities_ids) > 10000:
            raise ValueError("Invalid value for `entities_ids`, number of items must be less than or equal to `10000`")
        if entities_ids is not None and len(entities_ids) < 1:
            raise ValueError("Invalid value for `entities_ids`, number of items must be greater than or equal to `1`")

        self._entities_ids = entities_ids

    @property
    def properties(self):
        """Gets the properties of this IssueEntityProperties.

        A list of entity property keys and values.

        :return: The properties of this IssueEntityProperties.
        :rtype: Dict[str, JsonNode]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IssueEntityProperties.

        A list of entity property keys and values.

        :param properties: The properties of this IssueEntityProperties.
        :type properties: Dict[str, JsonNode]
        """
        if properties is not None and len(properties) > 10:
            raise ValueError("Invalid value for `properties`, number of items must be less than or equal to `10`")
        if properties is not None and len(properties) < 1:
            raise ValueError("Invalid value for `properties`, number of items must be greater than or equal to `1`")

        self._properties = properties
