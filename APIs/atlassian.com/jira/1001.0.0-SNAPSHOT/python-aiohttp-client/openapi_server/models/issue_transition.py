# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server.models.status_details import StatusDetails
from openapi_server import util


class IssueTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand: str=None, fields: Dict[str, FieldMetadata]=None, has_screen: bool=None, id: str=None, is_available: bool=None, is_conditional: bool=None, is_global: bool=None, is_initial: bool=None, looped: bool=None, name: str=None, to: StatusDetails=None):
        """IssueTransition - a model defined in OpenAPI

        :param expand: The expand of this IssueTransition.
        :param fields: The fields of this IssueTransition.
        :param has_screen: The has_screen of this IssueTransition.
        :param id: The id of this IssueTransition.
        :param is_available: The is_available of this IssueTransition.
        :param is_conditional: The is_conditional of this IssueTransition.
        :param is_global: The is_global of this IssueTransition.
        :param is_initial: The is_initial of this IssueTransition.
        :param looped: The looped of this IssueTransition.
        :param name: The name of this IssueTransition.
        :param to: The to of this IssueTransition.
        """
        self.openapi_types = {
            'expand': str,
            'fields': Dict[str, FieldMetadata],
            'has_screen': bool,
            'id': str,
            'is_available': bool,
            'is_conditional': bool,
            'is_global': bool,
            'is_initial': bool,
            'looped': bool,
            'name': str,
            'to': StatusDetails
        }

        self.attribute_map = {
            'expand': 'expand',
            'fields': 'fields',
            'has_screen': 'hasScreen',
            'id': 'id',
            'is_available': 'isAvailable',
            'is_conditional': 'isConditional',
            'is_global': 'isGlobal',
            'is_initial': 'isInitial',
            'looped': 'looped',
            'name': 'name',
            'to': 'to'
        }

        self._expand = expand
        self._fields = fields
        self._has_screen = has_screen
        self._id = id
        self._is_available = is_available
        self._is_conditional = is_conditional
        self._is_global = is_global
        self._is_initial = is_initial
        self._looped = looped
        self._name = name
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTransition of this IssueTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self):
        """Gets the expand of this IssueTransition.

        Expand options that include additional transition details in the response.

        :return: The expand of this IssueTransition.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this IssueTransition.

        Expand options that include additional transition details in the response.

        :param expand: The expand of this IssueTransition.
        :type expand: str
        """

        self._expand = expand

    @property
    def fields(self):
        """Gets the fields of this IssueTransition.

        Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.

        :return: The fields of this IssueTransition.
        :rtype: Dict[str, FieldMetadata]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this IssueTransition.

        Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.

        :param fields: The fields of this IssueTransition.
        :type fields: Dict[str, FieldMetadata]
        """

        self._fields = fields

    @property
    def has_screen(self):
        """Gets the has_screen of this IssueTransition.

        Whether there is a screen associated with the issue transition.

        :return: The has_screen of this IssueTransition.
        :rtype: bool
        """
        return self._has_screen

    @has_screen.setter
    def has_screen(self, has_screen):
        """Sets the has_screen of this IssueTransition.

        Whether there is a screen associated with the issue transition.

        :param has_screen: The has_screen of this IssueTransition.
        :type has_screen: bool
        """

        self._has_screen = has_screen

    @property
    def id(self):
        """Gets the id of this IssueTransition.

        The ID of the issue transition. Required when specifying a transition to undertake.

        :return: The id of this IssueTransition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueTransition.

        The ID of the issue transition. Required when specifying a transition to undertake.

        :param id: The id of this IssueTransition.
        :type id: str
        """

        self._id = id

    @property
    def is_available(self):
        """Gets the is_available of this IssueTransition.

        Whether the transition is available to be performed.

        :return: The is_available of this IssueTransition.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this IssueTransition.

        Whether the transition is available to be performed.

        :param is_available: The is_available of this IssueTransition.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def is_conditional(self):
        """Gets the is_conditional of this IssueTransition.

        Whether the issue has to meet criteria before the issue transition is applied.

        :return: The is_conditional of this IssueTransition.
        :rtype: bool
        """
        return self._is_conditional

    @is_conditional.setter
    def is_conditional(self, is_conditional):
        """Sets the is_conditional of this IssueTransition.

        Whether the issue has to meet criteria before the issue transition is applied.

        :param is_conditional: The is_conditional of this IssueTransition.
        :type is_conditional: bool
        """

        self._is_conditional = is_conditional

    @property
    def is_global(self):
        """Gets the is_global of this IssueTransition.

        Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.

        :return: The is_global of this IssueTransition.
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this IssueTransition.

        Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.

        :param is_global: The is_global of this IssueTransition.
        :type is_global: bool
        """

        self._is_global = is_global

    @property
    def is_initial(self):
        """Gets the is_initial of this IssueTransition.

        Whether this is the initial issue transition for the workflow.

        :return: The is_initial of this IssueTransition.
        :rtype: bool
        """
        return self._is_initial

    @is_initial.setter
    def is_initial(self, is_initial):
        """Sets the is_initial of this IssueTransition.

        Whether this is the initial issue transition for the workflow.

        :param is_initial: The is_initial of this IssueTransition.
        :type is_initial: bool
        """

        self._is_initial = is_initial

    @property
    def looped(self):
        """Gets the looped of this IssueTransition.


        :return: The looped of this IssueTransition.
        :rtype: bool
        """
        return self._looped

    @looped.setter
    def looped(self, looped):
        """Sets the looped of this IssueTransition.


        :param looped: The looped of this IssueTransition.
        :type looped: bool
        """

        self._looped = looped

    @property
    def name(self):
        """Gets the name of this IssueTransition.

        The name of the issue transition.

        :return: The name of this IssueTransition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTransition.

        The name of the issue transition.

        :param name: The name of this IssueTransition.
        :type name: str
        """

        self._name = name

    @property
    def to(self):
        """Gets the to of this IssueTransition.

        Details of the issue status after the transition.

        :return: The to of this IssueTransition.
        :rtype: StatusDetails
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this IssueTransition.

        Details of the issue status after the transition.

        :param to: The to of this IssueTransition.
        :type to: StatusDetails
        """

        self._to = to
