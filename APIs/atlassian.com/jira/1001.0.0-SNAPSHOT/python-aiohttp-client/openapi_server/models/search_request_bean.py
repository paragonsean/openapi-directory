# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchRequestBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand: List[str]=None, fields: List[str]=None, fields_by_keys: bool=None, jql: str=None, max_results: int=50, properties: List[str]=None, start_at: int=None, validate_query: str=None):
        """SearchRequestBean - a model defined in OpenAPI

        :param expand: The expand of this SearchRequestBean.
        :param fields: The fields of this SearchRequestBean.
        :param fields_by_keys: The fields_by_keys of this SearchRequestBean.
        :param jql: The jql of this SearchRequestBean.
        :param max_results: The max_results of this SearchRequestBean.
        :param properties: The properties of this SearchRequestBean.
        :param start_at: The start_at of this SearchRequestBean.
        :param validate_query: The validate_query of this SearchRequestBean.
        """
        self.openapi_types = {
            'expand': List[str],
            'fields': List[str],
            'fields_by_keys': bool,
            'jql': str,
            'max_results': int,
            'properties': List[str],
            'start_at': int,
            'validate_query': str
        }

        self.attribute_map = {
            'expand': 'expand',
            'fields': 'fields',
            'fields_by_keys': 'fieldsByKeys',
            'jql': 'jql',
            'max_results': 'maxResults',
            'properties': 'properties',
            'start_at': 'startAt',
            'validate_query': 'validateQuery'
        }

        self._expand = expand
        self._fields = fields
        self._fields_by_keys = fields_by_keys
        self._jql = jql
        self._max_results = max_results
        self._properties = properties
        self._start_at = start_at
        self._validate_query = validate_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequestBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequestBean of this SearchRequestBean.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self):
        """Gets the expand of this SearchRequestBean.

        Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.

        :return: The expand of this SearchRequestBean.
        :rtype: List[str]
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this SearchRequestBean.

        Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.

        :param expand: The expand of this SearchRequestBean.
        :type expand: List[str]
        """

        self._expand = expand

    @property
    def fields(self):
        """Gets the fields of this SearchRequestBean.

        A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  The default is `*navigable`.  Examples:   *  `summary,comment` Returns the summary and comments fields only.  *  `-description` Returns all navigable (default) fields except description.  *  `*all,-comment` Returns all fields except comments.  Multiple `fields` parameters can be included in a request.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.

        :return: The fields of this SearchRequestBean.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchRequestBean.

        A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  The default is `*navigable`.  Examples:   *  `summary,comment` Returns the summary and comments fields only.  *  `-description` Returns all navigable (default) fields except description.  *  `*all,-comment` Returns all fields except comments.  Multiple `fields` parameters can be included in a request.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.

        :param fields: The fields of this SearchRequestBean.
        :type fields: List[str]
        """

        self._fields = fields

    @property
    def fields_by_keys(self):
        """Gets the fields_by_keys of this SearchRequestBean.

        Reference fields by their key (rather than ID). The default is `false`.

        :return: The fields_by_keys of this SearchRequestBean.
        :rtype: bool
        """
        return self._fields_by_keys

    @fields_by_keys.setter
    def fields_by_keys(self, fields_by_keys):
        """Sets the fields_by_keys of this SearchRequestBean.

        Reference fields by their key (rather than ID). The default is `false`.

        :param fields_by_keys: The fields_by_keys of this SearchRequestBean.
        :type fields_by_keys: bool
        """

        self._fields_by_keys = fields_by_keys

    @property
    def jql(self):
        """Gets the jql of this SearchRequestBean.

        A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.

        :return: The jql of this SearchRequestBean.
        :rtype: str
        """
        return self._jql

    @jql.setter
    def jql(self, jql):
        """Sets the jql of this SearchRequestBean.

        A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.

        :param jql: The jql of this SearchRequestBean.
        :type jql: str
        """

        self._jql = jql

    @property
    def max_results(self):
        """Gets the max_results of this SearchRequestBean.

        The maximum number of items to return per page.

        :return: The max_results of this SearchRequestBean.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchRequestBean.

        The maximum number of items to return per page.

        :param max_results: The max_results of this SearchRequestBean.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def properties(self):
        """Gets the properties of this SearchRequestBean.

        A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.

        :return: The properties of this SearchRequestBean.
        :rtype: List[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SearchRequestBean.

        A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.

        :param properties: The properties of this SearchRequestBean.
        :type properties: List[str]
        """

        self._properties = properties

    @property
    def start_at(self):
        """Gets the start_at of this SearchRequestBean.

        The index of the first item to return in the page of results (page offset). The base index is `0`.

        :return: The start_at of this SearchRequestBean.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this SearchRequestBean.

        The index of the first item to return in the page of results (page offset). The base index is `0`.

        :param start_at: The start_at of this SearchRequestBean.
        :type start_at: int
        """

        self._start_at = start_at

    @property
    def validate_query(self):
        """Gets the validate_query of this SearchRequestBean.

        Determines how to validate the JQL query and treat the validation results. Supported values:   *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).  *  `warn` Returns all errors as warnings.  *  `none` No validation is performed.  *  `true` *Deprecated* A legacy synonym for `strict`.  *  `false` *Deprecated* A legacy synonym for `warn`.  The default is `strict`.  Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.

        :return: The validate_query of this SearchRequestBean.
        :rtype: str
        """
        return self._validate_query

    @validate_query.setter
    def validate_query(self, validate_query):
        """Sets the validate_query of this SearchRequestBean.

        Determines how to validate the JQL query and treat the validation results. Supported values:   *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).  *  `warn` Returns all errors as warnings.  *  `none` No validation is performed.  *  `true` *Deprecated* A legacy synonym for `strict`.  *  `false` *Deprecated* A legacy synonym for `warn`.  The default is `strict`.  Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.

        :param validate_query: The validate_query of this SearchRequestBean.
        :type validate_query: str
        """
        allowed_values = ["strict", "warn", "none", "true", "false"]  # noqa: E501
        if validate_query not in allowed_values:
            raise ValueError(
                "Invalid value for `validate_query` ({0}), must be one of {1}"
                .format(validate_query, allowed_values)
            )

        self._validate_query = validate_query
