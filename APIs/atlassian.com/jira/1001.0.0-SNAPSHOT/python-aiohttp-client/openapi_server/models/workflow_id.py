# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, draft: bool=None, name: str=None):
        """WorkflowId - a model defined in OpenAPI

        :param draft: The draft of this WorkflowId.
        :param name: The name of this WorkflowId.
        """
        self.openapi_types = {
            'draft': bool,
            'name': str
        }

        self.attribute_map = {
            'draft': 'draft',
            'name': 'name'
        }

        self._draft = draft
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowId of this WorkflowId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def draft(self):
        """Gets the draft of this WorkflowId.

        Whether the workflow is in the draft state.

        :return: The draft of this WorkflowId.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this WorkflowId.

        Whether the workflow is in the draft state.

        :param draft: The draft of this WorkflowId.
        :type draft: bool
        """
        if draft is None:
            raise ValueError("Invalid value for `draft`, must not be `None`")

        self._draft = draft

    @property
    def name(self):
        """Gets the name of this WorkflowId.

        The name of the workflow.

        :return: The name of this WorkflowId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowId.

        The name of the workflow.

        :param name: The name of this WorkflowId.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
