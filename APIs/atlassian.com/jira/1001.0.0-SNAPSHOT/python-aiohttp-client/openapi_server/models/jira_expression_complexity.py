# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JiraExpressionComplexity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expensive_operations: str=None, variables: Dict[str, str]=None):
        """JiraExpressionComplexity - a model defined in OpenAPI

        :param expensive_operations: The expensive_operations of this JiraExpressionComplexity.
        :param variables: The variables of this JiraExpressionComplexity.
        """
        self.openapi_types = {
            'expensive_operations': str,
            'variables': Dict[str, str]
        }

        self.attribute_map = {
            'expensive_operations': 'expensiveOperations',
            'variables': 'variables'
        }

        self._expensive_operations = expensive_operations
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JiraExpressionComplexity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JiraExpressionComplexity of this JiraExpressionComplexity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expensive_operations(self):
        """Gets the expensive_operations of this JiraExpressionComplexity.

        Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).

        :return: The expensive_operations of this JiraExpressionComplexity.
        :rtype: str
        """
        return self._expensive_operations

    @expensive_operations.setter
    def expensive_operations(self, expensive_operations):
        """Sets the expensive_operations of this JiraExpressionComplexity.

        Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).

        :param expensive_operations: The expensive_operations of this JiraExpressionComplexity.
        :type expensive_operations: str
        """
        if expensive_operations is None:
            raise ValueError("Invalid value for `expensive_operations`, must not be `None`")

        self._expensive_operations = expensive_operations

    @property
    def variables(self):
        """Gets the variables of this JiraExpressionComplexity.

        Variables used in the formula, mapped to the parts of the expression they refer to.

        :return: The variables of this JiraExpressionComplexity.
        :rtype: Dict[str, str]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this JiraExpressionComplexity.

        Variables used in the formula, mapped to the parts of the expression they refer to.

        :param variables: The variables of this JiraExpressionComplexity.
        :type variables: Dict[str, str]
        """

        self._variables = variables
