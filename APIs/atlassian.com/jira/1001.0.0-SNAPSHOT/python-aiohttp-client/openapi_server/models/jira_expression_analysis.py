# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jira_expression_complexity import JiraExpressionComplexity
from openapi_server.models.jira_expression_validation_error import JiraExpressionValidationError
from openapi_server import util


class JiraExpressionAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complexity: JiraExpressionComplexity=None, errors: List[JiraExpressionValidationError]=None, expression: str=None, type: str=None, valid: bool=None):
        """JiraExpressionAnalysis - a model defined in OpenAPI

        :param complexity: The complexity of this JiraExpressionAnalysis.
        :param errors: The errors of this JiraExpressionAnalysis.
        :param expression: The expression of this JiraExpressionAnalysis.
        :param type: The type of this JiraExpressionAnalysis.
        :param valid: The valid of this JiraExpressionAnalysis.
        """
        self.openapi_types = {
            'complexity': JiraExpressionComplexity,
            'errors': List[JiraExpressionValidationError],
            'expression': str,
            'type': str,
            'valid': bool
        }

        self.attribute_map = {
            'complexity': 'complexity',
            'errors': 'errors',
            'expression': 'expression',
            'type': 'type',
            'valid': 'valid'
        }

        self._complexity = complexity
        self._errors = errors
        self._expression = expression
        self._type = type
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JiraExpressionAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JiraExpressionAnalysis of this JiraExpressionAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complexity(self):
        """Gets the complexity of this JiraExpressionAnalysis.


        :return: The complexity of this JiraExpressionAnalysis.
        :rtype: JiraExpressionComplexity
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this JiraExpressionAnalysis.


        :param complexity: The complexity of this JiraExpressionAnalysis.
        :type complexity: JiraExpressionComplexity
        """

        self._complexity = complexity

    @property
    def errors(self):
        """Gets the errors of this JiraExpressionAnalysis.

        A list of validation errors. Not included if the expression is valid.

        :return: The errors of this JiraExpressionAnalysis.
        :rtype: List[JiraExpressionValidationError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this JiraExpressionAnalysis.

        A list of validation errors. Not included if the expression is valid.

        :param errors: The errors of this JiraExpressionAnalysis.
        :type errors: List[JiraExpressionValidationError]
        """

        self._errors = errors

    @property
    def expression(self):
        """Gets the expression of this JiraExpressionAnalysis.

        The analysed expression.

        :return: The expression of this JiraExpressionAnalysis.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this JiraExpressionAnalysis.

        The analysed expression.

        :param expression: The expression of this JiraExpressionAnalysis.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def type(self):
        """Gets the type of this JiraExpressionAnalysis.

        EXPERIMENTAL. The inferred type of the expression.

        :return: The type of this JiraExpressionAnalysis.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JiraExpressionAnalysis.

        EXPERIMENTAL. The inferred type of the expression.

        :param type: The type of this JiraExpressionAnalysis.
        :type type: str
        """

        self._type = type

    @property
    def valid(self):
        """Gets the valid of this JiraExpressionAnalysis.

        Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).

        :return: The valid of this JiraExpressionAnalysis.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this JiraExpressionAnalysis.

        Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).

        :param valid: The valid of this JiraExpressionAnalysis.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
