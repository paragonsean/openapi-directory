# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_type_scheme import IssueTypeScheme
from openapi_server import util


class IssueTypeSchemeProjects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_type_scheme: IssueTypeScheme=None, project_ids: List[str]=None):
        """IssueTypeSchemeProjects - a model defined in OpenAPI

        :param issue_type_scheme: The issue_type_scheme of this IssueTypeSchemeProjects.
        :param project_ids: The project_ids of this IssueTypeSchemeProjects.
        """
        self.openapi_types = {
            'issue_type_scheme': IssueTypeScheme,
            'project_ids': List[str]
        }

        self.attribute_map = {
            'issue_type_scheme': 'issueTypeScheme',
            'project_ids': 'projectIds'
        }

        self._issue_type_scheme = issue_type_scheme
        self._project_ids = project_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTypeSchemeProjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTypeSchemeProjects of this IssueTypeSchemeProjects.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_type_scheme(self):
        """Gets the issue_type_scheme of this IssueTypeSchemeProjects.

        Details of an issue type scheme.

        :return: The issue_type_scheme of this IssueTypeSchemeProjects.
        :rtype: IssueTypeScheme
        """
        return self._issue_type_scheme

    @issue_type_scheme.setter
    def issue_type_scheme(self, issue_type_scheme):
        """Sets the issue_type_scheme of this IssueTypeSchemeProjects.

        Details of an issue type scheme.

        :param issue_type_scheme: The issue_type_scheme of this IssueTypeSchemeProjects.
        :type issue_type_scheme: IssueTypeScheme
        """
        if issue_type_scheme is None:
            raise ValueError("Invalid value for `issue_type_scheme`, must not be `None`")

        self._issue_type_scheme = issue_type_scheme

    @property
    def project_ids(self):
        """Gets the project_ids of this IssueTypeSchemeProjects.

        The IDs of the projects using the issue type scheme.

        :return: The project_ids of this IssueTypeSchemeProjects.
        :rtype: List[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this IssueTypeSchemeProjects.

        The IDs of the projects using the issue type scheme.

        :param project_ids: The project_ids of this IssueTypeSchemeProjects.
        :type project_ids: List[str]
        """
        if project_ids is None:
            raise ValueError("Invalid value for `project_ids`, must not be `None`")

        self._project_ids = project_ids
