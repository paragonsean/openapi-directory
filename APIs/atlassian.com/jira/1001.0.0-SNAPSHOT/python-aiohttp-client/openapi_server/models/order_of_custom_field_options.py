# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderOfCustomFieldOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: str=None, custom_field_option_ids: List[str]=None, position: str=None):
        """OrderOfCustomFieldOptions - a model defined in OpenAPI

        :param after: The after of this OrderOfCustomFieldOptions.
        :param custom_field_option_ids: The custom_field_option_ids of this OrderOfCustomFieldOptions.
        :param position: The position of this OrderOfCustomFieldOptions.
        """
        self.openapi_types = {
            'after': str,
            'custom_field_option_ids': List[str],
            'position': str
        }

        self.attribute_map = {
            'after': 'after',
            'custom_field_option_ids': 'customFieldOptionIds',
            'position': 'position'
        }

        self._after = after
        self._custom_field_option_ids = custom_field_option_ids
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderOfCustomFieldOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderOfCustomFieldOptions of this OrderOfCustomFieldOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this OrderOfCustomFieldOptions.

        The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.

        :return: The after of this OrderOfCustomFieldOptions.
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this OrderOfCustomFieldOptions.

        The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.

        :param after: The after of this OrderOfCustomFieldOptions.
        :type after: str
        """

        self._after = after

    @property
    def custom_field_option_ids(self):
        """Gets the custom_field_option_ids of this OrderOfCustomFieldOptions.

        A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.

        :return: The custom_field_option_ids of this OrderOfCustomFieldOptions.
        :rtype: List[str]
        """
        return self._custom_field_option_ids

    @custom_field_option_ids.setter
    def custom_field_option_ids(self, custom_field_option_ids):
        """Sets the custom_field_option_ids of this OrderOfCustomFieldOptions.

        A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.

        :param custom_field_option_ids: The custom_field_option_ids of this OrderOfCustomFieldOptions.
        :type custom_field_option_ids: List[str]
        """
        if custom_field_option_ids is None:
            raise ValueError("Invalid value for `custom_field_option_ids`, must not be `None`")

        self._custom_field_option_ids = custom_field_option_ids

    @property
    def position(self):
        """Gets the position of this OrderOfCustomFieldOptions.

        The position the custom field options should be moved to. Required if `after` isn't provided.

        :return: The position of this OrderOfCustomFieldOptions.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OrderOfCustomFieldOptions.

        The position the custom field options should be moved to. Required if `after` isn't provided.

        :param position: The position of this OrderOfCustomFieldOptions.
        :type position: str
        """
        allowed_values = ["First", "Last"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position
