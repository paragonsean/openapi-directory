# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_clause_operand import JqlQueryClauseOperand
from openapi_server.models.jql_query_field import JqlQueryField
from openapi_server import util


class FieldValueClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: JqlQueryField=None, operand: JqlQueryClauseOperand=None, operator: str=None):
        """FieldValueClause - a model defined in OpenAPI

        :param _field: The _field of this FieldValueClause.
        :param operand: The operand of this FieldValueClause.
        :param operator: The operator of this FieldValueClause.
        """
        self.openapi_types = {
            '_field': JqlQueryField,
            'operand': JqlQueryClauseOperand,
            'operator': str
        }

        self.attribute_map = {
            '_field': 'field',
            'operand': 'operand',
            'operator': 'operator'
        }

        self.__field = _field
        self._operand = operand
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldValueClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldValueClause of this FieldValueClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FieldValueClause.


        :return: The _field of this FieldValueClause.
        :rtype: JqlQueryField
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FieldValueClause.


        :param _field: The _field of this FieldValueClause.
        :type _field: JqlQueryField
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def operand(self):
        """Gets the operand of this FieldValueClause.


        :return: The operand of this FieldValueClause.
        :rtype: JqlQueryClauseOperand
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """Sets the operand of this FieldValueClause.


        :param operand: The operand of this FieldValueClause.
        :type operand: JqlQueryClauseOperand
        """
        if operand is None:
            raise ValueError("Invalid value for `operand`, must not be `None`")

        self._operand = operand

    @property
    def operator(self):
        """Gets the operator of this FieldValueClause.

        The operator between the field and operand.

        :return: The operator of this FieldValueClause.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this FieldValueClause.

        The operator between the field and operand.

        :param operator: The operator of this FieldValueClause.
        :type operator: str
        """
        allowed_values = ["=", "!=", ">", "<", ">=", "<=", "in", "not in", "~", "~=", "is", "is not"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
