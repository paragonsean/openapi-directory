/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonNode model module.
 * @module model/JsonNode
 * @version 1001.0.0-SNAPSHOT
 */
class JsonNode {
    /**
     * Constructs a new <code>JsonNode</code>.
     * @alias module:model/JsonNode
     */
    constructor() { 
        
        JsonNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonNode} obj Optional instance to populate.
     * @return {module:model/JsonNode} The populated <code>JsonNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonNode();

            if (data.hasOwnProperty('array')) {
                obj['array'] = ApiClient.convertToType(data['array'], 'Boolean');
            }
            if (data.hasOwnProperty('bigDecimal')) {
                obj['bigDecimal'] = ApiClient.convertToType(data['bigDecimal'], 'Boolean');
            }
            if (data.hasOwnProperty('bigInteger')) {
                obj['bigInteger'] = ApiClient.convertToType(data['bigInteger'], 'Boolean');
            }
            if (data.hasOwnProperty('bigIntegerValue')) {
                obj['bigIntegerValue'] = ApiClient.convertToType(data['bigIntegerValue'], 'Number');
            }
            if (data.hasOwnProperty('binary')) {
                obj['binary'] = ApiClient.convertToType(data['binary'], 'Boolean');
            }
            if (data.hasOwnProperty('binaryValue')) {
                obj['binaryValue'] = ApiClient.convertToType(data['binaryValue'], ['Blob']);
            }
            if (data.hasOwnProperty('boolean')) {
                obj['boolean'] = ApiClient.convertToType(data['boolean'], 'Boolean');
            }
            if (data.hasOwnProperty('booleanValue')) {
                obj['booleanValue'] = ApiClient.convertToType(data['booleanValue'], 'Boolean');
            }
            if (data.hasOwnProperty('containerNode')) {
                obj['containerNode'] = ApiClient.convertToType(data['containerNode'], 'Boolean');
            }
            if (data.hasOwnProperty('decimalValue')) {
                obj['decimalValue'] = ApiClient.convertToType(data['decimalValue'], 'Number');
            }
            if (data.hasOwnProperty('double')) {
                obj['double'] = ApiClient.convertToType(data['double'], 'Boolean');
            }
            if (data.hasOwnProperty('doubleValue')) {
                obj['doubleValue'] = ApiClient.convertToType(data['doubleValue'], 'Number');
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], Object);
            }
            if (data.hasOwnProperty('fieldNames')) {
                obj['fieldNames'] = ApiClient.convertToType(data['fieldNames'], Object);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], Object);
            }
            if (data.hasOwnProperty('floatingPointNumber')) {
                obj['floatingPointNumber'] = ApiClient.convertToType(data['floatingPointNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('int')) {
                obj['int'] = ApiClient.convertToType(data['int'], 'Boolean');
            }
            if (data.hasOwnProperty('intValue')) {
                obj['intValue'] = ApiClient.convertToType(data['intValue'], 'Number');
            }
            if (data.hasOwnProperty('integralNumber')) {
                obj['integralNumber'] = ApiClient.convertToType(data['integralNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('long')) {
                obj['long'] = ApiClient.convertToType(data['long'], 'Boolean');
            }
            if (data.hasOwnProperty('longValue')) {
                obj['longValue'] = ApiClient.convertToType(data['longValue'], 'Number');
            }
            if (data.hasOwnProperty('missingNode')) {
                obj['missingNode'] = ApiClient.convertToType(data['missingNode'], 'Boolean');
            }
            if (data.hasOwnProperty('null')) {
                obj['null'] = ApiClient.convertToType(data['null'], 'Boolean');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Boolean');
            }
            if (data.hasOwnProperty('numberType')) {
                obj['numberType'] = ApiClient.convertToType(data['numberType'], 'String');
            }
            if (data.hasOwnProperty('numberValue')) {
                obj['numberValue'] = ApiClient.convertToType(data['numberValue'], 'Number');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'Boolean');
            }
            if (data.hasOwnProperty('pojo')) {
                obj['pojo'] = ApiClient.convertToType(data['pojo'], 'Boolean');
            }
            if (data.hasOwnProperty('textValue')) {
                obj['textValue'] = ApiClient.convertToType(data['textValue'], 'String');
            }
            if (data.hasOwnProperty('textual')) {
                obj['textual'] = ApiClient.convertToType(data['textual'], 'Boolean');
            }
            if (data.hasOwnProperty('valueAsBoolean')) {
                obj['valueAsBoolean'] = ApiClient.convertToType(data['valueAsBoolean'], 'Boolean');
            }
            if (data.hasOwnProperty('valueAsDouble')) {
                obj['valueAsDouble'] = ApiClient.convertToType(data['valueAsDouble'], 'Number');
            }
            if (data.hasOwnProperty('valueAsInt')) {
                obj['valueAsInt'] = ApiClient.convertToType(data['valueAsInt'], 'Number');
            }
            if (data.hasOwnProperty('valueAsLong')) {
                obj['valueAsLong'] = ApiClient.convertToType(data['valueAsLong'], 'Number');
            }
            if (data.hasOwnProperty('valueAsText')) {
                obj['valueAsText'] = ApiClient.convertToType(data['valueAsText'], 'String');
            }
            if (data.hasOwnProperty('valueNode')) {
                obj['valueNode'] = ApiClient.convertToType(data['valueNode'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['binaryValue'])) {
            throw new Error("Expected the field `binaryValue` to be an array in the JSON data but got " + data['binaryValue']);
        }
        // ensure the json data is a string
        if (data['numberType'] && !(typeof data['numberType'] === 'string' || data['numberType'] instanceof String)) {
            throw new Error("Expected the field `numberType` to be a primitive type in the JSON string but got " + data['numberType']);
        }
        // ensure the json data is a string
        if (data['textValue'] && !(typeof data['textValue'] === 'string' || data['textValue'] instanceof String)) {
            throw new Error("Expected the field `textValue` to be a primitive type in the JSON string but got " + data['textValue']);
        }
        // ensure the json data is a string
        if (data['valueAsText'] && !(typeof data['valueAsText'] === 'string' || data['valueAsText'] instanceof String)) {
            throw new Error("Expected the field `valueAsText` to be a primitive type in the JSON string but got " + data['valueAsText']);
        }

        return true;
    }


}



/**
 * @member {Boolean} array
 */
JsonNode.prototype['array'] = undefined;

/**
 * @member {Boolean} bigDecimal
 */
JsonNode.prototype['bigDecimal'] = undefined;

/**
 * @member {Boolean} bigInteger
 */
JsonNode.prototype['bigInteger'] = undefined;

/**
 * @member {Number} bigIntegerValue
 */
JsonNode.prototype['bigIntegerValue'] = undefined;

/**
 * @member {Boolean} binary
 */
JsonNode.prototype['binary'] = undefined;

/**
 * @member {Array.<Blob>} binaryValue
 */
JsonNode.prototype['binaryValue'] = undefined;

/**
 * @member {Boolean} boolean
 */
JsonNode.prototype['boolean'] = undefined;

/**
 * @member {Boolean} booleanValue
 */
JsonNode.prototype['booleanValue'] = undefined;

/**
 * @member {Boolean} containerNode
 */
JsonNode.prototype['containerNode'] = undefined;

/**
 * @member {Number} decimalValue
 */
JsonNode.prototype['decimalValue'] = undefined;

/**
 * @member {Boolean} double
 */
JsonNode.prototype['double'] = undefined;

/**
 * @member {Number} doubleValue
 */
JsonNode.prototype['doubleValue'] = undefined;

/**
 * @member {Object} elements
 */
JsonNode.prototype['elements'] = undefined;

/**
 * @member {Object} fieldNames
 */
JsonNode.prototype['fieldNames'] = undefined;

/**
 * @member {Object} fields
 */
JsonNode.prototype['fields'] = undefined;

/**
 * @member {Boolean} floatingPointNumber
 */
JsonNode.prototype['floatingPointNumber'] = undefined;

/**
 * @member {Boolean} int
 */
JsonNode.prototype['int'] = undefined;

/**
 * @member {Number} intValue
 */
JsonNode.prototype['intValue'] = undefined;

/**
 * @member {Boolean} integralNumber
 */
JsonNode.prototype['integralNumber'] = undefined;

/**
 * @member {Boolean} long
 */
JsonNode.prototype['long'] = undefined;

/**
 * @member {Number} longValue
 */
JsonNode.prototype['longValue'] = undefined;

/**
 * @member {Boolean} missingNode
 */
JsonNode.prototype['missingNode'] = undefined;

/**
 * @member {Boolean} null
 */
JsonNode.prototype['null'] = undefined;

/**
 * @member {Boolean} number
 */
JsonNode.prototype['number'] = undefined;

/**
 * @member {module:model/JsonNode.NumberTypeEnum} numberType
 */
JsonNode.prototype['numberType'] = undefined;

/**
 * @member {Number} numberValue
 */
JsonNode.prototype['numberValue'] = undefined;

/**
 * @member {Boolean} object
 */
JsonNode.prototype['object'] = undefined;

/**
 * @member {Boolean} pojo
 */
JsonNode.prototype['pojo'] = undefined;

/**
 * @member {String} textValue
 */
JsonNode.prototype['textValue'] = undefined;

/**
 * @member {Boolean} textual
 */
JsonNode.prototype['textual'] = undefined;

/**
 * @member {Boolean} valueAsBoolean
 */
JsonNode.prototype['valueAsBoolean'] = undefined;

/**
 * @member {Number} valueAsDouble
 */
JsonNode.prototype['valueAsDouble'] = undefined;

/**
 * @member {Number} valueAsInt
 */
JsonNode.prototype['valueAsInt'] = undefined;

/**
 * @member {Number} valueAsLong
 */
JsonNode.prototype['valueAsLong'] = undefined;

/**
 * @member {String} valueAsText
 */
JsonNode.prototype['valueAsText'] = undefined;

/**
 * @member {Boolean} valueNode
 */
JsonNode.prototype['valueNode'] = undefined;





/**
 * Allowed values for the <code>numberType</code> property.
 * @enum {String}
 * @readonly
 */
JsonNode['NumberTypeEnum'] = {

    /**
     * value: "INT"
     * @const
     */
    "INT": "INT",

    /**
     * value: "LONG"
     * @const
     */
    "LONG": "LONG",

    /**
     * value: "BIG_INTEGER"
     * @const
     */
    "BIG_INTEGER": "BIG_INTEGER",

    /**
     * value: "FLOAT"
     * @const
     */
    "FLOAT": "FLOAT",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "BIG_DECIMAL"
     * @const
     */
    "BIG_DECIMAL": "BIG_DECIMAL"
};



export default JsonNode;

