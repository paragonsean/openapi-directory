/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoleActor from './RoleActor';
import Scope from './Scope';

/**
 * The ProjectRole model module.
 * @module model/ProjectRole
 * @version 1001.0.0-SNAPSHOT
 */
class ProjectRole {
    /**
     * Constructs a new <code>ProjectRole</code>.
     * Details about the roles in a project.
     * @alias module:model/ProjectRole
     */
    constructor() { 
        
        ProjectRole.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectRole</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectRole} obj Optional instance to populate.
     * @return {module:model/ProjectRole} The populated <code>ProjectRole</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectRole();

            if (data.hasOwnProperty('actors')) {
                obj['actors'] = ApiClient.convertToType(data['actors'], [RoleActor]);
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('currentUserRole')) {
                obj['currentUserRole'] = ApiClient.convertToType(data['currentUserRole'], 'Boolean');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roleConfigurable')) {
                obj['roleConfigurable'] = ApiClient.convertToType(data['roleConfigurable'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], Scope);
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('translatedName')) {
                obj['translatedName'] = ApiClient.convertToType(data['translatedName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectRole</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectRole</code>.
     */
    static validateJSON(data) {
        if (data['actors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actors'])) {
                throw new Error("Expected the field `actors` to be an array in the JSON data but got " + data['actors']);
            }
            // validate the optional field `actors` (array)
            for (const item of data['actors']) {
                RoleActor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is a string
        if (data['translatedName'] && !(typeof data['translatedName'] === 'string' || data['translatedName'] instanceof String)) {
            throw new Error("Expected the field `translatedName` to be a primitive type in the JSON string but got " + data['translatedName']);
        }

        return true;
    }


}



/**
 * The list of users who act in this role.
 * @member {Array.<module:model/RoleActor>} actors
 */
ProjectRole.prototype['actors'] = undefined;

/**
 * Whether this role is the admin role for the project.
 * @member {Boolean} admin
 */
ProjectRole.prototype['admin'] = undefined;

/**
 * Whether the calling user is part of this role.
 * @member {Boolean} currentUserRole
 */
ProjectRole.prototype['currentUserRole'] = undefined;

/**
 * Whether this role is the default role for the project
 * @member {Boolean} default
 */
ProjectRole.prototype['default'] = undefined;

/**
 * The description of the project role.
 * @member {String} description
 */
ProjectRole.prototype['description'] = undefined;

/**
 * The ID of the project role.
 * @member {Number} id
 */
ProjectRole.prototype['id'] = undefined;

/**
 * The name of the project role.
 * @member {String} name
 */
ProjectRole.prototype['name'] = undefined;

/**
 * Whether the roles are configurable for this project.
 * @member {Boolean} roleConfigurable
 */
ProjectRole.prototype['roleConfigurable'] = undefined;

/**
 * The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
 * @member {module:model/Scope} scope
 */
ProjectRole.prototype['scope'] = undefined;

/**
 * The URL the project role details.
 * @member {String} self
 */
ProjectRole.prototype['self'] = undefined;

/**
 * The translated name of the project role.
 * @member {String} translatedName
 */
ProjectRole.prototype['translatedName'] = undefined;






export default ProjectRole;

