/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StatusDetails from './StatusDetails';

/**
 * The IssueTypeWithStatus model module.
 * @module model/IssueTypeWithStatus
 * @version 1001.0.0-SNAPSHOT
 */
class IssueTypeWithStatus {
    /**
     * Constructs a new <code>IssueTypeWithStatus</code>.
     * Status details for an issue type.
     * @alias module:model/IssueTypeWithStatus
     * @param id {String} The ID of the issue type.
     * @param name {String} The name of the issue type.
     * @param self {String} The URL of the issue type's status details.
     * @param statuses {Array.<module:model/StatusDetails>} List of status details for the issue type.
     * @param subtask {Boolean} Whether this issue type represents subtasks.
     */
    constructor(id, name, self, statuses, subtask) { 
        
        IssueTypeWithStatus.initialize(this, id, name, self, statuses, subtask);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, self, statuses, subtask) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['self'] = self;
        obj['statuses'] = statuses;
        obj['subtask'] = subtask;
    }

    /**
     * Constructs a <code>IssueTypeWithStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueTypeWithStatus} obj Optional instance to populate.
     * @return {module:model/IssueTypeWithStatus} The populated <code>IssueTypeWithStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueTypeWithStatus();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [StatusDetails]);
            }
            if (data.hasOwnProperty('subtask')) {
                obj['subtask'] = ApiClient.convertToType(data['subtask'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueTypeWithStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueTypeWithStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueTypeWithStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statuses'])) {
            throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
        }

        return true;
    }


}

IssueTypeWithStatus.RequiredProperties = ["id", "name", "self", "statuses", "subtask"];

/**
 * The ID of the issue type.
 * @member {String} id
 */
IssueTypeWithStatus.prototype['id'] = undefined;

/**
 * The name of the issue type.
 * @member {String} name
 */
IssueTypeWithStatus.prototype['name'] = undefined;

/**
 * The URL of the issue type's status details.
 * @member {String} self
 */
IssueTypeWithStatus.prototype['self'] = undefined;

/**
 * List of status details for the issue type.
 * @member {Array.<module:model/StatusDetails>} statuses
 */
IssueTypeWithStatus.prototype['statuses'] = undefined;

/**
 * Whether this issue type represents subtasks.
 * @member {Boolean} subtask
 */
IssueTypeWithStatus.prototype['subtask'] = undefined;






export default IssueTypeWithStatus;

