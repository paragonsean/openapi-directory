/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MultipleCustomFieldValuesUpdate model module.
 * @module model/MultipleCustomFieldValuesUpdate
 * @version 1001.0.0-SNAPSHOT
 */
class MultipleCustomFieldValuesUpdate {
    /**
     * Constructs a new <code>MultipleCustomFieldValuesUpdate</code>.
     * A custom field and its new value with a list of issue to update.
     * @alias module:model/MultipleCustomFieldValuesUpdate
     * @param customField {String} The ID or key of the custom field. For example, `customfield_10010`.
     * @param issueIds {Array.<Number>} The list of issue IDs.
     * @param value {Object} The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:   *  `string` the value must be a string.  *  `number` the value must be a number.  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `\"2023-01-18T12:00:00-03:00\"` or `\"2023-01-18T12:00:00.000Z\"`. However, the milliseconds part is ignored.  *  `user` the value must be an object that contains the `accountId` field.  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.  A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
     */
    constructor(customField, issueIds, value) { 
        
        MultipleCustomFieldValuesUpdate.initialize(this, customField, issueIds, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customField, issueIds, value) { 
        obj['customField'] = customField;
        obj['issueIds'] = issueIds;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>MultipleCustomFieldValuesUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultipleCustomFieldValuesUpdate} obj Optional instance to populate.
     * @return {module:model/MultipleCustomFieldValuesUpdate} The populated <code>MultipleCustomFieldValuesUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultipleCustomFieldValuesUpdate();

            if (data.hasOwnProperty('customField')) {
                obj['customField'] = ApiClient.convertToType(data['customField'], 'String');
            }
            if (data.hasOwnProperty('issueIds')) {
                obj['issueIds'] = ApiClient.convertToType(data['issueIds'], ['Number']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultipleCustomFieldValuesUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultipleCustomFieldValuesUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MultipleCustomFieldValuesUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customField'] && !(typeof data['customField'] === 'string' || data['customField'] instanceof String)) {
            throw new Error("Expected the field `customField` to be a primitive type in the JSON string but got " + data['customField']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueIds'])) {
            throw new Error("Expected the field `issueIds` to be an array in the JSON data but got " + data['issueIds']);
        }

        return true;
    }


}

MultipleCustomFieldValuesUpdate.RequiredProperties = ["customField", "issueIds", "value"];

/**
 * The ID or key of the custom field. For example, `customfield_10010`.
 * @member {String} customField
 */
MultipleCustomFieldValuesUpdate.prototype['customField'] = undefined;

/**
 * The list of issue IDs.
 * @member {Array.<Number>} issueIds
 */
MultipleCustomFieldValuesUpdate.prototype['issueIds'] = undefined;

/**
 * The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:   *  `string` the value must be a string.  *  `number` the value must be a number.  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `\"2023-01-18T12:00:00-03:00\"` or `\"2023-01-18T12:00:00.000Z\"`. However, the milliseconds part is ignored.  *  `user` the value must be an object that contains the `accountId` field.  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.  A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
 * @member {Object} value
 */
MultipleCustomFieldValuesUpdate.prototype['value'] = undefined;






export default MultipleCustomFieldValuesUpdate;

