/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateWorkflowStatusDetails from './CreateWorkflowStatusDetails';
import CreateWorkflowTransitionDetails from './CreateWorkflowTransitionDetails';

/**
 * The CreateWorkflowDetails model module.
 * @module model/CreateWorkflowDetails
 * @version 1001.0.0-SNAPSHOT
 */
class CreateWorkflowDetails {
    /**
     * Constructs a new <code>CreateWorkflowDetails</code>.
     * The details of a workflow.
     * @alias module:model/CreateWorkflowDetails
     * @param name {String} The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
     * @param statuses {Array.<module:model/CreateWorkflowStatusDetails>} The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
     * @param transitions {Array.<module:model/CreateWorkflowTransitionDetails>} The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique 'to' status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a 'from' status on *initial* and *global* transitions.  *  have a 'from' status on *directed* transitions.  All the transition statuses must be included in `statuses`.
     */
    constructor(name, statuses, transitions) { 
        
        CreateWorkflowDetails.initialize(this, name, statuses, transitions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, statuses, transitions) { 
        obj['name'] = name;
        obj['statuses'] = statuses;
        obj['transitions'] = transitions;
    }

    /**
     * Constructs a <code>CreateWorkflowDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateWorkflowDetails} obj Optional instance to populate.
     * @return {module:model/CreateWorkflowDetails} The populated <code>CreateWorkflowDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateWorkflowDetails();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [CreateWorkflowStatusDetails]);
            }
            if (data.hasOwnProperty('transitions')) {
                obj['transitions'] = ApiClient.convertToType(data['transitions'], [CreateWorkflowTransitionDetails]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateWorkflowDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateWorkflowDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateWorkflowDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                CreateWorkflowStatusDetails.validateJSON(item);
            };
        }
        if (data['transitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitions'])) {
                throw new Error("Expected the field `transitions` to be an array in the JSON data but got " + data['transitions']);
            }
            // validate the optional field `transitions` (array)
            for (const item of data['transitions']) {
                CreateWorkflowTransitionDetails.validateJSON(item);
            };
        }

        return true;
    }


}

CreateWorkflowDetails.RequiredProperties = ["name", "statuses", "transitions"];

/**
 * The description of the workflow. The maximum length is 1000 characters.
 * @member {String} description
 */
CreateWorkflowDetails.prototype['description'] = undefined;

/**
 * The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
 * @member {String} name
 */
CreateWorkflowDetails.prototype['name'] = undefined;

/**
 * The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
 * @member {Array.<module:model/CreateWorkflowStatusDetails>} statuses
 */
CreateWorkflowDetails.prototype['statuses'] = undefined;

/**
 * The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique 'to' status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a 'from' status on *initial* and *global* transitions.  *  have a 'from' status on *directed* transitions.  All the transition statuses must be included in `statuses`.
 * @member {Array.<module:model/CreateWorkflowTransitionDetails>} transitions
 */
CreateWorkflowDetails.prototype['transitions'] = undefined;






export default CreateWorkflowDetails;

