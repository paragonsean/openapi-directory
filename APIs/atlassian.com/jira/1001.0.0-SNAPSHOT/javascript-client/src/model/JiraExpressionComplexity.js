/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JiraExpressionComplexity model module.
 * @module model/JiraExpressionComplexity
 * @version 1001.0.0-SNAPSHOT
 */
class JiraExpressionComplexity {
    /**
     * Constructs a new <code>JiraExpressionComplexity</code>.
     * Details about the complexity of the analysed Jira expression.
     * @alias module:model/JiraExpressionComplexity
     * @param expensiveOperations {String} Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
     */
    constructor(expensiveOperations) { 
        
        JiraExpressionComplexity.initialize(this, expensiveOperations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expensiveOperations) { 
        obj['expensiveOperations'] = expensiveOperations;
    }

    /**
     * Constructs a <code>JiraExpressionComplexity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraExpressionComplexity} obj Optional instance to populate.
     * @return {module:model/JiraExpressionComplexity} The populated <code>JiraExpressionComplexity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraExpressionComplexity();

            if (data.hasOwnProperty('expensiveOperations')) {
                obj['expensiveOperations'] = ApiClient.convertToType(data['expensiveOperations'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraExpressionComplexity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraExpressionComplexity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JiraExpressionComplexity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expensiveOperations'] && !(typeof data['expensiveOperations'] === 'string' || data['expensiveOperations'] instanceof String)) {
            throw new Error("Expected the field `expensiveOperations` to be a primitive type in the JSON string but got " + data['expensiveOperations']);
        }

        return true;
    }


}

JiraExpressionComplexity.RequiredProperties = ["expensiveOperations"];

/**
 * Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
 * @member {String} expensiveOperations
 */
JiraExpressionComplexity.prototype['expensiveOperations'] = undefined;

/**
 * Variables used in the formula, mapped to the parts of the expression they refer to.
 * @member {Object.<String, String>} variables
 */
JiraExpressionComplexity.prototype['variables'] = undefined;






export default JiraExpressionComplexity;

