/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationSchemeEventTypeId from './NotificationSchemeEventTypeId';
import NotificationSchemeNotificationDetails from './NotificationSchemeNotificationDetails';

/**
 * The NotificationSchemeEventDetails model module.
 * @module model/NotificationSchemeEventDetails
 * @version 1001.0.0-SNAPSHOT
 */
class NotificationSchemeEventDetails {
    /**
     * Constructs a new <code>NotificationSchemeEventDetails</code>.
     * Details of a notification scheme event.
     * @alias module:model/NotificationSchemeEventDetails
     * @extends Object
     * @param event {module:model/NotificationSchemeEventTypeId} The ID of the event.
     * @param notifications {Array.<module:model/NotificationSchemeNotificationDetails>} The list of notifications mapped to a specified event.
     */
    constructor(event, notifications) { 
        
        NotificationSchemeEventDetails.initialize(this, event, notifications);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, event, notifications) { 
        obj['event'] = event;
        obj['notifications'] = notifications;
    }

    /**
     * Constructs a <code>NotificationSchemeEventDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationSchemeEventDetails} obj Optional instance to populate.
     * @return {module:model/NotificationSchemeEventDetails} The populated <code>NotificationSchemeEventDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationSchemeEventDetails();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], NotificationSchemeEventTypeId);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], [NotificationSchemeNotificationDetails]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationSchemeEventDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationSchemeEventDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationSchemeEventDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notifications'])) {
            throw new Error("Expected the field `notifications` to be an array in the JSON data but got " + data['notifications']);
        }

        return true;
    }


}

NotificationSchemeEventDetails.RequiredProperties = ["event", "notifications"];

/**
 * The ID of the event.
 * @member {module:model/NotificationSchemeEventTypeId} event
 */
NotificationSchemeEventDetails.prototype['event'] = undefined;

/**
 * The list of notifications mapped to a specified event.
 * @member {Array.<module:model/NotificationSchemeNotificationDetails>} notifications
 */
NotificationSchemeEventDetails.prototype['notifications'] = undefined;






export default NotificationSchemeEventDetails;

