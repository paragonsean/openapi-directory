/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectFeature model module.
 * @module model/ProjectFeature
 * @version 1001.0.0-SNAPSHOT
 */
class ProjectFeature {
    /**
     * Constructs a new <code>ProjectFeature</code>.
     * Details of a project feature.
     * @alias module:model/ProjectFeature
     */
    constructor() { 
        
        ProjectFeature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectFeature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectFeature} obj Optional instance to populate.
     * @return {module:model/ProjectFeature} The populated <code>ProjectFeature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectFeature();

            if (data.hasOwnProperty('feature')) {
                obj['feature'] = ApiClient.convertToType(data['feature'], 'String');
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('localisedDescription')) {
                obj['localisedDescription'] = ApiClient.convertToType(data['localisedDescription'], 'String');
            }
            if (data.hasOwnProperty('localisedName')) {
                obj['localisedName'] = ApiClient.convertToType(data['localisedName'], 'String');
            }
            if (data.hasOwnProperty('prerequisites')) {
                obj['prerequisites'] = ApiClient.convertToType(data['prerequisites'], ['String']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('toggleLocked')) {
                obj['toggleLocked'] = ApiClient.convertToType(data['toggleLocked'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectFeature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectFeature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['feature'] && !(typeof data['feature'] === 'string' || data['feature'] instanceof String)) {
            throw new Error("Expected the field `feature` to be a primitive type in the JSON string but got " + data['feature']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // ensure the json data is a string
        if (data['localisedDescription'] && !(typeof data['localisedDescription'] === 'string' || data['localisedDescription'] instanceof String)) {
            throw new Error("Expected the field `localisedDescription` to be a primitive type in the JSON string but got " + data['localisedDescription']);
        }
        // ensure the json data is a string
        if (data['localisedName'] && !(typeof data['localisedName'] === 'string' || data['localisedName'] instanceof String)) {
            throw new Error("Expected the field `localisedName` to be a primitive type in the JSON string but got " + data['localisedName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prerequisites'])) {
            throw new Error("Expected the field `prerequisites` to be an array in the JSON data but got " + data['prerequisites']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The key of the feature.
 * @member {String} feature
 */
ProjectFeature.prototype['feature'] = undefined;

/**
 * URI for the image representing the feature.
 * @member {String} imageUri
 */
ProjectFeature.prototype['imageUri'] = undefined;

/**
 * Localized display description for the feature.
 * @member {String} localisedDescription
 */
ProjectFeature.prototype['localisedDescription'] = undefined;

/**
 * Localized display name for the feature.
 * @member {String} localisedName
 */
ProjectFeature.prototype['localisedName'] = undefined;

/**
 * List of keys of the features required to enable the feature.
 * @member {Array.<String>} prerequisites
 */
ProjectFeature.prototype['prerequisites'] = undefined;

/**
 * The ID of the project.
 * @member {Number} projectId
 */
ProjectFeature.prototype['projectId'] = undefined;

/**
 * The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
 * @member {module:model/ProjectFeature.StateEnum} state
 */
ProjectFeature.prototype['state'] = undefined;

/**
 * Whether the state of the feature can be updated.
 * @member {Boolean} toggleLocked
 */
ProjectFeature.prototype['toggleLocked'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ProjectFeature['StateEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "COMING_SOON"
     * @const
     */
    "COMING_SOON": "COMING_SOON"
};



export default ProjectFeature;

