/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssueLinkType from './IssueLinkType';
import LinkedIssue from './LinkedIssue';

/**
 * The IssueLink model module.
 * @module model/IssueLink
 * @version 1001.0.0-SNAPSHOT
 */
class IssueLink {
    /**
     * Constructs a new <code>IssueLink</code>.
     * Details of a link between issues.
     * @alias module:model/IssueLink
     * @param inwardIssue {module:model/LinkedIssue} Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
     * @param outwardIssue {module:model/LinkedIssue} Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
     * @param type {module:model/IssueLinkType} The type of link between the issues.
     */
    constructor(inwardIssue, outwardIssue, type) { 
        
        IssueLink.initialize(this, inwardIssue, outwardIssue, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inwardIssue, outwardIssue, type) { 
        obj['inwardIssue'] = inwardIssue;
        obj['outwardIssue'] = outwardIssue;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>IssueLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueLink} obj Optional instance to populate.
     * @return {module:model/IssueLink} The populated <code>IssueLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueLink();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inwardIssue')) {
                obj['inwardIssue'] = ApiClient.convertToType(data['inwardIssue'], LinkedIssue);
            }
            if (data.hasOwnProperty('outwardIssue')) {
                obj['outwardIssue'] = ApiClient.convertToType(data['outwardIssue'], LinkedIssue);
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], IssueLinkType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `inwardIssue`
        if (data['inwardIssue']) { // data not null
          LinkedIssue.validateJSON(data['inwardIssue']);
        }
        // validate the optional field `outwardIssue`
        if (data['outwardIssue']) { // data not null
          LinkedIssue.validateJSON(data['outwardIssue']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          IssueLinkType.validateJSON(data['type']);
        }

        return true;
    }


}

IssueLink.RequiredProperties = ["inwardIssue", "outwardIssue", "type"];

/**
 * The ID of the issue link.
 * @member {String} id
 */
IssueLink.prototype['id'] = undefined;

/**
 * Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
 * @member {module:model/LinkedIssue} inwardIssue
 */
IssueLink.prototype['inwardIssue'] = undefined;

/**
 * Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
 * @member {module:model/LinkedIssue} outwardIssue
 */
IssueLink.prototype['outwardIssue'] = undefined;

/**
 * The URL of the issue link.
 * @member {String} self
 */
IssueLink.prototype['self'] = undefined;

/**
 * The type of link between the issues.
 * @member {module:model/IssueLinkType} type
 */
IssueLink.prototype['type'] = undefined;






export default IssueLink;

