/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleLink model module.
 * @module model/SimpleLink
 * @version 1001.0.0-SNAPSHOT
 */
class SimpleLink {
    /**
     * Constructs a new <code>SimpleLink</code>.
     * Details about the operations available in this version.
     * @alias module:model/SimpleLink
     */
    constructor() { 
        
        SimpleLink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimpleLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleLink} obj Optional instance to populate.
     * @return {module:model/SimpleLink} The populated <code>SimpleLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleLink();

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('iconClass')) {
                obj['iconClass'] = ApiClient.convertToType(data['iconClass'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('styleClass')) {
                obj['styleClass'] = ApiClient.convertToType(data['styleClass'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleLink</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['iconClass'] && !(typeof data['iconClass'] === 'string' || data['iconClass'] instanceof String)) {
            throw new Error("Expected the field `iconClass` to be a primitive type in the JSON string but got " + data['iconClass']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['styleClass'] && !(typeof data['styleClass'] === 'string' || data['styleClass'] instanceof String)) {
            throw new Error("Expected the field `styleClass` to be a primitive type in the JSON string but got " + data['styleClass']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} href
 */
SimpleLink.prototype['href'] = undefined;

/**
 * @member {String} iconClass
 */
SimpleLink.prototype['iconClass'] = undefined;

/**
 * @member {String} id
 */
SimpleLink.prototype['id'] = undefined;

/**
 * @member {String} label
 */
SimpleLink.prototype['label'] = undefined;

/**
 * @member {String} styleClass
 */
SimpleLink.prototype['styleClass'] = undefined;

/**
 * @member {String} title
 */
SimpleLink.prototype['title'] = undefined;

/**
 * @member {Number} weight
 */
SimpleLink.prototype['weight'] = undefined;






export default SimpleLink;

