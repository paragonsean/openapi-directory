/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IncludedFields from './IncludedFields';
import IssueTransition from './IssueTransition';
import IssueUpdateMetadata from './IssueUpdateMetadata';
import JsonTypeBean from './JsonTypeBean';
import Operations from './Operations';
import PageOfChangelogs from './PageOfChangelogs';

/**
 * The IssueBean model module.
 * @module model/IssueBean
 * @version 1001.0.0-SNAPSHOT
 */
class IssueBean {
    /**
     * Constructs a new <code>IssueBean</code>.
     * Details about an issue.
     * @alias module:model/IssueBean
     */
    constructor() { 
        
        IssueBean.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueBean} obj Optional instance to populate.
     * @return {module:model/IssueBean} The populated <code>IssueBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueBean();

            if (data.hasOwnProperty('changelog')) {
                obj['changelog'] = ApiClient.convertToType(data['changelog'], PageOfChangelogs);
            }
            if (data.hasOwnProperty('editmeta')) {
                obj['editmeta'] = ApiClient.convertToType(data['editmeta'], IssueUpdateMetadata);
            }
            if (data.hasOwnProperty('expand')) {
                obj['expand'] = ApiClient.convertToType(data['expand'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': Object});
            }
            if (data.hasOwnProperty('fieldsToInclude')) {
                obj['fieldsToInclude'] = IncludedFields.constructFromObject(data['fieldsToInclude']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], {'String': 'String'});
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], Operations);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
            }
            if (data.hasOwnProperty('renderedFields')) {
                obj['renderedFields'] = ApiClient.convertToType(data['renderedFields'], {'String': Object});
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], {'String': JsonTypeBean});
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('transitions')) {
                obj['transitions'] = ApiClient.convertToType(data['transitions'], [IssueTransition]);
            }
            if (data.hasOwnProperty('versionedRepresentations')) {
                obj['versionedRepresentations'] = ApiClient.convertToType(data['versionedRepresentations'], {'String': {'String': Object}});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueBean</code>.
     */
    static validateJSON(data) {
        // validate the optional field `changelog`
        if (data['changelog']) { // data not null
          PageOfChangelogs.validateJSON(data['changelog']);
        }
        // validate the optional field `editmeta`
        if (data['editmeta']) { // data not null
          IssueUpdateMetadata.validateJSON(data['editmeta']);
        }
        // ensure the json data is a string
        if (data['expand'] && !(typeof data['expand'] === 'string' || data['expand'] instanceof String)) {
            throw new Error("Expected the field `expand` to be a primitive type in the JSON string but got " + data['expand']);
        }
        // validate the optional field `fieldsToInclude`
        if (data['fieldsToInclude']) { // data not null
          IncludedFields.validateJSON(data['fieldsToInclude']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transitions'])) {
            throw new Error("Expected the field `transitions` to be an array in the JSON data but got " + data['transitions']);
        }

        return true;
    }


}



/**
 * Details of changelogs associated with the issue.
 * @member {module:model/PageOfChangelogs} changelog
 */
IssueBean.prototype['changelog'] = undefined;

/**
 * The metadata for the fields on the issue that can be amended.
 * @member {module:model/IssueUpdateMetadata} editmeta
 */
IssueBean.prototype['editmeta'] = undefined;

/**
 * Expand options that include additional issue details in the response.
 * @member {String} expand
 */
IssueBean.prototype['expand'] = undefined;

/**
 * @member {Object.<String, Object>} fields
 */
IssueBean.prototype['fields'] = undefined;

/**
 * @member {module:model/IncludedFields} fieldsToInclude
 */
IssueBean.prototype['fieldsToInclude'] = undefined;

/**
 * The ID of the issue.
 * @member {String} id
 */
IssueBean.prototype['id'] = undefined;

/**
 * The key of the issue.
 * @member {String} key
 */
IssueBean.prototype['key'] = undefined;

/**
 * The ID and name of each field present on the issue.
 * @member {Object.<String, String>} names
 */
IssueBean.prototype['names'] = undefined;

/**
 * The operations that can be performed on the issue.
 * @member {module:model/Operations} operations
 */
IssueBean.prototype['operations'] = undefined;

/**
 * Details of the issue properties identified in the request.
 * @member {Object.<String, Object>} properties
 */
IssueBean.prototype['properties'] = undefined;

/**
 * The rendered value of each field present on the issue.
 * @member {Object.<String, Object>} renderedFields
 */
IssueBean.prototype['renderedFields'] = undefined;

/**
 * The schema describing each field present on the issue.
 * @member {Object.<String, module:model/JsonTypeBean>} schema
 */
IssueBean.prototype['schema'] = undefined;

/**
 * The URL of the issue details.
 * @member {String} self
 */
IssueBean.prototype['self'] = undefined;

/**
 * The transitions that can be performed on the issue.
 * @member {Array.<module:model/IssueTransition>} transitions
 */
IssueBean.prototype['transitions'] = undefined;

/**
 * The versions of each field on the issue.
 * @member {Object.<String, Object.<String, Object>>} versionedRepresentations
 */
IssueBean.prototype['versionedRepresentations'] = undefined;






export default IssueBean;

