/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectFeature from './ProjectFeature';

/**
 * The ContainerForProjectFeatures model module.
 * @module model/ContainerForProjectFeatures
 * @version 1001.0.0-SNAPSHOT
 */
class ContainerForProjectFeatures {
    /**
     * Constructs a new <code>ContainerForProjectFeatures</code>.
     * The list of features on a project.
     * @alias module:model/ContainerForProjectFeatures
     */
    constructor() { 
        
        ContainerForProjectFeatures.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerForProjectFeatures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerForProjectFeatures} obj Optional instance to populate.
     * @return {module:model/ContainerForProjectFeatures} The populated <code>ContainerForProjectFeatures</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerForProjectFeatures();

            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [ProjectFeature]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerForProjectFeatures</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerForProjectFeatures</code>.
     */
    static validateJSON(data) {
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                ProjectFeature.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The project features.
 * @member {Array.<module:model/ProjectFeature>} features
 */
ContainerForProjectFeatures.prototype['features'] = undefined;






export default ContainerForProjectFeatures;

