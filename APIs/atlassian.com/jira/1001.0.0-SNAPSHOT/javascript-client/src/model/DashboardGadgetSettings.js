/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardGadgetPosition from './DashboardGadgetPosition';

/**
 * The DashboardGadgetSettings model module.
 * @module model/DashboardGadgetSettings
 * @version 1001.0.0-SNAPSHOT
 */
class DashboardGadgetSettings {
    /**
     * Constructs a new <code>DashboardGadgetSettings</code>.
     * Details of the settings for a dashboard gadget.
     * @alias module:model/DashboardGadgetSettings
     */
    constructor() { 
        
        DashboardGadgetSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DashboardGadgetSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardGadgetSettings} obj Optional instance to populate.
     * @return {module:model/DashboardGadgetSettings} The populated <code>DashboardGadgetSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardGadgetSettings();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('ignoreUriAndModuleKeyValidation')) {
                obj['ignoreUriAndModuleKeyValidation'] = ApiClient.convertToType(data['ignoreUriAndModuleKeyValidation'], 'Boolean');
            }
            if (data.hasOwnProperty('moduleKey')) {
                obj['moduleKey'] = ApiClient.convertToType(data['moduleKey'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], DashboardGadgetPosition);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardGadgetSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardGadgetSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['moduleKey'] && !(typeof data['moduleKey'] === 'string' || data['moduleKey'] instanceof String)) {
            throw new Error("Expected the field `moduleKey` to be a primitive type in the JSON string but got " + data['moduleKey']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          DashboardGadgetPosition.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
 * @member {String} color
 */
DashboardGadgetSettings.prototype['color'] = undefined;

/**
 * Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
 * @member {Boolean} ignoreUriAndModuleKeyValidation
 */
DashboardGadgetSettings.prototype['ignoreUriAndModuleKeyValidation'] = undefined;

/**
 * The module key of the gadget type. Can't be provided with `uri`.
 * @member {String} moduleKey
 */
DashboardGadgetSettings.prototype['moduleKey'] = undefined;

/**
 * The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
 * @member {module:model/DashboardGadgetPosition} position
 */
DashboardGadgetSettings.prototype['position'] = undefined;

/**
 * The title of the gadget.
 * @member {String} title
 */
DashboardGadgetSettings.prototype['title'] = undefined;

/**
 * The URI of the gadget type. Can't be provided with `moduleKey`.
 * @member {String} uri
 */
DashboardGadgetSettings.prototype['uri'] = undefined;






export default DashboardGadgetSettings;

