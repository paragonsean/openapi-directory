/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldReferenceData from './FieldReferenceData';
import FunctionReferenceData from './FunctionReferenceData';

/**
 * The JQLReferenceData model module.
 * @module model/JQLReferenceData
 * @version 1001.0.0-SNAPSHOT
 */
class JQLReferenceData {
    /**
     * Constructs a new <code>JQLReferenceData</code>.
     * Lists of JQL reference data.
     * @alias module:model/JQLReferenceData
     */
    constructor() { 
        
        JQLReferenceData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JQLReferenceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JQLReferenceData} obj Optional instance to populate.
     * @return {module:model/JQLReferenceData} The populated <code>JQLReferenceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JQLReferenceData();

            if (data.hasOwnProperty('jqlReservedWords')) {
                obj['jqlReservedWords'] = ApiClient.convertToType(data['jqlReservedWords'], ['String']);
            }
            if (data.hasOwnProperty('visibleFieldNames')) {
                obj['visibleFieldNames'] = ApiClient.convertToType(data['visibleFieldNames'], [FieldReferenceData]);
            }
            if (data.hasOwnProperty('visibleFunctionNames')) {
                obj['visibleFunctionNames'] = ApiClient.convertToType(data['visibleFunctionNames'], [FunctionReferenceData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JQLReferenceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JQLReferenceData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['jqlReservedWords'])) {
            throw new Error("Expected the field `jqlReservedWords` to be an array in the JSON data but got " + data['jqlReservedWords']);
        }
        if (data['visibleFieldNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['visibleFieldNames'])) {
                throw new Error("Expected the field `visibleFieldNames` to be an array in the JSON data but got " + data['visibleFieldNames']);
            }
            // validate the optional field `visibleFieldNames` (array)
            for (const item of data['visibleFieldNames']) {
                FieldReferenceData.validateJSON(item);
            };
        }
        if (data['visibleFunctionNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['visibleFunctionNames'])) {
                throw new Error("Expected the field `visibleFunctionNames` to be an array in the JSON data but got " + data['visibleFunctionNames']);
            }
            // validate the optional field `visibleFunctionNames` (array)
            for (const item of data['visibleFunctionNames']) {
                FunctionReferenceData.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of JQL query reserved words.
 * @member {Array.<String>} jqlReservedWords
 */
JQLReferenceData.prototype['jqlReservedWords'] = undefined;

/**
 * List of fields usable in JQL queries.
 * @member {Array.<module:model/FieldReferenceData>} visibleFieldNames
 */
JQLReferenceData.prototype['visibleFieldNames'] = undefined;

/**
 * List of functions usable in JQL queries.
 * @member {Array.<module:model/FunctionReferenceData>} visibleFunctionNames
 */
JQLReferenceData.prototype['visibleFunctionNames'] = undefined;






export default JQLReferenceData;

