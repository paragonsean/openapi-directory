/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalScopeBean from './GlobalScopeBean';
import ProjectScopeBean from './ProjectScopeBean';

/**
 * The IssueFieldOptionScopeBean model module.
 * @module model/IssueFieldOptionScopeBean
 * @version 1001.0.0-SNAPSHOT
 */
class IssueFieldOptionScopeBean {
    /**
     * Constructs a new <code>IssueFieldOptionScopeBean</code>.
     * @alias module:model/IssueFieldOptionScopeBean
     */
    constructor() { 
        
        IssueFieldOptionScopeBean.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueFieldOptionScopeBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueFieldOptionScopeBean} obj Optional instance to populate.
     * @return {module:model/IssueFieldOptionScopeBean} The populated <code>IssueFieldOptionScopeBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueFieldOptionScopeBean();

            if (data.hasOwnProperty('global')) {
                obj['global'] = ApiClient.convertToType(data['global'], GlobalScopeBean);
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = ApiClient.convertToType(data['projects'], ['Number']);
            }
            if (data.hasOwnProperty('projects2')) {
                obj['projects2'] = ApiClient.convertToType(data['projects2'], [ProjectScopeBean]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueFieldOptionScopeBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueFieldOptionScopeBean</code>.
     */
    static validateJSON(data) {
        // validate the optional field `global`
        if (data['global']) { // data not null
          GlobalScopeBean.validateJSON(data['global']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projects'])) {
            throw new Error("Expected the field `projects` to be an array in the JSON data but got " + data['projects']);
        }
        if (data['projects2']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['projects2'])) {
                throw new Error("Expected the field `projects2` to be an array in the JSON data but got " + data['projects2']);
            }
            // validate the optional field `projects2` (array)
            for (const item of data['projects2']) {
                ProjectScopeBean.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
 * @member {module:model/GlobalScopeBean} global
 */
IssueFieldOptionScopeBean.prototype['global'] = undefined;

/**
 * DEPRECATED
 * @member {Array.<Number>} projects
 */
IssueFieldOptionScopeBean.prototype['projects'] = undefined;

/**
 * Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
 * @member {Array.<module:model/ProjectScopeBean>} projects2
 */
IssueFieldOptionScopeBean.prototype['projects2'] = undefined;






export default IssueFieldOptionScopeBean;

