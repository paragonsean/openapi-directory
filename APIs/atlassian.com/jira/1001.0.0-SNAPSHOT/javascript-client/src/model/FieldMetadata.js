/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonTypeBean from './JsonTypeBean';

/**
 * The FieldMetadata model module.
 * @module model/FieldMetadata
 * @version 1001.0.0-SNAPSHOT
 */
class FieldMetadata {
    /**
     * Constructs a new <code>FieldMetadata</code>.
     * The metadata describing an issue field.
     * @alias module:model/FieldMetadata
     * @param key {String} The key of the field.
     * @param name {String} The name of the field.
     * @param operations {Array.<String>} The list of operations that can be performed on the field.
     * @param required {Boolean} Whether the field is required.
     * @param schema {module:model/JsonTypeBean} The data type of the field.
     */
    constructor(key, name, operations, required, schema) { 
        
        FieldMetadata.initialize(this, key, name, operations, required, schema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, name, operations, required, schema) { 
        obj['key'] = key;
        obj['name'] = name;
        obj['operations'] = operations;
        obj['required'] = required;
        obj['schema'] = schema;
    }

    /**
     * Constructs a <code>FieldMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldMetadata} obj Optional instance to populate.
     * @return {module:model/FieldMetadata} The populated <code>FieldMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldMetadata();

            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], [Object]);
            }
            if (data.hasOwnProperty('autoCompleteUrl')) {
                obj['autoCompleteUrl'] = ApiClient.convertToType(data['autoCompleteUrl'], 'String');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], {'String': Object});
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], Object);
            }
            if (data.hasOwnProperty('hasDefaultValue')) {
                obj['hasDefaultValue'] = ApiClient.convertToType(data['hasDefaultValue'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], ['String']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], JsonTypeBean);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedValues'])) {
            throw new Error("Expected the field `allowedValues` to be an array in the JSON data but got " + data['allowedValues']);
        }
        // ensure the json data is a string
        if (data['autoCompleteUrl'] && !(typeof data['autoCompleteUrl'] === 'string' || data['autoCompleteUrl'] instanceof String)) {
            throw new Error("Expected the field `autoCompleteUrl` to be a primitive type in the JSON string but got " + data['autoCompleteUrl']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operations'])) {
            throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          JsonTypeBean.validateJSON(data['schema']);
        }

        return true;
    }


}

FieldMetadata.RequiredProperties = ["key", "name", "operations", "required", "schema"];

/**
 * The list of values allowed in the field.
 * @member {Array.<Object>} allowedValues
 */
FieldMetadata.prototype['allowedValues'] = undefined;

/**
 * The URL that can be used to automatically complete the field.
 * @member {String} autoCompleteUrl
 */
FieldMetadata.prototype['autoCompleteUrl'] = undefined;

/**
 * The configuration properties.
 * @member {Object.<String, Object>} configuration
 */
FieldMetadata.prototype['configuration'] = undefined;

/**
 * The default value of the field.
 * @member {Object} defaultValue
 */
FieldMetadata.prototype['defaultValue'] = undefined;

/**
 * Whether the field has a default value.
 * @member {Boolean} hasDefaultValue
 */
FieldMetadata.prototype['hasDefaultValue'] = undefined;

/**
 * The key of the field.
 * @member {String} key
 */
FieldMetadata.prototype['key'] = undefined;

/**
 * The name of the field.
 * @member {String} name
 */
FieldMetadata.prototype['name'] = undefined;

/**
 * The list of operations that can be performed on the field.
 * @member {Array.<String>} operations
 */
FieldMetadata.prototype['operations'] = undefined;

/**
 * Whether the field is required.
 * @member {Boolean} required
 */
FieldMetadata.prototype['required'] = undefined;

/**
 * The data type of the field.
 * @member {module:model/JsonTypeBean} schema
 */
FieldMetadata.prototype['schema'] = undefined;






export default FieldMetadata;

