/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppWorkflowTransitionRule from './AppWorkflowTransitionRule';
import WorkflowId from './WorkflowId';

/**
 * The WorkflowTransitionRules model module.
 * @module model/WorkflowTransitionRules
 * @version 1001.0.0-SNAPSHOT
 */
class WorkflowTransitionRules {
    /**
     * Constructs a new <code>WorkflowTransitionRules</code>.
     * A workflow with transition rules.
     * @alias module:model/WorkflowTransitionRules
     * @param workflowId {module:model/WorkflowId} 
     */
    constructor(workflowId) { 
        
        WorkflowTransitionRules.initialize(this, workflowId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, workflowId) { 
        obj['workflowId'] = workflowId;
    }

    /**
     * Constructs a <code>WorkflowTransitionRules</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowTransitionRules} obj Optional instance to populate.
     * @return {module:model/WorkflowTransitionRules} The populated <code>WorkflowTransitionRules</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowTransitionRules();

            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [AppWorkflowTransitionRule]);
            }
            if (data.hasOwnProperty('postFunctions')) {
                obj['postFunctions'] = ApiClient.convertToType(data['postFunctions'], [AppWorkflowTransitionRule]);
            }
            if (data.hasOwnProperty('validators')) {
                obj['validators'] = ApiClient.convertToType(data['validators'], [AppWorkflowTransitionRule]);
            }
            if (data.hasOwnProperty('workflowId')) {
                obj['workflowId'] = WorkflowId.constructFromObject(data['workflowId']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowTransitionRules</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowTransitionRules</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowTransitionRules.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                AppWorkflowTransitionRule.validateJSON(item);
            };
        }
        if (data['postFunctions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['postFunctions'])) {
                throw new Error("Expected the field `postFunctions` to be an array in the JSON data but got " + data['postFunctions']);
            }
            // validate the optional field `postFunctions` (array)
            for (const item of data['postFunctions']) {
                AppWorkflowTransitionRule.validateJSON(item);
            };
        }
        if (data['validators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validators'])) {
                throw new Error("Expected the field `validators` to be an array in the JSON data but got " + data['validators']);
            }
            // validate the optional field `validators` (array)
            for (const item of data['validators']) {
                AppWorkflowTransitionRule.validateJSON(item);
            };
        }
        // validate the optional field `workflowId`
        if (data['workflowId']) { // data not null
          WorkflowId.validateJSON(data['workflowId']);
        }

        return true;
    }


}

WorkflowTransitionRules.RequiredProperties = ["workflowId"];

/**
 * The list of conditions within the workflow.
 * @member {Array.<module:model/AppWorkflowTransitionRule>} conditions
 */
WorkflowTransitionRules.prototype['conditions'] = undefined;

/**
 * The list of post functions within the workflow.
 * @member {Array.<module:model/AppWorkflowTransitionRule>} postFunctions
 */
WorkflowTransitionRules.prototype['postFunctions'] = undefined;

/**
 * The list of validators within the workflow.
 * @member {Array.<module:model/AppWorkflowTransitionRule>} validators
 */
WorkflowTransitionRules.prototype['validators'] = undefined;

/**
 * @member {module:model/WorkflowId} workflowId
 */
WorkflowTransitionRules.prototype['workflowId'] = undefined;






export default WorkflowTransitionRules;

