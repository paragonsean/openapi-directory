/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldLastUsed from './FieldLastUsed';
import JsonTypeBean from './JsonTypeBean';

/**
 * The Field model module.
 * @module model/Field
 * @version 1001.0.0-SNAPSHOT
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * Details of a field.
     * @alias module:model/Field
     * @param id {String} The ID of the field.
     * @param name {String} The name of the field.
     * @param schema {module:model/JsonTypeBean} 
     */
    constructor(id, name, schema) { 
        
        Field.initialize(this, id, name, schema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, schema) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['schema'] = schema;
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('contextsCount')) {
                obj['contextsCount'] = ApiClient.convertToType(data['contextsCount'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isLocked')) {
                obj['isLocked'] = ApiClient.convertToType(data['isLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('isUnscreenable')) {
                obj['isUnscreenable'] = ApiClient.convertToType(data['isUnscreenable'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('lastUsed')) {
                obj['lastUsed'] = FieldLastUsed.constructFromObject(data['lastUsed']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectsCount')) {
                obj['projectsCount'] = ApiClient.convertToType(data['projectsCount'], 'Number');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = JsonTypeBean.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('screensCount')) {
                obj['screensCount'] = ApiClient.convertToType(data['screensCount'], 'Number');
            }
            if (data.hasOwnProperty('searcherKey')) {
                obj['searcherKey'] = ApiClient.convertToType(data['searcherKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Field.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // validate the optional field `lastUsed`
        if (data['lastUsed']) { // data not null
          FieldLastUsed.validateJSON(data['lastUsed']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          JsonTypeBean.validateJSON(data['schema']);
        }
        // ensure the json data is a string
        if (data['searcherKey'] && !(typeof data['searcherKey'] === 'string' || data['searcherKey'] instanceof String)) {
            throw new Error("Expected the field `searcherKey` to be a primitive type in the JSON string but got " + data['searcherKey']);
        }

        return true;
    }


}

Field.RequiredProperties = ["id", "name", "schema"];

/**
 * Number of contexts where the field is used.
 * @member {Number} contextsCount
 */
Field.prototype['contextsCount'] = undefined;

/**
 * The description of the field.
 * @member {String} description
 */
Field.prototype['description'] = undefined;

/**
 * The ID of the field.
 * @member {String} id
 */
Field.prototype['id'] = undefined;

/**
 * Whether the field is locked.
 * @member {Boolean} isLocked
 */
Field.prototype['isLocked'] = undefined;

/**
 * Whether the field is shown on screen or not.
 * @member {Boolean} isUnscreenable
 */
Field.prototype['isUnscreenable'] = undefined;

/**
 * The key of the field.
 * @member {String} key
 */
Field.prototype['key'] = undefined;

/**
 * @member {module:model/FieldLastUsed} lastUsed
 */
Field.prototype['lastUsed'] = undefined;

/**
 * The name of the field.
 * @member {String} name
 */
Field.prototype['name'] = undefined;

/**
 * Number of projects where the field is used.
 * @member {Number} projectsCount
 */
Field.prototype['projectsCount'] = undefined;

/**
 * @member {module:model/JsonTypeBean} schema
 */
Field.prototype['schema'] = undefined;

/**
 * Number of screens where the field is used.
 * @member {Number} screensCount
 */
Field.prototype['screensCount'] = undefined;

/**
 * The searcher key of the field. Returned for custom fields.
 * @member {String} searcherKey
 */
Field.prototype['searcherKey'] = undefined;






export default Field;

