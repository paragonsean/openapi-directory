/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderOfIssueTypes model module.
 * @module model/OrderOfIssueTypes
 * @version 1001.0.0-SNAPSHOT
 */
class OrderOfIssueTypes {
    /**
     * Constructs a new <code>OrderOfIssueTypes</code>.
     * An ordered list of issue type IDs and information about where to move them.
     * @alias module:model/OrderOfIssueTypes
     * @param issueTypeIds {Array.<String>} A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
     */
    constructor(issueTypeIds) { 
        
        OrderOfIssueTypes.initialize(this, issueTypeIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, issueTypeIds) { 
        obj['issueTypeIds'] = issueTypeIds;
    }

    /**
     * Constructs a <code>OrderOfIssueTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderOfIssueTypes} obj Optional instance to populate.
     * @return {module:model/OrderOfIssueTypes} The populated <code>OrderOfIssueTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderOfIssueTypes();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'String');
            }
            if (data.hasOwnProperty('issueTypeIds')) {
                obj['issueTypeIds'] = ApiClient.convertToType(data['issueTypeIds'], ['String']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderOfIssueTypes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderOfIssueTypes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderOfIssueTypes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['after'] && !(typeof data['after'] === 'string' || data['after'] instanceof String)) {
            throw new Error("Expected the field `after` to be a primitive type in the JSON string but got " + data['after']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueTypeIds'])) {
            throw new Error("Expected the field `issueTypeIds` to be an array in the JSON data but got " + data['issueTypeIds']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }

        return true;
    }


}

OrderOfIssueTypes.RequiredProperties = ["issueTypeIds"];

/**
 * The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
 * @member {String} after
 */
OrderOfIssueTypes.prototype['after'] = undefined;

/**
 * A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
 * @member {Array.<String>} issueTypeIds
 */
OrderOfIssueTypes.prototype['issueTypeIds'] = undefined;

/**
 * The position the issue types should be moved to. Required if `after` isn't provided.
 * @member {module:model/OrderOfIssueTypes.PositionEnum} position
 */
OrderOfIssueTypes.prototype['position'] = undefined;





/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
OrderOfIssueTypes['PositionEnum'] = {

    /**
     * value: "First"
     * @const
     */
    "First": "First",

    /**
     * value: "Last"
     * @const
     */
    "Last": "Last"
};



export default OrderOfIssueTypes;

