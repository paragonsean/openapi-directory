/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomFieldDefinitionJsonBean model module.
 * @module model/CustomFieldDefinitionJsonBean
 * @version 1001.0.0-SNAPSHOT
 */
class CustomFieldDefinitionJsonBean {
    /**
     * Constructs a new <code>CustomFieldDefinitionJsonBean</code>.
     * @alias module:model/CustomFieldDefinitionJsonBean
     * @param name {String} The name of the custom field, which is displayed in Jira. This is not the unique identifier.
     * @param type {String} The type of the custom field. These built-in custom field types are available:   *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)  *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)  *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)  *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)  *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)  *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)  *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)  *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)  *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)  *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)  *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)  *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)  *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)  *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)  *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)  *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)  *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)  *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)  *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)  *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)  *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)  To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
     */
    constructor(name, type) { 
        
        CustomFieldDefinitionJsonBean.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CustomFieldDefinitionJsonBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomFieldDefinitionJsonBean} obj Optional instance to populate.
     * @return {module:model/CustomFieldDefinitionJsonBean} The populated <code>CustomFieldDefinitionJsonBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomFieldDefinitionJsonBean();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('searcherKey')) {
                obj['searcherKey'] = ApiClient.convertToType(data['searcherKey'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomFieldDefinitionJsonBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomFieldDefinitionJsonBean</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomFieldDefinitionJsonBean.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['searcherKey'] && !(typeof data['searcherKey'] === 'string' || data['searcherKey'] instanceof String)) {
            throw new Error("Expected the field `searcherKey` to be a primitive type in the JSON string but got " + data['searcherKey']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CustomFieldDefinitionJsonBean.RequiredProperties = ["name", "type"];

/**
 * The description of the custom field, which is displayed in Jira.
 * @member {String} description
 */
CustomFieldDefinitionJsonBean.prototype['description'] = undefined;

/**
 * The name of the custom field, which is displayed in Jira. This is not the unique identifier.
 * @member {String} name
 */
CustomFieldDefinitionJsonBean.prototype['name'] = undefined;

/**
 * The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.   The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):   *  `cascadingselect`: `cascadingselectsearcher`  *  `datepicker`: `daterange`  *  `datetime`: `datetimerange`  *  `float`: `exactnumber` or `numberrange`  *  `grouppicker`: `grouppickersearcher`  *  `importid`: `exactnumber` or `numberrange`  *  `labels`: `labelsearcher`  *  `multicheckboxes`: `multiselectsearcher`  *  `multigrouppicker`: `multiselectsearcher`  *  `multiselect`: `multiselectsearcher`  *  `multiuserpicker`: `userpickergroupsearcher`  *  `multiversion`: `versionsearcher`  *  `project`: `projectsearcher`  *  `radiobuttons`: `multiselectsearcher`  *  `readonlyfield`: `textsearcher`  *  `select`: `multiselectsearcher`  *  `textarea`: `textsearcher`  *  `textfield`: `textsearcher`  *  `url`: `exacttextsearcher`  *  `userpicker`: `userpickergroupsearcher`  *  `version`: `versionsearcher`  If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
 * @member {module:model/CustomFieldDefinitionJsonBean.SearcherKeyEnum} searcherKey
 */
CustomFieldDefinitionJsonBean.prototype['searcherKey'] = undefined;

/**
 * The type of the custom field. These built-in custom field types are available:   *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)  *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)  *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)  *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)  *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)  *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)  *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)  *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)  *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)  *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)  *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)  *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)  *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)  *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)  *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)  *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)  *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)  *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)  *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)  *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)  *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)  To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
 * @member {String} type
 */
CustomFieldDefinitionJsonBean.prototype['type'] = undefined;





/**
 * Allowed values for the <code>searcherKey</code> property.
 * @enum {String}
 * @readonly
 */
CustomFieldDefinitionJsonBean['SearcherKeyEnum'] = {

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher"
     * @const
     */
    "cascadingselectsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:daterange"
     * @const
     */
    "daterange": "com.atlassian.jira.plugin.system.customfieldtypes:daterange",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange"
     * @const
     */
    "datetimerange": "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"
     * @const
     */
    "exactnumber": "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher"
     * @const
     */
    "exacttextsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"
     * @const
     */
    "grouppickersearcher": "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher"
     * @const
     */
    "labelsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher"
     * @const
     */
    "multiselectsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:numberrange"
     * @const
     */
    "numberrange": "com.atlassian.jira.plugin.system.customfieldtypes:numberrange",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher"
     * @const
     */
    "projectsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher"
     * @const
     */
    "textsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher"
     * @const
     */
    "userpickergroupsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher",

    /**
     * value: "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher"
     * @const
     */
    "versionsearcher": "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher"
};



export default CustomFieldDefinitionJsonBean;

