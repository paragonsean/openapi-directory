/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SuggestedIssue from './SuggestedIssue';

/**
 * The IssuePickerSuggestionsIssueType model module.
 * @module model/IssuePickerSuggestionsIssueType
 * @version 1001.0.0-SNAPSHOT
 */
class IssuePickerSuggestionsIssueType {
    /**
     * Constructs a new <code>IssuePickerSuggestionsIssueType</code>.
     * A type of issue suggested for use in auto-completion.
     * @alias module:model/IssuePickerSuggestionsIssueType
     */
    constructor() { 
        
        IssuePickerSuggestionsIssueType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssuePickerSuggestionsIssueType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssuePickerSuggestionsIssueType} obj Optional instance to populate.
     * @return {module:model/IssuePickerSuggestionsIssueType} The populated <code>IssuePickerSuggestionsIssueType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssuePickerSuggestionsIssueType();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [SuggestedIssue]);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('msg')) {
                obj['msg'] = ApiClient.convertToType(data['msg'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssuePickerSuggestionsIssueType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssuePickerSuggestionsIssueType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                SuggestedIssue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['msg'] && !(typeof data['msg'] === 'string' || data['msg'] instanceof String)) {
            throw new Error("Expected the field `msg` to be a primitive type in the JSON string but got " + data['msg']);
        }
        // ensure the json data is a string
        if (data['sub'] && !(typeof data['sub'] === 'string' || data['sub'] instanceof String)) {
            throw new Error("Expected the field `sub` to be a primitive type in the JSON string but got " + data['sub']);
        }

        return true;
    }


}



/**
 * The ID of the type of issues suggested for use in auto-completion.
 * @member {String} id
 */
IssuePickerSuggestionsIssueType.prototype['id'] = undefined;

/**
 * A list of issues suggested for use in auto-completion.
 * @member {Array.<module:model/SuggestedIssue>} issues
 */
IssuePickerSuggestionsIssueType.prototype['issues'] = undefined;

/**
 * The label of the type of issues suggested for use in auto-completion.
 * @member {String} label
 */
IssuePickerSuggestionsIssueType.prototype['label'] = undefined;

/**
 * If no issue suggestions are found, returns a message indicating no suggestions were found,
 * @member {String} msg
 */
IssuePickerSuggestionsIssueType.prototype['msg'] = undefined;

/**
 * If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
 * @member {String} sub
 */
IssuePickerSuggestionsIssueType.prototype['sub'] = undefined;






export default IssuePickerSuggestionsIssueType;

