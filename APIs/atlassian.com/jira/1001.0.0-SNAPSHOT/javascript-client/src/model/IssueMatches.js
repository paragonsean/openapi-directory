/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssueMatchesForJQL from './IssueMatchesForJQL';

/**
 * The IssueMatches model module.
 * @module model/IssueMatches
 * @version 1001.0.0-SNAPSHOT
 */
class IssueMatches {
    /**
     * Constructs a new <code>IssueMatches</code>.
     * A list of matched issues or errors for each JQL query, in the order the JQL queries were passed.
     * @alias module:model/IssueMatches
     * @param matches {Array.<module:model/IssueMatchesForJQL>} 
     */
    constructor(matches) { 
        
        IssueMatches.initialize(this, matches);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, matches) { 
        obj['matches'] = matches;
    }

    /**
     * Constructs a <code>IssueMatches</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueMatches} obj Optional instance to populate.
     * @return {module:model/IssueMatches} The populated <code>IssueMatches</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueMatches();

            if (data.hasOwnProperty('matches')) {
                obj['matches'] = ApiClient.convertToType(data['matches'], [IssueMatchesForJQL]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueMatches</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueMatches</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueMatches.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['matches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matches'])) {
                throw new Error("Expected the field `matches` to be an array in the JSON data but got " + data['matches']);
            }
            // validate the optional field `matches` (array)
            for (const item of data['matches']) {
                IssueMatchesForJQL.validateJSON(item);
            };
        }

        return true;
    }


}

IssueMatches.RequiredProperties = ["matches"];

/**
 * @member {Array.<module:model/IssueMatchesForJQL>} matches
 */
IssueMatches.prototype['matches'] = undefined;






export default IssueMatches;

