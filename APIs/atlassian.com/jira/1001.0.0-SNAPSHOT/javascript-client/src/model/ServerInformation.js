/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthCheckResult from './HealthCheckResult';

/**
 * The ServerInformation model module.
 * @module model/ServerInformation
 * @version 1001.0.0-SNAPSHOT
 */
class ServerInformation {
    /**
     * Constructs a new <code>ServerInformation</code>.
     * Details about the Jira instance.
     * @alias module:model/ServerInformation
     */
    constructor() { 
        
        ServerInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerInformation} obj Optional instance to populate.
     * @return {module:model/ServerInformation} The populated <code>ServerInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerInformation();

            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('buildDate')) {
                obj['buildDate'] = ApiClient.convertToType(data['buildDate'], 'Date');
            }
            if (data.hasOwnProperty('buildNumber')) {
                obj['buildNumber'] = ApiClient.convertToType(data['buildNumber'], 'Number');
            }
            if (data.hasOwnProperty('deploymentType')) {
                obj['deploymentType'] = ApiClient.convertToType(data['deploymentType'], 'String');
            }
            if (data.hasOwnProperty('healthChecks')) {
                obj['healthChecks'] = ApiClient.convertToType(data['healthChecks'], [HealthCheckResult]);
            }
            if (data.hasOwnProperty('scmInfo')) {
                obj['scmInfo'] = ApiClient.convertToType(data['scmInfo'], 'String');
            }
            if (data.hasOwnProperty('serverTime')) {
                obj['serverTime'] = ApiClient.convertToType(data['serverTime'], 'Date');
            }
            if (data.hasOwnProperty('serverTitle')) {
                obj['serverTitle'] = ApiClient.convertToType(data['serverTitle'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('versionNumbers')) {
                obj['versionNumbers'] = ApiClient.convertToType(data['versionNumbers'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        // ensure the json data is a string
        if (data['deploymentType'] && !(typeof data['deploymentType'] === 'string' || data['deploymentType'] instanceof String)) {
            throw new Error("Expected the field `deploymentType` to be a primitive type in the JSON string but got " + data['deploymentType']);
        }
        if (data['healthChecks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthChecks'])) {
                throw new Error("Expected the field `healthChecks` to be an array in the JSON data but got " + data['healthChecks']);
            }
            // validate the optional field `healthChecks` (array)
            for (const item of data['healthChecks']) {
                HealthCheckResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['scmInfo'] && !(typeof data['scmInfo'] === 'string' || data['scmInfo'] instanceof String)) {
            throw new Error("Expected the field `scmInfo` to be a primitive type in the JSON string but got " + data['scmInfo']);
        }
        // ensure the json data is a string
        if (data['serverTitle'] && !(typeof data['serverTitle'] === 'string' || data['serverTitle'] instanceof String)) {
            throw new Error("Expected the field `serverTitle` to be a primitive type in the JSON string but got " + data['serverTitle']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['versionNumbers'])) {
            throw new Error("Expected the field `versionNumbers` to be an array in the JSON data but got " + data['versionNumbers']);
        }

        return true;
    }


}



/**
 * The base URL of the Jira instance.
 * @member {String} baseUrl
 */
ServerInformation.prototype['baseUrl'] = undefined;

/**
 * The timestamp when the Jira version was built.
 * @member {Date} buildDate
 */
ServerInformation.prototype['buildDate'] = undefined;

/**
 * The build number of the Jira version.
 * @member {Number} buildNumber
 */
ServerInformation.prototype['buildNumber'] = undefined;

/**
 * The type of server deployment. This is always returned as *Cloud*.
 * @member {String} deploymentType
 */
ServerInformation.prototype['deploymentType'] = undefined;

/**
 * Jira instance health check results. Deprecated and no longer returned.
 * @member {Array.<module:model/HealthCheckResult>} healthChecks
 */
ServerInformation.prototype['healthChecks'] = undefined;

/**
 * The unique identifier of the Jira version.
 * @member {String} scmInfo
 */
ServerInformation.prototype['scmInfo'] = undefined;

/**
 * The time in Jira when this request was responded to.
 * @member {Date} serverTime
 */
ServerInformation.prototype['serverTime'] = undefined;

/**
 * The name of the Jira instance.
 * @member {String} serverTitle
 */
ServerInformation.prototype['serverTitle'] = undefined;

/**
 * The version of Jira.
 * @member {String} version
 */
ServerInformation.prototype['version'] = undefined;

/**
 * The major, minor, and revision version numbers of the Jira version.
 * @member {Array.<Number>} versionNumbers
 */
ServerInformation.prototype['versionNumbers'] = undefined;






export default ServerInformation;

