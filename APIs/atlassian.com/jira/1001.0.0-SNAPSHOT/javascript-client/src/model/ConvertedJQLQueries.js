/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JQLQueryWithUnknownUsers from './JQLQueryWithUnknownUsers';

/**
 * The ConvertedJQLQueries model module.
 * @module model/ConvertedJQLQueries
 * @version 1001.0.0-SNAPSHOT
 */
class ConvertedJQLQueries {
    /**
     * Constructs a new <code>ConvertedJQLQueries</code>.
     * The converted JQL queries.
     * @alias module:model/ConvertedJQLQueries
     */
    constructor() { 
        
        ConvertedJQLQueries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConvertedJQLQueries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConvertedJQLQueries} obj Optional instance to populate.
     * @return {module:model/ConvertedJQLQueries} The populated <code>ConvertedJQLQueries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConvertedJQLQueries();

            if (data.hasOwnProperty('queriesWithUnknownUsers')) {
                obj['queriesWithUnknownUsers'] = ApiClient.convertToType(data['queriesWithUnknownUsers'], [JQLQueryWithUnknownUsers]);
            }
            if (data.hasOwnProperty('queryStrings')) {
                obj['queryStrings'] = ApiClient.convertToType(data['queryStrings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConvertedJQLQueries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConvertedJQLQueries</code>.
     */
    static validateJSON(data) {
        if (data['queriesWithUnknownUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queriesWithUnknownUsers'])) {
                throw new Error("Expected the field `queriesWithUnknownUsers` to be an array in the JSON data but got " + data['queriesWithUnknownUsers']);
            }
            // validate the optional field `queriesWithUnknownUsers` (array)
            for (const item of data['queriesWithUnknownUsers']) {
                JQLQueryWithUnknownUsers.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['queryStrings'])) {
            throw new Error("Expected the field `queryStrings` to be an array in the JSON data but got " + data['queryStrings']);
        }

        return true;
    }


}



/**
 * List of queries containing user information that could not be mapped to an existing user
 * @member {Array.<module:model/JQLQueryWithUnknownUsers>} queriesWithUnknownUsers
 */
ConvertedJQLQueries.prototype['queriesWithUnknownUsers'] = undefined;

/**
 * The list of converted query strings with account IDs in place of user identifiers.
 * @member {Array.<String>} queryStrings
 */
ConvertedJQLQueries.prototype['queryStrings'] = undefined;






export default ConvertedJQLQueries;

