/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectDetails from './ProjectDetails';
import PublishedWorkflowId from './PublishedWorkflowId';
import Transition from './Transition';
import WorkflowOperations from './WorkflowOperations';
import WorkflowSchemeIdName from './WorkflowSchemeIdName';
import WorkflowStatus from './WorkflowStatus';

/**
 * The Workflow model module.
 * @module model/Workflow
 * @version 1001.0.0-SNAPSHOT
 */
class Workflow {
    /**
     * Constructs a new <code>Workflow</code>.
     * Details about a workflow.
     * @alias module:model/Workflow
     * @param description {String} The description of the workflow.
     * @param id {module:model/PublishedWorkflowId} 
     */
    constructor(description, id) { 
        
        Workflow.initialize(this, description, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, id) { 
        obj['description'] = description;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Workflow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Workflow} obj Optional instance to populate.
     * @return {module:model/Workflow} The populated <code>Workflow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Workflow();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hasDraftWorkflow')) {
                obj['hasDraftWorkflow'] = ApiClient.convertToType(data['hasDraftWorkflow'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = PublishedWorkflowId.constructFromObject(data['id']);
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = WorkflowOperations.constructFromObject(data['operations']);
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = ApiClient.convertToType(data['projects'], [ProjectDetails]);
            }
            if (data.hasOwnProperty('schemes')) {
                obj['schemes'] = ApiClient.convertToType(data['schemes'], [WorkflowSchemeIdName]);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [WorkflowStatus]);
            }
            if (data.hasOwnProperty('transitions')) {
                obj['transitions'] = ApiClient.convertToType(data['transitions'], [Transition]);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Workflow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Workflow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Workflow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          PublishedWorkflowId.validateJSON(data['id']);
        }
        // validate the optional field `operations`
        if (data['operations']) { // data not null
          WorkflowOperations.validateJSON(data['operations']);
        }
        if (data['projects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['projects'])) {
                throw new Error("Expected the field `projects` to be an array in the JSON data but got " + data['projects']);
            }
            // validate the optional field `projects` (array)
            for (const item of data['projects']) {
                ProjectDetails.validateJSON(item);
            };
        }
        if (data['schemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schemes'])) {
                throw new Error("Expected the field `schemes` to be an array in the JSON data but got " + data['schemes']);
            }
            // validate the optional field `schemes` (array)
            for (const item of data['schemes']) {
                WorkflowSchemeIdName.validateJSON(item);
            };
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                WorkflowStatus.validateJSON(item);
            };
        }
        if (data['transitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitions'])) {
                throw new Error("Expected the field `transitions` to be an array in the JSON data but got " + data['transitions']);
            }
            // validate the optional field `transitions` (array)
            for (const item of data['transitions']) {
                Transition.validateJSON(item);
            };
        }

        return true;
    }


}

Workflow.RequiredProperties = ["description", "id"];

/**
 * The creation date of the workflow.
 * @member {Date} created
 */
Workflow.prototype['created'] = undefined;

/**
 * The description of the workflow.
 * @member {String} description
 */
Workflow.prototype['description'] = undefined;

/**
 * Whether the workflow has a draft version.
 * @member {Boolean} hasDraftWorkflow
 */
Workflow.prototype['hasDraftWorkflow'] = undefined;

/**
 * @member {module:model/PublishedWorkflowId} id
 */
Workflow.prototype['id'] = undefined;

/**
 * Whether this is the default workflow.
 * @member {Boolean} isDefault
 */
Workflow.prototype['isDefault'] = undefined;

/**
 * @member {module:model/WorkflowOperations} operations
 */
Workflow.prototype['operations'] = undefined;

/**
 * The projects the workflow is assigned to, through workflow schemes.
 * @member {Array.<module:model/ProjectDetails>} projects
 */
Workflow.prototype['projects'] = undefined;

/**
 * The workflow schemes the workflow is assigned to.
 * @member {Array.<module:model/WorkflowSchemeIdName>} schemes
 */
Workflow.prototype['schemes'] = undefined;

/**
 * The statuses of the workflow.
 * @member {Array.<module:model/WorkflowStatus>} statuses
 */
Workflow.prototype['statuses'] = undefined;

/**
 * The transitions of the workflow.
 * @member {Array.<module:model/Transition>} transitions
 */
Workflow.prototype['transitions'] = undefined;

/**
 * The last edited date of the workflow.
 * @member {Date} updated
 */
Workflow.prototype['updated'] = undefined;






export default Workflow;

