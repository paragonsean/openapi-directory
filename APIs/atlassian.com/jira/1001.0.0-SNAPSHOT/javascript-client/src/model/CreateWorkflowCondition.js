/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateWorkflowCondition model module.
 * @module model/CreateWorkflowCondition
 * @version 1001.0.0-SNAPSHOT
 */
class CreateWorkflowCondition {
    /**
     * Constructs a new <code>CreateWorkflowCondition</code>.
     * A workflow transition condition.
     * @alias module:model/CreateWorkflowCondition
     */
    constructor() { 
        
        CreateWorkflowCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateWorkflowCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateWorkflowCondition} obj Optional instance to populate.
     * @return {module:model/CreateWorkflowCondition} The populated <code>CreateWorkflowCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateWorkflowCondition();

            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [CreateWorkflowCondition]);
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], {'String': Object});
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateWorkflowCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateWorkflowCondition</code>.
     */
    static validateJSON(data) {
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                CreateWorkflowCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The list of workflow conditions.
 * @member {Array.<module:model/CreateWorkflowCondition>} conditions
 */
CreateWorkflowCondition.prototype['conditions'] = undefined;

/**
 * EXPERIMENTAL. The configuration of the transition rule.
 * @member {Object.<String, Object>} configuration
 */
CreateWorkflowCondition.prototype['configuration'] = undefined;

/**
 * The compound condition operator.
 * @member {module:model/CreateWorkflowCondition.OperatorEnum} operator
 */
CreateWorkflowCondition.prototype['operator'] = undefined;

/**
 * The type of the transition rule.
 * @member {String} type
 */
CreateWorkflowCondition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
CreateWorkflowCondition['OperatorEnum'] = {

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR"
};



export default CreateWorkflowCondition;

