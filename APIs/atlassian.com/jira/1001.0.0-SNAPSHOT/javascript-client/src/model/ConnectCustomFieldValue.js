/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectCustomFieldValue model module.
 * @module model/ConnectCustomFieldValue
 * @version 1001.0.0-SNAPSHOT
 */
class ConnectCustomFieldValue {
    /**
     * Constructs a new <code>ConnectCustomFieldValue</code>.
     * A list of custom field details.
     * @alias module:model/ConnectCustomFieldValue
     * @param type {module:model/ConnectCustomFieldValue.TypeEnum} The type of custom field.
     * @param fieldID {Number} The custom field ID.
     * @param issueID {Number} The issue ID.
     */
    constructor(type, fieldID, issueID) { 
        
        ConnectCustomFieldValue.initialize(this, type, fieldID, issueID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, fieldID, issueID) { 
        obj['_type'] = type;
        obj['fieldID'] = fieldID;
        obj['issueID'] = issueID;
    }

    /**
     * Constructs a <code>ConnectCustomFieldValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectCustomFieldValue} obj Optional instance to populate.
     * @return {module:model/ConnectCustomFieldValue} The populated <code>ConnectCustomFieldValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectCustomFieldValue();

            if (data.hasOwnProperty('_type')) {
                obj['_type'] = ApiClient.convertToType(data['_type'], 'String');
            }
            if (data.hasOwnProperty('fieldID')) {
                obj['fieldID'] = ApiClient.convertToType(data['fieldID'], 'Number');
            }
            if (data.hasOwnProperty('issueID')) {
                obj['issueID'] = ApiClient.convertToType(data['issueID'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('optionID')) {
                obj['optionID'] = ApiClient.convertToType(data['optionID'], 'String');
            }
            if (data.hasOwnProperty('richText')) {
                obj['richText'] = ApiClient.convertToType(data['richText'], 'String');
            }
            if (data.hasOwnProperty('string')) {
                obj['string'] = ApiClient.convertToType(data['string'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectCustomFieldValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectCustomFieldValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectCustomFieldValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_type'] && !(typeof data['_type'] === 'string' || data['_type'] instanceof String)) {
            throw new Error("Expected the field `_type` to be a primitive type in the JSON string but got " + data['_type']);
        }
        // ensure the json data is a string
        if (data['optionID'] && !(typeof data['optionID'] === 'string' || data['optionID'] instanceof String)) {
            throw new Error("Expected the field `optionID` to be a primitive type in the JSON string but got " + data['optionID']);
        }
        // ensure the json data is a string
        if (data['richText'] && !(typeof data['richText'] === 'string' || data['richText'] instanceof String)) {
            throw new Error("Expected the field `richText` to be a primitive type in the JSON string but got " + data['richText']);
        }
        // ensure the json data is a string
        if (data['string'] && !(typeof data['string'] === 'string' || data['string'] instanceof String)) {
            throw new Error("Expected the field `string` to be a primitive type in the JSON string but got " + data['string']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

ConnectCustomFieldValue.RequiredProperties = ["_type", "fieldID", "issueID"];

/**
 * The type of custom field.
 * @member {module:model/ConnectCustomFieldValue.TypeEnum} _type
 */
ConnectCustomFieldValue.prototype['_type'] = undefined;

/**
 * The custom field ID.
 * @member {Number} fieldID
 */
ConnectCustomFieldValue.prototype['fieldID'] = undefined;

/**
 * The issue ID.
 * @member {Number} issueID
 */
ConnectCustomFieldValue.prototype['issueID'] = undefined;

/**
 * The value of number type custom field when `_type` is `NumberIssueField`.
 * @member {Number} number
 */
ConnectCustomFieldValue.prototype['number'] = undefined;

/**
 * The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
 * @member {String} optionID
 */
ConnectCustomFieldValue.prototype['optionID'] = undefined;

/**
 * The value of richText type custom field when `_type` is `RichTextIssueField`.
 * @member {String} richText
 */
ConnectCustomFieldValue.prototype['richText'] = undefined;

/**
 * The value of string type custom field when `_type` is `StringIssueField`.
 * @member {String} string
 */
ConnectCustomFieldValue.prototype['string'] = undefined;

/**
 * The value of of text custom field type when `_type` is `TextIssueField`.
 * @member {String} text
 */
ConnectCustomFieldValue.prototype['text'] = undefined;





/**
 * Allowed values for the <code>_type</code> property.
 * @enum {String}
 * @readonly
 */
ConnectCustomFieldValue['TypeEnum'] = {

    /**
     * value: "StringIssueField"
     * @const
     */
    "StringIssueField": "StringIssueField",

    /**
     * value: "NumberIssueField"
     * @const
     */
    "NumberIssueField": "NumberIssueField",

    /**
     * value: "RichTextIssueField"
     * @const
     */
    "RichTextIssueField": "RichTextIssueField",

    /**
     * value: "SingleSelectIssueField"
     * @const
     */
    "SingleSelectIssueField": "SingleSelectIssueField",

    /**
     * value: "MultiSelectIssueField"
     * @const
     */
    "MultiSelectIssueField": "MultiSelectIssueField",

    /**
     * value: "TextIssueField"
     * @const
     */
    "TextIssueField": "TextIssueField"
};



export default ConnectCustomFieldValue;

