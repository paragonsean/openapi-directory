/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCollection from './ErrorCollection';

/**
 * The SanitizedJqlQuery model module.
 * @module model/SanitizedJqlQuery
 * @version 1001.0.0-SNAPSHOT
 */
class SanitizedJqlQuery {
    /**
     * Constructs a new <code>SanitizedJqlQuery</code>.
     * Details of the sanitized JQL query.
     * @alias module:model/SanitizedJqlQuery
     */
    constructor() { 
        
        SanitizedJqlQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SanitizedJqlQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SanitizedJqlQuery} obj Optional instance to populate.
     * @return {module:model/SanitizedJqlQuery} The populated <code>SanitizedJqlQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SanitizedJqlQuery();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ErrorCollection);
            }
            if (data.hasOwnProperty('initialQuery')) {
                obj['initialQuery'] = ApiClient.convertToType(data['initialQuery'], 'String');
            }
            if (data.hasOwnProperty('sanitizedQuery')) {
                obj['sanitizedQuery'] = ApiClient.convertToType(data['sanitizedQuery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SanitizedJqlQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SanitizedJqlQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `errors`
        if (data['errors']) { // data not null
          ErrorCollection.validateJSON(data['errors']);
        }
        // ensure the json data is a string
        if (data['initialQuery'] && !(typeof data['initialQuery'] === 'string' || data['initialQuery'] instanceof String)) {
            throw new Error("Expected the field `initialQuery` to be a primitive type in the JSON string but got " + data['initialQuery']);
        }
        // ensure the json data is a string
        if (data['sanitizedQuery'] && !(typeof data['sanitizedQuery'] === 'string' || data['sanitizedQuery'] instanceof String)) {
            throw new Error("Expected the field `sanitizedQuery` to be a primitive type in the JSON string but got " + data['sanitizedQuery']);
        }

        return true;
    }


}



/**
 * The account ID of the user for whom sanitization was performed.
 * @member {String} accountId
 */
SanitizedJqlQuery.prototype['accountId'] = undefined;

/**
 * The list of errors.
 * @member {module:model/ErrorCollection} errors
 */
SanitizedJqlQuery.prototype['errors'] = undefined;

/**
 * The initial query.
 * @member {String} initialQuery
 */
SanitizedJqlQuery.prototype['initialQuery'] = undefined;

/**
 * The sanitized query, if there were no errors.
 * @member {String} sanitizedQuery
 */
SanitizedJqlQuery.prototype['sanitizedQuery'] = undefined;






export default SanitizedJqlQuery;

