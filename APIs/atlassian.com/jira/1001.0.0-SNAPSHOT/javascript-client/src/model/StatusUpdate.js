/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StatusUpdate model module.
 * @module model/StatusUpdate
 * @version 1001.0.0-SNAPSHOT
 */
class StatusUpdate {
    /**
     * Constructs a new <code>StatusUpdate</code>.
     * Details of the status being updated.
     * @alias module:model/StatusUpdate
     * @extends Object
     * @param id {String} The ID of the status.
     * @param name {String} The name of the status.
     * @param statusCategory {module:model/StatusUpdate.StatusCategoryEnum} The category of the status.
     */
    constructor(id, name, statusCategory) { 
        
        StatusUpdate.initialize(this, id, name, statusCategory);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, statusCategory) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['statusCategory'] = statusCategory;
    }

    /**
     * Constructs a <code>StatusUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatusUpdate} obj Optional instance to populate.
     * @return {module:model/StatusUpdate} The populated <code>StatusUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatusUpdate();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('statusCategory')) {
                obj['statusCategory'] = ApiClient.convertToType(data['statusCategory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatusUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatusUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatusUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['statusCategory'] && !(typeof data['statusCategory'] === 'string' || data['statusCategory'] instanceof String)) {
            throw new Error("Expected the field `statusCategory` to be a primitive type in the JSON string but got " + data['statusCategory']);
        }

        return true;
    }


}

StatusUpdate.RequiredProperties = ["id", "name", "statusCategory"];

/**
 * The description of the status.
 * @member {String} description
 */
StatusUpdate.prototype['description'] = undefined;

/**
 * The ID of the status.
 * @member {String} id
 */
StatusUpdate.prototype['id'] = undefined;

/**
 * The name of the status.
 * @member {String} name
 */
StatusUpdate.prototype['name'] = undefined;

/**
 * The category of the status.
 * @member {module:model/StatusUpdate.StatusCategoryEnum} statusCategory
 */
StatusUpdate.prototype['statusCategory'] = undefined;





/**
 * Allowed values for the <code>statusCategory</code> property.
 * @enum {String}
 * @readonly
 */
StatusUpdate['StatusCategoryEnum'] = {

    /**
     * value: "TODO"
     * @const
     */
    "TODO": "TODO",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE"
};



export default StatusUpdate;

