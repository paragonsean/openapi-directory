/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransitionScreenDetails from './TransitionScreenDetails';
import WorkflowRules from './WorkflowRules';

/**
 * The Transition model module.
 * @module model/Transition
 * @version 1001.0.0-SNAPSHOT
 */
class Transition {
    /**
     * Constructs a new <code>Transition</code>.
     * Details of a workflow transition.
     * @alias module:model/Transition
     * @param description {String} The description of the transition.
     * @param from {Array.<String>} The statuses the transition can start from.
     * @param id {String} The ID of the transition.
     * @param name {String} The name of the transition.
     * @param to {String} The status the transition goes to.
     * @param type {module:model/Transition.TypeEnum} The type of the transition.
     */
    constructor(description, from, id, name, to, type) { 
        
        Transition.initialize(this, description, from, id, name, to, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, from, id, name, to, type) { 
        obj['description'] = description;
        obj['from'] = from;
        obj['id'] = id;
        obj['name'] = name;
        obj['to'] = to;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Transition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transition} obj Optional instance to populate.
     * @return {module:model/Transition} The populated <code>Transition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transition();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = WorkflowRules.constructFromObject(data['rules']);
            }
            if (data.hasOwnProperty('screen')) {
                obj['screen'] = TransitionScreenDetails.constructFromObject(data['screen']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['from'])) {
            throw new Error("Expected the field `from` to be an array in the JSON data but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `rules`
        if (data['rules']) { // data not null
          WorkflowRules.validateJSON(data['rules']);
        }
        // validate the optional field `screen`
        if (data['screen']) { // data not null
          TransitionScreenDetails.validateJSON(data['screen']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Transition.RequiredProperties = ["description", "from", "id", "name", "to", "type"];

/**
 * The description of the transition.
 * @member {String} description
 */
Transition.prototype['description'] = undefined;

/**
 * The statuses the transition can start from.
 * @member {Array.<String>} from
 */
Transition.prototype['from'] = undefined;

/**
 * The ID of the transition.
 * @member {String} id
 */
Transition.prototype['id'] = undefined;

/**
 * The name of the transition.
 * @member {String} name
 */
Transition.prototype['name'] = undefined;

/**
 * The properties of the transition.
 * @member {Object.<String, Object>} properties
 */
Transition.prototype['properties'] = undefined;

/**
 * @member {module:model/WorkflowRules} rules
 */
Transition.prototype['rules'] = undefined;

/**
 * @member {module:model/TransitionScreenDetails} screen
 */
Transition.prototype['screen'] = undefined;

/**
 * The status the transition goes to.
 * @member {String} to
 */
Transition.prototype['to'] = undefined;

/**
 * The type of the transition.
 * @member {module:model/Transition.TypeEnum} type
 */
Transition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Transition['TypeEnum'] = {

    /**
     * value: "global"
     * @const
     */
    "global": "global",

    /**
     * value: "initial"
     * @const
     */
    "initial": "initial",

    /**
     * value: "directed"
     * @const
     */
    "directed": "directed"
};



export default Transition;

