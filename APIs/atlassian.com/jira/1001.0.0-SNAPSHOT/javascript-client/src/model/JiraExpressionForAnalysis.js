/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JiraExpressionForAnalysis model module.
 * @module model/JiraExpressionForAnalysis
 * @version 1001.0.0-SNAPSHOT
 */
class JiraExpressionForAnalysis {
    /**
     * Constructs a new <code>JiraExpressionForAnalysis</code>.
     * Details of Jira expressions for analysis.
     * @alias module:model/JiraExpressionForAnalysis
     * @param expressions {Array.<String>} The list of Jira expressions to analyse.
     */
    constructor(expressions) { 
        
        JiraExpressionForAnalysis.initialize(this, expressions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expressions) { 
        obj['expressions'] = expressions;
    }

    /**
     * Constructs a <code>JiraExpressionForAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraExpressionForAnalysis} obj Optional instance to populate.
     * @return {module:model/JiraExpressionForAnalysis} The populated <code>JiraExpressionForAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraExpressionForAnalysis();

            if (data.hasOwnProperty('contextVariables')) {
                obj['contextVariables'] = ApiClient.convertToType(data['contextVariables'], {'String': 'String'});
            }
            if (data.hasOwnProperty('expressions')) {
                obj['expressions'] = ApiClient.convertToType(data['expressions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraExpressionForAnalysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraExpressionForAnalysis</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JiraExpressionForAnalysis.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expressions'])) {
            throw new Error("Expected the field `expressions` to be an array in the JSON data but got " + data['expressions']);
        }

        return true;
    }


}

JiraExpressionForAnalysis.RequiredProperties = ["expressions"];

/**
 * Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
 * @member {Object.<String, String>} contextVariables
 */
JiraExpressionForAnalysis.prototype['contextVariables'] = undefined;

/**
 * The list of Jira expressions to analyse.
 * @member {Array.<String>} expressions
 */
JiraExpressionForAnalysis.prototype['expressions'] = undefined;






export default JiraExpressionForAnalysis;

