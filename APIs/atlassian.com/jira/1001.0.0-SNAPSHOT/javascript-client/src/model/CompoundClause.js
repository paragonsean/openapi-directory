/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQueryClause from './JqlQueryClause';

/**
 * The CompoundClause model module.
 * @module model/CompoundClause
 * @version 1001.0.0-SNAPSHOT
 */
class CompoundClause {
    /**
     * Constructs a new <code>CompoundClause</code>.
     * A JQL query clause that consists of nested clauses. For example, &#x60;(labels in (urgent, blocker) OR lastCommentedBy &#x3D; currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, \&quot;A OR B AND C\&quot; is parsed as \&quot;(A OR B) AND C\&quot;. See Setting the precedence of operators for more information about precedence in JQL queries.&#x60;
     * @alias module:model/CompoundClause
     * @param clauses {Array.<module:model/JqlQueryClause>} The list of nested clauses.
     * @param operator {module:model/CompoundClause.OperatorEnum} The operator between the clauses.
     */
    constructor(clauses, operator) { 
        
        CompoundClause.initialize(this, clauses, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clauses, operator) { 
        obj['clauses'] = clauses;
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>CompoundClause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompoundClause} obj Optional instance to populate.
     * @return {module:model/CompoundClause} The populated <code>CompoundClause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompoundClause();

            if (data.hasOwnProperty('clauses')) {
                obj['clauses'] = ApiClient.convertToType(data['clauses'], [JqlQueryClause]);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompoundClause</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompoundClause</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CompoundClause.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['clauses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clauses'])) {
                throw new Error("Expected the field `clauses` to be an array in the JSON data but got " + data['clauses']);
            }
            // validate the optional field `clauses` (array)
            for (const item of data['clauses']) {
                JqlQueryClause.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}

CompoundClause.RequiredProperties = ["clauses", "operator"];

/**
 * The list of nested clauses.
 * @member {Array.<module:model/JqlQueryClause>} clauses
 */
CompoundClause.prototype['clauses'] = undefined;

/**
 * The operator between the clauses.
 * @member {module:model/CompoundClause.OperatorEnum} operator
 */
CompoundClause.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
CompoundClause['OperatorEnum'] = {

    /**
     * value: "and"
     * @const
     */
    "and": "and",

    /**
     * value: "or"
     * @const
     */
    "or": "or",

    /**
     * value: "not"
     * @const
     */
    "not": "not"
};



export default CompoundClause;

