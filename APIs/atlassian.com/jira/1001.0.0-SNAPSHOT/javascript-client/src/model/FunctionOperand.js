/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FunctionOperand model module.
 * @module model/FunctionOperand
 * @version 1001.0.0-SNAPSHOT
 */
class FunctionOperand {
    /**
     * Constructs a new <code>FunctionOperand</code>.
     * An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
     * @alias module:model/FunctionOperand
     * @param _arguments {Array.<String>} The list of function arguments.
     * @param _function {String} The name of the function.
     */
    constructor(_arguments, _function) { 
        
        FunctionOperand.initialize(this, _arguments, _function);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _arguments, _function) { 
        obj['arguments'] = _arguments;
        obj['function'] = _function;
    }

    /**
     * Constructs a <code>FunctionOperand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FunctionOperand} obj Optional instance to populate.
     * @return {module:model/FunctionOperand} The populated <code>FunctionOperand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FunctionOperand();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('encodedOperand')) {
                obj['encodedOperand'] = ApiClient.convertToType(data['encodedOperand'], 'String');
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FunctionOperand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FunctionOperand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FunctionOperand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // ensure the json data is a string
        if (data['encodedOperand'] && !(typeof data['encodedOperand'] === 'string' || data['encodedOperand'] instanceof String)) {
            throw new Error("Expected the field `encodedOperand` to be a primitive type in the JSON string but got " + data['encodedOperand']);
        }
        // ensure the json data is a string
        if (data['function'] && !(typeof data['function'] === 'string' || data['function'] instanceof String)) {
            throw new Error("Expected the field `function` to be a primitive type in the JSON string but got " + data['function']);
        }

        return true;
    }


}

FunctionOperand.RequiredProperties = ["arguments", "function"];

/**
 * The list of function arguments.
 * @member {Array.<String>} arguments
 */
FunctionOperand.prototype['arguments'] = undefined;

/**
 * Encoded operand, which can be used directly in a JQL query.
 * @member {String} encodedOperand
 */
FunctionOperand.prototype['encodedOperand'] = undefined;

/**
 * The name of the function.
 * @member {String} function
 */
FunctionOperand.prototype['function'] = undefined;






export default FunctionOperand;

