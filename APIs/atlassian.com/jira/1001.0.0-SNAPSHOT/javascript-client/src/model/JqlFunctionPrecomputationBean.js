/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JqlFunctionPrecomputationBean model module.
 * @module model/JqlFunctionPrecomputationBean
 * @version 1001.0.0-SNAPSHOT
 */
class JqlFunctionPrecomputationBean {
    /**
     * Constructs a new <code>JqlFunctionPrecomputationBean</code>.
     * Jql function precomputation.
     * @alias module:model/JqlFunctionPrecomputationBean
     */
    constructor() { 
        
        JqlFunctionPrecomputationBean.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JqlFunctionPrecomputationBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JqlFunctionPrecomputationBean} obj Optional instance to populate.
     * @return {module:model/JqlFunctionPrecomputationBean} The populated <code>JqlFunctionPrecomputationBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JqlFunctionPrecomputationBean();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('functionKey')) {
                obj['functionKey'] = ApiClient.convertToType(data['functionKey'], 'String');
            }
            if (data.hasOwnProperty('functionName')) {
                obj['functionName'] = ApiClient.convertToType(data['functionName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('used')) {
                obj['used'] = ApiClient.convertToType(data['used'], 'Date');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JqlFunctionPrecomputationBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JqlFunctionPrecomputationBean</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['functionKey'] && !(typeof data['functionKey'] === 'string' || data['functionKey'] instanceof String)) {
            throw new Error("Expected the field `functionKey` to be a primitive type in the JSON string but got " + data['functionKey']);
        }
        // ensure the json data is a string
        if (data['functionName'] && !(typeof data['functionName'] === 'string' || data['functionName'] instanceof String)) {
            throw new Error("Expected the field `functionName` to be a primitive type in the JSON string but got " + data['functionName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} arguments
 */
JqlFunctionPrecomputationBean.prototype['arguments'] = undefined;

/**
 * @member {Date} created
 */
JqlFunctionPrecomputationBean.prototype['created'] = undefined;

/**
 * @member {String} field
 */
JqlFunctionPrecomputationBean.prototype['field'] = undefined;

/**
 * @member {String} functionKey
 */
JqlFunctionPrecomputationBean.prototype['functionKey'] = undefined;

/**
 * @member {String} functionName
 */
JqlFunctionPrecomputationBean.prototype['functionName'] = undefined;

/**
 * @member {String} id
 */
JqlFunctionPrecomputationBean.prototype['id'] = undefined;

/**
 * @member {String} operator
 */
JqlFunctionPrecomputationBean.prototype['operator'] = undefined;

/**
 * @member {Date} updated
 */
JqlFunctionPrecomputationBean.prototype['updated'] = undefined;

/**
 * @member {Date} used
 */
JqlFunctionPrecomputationBean.prototype['used'] = undefined;

/**
 * @member {String} value
 */
JqlFunctionPrecomputationBean.prototype['value'] = undefined;






export default JqlFunctionPrecomputationBean;

