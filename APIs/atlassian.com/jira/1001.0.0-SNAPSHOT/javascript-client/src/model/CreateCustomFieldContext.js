/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateCustomFieldContext model module.
 * @module model/CreateCustomFieldContext
 * @version 1001.0.0-SNAPSHOT
 */
class CreateCustomFieldContext {
    /**
     * Constructs a new <code>CreateCustomFieldContext</code>.
     * The details of a created custom field context.
     * @alias module:model/CreateCustomFieldContext
     * @param name {String} The name of the context.
     */
    constructor(name) { 
        
        CreateCustomFieldContext.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateCustomFieldContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCustomFieldContext} obj Optional instance to populate.
     * @return {module:model/CreateCustomFieldContext} The populated <code>CreateCustomFieldContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCustomFieldContext();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issueTypeIds')) {
                obj['issueTypeIds'] = ApiClient.convertToType(data['issueTypeIds'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectIds')) {
                obj['projectIds'] = ApiClient.convertToType(data['projectIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCustomFieldContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCustomFieldContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCustomFieldContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueTypeIds'])) {
            throw new Error("Expected the field `issueTypeIds` to be an array in the JSON data but got " + data['issueTypeIds']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectIds'])) {
            throw new Error("Expected the field `projectIds` to be an array in the JSON data but got " + data['projectIds']);
        }

        return true;
    }


}

CreateCustomFieldContext.RequiredProperties = ["name"];

/**
 * The description of the context.
 * @member {String} description
 */
CreateCustomFieldContext.prototype['description'] = undefined;

/**
 * The ID of the context.
 * @member {String} id
 */
CreateCustomFieldContext.prototype['id'] = undefined;

/**
 * The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
 * @member {Array.<String>} issueTypeIds
 */
CreateCustomFieldContext.prototype['issueTypeIds'] = undefined;

/**
 * The name of the context.
 * @member {String} name
 */
CreateCustomFieldContext.prototype['name'] = undefined;

/**
 * The list of project IDs associated with the context. If the list is empty, the context is global.
 * @member {Array.<String>} projectIds
 */
CreateCustomFieldContext.prototype['projectIds'] = undefined;






export default CreateCustomFieldContext;

