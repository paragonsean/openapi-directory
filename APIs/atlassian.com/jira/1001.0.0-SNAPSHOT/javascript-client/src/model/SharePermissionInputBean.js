/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharePermissionInputBean model module.
 * @module model/SharePermissionInputBean
 * @version 1001.0.0-SNAPSHOT
 */
class SharePermissionInputBean {
    /**
     * Constructs a new <code>SharePermissionInputBean</code>.
     * @alias module:model/SharePermissionInputBean
     * @param type {module:model/SharePermissionInputBean.TypeEnum} The type of the share permission.Specify the type as follows:   *  `user` Share with a user.  *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
     */
    constructor(type) { 
        
        SharePermissionInputBean.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SharePermissionInputBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharePermissionInputBean} obj Optional instance to populate.
     * @return {module:model/SharePermissionInputBean} The populated <code>SharePermissionInputBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharePermissionInputBean();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
            if (data.hasOwnProperty('groupname')) {
                obj['groupname'] = ApiClient.convertToType(data['groupname'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('projectRoleId')) {
                obj['projectRoleId'] = ApiClient.convertToType(data['projectRoleId'], 'String');
            }
            if (data.hasOwnProperty('rights')) {
                obj['rights'] = ApiClient.convertToType(data['rights'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharePermissionInputBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharePermissionInputBean</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SharePermissionInputBean.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['groupId'] && !(typeof data['groupId'] === 'string' || data['groupId'] instanceof String)) {
            throw new Error("Expected the field `groupId` to be a primitive type in the JSON string but got " + data['groupId']);
        }
        // ensure the json data is a string
        if (data['groupname'] && !(typeof data['groupname'] === 'string' || data['groupname'] instanceof String)) {
            throw new Error("Expected the field `groupname` to be a primitive type in the JSON string but got " + data['groupname']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['projectRoleId'] && !(typeof data['projectRoleId'] === 'string' || data['projectRoleId'] instanceof String)) {
            throw new Error("Expected the field `projectRoleId` to be a primitive type in the JSON string but got " + data['projectRoleId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SharePermissionInputBean.RequiredProperties = ["type"];

/**
 * The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
 * @member {String} accountId
 */
SharePermissionInputBean.prototype['accountId'] = undefined;

/**
 * The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
 * @member {String} groupId
 */
SharePermissionInputBean.prototype['groupId'] = undefined;

/**
 * The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
 * @member {String} groupname
 */
SharePermissionInputBean.prototype['groupname'] = undefined;

/**
 * The ID of the project to share the filter with. Set `type` to `project`.
 * @member {String} projectId
 */
SharePermissionInputBean.prototype['projectId'] = undefined;

/**
 * The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
 * @member {String} projectRoleId
 */
SharePermissionInputBean.prototype['projectRoleId'] = undefined;

/**
 * The rights for the share permission.
 * @member {Number} rights
 */
SharePermissionInputBean.prototype['rights'] = undefined;

/**
 * The type of the share permission.Specify the type as follows:   *  `user` Share with a user.  *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
 * @member {module:model/SharePermissionInputBean.TypeEnum} type
 */
SharePermissionInputBean.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SharePermissionInputBean['TypeEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "project"
     * @const
     */
    "project": "project",

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "projectRole"
     * @const
     */
    "projectRole": "projectRole",

    /**
     * value: "global"
     * @const
     */
    "global": "global",

    /**
     * value: "authenticated"
     * @const
     */
    "authenticated": "authenticated"
};



export default SharePermissionInputBean;

