/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardGadgetPosition from './DashboardGadgetPosition';

/**
 * The DashboardGadget model module.
 * @module model/DashboardGadget
 * @version 1001.0.0-SNAPSHOT
 */
class DashboardGadget {
    /**
     * Constructs a new <code>DashboardGadget</code>.
     * Details of a gadget.
     * @alias module:model/DashboardGadget
     * @param color {module:model/DashboardGadget.ColorEnum} The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
     * @param id {Number} The ID of the gadget instance.
     * @param position {module:model/DashboardGadgetPosition} The position of the gadget.
     * @param title {String} The title of the gadget.
     */
    constructor(color, id, position, title) { 
        
        DashboardGadget.initialize(this, color, id, position, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color, id, position, title) { 
        obj['color'] = color;
        obj['id'] = id;
        obj['position'] = position;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>DashboardGadget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardGadget} obj Optional instance to populate.
     * @return {module:model/DashboardGadget} The populated <code>DashboardGadget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardGadget();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('moduleKey')) {
                obj['moduleKey'] = ApiClient.convertToType(data['moduleKey'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], DashboardGadgetPosition);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardGadget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardGadget</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DashboardGadget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['moduleKey'] && !(typeof data['moduleKey'] === 'string' || data['moduleKey'] instanceof String)) {
            throw new Error("Expected the field `moduleKey` to be a primitive type in the JSON string but got " + data['moduleKey']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          DashboardGadgetPosition.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

DashboardGadget.RequiredProperties = ["color", "id", "position", "title"];

/**
 * The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
 * @member {module:model/DashboardGadget.ColorEnum} color
 */
DashboardGadget.prototype['color'] = undefined;

/**
 * The ID of the gadget instance.
 * @member {Number} id
 */
DashboardGadget.prototype['id'] = undefined;

/**
 * The module key of the gadget type.
 * @member {String} moduleKey
 */
DashboardGadget.prototype['moduleKey'] = undefined;

/**
 * The position of the gadget.
 * @member {module:model/DashboardGadgetPosition} position
 */
DashboardGadget.prototype['position'] = undefined;

/**
 * The title of the gadget.
 * @member {String} title
 */
DashboardGadget.prototype['title'] = undefined;

/**
 * The URI of the gadget type.
 * @member {String} uri
 */
DashboardGadget.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
DashboardGadget['ColorEnum'] = {

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue",

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow",

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "cyan"
     * @const
     */
    "cyan": "cyan",

    /**
     * value: "purple"
     * @const
     */
    "purple": "purple",

    /**
     * value: "gray"
     * @const
     */
    "gray": "gray",

    /**
     * value: "white"
     * @const
     */
    "white": "white"
};



export default DashboardGadget;

