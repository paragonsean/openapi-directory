/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReorderIssuePriorities model module.
 * @module model/ReorderIssuePriorities
 * @version 1001.0.0-SNAPSHOT
 */
class ReorderIssuePriorities {
    /**
     * Constructs a new <code>ReorderIssuePriorities</code>.
     * Change the order of issue priorities.
     * @alias module:model/ReorderIssuePriorities
     * @param ids {Array.<String>} The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.
     */
    constructor(ids) { 
        
        ReorderIssuePriorities.initialize(this, ids);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ids) { 
        obj['ids'] = ids;
    }

    /**
     * Constructs a <code>ReorderIssuePriorities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReorderIssuePriorities} obj Optional instance to populate.
     * @return {module:model/ReorderIssuePriorities} The populated <code>ReorderIssuePriorities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReorderIssuePriorities();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'String');
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReorderIssuePriorities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReorderIssuePriorities</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReorderIssuePriorities.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['after'] && !(typeof data['after'] === 'string' || data['after'] instanceof String)) {
            throw new Error("Expected the field `after` to be a primitive type in the JSON string but got " + data['after']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }

        return true;
    }


}

ReorderIssuePriorities.RequiredProperties = ["ids"];

/**
 * The ID of the priority. Required if `position` isn't provided.
 * @member {String} after
 */
ReorderIssuePriorities.prototype['after'] = undefined;

/**
 * The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.
 * @member {Array.<String>} ids
 */
ReorderIssuePriorities.prototype['ids'] = undefined;

/**
 * The position for issue priorities to be moved to. Required if `after` isn't provided.
 * @member {String} position
 */
ReorderIssuePriorities.prototype['position'] = undefined;






export default ReorderIssuePriorities;

