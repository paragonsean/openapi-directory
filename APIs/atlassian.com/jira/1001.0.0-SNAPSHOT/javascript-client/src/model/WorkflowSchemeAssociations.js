/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowScheme from './WorkflowScheme';

/**
 * The WorkflowSchemeAssociations model module.
 * @module model/WorkflowSchemeAssociations
 * @version 1001.0.0-SNAPSHOT
 */
class WorkflowSchemeAssociations {
    /**
     * Constructs a new <code>WorkflowSchemeAssociations</code>.
     * A workflow scheme along with a list of projects that use it.
     * @alias module:model/WorkflowSchemeAssociations
     * @param projectIds {Array.<String>} The list of projects that use the workflow scheme.
     * @param workflowScheme {module:model/WorkflowScheme} The workflow scheme.
     */
    constructor(projectIds, workflowScheme) { 
        
        WorkflowSchemeAssociations.initialize(this, projectIds, workflowScheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, projectIds, workflowScheme) { 
        obj['projectIds'] = projectIds;
        obj['workflowScheme'] = workflowScheme;
    }

    /**
     * Constructs a <code>WorkflowSchemeAssociations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowSchemeAssociations} obj Optional instance to populate.
     * @return {module:model/WorkflowSchemeAssociations} The populated <code>WorkflowSchemeAssociations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowSchemeAssociations();

            if (data.hasOwnProperty('projectIds')) {
                obj['projectIds'] = ApiClient.convertToType(data['projectIds'], ['String']);
            }
            if (data.hasOwnProperty('workflowScheme')) {
                obj['workflowScheme'] = ApiClient.convertToType(data['workflowScheme'], WorkflowScheme);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowSchemeAssociations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowSchemeAssociations</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowSchemeAssociations.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectIds'])) {
            throw new Error("Expected the field `projectIds` to be an array in the JSON data but got " + data['projectIds']);
        }
        // validate the optional field `workflowScheme`
        if (data['workflowScheme']) { // data not null
          WorkflowScheme.validateJSON(data['workflowScheme']);
        }

        return true;
    }


}

WorkflowSchemeAssociations.RequiredProperties = ["projectIds", "workflowScheme"];

/**
 * The list of projects that use the workflow scheme.
 * @member {Array.<String>} projectIds
 */
WorkflowSchemeAssociations.prototype['projectIds'] = undefined;

/**
 * The workflow scheme.
 * @member {module:model/WorkflowScheme} workflowScheme
 */
WorkflowSchemeAssociations.prototype['workflowScheme'] = undefined;






export default WorkflowSchemeAssociations;

