/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectRoleGroup from './ProjectRoleGroup';
import ProjectRoleUser from './ProjectRoleUser';

/**
 * The RoleActor model module.
 * @module model/RoleActor
 * @version 1001.0.0-SNAPSHOT
 */
class RoleActor {
    /**
     * Constructs a new <code>RoleActor</code>.
     * Details about a user assigned to a project role.
     * @alias module:model/RoleActor
     */
    constructor() { 
        
        RoleActor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoleActor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleActor} obj Optional instance to populate.
     * @return {module:model/RoleActor} The populated <code>RoleActor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleActor();

            if (data.hasOwnProperty('actorGroup')) {
                obj['actorGroup'] = ApiClient.convertToType(data['actorGroup'], ProjectRoleGroup);
            }
            if (data.hasOwnProperty('actorUser')) {
                obj['actorUser'] = ApiClient.convertToType(data['actorUser'], ProjectRoleUser);
            }
            if (data.hasOwnProperty('avatarUrl')) {
                obj['avatarUrl'] = ApiClient.convertToType(data['avatarUrl'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleActor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleActor</code>.
     */
    static validateJSON(data) {
        // validate the optional field `actorGroup`
        if (data['actorGroup']) { // data not null
          ProjectRoleGroup.validateJSON(data['actorGroup']);
        }
        // validate the optional field `actorUser`
        if (data['actorUser']) { // data not null
          ProjectRoleUser.validateJSON(data['actorUser']);
        }
        // ensure the json data is a string
        if (data['avatarUrl'] && !(typeof data['avatarUrl'] === 'string' || data['avatarUrl'] instanceof String)) {
            throw new Error("Expected the field `avatarUrl` to be a primitive type in the JSON string but got " + data['avatarUrl']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/ProjectRoleGroup} actorGroup
 */
RoleActor.prototype['actorGroup'] = undefined;

/**
 * @member {module:model/ProjectRoleUser} actorUser
 */
RoleActor.prototype['actorUser'] = undefined;

/**
 * The avatar of the role actor.
 * @member {String} avatarUrl
 */
RoleActor.prototype['avatarUrl'] = undefined;

/**
 * The display name of the role actor. For users, depending on the userâ€™s privacy setting, this may return an alternative value for the user's name.
 * @member {String} displayName
 */
RoleActor.prototype['displayName'] = undefined;

/**
 * The ID of the role actor.
 * @member {Number} id
 */
RoleActor.prototype['id'] = undefined;

/**
 * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
 * @member {String} name
 */
RoleActor.prototype['name'] = undefined;

/**
 * The type of role actor.
 * @member {module:model/RoleActor.TypeEnum} type
 */
RoleActor.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RoleActor['TypeEnum'] = {

    /**
     * value: "atlassian-group-role-actor"
     * @const
     */
    "group-role-actor": "atlassian-group-role-actor",

    /**
     * value: "atlassian-user-role-actor"
     * @const
     */
    "user-role-actor": "atlassian-user-role-actor"
};



export default RoleActor;

