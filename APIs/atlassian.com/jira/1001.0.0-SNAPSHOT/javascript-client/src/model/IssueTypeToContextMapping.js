/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueTypeToContextMapping model module.
 * @module model/IssueTypeToContextMapping
 * @version 1001.0.0-SNAPSHOT
 */
class IssueTypeToContextMapping {
    /**
     * Constructs a new <code>IssueTypeToContextMapping</code>.
     * Mapping of an issue type to a context.
     * @alias module:model/IssueTypeToContextMapping
     * @param contextId {String} The ID of the context.
     */
    constructor(contextId) { 
        
        IssueTypeToContextMapping.initialize(this, contextId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contextId) { 
        obj['contextId'] = contextId;
    }

    /**
     * Constructs a <code>IssueTypeToContextMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueTypeToContextMapping} obj Optional instance to populate.
     * @return {module:model/IssueTypeToContextMapping} The populated <code>IssueTypeToContextMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueTypeToContextMapping();

            if (data.hasOwnProperty('contextId')) {
                obj['contextId'] = ApiClient.convertToType(data['contextId'], 'String');
            }
            if (data.hasOwnProperty('isAnyIssueType')) {
                obj['isAnyIssueType'] = ApiClient.convertToType(data['isAnyIssueType'], 'Boolean');
            }
            if (data.hasOwnProperty('issueTypeId')) {
                obj['issueTypeId'] = ApiClient.convertToType(data['issueTypeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueTypeToContextMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueTypeToContextMapping</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueTypeToContextMapping.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contextId'] && !(typeof data['contextId'] === 'string' || data['contextId'] instanceof String)) {
            throw new Error("Expected the field `contextId` to be a primitive type in the JSON string but got " + data['contextId']);
        }
        // ensure the json data is a string
        if (data['issueTypeId'] && !(typeof data['issueTypeId'] === 'string' || data['issueTypeId'] instanceof String)) {
            throw new Error("Expected the field `issueTypeId` to be a primitive type in the JSON string but got " + data['issueTypeId']);
        }

        return true;
    }


}

IssueTypeToContextMapping.RequiredProperties = ["contextId"];

/**
 * The ID of the context.
 * @member {String} contextId
 */
IssueTypeToContextMapping.prototype['contextId'] = undefined;

/**
 * Whether the context is mapped to any issue type.
 * @member {Boolean} isAnyIssueType
 */
IssueTypeToContextMapping.prototype['isAnyIssueType'] = undefined;

/**
 * The ID of the issue type.
 * @member {String} issueTypeId
 */
IssueTypeToContextMapping.prototype['issueTypeId'] = undefined;






export default IssueTypeToContextMapping;

