/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQuery from './JqlQuery';

/**
 * The ParsedJqlQuery model module.
 * @module model/ParsedJqlQuery
 * @version 1001.0.0-SNAPSHOT
 */
class ParsedJqlQuery {
    /**
     * Constructs a new <code>ParsedJqlQuery</code>.
     * Details of a parsed JQL query.
     * @alias module:model/ParsedJqlQuery
     * @param query {String} The JQL query that was parsed and validated.
     */
    constructor(query) { 
        
        ParsedJqlQuery.initialize(this, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query) { 
        obj['query'] = query;
    }

    /**
     * Constructs a <code>ParsedJqlQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParsedJqlQuery} obj Optional instance to populate.
     * @return {module:model/ParsedJqlQuery} The populated <code>ParsedJqlQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParsedJqlQuery();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('structure')) {
                obj['structure'] = ApiClient.convertToType(data['structure'], JqlQuery);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParsedJqlQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParsedJqlQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParsedJqlQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // validate the optional field `structure`
        if (data['structure']) { // data not null
          JqlQuery.validateJSON(data['structure']);
        }

        return true;
    }


}

ParsedJqlQuery.RequiredProperties = ["query"];

/**
 * The list of syntax or validation errors.
 * @member {Array.<String>} errors
 */
ParsedJqlQuery.prototype['errors'] = undefined;

/**
 * The JQL query that was parsed and validated.
 * @member {String} query
 */
ParsedJqlQuery.prototype['query'] = undefined;

/**
 * The syntax tree of the query. Empty if the query was invalid.
 * @member {module:model/JqlQuery} structure
 */
ParsedJqlQuery.prototype['structure'] = undefined;






export default ParsedJqlQuery;

