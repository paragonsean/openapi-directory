/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HistoryMetadataParticipant model module.
 * @module model/HistoryMetadataParticipant
 * @version 1001.0.0-SNAPSHOT
 */
class HistoryMetadataParticipant {
    /**
     * Constructs a new <code>HistoryMetadataParticipant</code>.
     * Details of user or system associated with a issue history metadata item.
     * @alias module:model/HistoryMetadataParticipant
     * @extends Object
     */
    constructor() { 
        
        HistoryMetadataParticipant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoryMetadataParticipant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoryMetadataParticipant} obj Optional instance to populate.
     * @return {module:model/HistoryMetadataParticipant} The populated <code>HistoryMetadataParticipant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoryMetadataParticipant();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('avatarUrl')) {
                obj['avatarUrl'] = ApiClient.convertToType(data['avatarUrl'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayNameKey')) {
                obj['displayNameKey'] = ApiClient.convertToType(data['displayNameKey'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoryMetadataParticipant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoryMetadataParticipant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatarUrl'] && !(typeof data['avatarUrl'] === 'string' || data['avatarUrl'] instanceof String)) {
            throw new Error("Expected the field `avatarUrl` to be a primitive type in the JSON string but got " + data['avatarUrl']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['displayNameKey'] && !(typeof data['displayNameKey'] === 'string' || data['displayNameKey'] instanceof String)) {
            throw new Error("Expected the field `displayNameKey` to be a primitive type in the JSON string but got " + data['displayNameKey']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The URL to an avatar for the user or system associated with a history record.
 * @member {String} avatarUrl
 */
HistoryMetadataParticipant.prototype['avatarUrl'] = undefined;

/**
 * The display name of the user or system associated with a history record.
 * @member {String} displayName
 */
HistoryMetadataParticipant.prototype['displayName'] = undefined;

/**
 * The key of the display name of the user or system associated with a history record.
 * @member {String} displayNameKey
 */
HistoryMetadataParticipant.prototype['displayNameKey'] = undefined;

/**
 * The ID of the user or system associated with a history record.
 * @member {String} id
 */
HistoryMetadataParticipant.prototype['id'] = undefined;

/**
 * The type of the user or system associated with a history record.
 * @member {String} type
 */
HistoryMetadataParticipant.prototype['type'] = undefined;

/**
 * The URL of the user or system associated with a history record.
 * @member {String} url
 */
HistoryMetadataParticipant.prototype['url'] = undefined;






export default HistoryMetadataParticipant;

