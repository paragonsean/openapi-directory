/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowCondition from './WorkflowCondition';

/**
 * The WorkflowCompoundCondition model module.
 * @module model/WorkflowCompoundCondition
 * @version 1001.0.0-SNAPSHOT
 */
class WorkflowCompoundCondition {
    /**
     * Constructs a new <code>WorkflowCompoundCondition</code>.
     * A compound workflow transition rule condition. This object returns &#x60;nodeType&#x60; as &#x60;compound&#x60;.
     * @alias module:model/WorkflowCompoundCondition
     * @param conditions {Array.<module:model/WorkflowCondition>} The list of workflow conditions.
     * @param nodeType {String} 
     * @param operator {module:model/WorkflowCompoundCondition.OperatorEnum} The compound condition operator.
     */
    constructor(conditions, nodeType, operator) { 
        
        WorkflowCompoundCondition.initialize(this, conditions, nodeType, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conditions, nodeType, operator) { 
        obj['conditions'] = conditions;
        obj['nodeType'] = nodeType;
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>WorkflowCompoundCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowCompoundCondition} obj Optional instance to populate.
     * @return {module:model/WorkflowCompoundCondition} The populated <code>WorkflowCompoundCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowCompoundCondition();

            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [WorkflowCondition]);
            }
            if (data.hasOwnProperty('nodeType')) {
                obj['nodeType'] = ApiClient.convertToType(data['nodeType'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowCompoundCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowCompoundCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowCompoundCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                WorkflowCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nodeType'] && !(typeof data['nodeType'] === 'string' || data['nodeType'] instanceof String)) {
            throw new Error("Expected the field `nodeType` to be a primitive type in the JSON string but got " + data['nodeType']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}

WorkflowCompoundCondition.RequiredProperties = ["conditions", "nodeType", "operator"];

/**
 * The list of workflow conditions.
 * @member {Array.<module:model/WorkflowCondition>} conditions
 */
WorkflowCompoundCondition.prototype['conditions'] = undefined;

/**
 * @member {String} nodeType
 */
WorkflowCompoundCondition.prototype['nodeType'] = undefined;

/**
 * The compound condition operator.
 * @member {module:model/WorkflowCompoundCondition.OperatorEnum} operator
 */
WorkflowCompoundCondition.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowCompoundCondition['OperatorEnum'] = {

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR"
};



export default WorkflowCompoundCondition;

