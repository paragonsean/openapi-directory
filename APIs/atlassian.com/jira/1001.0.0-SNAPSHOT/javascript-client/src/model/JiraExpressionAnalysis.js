/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JiraExpressionComplexity from './JiraExpressionComplexity';
import JiraExpressionValidationError from './JiraExpressionValidationError';

/**
 * The JiraExpressionAnalysis model module.
 * @module model/JiraExpressionAnalysis
 * @version 1001.0.0-SNAPSHOT
 */
class JiraExpressionAnalysis {
    /**
     * Constructs a new <code>JiraExpressionAnalysis</code>.
     * Details about the analysed Jira expression.
     * @alias module:model/JiraExpressionAnalysis
     * @param expression {String} The analysed expression.
     * @param valid {Boolean} Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
     */
    constructor(expression, valid) { 
        
        JiraExpressionAnalysis.initialize(this, expression, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression, valid) { 
        obj['expression'] = expression;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>JiraExpressionAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraExpressionAnalysis} obj Optional instance to populate.
     * @return {module:model/JiraExpressionAnalysis} The populated <code>JiraExpressionAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraExpressionAnalysis();

            if (data.hasOwnProperty('complexity')) {
                obj['complexity'] = JiraExpressionComplexity.constructFromObject(data['complexity']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [JiraExpressionValidationError]);
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraExpressionAnalysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraExpressionAnalysis</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JiraExpressionAnalysis.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `complexity`
        if (data['complexity']) { // data not null
          JiraExpressionComplexity.validateJSON(data['complexity']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                JiraExpressionValidationError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

JiraExpressionAnalysis.RequiredProperties = ["expression", "valid"];

/**
 * @member {module:model/JiraExpressionComplexity} complexity
 */
JiraExpressionAnalysis.prototype['complexity'] = undefined;

/**
 * A list of validation errors. Not included if the expression is valid.
 * @member {Array.<module:model/JiraExpressionValidationError>} errors
 */
JiraExpressionAnalysis.prototype['errors'] = undefined;

/**
 * The analysed expression.
 * @member {String} expression
 */
JiraExpressionAnalysis.prototype['expression'] = undefined;

/**
 * EXPERIMENTAL. The inferred type of the expression.
 * @member {String} type
 */
JiraExpressionAnalysis.prototype['type'] = undefined;

/**
 * Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
 * @member {Boolean} valid
 */
JiraExpressionAnalysis.prototype['valid'] = undefined;






export default JiraExpressionAnalysis;

