/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JiraExpressionsComplexityValueBean from './JiraExpressionsComplexityValueBean';

/**
 * The JiraExpressionsComplexityBean model module.
 * @module model/JiraExpressionsComplexityBean
 * @version 1001.0.0-SNAPSHOT
 */
class JiraExpressionsComplexityBean {
    /**
     * Constructs a new <code>JiraExpressionsComplexityBean</code>.
     * @alias module:model/JiraExpressionsComplexityBean
     * @param beans {module:model/JiraExpressionsComplexityValueBean} The number of Jira REST API beans returned in the response.
     * @param expensiveOperations {module:model/JiraExpressionsComplexityValueBean} The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
     * @param primitiveValues {module:model/JiraExpressionsComplexityValueBean} The number of primitive values returned in the response.
     * @param steps {module:model/JiraExpressionsComplexityValueBean} The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
     */
    constructor(beans, expensiveOperations, primitiveValues, steps) { 
        
        JiraExpressionsComplexityBean.initialize(this, beans, expensiveOperations, primitiveValues, steps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, beans, expensiveOperations, primitiveValues, steps) { 
        obj['beans'] = beans;
        obj['expensiveOperations'] = expensiveOperations;
        obj['primitiveValues'] = primitiveValues;
        obj['steps'] = steps;
    }

    /**
     * Constructs a <code>JiraExpressionsComplexityBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraExpressionsComplexityBean} obj Optional instance to populate.
     * @return {module:model/JiraExpressionsComplexityBean} The populated <code>JiraExpressionsComplexityBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraExpressionsComplexityBean();

            if (data.hasOwnProperty('beans')) {
                obj['beans'] = ApiClient.convertToType(data['beans'], JiraExpressionsComplexityValueBean);
            }
            if (data.hasOwnProperty('expensiveOperations')) {
                obj['expensiveOperations'] = ApiClient.convertToType(data['expensiveOperations'], JiraExpressionsComplexityValueBean);
            }
            if (data.hasOwnProperty('primitiveValues')) {
                obj['primitiveValues'] = ApiClient.convertToType(data['primitiveValues'], JiraExpressionsComplexityValueBean);
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], JiraExpressionsComplexityValueBean);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraExpressionsComplexityBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraExpressionsComplexityBean</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JiraExpressionsComplexityBean.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `beans`
        if (data['beans']) { // data not null
          JiraExpressionsComplexityValueBean.validateJSON(data['beans']);
        }
        // validate the optional field `expensiveOperations`
        if (data['expensiveOperations']) { // data not null
          JiraExpressionsComplexityValueBean.validateJSON(data['expensiveOperations']);
        }
        // validate the optional field `primitiveValues`
        if (data['primitiveValues']) { // data not null
          JiraExpressionsComplexityValueBean.validateJSON(data['primitiveValues']);
        }
        // validate the optional field `steps`
        if (data['steps']) { // data not null
          JiraExpressionsComplexityValueBean.validateJSON(data['steps']);
        }

        return true;
    }


}

JiraExpressionsComplexityBean.RequiredProperties = ["beans", "expensiveOperations", "primitiveValues", "steps"];

/**
 * The number of Jira REST API beans returned in the response.
 * @member {module:model/JiraExpressionsComplexityValueBean} beans
 */
JiraExpressionsComplexityBean.prototype['beans'] = undefined;

/**
 * The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
 * @member {module:model/JiraExpressionsComplexityValueBean} expensiveOperations
 */
JiraExpressionsComplexityBean.prototype['expensiveOperations'] = undefined;

/**
 * The number of primitive values returned in the response.
 * @member {module:model/JiraExpressionsComplexityValueBean} primitiveValues
 */
JiraExpressionsComplexityBean.prototype['primitiveValues'] = undefined;

/**
 * The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
 * @member {module:model/JiraExpressionsComplexityValueBean} steps
 */
JiraExpressionsComplexityBean.prototype['steps'] = undefined;






export default JiraExpressionsComplexityBean;

