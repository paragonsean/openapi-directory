/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChangeDetails model module.
 * @module model/ChangeDetails
 * @version 1001.0.0-SNAPSHOT
 */
class ChangeDetails {
    /**
     * Constructs a new <code>ChangeDetails</code>.
     * A change item.
     * @alias module:model/ChangeDetails
     */
    constructor() { 
        
        ChangeDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangeDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeDetails} obj Optional instance to populate.
     * @return {module:model/ChangeDetails} The populated <code>ChangeDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeDetails();

            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('fieldId')) {
                obj['fieldId'] = ApiClient.convertToType(data['fieldId'], 'String');
            }
            if (data.hasOwnProperty('fieldtype')) {
                obj['fieldtype'] = ApiClient.convertToType(data['fieldtype'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('fromString')) {
                obj['fromString'] = ApiClient.convertToType(data['fromString'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['fieldId'] && !(typeof data['fieldId'] === 'string' || data['fieldId'] instanceof String)) {
            throw new Error("Expected the field `fieldId` to be a primitive type in the JSON string but got " + data['fieldId']);
        }
        // ensure the json data is a string
        if (data['fieldtype'] && !(typeof data['fieldtype'] === 'string' || data['fieldtype'] instanceof String)) {
            throw new Error("Expected the field `fieldtype` to be a primitive type in the JSON string but got " + data['fieldtype']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['fromString'] && !(typeof data['fromString'] === 'string' || data['fromString'] instanceof String)) {
            throw new Error("Expected the field `fromString` to be a primitive type in the JSON string but got " + data['fromString']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * The name of the field changed.
 * @member {String} field
 */
ChangeDetails.prototype['field'] = undefined;

/**
 * The ID of the field changed.
 * @member {String} fieldId
 */
ChangeDetails.prototype['fieldId'] = undefined;

/**
 * The type of the field changed.
 * @member {String} fieldtype
 */
ChangeDetails.prototype['fieldtype'] = undefined;

/**
 * The details of the original value.
 * @member {String} from
 */
ChangeDetails.prototype['from'] = undefined;

/**
 * The details of the original value as a string.
 * @member {String} fromString
 */
ChangeDetails.prototype['fromString'] = undefined;

/**
 * The details of the new value.
 * @member {String} to
 */
ChangeDetails.prototype['to'] = undefined;






export default ChangeDetails;

