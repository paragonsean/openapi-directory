/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JiraExpressionValidationError model module.
 * @module model/JiraExpressionValidationError
 * @version 1001.0.0-SNAPSHOT
 */
class JiraExpressionValidationError {
    /**
     * Constructs a new <code>JiraExpressionValidationError</code>.
     * Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:   *  &#x60;line&#x60; and &#x60;column&#x60;  *  &#x60;expression&#x60;
     * @alias module:model/JiraExpressionValidationError
     * @param message {String} Details about the error.
     * @param type {module:model/JiraExpressionValidationError.TypeEnum} The error type.
     */
    constructor(message, type) { 
        
        JiraExpressionValidationError.initialize(this, message, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, type) { 
        obj['message'] = message;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>JiraExpressionValidationError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraExpressionValidationError} obj Optional instance to populate.
     * @return {module:model/JiraExpressionValidationError} The populated <code>JiraExpressionValidationError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraExpressionValidationError();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'Number');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraExpressionValidationError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraExpressionValidationError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JiraExpressionValidationError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

JiraExpressionValidationError.RequiredProperties = ["message", "type"];

/**
 * The text column in which the error occurred.
 * @member {Number} column
 */
JiraExpressionValidationError.prototype['column'] = undefined;

/**
 * The part of the expression in which the error occurred.
 * @member {String} expression
 */
JiraExpressionValidationError.prototype['expression'] = undefined;

/**
 * The text line in which the error occurred.
 * @member {Number} line
 */
JiraExpressionValidationError.prototype['line'] = undefined;

/**
 * Details about the error.
 * @member {String} message
 */
JiraExpressionValidationError.prototype['message'] = undefined;

/**
 * The error type.
 * @member {module:model/JiraExpressionValidationError.TypeEnum} type
 */
JiraExpressionValidationError.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
JiraExpressionValidationError['TypeEnum'] = {

    /**
     * value: "syntax"
     * @const
     */
    "syntax": "syntax",

    /**
     * value: "type"
     * @const
     */
    "type": "type",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default JiraExpressionValidationError;

