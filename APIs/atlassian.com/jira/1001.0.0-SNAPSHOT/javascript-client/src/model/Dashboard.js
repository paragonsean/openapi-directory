/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharePermission from './SharePermission';
import UserBean from './UserBean';

/**
 * The Dashboard model module.
 * @module model/Dashboard
 * @version 1001.0.0-SNAPSHOT
 */
class Dashboard {
    /**
     * Constructs a new <code>Dashboard</code>.
     * Details of a dashboard.
     * @alias module:model/Dashboard
     */
    constructor() { 
        
        Dashboard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dashboard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dashboard} obj Optional instance to populate.
     * @return {module:model/Dashboard} The populated <code>Dashboard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dashboard();

            if (data.hasOwnProperty('automaticRefreshMs')) {
                obj['automaticRefreshMs'] = ApiClient.convertToType(data['automaticRefreshMs'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('editPermissions')) {
                obj['editPermissions'] = ApiClient.convertToType(data['editPermissions'], [SharePermission]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isFavourite')) {
                obj['isFavourite'] = ApiClient.convertToType(data['isFavourite'], 'Boolean');
            }
            if (data.hasOwnProperty('isWritable')) {
                obj['isWritable'] = ApiClient.convertToType(data['isWritable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], UserBean);
            }
            if (data.hasOwnProperty('popularity')) {
                obj['popularity'] = ApiClient.convertToType(data['popularity'], 'Number');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('sharePermissions')) {
                obj['sharePermissions'] = ApiClient.convertToType(data['sharePermissions'], [SharePermission]);
            }
            if (data.hasOwnProperty('systemDashboard')) {
                obj['systemDashboard'] = ApiClient.convertToType(data['systemDashboard'], 'Boolean');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dashboard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dashboard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['editPermissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['editPermissions'])) {
                throw new Error("Expected the field `editPermissions` to be an array in the JSON data but got " + data['editPermissions']);
            }
            // validate the optional field `editPermissions` (array)
            for (const item of data['editPermissions']) {
                SharePermission.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          UserBean.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        if (data['sharePermissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sharePermissions'])) {
                throw new Error("Expected the field `sharePermissions` to be an array in the JSON data but got " + data['sharePermissions']);
            }
            // validate the optional field `sharePermissions` (array)
            for (const item of data['sharePermissions']) {
                SharePermission.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}



/**
 * The automatic refresh interval for the dashboard in milliseconds.
 * @member {Number} automaticRefreshMs
 */
Dashboard.prototype['automaticRefreshMs'] = undefined;

/**
 * @member {String} description
 */
Dashboard.prototype['description'] = undefined;

/**
 * The details of any edit share permissions for the dashboard.
 * @member {Array.<module:model/SharePermission>} editPermissions
 */
Dashboard.prototype['editPermissions'] = undefined;

/**
 * The ID of the dashboard.
 * @member {String} id
 */
Dashboard.prototype['id'] = undefined;

/**
 * Whether the dashboard is selected as a favorite by the user.
 * @member {Boolean} isFavourite
 */
Dashboard.prototype['isFavourite'] = undefined;

/**
 * Whether the current user has permission to edit the dashboard.
 * @member {Boolean} isWritable
 */
Dashboard.prototype['isWritable'] = undefined;

/**
 * The name of the dashboard.
 * @member {String} name
 */
Dashboard.prototype['name'] = undefined;

/**
 * The owner of the dashboard.
 * @member {module:model/UserBean} owner
 */
Dashboard.prototype['owner'] = undefined;

/**
 * The number of users who have this dashboard as a favorite.
 * @member {Number} popularity
 */
Dashboard.prototype['popularity'] = undefined;

/**
 * The rank of this dashboard.
 * @member {Number} rank
 */
Dashboard.prototype['rank'] = undefined;

/**
 * The URL of these dashboard details.
 * @member {String} self
 */
Dashboard.prototype['self'] = undefined;

/**
 * The details of any view share permissions for the dashboard.
 * @member {Array.<module:model/SharePermission>} sharePermissions
 */
Dashboard.prototype['sharePermissions'] = undefined;

/**
 * Whether the current dashboard is system dashboard.
 * @member {Boolean} systemDashboard
 */
Dashboard.prototype['systemDashboard'] = undefined;

/**
 * The URL of the dashboard.
 * @member {String} view
 */
Dashboard.prototype['view'] = undefined;






export default Dashboard;

