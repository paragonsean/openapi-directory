/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonTypeBean from './JsonTypeBean';
import Scope from './Scope';

/**
 * The FieldDetails model module.
 * @module model/FieldDetails
 * @version 1001.0.0-SNAPSHOT
 */
class FieldDetails {
    /**
     * Constructs a new <code>FieldDetails</code>.
     * Details about a field.
     * @alias module:model/FieldDetails
     */
    constructor() { 
        
        FieldDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldDetails} obj Optional instance to populate.
     * @return {module:model/FieldDetails} The populated <code>FieldDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldDetails();

            if (data.hasOwnProperty('clauseNames')) {
                obj['clauseNames'] = ApiClient.convertToType(data['clauseNames'], ['String']);
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('navigable')) {
                obj['navigable'] = ApiClient.convertToType(data['navigable'], 'Boolean');
            }
            if (data.hasOwnProperty('orderable')) {
                obj['orderable'] = ApiClient.convertToType(data['orderable'], 'Boolean');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], JsonTypeBean);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], Scope);
            }
            if (data.hasOwnProperty('searchable')) {
                obj['searchable'] = ApiClient.convertToType(data['searchable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['clauseNames'])) {
            throw new Error("Expected the field `clauseNames` to be an array in the JSON data but got " + data['clauseNames']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          JsonTypeBean.validateJSON(data['schema']);
        }

        return true;
    }


}



/**
 * The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
 * @member {Array.<String>} clauseNames
 */
FieldDetails.prototype['clauseNames'] = undefined;

/**
 * Whether the field is a custom field.
 * @member {Boolean} custom
 */
FieldDetails.prototype['custom'] = undefined;

/**
 * The ID of the field.
 * @member {String} id
 */
FieldDetails.prototype['id'] = undefined;

/**
 * The key of the field.
 * @member {String} key
 */
FieldDetails.prototype['key'] = undefined;

/**
 * The name of the field.
 * @member {String} name
 */
FieldDetails.prototype['name'] = undefined;

/**
 * Whether the field can be used as a column on the issue navigator.
 * @member {Boolean} navigable
 */
FieldDetails.prototype['navigable'] = undefined;

/**
 * Whether the content of the field can be used to order lists.
 * @member {Boolean} orderable
 */
FieldDetails.prototype['orderable'] = undefined;

/**
 * The data schema for the field.
 * @member {module:model/JsonTypeBean} schema
 */
FieldDetails.prototype['schema'] = undefined;

/**
 * The scope of the field.
 * @member {module:model/Scope} scope
 */
FieldDetails.prototype['scope'] = undefined;

/**
 * Whether the content of the field can be searched.
 * @member {Boolean} searchable
 */
FieldDetails.prototype['searchable'] = undefined;






export default FieldDetails;

