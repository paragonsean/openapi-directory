/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Webhook model module.
 * @module model/Webhook
 * @version 1001.0.0-SNAPSHOT
 */
class Webhook {
    /**
     * Constructs a new <code>Webhook</code>.
     * A webhook.
     * @alias module:model/Webhook
     * @param events {Array.<module:model/Webhook.EventsEnum>} The Jira events that trigger the webhook.
     * @param id {Number} The ID of the webhook.
     * @param jqlFilter {String} The JQL filter that specifies which issues the webhook is sent for.
     */
    constructor(events, id, jqlFilter) { 
        
        Webhook.initialize(this, events, id, jqlFilter);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, events, id, jqlFilter) { 
        obj['events'] = events;
        obj['id'] = id;
        obj['jqlFilter'] = jqlFilter;
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webhook} obj Optional instance to populate.
     * @return {module:model/Webhook} The populated <code>Webhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webhook();

            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Number');
            }
            if (data.hasOwnProperty('fieldIdsFilter')) {
                obj['fieldIdsFilter'] = ApiClient.convertToType(data['fieldIdsFilter'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issuePropertyKeysFilter')) {
                obj['issuePropertyKeysFilter'] = ApiClient.convertToType(data['issuePropertyKeysFilter'], ['String']);
            }
            if (data.hasOwnProperty('jqlFilter')) {
                obj['jqlFilter'] = ApiClient.convertToType(data['jqlFilter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Webhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fieldIdsFilter'])) {
            throw new Error("Expected the field `fieldIdsFilter` to be an array in the JSON data but got " + data['fieldIdsFilter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issuePropertyKeysFilter'])) {
            throw new Error("Expected the field `issuePropertyKeysFilter` to be an array in the JSON data but got " + data['issuePropertyKeysFilter']);
        }
        // ensure the json data is a string
        if (data['jqlFilter'] && !(typeof data['jqlFilter'] === 'string' || data['jqlFilter'] instanceof String)) {
            throw new Error("Expected the field `jqlFilter` to be a primitive type in the JSON string but got " + data['jqlFilter']);
        }

        return true;
    }


}

Webhook.RequiredProperties = ["events", "id", "jqlFilter"];

/**
 * The Jira events that trigger the webhook.
 * @member {Array.<module:model/Webhook.EventsEnum>} events
 */
Webhook.prototype['events'] = undefined;

/**
 * The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
 * @member {Number} expirationDate
 */
Webhook.prototype['expirationDate'] = undefined;

/**
 * A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
 * @member {Array.<String>} fieldIdsFilter
 */
Webhook.prototype['fieldIdsFilter'] = undefined;

/**
 * The ID of the webhook.
 * @member {Number} id
 */
Webhook.prototype['id'] = undefined;

/**
 * A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
 * @member {Array.<String>} issuePropertyKeysFilter
 */
Webhook.prototype['issuePropertyKeysFilter'] = undefined;

/**
 * The JQL filter that specifies which issues the webhook is sent for.
 * @member {String} jqlFilter
 */
Webhook.prototype['jqlFilter'] = undefined;





/**
 * Allowed values for the <code>events</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['EventsEnum'] = {

    /**
     * value: "jira:issue_created"
     * @const
     */
    "jira:issue_created": "jira:issue_created",

    /**
     * value: "jira:issue_updated"
     * @const
     */
    "jira:issue_updated": "jira:issue_updated",

    /**
     * value: "jira:issue_deleted"
     * @const
     */
    "jira:issue_deleted": "jira:issue_deleted",

    /**
     * value: "comment_created"
     * @const
     */
    "comment_created": "comment_created",

    /**
     * value: "comment_updated"
     * @const
     */
    "comment_updated": "comment_updated",

    /**
     * value: "comment_deleted"
     * @const
     */
    "comment_deleted": "comment_deleted",

    /**
     * value: "issue_property_set"
     * @const
     */
    "issue_property_set": "issue_property_set",

    /**
     * value: "issue_property_deleted"
     * @const
     */
    "issue_property_deleted": "issue_property_deleted"
};



export default Webhook;

