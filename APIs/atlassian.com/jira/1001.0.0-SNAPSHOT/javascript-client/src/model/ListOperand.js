/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQueryUnitaryOperand from './JqlQueryUnitaryOperand';

/**
 * The ListOperand model module.
 * @module model/ListOperand
 * @version 1001.0.0-SNAPSHOT
 */
class ListOperand {
    /**
     * Constructs a new <code>ListOperand</code>.
     * An operand that is a list of values.
     * @alias module:model/ListOperand
     * @param values {Array.<module:model/JqlQueryUnitaryOperand>} The list of operand values.
     */
    constructor(values) { 
        
        ListOperand.initialize(this, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, values) { 
        obj['values'] = values;
    }

    /**
     * Constructs a <code>ListOperand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListOperand} obj Optional instance to populate.
     * @return {module:model/ListOperand} The populated <code>ListOperand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListOperand();

            if (data.hasOwnProperty('encodedOperand')) {
                obj['encodedOperand'] = ApiClient.convertToType(data['encodedOperand'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [JqlQueryUnitaryOperand]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListOperand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListOperand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListOperand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['encodedOperand'] && !(typeof data['encodedOperand'] === 'string' || data['encodedOperand'] instanceof String)) {
            throw new Error("Expected the field `encodedOperand` to be a primitive type in the JSON string but got " + data['encodedOperand']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                JqlQueryUnitaryOperand.validateJSON(item);
            };
        }

        return true;
    }


}

ListOperand.RequiredProperties = ["values"];

/**
 * Encoded operand, which can be used directly in a JQL query.
 * @member {String} encodedOperand
 */
ListOperand.prototype['encodedOperand'] = undefined;

/**
 * The list of operand values.
 * @member {Array.<module:model/JqlQueryUnitaryOperand>} values
 */
ListOperand.prototype['values'] = undefined;






export default ListOperand;

