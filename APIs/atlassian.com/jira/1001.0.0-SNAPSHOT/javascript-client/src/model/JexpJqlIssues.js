/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JexpJqlIssues model module.
 * @module model/JexpJqlIssues
 * @version 1001.0.0-SNAPSHOT
 */
class JexpJqlIssues {
    /**
     * Constructs a new <code>JexpJqlIssues</code>.
     * The JQL specifying the issues available in the evaluated Jira expression under the &#x60;issues&#x60; context variable. Not all issues returned by the JQL query are loaded, only those described by the &#x60;startAt&#x60; and &#x60;maxResults&#x60; properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect &#x60;meta.issues.jql.count&#x60; in the response.
     * @alias module:model/JexpJqlIssues
     */
    constructor() { 
        
        JexpJqlIssues.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['validation'] = 'strict';
    }

    /**
     * Constructs a <code>JexpJqlIssues</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JexpJqlIssues} obj Optional instance to populate.
     * @return {module:model/JexpJqlIssues} The populated <code>JexpJqlIssues</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JexpJqlIssues();

            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('startAt')) {
                obj['startAt'] = ApiClient.convertToType(data['startAt'], 'Number');
            }
            if (data.hasOwnProperty('validation')) {
                obj['validation'] = ApiClient.convertToType(data['validation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JexpJqlIssues</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JexpJqlIssues</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['validation'] && !(typeof data['validation'] === 'string' || data['validation'] instanceof String)) {
            throw new Error("Expected the field `validation` to be a primitive type in the JSON string but got " + data['validation']);
        }

        return true;
    }


}



/**
 * The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
 * @member {Number} maxResults
 */
JexpJqlIssues.prototype['maxResults'] = undefined;

/**
 * The JQL query.
 * @member {String} query
 */
JexpJqlIssues.prototype['query'] = undefined;

/**
 * The index of the first issue to return from the JQL query.
 * @member {Number} startAt
 */
JexpJqlIssues.prototype['startAt'] = undefined;

/**
 * Determines how to validate the JQL query and treat the validation results.
 * @member {module:model/JexpJqlIssues.ValidationEnum} validation
 * @default 'strict'
 */
JexpJqlIssues.prototype['validation'] = 'strict';





/**
 * Allowed values for the <code>validation</code> property.
 * @enum {String}
 * @readonly
 */
JexpJqlIssues['ValidationEnum'] = {

    /**
     * value: "strict"
     * @const
     */
    "strict": "strict",

    /**
     * value: "warn"
     * @const
     */
    "warn": "warn",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default JexpJqlIssues;

