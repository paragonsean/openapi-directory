/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateScreenTypes model module.
 * @module model/UpdateScreenTypes
 * @version 1001.0.0-SNAPSHOT
 */
class UpdateScreenTypes {
    /**
     * Constructs a new <code>UpdateScreenTypes</code>.
     * The IDs of the screens for the screen types of the screen scheme.
     * @alias module:model/UpdateScreenTypes
     */
    constructor() { 
        
        UpdateScreenTypes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateScreenTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateScreenTypes} obj Optional instance to populate.
     * @return {module:model/UpdateScreenTypes} The populated <code>UpdateScreenTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateScreenTypes();

            if (data.hasOwnProperty('create')) {
                obj['create'] = ApiClient.convertToType(data['create'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('edit')) {
                obj['edit'] = ApiClient.convertToType(data['edit'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateScreenTypes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateScreenTypes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['create'] && !(typeof data['create'] === 'string' || data['create'] instanceof String)) {
            throw new Error("Expected the field `create` to be a primitive type in the JSON string but got " + data['create']);
        }
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }
        // ensure the json data is a string
        if (data['edit'] && !(typeof data['edit'] === 'string' || data['edit'] instanceof String)) {
            throw new Error("Expected the field `edit` to be a primitive type in the JSON string but got " + data['edit']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}



/**
 * The ID of the create screen. To remove the screen association, pass a null.
 * @member {String} create
 */
UpdateScreenTypes.prototype['create'] = undefined;

/**
 * The ID of the default screen. When specified, must include a screen ID as a default screen is required.
 * @member {String} default
 */
UpdateScreenTypes.prototype['default'] = undefined;

/**
 * The ID of the edit screen. To remove the screen association, pass a null.
 * @member {String} edit
 */
UpdateScreenTypes.prototype['edit'] = undefined;

/**
 * The ID of the view screen. To remove the screen association, pass a null.
 * @member {String} view
 */
UpdateScreenTypes.prototype['view'] = undefined;






export default UpdateScreenTypes;

