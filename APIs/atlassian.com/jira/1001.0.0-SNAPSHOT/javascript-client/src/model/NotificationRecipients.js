/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupName from './GroupName';
import UserDetails from './UserDetails';

/**
 * The NotificationRecipients model module.
 * @module model/NotificationRecipients
 * @version 1001.0.0-SNAPSHOT
 */
class NotificationRecipients {
    /**
     * Constructs a new <code>NotificationRecipients</code>.
     * Details of the users and groups to receive the notification.
     * @alias module:model/NotificationRecipients
     * @extends Object
     */
    constructor() { 
        
        NotificationRecipients.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationRecipients</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationRecipients} obj Optional instance to populate.
     * @return {module:model/NotificationRecipients} The populated <code>NotificationRecipients</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationRecipients();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'Boolean');
            }
            if (data.hasOwnProperty('groupIds')) {
                obj['groupIds'] = ApiClient.convertToType(data['groupIds'], ['String']);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [GroupName]);
            }
            if (data.hasOwnProperty('reporter')) {
                obj['reporter'] = ApiClient.convertToType(data['reporter'], 'Boolean');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [UserDetails]);
            }
            if (data.hasOwnProperty('voters')) {
                obj['voters'] = ApiClient.convertToType(data['voters'], 'Boolean');
            }
            if (data.hasOwnProperty('watchers')) {
                obj['watchers'] = ApiClient.convertToType(data['watchers'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationRecipients</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationRecipients</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['groupIds'])) {
            throw new Error("Expected the field `groupIds` to be an array in the JSON data but got " + data['groupIds']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                GroupName.validateJSON(item);
            };
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                UserDetails.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Whether the notification should be sent to the issue's assignees.
 * @member {Boolean} assignee
 */
NotificationRecipients.prototype['assignee'] = undefined;

/**
 * List of groupIds to receive the notification.
 * @member {Array.<String>} groupIds
 */
NotificationRecipients.prototype['groupIds'] = undefined;

/**
 * List of groups to receive the notification.
 * @member {Array.<module:model/GroupName>} groups
 */
NotificationRecipients.prototype['groups'] = undefined;

/**
 * Whether the notification should be sent to the issue's reporter.
 * @member {Boolean} reporter
 */
NotificationRecipients.prototype['reporter'] = undefined;

/**
 * List of users to receive the notification.
 * @member {Array.<module:model/UserDetails>} users
 */
NotificationRecipients.prototype['users'] = undefined;

/**
 * Whether the notification should be sent to the issue's voters.
 * @member {Boolean} voters
 */
NotificationRecipients.prototype['voters'] = undefined;

/**
 * Whether the notification should be sent to the issue's watchers.
 * @member {Boolean} watchers
 */
NotificationRecipients.prototype['watchers'] = undefined;






export default NotificationRecipients;

