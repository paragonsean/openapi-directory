/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParsedJqlQuery from './ParsedJqlQuery';

/**
 * The ParsedJqlQueries model module.
 * @module model/ParsedJqlQueries
 * @version 1001.0.0-SNAPSHOT
 */
class ParsedJqlQueries {
    /**
     * Constructs a new <code>ParsedJqlQueries</code>.
     * A list of parsed JQL queries.
     * @alias module:model/ParsedJqlQueries
     * @param queries {Array.<module:model/ParsedJqlQuery>} A list of parsed JQL queries.
     */
    constructor(queries) { 
        
        ParsedJqlQueries.initialize(this, queries);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, queries) { 
        obj['queries'] = queries;
    }

    /**
     * Constructs a <code>ParsedJqlQueries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParsedJqlQueries} obj Optional instance to populate.
     * @return {module:model/ParsedJqlQueries} The populated <code>ParsedJqlQueries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParsedJqlQueries();

            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [ParsedJqlQuery]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParsedJqlQueries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParsedJqlQueries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParsedJqlQueries.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                ParsedJqlQuery.validateJSON(item);
            };
        }

        return true;
    }


}

ParsedJqlQueries.RequiredProperties = ["queries"];

/**
 * A list of parsed JQL queries.
 * @member {Array.<module:model/ParsedJqlQuery>} queries
 */
ParsedJqlQueries.prototype['queries'] = undefined;






export default ParsedJqlQueries;

