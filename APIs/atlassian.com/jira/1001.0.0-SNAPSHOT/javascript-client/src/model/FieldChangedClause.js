/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQueryClauseTimePredicate from './JqlQueryClauseTimePredicate';
import JqlQueryField from './JqlQueryField';

/**
 * The FieldChangedClause model module.
 * @module model/FieldChangedClause
 * @version 1001.0.0-SNAPSHOT
 */
class FieldChangedClause {
    /**
     * Constructs a new <code>FieldChangedClause</code>.
     * A clause that asserts whether a field was changed. For example, &#x60;status CHANGED AFTER startOfMonth(-1M)&#x60;.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator.
     * @alias module:model/FieldChangedClause
     * @param field {module:model/JqlQueryField} 
     * @param operator {module:model/FieldChangedClause.OperatorEnum} The operator applied to the field.
     * @param predicates {Array.<module:model/JqlQueryClauseTimePredicate>} The list of time predicates.
     */
    constructor(field, operator, predicates) { 
        
        FieldChangedClause.initialize(this, field, operator, predicates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field, operator, predicates) { 
        obj['field'] = field;
        obj['operator'] = operator;
        obj['predicates'] = predicates;
    }

    /**
     * Constructs a <code>FieldChangedClause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldChangedClause} obj Optional instance to populate.
     * @return {module:model/FieldChangedClause} The populated <code>FieldChangedClause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldChangedClause();

            if (data.hasOwnProperty('field')) {
                obj['field'] = JqlQueryField.constructFromObject(data['field']);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('predicates')) {
                obj['predicates'] = ApiClient.convertToType(data['predicates'], [JqlQueryClauseTimePredicate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldChangedClause</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldChangedClause</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldChangedClause.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `field`
        if (data['field']) { // data not null
          JqlQueryField.validateJSON(data['field']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        if (data['predicates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['predicates'])) {
                throw new Error("Expected the field `predicates` to be an array in the JSON data but got " + data['predicates']);
            }
            // validate the optional field `predicates` (array)
            for (const item of data['predicates']) {
                JqlQueryClauseTimePredicate.validateJSON(item);
            };
        }

        return true;
    }


}

FieldChangedClause.RequiredProperties = ["field", "operator", "predicates"];

/**
 * @member {module:model/JqlQueryField} field
 */
FieldChangedClause.prototype['field'] = undefined;

/**
 * The operator applied to the field.
 * @member {module:model/FieldChangedClause.OperatorEnum} operator
 */
FieldChangedClause.prototype['operator'] = undefined;

/**
 * The list of time predicates.
 * @member {Array.<module:model/JqlQueryClauseTimePredicate>} predicates
 */
FieldChangedClause.prototype['predicates'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
FieldChangedClause['OperatorEnum'] = {

    /**
     * value: "changed"
     * @const
     */
    "changed": "changed"
};



export default FieldChangedClause;

