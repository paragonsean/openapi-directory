/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnnouncementBannerConfigurationUpdate model module.
 * @module model/AnnouncementBannerConfigurationUpdate
 * @version 1001.0.0-SNAPSHOT
 */
class AnnouncementBannerConfigurationUpdate {
    /**
     * Constructs a new <code>AnnouncementBannerConfigurationUpdate</code>.
     * Configuration of the announcement banner.
     * @alias module:model/AnnouncementBannerConfigurationUpdate
     */
    constructor() { 
        
        AnnouncementBannerConfigurationUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnouncementBannerConfigurationUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnouncementBannerConfigurationUpdate} obj Optional instance to populate.
     * @return {module:model/AnnouncementBannerConfigurationUpdate} The populated <code>AnnouncementBannerConfigurationUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnouncementBannerConfigurationUpdate();

            if (data.hasOwnProperty('isDismissible')) {
                obj['isDismissible'] = ApiClient.convertToType(data['isDismissible'], 'Boolean');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnouncementBannerConfigurationUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnouncementBannerConfigurationUpdate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * Flag indicating if the announcement banner can be dismissed by the user.
 * @member {Boolean} isDismissible
 */
AnnouncementBannerConfigurationUpdate.prototype['isDismissible'] = undefined;

/**
 * Flag indicating if the announcement banner is enabled or not.
 * @member {Boolean} isEnabled
 */
AnnouncementBannerConfigurationUpdate.prototype['isEnabled'] = undefined;

/**
 * The text on the announcement banner.
 * @member {String} message
 */
AnnouncementBannerConfigurationUpdate.prototype['message'] = undefined;

/**
 * Visibility of the announcement banner. Can be public or private.
 * @member {String} visibility
 */
AnnouncementBannerConfigurationUpdate.prototype['visibility'] = undefined;






export default AnnouncementBannerConfigurationUpdate;

