/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectType model module.
 * @module model/ProjectType
 * @version 1001.0.0-SNAPSHOT
 */
class ProjectType {
    /**
     * Constructs a new <code>ProjectType</code>.
     * Details about a project type.
     * @alias module:model/ProjectType
     */
    constructor() { 
        
        ProjectType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectType} obj Optional instance to populate.
     * @return {module:model/ProjectType} The populated <code>ProjectType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectType();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('descriptionI18nKey')) {
                obj['descriptionI18nKey'] = ApiClient.convertToType(data['descriptionI18nKey'], 'String');
            }
            if (data.hasOwnProperty('formattedKey')) {
                obj['formattedKey'] = ApiClient.convertToType(data['formattedKey'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['descriptionI18nKey'] && !(typeof data['descriptionI18nKey'] === 'string' || data['descriptionI18nKey'] instanceof String)) {
            throw new Error("Expected the field `descriptionI18nKey` to be a primitive type in the JSON string but got " + data['descriptionI18nKey']);
        }
        // ensure the json data is a string
        if (data['formattedKey'] && !(typeof data['formattedKey'] === 'string' || data['formattedKey'] instanceof String)) {
            throw new Error("Expected the field `formattedKey` to be a primitive type in the JSON string but got " + data['formattedKey']);
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }

        return true;
    }


}



/**
 * The color of the project type.
 * @member {String} color
 */
ProjectType.prototype['color'] = undefined;

/**
 * The key of the project type's description.
 * @member {String} descriptionI18nKey
 */
ProjectType.prototype['descriptionI18nKey'] = undefined;

/**
 * The formatted key of the project type.
 * @member {String} formattedKey
 */
ProjectType.prototype['formattedKey'] = undefined;

/**
 * The icon of the project type.
 * @member {String} icon
 */
ProjectType.prototype['icon'] = undefined;

/**
 * The key of the project type.
 * @member {String} key
 */
ProjectType.prototype['key'] = undefined;






export default ProjectType;

