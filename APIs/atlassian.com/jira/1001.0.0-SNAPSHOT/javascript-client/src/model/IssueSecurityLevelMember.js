/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PermissionHolder from './PermissionHolder';

/**
 * The IssueSecurityLevelMember model module.
 * @module model/IssueSecurityLevelMember
 * @version 1001.0.0-SNAPSHOT
 */
class IssueSecurityLevelMember {
    /**
     * Constructs a new <code>IssueSecurityLevelMember</code>.
     * Issue security level member.
     * @alias module:model/IssueSecurityLevelMember
     * @param holder {module:model/PermissionHolder} The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
     * @param id {Number} The ID of the issue security level member.
     * @param issueSecurityLevelId {Number} The ID of the issue security level.
     */
    constructor(holder, id, issueSecurityLevelId) { 
        
        IssueSecurityLevelMember.initialize(this, holder, id, issueSecurityLevelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, holder, id, issueSecurityLevelId) { 
        obj['holder'] = holder;
        obj['id'] = id;
        obj['issueSecurityLevelId'] = issueSecurityLevelId;
    }

    /**
     * Constructs a <code>IssueSecurityLevelMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueSecurityLevelMember} obj Optional instance to populate.
     * @return {module:model/IssueSecurityLevelMember} The populated <code>IssueSecurityLevelMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueSecurityLevelMember();

            if (data.hasOwnProperty('holder')) {
                obj['holder'] = ApiClient.convertToType(data['holder'], PermissionHolder);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issueSecurityLevelId')) {
                obj['issueSecurityLevelId'] = ApiClient.convertToType(data['issueSecurityLevelId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueSecurityLevelMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueSecurityLevelMember</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueSecurityLevelMember.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `holder`
        if (data['holder']) { // data not null
          PermissionHolder.validateJSON(data['holder']);
        }

        return true;
    }


}

IssueSecurityLevelMember.RequiredProperties = ["holder", "id", "issueSecurityLevelId"];

/**
 * The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
 * @member {module:model/PermissionHolder} holder
 */
IssueSecurityLevelMember.prototype['holder'] = undefined;

/**
 * The ID of the issue security level member.
 * @member {Number} id
 */
IssueSecurityLevelMember.prototype['id'] = undefined;

/**
 * The ID of the issue security level.
 * @member {Number} issueSecurityLevelId
 */
IssueSecurityLevelMember.prototype['issueSecurityLevelId'] = undefined;






export default IssueSecurityLevelMember;

