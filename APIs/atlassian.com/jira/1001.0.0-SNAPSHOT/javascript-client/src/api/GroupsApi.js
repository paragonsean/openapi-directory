/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddGroupBean from '../model/AddGroupBean';
import FoundGroups from '../model/FoundGroups';
import Group from '../model/Group';
import PageBeanGroupDetails from '../model/PageBeanGroupDetails';
import PageBeanUserDetails from '../model/PageBeanUserDetails';
import UpdateUserToGroupBean from '../model/UpdateUserToGroupBean';

/**
* Groups service.
* @module api/GroupsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserToGroup operation.
     * @callback module:api/GroupsApi~addUserToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to group
     * Adds a user to a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param {module:model/UpdateUserToGroupBean} updateUserToGroupBean The user to add to the group.
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param {String} [groupId] The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param {module:api/GroupsApi~addUserToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    addUserToGroup(updateUserToGroupBean, opts, callback) {
      opts = opts || {};
      let postBody = updateUserToGroupBean;
      // verify the required parameter 'updateUserToGroupBean' is set
      if (updateUserToGroupBean === undefined || updateUserToGroupBean === null) {
        throw new Error("Missing the required parameter 'updateUserToGroupBean' when calling addUserToGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'groupId': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/rest/api/3/group/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkGetGroups operation.
     * @callback module:api/GroupsApi~bulkGetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk get groups
     * Returns a [paginated](#pagination) list of groups.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<String>} [groupId] The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.
     * @param {Array.<String>} [groupName] The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.
     * @param {String} [accessType] The access level of a group. Valid values: 'site-admin', 'admin', 'user'.
     * @param {String} [applicationKey] The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.
     * @param {module:api/GroupsApi~bulkGetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanGroupDetails}
     */
    bulkGetGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'groupId': this.apiClient.buildCollectionParam(opts['groupId'], 'multi'),
        'groupName': this.apiClient.buildCollectionParam(opts['groupName'], 'multi'),
        'accessType': opts['accessType'],
        'applicationKey': opts['applicationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanGroupDetails;
      return this.apiClient.callApi(
        '/rest/api/3/group/bulk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create group
     * Creates a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param {module:model/AddGroupBean} addGroupBean The name of the group.
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    createGroup(addGroupBean, callback) {
      let postBody = addGroupBean;
      // verify the required parameter 'addGroupBean' is set
      if (addGroupBean === undefined || addGroupBean === null) {
        throw new Error("Missing the required parameter 'addGroupBean' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/rest/api/3/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroups operation.
     * @callback module:api/GroupsApi~findGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FoundGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find groups
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.  The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.  The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
     * @param {Object} opts Optional parameters
     * @param {String} [accountId] This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).
     * @param {String} [query] The string to find in group names.
     * @param {Array.<String>} [exclude] As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.   A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.
     * @param {Array.<String>} [excludeId] A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.
     * @param {Number} [maxResults] The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
     * @param {Boolean} [caseInsensitive = false)] Whether the search for groups should be case insensitive.
     * @param {String} [userName] This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param {module:api/GroupsApi~findGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FoundGroups}
     */
    findGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'query': opts['query'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'excludeId': this.apiClient.buildCollectionParam(opts['excludeId'], 'multi'),
        'maxResults': opts['maxResults'],
        'caseInsensitive': opts['caseInsensitive'],
        'userName': opts['userName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FoundGroups;
      return this.apiClient.callApi(
        '/rest/api/3/groups/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group
     * This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).  Returns all users in a group.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param {String} [groupId] The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param {String} [expand] List of fields to expand.
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'groupId': opts['groupId'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/rest/api/3/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersFromGroup operation.
     * @callback module:api/GroupsApi~getUsersFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanUserDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users from group
     * Returns a [paginated](#pagination) list of all users in a group.  Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param {String} [groupId] The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param {Boolean} [includeInactiveUsers = false)] Include inactive users.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/GroupsApi~getUsersFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanUserDetails}
     */
    getUsersFromGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'groupId': opts['groupId'],
        'includeInactiveUsers': opts['includeInactiveUsers'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanUserDetails;
      return this.apiClient.callApi(
        '/rest/api/3/group/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroup operation.
     * @callback module:api/GroupsApi~removeGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove group
     * Deletes a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] 
     * @param {String} [groupId] The ID of the group. This parameter cannot be used with the `groupname` parameter.
     * @param {String} [swapGroup] As a group's name can change, use of `swapGroupId` is recommended to identify a group.   The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.
     * @param {String} [swapGroupId] The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.
     * @param {module:api/GroupsApi~removeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'groupId': opts['groupId'],
        'swapGroup': opts['swapGroup'],
        'swapGroupId': opts['swapGroupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/group', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromGroup operation.
     * @callback module:api/GroupsApi~removeUserFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user from group
     * Removes a user from a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param {String} accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.
     * @param {String} [groupId] The ID of the group. This parameter cannot be used with the `groupName` parameter.
     * @param {String} [username] This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param {module:api/GroupsApi~removeUserFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserFromGroup(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling removeUserFromGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'groupId': opts['groupId'],
        'username': opts['username'],
        'accountId': accountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/group/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
