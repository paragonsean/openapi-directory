/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityProperty from '../model/EntityProperty';
import PropertyKeys from '../model/PropertyKeys';

/**
* IssueWorklogProperties service.
* @module api/IssueWorklogPropertiesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueWorklogPropertiesApi {

    /**
    * Constructs a new IssueWorklogPropertiesApi. 
    * @alias module:api/IssueWorklogPropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteWorklogProperty operation.
     * @callback module:api/IssueWorklogPropertiesApi~deleteWorklogPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete worklog property
     * Deletes a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/IssueWorklogPropertiesApi~deleteWorklogPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorklogProperty(issueIdOrKey, worklogId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteWorklogProperty");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling deleteWorklogProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling deleteWorklogProperty");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorklogProperty operation.
     * @callback module:api/IssueWorklogPropertiesApi~getWorklogPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worklog property
     * Returns the value of a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/IssueWorklogPropertiesApi~getWorklogPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityProperty}
     */
    getWorklogProperty(issueIdOrKey, worklogId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getWorklogProperty");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling getWorklogProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling getWorklogProperty");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityProperty;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorklogPropertyKeys operation.
     * @callback module:api/IssueWorklogPropertiesApi~getWorklogPropertyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worklog property keys
     * Returns the keys of all properties for a worklog.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {module:api/IssueWorklogPropertiesApi~getWorklogPropertyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyKeys}
     */
    getWorklogPropertyKeys(issueIdOrKey, worklogId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getWorklogPropertyKeys");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling getWorklogPropertyKeys");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyKeys;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setWorklogProperty operation.
     * @callback module:api/IssueWorklogPropertiesApi~setWorklogPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set worklog property
     * Sets the value of a worklog property. Use this operation to store custom data against the worklog.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {String} propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param {Object} body 
     * @param {module:api/IssueWorklogPropertiesApi~setWorklogPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setWorklogProperty(issueIdOrKey, worklogId, propertyKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling setWorklogProperty");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling setWorklogProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling setWorklogProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setWorklogProperty");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
