/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueTypeIds from '../model/IssueTypeIds';
import IssueTypeScreenSchemeDetails from '../model/IssueTypeScreenSchemeDetails';
import IssueTypeScreenSchemeId from '../model/IssueTypeScreenSchemeId';
import IssueTypeScreenSchemeMappingDetails from '../model/IssueTypeScreenSchemeMappingDetails';
import IssueTypeScreenSchemeProjectAssociation from '../model/IssueTypeScreenSchemeProjectAssociation';
import IssueTypeScreenSchemeUpdateDetails from '../model/IssueTypeScreenSchemeUpdateDetails';
import PageBeanIssueTypeScreenScheme from '../model/PageBeanIssueTypeScreenScheme';
import PageBeanIssueTypeScreenSchemeItem from '../model/PageBeanIssueTypeScreenSchemeItem';
import PageBeanIssueTypeScreenSchemesProjects from '../model/PageBeanIssueTypeScreenSchemesProjects';
import PageBeanProjectDetails from '../model/PageBeanProjectDetails';
import UpdateDefaultScreenScheme from '../model/UpdateDefaultScreenScheme';

/**
* IssueTypeScreenSchemes service.
* @module api/IssueTypeScreenSchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueTypeScreenSchemesApi {

    /**
    * Constructs a new IssueTypeScreenSchemesApi. 
    * @alias module:api/IssueTypeScreenSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appendMappingsForIssueTypeScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~appendMappingsForIssueTypeScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append mappings to issue type screen scheme
     * Appends issue type to screen scheme mappings to an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param {module:model/IssueTypeScreenSchemeMappingDetails} issueTypeScreenSchemeMappingDetails 
     * @param {module:api/IssueTypeScreenSchemesApi~appendMappingsForIssueTypeScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appendMappingsForIssueTypeScreenScheme(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails, callback) {
      let postBody = issueTypeScreenSchemeMappingDetails;
      // verify the required parameter 'issueTypeScreenSchemeId' is set
      if (issueTypeScreenSchemeId === undefined || issueTypeScreenSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeId' when calling appendMappingsForIssueTypeScreenScheme");
      }
      // verify the required parameter 'issueTypeScreenSchemeMappingDetails' is set
      if (issueTypeScreenSchemeMappingDetails === undefined || issueTypeScreenSchemeMappingDetails === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeMappingDetails' when calling appendMappingsForIssueTypeScreenScheme");
      }

      let pathParams = {
        'issueTypeScreenSchemeId': issueTypeScreenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignIssueTypeScreenSchemeToProject operation.
     * @callback module:api/IssueTypeScreenSchemesApi~assignIssueTypeScreenSchemeToProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign issue type screen scheme to project
     * Assigns an issue type screen scheme to a project.  Issue type screen schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/IssueTypeScreenSchemeProjectAssociation} issueTypeScreenSchemeProjectAssociation 
     * @param {module:api/IssueTypeScreenSchemesApi~assignIssueTypeScreenSchemeToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignIssueTypeScreenSchemeToProject(issueTypeScreenSchemeProjectAssociation, callback) {
      let postBody = issueTypeScreenSchemeProjectAssociation;
      // verify the required parameter 'issueTypeScreenSchemeProjectAssociation' is set
      if (issueTypeScreenSchemeProjectAssociation === undefined || issueTypeScreenSchemeProjectAssociation === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeProjectAssociation' when calling assignIssueTypeScreenSchemeToProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssueTypeScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~createIssueTypeScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeScreenSchemeId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue type screen scheme
     * Creates an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/IssueTypeScreenSchemeDetails} issueTypeScreenSchemeDetails An issue type screen scheme bean.
     * @param {module:api/IssueTypeScreenSchemesApi~createIssueTypeScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeScreenSchemeId}
     */
    createIssueTypeScreenScheme(issueTypeScreenSchemeDetails, callback) {
      let postBody = issueTypeScreenSchemeDetails;
      // verify the required parameter 'issueTypeScreenSchemeDetails' is set
      if (issueTypeScreenSchemeDetails === undefined || issueTypeScreenSchemeDetails === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeDetails' when calling createIssueTypeScreenScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueTypeScreenSchemeId;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueTypeScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~deleteIssueTypeScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue type screen scheme
     * Deletes an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param {module:api/IssueTypeScreenSchemesApi~deleteIssueTypeScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteIssueTypeScreenScheme(issueTypeScreenSchemeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeScreenSchemeId' is set
      if (issueTypeScreenSchemeId === undefined || issueTypeScreenSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeId' when calling deleteIssueTypeScreenScheme");
      }

      let pathParams = {
        'issueTypeScreenSchemeId': issueTypeScreenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeScreenSchemeMappings operation.
     * @callback module:api/IssueTypeScreenSchemesApi~getIssueTypeScreenSchemeMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeScreenSchemeItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type screen scheme items
     * Returns a [paginated](#pagination) list of issue type screen scheme items.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [issueTypeScreenSchemeId] The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.
     * @param {module:api/IssueTypeScreenSchemesApi~getIssueTypeScreenSchemeMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeScreenSchemeItem}
     */
    getIssueTypeScreenSchemeMappings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'issueTypeScreenSchemeId': this.apiClient.buildCollectionParam(opts['issueTypeScreenSchemeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeScreenSchemeItem;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/mapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeScreenSchemeProjectAssociations operation.
     * @callback module:api/IssueTypeScreenSchemesApi~getIssueTypeScreenSchemeProjectAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeScreenSchemesProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type screen schemes for projects
     * Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Array.<Number>} projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueTypeScreenSchemesApi~getIssueTypeScreenSchemeProjectAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeScreenSchemesProjects}
     */
    getIssueTypeScreenSchemeProjectAssociations(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIssueTypeScreenSchemeProjectAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': this.apiClient.buildCollectionParam(projectId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeScreenSchemesProjects;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeScreenSchemes operation.
     * @callback module:api/IssueTypeScreenSchemesApi~getIssueTypeScreenSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeScreenScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type screen schemes
     * Returns a [paginated](#pagination) list of issue type screen schemes.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [id] The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param {String} [queryString = '')] String used to perform a case-insensitive partial match with issue type screen scheme name.
     * @param {module:model/String} [orderBy = 'id')] [Order](#ordering) the results by a field:   *  `name` Sorts by issue type screen scheme name.  *  `id` Sorts by issue type screen scheme ID.
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.
     * @param {module:api/IssueTypeScreenSchemesApi~getIssueTypeScreenSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeScreenScheme}
     */
    getIssueTypeScreenSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'queryString': opts['queryString'],
        'orderBy': opts['orderBy'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeScreenScheme;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForIssueTypeScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~getProjectsForIssueTypeScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type screen scheme projects
     * Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.  Only company-managed projects associated with an issue type screen scheme are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {String} [query = '')] 
     * @param {module:api/IssueTypeScreenSchemesApi~getProjectsForIssueTypeScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanProjectDetails}
     */
    getProjectsForIssueTypeScreenScheme(issueTypeScreenSchemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueTypeScreenSchemeId' is set
      if (issueTypeScreenSchemeId === undefined || issueTypeScreenSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeId' when calling getProjectsForIssueTypeScreenScheme");
      }

      let pathParams = {
        'issueTypeScreenSchemeId': issueTypeScreenSchemeId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanProjectDetails;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMappingsFromIssueTypeScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~removeMappingsFromIssueTypeScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove mappings from issue type screen scheme
     * Removes issue type to screen scheme mappings from an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param {module:model/IssueTypeIds} issueTypeIds 
     * @param {module:api/IssueTypeScreenSchemesApi~removeMappingsFromIssueTypeScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeMappingsFromIssueTypeScreenScheme(issueTypeScreenSchemeId, issueTypeIds, callback) {
      let postBody = issueTypeIds;
      // verify the required parameter 'issueTypeScreenSchemeId' is set
      if (issueTypeScreenSchemeId === undefined || issueTypeScreenSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeId' when calling removeMappingsFromIssueTypeScreenScheme");
      }
      // verify the required parameter 'issueTypeIds' is set
      if (issueTypeIds === undefined || issueTypeIds === null) {
        throw new Error("Missing the required parameter 'issueTypeIds' when calling removeMappingsFromIssueTypeScreenScheme");
      }

      let pathParams = {
        'issueTypeScreenSchemeId': issueTypeScreenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDefaultScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~updateDefaultScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue type screen scheme default screen scheme
     * Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param {module:model/UpdateDefaultScreenScheme} updateDefaultScreenScheme 
     * @param {module:api/IssueTypeScreenSchemesApi~updateDefaultScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDefaultScreenScheme(issueTypeScreenSchemeId, updateDefaultScreenScheme, callback) {
      let postBody = updateDefaultScreenScheme;
      // verify the required parameter 'issueTypeScreenSchemeId' is set
      if (issueTypeScreenSchemeId === undefined || issueTypeScreenSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeId' when calling updateDefaultScreenScheme");
      }
      // verify the required parameter 'updateDefaultScreenScheme' is set
      if (updateDefaultScreenScheme === undefined || updateDefaultScreenScheme === null) {
        throw new Error("Missing the required parameter 'updateDefaultScreenScheme' when calling updateDefaultScreenScheme");
      }

      let pathParams = {
        'issueTypeScreenSchemeId': issueTypeScreenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueTypeScreenScheme operation.
     * @callback module:api/IssueTypeScreenSchemesApi~updateIssueTypeScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue type screen scheme
     * Updates an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeScreenSchemeId The ID of the issue type screen scheme.
     * @param {module:model/IssueTypeScreenSchemeUpdateDetails} issueTypeScreenSchemeUpdateDetails The issue type screen scheme update details.
     * @param {module:api/IssueTypeScreenSchemesApi~updateIssueTypeScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateIssueTypeScreenScheme(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails, callback) {
      let postBody = issueTypeScreenSchemeUpdateDetails;
      // verify the required parameter 'issueTypeScreenSchemeId' is set
      if (issueTypeScreenSchemeId === undefined || issueTypeScreenSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeId' when calling updateIssueTypeScreenScheme");
      }
      // verify the required parameter 'issueTypeScreenSchemeUpdateDetails' is set
      if (issueTypeScreenSchemeUpdateDetails === undefined || issueTypeScreenSchemeUpdateDetails === null) {
        throw new Error("Missing the required parameter 'issueTypeScreenSchemeUpdateDetails' when calling updateIssueTypeScreenScheme");
      }

      let pathParams = {
        'issueTypeScreenSchemeId': issueTypeScreenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
