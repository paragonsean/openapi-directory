/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangedWorklogs from '../model/ChangedWorklogs';
import PageOfWorklogs from '../model/PageOfWorklogs';
import Worklog from '../model/Worklog';
import WorklogIdsRequestBean from '../model/WorklogIdsRequestBean';

/**
* IssueWorklogs service.
* @module api/IssueWorklogsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueWorklogsApi {

    /**
    * Constructs a new IssueWorklogsApi. 
    * @alias module:api/IssueWorklogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addWorklog operation.
     * @callback module:api/IssueWorklogsApi~addWorklogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Worklog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add worklog
     * Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key the issue.
     * @param {module:model/Worklog} worklog 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyUsers = true)] Whether users watching the issue are notified by email.
     * @param {module:model/String} [adjustEstimate = 'auto')] Defines how to update the issue's time estimate, the options are:   *  `new` Sets the estimate to a specific value, defined in `newEstimate`.  *  `leave` Leaves the estimate unchanged.  *  `manual` Reduces the estimate by amount specified in `reduceBy`.  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
     * @param {String} [newEstimate] The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.
     * @param {String} [reduceBy] The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.
     * @param {Boolean} [overrideEditableFlag = false)] Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
     * @param {module:api/IssueWorklogsApi~addWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Worklog}
     */
    addWorklog(issueIdOrKey, worklog, opts, callback) {
      opts = opts || {};
      let postBody = worklog;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addWorklog");
      }
      // verify the required parameter 'worklog' is set
      if (worklog === undefined || worklog === null) {
        throw new Error("Missing the required parameter 'worklog' when calling addWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'notifyUsers': opts['notifyUsers'],
        'adjustEstimate': opts['adjustEstimate'],
        'newEstimate': opts['newEstimate'],
        'reduceBy': opts['reduceBy'],
        'expand': opts['expand'],
        'overrideEditableFlag': opts['overrideEditableFlag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Worklog;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorklog operation.
     * @callback module:api/IssueWorklogsApi~deleteWorklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete worklog
     * Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} id The ID of the worklog.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyUsers = true)] Whether users watching the issue are notified by email.
     * @param {module:model/String} [adjustEstimate = 'auto')] Defines how to update the issue's time estimate, the options are:   *  `new` Sets the estimate to a specific value, defined in `newEstimate`.  *  `leave` Leaves the estimate unchanged.  *  `manual` Increases the estimate by amount specified in `increaseBy`.  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
     * @param {String} [newEstimate] The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.
     * @param {String} [increaseBy] The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`.
     * @param {Boolean} [overrideEditableFlag = false)] Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
     * @param {module:api/IssueWorklogsApi~deleteWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorklog(issueIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteWorklog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'notifyUsers': opts['notifyUsers'],
        'adjustEstimate': opts['adjustEstimate'],
        'newEstimate': opts['newEstimate'],
        'increaseBy': opts['increaseBy'],
        'overrideEditableFlag': opts['overrideEditableFlag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdsOfWorklogsDeletedSince operation.
     * @callback module:api/IssueWorklogsApi~getIdsOfWorklogsDeletedSinceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangedWorklogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IDs of deleted worklogs
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Object} opts Optional parameters
     * @param {Number} [since = 0)] The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.
     * @param {module:api/IssueWorklogsApi~getIdsOfWorklogsDeletedSinceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangedWorklogs}
     */
    getIdsOfWorklogsDeletedSince(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChangedWorklogs;
      return this.apiClient.callApi(
        '/rest/api/3/worklog/deleted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdsOfWorklogsModifiedSince operation.
     * @callback module:api/IssueWorklogsApi~getIdsOfWorklogsModifiedSinceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangedWorklogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IDs of updated worklogs
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     * @param {Object} opts Optional parameters
     * @param {Number} [since = 0)] The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
     * @param {module:api/IssueWorklogsApi~getIdsOfWorklogsModifiedSinceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangedWorklogs}
     */
    getIdsOfWorklogsModifiedSince(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChangedWorklogs;
      return this.apiClient.callApi(
        '/rest/api/3/worklog/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueWorklog operation.
     * @callback module:api/IssueWorklogsApi~getIssueWorklogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfWorklogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue worklogs
     * Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Workloads are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 5000)] The maximum number of items to return per page.
     * @param {Number} [startedAfter] The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.
     * @param {Number} [startedBefore] The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.
     * @param {module:api/IssueWorklogsApi~getIssueWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfWorklogs}
     */
    getIssueWorklog(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssueWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'startedAfter': opts['startedAfter'],
        'startedBefore': opts['startedBefore'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfWorklogs;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorklog operation.
     * @callback module:api/IssueWorklogsApi~getWorklogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Worklog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worklog
     * Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} id The ID of the worklog.
     * @param {Object} opts Optional parameters
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts  `properties`, which returns worklog properties.
     * @param {module:api/IssueWorklogsApi~getWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Worklog}
     */
    getWorklog(issueIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getWorklog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Worklog;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorklogsForIds operation.
     * @callback module:api/IssueWorklogsApi~getWorklogsForIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Worklog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worklogs
     * Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     * @param {module:model/WorklogIdsRequestBean} worklogIdsRequestBean A JSON object containing a list of worklog IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
     * @param {module:api/IssueWorklogsApi~getWorklogsForIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Worklog>}
     */
    getWorklogsForIds(worklogIdsRequestBean, opts, callback) {
      opts = opts || {};
      let postBody = worklogIdsRequestBean;
      // verify the required parameter 'worklogIdsRequestBean' is set
      if (worklogIdsRequestBean === undefined || worklogIdsRequestBean === null) {
        throw new Error("Missing the required parameter 'worklogIdsRequestBean' when calling getWorklogsForIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Worklog];
      return this.apiClient.callApi(
        '/rest/api/3/worklog/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorklog operation.
     * @callback module:api/IssueWorklogsApi~updateWorklogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Worklog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update worklog
     * Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {String} issueIdOrKey The ID or key the issue.
     * @param {String} id The ID of the worklog.
     * @param {module:model/Worklog} worklog 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyUsers = true)] Whether users watching the issue are notified by email.
     * @param {module:model/String} [adjustEstimate = 'auto')] Defines how to update the issue's time estimate, the options are:   *  `new` Sets the estimate to a specific value, defined in `newEstimate`.  *  `leave` Leaves the estimate unchanged.  *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
     * @param {String} [newEstimate] The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.
     * @param {Boolean} [overrideEditableFlag = false)] Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
     * @param {module:api/IssueWorklogsApi~updateWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Worklog}
     */
    updateWorklog(issueIdOrKey, id, worklog, opts, callback) {
      opts = opts || {};
      let postBody = worklog;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling updateWorklog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorklog");
      }
      // verify the required parameter 'worklog' is set
      if (worklog === undefined || worklog === null) {
        throw new Error("Missing the required parameter 'worklog' when calling updateWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'notifyUsers': opts['notifyUsers'],
        'adjustEstimate': opts['adjustEstimate'],
        'newEstimate': opts['newEstimate'],
        'expand': opts['expand'],
        'overrideEditableFlag': opts['overrideEditableFlag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Worklog;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
