/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueLink from '../model/IssueLink';
import LinkIssueRequestJsonBean from '../model/LinkIssueRequestJsonBean';

/**
* IssueLinks service.
* @module api/IssueLinksApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueLinksApi {

    /**
    * Constructs a new IssueLinksApi. 
    * @alias module:api/IssueLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteIssueLink operation.
     * @callback module:api/IssueLinksApi~deleteIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue link
     * Deletes an issue link.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     * @param {String} linkId The ID of the issue link.
     * @param {module:api/IssueLinksApi~deleteIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssueLink(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling deleteIssueLink");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issueLink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueLink operation.
     * @callback module:api/IssueLinksApi~getIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue link
     * Returns an issue link.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     * @param {String} linkId The ID of the issue link.
     * @param {module:api/IssueLinksApi~getIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLink}
     */
    getIssueLink(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling getIssueLink");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueLink;
      return this.apiClient.callApi(
        '/rest/api/3/issueLink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkIssues operation.
     * @callback module:api/IssueLinksApi~linkIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue link
     * Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.  If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param {module:model/LinkIssueRequestJsonBean} linkIssueRequestJsonBean The issue link request.
     * @param {module:api/IssueLinksApi~linkIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    linkIssues(linkIssueRequestJsonBean, callback) {
      let postBody = linkIssueRequestJsonBean;
      // verify the required parameter 'linkIssueRequestJsonBean' is set
      if (linkIssueRequestJsonBean === undefined || linkIssueRequestJsonBean === null) {
        throw new Error("Missing the required parameter 'linkIssueRequestJsonBean' when calling linkIssues");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issueLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
