/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageBeanScreen from '../model/PageBeanScreen';
import PageBeanScreenWithTab from '../model/PageBeanScreenWithTab';
import Screen from '../model/Screen';
import ScreenDetails from '../model/ScreenDetails';
import ScreenableField from '../model/ScreenableField';
import UpdateScreenDetails from '../model/UpdateScreenDetails';

/**
* Screens service.
* @module api/ScreensApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ScreensApi {

    /**
    * Constructs a new ScreensApi. 
    * @alias module:api/ScreensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFieldToDefaultScreen operation.
     * @callback module:api/ScreensApi~addFieldToDefaultScreenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add field to default screen
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the field.
     * @param {module:api/ScreensApi~addFieldToDefaultScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addFieldToDefaultScreen(fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling addFieldToDefaultScreen");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/screens/addToDefault/{fieldId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScreen operation.
     * @callback module:api/ScreensApi~createScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create screen
     * Creates a screen with a default field tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/ScreenDetails} screenDetails 
     * @param {module:api/ScreensApi~createScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screen}
     */
    createScreen(screenDetails, callback) {
      let postBody = screenDetails;
      // verify the required parameter 'screenDetails' is set
      if (screenDetails === undefined || screenDetails === null) {
        throw new Error("Missing the required parameter 'screenDetails' when calling createScreen");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Screen;
      return this.apiClient.callApi(
        '/rest/api/3/screens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreen operation.
     * @callback module:api/ScreensApi~deleteScreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete screen
     * Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.
     * @param {Number} screenId The ID of the screen.
     * @param {module:api/ScreensApi~deleteScreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScreen(screenId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling deleteScreen");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableScreenFields operation.
     * @callback module:api/ScreensApi~getAvailableScreenFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenableField>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available screen fields
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {module:api/ScreensApi~getAvailableScreenFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenableField>}
     */
    getAvailableScreenFields(screenId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling getAvailableScreenFields");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenableField];
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/availableFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreens operation.
     * @callback module:api/ScreensApi~getScreensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanScreen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screens
     * Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 100)] The maximum number of items to return per page.
     * @param {Array.<Number>} [id] The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param {String} [queryString = '')] String used to perform a case-insensitive partial match with screen name.
     * @param {Array.<module:model/String>} [scope] The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.
     * @param {module:model/String} [orderBy] [Order](#ordering) the results by a field:   *  `id` Sorts by screen ID.  *  `name` Sorts by screen name.
     * @param {module:api/ScreensApi~getScreensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanScreen}
     */
    getScreens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'queryString': opts['queryString'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'multi'),
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanScreen;
      return this.apiClient.callApi(
        '/rest/api/3/screens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreensForField operation.
     * @callback module:api/ScreensApi~getScreensForFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanScreenWithTab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screens for a field
     * Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the field to return screens for.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 100)] The maximum number of items to return per page.
     * @param {String} [expand] Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.
     * @param {module:api/ScreensApi~getScreensForFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanScreenWithTab}
     */
    getScreensForField(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getScreensForField");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanScreenWithTab;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/screens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreen operation.
     * @callback module:api/ScreensApi~updateScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update screen
     * Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {module:model/UpdateScreenDetails} updateScreenDetails 
     * @param {module:api/ScreensApi~updateScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screen}
     */
    updateScreen(screenId, updateScreenDetails, callback) {
      let postBody = updateScreenDetails;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling updateScreen");
      }
      // verify the required parameter 'updateScreenDetails' is set
      if (updateScreenDetails === undefined || updateScreenDetails === null) {
        throw new Error("Missing the required parameter 'updateScreenDetails' when calling updateScreen");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Screen;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
