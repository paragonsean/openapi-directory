/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCustomFieldContext from '../model/CreateCustomFieldContext';
import CustomFieldContextDefaultValueUpdate from '../model/CustomFieldContextDefaultValueUpdate';
import CustomFieldContextUpdateDetails from '../model/CustomFieldContextUpdateDetails';
import IssueTypeIds from '../model/IssueTypeIds';
import PageBeanContextForProjectAndIssueType from '../model/PageBeanContextForProjectAndIssueType';
import PageBeanCustomFieldContext from '../model/PageBeanCustomFieldContext';
import PageBeanCustomFieldContextDefaultValue from '../model/PageBeanCustomFieldContextDefaultValue';
import PageBeanCustomFieldContextProjectMapping from '../model/PageBeanCustomFieldContextProjectMapping';
import PageBeanIssueTypeToContextMapping from '../model/PageBeanIssueTypeToContextMapping';
import ProjectIds from '../model/ProjectIds';
import ProjectIssueTypeMappings from '../model/ProjectIssueTypeMappings';

/**
* IssueCustomFieldContexts service.
* @module api/IssueCustomFieldContextsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueCustomFieldContextsApi {

    /**
    * Constructs a new IssueCustomFieldContextsApi. 
    * @alias module:api/IssueCustomFieldContextsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addIssueTypesToContext operation.
     * @callback module:api/IssueCustomFieldContextsApi~addIssueTypesToContextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add issue types to context
     * Adds issue types to a custom field context, appending the issue types to the issue types list.  A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.  If any of the issue types exists in the custom field context, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/IssueTypeIds} issueTypeIds 
     * @param {module:api/IssueCustomFieldContextsApi~addIssueTypesToContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addIssueTypesToContext(fieldId, contextId, issueTypeIds, callback) {
      let postBody = issueTypeIds;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling addIssueTypesToContext");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling addIssueTypesToContext");
      }
      // verify the required parameter 'issueTypeIds' is set
      if (issueTypeIds === undefined || issueTypeIds === null) {
        throw new Error("Missing the required parameter 'issueTypeIds' when calling addIssueTypesToContext");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignProjectsToCustomFieldContext operation.
     * @callback module:api/IssueCustomFieldContextsApi~assignProjectsToCustomFieldContextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign custom field context to projects
     * Assigns a custom field context to projects.  If any project in the request is assigned to any context of the custom field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/ProjectIds} projectIds 
     * @param {module:api/IssueCustomFieldContextsApi~assignProjectsToCustomFieldContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignProjectsToCustomFieldContext(fieldId, contextId, projectIds, callback) {
      let postBody = projectIds;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling assignProjectsToCustomFieldContext");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling assignProjectsToCustomFieldContext");
      }
      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling assignProjectsToCustomFieldContext");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomFieldContext operation.
     * @callback module:api/IssueCustomFieldContextsApi~createCustomFieldContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomFieldContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create custom field context
     * Creates a custom field context.  If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {module:model/CreateCustomFieldContext} createCustomFieldContext 
     * @param {module:api/IssueCustomFieldContextsApi~createCustomFieldContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomFieldContext}
     */
    createCustomFieldContext(fieldId, createCustomFieldContext, callback) {
      let postBody = createCustomFieldContext;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling createCustomFieldContext");
      }
      // verify the required parameter 'createCustomFieldContext' is set
      if (createCustomFieldContext === undefined || createCustomFieldContext === null) {
        throw new Error("Missing the required parameter 'createCustomFieldContext' when calling createCustomFieldContext");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomFieldContext;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomFieldContext operation.
     * @callback module:api/IssueCustomFieldContextsApi~deleteCustomFieldContextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete custom field context
     * Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:api/IssueCustomFieldContextsApi~deleteCustomFieldContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCustomFieldContext(fieldId, contextId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteCustomFieldContext");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling deleteCustomFieldContext");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContextsForField operation.
     * @callback module:api/IssueCustomFieldContextsApi~getContextsForFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanCustomFieldContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom field contexts
     * Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:   *  With no other parameters set, all contexts.  *  By defining `id` only, all contexts from the list of IDs.  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isAnyIssueType] Whether to return contexts that apply to all issue types.
     * @param {Boolean} [isGlobalContext] Whether to return contexts that apply to all projects.
     * @param {Array.<Number>} [contextId] The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldContextsApi~getContextsForFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanCustomFieldContext}
     */
    getContextsForField(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getContextsForField");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'isAnyIssueType': opts['isAnyIssueType'],
        'isGlobalContext': opts['isGlobalContext'],
        'contextId': this.apiClient.buildCollectionParam(opts['contextId'], 'multi'),
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanCustomFieldContext;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFieldContextsForProjectsAndIssueTypes operation.
     * @callback module:api/IssueCustomFieldContextsApi~getCustomFieldContextsForProjectsAndIssueTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanContextForProjectAndIssueType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom field contexts for projects and issue types
     * Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.  If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.  Duplicate project and issue type mappings cannot be provided in the request.  The order of the returned values is the same as provided in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {module:model/ProjectIssueTypeMappings} projectIssueTypeMappings The list of project and issue type mappings.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldContextsApi~getCustomFieldContextsForProjectsAndIssueTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanContextForProjectAndIssueType}
     */
    getCustomFieldContextsForProjectsAndIssueTypes(fieldId, projectIssueTypeMappings, opts, callback) {
      opts = opts || {};
      let postBody = projectIssueTypeMappings;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getCustomFieldContextsForProjectsAndIssueTypes");
      }
      // verify the required parameter 'projectIssueTypeMappings' is set
      if (projectIssueTypeMappings === undefined || projectIssueTypeMappings === null) {
        throw new Error("Missing the required parameter 'projectIssueTypeMappings' when calling getCustomFieldContextsForProjectsAndIssueTypes");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageBeanContextForProjectAndIssueType;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/mapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultValues operation.
     * @callback module:api/IssueCustomFieldContextsApi~getDefaultValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanCustomFieldContextDefaultValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom field contexts default values
     * Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.   The returned object depends on type of the custom field:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field, for example `customfield\\_10000`.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [contextId] The IDs of the contexts.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldContextsApi~getDefaultValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanCustomFieldContextDefaultValue}
     */
    getDefaultValues(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getDefaultValues");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'contextId': this.apiClient.buildCollectionParam(opts['contextId'], 'multi'),
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanCustomFieldContextDefaultValue;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/defaultValue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeMappingsForContexts operation.
     * @callback module:api/IssueCustomFieldContextsApi~getIssueTypeMappingsForContextsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeToContextMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue types for custom field context
     * Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [contextId] The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldContextsApi~getIssueTypeMappingsForContextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeToContextMapping}
     */
    getIssueTypeMappingsForContexts(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getIssueTypeMappingsForContexts");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'contextId': this.apiClient.buildCollectionParam(opts['contextId'], 'multi'),
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeToContextMapping;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/issuetypemapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectContextMapping operation.
     * @callback module:api/IssueCustomFieldContextsApi~getProjectContextMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanCustomFieldContextProjectMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project mappings for custom field context
     * Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field, for example `customfield\\_10000`.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [contextId] The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldContextsApi~getProjectContextMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanCustomFieldContextProjectMapping}
     */
    getProjectContextMapping(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getProjectContextMapping");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'contextId': this.apiClient.buildCollectionParam(opts['contextId'], 'multi'),
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanCustomFieldContextProjectMapping;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/projectmapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCustomFieldContextFromProjects operation.
     * @callback module:api/IssueCustomFieldContextsApi~removeCustomFieldContextFromProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove custom field context from projects
     * Removes a custom field context from projects.  A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.  If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/ProjectIds} projectIds 
     * @param {module:api/IssueCustomFieldContextsApi~removeCustomFieldContextFromProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeCustomFieldContextFromProjects(fieldId, contextId, projectIds, callback) {
      let postBody = projectIds;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling removeCustomFieldContextFromProjects");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling removeCustomFieldContextFromProjects");
      }
      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling removeCustomFieldContextFromProjects");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/project/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeIssueTypesFromContext operation.
     * @callback module:api/IssueCustomFieldContextsApi~removeIssueTypesFromContextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove issue types from context
     * Removes issue types from a custom field context.  A custom field context without any issue types applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/IssueTypeIds} issueTypeIds 
     * @param {module:api/IssueCustomFieldContextsApi~removeIssueTypesFromContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeIssueTypesFromContext(fieldId, contextId, issueTypeIds, callback) {
      let postBody = issueTypeIds;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling removeIssueTypesFromContext");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling removeIssueTypesFromContext");
      }
      // verify the required parameter 'issueTypeIds' is set
      if (issueTypeIds === undefined || issueTypeIds === null) {
        throw new Error("Missing the required parameter 'issueTypeIds' when calling removeIssueTypesFromContext");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDefaultValues operation.
     * @callback module:api/IssueCustomFieldContextsApi~setDefaultValuesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set custom field contexts default values
     * Sets default for contexts of a custom field. Default are defined using these objects:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {module:model/CustomFieldContextDefaultValueUpdate} customFieldContextDefaultValueUpdate 
     * @param {module:api/IssueCustomFieldContextsApi~setDefaultValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setDefaultValues(fieldId, customFieldContextDefaultValueUpdate, callback) {
      let postBody = customFieldContextDefaultValueUpdate;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling setDefaultValues");
      }
      // verify the required parameter 'customFieldContextDefaultValueUpdate' is set
      if (customFieldContextDefaultValueUpdate === undefined || customFieldContextDefaultValueUpdate === null) {
        throw new Error("Missing the required parameter 'customFieldContextDefaultValueUpdate' when calling setDefaultValues");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/defaultValue', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFieldContext operation.
     * @callback module:api/IssueCustomFieldContextsApi~updateCustomFieldContextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom field context
     * Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/CustomFieldContextUpdateDetails} customFieldContextUpdateDetails 
     * @param {module:api/IssueCustomFieldContextsApi~updateCustomFieldContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCustomFieldContext(fieldId, contextId, customFieldContextUpdateDetails, callback) {
      let postBody = customFieldContextUpdateDetails;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateCustomFieldContext");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling updateCustomFieldContext");
      }
      // verify the required parameter 'customFieldContextUpdateDetails' is set
      if (customFieldContextUpdateDetails === undefined || customFieldContextUpdateDetails === null) {
        throw new Error("Missing the required parameter 'customFieldContextUpdateDetails' when calling updateCustomFieldContext");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
