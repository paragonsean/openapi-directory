/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailableDashboardGadgetsResponse from '../model/AvailableDashboardGadgetsResponse';
import Dashboard from '../model/Dashboard';
import DashboardDetails from '../model/DashboardDetails';
import DashboardGadget from '../model/DashboardGadget';
import DashboardGadgetResponse from '../model/DashboardGadgetResponse';
import DashboardGadgetSettings from '../model/DashboardGadgetSettings';
import DashboardGadgetUpdateRequest from '../model/DashboardGadgetUpdateRequest';
import EntityProperty from '../model/EntityProperty';
import ErrorCollection from '../model/ErrorCollection';
import PageBeanDashboard from '../model/PageBeanDashboard';
import PageOfDashboards from '../model/PageOfDashboards';
import PropertyKeys from '../model/PropertyKeys';

/**
* Dashboards service.
* @module api/DashboardsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class DashboardsApi {

    /**
    * Constructs a new DashboardsApi. 
    * @alias module:api/DashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGadget operation.
     * @callback module:api/DashboardsApi~addGadgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardGadget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add gadget to dashboard
     * Adds a gadget to a dashboard.  **[Permissions](#permissions) required:** None.
     * @param {Number} dashboardId The ID of the dashboard.
     * @param {module:model/DashboardGadgetSettings} dashboardGadgetSettings 
     * @param {module:api/DashboardsApi~addGadgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardGadget}
     */
    addGadget(dashboardId, dashboardGadgetSettings, callback) {
      let postBody = dashboardGadgetSettings;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling addGadget");
      }
      // verify the required parameter 'dashboardGadgetSettings' is set
      if (dashboardGadgetSettings === undefined || dashboardGadgetSettings === null) {
        throw new Error("Missing the required parameter 'dashboardGadgetSettings' when calling addGadget");
      }

      let pathParams = {
        'dashboardId': dashboardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardGadget;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/gadget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyDashboard operation.
     * @callback module:api/DashboardsApi~copyDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy dashboard
     * Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be copied must be owned by or shared with the user.
     * @param {String} id 
     * @param {module:model/DashboardDetails} dashboardDetails Dashboard details.
     * @param {module:api/DashboardsApi~copyDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    copyDashboard(id, dashboardDetails, callback) {
      let postBody = dashboardDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling copyDashboard");
      }
      // verify the required parameter 'dashboardDetails' is set
      if (dashboardDetails === undefined || dashboardDetails === null) {
        throw new Error("Missing the required parameter 'dashboardDetails' when calling copyDashboard");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{id}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDashboard operation.
     * @callback module:api/DashboardsApi~createDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create dashboard
     * Creates a dashboard.  **[Permissions](#permissions) required:** None.
     * @param {module:model/DashboardDetails} dashboardDetails Dashboard details.
     * @param {module:api/DashboardsApi~createDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    createDashboard(dashboardDetails, callback) {
      let postBody = dashboardDetails;
      // verify the required parameter 'dashboardDetails' is set
      if (dashboardDetails === undefined || dashboardDetails === null) {
        throw new Error("Missing the required parameter 'dashboardDetails' when calling createDashboard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboard operation.
     * @callback module:api/DashboardsApi~deleteDashboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete dashboard
     * Deletes a dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be deleted must be owned by the user.
     * @param {String} id The ID of the dashboard.
     * @param {module:api/DashboardsApi~deleteDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboard(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDashboard");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardItemProperty operation.
     * @callback module:api/DashboardsApi~deleteDashboardItemPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete dashboard item property
     * Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {String} propertyKey The key of the dashboard item property.
     * @param {module:api/DashboardsApi~deleteDashboardItemPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardItemProperty(dashboardId, itemId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling deleteDashboardItemProperty");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteDashboardItemProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling deleteDashboardItemProperty");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAvailableDashboardGadgets operation.
     * @callback module:api/DashboardsApi~getAllAvailableDashboardGadgetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableDashboardGadgetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available gadgets
     * Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](#permissions) required:** None.
     * @param {module:api/DashboardsApi~getAllAvailableDashboardGadgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableDashboardGadgetsResponse}
     */
    getAllAvailableDashboardGadgets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AvailableDashboardGadgetsResponse;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/gadgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllDashboards operation.
     * @callback module:api/DashboardsApi~getAllDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfDashboards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all dashboards
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter] The filter applied to the list of dashboards. Valid values are:   *  `favourite` Returns dashboards the user has marked as favorite.  *  `my` Returns dashboards owned by the user.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 20)] The maximum number of items to return per page.
     * @param {module:api/DashboardsApi~getAllDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfDashboards}
     */
    getAllDashboards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfDashboards;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllGadgets operation.
     * @callback module:api/DashboardsApi~getAllGadgetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardGadgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gadgets
     * Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when `id` is set.  *  Gadgets with a module key, when `moduleKey` is set.  *  Gadgets from a list of URIs, when `uri` is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {Number} dashboardId The ID of the dashboard.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [moduleKey] The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.
     * @param {Array.<String>} [uri] The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.
     * @param {Array.<Number>} [gadgetId] The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.
     * @param {module:api/DashboardsApi~getAllGadgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardGadgetResponse}
     */
    getAllGadgets(dashboardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling getAllGadgets");
      }

      let pathParams = {
        'dashboardId': dashboardId
      };
      let queryParams = {
        'moduleKey': this.apiClient.buildCollectionParam(opts['moduleKey'], 'multi'),
        'uri': this.apiClient.buildCollectionParam(opts['uri'], 'multi'),
        'gadgetId': this.apiClient.buildCollectionParam(opts['gadgetId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardGadgetResponse;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/gadget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboard operation.
     * @callback module:api/DashboardsApi~getDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard
     * Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @param {String} id The ID of the dashboard.
     * @param {module:api/DashboardsApi~getDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    getDashboard(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDashboard");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardItemProperty operation.
     * @callback module:api/DashboardsApi~getDashboardItemPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard item property
     * Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {String} propertyKey The key of the dashboard item property.
     * @param {module:api/DashboardsApi~getDashboardItemPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityProperty}
     */
    getDashboardItemProperty(dashboardId, itemId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling getDashboardItemProperty");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getDashboardItemProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling getDashboardItemProperty");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityProperty;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardItemPropertyKeys operation.
     * @callback module:api/DashboardsApi~getDashboardItemPropertyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard item property keys
     * Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {module:api/DashboardsApi~getDashboardItemPropertyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyKeys}
     */
    getDashboardItemPropertyKeys(dashboardId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling getDashboardItemPropertyKeys");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getDashboardItemPropertyKeys");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyKeys;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsPaginated operation.
     * @callback module:api/DashboardsApi~getDashboardsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanDashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for dashboards
     * Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.
     * @param {Object} opts Optional parameters
     * @param {String} [dashboardName] String used to perform a case-insensitive partial match with `name`.
     * @param {String} [accountId] User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.
     * @param {String} [owner] This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.
     * @param {String} [groupname] As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.
     * @param {String} [groupId] Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
     * @param {Number} [projectId] Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.
     * @param {module:model/String} [orderBy = 'name')] [Order](#ordering) the results by a field:   *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.  *  `favourite_count` Sorts by dashboard popularity.  *  `id` Sorts by dashboard ID.  *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.  *  `name` Sorts by dashboard name.  *  `owner` Sorts by dashboard owner name.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:model/String} [status = 'active')] The status to filter by. It may be active, archived or deleted.
     * @param {String} [expand] Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:   *  `description` Returns the description of the dashboard.  *  `owner` Returns the owner of the dashboard.  *  `viewUrl` Returns the URL that is used to view the dashboard.  *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.  *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.  *  `sharePermissions` Returns details of the share permissions defined for the dashboard.  *  `editPermissions` Returns details of the edit permissions defined for the dashboard.  *  `isWritable` Returns whether the current user has permission to edit the dashboard.
     * @param {module:api/DashboardsApi~getDashboardsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanDashboard}
     */
    getDashboardsPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'dashboardName': opts['dashboardName'],
        'accountId': opts['accountId'],
        'owner': opts['owner'],
        'groupname': opts['groupname'],
        'groupId': opts['groupId'],
        'projectId': opts['projectId'],
        'orderBy': opts['orderBy'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'status': opts['status'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanDashboard;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGadget operation.
     * @callback module:api/DashboardsApi~removeGadgetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove gadget from dashboard
     * Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](#permissions) required:** None.
     * @param {Number} dashboardId The ID of the dashboard.
     * @param {Number} gadgetId The ID of the gadget.
     * @param {module:api/DashboardsApi~removeGadgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeGadget(dashboardId, gadgetId, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling removeGadget");
      }
      // verify the required parameter 'gadgetId' is set
      if (gadgetId === undefined || gadgetId === null) {
        throw new Error("Missing the required parameter 'gadgetId' when calling removeGadget");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'gadgetId': gadgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDashboardItemProperty operation.
     * @callback module:api/DashboardsApi~setDashboardItemPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set dashboard item property
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {String} propertyKey The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \"config\", the request body's JSON must be an object with all keys and values as strings.
     * @param {Object} body 
     * @param {module:api/DashboardsApi~setDashboardItemPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setDashboardItemProperty(dashboardId, itemId, propertyKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling setDashboardItemProperty");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling setDashboardItemProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling setDashboardItemProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setDashboardItemProperty");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboard operation.
     * @callback module:api/DashboardsApi~updateDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update dashboard
     * Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](#permissions) required:** None  The dashboard to be updated must be owned by the user.
     * @param {String} id The ID of the dashboard to update.
     * @param {module:model/DashboardDetails} dashboardDetails Replacement dashboard details.
     * @param {module:api/DashboardsApi~updateDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    updateDashboard(id, dashboardDetails, callback) {
      let postBody = dashboardDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDashboard");
      }
      // verify the required parameter 'dashboardDetails' is set
      if (dashboardDetails === undefined || dashboardDetails === null) {
        throw new Error("Missing the required parameter 'dashboardDetails' when calling updateDashboard");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGadget operation.
     * @callback module:api/DashboardsApi~updateGadgetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update gadget on dashboard
     * Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](#permissions) required:** None.
     * @param {Number} dashboardId The ID of the dashboard.
     * @param {Number} gadgetId The ID of the gadget.
     * @param {module:model/DashboardGadgetUpdateRequest} dashboardGadgetUpdateRequest 
     * @param {module:api/DashboardsApi~updateGadgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateGadget(dashboardId, gadgetId, dashboardGadgetUpdateRequest, callback) {
      let postBody = dashboardGadgetUpdateRequest;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling updateGadget");
      }
      // verify the required parameter 'gadgetId' is set
      if (gadgetId === undefined || gadgetId === null) {
        throw new Error("Missing the required parameter 'gadgetId' when calling updateGadget");
      }
      // verify the required parameter 'dashboardGadgetUpdateRequest' is set
      if (dashboardGadgetUpdateRequest === undefined || dashboardGadgetUpdateRequest === null) {
        throw new Error("Missing the required parameter 'dashboardGadgetUpdateRequest' when calling updateGadget");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'gadgetId': gadgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
