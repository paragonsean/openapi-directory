/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateFieldConfigurationsWithIssueTypesRequest from '../model/AssociateFieldConfigurationsWithIssueTypesRequest';
import ErrorCollection from '../model/ErrorCollection';
import FieldConfiguration from '../model/FieldConfiguration';
import FieldConfigurationDetails from '../model/FieldConfigurationDetails';
import FieldConfigurationItemsDetails from '../model/FieldConfigurationItemsDetails';
import FieldConfigurationScheme from '../model/FieldConfigurationScheme';
import FieldConfigurationSchemeProjectAssociation from '../model/FieldConfigurationSchemeProjectAssociation';
import IssueTypeIdsToRemove from '../model/IssueTypeIdsToRemove';
import PageBeanFieldConfigurationDetails from '../model/PageBeanFieldConfigurationDetails';
import PageBeanFieldConfigurationIssueTypeItem from '../model/PageBeanFieldConfigurationIssueTypeItem';
import PageBeanFieldConfigurationItem from '../model/PageBeanFieldConfigurationItem';
import PageBeanFieldConfigurationScheme from '../model/PageBeanFieldConfigurationScheme';
import PageBeanFieldConfigurationSchemeProjects from '../model/PageBeanFieldConfigurationSchemeProjects';
import UpdateFieldConfigurationSchemeDetails from '../model/UpdateFieldConfigurationSchemeDetails';

/**
* IssueFieldConfigurations service.
* @module api/IssueFieldConfigurationsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueFieldConfigurationsApi {

    /**
    * Constructs a new IssueFieldConfigurationsApi. 
    * @alias module:api/IssueFieldConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignFieldConfigurationSchemeToProject operation.
     * @callback module:api/IssueFieldConfigurationsApi~assignFieldConfigurationSchemeToProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign field configuration scheme to project
     * Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.  Field configuration schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/FieldConfigurationSchemeProjectAssociation} fieldConfigurationSchemeProjectAssociation 
     * @param {module:api/IssueFieldConfigurationsApi~assignFieldConfigurationSchemeToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignFieldConfigurationSchemeToProject(fieldConfigurationSchemeProjectAssociation, callback) {
      let postBody = fieldConfigurationSchemeProjectAssociation;
      // verify the required parameter 'fieldConfigurationSchemeProjectAssociation' is set
      if (fieldConfigurationSchemeProjectAssociation === undefined || fieldConfigurationSchemeProjectAssociation === null) {
        throw new Error("Missing the required parameter 'fieldConfigurationSchemeProjectAssociation' when calling assignFieldConfigurationSchemeToProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldConfiguration operation.
     * @callback module:api/IssueFieldConfigurationsApi~createFieldConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create field configuration
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.  This operation can only create configurations for use in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/FieldConfigurationDetails} fieldConfigurationDetails 
     * @param {module:api/IssueFieldConfigurationsApi~createFieldConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldConfiguration}
     */
    createFieldConfiguration(fieldConfigurationDetails, callback) {
      let postBody = fieldConfigurationDetails;
      // verify the required parameter 'fieldConfigurationDetails' is set
      if (fieldConfigurationDetails === undefined || fieldConfigurationDetails === null) {
        throw new Error("Missing the required parameter 'fieldConfigurationDetails' when calling createFieldConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldConfiguration;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldConfigurationScheme operation.
     * @callback module:api/IssueFieldConfigurationsApi~createFieldConfigurationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldConfigurationScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create field configuration scheme
     * Creates a field configuration scheme.  This operation can only create field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/UpdateFieldConfigurationSchemeDetails} updateFieldConfigurationSchemeDetails The details of the field configuration scheme.
     * @param {module:api/IssueFieldConfigurationsApi~createFieldConfigurationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldConfigurationScheme}
     */
    createFieldConfigurationScheme(updateFieldConfigurationSchemeDetails, callback) {
      let postBody = updateFieldConfigurationSchemeDetails;
      // verify the required parameter 'updateFieldConfigurationSchemeDetails' is set
      if (updateFieldConfigurationSchemeDetails === undefined || updateFieldConfigurationSchemeDetails === null) {
        throw new Error("Missing the required parameter 'updateFieldConfigurationSchemeDetails' when calling createFieldConfigurationScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldConfigurationScheme;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldConfiguration operation.
     * @callback module:api/IssueFieldConfigurationsApi~deleteFieldConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete field configuration
     * Deletes a field configuration.  This operation can only delete configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration.
     * @param {module:api/IssueFieldConfigurationsApi~deleteFieldConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFieldConfiguration(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFieldConfiguration");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfiguration/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldConfigurationScheme operation.
     * @callback module:api/IssueFieldConfigurationsApi~deleteFieldConfigurationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete field configuration scheme
     * Deletes a field configuration scheme.  This operation can only delete field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration scheme.
     * @param {module:api/IssueFieldConfigurationsApi~deleteFieldConfigurationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFieldConfigurationScheme(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFieldConfigurationScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFieldConfigurationSchemes operation.
     * @callback module:api/IssueFieldConfigurationsApi~getAllFieldConfigurationSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanFieldConfigurationScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all field configuration schemes
     * Returns a [paginated](#pagination) list of field configuration schemes.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [id] The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param {module:api/IssueFieldConfigurationsApi~getAllFieldConfigurationSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanFieldConfigurationScheme}
     */
    getAllFieldConfigurationSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanFieldConfigurationScheme;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFieldConfigurations operation.
     * @callback module:api/IssueFieldConfigurationsApi~getAllFieldConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanFieldConfigurationDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all field configurations
     * Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:   *  a list of field configuration item IDs.  *  whether the field configuration is a default.  *  whether the field configuration name or description contains a query string.  Only field configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [id] The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param {Boolean} [isDefault = false)] If *true* returns default field configurations only.
     * @param {String} [query = '')] The query string used to match against field configuration names and descriptions.
     * @param {module:api/IssueFieldConfigurationsApi~getAllFieldConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanFieldConfigurationDetails}
     */
    getAllFieldConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'isDefault': opts['isDefault'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanFieldConfigurationDetails;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldConfigurationItems operation.
     * @callback module:api/IssueFieldConfigurationsApi~getFieldConfigurationItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanFieldConfigurationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get field configuration items
     * Returns a [paginated](#pagination) list of all fields for a configuration.  Only the fields from configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueFieldConfigurationsApi~getFieldConfigurationItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanFieldConfigurationItem}
     */
    getFieldConfigurationItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldConfigurationItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanFieldConfigurationItem;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfiguration/{id}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldConfigurationSchemeMappings operation.
     * @callback module:api/IssueFieldConfigurationsApi~getFieldConfigurationSchemeMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanFieldConfigurationIssueTypeItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get field configuration issue type items
     * Returns a [paginated](#pagination) list of field configuration issue type items.  Only items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [fieldConfigurationSchemeId] The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.
     * @param {module:api/IssueFieldConfigurationsApi~getFieldConfigurationSchemeMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanFieldConfigurationIssueTypeItem}
     */
    getFieldConfigurationSchemeMappings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'fieldConfigurationSchemeId': this.apiClient.buildCollectionParam(opts['fieldConfigurationSchemeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanFieldConfigurationIssueTypeItem;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/mapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldConfigurationSchemeProjectMapping operation.
     * @callback module:api/IssueFieldConfigurationsApi~getFieldConfigurationSchemeProjectMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanFieldConfigurationSchemeProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get field configuration schemes for projects
     * Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.  The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Array.<Number>} projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueFieldConfigurationsApi~getFieldConfigurationSchemeProjectMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanFieldConfigurationSchemeProjects}
     */
    getFieldConfigurationSchemeProjectMapping(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFieldConfigurationSchemeProjectMapping");
      }

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': this.apiClient.buildCollectionParam(projectId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanFieldConfigurationSchemeProjects;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeIssueTypesFromGlobalFieldConfigurationScheme operation.
     * @callback module:api/IssueFieldConfigurationsApi~removeIssueTypesFromGlobalFieldConfigurationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove issue types from field configuration scheme
     * Removes issue types from the field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration scheme.
     * @param {module:model/IssueTypeIdsToRemove} issueTypeIdsToRemove The issue type IDs to remove.
     * @param {module:api/IssueFieldConfigurationsApi~removeIssueTypesFromGlobalFieldConfigurationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeIssueTypesFromGlobalFieldConfigurationScheme(id, issueTypeIdsToRemove, callback) {
      let postBody = issueTypeIdsToRemove;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeIssueTypesFromGlobalFieldConfigurationScheme");
      }
      // verify the required parameter 'issueTypeIdsToRemove' is set
      if (issueTypeIdsToRemove === undefined || issueTypeIdsToRemove === null) {
        throw new Error("Missing the required parameter 'issueTypeIdsToRemove' when calling removeIssueTypesFromGlobalFieldConfigurationScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setFieldConfigurationSchemeMapping operation.
     * @callback module:api/IssueFieldConfigurationsApi~setFieldConfigurationSchemeMappingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign issue types to field configurations
     * Assigns issue types to field configurations on field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration scheme.
     * @param {module:model/AssociateFieldConfigurationsWithIssueTypesRequest} associateFieldConfigurationsWithIssueTypesRequest 
     * @param {module:api/IssueFieldConfigurationsApi~setFieldConfigurationSchemeMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setFieldConfigurationSchemeMapping(id, associateFieldConfigurationsWithIssueTypesRequest, callback) {
      let postBody = associateFieldConfigurationsWithIssueTypesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setFieldConfigurationSchemeMapping");
      }
      // verify the required parameter 'associateFieldConfigurationsWithIssueTypesRequest' is set
      if (associateFieldConfigurationsWithIssueTypesRequest === undefined || associateFieldConfigurationsWithIssueTypesRequest === null) {
        throw new Error("Missing the required parameter 'associateFieldConfigurationsWithIssueTypesRequest' when calling setFieldConfigurationSchemeMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/{id}/mapping', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldConfiguration operation.
     * @callback module:api/IssueFieldConfigurationsApi~updateFieldConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field configuration
     * Updates a field configuration. The name and the description provided in the request override the existing values.  This operation can only update configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration.
     * @param {module:model/FieldConfigurationDetails} fieldConfigurationDetails 
     * @param {module:api/IssueFieldConfigurationsApi~updateFieldConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateFieldConfiguration(id, fieldConfigurationDetails, callback) {
      let postBody = fieldConfigurationDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFieldConfiguration");
      }
      // verify the required parameter 'fieldConfigurationDetails' is set
      if (fieldConfigurationDetails === undefined || fieldConfigurationDetails === null) {
        throw new Error("Missing the required parameter 'fieldConfigurationDetails' when calling updateFieldConfiguration");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfiguration/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldConfigurationItems operation.
     * @callback module:api/IssueFieldConfigurationsApi~updateFieldConfigurationItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field configuration items
     * Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.  This operation can only update field configurations used in company-managed (classic) projects.  The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration.
     * @param {module:model/FieldConfigurationItemsDetails} fieldConfigurationItemsDetails 
     * @param {module:api/IssueFieldConfigurationsApi~updateFieldConfigurationItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateFieldConfigurationItems(id, fieldConfigurationItemsDetails, callback) {
      let postBody = fieldConfigurationItemsDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFieldConfigurationItems");
      }
      // verify the required parameter 'fieldConfigurationItemsDetails' is set
      if (fieldConfigurationItemsDetails === undefined || fieldConfigurationItemsDetails === null) {
        throw new Error("Missing the required parameter 'fieldConfigurationItemsDetails' when calling updateFieldConfigurationItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfiguration/{id}/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldConfigurationScheme operation.
     * @callback module:api/IssueFieldConfigurationsApi~updateFieldConfigurationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field configuration scheme
     * Updates a field configuration scheme.  This operation can only update field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the field configuration scheme.
     * @param {module:model/UpdateFieldConfigurationSchemeDetails} updateFieldConfigurationSchemeDetails The details of the field configuration scheme.
     * @param {module:api/IssueFieldConfigurationsApi~updateFieldConfigurationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateFieldConfigurationScheme(id, updateFieldConfigurationSchemeDetails, callback) {
      let postBody = updateFieldConfigurationSchemeDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFieldConfigurationScheme");
      }
      // verify the required parameter 'updateFieldConfigurationSchemeDetails' is set
      if (updateFieldConfigurationSchemeDetails === undefined || updateFieldConfigurationSchemeDetails === null) {
        throw new Error("Missing the required parameter 'updateFieldConfigurationSchemeDetails' when calling updateFieldConfigurationScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/fieldconfigurationscheme/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
