/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActorInputBean from '../model/ActorInputBean';
import ActorsMap from '../model/ActorsMap';
import ProjectRole from '../model/ProjectRole';
import ProjectRoleActorsUpdateBean from '../model/ProjectRoleActorsUpdateBean';

/**
* ProjectRoleActors service.
* @module api/ProjectRoleActorsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectRoleActorsApi {

    /**
    * Constructs a new ProjectRoleActorsApi. 
    * @alias module:api/ProjectRoleActorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addActorUsers operation.
     * @callback module:api/ProjectRoleActorsApi~addActorUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add actors to project role
     * Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:model/ActorsMap} actorsMap The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.
     * @param {module:api/ProjectRoleActorsApi~addActorUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    addActorUsers(projectIdOrKey, id, actorsMap, callback) {
      let postBody = actorsMap;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling addActorUsers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addActorUsers");
      }
      // verify the required parameter 'actorsMap' is set
      if (actorsMap === undefined || actorsMap === null) {
        throw new Error("Missing the required parameter 'actorsMap' when calling addActorUsers");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/role/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addProjectRoleActorsToRole operation.
     * @callback module:api/ProjectRoleActorsApi~addProjectRoleActorsToRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add default actors to project role
     * Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role's default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:model/ActorInputBean} actorInputBean 
     * @param {module:api/ProjectRoleActorsApi~addProjectRoleActorsToRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    addProjectRoleActorsToRole(id, actorInputBean, callback) {
      let postBody = actorInputBean;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addProjectRoleActorsToRole");
      }
      // verify the required parameter 'actorInputBean' is set
      if (actorInputBean === undefined || actorInputBean === null) {
        throw new Error("Missing the required parameter 'actorInputBean' when calling addProjectRoleActorsToRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/rest/api/3/role/{id}/actors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActor operation.
     * @callback module:api/ProjectRoleActorsApi~deleteActorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete actors from project role
     * Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [user] The user account ID of the user to remove from the project role.
     * @param {String} [group] The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
     * @param {String} [groupId] The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.
     * @param {module:api/ProjectRoleActorsApi~deleteActorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteActor(projectIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling deleteActor");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActor");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
        'user': opts['user'],
        'group': opts['group'],
        'groupId': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectRoleActorsFromRole operation.
     * @callback module:api/ProjectRoleActorsApi~deleteProjectRoleActorsFromRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete default actors from project role
     * Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role's default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [user] The user account ID of the user to remove as a default actor.
     * @param {String} [groupId] The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.
     * @param {String} [group] The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
     * @param {module:api/ProjectRoleActorsApi~deleteProjectRoleActorsFromRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    deleteProjectRoleActorsFromRole(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectRoleActorsFromRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'user': opts['user'],
        'groupId': opts['groupId'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/rest/api/3/role/{id}/actors', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectRoleActorsForRole operation.
     * @callback module:api/ProjectRoleActorsApi~getProjectRoleActorsForRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default actors for project role
     * Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:api/ProjectRoleActorsApi~getProjectRoleActorsForRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    getProjectRoleActorsForRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectRoleActorsForRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/rest/api/3/role/{id}/actors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setActors operation.
     * @callback module:api/ProjectRoleActorsApi~setActorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set actors for project role
     * Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:model/ProjectRoleActorsUpdateBean} projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.
     * @param {module:api/ProjectRoleActorsApi~setActorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    setActors(projectIdOrKey, id, projectRoleActorsUpdateBean, callback) {
      let postBody = projectRoleActorsUpdateBean;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling setActors");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setActors");
      }
      // verify the required parameter 'projectRoleActorsUpdateBean' is set
      if (projectRoleActorsUpdateBean === undefined || projectRoleActorsUpdateBean === null) {
        throw new Error("Missing the required parameter 'projectRoleActorsUpdateBean' when calling setActors");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/role/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
