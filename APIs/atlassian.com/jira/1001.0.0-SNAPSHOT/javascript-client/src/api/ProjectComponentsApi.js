/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComponentIssuesCount from '../model/ComponentIssuesCount';
import PageBeanComponentWithIssueCount from '../model/PageBeanComponentWithIssueCount';
import ProjectComponent from '../model/ProjectComponent';

/**
* ProjectComponents service.
* @module api/ProjectComponentsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectComponentsApi {

    /**
    * Constructs a new ProjectComponentsApi. 
    * @alias module:api/ProjectComponentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComponent operation.
     * @callback module:api/ProjectComponentsApi~createComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create component
     * Creates a component. Use components to provide containers for issues within a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/ProjectComponent} projectComponent 
     * @param {module:api/ProjectComponentsApi~createComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectComponent}
     */
    createComponent(projectComponent, callback) {
      let postBody = projectComponent;
      // verify the required parameter 'projectComponent' is set
      if (projectComponent === undefined || projectComponent === null) {
        throw new Error("Missing the required parameter 'projectComponent' when calling createComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectComponent;
      return this.apiClient.callApi(
        '/rest/api/3/component', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComponent operation.
     * @callback module:api/ProjectComponentsApi~deleteComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete component
     * Deletes a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the component.
     * @param {Object} opts Optional parameters
     * @param {String} [moveIssuesTo] The ID of the component to replace the deleted component. If this value is null no replacement is made.
     * @param {module:api/ProjectComponentsApi~deleteComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComponent(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComponent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'moveIssuesTo': opts['moveIssuesTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/component/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponent operation.
     * @callback module:api/ProjectComponentsApi~getComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get component
     * Returns a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
     * @param {String} id The ID of the component.
     * @param {module:api/ProjectComponentsApi~getComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectComponent}
     */
    getComponent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComponent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectComponent;
      return this.apiClient.callApi(
        '/rest/api/3/component/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponentRelatedIssues operation.
     * @callback module:api/ProjectComponentsApi~getComponentRelatedIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComponentIssuesCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get component issues count
     * Returns the counts of issues assigned to the component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {String} id The ID of the component.
     * @param {module:api/ProjectComponentsApi~getComponentRelatedIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComponentIssuesCount}
     */
    getComponentRelatedIssues(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComponentRelatedIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComponentIssuesCount;
      return this.apiClient.callApi(
        '/rest/api/3/component/{id}/relatedIssueCounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectComponents operation.
     * @callback module:api/ProjectComponentsApi~getProjectComponentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectComponent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project components
     * Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/ProjectComponentsApi~getProjectComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectComponent>}
     */
    getProjectComponents(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getProjectComponents");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectComponent];
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectComponentsPaginated operation.
     * @callback module:api/ProjectComponentsApi~getProjectComponentsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanComponentWithIssueCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project components paginated
     * Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:model/String} [orderBy] [Order](#ordering) the results by a field:   *  `description` Sorts by the component description.  *  `issueCount` Sorts by the count of issues associated with the component.  *  `lead` Sorts by the user key of the component's project lead.  *  `name` Sorts by component name.
     * @param {String} [query] Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
     * @param {module:api/ProjectComponentsApi~getProjectComponentsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanComponentWithIssueCount}
     */
    getProjectComponentsPaginated(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getProjectComponentsPaginated");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanComponentWithIssueCount;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/component', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComponent operation.
     * @callback module:api/ProjectComponentsApi~updateComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update component
     * Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string (\"\") the component lead is removed.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the component.
     * @param {module:model/ProjectComponent} projectComponent 
     * @param {module:api/ProjectComponentsApi~updateComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectComponent}
     */
    updateComponent(id, projectComponent, callback) {
      let postBody = projectComponent;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComponent");
      }
      // verify the required parameter 'projectComponent' is set
      if (projectComponent === undefined || projectComponent === null) {
        throw new Error("Missing the required parameter 'projectComponent' when calling updateComponent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectComponent;
      return this.apiClient.callApi(
        '/rest/api/3/component/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
