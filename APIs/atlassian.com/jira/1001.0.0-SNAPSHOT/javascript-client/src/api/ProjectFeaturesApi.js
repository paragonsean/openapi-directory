/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContainerForProjectFeatures from '../model/ContainerForProjectFeatures';
import ProjectFeatureState from '../model/ProjectFeatureState';

/**
* ProjectFeatures service.
* @module api/ProjectFeaturesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectFeaturesApi {

    /**
    * Constructs a new ProjectFeaturesApi. 
    * @alias module:api/ProjectFeaturesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFeaturesForProject operation.
     * @callback module:api/ProjectFeaturesApi~getFeaturesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerForProjectFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project features
     * Returns the list of features for a project.
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {module:api/ProjectFeaturesApi~getFeaturesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerForProjectFeatures}
     */
    getFeaturesForProject(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getFeaturesForProject");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerForProjectFeatures;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleFeatureForProject operation.
     * @callback module:api/ProjectFeaturesApi~toggleFeatureForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerForProjectFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set project feature state
     * Sets the state of a project feature.
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {String} featureKey The key of the feature.
     * @param {module:model/ProjectFeatureState} projectFeatureState Details of the feature state change.
     * @param {module:api/ProjectFeaturesApi~toggleFeatureForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerForProjectFeatures}
     */
    toggleFeatureForProject(projectIdOrKey, featureKey, projectFeatureState, callback) {
      let postBody = projectFeatureState;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling toggleFeatureForProject");
      }
      // verify the required parameter 'featureKey' is set
      if (featureKey === undefined || featureKey === null) {
        throw new Error("Missing the required parameter 'featureKey' when calling toggleFeatureForProject");
      }
      // verify the required parameter 'projectFeatureState' is set
      if (projectFeatureState === undefined || projectFeatureState === null) {
        throw new Error("Missing the required parameter 'projectFeatureState' when calling toggleFeatureForProject");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'featureKey': featureKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContainerForProjectFeatures;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/features/{featureKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
