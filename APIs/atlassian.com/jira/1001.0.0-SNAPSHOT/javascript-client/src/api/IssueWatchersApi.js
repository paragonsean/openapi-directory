/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkIssueIsWatching from '../model/BulkIssueIsWatching';
import IssueList from '../model/IssueList';
import Watchers from '../model/Watchers';

/**
* IssueWatchers service.
* @module api/IssueWatchersApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueWatchersApi {

    /**
    * Constructs a new IssueWatchersApi. 
    * @alias module:api/IssueWatchersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addWatcher operation.
     * @callback module:api/IssueWatchersApi~addWatcherCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add watcher
     * Adds a user as a watcher of an issue by passing the account ID of the user. For example, `\"5b10ac8d82e05b22cc7d4ef5\"`. If no user is specified the calling user is added.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} body The account ID of the user. Note that username cannot be used due to privacy changes.
     * @param {module:api/IssueWatchersApi~addWatcherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addWatcher(issueIdOrKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addWatcher");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addWatcher");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/watchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIsWatchingIssueBulk operation.
     * @callback module:api/IssueWatchersApi~getIsWatchingIssueBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkIssueIsWatching} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get is watching issue bulk
     * Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {module:model/IssueList} issueList A list of issue IDs.
     * @param {module:api/IssueWatchersApi~getIsWatchingIssueBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkIssueIsWatching}
     */
    getIsWatchingIssueBulk(issueList, callback) {
      let postBody = issueList;
      // verify the required parameter 'issueList' is set
      if (issueList === undefined || issueList === null) {
        throw new Error("Missing the required parameter 'issueList' when calling getIsWatchingIssueBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkIssueIsWatching;
      return this.apiClient.callApi(
        '/rest/api/3/issue/watching', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueWatchers operation.
     * @callback module:api/IssueWatchersApi~getIssueWatchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Watchers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue watchers
     * Returns the watchers for an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:api/IssueWatchersApi~getIssueWatchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Watchers}
     */
    getIssueWatchers(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssueWatchers");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Watchers;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/watchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWatcher operation.
     * @callback module:api/IssueWatchersApi~removeWatcherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete watcher
     * Deletes a user as a watcher of an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} [username] This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param {String} [accountId] The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
     * @param {module:api/IssueWatchersApi~removeWatcherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeWatcher(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling removeWatcher");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'username': opts['username'],
        'accountId': opts['accountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/watchers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
