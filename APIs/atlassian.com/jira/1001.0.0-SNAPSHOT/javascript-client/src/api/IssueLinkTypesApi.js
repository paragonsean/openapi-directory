/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueLinkType from '../model/IssueLinkType';
import IssueLinkTypes from '../model/IssueLinkTypes';

/**
* IssueLinkTypes service.
* @module api/IssueLinkTypesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueLinkTypesApi {

    /**
    * Constructs a new IssueLinkTypesApi. 
    * @alias module:api/IssueLinkTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIssueLinkType operation.
     * @callback module:api/IssueLinkTypesApi~createIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue link type
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/IssueLinkType} issueLinkType 
     * @param {module:api/IssueLinkTypesApi~createIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkType}
     */
    createIssueLinkType(issueLinkType, callback) {
      let postBody = issueLinkType;
      // verify the required parameter 'issueLinkType' is set
      if (issueLinkType === undefined || issueLinkType === null) {
        throw new Error("Missing the required parameter 'issueLinkType' when calling createIssueLinkType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueLinkType;
      return this.apiClient.callApi(
        '/rest/api/3/issueLinkType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueLinkType operation.
     * @callback module:api/IssueLinkTypesApi~deleteIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue link type
     * Deletes an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:api/IssueLinkTypesApi~deleteIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssueLinkType(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling deleteIssueLinkType");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issueLinkType/{issueLinkTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueLinkType operation.
     * @callback module:api/IssueLinkTypesApi~getIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue link type
     * Returns an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:api/IssueLinkTypesApi~getIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkType}
     */
    getIssueLinkType(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling getIssueLinkType");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueLinkType;
      return this.apiClient.callApi(
        '/rest/api/3/issueLinkType/{issueLinkTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueLinkTypes operation.
     * @callback module:api/IssueLinkTypesApi~getIssueLinkTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkTypes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue link types
     * Returns a list of all issue link types.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @param {module:api/IssueLinkTypesApi~getIssueLinkTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkTypes}
     */
    getIssueLinkTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueLinkTypes;
      return this.apiClient.callApi(
        '/rest/api/3/issueLinkType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueLinkType operation.
     * @callback module:api/IssueLinkTypesApi~updateIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue link type
     * Updates an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:model/IssueLinkType} issueLinkType 
     * @param {module:api/IssueLinkTypesApi~updateIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkType}
     */
    updateIssueLinkType(issueLinkTypeId, issueLinkType, callback) {
      let postBody = issueLinkType;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling updateIssueLinkType");
      }
      // verify the required parameter 'issueLinkType' is set
      if (issueLinkType === undefined || issueLinkType === null) {
        throw new Error("Missing the required parameter 'issueLinkType' when calling updateIssueLinkType");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueLinkType;
      return this.apiClient.callApi(
        '/rest/api/3/issueLinkType/{issueLinkTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
