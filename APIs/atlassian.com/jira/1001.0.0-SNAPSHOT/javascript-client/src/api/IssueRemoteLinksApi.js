/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemoteIssueLink from '../model/RemoteIssueLink';
import RemoteIssueLinkIdentifies from '../model/RemoteIssueLinkIdentifies';
import RemoteIssueLinkRequest from '../model/RemoteIssueLinkRequest';

/**
* IssueRemoteLinks service.
* @module api/IssueRemoteLinksApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueRemoteLinksApi {

    /**
    * Constructs a new IssueRemoteLinksApi. 
    * @alias module:api/IssueRemoteLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrUpdateRemoteIssueLink operation.
     * @callback module:api/IssueRemoteLinksApi~createOrUpdateRemoteIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteIssueLinkIdentifies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update remote issue link
     * Creates or updates a remote issue link for an issue.  If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:model/RemoteIssueLinkRequest} remoteIssueLinkRequest 
     * @param {module:api/IssueRemoteLinksApi~createOrUpdateRemoteIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteIssueLinkIdentifies}
     */
    createOrUpdateRemoteIssueLink(issueIdOrKey, remoteIssueLinkRequest, callback) {
      let postBody = remoteIssueLinkRequest;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling createOrUpdateRemoteIssueLink");
      }
      // verify the required parameter 'remoteIssueLinkRequest' is set
      if (remoteIssueLinkRequest === undefined || remoteIssueLinkRequest === null) {
        throw new Error("Missing the required parameter 'remoteIssueLinkRequest' when calling createOrUpdateRemoteIssueLink");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoteIssueLinkIdentifies;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/remotelink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteIssueLinkByGlobalId operation.
     * @callback module:api/IssueRemoteLinksApi~deleteRemoteIssueLinkByGlobalIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete remote issue link by global ID
     * Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} globalId The global ID of a remote issue link.
     * @param {module:api/IssueRemoteLinksApi~deleteRemoteIssueLinkByGlobalIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteIssueLinkByGlobalId(issueIdOrKey, globalId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteRemoteIssueLinkByGlobalId");
      }
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling deleteRemoteIssueLinkByGlobalId");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': globalId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/remotelink', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteIssueLinkById operation.
     * @callback module:api/IssueRemoteLinksApi~deleteRemoteIssueLinkByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete remote issue link by ID
     * Deletes a remote issue link from an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of a remote issue link.
     * @param {module:api/IssueRemoteLinksApi~deleteRemoteIssueLinkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteIssueLinkById(issueIdOrKey, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteRemoteIssueLinkById");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling deleteRemoteIssueLinkById");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteIssueLinkById operation.
     * @callback module:api/IssueRemoteLinksApi~getRemoteIssueLinkByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteIssueLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get remote issue link by ID
     * Returns a remote issue link for an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of the remote issue link.
     * @param {module:api/IssueRemoteLinksApi~getRemoteIssueLinkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteIssueLink}
     */
    getRemoteIssueLinkById(issueIdOrKey, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getRemoteIssueLinkById");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling getRemoteIssueLinkById");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteIssueLink;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteIssueLinks operation.
     * @callback module:api/IssueRemoteLinksApi~getRemoteIssueLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteIssueLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get remote issue links
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} [globalId] The global ID of the remote issue link.
     * @param {module:api/IssueRemoteLinksApi~getRemoteIssueLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteIssueLink}
     */
    getRemoteIssueLinks(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getRemoteIssueLinks");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteIssueLink;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRemoteIssueLink operation.
     * @callback module:api/IssueRemoteLinksApi~updateRemoteIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update remote issue link by ID
     * Updates a remote issue link for an issue.  Note: Fields without values in the request are set to null.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of the remote issue link.
     * @param {module:model/RemoteIssueLinkRequest} remoteIssueLinkRequest 
     * @param {module:api/IssueRemoteLinksApi~updateRemoteIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateRemoteIssueLink(issueIdOrKey, linkId, remoteIssueLinkRequest, callback) {
      let postBody = remoteIssueLinkRequest;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling updateRemoteIssueLink");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling updateRemoteIssueLink");
      }
      // verify the required parameter 'remoteIssueLinkRequest' is set
      if (remoteIssueLinkRequest === undefined || remoteIssueLinkRequest === null) {
        throw new Error("Missing the required parameter 'remoteIssueLinkRequest' when calling updateRemoteIssueLink");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
