/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityProperty from '../model/EntityProperty';
import PropertyKeys from '../model/PropertyKeys';

/**
* IssueTypeProperties service.
* @module api/IssueTypePropertiesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueTypePropertiesApi {

    /**
    * Constructs a new IssueTypePropertiesApi. 
    * @alias module:api/IssueTypePropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteIssueTypeProperty operation.
     * @callback module:api/IssueTypePropertiesApi~deleteIssueTypePropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue type property
     * Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeId The ID of the issue type.
     * @param {String} propertyKey The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
     * @param {module:api/IssueTypePropertiesApi~deleteIssueTypePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssueTypeProperty(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling deleteIssueTypeProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling deleteIssueTypeProperty");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeProperty operation.
     * @callback module:api/IssueTypePropertiesApi~getIssueTypePropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type property
     * Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
     * @param {String} issueTypeId The ID of the issue type.
     * @param {String} propertyKey The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
     * @param {module:api/IssueTypePropertiesApi~getIssueTypePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityProperty}
     */
    getIssueTypeProperty(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling getIssueTypeProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling getIssueTypeProperty");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityProperty;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypePropertyKeys operation.
     * @callback module:api/IssueTypePropertiesApi~getIssueTypePropertyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type property keys
     * Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
     * @param {String} issueTypeId The ID of the issue type.
     * @param {module:api/IssueTypePropertiesApi~getIssueTypePropertyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyKeys}
     */
    getIssueTypePropertyKeys(issueTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling getIssueTypePropertyKeys");
      }

      let pathParams = {
        'issueTypeId': issueTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyKeys;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{issueTypeId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIssueTypeProperty operation.
     * @callback module:api/IssueTypePropertiesApi~setIssueTypePropertyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set issue type property
     * Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} issueTypeId The ID of the issue type.
     * @param {String} propertyKey The key of the issue type property. The maximum length is 255 characters.
     * @param {Object} body 
     * @param {module:api/IssueTypePropertiesApi~setIssueTypePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setIssueTypeProperty(issueTypeId, propertyKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling setIssueTypeProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling setIssueTypeProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setIssueTypeProperty");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
