/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FoundUsersAndGroups from '../model/FoundUsersAndGroups';

/**
* GroupAndUserPicker service.
* @module api/GroupAndUserPickerApi
* @version 1001.0.0-SNAPSHOT
*/
export default class GroupAndUserPickerApi {

    /**
    * Constructs a new GroupAndUserPickerApi. 
    * @alias module:api/GroupAndUserPickerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findUsersAndGroups operation.
     * @callback module:api/GroupAndUserPickerApi~findUsersAndGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FoundUsersAndGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users and groups
     * Returns a list of users and groups matching a string. The string is used:   *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.  *  for groups, to find a case-sensitive match with group name.  For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.  Optionally, the search can be refined to:   *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:           *  projects.      *  issue types.          If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.  *  not return Connect app users and groups.  *  return groups that have a case-insensitive match with the query.  The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
     * @param {String} query The search string.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 50)] The maximum number of items to return in each list.
     * @param {Boolean} [showAvatar = false)] Whether the user avatar should be returned. If an invalid value is provided, the default value is used.
     * @param {String} [fieldId] The custom field ID of the field this request is for.
     * @param {Array.<String>} [projectId] The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.
     * @param {Array.<String>} [issueTypeId] The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.
     * @param {module:model/String} [avatarSize = 'xsmall')] The size of the avatar to return. If an invalid value is provided, the default value is used.
     * @param {Boolean} [caseInsensitive = false)] Whether the search for groups should be case insensitive.
     * @param {Boolean} [excludeConnectAddons = false)] Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
     * @param {module:api/GroupAndUserPickerApi~findUsersAndGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FoundUsersAndGroups}
     */
    findUsersAndGroups(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling findUsersAndGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'maxResults': opts['maxResults'],
        'showAvatar': opts['showAvatar'],
        'fieldId': opts['fieldId'],
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'multi'),
        'issueTypeId': this.apiClient.buildCollectionParam(opts['issueTypeId'], 'multi'),
        'avatarSize': opts['avatarSize'],
        'caseInsensitive': opts['caseInsensitive'],
        'excludeConnectAddons': opts['excludeConnectAddons']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FoundUsersAndGroups;
      return this.apiClient.callApi(
        '/rest/api/3/groupuserpicker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
