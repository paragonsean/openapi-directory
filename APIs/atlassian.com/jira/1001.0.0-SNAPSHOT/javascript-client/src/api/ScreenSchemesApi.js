/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageBeanScreenScheme from '../model/PageBeanScreenScheme';
import ScreenSchemeDetails from '../model/ScreenSchemeDetails';
import ScreenSchemeId from '../model/ScreenSchemeId';
import UpdateScreenSchemeDetails from '../model/UpdateScreenSchemeDetails';

/**
* ScreenSchemes service.
* @module api/ScreenSchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ScreenSchemesApi {

    /**
    * Constructs a new ScreenSchemesApi. 
    * @alias module:api/ScreenSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createScreenScheme operation.
     * @callback module:api/ScreenSchemesApi~createScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScreenSchemeId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create screen scheme
     * Creates a screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/ScreenSchemeDetails} screenSchemeDetails 
     * @param {module:api/ScreenSchemesApi~createScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScreenSchemeId}
     */
    createScreenScheme(screenSchemeDetails, callback) {
      let postBody = screenSchemeDetails;
      // verify the required parameter 'screenSchemeDetails' is set
      if (screenSchemeDetails === undefined || screenSchemeDetails === null) {
        throw new Error("Missing the required parameter 'screenSchemeDetails' when calling createScreenScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenSchemeId;
      return this.apiClient.callApi(
        '/rest/api/3/screenscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreenScheme operation.
     * @callback module:api/ScreenSchemesApi~deleteScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete screen scheme
     * Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.  Only screens schemes used in classic projects can be deleted.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} screenSchemeId The ID of the screen scheme.
     * @param {module:api/ScreenSchemesApi~deleteScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScreenScheme(screenSchemeId, callback) {
      let postBody = null;
      // verify the required parameter 'screenSchemeId' is set
      if (screenSchemeId === undefined || screenSchemeId === null) {
        throw new Error("Missing the required parameter 'screenSchemeId' when calling deleteScreenScheme");
      }

      let pathParams = {
        'screenSchemeId': screenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/screenscheme/{screenSchemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenSchemes operation.
     * @callback module:api/ScreenSchemesApi~getScreenSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanScreenScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen schemes
     * Returns a [paginated](#pagination) list of screen schemes.  Only screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 25)] The maximum number of items to return per page.
     * @param {Array.<Number>} [id] The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param {String} [expand = '')] Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.
     * @param {String} [queryString = '')] String used to perform a case-insensitive partial match with screen scheme name.
     * @param {module:model/String} [orderBy] [Order](#ordering) the results by a field:   *  `id` Sorts by screen scheme ID.  *  `name` Sorts by screen scheme name.
     * @param {module:api/ScreenSchemesApi~getScreenSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanScreenScheme}
     */
    getScreenSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'expand': opts['expand'],
        'queryString': opts['queryString'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanScreenScheme;
      return this.apiClient.callApi(
        '/rest/api/3/screenscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreenScheme operation.
     * @callback module:api/ScreenSchemesApi~updateScreenSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update screen scheme
     * Updates a screen scheme. Only screen schemes used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} screenSchemeId The ID of the screen scheme.
     * @param {module:model/UpdateScreenSchemeDetails} updateScreenSchemeDetails The screen scheme update details.
     * @param {module:api/ScreenSchemesApi~updateScreenSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateScreenScheme(screenSchemeId, updateScreenSchemeDetails, callback) {
      let postBody = updateScreenSchemeDetails;
      // verify the required parameter 'screenSchemeId' is set
      if (screenSchemeId === undefined || screenSchemeId === null) {
        throw new Error("Missing the required parameter 'screenSchemeId' when calling updateScreenScheme");
      }
      // verify the required parameter 'updateScreenSchemeDetails' is set
      if (updateScreenSchemeDetails === undefined || updateScreenSchemeDetails === null) {
        throw new Error("Missing the required parameter 'updateScreenSchemeDetails' when calling updateScreenScheme");
      }

      let pathParams = {
        'screenSchemeId': screenSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/screenscheme/{screenSchemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
