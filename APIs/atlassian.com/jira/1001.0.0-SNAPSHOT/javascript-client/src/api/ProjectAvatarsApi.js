/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Avatar from '../model/Avatar';
import ProjectAvatars from '../model/ProjectAvatars';

/**
* ProjectAvatars service.
* @module api/ProjectAvatarsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectAvatarsApi {

    /**
    * Constructs a new ProjectAvatarsApi. 
    * @alias module:api/ProjectAvatarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProjectAvatar operation.
     * @callback module:api/ProjectAvatarsApi~createProjectAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load project avatar
     * Loads an avatar for a project.  Specify the avatar's local file location in the body of the request. Also, include the following headers:   *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST `  `--user email@example.com:<api_token> `  `--header 'X-Atlassian-Token: no-check' `  `--header 'Content-Type: image/< image_type>' `  `--data-binary \"<@/path/to/file/with/your/avatar>\" `  `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {Number} [x = 0)] The X coordinate of the top-left corner of the crop region.
     * @param {Number} [y = 0)] The Y coordinate of the top-left corner of the crop region.
     * @param {Number} [size] The length of each side of the crop region.
     * @param {module:api/ProjectAvatarsApi~createProjectAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    createProjectAvatar(projectIdOrKey, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling createProjectAvatar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProjectAvatar");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'x': opts['x'],
        'y': opts['y'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/avatar2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectAvatar operation.
     * @callback module:api/ProjectAvatarsApi~deleteProjectAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project avatar
     * Deletes a custom avatar from a project. Note that system avatars cannot be deleted.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param {String} projectIdOrKey The project ID or (case-sensitive) key.
     * @param {Number} id The ID of the avatar.
     * @param {module:api/ProjectAvatarsApi~deleteProjectAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectAvatar(projectIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling deleteProjectAvatar");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectAvatar");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjectAvatars operation.
     * @callback module:api/ProjectAvatarsApi~getAllProjectAvatarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectAvatars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project avatars
     * Returns all project avatars, grouped by system and custom avatars.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {module:api/ProjectAvatarsApi~getAllProjectAvatarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectAvatars}
     */
    getAllProjectAvatars(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getAllProjectAvatars");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectAvatars;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/avatars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectAvatar operation.
     * @callback module:api/ProjectAvatarsApi~updateProjectAvatarCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set project avatar
     * Sets the avatar displayed for a project.  Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {module:model/Avatar} avatar 
     * @param {module:api/ProjectAvatarsApi~updateProjectAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateProjectAvatar(projectIdOrKey, avatar, callback) {
      let postBody = avatar;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling updateProjectAvatar");
      }
      // verify the required parameter 'avatar' is set
      if (avatar === undefined || avatar === null) {
        throw new Error("Missing the required parameter 'avatar' when calling updateProjectAvatar");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectIdOrKey}/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
