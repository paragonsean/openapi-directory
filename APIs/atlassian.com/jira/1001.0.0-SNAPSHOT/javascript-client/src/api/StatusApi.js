/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JiraStatus from '../model/JiraStatus';
import PageOfStatuses from '../model/PageOfStatuses';
import StatusCreateRequest from '../model/StatusCreateRequest';
import StatusUpdateRequest from '../model/StatusUpdateRequest';

/**
* Status service.
* @module api/StatusApi
* @version 1001.0.0-SNAPSHOT
*/
export default class StatusApi {

    /**
    * Constructs a new StatusApi. 
    * @alias module:api/StatusApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStatuses operation.
     * @callback module:api/StatusApi~createStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JiraStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create statuses
     * Creates statuses for a global or project scope.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param {module:model/StatusCreateRequest} statusCreateRequest Details of the statuses being created and their scope.
     * @param {module:api/StatusApi~createStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JiraStatus>}
     */
    createStatuses(statusCreateRequest, callback) {
      let postBody = statusCreateRequest;
      // verify the required parameter 'statusCreateRequest' is set
      if (statusCreateRequest === undefined || statusCreateRequest === null) {
        throw new Error("Missing the required parameter 'statusCreateRequest' when calling createStatuses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [JiraStatus];
      return this.apiClient.callApi(
        '/rest/api/3/statuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStatusesById operation.
     * @callback module:api/StatusApi~deleteStatusesByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk delete Statuses
     * Deletes statuses by ID.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.  Min items `1`, Max items `50`
     * @param {module:api/StatusApi~deleteStatusesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteStatusesById(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/statuses', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatusesById operation.
     * @callback module:api/StatusApi~getStatusesByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JiraStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk get statuses
     * Returns a list of the statuses specified by one or more status IDs.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `usages` Returns the project and issue types that use the status in their workflow.
     * @param {Array.<String>} [id] The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.  Min items `1`, Max items `50`
     * @param {module:api/StatusApi~getStatusesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JiraStatus>}
     */
    getStatusesById(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JiraStatus];
      return this.apiClient.callApi(
        '/rest/api/3/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/StatusApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search statuses paginated
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `usages` Returns the project and issue types that use the status in their workflow.
     * @param {String} [projectId] The project the status is part of or null for global statuses.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 200)] The maximum number of items to return per page.
     * @param {String} [searchString] Term to match status names against or null to search for all statuses in the search scope.
     * @param {String} [statusCategory] Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.
     * @param {module:api/StatusApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfStatuses}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'projectId': opts['projectId'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'searchString': opts['searchString'],
        'statusCategory': opts['statusCategory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfStatuses;
      return this.apiClient.callApi(
        '/rest/api/3/statuses/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStatuses operation.
     * @callback module:api/StatusApi~updateStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update statuses
     * Updates statuses by ID.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param {module:model/StatusUpdateRequest} statusUpdateRequest The list of statuses that will be updated.
     * @param {module:api/StatusApi~updateStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateStatuses(statusUpdateRequest, callback) {
      let postBody = statusUpdateRequest;
      // verify the required parameter 'statusUpdateRequest' is set
      if (statusUpdateRequest === undefined || statusUpdateRequest === null) {
        throw new Error("Missing the required parameter 'statusUpdateRequest' when calling updateStatuses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/statuses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
