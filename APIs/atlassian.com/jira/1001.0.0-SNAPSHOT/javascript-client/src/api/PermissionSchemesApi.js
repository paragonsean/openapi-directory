/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PermissionGrant from '../model/PermissionGrant';
import PermissionGrants from '../model/PermissionGrants';
import PermissionScheme from '../model/PermissionScheme';
import PermissionSchemes from '../model/PermissionSchemes';

/**
* PermissionSchemes service.
* @module api/PermissionSchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class PermissionSchemesApi {

    /**
    * Constructs a new PermissionSchemesApi. 
    * @alias module:api/PermissionSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPermissionGrant operation.
     * @callback module:api/PermissionSchemesApi~createPermissionGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create permission grant
     * Creates a permission grant in a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} schemeId The ID of the permission scheme in which to create a new permission grant.
     * @param {module:model/PermissionGrant} permissionGrant The permission grant to create.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `permissions` Returns all permission grants for each permission scheme.  *  `user` Returns information about the user who is granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `field` Returns information about the custom field granted the permission.  *  `all` Returns all expandable information.
     * @param {module:api/PermissionSchemesApi~createPermissionGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionGrant}
     */
    createPermissionGrant(schemeId, permissionGrant, opts, callback) {
      opts = opts || {};
      let postBody = permissionGrant;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling createPermissionGrant");
      }
      // verify the required parameter 'permissionGrant' is set
      if (permissionGrant === undefined || permissionGrant === null) {
        throw new Error("Missing the required parameter 'permissionGrant' when calling createPermissionGrant");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionGrant;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermissionScheme operation.
     * @callback module:api/PermissionSchemesApi~createPermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create permission scheme
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/PermissionScheme} permissionScheme The permission scheme to create.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~createPermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    createPermissionScheme(permissionScheme, opts, callback) {
      opts = opts || {};
      let postBody = permissionScheme;
      // verify the required parameter 'permissionScheme' is set
      if (permissionScheme === undefined || permissionScheme === null) {
        throw new Error("Missing the required parameter 'permissionScheme' when calling createPermissionScheme");
      }

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionScheme operation.
     * @callback module:api/PermissionSchemesApi~deletePermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete permission scheme
     * Deletes a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} schemeId The ID of the permission scheme being deleted.
     * @param {module:api/PermissionSchemesApi~deletePermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling deletePermissionScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeEntity operation.
     * @callback module:api/PermissionSchemesApi~deletePermissionSchemeEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete permission scheme grant
     * Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} schemeId The ID of the permission scheme to delete the permission grant from.
     * @param {Number} permissionId The ID of the permission grant to delete.
     * @param {module:api/PermissionSchemesApi~deletePermissionSchemeEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeEntity(schemeId, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling deletePermissionSchemeEntity");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling deletePermissionSchemeEntity");
      }

      let pathParams = {
        'schemeId': schemeId,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPermissionSchemes operation.
     * @callback module:api/PermissionSchemesApi~getAllPermissionSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionSchemes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all permission schemes
     * Returns all permission schemes.  ### About permission schemes and grants ###  A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.  #### Holder object ####  The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `\"type\": \"group\"`, and the parameter is the group name, `\"parameter\": \"Teams in space administrators\"` and the value is group ID, `\"value\": \"ca85fac0-d974-40ca-a615-7af99c48d24f\"`. The `holder` object is defined by the following properties:   *  `type` Identifies the user or group (see the list of types below).  *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.  *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`  The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):   *  `anyone` Grant for anonymous users.  *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.  *  `assignee` Grant for the user currently assigned to an issue.  *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).  *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).  *  `projectLead` Grant for a project lead.  *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).  *  `reporter` Grant for the user who reported the issue.  *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.  *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).  *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).  #### Built-in permissions ####  The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.  **Project permissions**   *  `ADMINISTER_PROJECTS`  *  `BROWSE_PROJECTS`  *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)  *  `SERVICEDESK_AGENT` (Jira Service Desk only)  *  `VIEW_DEV_TOOLS` (Jira Software only)  *  `VIEW_READONLY_WORKFLOW`  **Issue permissions**   *  `ASSIGNABLE_USER`  *  `ASSIGN_ISSUES`  *  `CLOSE_ISSUES`  *  `CREATE_ISSUES`  *  `DELETE_ISSUES`  *  `EDIT_ISSUES`  *  `LINK_ISSUES`  *  `MODIFY_REPORTER`  *  `MOVE_ISSUES`  *  `RESOLVE_ISSUES`  *  `SCHEDULE_ISSUES`  *  `SET_ISSUE_SECURITY`  *  `TRANSITION_ISSUES`  **Voters and watchers permissions**   *  `MANAGE_WATCHERS`  *  `VIEW_VOTERS_AND_WATCHERS`  **Comments permissions**   *  `ADD_COMMENTS`  *  `DELETE_ALL_COMMENTS`  *  `DELETE_OWN_COMMENTS`  *  `EDIT_ALL_COMMENTS`  *  `EDIT_OWN_COMMENTS`  **Attachments permissions**   *  `CREATE_ATTACHMENTS`  *  `DELETE_ALL_ATTACHMENTS`  *  `DELETE_OWN_ATTACHMENTS`  **Time tracking permissions**   *  `DELETE_ALL_WORKLOGS`  *  `DELETE_OWN_WORKLOGS`  *  `EDIT_ALL_WORKLOGS`  *  `EDIT_OWN_WORKLOGS`  *  `WORK_ON_ISSUES`  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~getAllPermissionSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionSchemes}
     */
    getAllPermissionSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionSchemes;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionScheme operation.
     * @callback module:api/PermissionSchemesApi~getPermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission scheme
     * Returns a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Number} schemeId The ID of the permission scheme to return.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~getPermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    getPermissionScheme(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling getPermissionScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionSchemeGrant operation.
     * @callback module:api/PermissionSchemesApi~getPermissionSchemeGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission scheme grant
     * Returns a permission grant.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Number} schemeId The ID of the permission scheme.
     * @param {Number} permissionId The ID of the permission grant.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~getPermissionSchemeGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionGrant}
     */
    getPermissionSchemeGrant(schemeId, permissionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling getPermissionSchemeGrant");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling getPermissionSchemeGrant");
      }

      let pathParams = {
        'schemeId': schemeId,
        'permissionId': permissionId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionGrant;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionSchemeGrants operation.
     * @callback module:api/PermissionSchemesApi~getPermissionSchemeGrantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionGrants} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission scheme grants
     * Returns all permission grants for a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Number} schemeId The ID of the permission scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `permissions` Returns all permission grants for each permission scheme.  *  `user` Returns information about the user who is granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `field` Returns information about the custom field granted the permission.  *  `all` Returns all expandable information.
     * @param {module:api/PermissionSchemesApi~getPermissionSchemeGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionGrants}
     */
    getPermissionSchemeGrants(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling getPermissionSchemeGrants");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionGrants;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionScheme operation.
     * @callback module:api/PermissionSchemesApi~updatePermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update permission scheme
     * Updates a permission scheme. Below are some important things to note when using this resource:   *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.  *  If you want to update only the name and description, then do not send a permissions list in the request.  *  Sending an empty list will remove all permission grants from the permission scheme.  If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).  See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} schemeId The ID of the permission scheme to update.
     * @param {module:model/PermissionScheme} permissionScheme 
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~updatePermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    updatePermissionScheme(schemeId, permissionScheme, opts, callback) {
      opts = opts || {};
      let postBody = permissionScheme;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling updatePermissionScheme");
      }
      // verify the required parameter 'permissionScheme' is set
      if (permissionScheme === undefined || permissionScheme === null) {
        throw new Error("Missing the required parameter 'permissionScheme' when calling updatePermissionScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/rest/api/3/permissionscheme/{schemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
