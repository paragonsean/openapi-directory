/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueFieldOption from '../model/IssueFieldOption';
import IssueFieldOptionCreateBean from '../model/IssueFieldOptionCreateBean';
import PageBeanIssueFieldOption from '../model/PageBeanIssueFieldOption';
import TaskProgressBeanRemoveOptionFromIssuesResult from '../model/TaskProgressBeanRemoveOptionFromIssuesResult';

/**
* IssueCustomFieldOptionsApps service.
* @module api/IssueCustomFieldOptionsAppsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueCustomFieldOptionsAppsApi {

    /**
    * Constructs a new IssueCustomFieldOptionsAppsApi. 
    * @alias module:api/IssueCustomFieldOptionsAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIssueFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~createIssueFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue field option
     * Creates an option for a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {module:model/IssueFieldOptionCreateBean} issueFieldOptionCreateBean 
     * @param {module:api/IssueCustomFieldOptionsAppsApi~createIssueFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueFieldOption}
     */
    createIssueFieldOption(fieldKey, issueFieldOptionCreateBean, callback) {
      let postBody = issueFieldOptionCreateBean;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling createIssueFieldOption");
      }
      // verify the required parameter 'issueFieldOptionCreateBean' is set
      if (issueFieldOptionCreateBean === undefined || issueFieldOptionCreateBean === null) {
        throw new Error("Missing the required parameter 'issueFieldOptionCreateBean' when calling createIssueFieldOption");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~deleteIssueFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue field option
     * Deletes an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be deleted.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~deleteIssueFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteIssueFieldOption(fieldKey, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling deleteIssueFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteIssueFieldOption");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIssueFieldOptions operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~getAllIssueFieldOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issue field options
     * Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~getAllIssueFieldOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueFieldOption}
     */
    getAllIssueFieldOptions(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling getAllIssueFieldOptions");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~getIssueFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue field option
     * Returns an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be returned.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~getIssueFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueFieldOption}
     */
    getIssueFieldOption(fieldKey, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling getIssueFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling getIssueFieldOption");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option/{optionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelectableIssueFieldOptions operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~getSelectableIssueFieldOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get selectable issue field options
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Number} [projectId] Filters the results to options that are only available in the specified project.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~getSelectableIssueFieldOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueFieldOption}
     */
    getSelectableIssueFieldOptions(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling getSelectableIssueFieldOptions");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': opts['projectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option/suggestions/edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisibleIssueFieldOptions operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~getVisibleIssueFieldOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get visible issue field options
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults] The maximum number of items to return per page.
     * @param {Number} [projectId] Filters the results to options that are only available in the specified project.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~getVisibleIssueFieldOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueFieldOption}
     */
    getVisibleIssueFieldOptions(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling getVisibleIssueFieldOptions");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': opts['projectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option/suggestions/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceIssueFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~replaceIssueFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace issue field option
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.  This is an [asynchronous operation](#async). The response object contains a link to the long-running task.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be deselected.
     * @param {Object} opts Optional parameters
     * @param {Number} [replaceWith] The ID of the option that will replace the currently selected option.
     * @param {String} [jql] A JQL query that specifies the issues to be updated. For example, *project=10000*.
     * @param {Boolean} [overrideScreenSecurity = false)] Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.
     * @param {Boolean} [overrideEditableFlag = false)] Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:api/IssueCustomFieldOptionsAppsApi~replaceIssueFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replaceIssueFieldOption(fieldKey, optionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling replaceIssueFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling replaceIssueFieldOption");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
        'replaceWith': opts['replaceWith'],
        'jql': opts['jql'],
        'overrideScreenSecurity': opts['overrideScreenSecurity'],
        'overrideEditableFlag': opts['overrideEditableFlag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option/{optionId}/issue', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~updateIssueFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue field option
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be updated.
     * @param {module:model/IssueFieldOption} issueFieldOption 
     * @param {module:api/IssueCustomFieldOptionsAppsApi~updateIssueFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueFieldOption}
     */
    updateIssueFieldOption(fieldKey, optionId, issueFieldOption, callback) {
      let postBody = issueFieldOption;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling updateIssueFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateIssueFieldOption");
      }
      // verify the required parameter 'issueFieldOption' is set
      if (issueFieldOption === undefined || issueFieldOption === null) {
        throw new Error("Missing the required parameter 'issueFieldOption' when calling updateIssueFieldOption");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldKey}/option/{optionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
