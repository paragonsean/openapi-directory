/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddFieldBean from '../model/AddFieldBean';
import MoveFieldBean from '../model/MoveFieldBean';
import ScreenableField from '../model/ScreenableField';

/**
* ScreenTabFields service.
* @module api/ScreenTabFieldsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ScreenTabFieldsApi {

    /**
    * Constructs a new ScreenTabFieldsApi. 
    * @alias module:api/ScreenTabFieldsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addScreenTabField operation.
     * @callback module:api/ScreenTabFieldsApi~addScreenTabFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScreenableField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add screen tab field
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {module:model/AddFieldBean} addFieldBean 
     * @param {module:api/ScreenTabFieldsApi~addScreenTabFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScreenableField}
     */
    addScreenTabField(screenId, tabId, addFieldBean, callback) {
      let postBody = addFieldBean;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling addScreenTabField");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling addScreenTabField");
      }
      // verify the required parameter 'addFieldBean' is set
      if (addFieldBean === undefined || addFieldBean === null) {
        throw new Error("Missing the required parameter 'addFieldBean' when calling addScreenTabField");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenableField;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllScreenTabFields operation.
     * @callback module:api/ScreenTabFieldsApi~getAllScreenTabFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenableField>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all screen tab fields
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {Object} opts Optional parameters
     * @param {String} [projectKey] The key of the project.
     * @param {module:api/ScreenTabFieldsApi~getAllScreenTabFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenableField>}
     */
    getAllScreenTabFields(screenId, tabId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling getAllScreenTabFields");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling getAllScreenTabFields");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenableField];
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveScreenTabField operation.
     * @callback module:api/ScreenTabFieldsApi~moveScreenTabFieldCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move screen tab field
     * Moves a screen tab field.  If `after` and `position` are provided in the request, `position` is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {String} id The ID of the field.
     * @param {module:model/MoveFieldBean} moveFieldBean 
     * @param {module:api/ScreenTabFieldsApi~moveScreenTabFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    moveScreenTabField(screenId, tabId, id, moveFieldBean, callback) {
      let postBody = moveFieldBean;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling moveScreenTabField");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling moveScreenTabField");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling moveScreenTabField");
      }
      // verify the required parameter 'moveFieldBean' is set
      if (moveFieldBean === undefined || moveFieldBean === null) {
        throw new Error("Missing the required parameter 'moveFieldBean' when calling moveScreenTabField");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeScreenTabField operation.
     * @callback module:api/ScreenTabFieldsApi~removeScreenTabFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove screen tab field
     * Removes a field from a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {String} id The ID of the field.
     * @param {module:api/ScreenTabFieldsApi~removeScreenTabFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeScreenTabField(screenId, tabId, id, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling removeScreenTabField");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling removeScreenTabField");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeScreenTabField");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
