/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WorkflowTransitionProperty from '../model/WorkflowTransitionProperty';

/**
* WorkflowTransitionProperties service.
* @module api/WorkflowTransitionPropertiesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class WorkflowTransitionPropertiesApi {

    /**
    * Constructs a new WorkflowTransitionPropertiesApi. 
    * @alias module:api/WorkflowTransitionPropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkflowTransitionProperty operation.
     * @callback module:api/WorkflowTransitionPropertiesApi~createWorkflowTransitionPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTransitionProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create workflow transition property
     * Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param {String} key The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
     * @param {String} workflowName The name of the workflow that the transition belongs to.
     * @param {module:model/WorkflowTransitionProperty} workflowTransitionProperty 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [workflowMode = 'live')] The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
     * @param {module:api/WorkflowTransitionPropertiesApi~createWorkflowTransitionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTransitionProperty}
     */
    createWorkflowTransitionProperty(transitionId, key, workflowName, workflowTransitionProperty, opts, callback) {
      opts = opts || {};
      let postBody = workflowTransitionProperty;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling createWorkflowTransitionProperty");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createWorkflowTransitionProperty");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling createWorkflowTransitionProperty");
      }
      // verify the required parameter 'workflowTransitionProperty' is set
      if (workflowTransitionProperty === undefined || workflowTransitionProperty === null) {
        throw new Error("Missing the required parameter 'workflowTransitionProperty' when calling createWorkflowTransitionProperty");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'key': key,
        'workflowName': workflowName,
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowTransitionProperty;
      return this.apiClient.callApi(
        '/rest/api/3/workflow/transitions/{transitionId}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowTransitionProperty operation.
     * @callback module:api/WorkflowTransitionPropertiesApi~deleteWorkflowTransitionPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete workflow transition property
     * Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param {String} key The name of the transition property to delete, also known as the name of the property.
     * @param {String} workflowName The name of the workflow that the transition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [workflowMode] The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
     * @param {module:api/WorkflowTransitionPropertiesApi~deleteWorkflowTransitionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflowTransitionProperty(transitionId, key, workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling deleteWorkflowTransitionProperty");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteWorkflowTransitionProperty");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling deleteWorkflowTransitionProperty");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'key': key,
        'workflowName': workflowName,
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/workflow/transitions/{transitionId}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowTransitionProperties operation.
     * @callback module:api/WorkflowTransitionPropertiesApi~getWorkflowTransitionPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTransitionProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow transition properties
     * Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.
     * @param {String} workflowName The name of the workflow that the transition belongs to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeReservedKeys = false)] Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
     * @param {String} [key] The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
     * @param {module:model/String} [workflowMode = 'live')] The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
     * @param {module:api/WorkflowTransitionPropertiesApi~getWorkflowTransitionPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTransitionProperty}
     */
    getWorkflowTransitionProperties(transitionId, workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling getWorkflowTransitionProperties");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling getWorkflowTransitionProperties");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'includeReservedKeys': opts['includeReservedKeys'],
        'key': opts['key'],
        'workflowName': workflowName,
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowTransitionProperty;
      return this.apiClient.callApi(
        '/rest/api/3/workflow/transitions/{transitionId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflowTransitionProperty operation.
     * @callback module:api/WorkflowTransitionPropertiesApi~updateWorkflowTransitionPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTransitionProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update workflow transition property
     * Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param {String} key The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
     * @param {String} workflowName The name of the workflow that the transition belongs to.
     * @param {module:model/WorkflowTransitionProperty} workflowTransitionProperty 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [workflowMode] The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
     * @param {module:api/WorkflowTransitionPropertiesApi~updateWorkflowTransitionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTransitionProperty}
     */
    updateWorkflowTransitionProperty(transitionId, key, workflowName, workflowTransitionProperty, opts, callback) {
      opts = opts || {};
      let postBody = workflowTransitionProperty;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling updateWorkflowTransitionProperty");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWorkflowTransitionProperty");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling updateWorkflowTransitionProperty");
      }
      // verify the required parameter 'workflowTransitionProperty' is set
      if (workflowTransitionProperty === undefined || workflowTransitionProperty === null) {
        throw new Error("Missing the required parameter 'workflowTransitionProperty' when calling updateWorkflowTransitionProperty");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'key': key,
        'workflowName': workflowName,
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowTransitionProperty;
      return this.apiClient.callApi(
        '/rest/api/3/workflow/transitions/{transitionId}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
