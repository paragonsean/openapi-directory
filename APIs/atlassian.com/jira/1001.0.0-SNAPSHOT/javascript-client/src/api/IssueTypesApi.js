/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Avatar from '../model/Avatar';
import IssueTypeCreateBean from '../model/IssueTypeCreateBean';
import IssueTypeDetails from '../model/IssueTypeDetails';
import IssueTypeUpdateBean from '../model/IssueTypeUpdateBean';

/**
* IssueTypes service.
* @module api/IssueTypesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueTypesApi {

    /**
    * Constructs a new IssueTypesApi. 
    * @alias module:api/IssueTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIssueType operation.
     * @callback module:api/IssueTypesApi~createIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue type
     * Creates an issue type and adds it to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/IssueTypeCreateBean} issueTypeCreateBean 
     * @param {module:api/IssueTypesApi~createIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeDetails}
     */
    createIssueType(issueTypeCreateBean, callback) {
      let postBody = issueTypeCreateBean;
      // verify the required parameter 'issueTypeCreateBean' is set
      if (issueTypeCreateBean === undefined || issueTypeCreateBean === null) {
        throw new Error("Missing the required parameter 'issueTypeCreateBean' when calling createIssueType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueTypeDetails;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssueTypeAvatar operation.
     * @callback module:api/IssueTypesApi~createIssueTypeAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load issue type avatar
     * Loads an avatar for the issue type.  Specify the avatar's local file location in the body of the request. Also, include the following headers:   *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST \\ --user email@example.com:<api_token> \\ --header 'X-Atlassian-Token: no-check' \\ --header 'Content-Type: image/< image_type>' \\ --data-binary \"<@/path/to/file/with/your/avatar>\" \\ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue type.
     * @param {Number} size The length of each side of the crop region.
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {Number} [x = 0)] The X coordinate of the top-left corner of the crop region.
     * @param {Number} [y = 0)] The Y coordinate of the top-left corner of the crop region.
     * @param {module:api/IssueTypesApi~createIssueTypeAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    createIssueTypeAvatar(id, size, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createIssueTypeAvatar");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling createIssueTypeAvatar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createIssueTypeAvatar");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'x': opts['x'],
        'y': opts['y'],
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{id}/avatar2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueType operation.
     * @callback module:api/IssueTypesApi~deleteIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue type
     * Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {String} [alternativeIssueTypeId] The ID of the replacement issue type.
     * @param {module:api/IssueTypesApi~deleteIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssueType(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIssueType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alternativeIssueTypeId': opts['alternativeIssueTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlternativeIssueTypes operation.
     * @callback module:api/IssueTypesApi~getAlternativeIssueTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueTypeDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alternative issue types
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {String} id The ID of the issue type.
     * @param {module:api/IssueTypesApi~getAlternativeIssueTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueTypeDetails>}
     */
    getAlternativeIssueTypes(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlternativeIssueTypes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueTypeDetails];
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{id}/alternatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueAllTypes operation.
     * @callback module:api/IssueTypesApi~getIssueAllTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueTypeDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issue types for user
     * Returns all issue types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issue types are only returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     * @param {module:api/IssueTypesApi~getIssueAllTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueTypeDetails>}
     */
    getIssueAllTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueTypeDetails];
      return this.apiClient.callApi(
        '/rest/api/3/issuetype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueType operation.
     * @callback module:api/IssueTypesApi~getIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type
     * Returns an issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue type.
     * @param {module:api/IssueTypesApi~getIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeDetails}
     */
    getIssueType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIssueType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueTypeDetails;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypesForProject operation.
     * @callback module:api/IssueTypesApi~getIssueTypesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueTypeDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue types for project
     * Returns issue types for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} projectId The ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} [level] The level of the issue type to filter by. Use:   *  `-1` for Subtask.  *  `0` for Base.  *  `1` for Epic.
     * @param {module:api/IssueTypesApi~getIssueTypesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueTypeDetails>}
     */
    getIssueTypesForProject(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIssueTypesForProject");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId,
        'level': opts['level']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueTypeDetails];
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueType operation.
     * @callback module:api/IssueTypesApi~updateIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue type
     * Updates the issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue type.
     * @param {module:model/IssueTypeUpdateBean} issueTypeUpdateBean 
     * @param {module:api/IssueTypesApi~updateIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeDetails}
     */
    updateIssueType(id, issueTypeUpdateBean, callback) {
      let postBody = issueTypeUpdateBean;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIssueType");
      }
      // verify the required parameter 'issueTypeUpdateBean' is set
      if (issueTypeUpdateBean === undefined || issueTypeUpdateBean === null) {
        throw new Error("Missing the required parameter 'issueTypeUpdateBean' when calling updateIssueType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueTypeDetails;
      return this.apiClient.callApi(
        '/rest/api/3/issuetype/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
