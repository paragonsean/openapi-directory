/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProjectEmailAddress from '../model/ProjectEmailAddress';

/**
* ProjectEmail service.
* @module api/ProjectEmailApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectEmailApi {

    /**
    * Constructs a new ProjectEmailApi. 
    * @alias module:api/ProjectEmailApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProjectEmail operation.
     * @callback module:api/ProjectEmailApi~getProjectEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectEmailAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project's sender email
     * Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param {Number} projectId The project ID.
     * @param {module:api/ProjectEmailApi~getProjectEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectEmailAddress}
     */
    getProjectEmail(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectEmail");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectEmailAddress;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectId}/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectEmail operation.
     * @callback module:api/ProjectEmailApi~updateProjectEmailCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set project's sender email
     * Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).  If `emailAddress` is an empty string, the default email address is restored.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param {Number} projectId The project ID.
     * @param {module:model/ProjectEmailAddress} projectEmailAddress The project's sender email address to be set.
     * @param {module:api/ProjectEmailApi~updateProjectEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateProjectEmail(projectId, projectEmailAddress, callback) {
      let postBody = projectEmailAddress;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProjectEmail");
      }
      // verify the required parameter 'projectEmailAddress' is set
      if (projectEmailAddress === undefined || projectEmailAddress === null) {
        throw new Error("Missing the required parameter 'projectEmailAddress' when calling updateProjectEmail");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/project/{projectId}/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
