/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorCollection from '../model/ErrorCollection';

/**
* ProjectKeyAndNameValidation service.
* @module api/ProjectKeyAndNameValidationApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectKeyAndNameValidationApi {

    /**
    * Constructs a new ProjectKeyAndNameValidationApi. 
    * @alias module:api/ProjectKeyAndNameValidationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getValidProjectKey operation.
     * @callback module:api/ProjectKeyAndNameValidationApi~getValidProjectKeyCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get valid project key
     * Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.  **[Permissions](#permissions) required:** None.
     * @param {Object} opts Optional parameters
     * @param {String} [key] The project key.
     * @param {module:api/ProjectKeyAndNameValidationApi~getValidProjectKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getValidProjectKey(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/rest/api/3/projectvalidate/validProjectKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getValidProjectName operation.
     * @callback module:api/ProjectKeyAndNameValidationApi~getValidProjectNameCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get valid project name
     * Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.  **[Permissions](#permissions) required:** None.
     * @param {String} name The project name.
     * @param {module:api/ProjectKeyAndNameValidationApi~getValidProjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getValidProjectName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getValidProjectName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/rest/api/3/projectvalidate/validProjectName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateProjectKey operation.
     * @callback module:api/ProjectKeyAndNameValidationApi~validateProjectKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate project key
     * Validates a project key by confirming the key is a valid string and not in use.  **[Permissions](#permissions) required:** None.
     * @param {Object} opts Optional parameters
     * @param {String} [key] The project key.
     * @param {module:api/ProjectKeyAndNameValidationApi~validateProjectKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorCollection}
     */
    validateProjectKey(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorCollection;
      return this.apiClient.callApi(
        '/rest/api/3/projectvalidate/key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
