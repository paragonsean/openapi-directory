/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JqlFunctionPrecomputationUpdateRequestBean from '../model/JqlFunctionPrecomputationUpdateRequestBean';
import PageBeanJqlFunctionPrecomputationBean from '../model/PageBeanJqlFunctionPrecomputationBean';

/**
* JQLFunctionsApps service.
* @module api/JQLFunctionsAppsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class JQLFunctionsAppsApi {

    /**
    * Constructs a new JQLFunctionsAppsApi. 
    * @alias module:api/JQLFunctionsAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPrecomputations operation.
     * @callback module:api/JQLFunctionsAppsApi~getPrecomputationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanJqlFunctionPrecomputationBean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get precomputations (apps)
     * Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \\- the JQL fragment to replace the custom function clause with.  **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [functionKey] The function key in format:   *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`.  *  Connect: `[App key]__[Module key]`.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 100)] The maximum number of items to return per page.
     * @param {String} [orderBy] Not supported yet.
     * @param {String} [filter] Not supported yet.
     * @param {module:api/JQLFunctionsAppsApi~getPrecomputationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanJqlFunctionPrecomputationBean}
     */
    getPrecomputations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'functionKey': this.apiClient.buildCollectionParam(opts['functionKey'], 'multi'),
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanJqlFunctionPrecomputationBean;
      return this.apiClient.callApi(
        '/rest/api/3/jql/function/computation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePrecomputations operation.
     * @callback module:api/JQLFunctionsAppsApi~updatePrecomputationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update precomputations (apps)
     * Update the precomputation value of a function created by a Forge/Connect app.  **[Permissions](#permissions) required:** An API for apps to update their own precomputations.
     * @param {module:model/JqlFunctionPrecomputationUpdateRequestBean} jqlFunctionPrecomputationUpdateRequestBean 
     * @param {module:api/JQLFunctionsAppsApi~updatePrecomputationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updatePrecomputations(jqlFunctionPrecomputationUpdateRequestBean, callback) {
      let postBody = jqlFunctionPrecomputationUpdateRequestBean;
      // verify the required parameter 'jqlFunctionPrecomputationUpdateRequestBean' is set
      if (jqlFunctionPrecomputationUpdateRequestBean === undefined || jqlFunctionPrecomputationUpdateRequestBean === null) {
        throw new Error("Missing the required parameter 'jqlFunctionPrecomputationUpdateRequestBean' when calling updatePrecomputations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/jql/function/computation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
