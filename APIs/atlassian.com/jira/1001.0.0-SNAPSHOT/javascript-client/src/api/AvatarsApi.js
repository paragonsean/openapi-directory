/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Avatar from '../model/Avatar';
import Avatars from '../model/Avatars';
import ErrorCollection from '../model/ErrorCollection';
import SystemAvatars from '../model/SystemAvatars';

/**
* Avatars service.
* @module api/AvatarsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class AvatarsApi {

    /**
    * Constructs a new AvatarsApi. 
    * @alias module:api/AvatarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAvatar operation.
     * @callback module:api/AvatarsApi~deleteAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete avatar
     * Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/String} type The avatar type.
     * @param {String} owningObjectId The ID of the item the avatar is associated with.
     * @param {Number} id The ID of the avatar.
     * @param {module:api/AvatarsApi~deleteAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAvatar(type, owningObjectId, id, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteAvatar");
      }
      // verify the required parameter 'owningObjectId' is set
      if (owningObjectId === undefined || owningObjectId === null) {
        throw new Error("Missing the required parameter 'owningObjectId' when calling deleteAvatar");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAvatar");
      }

      let pathParams = {
        'type': type,
        'owningObjectId': owningObjectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSystemAvatars operation.
     * @callback module:api/AvatarsApi~getAllSystemAvatarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemAvatars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system avatars by type
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:model/String} type The avatar type.
     * @param {module:api/AvatarsApi~getAllSystemAvatarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemAvatars}
     */
    getAllSystemAvatars(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAllSystemAvatars");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemAvatars;
      return this.apiClient.callApi(
        '/rest/api/3/avatar/{type}/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvatarImageByID operation.
     * @callback module:api/AvatarsApi~getAvatarImageByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get avatar image by ID
     * Returns a project or issue type avatar image by ID.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * @param {module:model/String} type The icon type of the avatar.
     * @param {Number} id The ID of the avatar.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [size] The size of the avatar image. If not provided the default size is returned.
     * @param {module:model/String} [format] The format to return the avatar image in. If not provided the original content format is returned.
     * @param {module:api/AvatarsApi~getAvatarImageByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvatarImageByID(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAvatarImageByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAvatarImageByID");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'size': opts['size'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'image/png', 'image/svg+xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvatarImageByOwner operation.
     * @callback module:api/AvatarsApi~getAvatarImageByOwnerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get avatar image by owner
     * Returns the avatar image for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * @param {module:model/String} type The icon type of the avatar.
     * @param {String} entityId The ID of the project or issue type the avatar belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [size] The size of the avatar image. If not provided the default size is returned.
     * @param {module:model/String} [format] The format to return the avatar image in. If not provided the original content format is returned.
     * @param {module:api/AvatarsApi~getAvatarImageByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvatarImageByOwner(type, entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAvatarImageByOwner");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAvatarImageByOwner");
      }

      let pathParams = {
        'type': type,
        'entityId': entityId
      };
      let queryParams = {
        'size': opts['size'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'image/png', 'image/svg+xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvatarImageByType operation.
     * @callback module:api/AvatarsApi~getAvatarImageByTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get avatar image by type
     * Returns the default project or issue type avatar image.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:model/String} type The icon type of the avatar.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [size] The size of the avatar image. If not provided the default size is returned.
     * @param {module:model/String} [format] The format to return the avatar image in. If not provided the original content format is returned.
     * @param {module:api/AvatarsApi~getAvatarImageByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvatarImageByType(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAvatarImageByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'size': opts['size'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'image/png', 'image/svg+xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/universal_avatar/view/type/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvatars operation.
     * @callback module:api/AvatarsApi~getAvatarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get avatars
     * Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.  *  for system avatars, none.
     * @param {module:model/String} type The avatar type.
     * @param {String} entityId The ID of the item the avatar is associated with.
     * @param {module:api/AvatarsApi~getAvatarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatars}
     */
    getAvatars(type, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAvatars");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAvatars");
      }

      let pathParams = {
        'type': type,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatars;
      return this.apiClient.callApi(
        '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAvatar operation.
     * @callback module:api/AvatarsApi~storeAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load avatar
     * Loads a custom avatar for a project or issue type.  Specify the avatar's local file location in the body of the request. Also, include the following headers:   *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST `  `--user email@example.com:<api_token> `  `--header 'X-Atlassian-Token: no-check' `  `--header 'Content-Type: image/< image_type>' `  `--data-binary \"<@/path/to/file/with/your/avatar>\" `  `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/String} type The avatar type.
     * @param {String} entityId The ID of the item the avatar is associated with.
     * @param {Number} size The length of each side of the crop region.
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {Number} [x = 0)] The X coordinate of the top-left corner of the crop region.
     * @param {Number} [y = 0)] The Y coordinate of the top-left corner of the crop region.
     * @param {module:api/AvatarsApi~storeAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    storeAvatar(type, entityId, size, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling storeAvatar");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling storeAvatar");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling storeAvatar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling storeAvatar");
      }

      let pathParams = {
        'type': type,
        'entityId': entityId
      };
      let queryParams = {
        'x': opts['x'],
        'y': opts['y'],
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
