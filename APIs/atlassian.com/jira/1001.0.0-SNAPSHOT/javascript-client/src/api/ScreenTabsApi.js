/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScreenableTab from '../model/ScreenableTab';

/**
* ScreenTabs service.
* @module api/ScreenTabsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ScreenTabsApi {

    /**
    * Constructs a new ScreenTabsApi. 
    * @alias module:api/ScreenTabsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addScreenTab operation.
     * @callback module:api/ScreenTabsApi~addScreenTabCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScreenableTab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create screen tab
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {module:model/ScreenableTab} screenableTab 
     * @param {module:api/ScreenTabsApi~addScreenTabCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScreenableTab}
     */
    addScreenTab(screenId, screenableTab, callback) {
      let postBody = screenableTab;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling addScreenTab");
      }
      // verify the required parameter 'screenableTab' is set
      if (screenableTab === undefined || screenableTab === null) {
        throw new Error("Missing the required parameter 'screenableTab' when calling addScreenTab");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenableTab;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreenTab operation.
     * @callback module:api/ScreenTabsApi~deleteScreenTabCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete screen tab
     * Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {module:api/ScreenTabsApi~deleteScreenTabCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScreenTab(screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling deleteScreenTab");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling deleteScreenTab");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllScreenTabs operation.
     * @callback module:api/ScreenTabsApi~getAllScreenTabsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScreenableTab>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all screen tabs
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param {Number} screenId The ID of the screen.
     * @param {Object} opts Optional parameters
     * @param {String} [projectKey] The key of the project.
     * @param {module:api/ScreenTabsApi~getAllScreenTabsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScreenableTab>}
     */
    getAllScreenTabs(screenId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling getAllScreenTabs");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScreenableTab];
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveScreenTab operation.
     * @callback module:api/ScreenTabsApi~moveScreenTabCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move screen tab
     * Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {Number} pos The position of tab. The base index is 0.
     * @param {module:api/ScreenTabsApi~moveScreenTabCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    moveScreenTab(screenId, tabId, pos, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling moveScreenTab");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling moveScreenTab");
      }
      // verify the required parameter 'pos' is set
      if (pos === undefined || pos === null) {
        throw new Error("Missing the required parameter 'pos' when calling moveScreenTab");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId,
        'pos': pos
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameScreenTab operation.
     * @callback module:api/ScreenTabsApi~renameScreenTabCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScreenableTab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update screen tab
     * Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {module:model/ScreenableTab} screenableTab 
     * @param {module:api/ScreenTabsApi~renameScreenTabCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScreenableTab}
     */
    renameScreenTab(screenId, tabId, screenableTab, callback) {
      let postBody = screenableTab;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling renameScreenTab");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling renameScreenTab");
      }
      // verify the required parameter 'screenableTab' is set
      if (screenableTab === undefined || screenableTab === null) {
        throw new Error("Missing the required parameter 'screenableTab' when calling renameScreenTab");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenableTab;
      return this.apiClient.callApi(
        '/rest/api/3/screens/{screenId}/tabs/{tabId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
