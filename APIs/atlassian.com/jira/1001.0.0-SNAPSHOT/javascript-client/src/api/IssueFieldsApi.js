/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomFieldDefinitionJsonBean from '../model/CustomFieldDefinitionJsonBean';
import ErrorCollection from '../model/ErrorCollection';
import FieldDetails from '../model/FieldDetails';
import PageBeanContext from '../model/PageBeanContext';
import PageBeanField from '../model/PageBeanField';
import TaskProgressBeanObject from '../model/TaskProgressBeanObject';
import UpdateCustomFieldDetails from '../model/UpdateCustomFieldDetails';

/**
* IssueFields service.
* @module api/IssueFieldsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueFieldsApi {

    /**
    * Constructs a new IssueFieldsApi. 
    * @alias module:api/IssueFieldsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomField operation.
     * @callback module:api/IssueFieldsApi~createCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create custom field
     * Creates a custom field.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/CustomFieldDefinitionJsonBean} customFieldDefinitionJsonBean Definition of the custom field to be created
     * @param {module:api/IssueFieldsApi~createCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldDetails}
     */
    createCustomField(customFieldDefinitionJsonBean, callback) {
      let postBody = customFieldDefinitionJsonBean;
      // verify the required parameter 'customFieldDefinitionJsonBean' is set
      if (customFieldDefinitionJsonBean === undefined || customFieldDefinitionJsonBean === null) {
        throw new Error("Missing the required parameter 'customFieldDefinitionJsonBean' when calling createCustomField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldDetails;
      return this.apiClient.callApi(
        '/rest/api/3/field', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomField operation.
     * @callback module:api/IssueFieldsApi~deleteCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete custom field
     * Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of a custom field.
     * @param {module:api/IssueFieldsApi~deleteCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomField(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomField");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/field/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContextsForFieldDeprecated operation.
     * @callback module:api/IssueFieldsApi~getContextsForFieldDeprecatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contexts for a field
     * Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the field to return contexts for.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 20)] The maximum number of items to return per page.
     * @param {module:api/IssueFieldsApi~getContextsForFieldDeprecatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanContext}
     */
    getContextsForFieldDeprecated(fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getContextsForFieldDeprecated");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanContext;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/contexts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFields operation.
     * @callback module:api/IssueFieldsApi~getFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fields
     * Returns system and custom issue fields according to the following rules:   *  Fields that cannot be added to the issue navigator are always returned.  *  Fields that cannot be placed on an issue screen are always returned.  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:api/IssueFieldsApi~getFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FieldDetails>}
     */
    getFields(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FieldDetails];
      return this.apiClient.callApi(
        '/rest/api/3/field', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldsPaginated operation.
     * @callback module:api/IssueFieldsApi~getFieldsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fields paginated
     * Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:   *  all fields  *  specific fields, by defining `id`  *  fields that contain a string in the field name or description, by defining `query`  *  specific fields that contain a string in the field name or description, by defining `id` and `query`  Only custom fields can be queried, `type` must be set to `custom`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<module:model/String>} [type] The type of fields to search.
     * @param {Array.<String>} [id] The IDs of the custom fields to return or, where `query` is specified, filter.
     * @param {String} [query] String used to perform a case-insensitive partial match with field names or descriptions.
     * @param {module:model/String} [orderBy] [Order](#ordering) the results by a field:   *  `contextsCount` sorts by the number of contexts related to a field  *  `lastUsed` sorts by the date when the value of the field last changed  *  `name` sorts by the field name  *  `screensCount` sorts by the number of screens related to a field
     * @param {String} [expand] Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `key` returns the key for each field  *  `lastUsed` returns the date when the value of the field last changed  *  `screensCount` returns the number of screens related to a field  *  `contextsCount` returns the number of contexts related to a field  *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)  *  `searcherKey` returns the searcher key for each custom field
     * @param {module:api/IssueFieldsApi~getFieldsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanField}
     */
    getFieldsPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'query': opts['query'],
        'orderBy': opts['orderBy'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanField;
      return this.apiClient.callApi(
        '/rest/api/3/field/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrashedFieldsPaginated operation.
     * @callback module:api/IssueFieldsApi~getTrashedFieldsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fields in trash paginated
     * Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.  Only custom fields can be queried, `type` must be set to `custom`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<String>} [id] 
     * @param {String} [query] String used to perform a case-insensitive partial match with field names or descriptions.
     * @param {module:model/String} [expand] 
     * @param {String} [orderBy] [Order](#ordering) the results by a field:   *  `name` sorts by the field name  *  `trashDate` sorts by the date the field was moved to the trash  *  `plannedDeletionDate` sorts by the planned deletion date
     * @param {module:api/IssueFieldsApi~getTrashedFieldsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanField}
     */
    getTrashedFieldsPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'query': opts['query'],
        'expand': opts['expand'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanField;
      return this.apiClient.callApi(
        '/rest/api/3/field/search/trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreCustomField operation.
     * @callback module:api/IssueFieldsApi~restoreCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore custom field from trash
     * Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of a custom field.
     * @param {module:api/IssueFieldsApi~restoreCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    restoreCustomField(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restoreCustomField");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trashCustomField operation.
     * @callback module:api/IssueFieldsApi~trashCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move custom field to trash
     * Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of a custom field.
     * @param {module:api/IssueFieldsApi~trashCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    trashCustomField(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trashCustomField");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{id}/trash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField operation.
     * @callback module:api/IssueFieldsApi~updateCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom field
     * Updates a custom field.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {module:model/UpdateCustomFieldDetails} updateCustomFieldDetails The custom field update details.
     * @param {module:api/IssueFieldsApi~updateCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCustomField(fieldId, updateCustomFieldDetails, callback) {
      let postBody = updateCustomFieldDetails;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateCustomField");
      }
      // verify the required parameter 'updateCustomFieldDetails' is set
      if (updateCustomFieldDetails === undefined || updateCustomFieldDetails === null) {
        throw new Error("Missing the required parameter 'updateCustomFieldDetails' when calling updateCustomField");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
