/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultShareScope from '../model/DefaultShareScope';
import SharePermission from '../model/SharePermission';
import SharePermissionInputBean from '../model/SharePermissionInputBean';

/**
* FilterSharing service.
* @module api/FilterSharingApi
* @version 1001.0.0-SNAPSHOT
*/
export default class FilterSharingApi {

    /**
    * Constructs a new FilterSharingApi. 
    * @alias module:api/FilterSharingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSharePermission operation.
     * @callback module:api/FilterSharingApi~addSharePermissionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharePermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add share permission
     * Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.  Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).  **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
     * @param {Number} id The ID of the filter.
     * @param {module:model/SharePermissionInputBean} sharePermissionInputBean 
     * @param {module:api/FilterSharingApi~addSharePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharePermission>}
     */
    addSharePermission(id, sharePermissionInputBean, callback) {
      let postBody = sharePermissionInputBean;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSharePermission");
      }
      // verify the required parameter 'sharePermissionInputBean' is set
      if (sharePermissionInputBean === undefined || sharePermissionInputBean === null) {
        throw new Error("Missing the required parameter 'sharePermissionInputBean' when calling addSharePermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SharePermission];
      return this.apiClient.callApi(
        '/rest/api/3/filter/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSharePermission operation.
     * @callback module:api/FilterSharingApi~deleteSharePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete share permission
     * Deletes a share permission from a filter.  **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
     * @param {Number} id The ID of the filter.
     * @param {Number} permissionId The ID of the share permission.
     * @param {module:api/FilterSharingApi~deleteSharePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSharePermission(id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSharePermission");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling deleteSharePermission");
      }

      let pathParams = {
        'id': id,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/filter/{id}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultShareScope operation.
     * @callback module:api/FilterSharingApi~getDefaultShareScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultShareScope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default share scope
     * Returns the default sharing settings for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {module:api/FilterSharingApi~getDefaultShareScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultShareScope}
     */
    getDefaultShareScope(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultShareScope;
      return this.apiClient.callApi(
        '/rest/api/3/filter/defaultShareScope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSharePermission operation.
     * @callback module:api/FilterSharingApi~getSharePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharePermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get share permission
     * Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, a share permission is only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param {Number} id The ID of the filter.
     * @param {Number} permissionId The ID of the share permission.
     * @param {module:api/FilterSharingApi~getSharePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharePermission}
     */
    getSharePermission(id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSharePermission");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling getSharePermission");
      }

      let pathParams = {
        'id': id,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharePermission;
      return this.apiClient.callApi(
        '/rest/api/3/filter/{id}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSharePermissions operation.
     * @callback module:api/FilterSharingApi~getSharePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharePermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get share permissions
     * Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, share permissions are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param {Number} id The ID of the filter.
     * @param {module:api/FilterSharingApi~getSharePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharePermission>}
     */
    getSharePermissions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSharePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SharePermission];
      return this.apiClient.callApi(
        '/rest/api/3/filter/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDefaultShareScope operation.
     * @callback module:api/FilterSharingApi~setDefaultShareScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultShareScope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default share scope
     * Sets the default sharing for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {module:model/DefaultShareScope} defaultShareScope 
     * @param {module:api/FilterSharingApi~setDefaultShareScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultShareScope}
     */
    setDefaultShareScope(defaultShareScope, callback) {
      let postBody = defaultShareScope;
      // verify the required parameter 'defaultShareScope' is set
      if (defaultShareScope === undefined || defaultShareScope === null) {
        throw new Error("Missing the required parameter 'defaultShareScope' when calling setDefaultShareScope");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultShareScope;
      return this.apiClient.callApi(
        '/rest/api/3/filter/defaultShareScope', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
