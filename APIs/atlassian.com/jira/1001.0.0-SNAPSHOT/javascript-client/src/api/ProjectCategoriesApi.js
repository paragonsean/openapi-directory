/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProjectCategory from '../model/ProjectCategory';
import UpdatedProjectCategory from '../model/UpdatedProjectCategory';

/**
* ProjectCategories service.
* @module api/ProjectCategoriesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectCategoriesApi {

    /**
    * Constructs a new ProjectCategoriesApi. 
    * @alias module:api/ProjectCategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProjectCategory operation.
     * @callback module:api/ProjectCategoriesApi~createProjectCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project category
     * Creates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/ProjectCategory} projectCategory 
     * @param {module:api/ProjectCategoriesApi~createProjectCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCategory}
     */
    createProjectCategory(projectCategory, callback) {
      let postBody = projectCategory;
      // verify the required parameter 'projectCategory' is set
      if (projectCategory === undefined || projectCategory === null) {
        throw new Error("Missing the required parameter 'projectCategory' when calling createProjectCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectCategory;
      return this.apiClient.callApi(
        '/rest/api/3/projectCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjectCategories operation.
     * @callback module:api/ProjectCategoriesApi~getAllProjectCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project categories
     * Returns all project categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {module:api/ProjectCategoriesApi~getAllProjectCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCategory>}
     */
    getAllProjectCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectCategory];
      return this.apiClient.callApi(
        '/rest/api/3/projectCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectCategoryById operation.
     * @callback module:api/ProjectCategoriesApi~getProjectCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project category by ID
     * Returns a project category.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Number} id The ID of the project category.
     * @param {module:api/ProjectCategoriesApi~getProjectCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCategory}
     */
    getProjectCategoryById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectCategoryById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCategory;
      return this.apiClient.callApi(
        '/rest/api/3/projectCategory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProjectCategory operation.
     * @callback module:api/ProjectCategoriesApi~removeProjectCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project category
     * Deletes a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id ID of the project category to delete.
     * @param {module:api/ProjectCategoriesApi~removeProjectCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeProjectCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeProjectCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/projectCategory/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectCategory operation.
     * @callback module:api/ProjectCategoriesApi~updateProjectCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatedProjectCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project category
     * Updates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id 
     * @param {module:model/ProjectCategory} projectCategory 
     * @param {module:api/ProjectCategoriesApi~updateProjectCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatedProjectCategory}
     */
    updateProjectCategory(id, projectCategory, callback) {
      let postBody = projectCategory;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProjectCategory");
      }
      // verify the required parameter 'projectCategory' is set
      if (projectCategory === undefined || projectCategory === null) {
        throw new Error("Missing the required parameter 'projectCategory' when calling updateProjectCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatedProjectCategory;
      return this.apiClient.callApi(
        '/rest/api/3/projectCategory/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
