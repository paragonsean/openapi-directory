/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StatusDetails from '../model/StatusDetails';

/**
* WorkflowStatuses service.
* @module api/WorkflowStatusesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class WorkflowStatusesApi {

    /**
    * Constructs a new WorkflowStatusesApi. 
    * @alias module:api/WorkflowStatusesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/WorkflowStatusesApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status
     * Returns a status. The status must be associated with an active workflow to be returned.  If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.  This operation can be accessed anonymously.  [Permissions](#permissions) required: None.
     * @param {String} idOrName The ID or name of the status.
     * @param {module:api/WorkflowStatusesApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusDetails}
     */
    getStatus(idOrName, callback) {
      let postBody = null;
      // verify the required parameter 'idOrName' is set
      if (idOrName === undefined || idOrName === null) {
        throw new Error("Missing the required parameter 'idOrName' when calling getStatus");
      }

      let pathParams = {
        'idOrName': idOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusDetails;
      return this.apiClient.callApi(
        '/rest/api/3/status/{idOrName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatuses operation.
     * @callback module:api/WorkflowStatusesApi~getStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StatusDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all statuses
     * Returns a list of all statuses associated with active workflows.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:api/WorkflowStatusesApi~getStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StatusDetails>}
     */
    getStatuses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StatusDetails];
      return this.apiClient.callApi(
        '/rest/api/3/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
