/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkCustomFieldOptionCreateRequest from '../model/BulkCustomFieldOptionCreateRequest';
import BulkCustomFieldOptionUpdateRequest from '../model/BulkCustomFieldOptionUpdateRequest';
import CustomFieldCreatedContextOptionsList from '../model/CustomFieldCreatedContextOptionsList';
import CustomFieldOption from '../model/CustomFieldOption';
import CustomFieldUpdatedContextOptionsList from '../model/CustomFieldUpdatedContextOptionsList';
import OrderOfCustomFieldOptions from '../model/OrderOfCustomFieldOptions';
import PageBeanCustomFieldContextOption from '../model/PageBeanCustomFieldContextOption';

/**
* IssueCustomFieldOptions service.
* @module api/IssueCustomFieldOptionsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueCustomFieldOptionsApi {

    /**
    * Constructs a new IssueCustomFieldOptionsApi. 
    * @alias module:api/IssueCustomFieldOptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsApi~createCustomFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldCreatedContextOptionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create custom field options (context)
     * Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/BulkCustomFieldOptionCreateRequest} bulkCustomFieldOptionCreateRequest 
     * @param {module:api/IssueCustomFieldOptionsApi~createCustomFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldCreatedContextOptionsList}
     */
    createCustomFieldOption(fieldId, contextId, bulkCustomFieldOptionCreateRequest, callback) {
      let postBody = bulkCustomFieldOptionCreateRequest;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling createCustomFieldOption");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling createCustomFieldOption");
      }
      // verify the required parameter 'bulkCustomFieldOptionCreateRequest' is set
      if (bulkCustomFieldOptionCreateRequest === undefined || bulkCustomFieldOptionCreateRequest === null) {
        throw new Error("Missing the required parameter 'bulkCustomFieldOptionCreateRequest' when calling createCustomFieldOption");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldCreatedContextOptionsList;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/option', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsApi~deleteCustomFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete custom field options (context)
     * Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context from which an option should be deleted.
     * @param {Number} optionId The ID of the option to delete.
     * @param {module:api/IssueCustomFieldOptionsApi~deleteCustomFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomFieldOption(fieldId, contextId, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteCustomFieldOption");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling deleteCustomFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteCustomFieldOption");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsApi~getCustomFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom field option
     * Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     * @param {String} id The ID of the custom field option.
     * @param {module:api/IssueCustomFieldOptionsApi~getCustomFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldOption}
     */
    getCustomFieldOption(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomFieldOption");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomFieldOption;
      return this.apiClient.callApi(
        '/rest/api/3/customFieldOption/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionsForContext operation.
     * @callback module:api/IssueCustomFieldOptionsApi~getOptionsForContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanCustomFieldContextOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom field options (context)
     * Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {Object} opts Optional parameters
     * @param {Number} [optionId] The ID of the option.
     * @param {Boolean} [onlyOptions = false)] Whether only options are returned.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 100)] The maximum number of items to return per page.
     * @param {module:api/IssueCustomFieldOptionsApi~getOptionsForContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanCustomFieldContextOption}
     */
    getOptionsForContext(fieldId, contextId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getOptionsForContext");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling getOptionsForContext");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
        'optionId': opts['optionId'],
        'onlyOptions': opts['onlyOptions'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanCustomFieldContextOption;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/option', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderCustomFieldOptions operation.
     * @callback module:api/IssueCustomFieldOptionsApi~reorderCustomFieldOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder custom field options (context)
     * Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/OrderOfCustomFieldOptions} orderOfCustomFieldOptions 
     * @param {module:api/IssueCustomFieldOptionsApi~reorderCustomFieldOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reorderCustomFieldOptions(fieldId, contextId, orderOfCustomFieldOptions, callback) {
      let postBody = orderOfCustomFieldOptions;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling reorderCustomFieldOptions");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling reorderCustomFieldOptions");
      }
      // verify the required parameter 'orderOfCustomFieldOptions' is set
      if (orderOfCustomFieldOptions === undefined || orderOfCustomFieldOptions === null) {
        throw new Error("Missing the required parameter 'orderOfCustomFieldOptions' when calling reorderCustomFieldOptions");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/option/move', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFieldOption operation.
     * @callback module:api/IssueCustomFieldOptionsApi~updateCustomFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldUpdatedContextOptionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom field options (context)
     * Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} fieldId The ID of the custom field.
     * @param {Number} contextId The ID of the context.
     * @param {module:model/BulkCustomFieldOptionUpdateRequest} bulkCustomFieldOptionUpdateRequest 
     * @param {module:api/IssueCustomFieldOptionsApi~updateCustomFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldUpdatedContextOptionsList}
     */
    updateCustomFieldOption(fieldId, contextId, bulkCustomFieldOptionUpdateRequest, callback) {
      let postBody = bulkCustomFieldOptionUpdateRequest;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateCustomFieldOption");
      }
      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling updateCustomFieldOption");
      }
      // verify the required parameter 'bulkCustomFieldOptionUpdateRequest' is set
      if (bulkCustomFieldOptionUpdateRequest === undefined || bulkCustomFieldOptionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'bulkCustomFieldOptionUpdateRequest' when calling updateCustomFieldOption");
      }

      let pathParams = {
        'fieldId': fieldId,
        'contextId': contextId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldUpdatedContextOptionsList;
      return this.apiClient.callApi(
        '/rest/api/3/field/{fieldId}/context/{contextId}/option', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
