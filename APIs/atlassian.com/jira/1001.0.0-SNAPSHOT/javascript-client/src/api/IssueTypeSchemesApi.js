/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueTypeIds from '../model/IssueTypeIds';
import IssueTypeSchemeDetails from '../model/IssueTypeSchemeDetails';
import IssueTypeSchemeID from '../model/IssueTypeSchemeID';
import IssueTypeSchemeProjectAssociation from '../model/IssueTypeSchemeProjectAssociation';
import IssueTypeSchemeUpdateDetails from '../model/IssueTypeSchemeUpdateDetails';
import OrderOfIssueTypes from '../model/OrderOfIssueTypes';
import PageBeanIssueTypeScheme from '../model/PageBeanIssueTypeScheme';
import PageBeanIssueTypeSchemeMapping from '../model/PageBeanIssueTypeSchemeMapping';
import PageBeanIssueTypeSchemeProjects from '../model/PageBeanIssueTypeSchemeProjects';

/**
* IssueTypeSchemes service.
* @module api/IssueTypeSchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueTypeSchemesApi {

    /**
    * Constructs a new IssueTypeSchemesApi. 
    * @alias module:api/IssueTypeSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addIssueTypesToIssueTypeScheme operation.
     * @callback module:api/IssueTypeSchemesApi~addIssueTypesToIssueTypeSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add issue types to issue type scheme
     * Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} issueTypeSchemeId The ID of the issue type scheme.
     * @param {module:model/IssueTypeIds} issueTypeIds 
     * @param {module:api/IssueTypeSchemesApi~addIssueTypesToIssueTypeSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addIssueTypesToIssueTypeScheme(issueTypeSchemeId, issueTypeIds, callback) {
      let postBody = issueTypeIds;
      // verify the required parameter 'issueTypeSchemeId' is set
      if (issueTypeSchemeId === undefined || issueTypeSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeId' when calling addIssueTypesToIssueTypeScheme");
      }
      // verify the required parameter 'issueTypeIds' is set
      if (issueTypeIds === undefined || issueTypeIds === null) {
        throw new Error("Missing the required parameter 'issueTypeIds' when calling addIssueTypesToIssueTypeScheme");
      }

      let pathParams = {
        'issueTypeSchemeId': issueTypeSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignIssueTypeSchemeToProject operation.
     * @callback module:api/IssueTypeSchemesApi~assignIssueTypeSchemeToProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign issue type scheme to project
     * Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/IssueTypeSchemeProjectAssociation} issueTypeSchemeProjectAssociation 
     * @param {module:api/IssueTypeSchemesApi~assignIssueTypeSchemeToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignIssueTypeSchemeToProject(issueTypeSchemeProjectAssociation, callback) {
      let postBody = issueTypeSchemeProjectAssociation;
      // verify the required parameter 'issueTypeSchemeProjectAssociation' is set
      if (issueTypeSchemeProjectAssociation === undefined || issueTypeSchemeProjectAssociation === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeProjectAssociation' when calling assignIssueTypeSchemeToProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssueTypeScheme operation.
     * @callback module:api/IssueTypeSchemesApi~createIssueTypeSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeSchemeID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue type scheme
     * Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/IssueTypeSchemeDetails} issueTypeSchemeDetails 
     * @param {module:api/IssueTypeSchemesApi~createIssueTypeSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeSchemeID}
     */
    createIssueTypeScheme(issueTypeSchemeDetails, callback) {
      let postBody = issueTypeSchemeDetails;
      // verify the required parameter 'issueTypeSchemeDetails' is set
      if (issueTypeSchemeDetails === undefined || issueTypeSchemeDetails === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeDetails' when calling createIssueTypeScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueTypeSchemeID;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueTypeScheme operation.
     * @callback module:api/IssueTypeSchemesApi~deleteIssueTypeSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue type scheme
     * Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} issueTypeSchemeId The ID of the issue type scheme.
     * @param {module:api/IssueTypeSchemesApi~deleteIssueTypeSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteIssueTypeScheme(issueTypeSchemeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeSchemeId' is set
      if (issueTypeSchemeId === undefined || issueTypeSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeId' when calling deleteIssueTypeScheme");
      }

      let pathParams = {
        'issueTypeSchemeId': issueTypeSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/{issueTypeSchemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIssueTypeSchemes operation.
     * @callback module:api/IssueTypeSchemesApi~getAllIssueTypeSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issue type schemes
     * Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [id] The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
     * @param {module:model/String} [orderBy = 'id')] [Order](#ordering) the results by a field:   *  `name` Sorts by issue type scheme name.  *  `id` Sorts by issue type scheme ID.
     * @param {String} [expand = '')] Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.  *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
     * @param {String} [queryString = '')] String used to perform a case-insensitive partial match with issue type scheme name.
     * @param {module:api/IssueTypeSchemesApi~getAllIssueTypeSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeScheme}
     */
    getAllIssueTypeSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'orderBy': opts['orderBy'],
        'expand': opts['expand'],
        'queryString': opts['queryString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeScheme;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeSchemeForProjects operation.
     * @callback module:api/IssueTypeSchemesApi~getIssueTypeSchemeForProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeSchemeProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type schemes for projects
     * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Array.<Number>} projectId The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/IssueTypeSchemesApi~getIssueTypeSchemeForProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeSchemeProjects}
     */
    getIssueTypeSchemeForProjects(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIssueTypeSchemeForProjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': this.apiClient.buildCollectionParam(projectId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeSchemeProjects;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueTypeSchemesMapping operation.
     * @callback module:api/IssueTypeSchemesApi~getIssueTypeSchemesMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueTypeSchemeMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type scheme items
     * Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {Array.<Number>} [issueTypeSchemeId] The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
     * @param {module:api/IssueTypeSchemesApi~getIssueTypeSchemesMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueTypeSchemeMapping}
     */
    getIssueTypeSchemesMapping(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'issueTypeSchemeId': this.apiClient.buildCollectionParam(opts['issueTypeSchemeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueTypeSchemeMapping;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/mapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeIssueTypeFromIssueTypeScheme operation.
     * @callback module:api/IssueTypeSchemesApi~removeIssueTypeFromIssueTypeSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove issue type from issue type scheme
     * Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} issueTypeSchemeId The ID of the issue type scheme.
     * @param {Number} issueTypeId The ID of the issue type.
     * @param {module:api/IssueTypeSchemesApi~removeIssueTypeFromIssueTypeSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeIssueTypeFromIssueTypeScheme(issueTypeSchemeId, issueTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeSchemeId' is set
      if (issueTypeSchemeId === undefined || issueTypeSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeId' when calling removeIssueTypeFromIssueTypeScheme");
      }
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling removeIssueTypeFromIssueTypeScheme");
      }

      let pathParams = {
        'issueTypeSchemeId': issueTypeSchemeId,
        'issueTypeId': issueTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderIssueTypesInIssueTypeScheme operation.
     * @callback module:api/IssueTypeSchemesApi~reorderIssueTypesInIssueTypeSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change order of issue types
     * Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either `after` or `position` must be provided.  *  the issue type in `after` must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} issueTypeSchemeId The ID of the issue type scheme.
     * @param {module:model/OrderOfIssueTypes} orderOfIssueTypes 
     * @param {module:api/IssueTypeSchemesApi~reorderIssueTypesInIssueTypeSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reorderIssueTypesInIssueTypeScheme(issueTypeSchemeId, orderOfIssueTypes, callback) {
      let postBody = orderOfIssueTypes;
      // verify the required parameter 'issueTypeSchemeId' is set
      if (issueTypeSchemeId === undefined || issueTypeSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeId' when calling reorderIssueTypesInIssueTypeScheme");
      }
      // verify the required parameter 'orderOfIssueTypes' is set
      if (orderOfIssueTypes === undefined || orderOfIssueTypes === null) {
        throw new Error("Missing the required parameter 'orderOfIssueTypes' when calling reorderIssueTypesInIssueTypeScheme");
      }

      let pathParams = {
        'issueTypeSchemeId': issueTypeSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueTypeScheme operation.
     * @callback module:api/IssueTypeSchemesApi~updateIssueTypeSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue type scheme
     * Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} issueTypeSchemeId The ID of the issue type scheme.
     * @param {module:model/IssueTypeSchemeUpdateDetails} issueTypeSchemeUpdateDetails 
     * @param {module:api/IssueTypeSchemesApi~updateIssueTypeSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateIssueTypeScheme(issueTypeSchemeId, issueTypeSchemeUpdateDetails, callback) {
      let postBody = issueTypeSchemeUpdateDetails;
      // verify the required parameter 'issueTypeSchemeId' is set
      if (issueTypeSchemeId === undefined || issueTypeSchemeId === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeId' when calling updateIssueTypeScheme");
      }
      // verify the required parameter 'issueTypeSchemeUpdateDetails' is set
      if (issueTypeSchemeUpdateDetails === undefined || issueTypeSchemeUpdateDetails === null) {
        throw new Error("Missing the required parameter 'issueTypeSchemeUpdateDetails' when calling updateIssueTypeScheme");
      }

      let pathParams = {
        'issueTypeSchemeId': issueTypeSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuetypescheme/{issueTypeSchemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
