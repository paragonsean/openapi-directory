/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultWorkflow from '../model/DefaultWorkflow';
import IssueTypeWorkflowMapping from '../model/IssueTypeWorkflowMapping';
import IssueTypesWorkflowMapping from '../model/IssueTypesWorkflowMapping';
import PageBeanWorkflowScheme from '../model/PageBeanWorkflowScheme';
import WorkflowScheme from '../model/WorkflowScheme';

/**
* WorkflowSchemes service.
* @module api/WorkflowSchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class WorkflowSchemesApi {

    /**
    * Constructs a new WorkflowSchemesApi. 
    * @alias module:api/WorkflowSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkflowScheme operation.
     * @callback module:api/WorkflowSchemesApi~createWorkflowSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create workflow scheme
     * Creates a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/WorkflowScheme} workflowScheme 
     * @param {module:api/WorkflowSchemesApi~createWorkflowSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    createWorkflowScheme(workflowScheme, callback) {
      let postBody = workflowScheme;
      // verify the required parameter 'workflowScheme' is set
      if (workflowScheme === undefined || workflowScheme === null) {
        throw new Error("Missing the required parameter 'workflowScheme' when calling createWorkflowScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDefaultWorkflow operation.
     * @callback module:api/WorkflowSchemesApi~deleteDefaultWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete default workflow
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateDraftIfNeeded] Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
     * @param {module:api/WorkflowSchemesApi~deleteDefaultWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    deleteDefaultWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDefaultWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowMapping operation.
     * @callback module:api/WorkflowSchemesApi~deleteWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue types for workflow in workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} workflowName The name of the workflow.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateDraftIfNeeded] Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
     * @param {module:api/WorkflowSchemesApi~deleteWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflowMapping(id, workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowMapping");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling deleteWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': workflowName,
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/workflow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowScheme operation.
     * @callback module:api/WorkflowSchemesApi~deleteWorkflowSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete workflow scheme
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
     * @param {module:api/WorkflowSchemesApi~deleteWorkflowSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkflowScheme(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowSchemeIssueType operation.
     * @callback module:api/WorkflowSchemesApi~deleteWorkflowSchemeIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete workflow for issue type in workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} issueType The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateDraftIfNeeded] Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.
     * @param {module:api/WorkflowSchemesApi~deleteWorkflowSchemeIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    deleteWorkflowSchemeIssueType(id, issueType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowSchemeIssueType");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling deleteWorkflowSchemeIssueType");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWorkflowSchemes operation.
     * @callback module:api/WorkflowSchemesApi~getAllWorkflowSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanWorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all workflow schemes
     * Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page.
     * @param {module:api/WorkflowSchemesApi~getAllWorkflowSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanWorkflowScheme}
     */
    getAllWorkflowSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanWorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultWorkflow operation.
     * @callback module:api/WorkflowSchemesApi~getDefaultWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultWorkflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default workflow
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnDraftIfExists = false)] Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
     * @param {module:api/WorkflowSchemesApi~getDefaultWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultWorkflow}
     */
    getDefaultWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDefaultWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultWorkflow;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflow operation.
     * @callback module:api/WorkflowSchemesApi~getWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypesWorkflowMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue types for workflows in workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param {Boolean} [returnDraftIfExists = false)] Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @param {module:api/WorkflowSchemesApi~getWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypesWorkflowMapping}
     */
    getWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName'],
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueTypesWorkflowMapping;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowScheme operation.
     * @callback module:api/WorkflowSchemesApi~getWorkflowSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow scheme
     * Returns a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnDraftIfExists = false)] Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
     * @param {module:api/WorkflowSchemesApi~getWorkflowSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    getWorkflowScheme(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflowScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowSchemeIssueType operation.
     * @callback module:api/WorkflowSchemesApi~getWorkflowSchemeIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeWorkflowMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow for issue type in workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} issueType The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnDraftIfExists = false)] Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @param {module:api/WorkflowSchemesApi~getWorkflowSchemeIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeWorkflowMapping}
     */
    getWorkflowSchemeIssueType(id, issueType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflowSchemeIssueType");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling getWorkflowSchemeIssueType");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueTypeWorkflowMapping;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setWorkflowSchemeIssueType operation.
     * @callback module:api/WorkflowSchemesApi~setWorkflowSchemeIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set workflow for issue type in workflow scheme
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} issueType The ID of the issue type.
     * @param {module:model/IssueTypeWorkflowMapping} issueTypeWorkflowMapping The issue type-project mapping.
     * @param {module:api/WorkflowSchemesApi~setWorkflowSchemeIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    setWorkflowSchemeIssueType(id, issueType, issueTypeWorkflowMapping, callback) {
      let postBody = issueTypeWorkflowMapping;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setWorkflowSchemeIssueType");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling setWorkflowSchemeIssueType");
      }
      // verify the required parameter 'issueTypeWorkflowMapping' is set
      if (issueTypeWorkflowMapping === undefined || issueTypeWorkflowMapping === null) {
        throw new Error("Missing the required parameter 'issueTypeWorkflowMapping' when calling setWorkflowSchemeIssueType");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDefaultWorkflow operation.
     * @callback module:api/WorkflowSchemesApi~updateDefaultWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update default workflow
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {module:model/DefaultWorkflow} defaultWorkflow The new default workflow.
     * @param {module:api/WorkflowSchemesApi~updateDefaultWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    updateDefaultWorkflow(id, defaultWorkflow, callback) {
      let postBody = defaultWorkflow;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDefaultWorkflow");
      }
      // verify the required parameter 'defaultWorkflow' is set
      if (defaultWorkflow === undefined || defaultWorkflow === null) {
        throw new Error("Missing the required parameter 'defaultWorkflow' when calling updateDefaultWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflowMapping operation.
     * @callback module:api/WorkflowSchemesApi~updateWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} workflowName The name of the workflow.
     * @param {module:model/IssueTypesWorkflowMapping} issueTypesWorkflowMapping 
     * @param {module:api/WorkflowSchemesApi~updateWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    updateWorkflowMapping(id, workflowName, issueTypesWorkflowMapping, callback) {
      let postBody = issueTypesWorkflowMapping;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflowMapping");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling updateWorkflowMapping");
      }
      // verify the required parameter 'issueTypesWorkflowMapping' is set
      if (issueTypesWorkflowMapping === undefined || issueTypesWorkflowMapping === null) {
        throw new Error("Missing the required parameter 'issueTypesWorkflowMapping' when calling updateWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': workflowName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflowScheme operation.
     * @callback module:api/WorkflowSchemesApi~updateWorkflowSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update workflow scheme
     * Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
     * @param {module:model/WorkflowScheme} workflowScheme 
     * @param {module:api/WorkflowSchemesApi~updateWorkflowSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    updateWorkflowScheme(id, workflowScheme, callback) {
      let postBody = workflowScheme;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflowScheme");
      }
      // verify the required parameter 'workflowScheme' is set
      if (workflowScheme === undefined || workflowScheme === null) {
        throw new Error("Missing the required parameter 'workflowScheme' when calling updateWorkflowScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
