/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueMatches from '../model/IssueMatches';
import IssuePickerSuggestions from '../model/IssuePickerSuggestions';
import IssuesAndJQLQueries from '../model/IssuesAndJQLQueries';
import SearchRequestBean from '../model/SearchRequestBean';
import SearchResults from '../model/SearchResults';

/**
* IssueSearch service.
* @module api/IssueSearchApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueSearchApi {

    /**
    * Constructs a new IssueSearchApi. 
    * @alias module:api/IssueSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getIssuePickerResource operation.
     * @callback module:api/IssueSearchApi~getIssuePickerResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssuePickerSuggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue picker suggestions
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:   *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {Object} opts Optional parameters
     * @param {String} [query] A string to match against text fields in the issue such as title, description, or comments.
     * @param {String} [currentJQL] A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.
     * @param {String} [currentIssueKey] The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.
     * @param {String} [currentProjectId] The ID of a project that suggested issues must belong to.
     * @param {Boolean} [showSubTasks] Indicate whether to include subtasks in the suggestions list.
     * @param {Boolean} [showSubTaskParent] When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.
     * @param {module:api/IssueSearchApi~getIssuePickerResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssuePickerSuggestions}
     */
    getIssuePickerResource(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'currentJQL': opts['currentJQL'],
        'currentIssueKey': opts['currentIssueKey'],
        'currentProjectId': opts['currentProjectId'],
        'showSubTasks': opts['showSubTasks'],
        'showSubTaskParent': opts['showSubTaskParent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssuePickerSuggestions;
      return this.apiClient.callApi(
        '/rest/api/3/issue/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the matchIssues operation.
     * @callback module:api/IssueSearchApi~matchIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueMatches} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check issues against JQL
     * Checks whether one or more issues would be returned by one or more JQL queries.  **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {module:model/IssuesAndJQLQueries} issuesAndJQLQueries 
     * @param {module:api/IssueSearchApi~matchIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueMatches}
     */
    matchIssues(issuesAndJQLQueries, callback) {
      let postBody = issuesAndJQLQueries;
      // verify the required parameter 'issuesAndJQLQueries' is set
      if (issuesAndJQLQueries === undefined || issuesAndJQLQueries === null) {
        throw new Error("Missing the required parameter 'issuesAndJQLQueries' when calling matchIssues");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueMatches;
      return this.apiClient.callApi(
        '/rest/api/3/jql/match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchForIssuesUsingJql operation.
     * @callback module:api/IssueSearchApi~searchForIssuesUsingJqlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for issues using JQL (GET)
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {Object} opts Optional parameters
     * @param {String} [jql] The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:   *  If no JQL expression is provided, all issues are returned.  *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.  *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
     * @param {Number} [startAt = 0)] The index of the first item to return in a page of results (page offset).
     * @param {Number} [maxResults = 50)] The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.
     * @param {module:model/String} [validateQuery = 'strict')] Determines how to validate the JQL query and treat the validation results. Supported values are:   *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).  *  `warn` Returns all errors as warnings.  *  `none` No validation is performed.  *  `true` *Deprecated* A legacy synonym for `strict`.  *  `false` *Deprecated* A legacy synonym for `warn`.  Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
     * @param {Array.<String>} [fields] A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  `summary,comment` Returns only the summary and comments fields.  *  `-description` Returns all navigable (default) fields except description.  *  `*all,-comment` Returns all fields except comments.  This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
     * @param {String} [expand] Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
     * @param {Array.<String>} [properties] A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.
     * @param {Boolean} [fieldsByKeys = false)] Reference fields by their key (rather than ID).
     * @param {module:api/IssueSearchApi~searchForIssuesUsingJqlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    searchForIssuesUsingJql(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'jql': opts['jql'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'validateQuery': opts['validateQuery'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand'],
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'fieldsByKeys': opts['fieldsByKeys']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/rest/api/3/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchForIssuesUsingJqlPost operation.
     * @callback module:api/IssueSearchApi~searchForIssuesUsingJqlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for issues using JQL (POST)
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param {module:model/SearchRequestBean} searchRequestBean A JSON object containing the search request.
     * @param {module:api/IssueSearchApi~searchForIssuesUsingJqlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    searchForIssuesUsingJqlPost(searchRequestBean, callback) {
      let postBody = searchRequestBean;
      // verify the required parameter 'searchRequestBean' is set
      if (searchRequestBean === undefined || searchRequestBean === null) {
        throw new Error("Missing the required parameter 'searchRequestBean' when calling searchForIssuesUsingJqlPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/rest/api/3/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
