/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddSecuritySchemeLevelsRequestBean from '../model/AddSecuritySchemeLevelsRequestBean';
import CreateIssueSecuritySchemeDetails from '../model/CreateIssueSecuritySchemeDetails';
import ErrorCollection from '../model/ErrorCollection';
import PageBeanIssueSecuritySchemeToProjectMapping from '../model/PageBeanIssueSecuritySchemeToProjectMapping';
import PageBeanSecurityLevel from '../model/PageBeanSecurityLevel';
import PageBeanSecurityLevelMember from '../model/PageBeanSecurityLevelMember';
import PageBeanSecuritySchemeWithProjects from '../model/PageBeanSecuritySchemeWithProjects';
import SecurityScheme from '../model/SecurityScheme';
import SecuritySchemeId from '../model/SecuritySchemeId';
import SecuritySchemeMembersRequest from '../model/SecuritySchemeMembersRequest';
import SecuritySchemes from '../model/SecuritySchemes';
import SetDefaultLevelsRequest from '../model/SetDefaultLevelsRequest';
import TaskProgressBeanObject from '../model/TaskProgressBeanObject';
import UpdateIssueSecurityLevelDetails from '../model/UpdateIssueSecurityLevelDetails';
import UpdateIssueSecuritySchemeRequestBean from '../model/UpdateIssueSecuritySchemeRequestBean';

/**
* IssueSecuritySchemes service.
* @module api/IssueSecuritySchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueSecuritySchemesApi {

    /**
    * Constructs a new IssueSecuritySchemesApi. 
    * @alias module:api/IssueSecuritySchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSecurityLevel operation.
     * @callback module:api/IssueSecuritySchemesApi~addSecurityLevelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add issue security levels
     * Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} schemeId The ID of the issue security scheme.
     * @param {module:model/AddSecuritySchemeLevelsRequestBean} addSecuritySchemeLevelsRequestBean 
     * @param {module:api/IssueSecuritySchemesApi~addSecurityLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addSecurityLevel(schemeId, addSecuritySchemeLevelsRequestBean, callback) {
      let postBody = addSecuritySchemeLevelsRequestBean;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling addSecurityLevel");
      }
      // verify the required parameter 'addSecuritySchemeLevelsRequestBean' is set
      if (addSecuritySchemeLevelsRequestBean === undefined || addSecuritySchemeLevelsRequestBean === null) {
        throw new Error("Missing the required parameter 'addSecuritySchemeLevelsRequestBean' when calling addSecurityLevel");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{schemeId}/level', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSecurityLevelMembers operation.
     * @callback module:api/IssueSecuritySchemesApi~addSecurityLevelMembersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add issue security level members
     * Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} schemeId The ID of the issue security scheme.
     * @param {String} levelId The ID of the issue security level.
     * @param {module:model/SecuritySchemeMembersRequest} securitySchemeMembersRequest 
     * @param {module:api/IssueSecuritySchemesApi~addSecurityLevelMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addSecurityLevelMembers(schemeId, levelId, securitySchemeMembersRequest, callback) {
      let postBody = securitySchemeMembersRequest;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling addSecurityLevelMembers");
      }
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling addSecurityLevelMembers");
      }
      // verify the required parameter 'securitySchemeMembersRequest' is set
      if (securitySchemeMembersRequest === undefined || securitySchemeMembersRequest === null) {
        throw new Error("Missing the required parameter 'securitySchemeMembersRequest' when calling addSecurityLevelMembers");
      }

      let pathParams = {
        'schemeId': schemeId,
        'levelId': levelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssueSecurityScheme operation.
     * @callback module:api/IssueSecuritySchemesApi~createIssueSecuritySchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecuritySchemeId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue security scheme
     * Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/CreateIssueSecuritySchemeDetails} createIssueSecuritySchemeDetails 
     * @param {module:api/IssueSecuritySchemesApi~createIssueSecuritySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecuritySchemeId}
     */
    createIssueSecurityScheme(createIssueSecuritySchemeDetails, callback) {
      let postBody = createIssueSecuritySchemeDetails;
      // verify the required parameter 'createIssueSecuritySchemeDetails' is set
      if (createIssueSecuritySchemeDetails === undefined || createIssueSecuritySchemeDetails === null) {
        throw new Error("Missing the required parameter 'createIssueSecuritySchemeDetails' when calling createIssueSecurityScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecuritySchemeId;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurityScheme operation.
     * @callback module:api/IssueSecuritySchemesApi~deleteSecuritySchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue security scheme
     * Deletes an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} schemeId The ID of the issue security scheme.
     * @param {module:api/IssueSecuritySchemesApi~deleteSecuritySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSecurityScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling deleteSecurityScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{schemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueSecurityScheme operation.
     * @callback module:api/IssueSecuritySchemesApi~getIssueSecuritySchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue security scheme
     * Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     * @param {Number} id The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
     * @param {module:api/IssueSecuritySchemesApi~getIssueSecuritySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityScheme}
     */
    getIssueSecurityScheme(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIssueSecurityScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityScheme;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueSecuritySchemes operation.
     * @callback module:api/IssueSecuritySchemesApi~getIssueSecuritySchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecuritySchemes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue security schemes
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:api/IssueSecuritySchemesApi~getIssueSecuritySchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecuritySchemes}
     */
    getIssueSecuritySchemes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecuritySchemes;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityLevelMembers operation.
     * @callback module:api/IssueSecuritySchemesApi~getSecurityLevelMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanSecurityLevelMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue security level members
     * Returns a [paginated](#pagination) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [id] The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.
     * @param {Array.<String>} [schemeId] The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
     * @param {Array.<String>} [levelId] The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.
     * @param {String} [expand] Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about the custom field granted the permission  *  `group` Returns information about the group that is granted the permission  *  `projectRole` Returns information about the project role granted the permission  *  `user` Returns information about the user who is granted the permission
     * @param {module:api/IssueSecuritySchemesApi~getSecurityLevelMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanSecurityLevelMember}
     */
    getSecurityLevelMembers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'schemeId': this.apiClient.buildCollectionParam(opts['schemeId'], 'multi'),
        'levelId': this.apiClient.buildCollectionParam(opts['levelId'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanSecurityLevelMember;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/level/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityLevels operation.
     * @callback module:api/IssueSecuritySchemesApi~getSecurityLevelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanSecurityLevel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue security levels
     * Returns a [paginated](#pagination) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [id] The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.
     * @param {Array.<String>} [schemeId] The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
     * @param {Boolean} [onlyDefault = false)] When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.
     * @param {module:api/IssueSecuritySchemesApi~getSecurityLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanSecurityLevel}
     */
    getSecurityLevels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'schemeId': this.apiClient.buildCollectionParam(opts['schemeId'], 'multi'),
        'onlyDefault': opts['onlyDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanSecurityLevel;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/level', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLevel operation.
     * @callback module:api/IssueSecuritySchemesApi~removeLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove issue security level
     * Deletes an issue security level.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} schemeId The ID of the issue security scheme.
     * @param {String} levelId The ID of the issue security level to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [replaceWith] The ID of the issue security level that will replace the currently selected level.
     * @param {module:api/IssueSecuritySchemesApi~removeLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeLevel(schemeId, levelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling removeLevel");
      }
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling removeLevel");
      }

      let pathParams = {
        'schemeId': schemeId,
        'levelId': levelId
      };
      let queryParams = {
        'replaceWith': opts['replaceWith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMemberFromSecurityLevel operation.
     * @callback module:api/IssueSecuritySchemesApi~removeMemberFromSecurityLevelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove member from issue security level
     * Removes an issue security level member from an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} schemeId The ID of the issue security scheme.
     * @param {String} levelId The ID of the issue security level.
     * @param {String} memberId The ID of the issue security level member to be removed.
     * @param {module:api/IssueSecuritySchemesApi~removeMemberFromSecurityLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeMemberFromSecurityLevel(schemeId, levelId, memberId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling removeMemberFromSecurityLevel");
      }
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling removeMemberFromSecurityLevel");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling removeMemberFromSecurityLevel");
      }

      let pathParams = {
        'schemeId': schemeId,
        'levelId': levelId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchProjectsUsingSecuritySchemes operation.
     * @callback module:api/IssueSecuritySchemesApi~searchProjectsUsingSecuritySchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueSecuritySchemeToProjectMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects using issue security schemes
     * Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [issueSecuritySchemeId] The list of security scheme IDs to be filtered out.
     * @param {Array.<String>} [projectId] The list of project IDs to be filtered out.
     * @param {module:api/IssueSecuritySchemesApi~searchProjectsUsingSecuritySchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueSecuritySchemeToProjectMapping}
     */
    searchProjectsUsingSecuritySchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'issueSecuritySchemeId': this.apiClient.buildCollectionParam(opts['issueSecuritySchemeId'], 'multi'),
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueSecuritySchemeToProjectMapping;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSecuritySchemes operation.
     * @callback module:api/IssueSecuritySchemesApi~searchSecuritySchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanSecuritySchemeWithProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search issue security schemes
     * Returns a [paginated](#pagination) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [id] The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.
     * @param {Array.<String>} [projectId] The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.
     * @param {module:api/IssueSecuritySchemesApi~searchSecuritySchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanSecuritySchemeWithProjects}
     */
    searchSecuritySchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanSecuritySchemeWithProjects;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDefaultLevels operation.
     * @callback module:api/IssueSecuritySchemesApi~setDefaultLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default issue security levels
     * Sets default issue security levels for schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/SetDefaultLevelsRequest} setDefaultLevelsRequest 
     * @param {module:api/IssueSecuritySchemesApi~setDefaultLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setDefaultLevels(setDefaultLevelsRequest, callback) {
      let postBody = setDefaultLevelsRequest;
      // verify the required parameter 'setDefaultLevelsRequest' is set
      if (setDefaultLevelsRequest === undefined || setDefaultLevelsRequest === null) {
        throw new Error("Missing the required parameter 'setDefaultLevelsRequest' when calling setDefaultLevels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/level/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueSecurityScheme operation.
     * @callback module:api/IssueSecuritySchemesApi~updateIssueSecuritySchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue security scheme
     * Updates the issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue security scheme.
     * @param {module:model/UpdateIssueSecuritySchemeRequestBean} updateIssueSecuritySchemeRequestBean 
     * @param {module:api/IssueSecuritySchemesApi~updateIssueSecuritySchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateIssueSecurityScheme(id, updateIssueSecuritySchemeRequestBean, callback) {
      let postBody = updateIssueSecuritySchemeRequestBean;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIssueSecurityScheme");
      }
      // verify the required parameter 'updateIssueSecuritySchemeRequestBean' is set
      if (updateIssueSecuritySchemeRequestBean === undefined || updateIssueSecuritySchemeRequestBean === null) {
        throw new Error("Missing the required parameter 'updateIssueSecuritySchemeRequestBean' when calling updateIssueSecurityScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityLevel operation.
     * @callback module:api/IssueSecuritySchemesApi~updateSecurityLevelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue security level
     * Updates the issue security level.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} schemeId The ID of the issue security scheme level belongs to.
     * @param {String} levelId The ID of the issue security level to update.
     * @param {module:model/UpdateIssueSecurityLevelDetails} updateIssueSecurityLevelDetails 
     * @param {module:api/IssueSecuritySchemesApi~updateSecurityLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateSecurityLevel(schemeId, levelId, updateIssueSecurityLevelDetails, callback) {
      let postBody = updateIssueSecurityLevelDetails;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling updateSecurityLevel");
      }
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling updateSecurityLevel");
      }
      // verify the required parameter 'updateIssueSecurityLevelDetails' is set
      if (updateIssueSecurityLevelDetails === undefined || updateIssueSecurityLevelDetails === null) {
        throw new Error("Missing the required parameter 'updateIssueSecurityLevelDetails' when calling updateSecurityLevel");
      }

      let pathParams = {
        'schemeId': schemeId,
        'levelId': levelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
