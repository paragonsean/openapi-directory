/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultWorkflow from '../model/DefaultWorkflow';
import IssueTypeWorkflowMapping from '../model/IssueTypeWorkflowMapping';
import IssueTypesWorkflowMapping from '../model/IssueTypesWorkflowMapping';
import PublishDraftWorkflowScheme from '../model/PublishDraftWorkflowScheme';
import TaskProgressBeanObject from '../model/TaskProgressBeanObject';
import WorkflowScheme from '../model/WorkflowScheme';

/**
* WorkflowSchemeDrafts service.
* @module api/WorkflowSchemeDraftsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class WorkflowSchemeDraftsApi {

    /**
    * Constructs a new WorkflowSchemeDraftsApi. 
    * @alias module:api/WorkflowSchemeDraftsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkflowSchemeDraftFromParent operation.
     * @callback module:api/WorkflowSchemeDraftsApi~createWorkflowSchemeDraftFromParentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create draft workflow scheme
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the active workflow scheme that the draft is created from.
     * @param {module:api/WorkflowSchemeDraftsApi~createWorkflowSchemeDraftFromParentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    createWorkflowSchemeDraftFromParent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createWorkflowSchemeDraftFromParent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/createdraft', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDraftDefaultWorkflow operation.
     * @callback module:api/WorkflowSchemeDraftsApi~deleteDraftDefaultWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete draft default workflow
     * Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {module:api/WorkflowSchemeDraftsApi~deleteDraftDefaultWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    deleteDraftDefaultWorkflow(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDraftDefaultWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDraftWorkflowMapping operation.
     * @callback module:api/WorkflowSchemeDraftsApi~deleteDraftWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue types for workflow in draft workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} workflowName The name of the workflow.
     * @param {module:api/WorkflowSchemeDraftsApi~deleteDraftWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDraftWorkflowMapping(id, workflowName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDraftWorkflowMapping");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling deleteDraftWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': workflowName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/workflow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowSchemeDraft operation.
     * @callback module:api/WorkflowSchemeDraftsApi~deleteWorkflowSchemeDraftCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete draft workflow scheme
     * Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the active workflow scheme that the draft was created from.
     * @param {module:api/WorkflowSchemeDraftsApi~deleteWorkflowSchemeDraftCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflowSchemeDraft(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowSchemeDraft");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowSchemeDraftIssueType operation.
     * @callback module:api/WorkflowSchemeDraftsApi~deleteWorkflowSchemeDraftIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete workflow for issue type in draft workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} issueType The ID of the issue type.
     * @param {module:api/WorkflowSchemeDraftsApi~deleteWorkflowSchemeDraftIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    deleteWorkflowSchemeDraftIssueType(id, issueType, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowSchemeDraftIssueType");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling deleteWorkflowSchemeDraftIssueType");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftDefaultWorkflow operation.
     * @callback module:api/WorkflowSchemeDraftsApi~getDraftDefaultWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultWorkflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get draft default workflow
     * Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {module:api/WorkflowSchemeDraftsApi~getDraftDefaultWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultWorkflow}
     */
    getDraftDefaultWorkflow(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDraftDefaultWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultWorkflow;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftWorkflow operation.
     * @callback module:api/WorkflowSchemeDraftsApi~getDraftWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypesWorkflowMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue types for workflows in draft workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param {module:api/WorkflowSchemeDraftsApi~getDraftWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypesWorkflowMapping}
     */
    getDraftWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDraftWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueTypesWorkflowMapping;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowSchemeDraft operation.
     * @callback module:api/WorkflowSchemeDraftsApi~getWorkflowSchemeDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get draft workflow scheme
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the active workflow scheme that the draft was created from.
     * @param {module:api/WorkflowSchemeDraftsApi~getWorkflowSchemeDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    getWorkflowSchemeDraft(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflowSchemeDraft");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowSchemeDraftIssueType operation.
     * @callback module:api/WorkflowSchemeDraftsApi~getWorkflowSchemeDraftIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeWorkflowMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow for issue type in draft workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} issueType The ID of the issue type.
     * @param {module:api/WorkflowSchemeDraftsApi~getWorkflowSchemeDraftIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeWorkflowMapping}
     */
    getWorkflowSchemeDraftIssueType(id, issueType, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflowSchemeDraftIssueType");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling getWorkflowSchemeDraftIssueType");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueTypeWorkflowMapping;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishDraftWorkflowScheme operation.
     * @callback module:api/WorkflowSchemeDraftsApi~publishDraftWorkflowSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish draft workflow scheme
     * Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {module:model/PublishDraftWorkflowScheme} publishDraftWorkflowScheme Details of the status mappings.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validateOnly = false)] Whether the request only performs a validation.
     * @param {module:api/WorkflowSchemeDraftsApi~publishDraftWorkflowSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishDraftWorkflowScheme(id, publishDraftWorkflowScheme, opts, callback) {
      opts = opts || {};
      let postBody = publishDraftWorkflowScheme;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publishDraftWorkflowScheme");
      }
      // verify the required parameter 'publishDraftWorkflowScheme' is set
      if (publishDraftWorkflowScheme === undefined || publishDraftWorkflowScheme === null) {
        throw new Error("Missing the required parameter 'publishDraftWorkflowScheme' when calling publishDraftWorkflowScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'validateOnly': opts['validateOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setWorkflowSchemeDraftIssueType operation.
     * @callback module:api/WorkflowSchemeDraftsApi~setWorkflowSchemeDraftIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set workflow for issue type in draft workflow scheme
     * Sets the workflow for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} issueType The ID of the issue type.
     * @param {module:model/IssueTypeWorkflowMapping} issueTypeWorkflowMapping The issue type-project mapping.
     * @param {module:api/WorkflowSchemeDraftsApi~setWorkflowSchemeDraftIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    setWorkflowSchemeDraftIssueType(id, issueType, issueTypeWorkflowMapping, callback) {
      let postBody = issueTypeWorkflowMapping;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setWorkflowSchemeDraftIssueType");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling setWorkflowSchemeDraftIssueType");
      }
      // verify the required parameter 'issueTypeWorkflowMapping' is set
      if (issueTypeWorkflowMapping === undefined || issueTypeWorkflowMapping === null) {
        throw new Error("Missing the required parameter 'issueTypeWorkflowMapping' when calling setWorkflowSchemeDraftIssueType");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDraftDefaultWorkflow operation.
     * @callback module:api/WorkflowSchemeDraftsApi~updateDraftDefaultWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update draft default workflow
     * Sets the default workflow for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {module:model/DefaultWorkflow} defaultWorkflow The object for the new default workflow.
     * @param {module:api/WorkflowSchemeDraftsApi~updateDraftDefaultWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    updateDraftDefaultWorkflow(id, defaultWorkflow, callback) {
      let postBody = defaultWorkflow;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDraftDefaultWorkflow");
      }
      // verify the required parameter 'defaultWorkflow' is set
      if (defaultWorkflow === undefined || defaultWorkflow === null) {
        throw new Error("Missing the required parameter 'defaultWorkflow' when calling updateDraftDefaultWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDraftWorkflowMapping operation.
     * @callback module:api/WorkflowSchemeDraftsApi~updateDraftWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} workflowName The name of the workflow.
     * @param {module:model/IssueTypesWorkflowMapping} issueTypesWorkflowMapping 
     * @param {module:api/WorkflowSchemeDraftsApi~updateDraftWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    updateDraftWorkflowMapping(id, workflowName, issueTypesWorkflowMapping, callback) {
      let postBody = issueTypesWorkflowMapping;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDraftWorkflowMapping");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling updateDraftWorkflowMapping");
      }
      // verify the required parameter 'issueTypesWorkflowMapping' is set
      if (issueTypesWorkflowMapping === undefined || issueTypesWorkflowMapping === null) {
        throw new Error("Missing the required parameter 'issueTypesWorkflowMapping' when calling updateDraftWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': workflowName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflowSchemeDraft operation.
     * @callback module:api/WorkflowSchemeDraftsApi~updateWorkflowSchemeDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update draft workflow scheme
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Number} id The ID of the active workflow scheme that the draft was created from.
     * @param {module:model/WorkflowScheme} workflowScheme 
     * @param {module:api/WorkflowSchemeDraftsApi~updateWorkflowSchemeDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowScheme}
     */
    updateWorkflowSchemeDraft(id, workflowScheme, callback) {
      let postBody = workflowScheme;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflowSchemeDraft");
      }
      // verify the required parameter 'workflowScheme' is set
      if (workflowScheme === undefined || workflowScheme === null) {
        throw new Error("Missing the required parameter 'workflowScheme' when calling updateWorkflowSchemeDraft");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowScheme;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/{id}/draft', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
