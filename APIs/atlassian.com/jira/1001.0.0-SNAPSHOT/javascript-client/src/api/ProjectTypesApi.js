/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProjectType from '../model/ProjectType';

/**
* ProjectTypes service.
* @module api/ProjectTypesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class ProjectTypesApi {

    /**
    * Constructs a new ProjectTypesApi. 
    * @alias module:api/ProjectTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAccessibleProjectTypeByKey operation.
     * @callback module:api/ProjectTypesApi~getAccessibleProjectTypeByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get accessible project type by key
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {module:model/String} projectTypeKey The key of the project type.
     * @param {module:api/ProjectTypesApi~getAccessibleProjectTypeByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectType}
     */
    getAccessibleProjectTypeByKey(projectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectTypeKey' is set
      if (projectTypeKey === undefined || projectTypeKey === null) {
        throw new Error("Missing the required parameter 'projectTypeKey' when calling getAccessibleProjectTypeByKey");
      }

      let pathParams = {
        'projectTypeKey': projectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectType;
      return this.apiClient.callApi(
        '/rest/api/3/project/type/{projectTypeKey}/accessible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccessibleProjectTypes operation.
     * @callback module:api/ProjectTypesApi~getAllAccessibleProjectTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get licensed project types
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
     * @param {module:api/ProjectTypesApi~getAllAccessibleProjectTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectType>}
     */
    getAllAccessibleProjectTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectType];
      return this.apiClient.callApi(
        '/rest/api/3/project/type/accessible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjectTypes operation.
     * @callback module:api/ProjectTypesApi~getAllProjectTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project types
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:api/ProjectTypesApi~getAllProjectTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectType>}
     */
    getAllProjectTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectType];
      return this.apiClient.callApi(
        '/rest/api/3/project/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectTypeByKey operation.
     * @callback module:api/ProjectTypesApi~getProjectTypeByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project type by key
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:model/String} projectTypeKey The key of the project type.
     * @param {module:api/ProjectTypesApi~getProjectTypeByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectType}
     */
    getProjectTypeByKey(projectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectTypeKey' is set
      if (projectTypeKey === undefined || projectTypeKey === null) {
        throw new Error("Missing the required parameter 'projectTypeKey' when calling getProjectTypeByKey");
      }

      let pathParams = {
        'projectTypeKey': projectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectType;
      return this.apiClient.callApi(
        '/rest/api/3/project/type/{projectTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
