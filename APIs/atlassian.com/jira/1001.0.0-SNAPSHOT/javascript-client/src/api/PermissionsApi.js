/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkPermissionGrants from '../model/BulkPermissionGrants';
import BulkPermissionsRequestBean from '../model/BulkPermissionsRequestBean';
import ErrorCollection from '../model/ErrorCollection';
import Permissions from '../model/Permissions';
import PermissionsKeysBean from '../model/PermissionsKeysBean';
import PermittedProjects from '../model/PermittedProjects';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllPermissions operation.
     * @callback module:api/PermissionsApi~getAllPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all permissions
     * Returns all permissions, including:   *  global permissions.  *  project permissions.  *  global permissions added by plugins.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:api/PermissionsApi~getAllPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permissions}
     */
    getAllPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permissions;
      return this.apiClient.callApi(
        '/rest/api/3/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkPermissions operation.
     * @callback module:api/PermissionsApi~getBulkPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkPermissionGrants} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bulk permissions
     * Returns:   *  for a list of global permissions, the global permissions granted to a user.  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.  If no account ID is provided, the operation returns details for the logged in user.  Note that:   *  Invalid project and issue IDs are ignored.  *  A maximum of 1000 projects and 1000 issues can be checked.  *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.  *  Empty strings in `projectPermissions.permissions` are ignored.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.
     * @param {module:model/BulkPermissionsRequestBean} bulkPermissionsRequestBean Details of the permissions to check.
     * @param {module:api/PermissionsApi~getBulkPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkPermissionGrants}
     */
    getBulkPermissions(bulkPermissionsRequestBean, callback) {
      let postBody = bulkPermissionsRequestBean;
      // verify the required parameter 'bulkPermissionsRequestBean' is set
      if (bulkPermissionsRequestBean === undefined || bulkPermissionsRequestBean === null) {
        throw new Error("Missing the required parameter 'bulkPermissionsRequestBean' when calling getBulkPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkPermissionGrants;
      return this.apiClient.callApi(
        '/rest/api/3/permissions/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyPermissions operation.
     * @callback module:api/PermissionsApi~getMyPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get my permissions
     * Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.  The user is reported as having a project permission:   *  in the global context, if the user has the project permission in any project.  *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\\_PROJECTS, a 400 error will be returned.  This means that users may be shown as having an issue permission (such as EDIT\\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\\_ISSUES permission for that issue.  Global permissions are unaffected by context.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {Object} opts Optional parameters
     * @param {String} [projectKey] The key of project. Ignored if `projectId` is provided.
     * @param {String} [projectId] The ID of project.
     * @param {String} [issueKey] The key of the issue. Ignored if `issueId` is provided.
     * @param {String} [issueId] The ID of the issue.
     * @param {String} [permissions] A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).
     * @param {String} [projectUuid] 
     * @param {String} [projectConfigurationUuid] 
     * @param {String} [commentId] The ID of the comment.
     * @param {module:api/PermissionsApi~getMyPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permissions}
     */
    getMyPermissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'projectKey': opts['projectKey'],
        'projectId': opts['projectId'],
        'issueKey': opts['issueKey'],
        'issueId': opts['issueId'],
        'permissions': opts['permissions'],
        'projectUuid': opts['projectUuid'],
        'projectConfigurationUuid': opts['projectConfigurationUuid'],
        'commentId': opts['commentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permissions;
      return this.apiClient.callApi(
        '/rest/api/3/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermittedProjects operation.
     * @callback module:api/PermissionsApi~getPermittedProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermittedProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permitted projects
     * Returns all the projects where the user is granted a list of project permissions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param {module:model/PermissionsKeysBean} permissionsKeysBean 
     * @param {module:api/PermissionsApi~getPermittedProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermittedProjects}
     */
    getPermittedProjects(permissionsKeysBean, callback) {
      let postBody = permissionsKeysBean;
      // verify the required parameter 'permissionsKeysBean' is set
      if (permissionsKeysBean === undefined || permissionsKeysBean === null) {
        throw new Error("Missing the required parameter 'permissionsKeysBean' when calling getPermittedProjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermittedProjects;
      return this.apiClient.callApi(
        '/rest/api/3/permissions/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
