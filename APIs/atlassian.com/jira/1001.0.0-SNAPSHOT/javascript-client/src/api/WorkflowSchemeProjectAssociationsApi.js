/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContainerOfWorkflowSchemeAssociations from '../model/ContainerOfWorkflowSchemeAssociations';
import WorkflowSchemeProjectAssociation from '../model/WorkflowSchemeProjectAssociation';

/**
* WorkflowSchemeProjectAssociations service.
* @module api/WorkflowSchemeProjectAssociationsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class WorkflowSchemeProjectAssociationsApi {

    /**
    * Constructs a new WorkflowSchemeProjectAssociationsApi. 
    * @alias module:api/WorkflowSchemeProjectAssociationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignSchemeToProject operation.
     * @callback module:api/WorkflowSchemeProjectAssociationsApi~assignSchemeToProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign workflow scheme to project
     * Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.  Workflow schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/WorkflowSchemeProjectAssociation} workflowSchemeProjectAssociation 
     * @param {module:api/WorkflowSchemeProjectAssociationsApi~assignSchemeToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignSchemeToProject(workflowSchemeProjectAssociation, callback) {
      let postBody = workflowSchemeProjectAssociation;
      // verify the required parameter 'workflowSchemeProjectAssociation' is set
      if (workflowSchemeProjectAssociation === undefined || workflowSchemeProjectAssociation === null) {
        throw new Error("Missing the required parameter 'workflowSchemeProjectAssociation' when calling assignSchemeToProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowSchemeProjectAssociations operation.
     * @callback module:api/WorkflowSchemeProjectAssociationsApi~getWorkflowSchemeProjectAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerOfWorkflowSchemeAssociations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow scheme project associations
     * Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.  If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {Array.<Number>} projectId The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.
     * @param {module:api/WorkflowSchemeProjectAssociationsApi~getWorkflowSchemeProjectAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerOfWorkflowSchemeAssociations}
     */
    getWorkflowSchemeProjectAssociations(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getWorkflowSchemeProjectAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': this.apiClient.buildCollectionParam(projectId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerOfWorkflowSchemeAssociations;
      return this.apiClient.callApi(
        '/rest/api/3/workflowscheme/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
