/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNotificationsDetails from '../model/AddNotificationsDetails';
import CreateNotificationSchemeDetails from '../model/CreateNotificationSchemeDetails';
import ErrorCollection from '../model/ErrorCollection';
import NotificationScheme from '../model/NotificationScheme';
import NotificationSchemeId from '../model/NotificationSchemeId';
import PageBeanNotificationScheme from '../model/PageBeanNotificationScheme';
import PageBeanNotificationSchemeAndProjectMappingJsonBean from '../model/PageBeanNotificationSchemeAndProjectMappingJsonBean';
import UpdateNotificationSchemeDetails from '../model/UpdateNotificationSchemeDetails';

/**
* IssueNotificationSchemes service.
* @module api/IssueNotificationSchemesApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueNotificationSchemesApi {

    /**
    * Constructs a new IssueNotificationSchemesApi. 
    * @alias module:api/IssueNotificationSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNotifications operation.
     * @callback module:api/IssueNotificationSchemesApi~addNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add notifications to notification scheme
     * Adds notifications to a notification scheme. You can add up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the notification scheme.
     * @param {module:model/AddNotificationsDetails} addNotificationsDetails 
     * @param {module:api/IssueNotificationSchemesApi~addNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addNotifications(id, addNotificationsDetails, callback) {
      let postBody = addNotificationsDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addNotifications");
      }
      // verify the required parameter 'addNotificationsDetails' is set
      if (addNotificationsDetails === undefined || addNotificationsDetails === null) {
        throw new Error("Missing the required parameter 'addNotificationsDetails' when calling addNotifications");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme/{id}/notification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotificationScheme operation.
     * @callback module:api/IssueNotificationSchemesApi~createNotificationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSchemeId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create notification scheme
     * Creates a notification scheme with notifications. You can create up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/CreateNotificationSchemeDetails} createNotificationSchemeDetails 
     * @param {module:api/IssueNotificationSchemesApi~createNotificationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSchemeId}
     */
    createNotificationScheme(createNotificationSchemeDetails, callback) {
      let postBody = createNotificationSchemeDetails;
      // verify the required parameter 'createNotificationSchemeDetails' is set
      if (createNotificationSchemeDetails === undefined || createNotificationSchemeDetails === null) {
        throw new Error("Missing the required parameter 'createNotificationSchemeDetails' when calling createNotificationScheme");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationSchemeId;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationScheme operation.
     * @callback module:api/IssueNotificationSchemesApi~deleteNotificationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete notification scheme
     * Deletes a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} notificationSchemeId The ID of the notification scheme.
     * @param {module:api/IssueNotificationSchemesApi~deleteNotificationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteNotificationScheme(notificationSchemeId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationSchemeId' is set
      if (notificationSchemeId === undefined || notificationSchemeId === null) {
        throw new Error("Missing the required parameter 'notificationSchemeId' when calling deleteNotificationScheme");
      }

      let pathParams = {
        'notificationSchemeId': notificationSchemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme/{notificationSchemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationScheme operation.
     * @callback module:api/IssueNotificationSchemesApi~getNotificationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification scheme
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
     * @param {Number} id The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about any custom fields assigned to receive an event  *  `group` Returns information about any groups assigned to receive an event  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information  *  `projectRole` Returns information about any project roles assigned to receive an event  *  `user` Returns information about any users assigned to receive an event
     * @param {module:api/IssueNotificationSchemesApi~getNotificationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationScheme}
     */
    getNotificationScheme(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotificationScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationScheme;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSchemeToProjectMappings operation.
     * @callback module:api/IssueNotificationSchemesApi~getNotificationSchemeToProjectMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanNotificationSchemeAndProjectMappingJsonBean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects using notification schemes paginated
     * Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [notificationSchemeId] The list of notifications scheme IDs to be filtered out
     * @param {Array.<String>} [projectId] The list of project IDs to be filtered out
     * @param {module:api/IssueNotificationSchemesApi~getNotificationSchemeToProjectMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanNotificationSchemeAndProjectMappingJsonBean}
     */
    getNotificationSchemeToProjectMappings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'notificationSchemeId': this.apiClient.buildCollectionParam(opts['notificationSchemeId'], 'multi'),
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanNotificationSchemeAndProjectMappingJsonBean;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSchemes operation.
     * @callback module:api/IssueNotificationSchemesApi~getNotificationSchemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanNotificationScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification schemes paginated
     * Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.  *Note that you should allow for events without recipients to appear in responses.*  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [id] The list of notification schemes IDs to be filtered by
     * @param {Array.<String>} [projectId] The list of projects IDs to be filtered by
     * @param {Boolean} [onlyDefault = false)] When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.
     * @param {String} [expand] Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about any custom fields assigned to receive an event  *  `group` Returns information about any groups assigned to receive an event  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information  *  `projectRole` Returns information about any project roles assigned to receive an event  *  `user` Returns information about any users assigned to receive an event
     * @param {module:api/IssueNotificationSchemesApi~getNotificationSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanNotificationScheme}
     */
    getNotificationSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'multi'),
        'onlyDefault': opts['onlyDefault'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanNotificationScheme;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNotificationFromNotificationScheme operation.
     * @callback module:api/IssueNotificationSchemesApi~removeNotificationFromNotificationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove notification from notification scheme
     * Removes a notification from a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} notificationSchemeId The ID of the notification scheme.
     * @param {String} notificationId The ID of the notification.
     * @param {module:api/IssueNotificationSchemesApi~removeNotificationFromNotificationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeNotificationFromNotificationScheme(notificationSchemeId, notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationSchemeId' is set
      if (notificationSchemeId === undefined || notificationSchemeId === null) {
        throw new Error("Missing the required parameter 'notificationSchemeId' when calling removeNotificationFromNotificationScheme");
      }
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling removeNotificationFromNotificationScheme");
      }

      let pathParams = {
        'notificationSchemeId': notificationSchemeId,
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationScheme operation.
     * @callback module:api/IssueNotificationSchemesApi~updateNotificationSchemeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update notification scheme
     * Updates a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the notification scheme.
     * @param {module:model/UpdateNotificationSchemeDetails} updateNotificationSchemeDetails 
     * @param {module:api/IssueNotificationSchemesApi~updateNotificationSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNotificationScheme(id, updateNotificationSchemeDetails, callback) {
      let postBody = updateNotificationSchemeDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNotificationScheme");
      }
      // verify the required parameter 'updateNotificationSchemeDetails' is set
      if (updateNotificationSchemeDetails === undefined || updateNotificationSchemeDetails === null) {
        throw new Error("Missing the required parameter 'updateNotificationSchemeDetails' when calling updateNotificationScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/notificationscheme/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
