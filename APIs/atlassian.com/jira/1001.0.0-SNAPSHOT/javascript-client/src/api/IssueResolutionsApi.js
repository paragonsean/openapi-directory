/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateResolutionDetails from '../model/CreateResolutionDetails';
import ErrorCollection from '../model/ErrorCollection';
import PageBeanResolutionJsonBean from '../model/PageBeanResolutionJsonBean';
import ReorderIssueResolutionsRequest from '../model/ReorderIssueResolutionsRequest';
import Resolution from '../model/Resolution';
import ResolutionId from '../model/ResolutionId';
import SetDefaultResolutionRequest from '../model/SetDefaultResolutionRequest';
import TaskProgressBeanObject from '../model/TaskProgressBeanObject';
import UpdateResolutionDetails from '../model/UpdateResolutionDetails';

/**
* IssueResolutions service.
* @module api/IssueResolutionsApi
* @version 1001.0.0-SNAPSHOT
*/
export default class IssueResolutionsApi {

    /**
    * Constructs a new IssueResolutionsApi. 
    * @alias module:api/IssueResolutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createResolution operation.
     * @callback module:api/IssueResolutionsApi~createResolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResolutionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create resolution
     * Creates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/CreateResolutionDetails} createResolutionDetails 
     * @param {module:api/IssueResolutionsApi~createResolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResolutionId}
     */
    createResolution(createResolutionDetails, callback) {
      let postBody = createResolutionDetails;
      // verify the required parameter 'createResolutionDetails' is set
      if (createResolutionDetails === undefined || createResolutionDetails === null) {
        throw new Error("Missing the required parameter 'createResolutionDetails' when calling createResolution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResolutionId;
      return this.apiClient.callApi(
        '/rest/api/3/resolution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResolution operation.
     * @callback module:api/IssueResolutionsApi~deleteResolutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete resolution
     * Deletes an issue resolution.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue resolution.
     * @param {String} replaceWith The ID of the issue resolution that will replace the currently selected resolution.
     * @param {module:api/IssueResolutionsApi~deleteResolutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResolution(id, replaceWith, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteResolution");
      }
      // verify the required parameter 'replaceWith' is set
      if (replaceWith === undefined || replaceWith === null) {
        throw new Error("Missing the required parameter 'replaceWith' when calling deleteResolution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'replaceWith': replaceWith
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/api/3/resolution/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolution operation.
     * @callback module:api/IssueResolutionsApi~getResolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resolution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resolution
     * Returns an issue resolution value.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {String} id The ID of the issue resolution value.
     * @param {module:api/IssueResolutionsApi~getResolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resolution}
     */
    getResolution(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResolution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Resolution;
      return this.apiClient.callApi(
        '/rest/api/3/resolution/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolutions operation.
     * @callback module:api/IssueResolutionsApi~getResolutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Resolution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resolutions
     * Returns a list of all issue resolution values.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {module:api/IssueResolutionsApi~getResolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Resolution>}
     */
    getResolutions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Resolution];
      return this.apiClient.callApi(
        '/rest/api/3/resolution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveResolutions operation.
     * @callback module:api/IssueResolutionsApi~moveResolutionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move resolutions
     * Changes the order of issue resolutions.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/ReorderIssueResolutionsRequest} reorderIssueResolutionsRequest 
     * @param {module:api/IssueResolutionsApi~moveResolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    moveResolutions(reorderIssueResolutionsRequest, callback) {
      let postBody = reorderIssueResolutionsRequest;
      // verify the required parameter 'reorderIssueResolutionsRequest' is set
      if (reorderIssueResolutionsRequest === undefined || reorderIssueResolutionsRequest === null) {
        throw new Error("Missing the required parameter 'reorderIssueResolutionsRequest' when calling moveResolutions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/resolution/move', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchResolutions operation.
     * @callback module:api/IssueResolutionsApi~searchResolutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanResolutionJsonBean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search resolutions
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:   *  a list of resolutions IDs.  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @param {Object} opts Optional parameters
     * @param {String} [startAt = '0')] The index of the first item to return in a page of results (page offset).
     * @param {String} [maxResults = '50')] The maximum number of items to return per page.
     * @param {Array.<String>} [id] The list of resolutions IDs to be filtered out
     * @param {Boolean} [onlyDefault = false)] When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false
     * @param {module:api/IssueResolutionsApi~searchResolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanResolutionJsonBean}
     */
    searchResolutions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'onlyDefault': opts['onlyDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanResolutionJsonBean;
      return this.apiClient.callApi(
        '/rest/api/3/resolution/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDefaultResolution operation.
     * @callback module:api/IssueResolutionsApi~setDefaultResolutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default resolution
     * Sets default issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {module:model/SetDefaultResolutionRequest} setDefaultResolutionRequest 
     * @param {module:api/IssueResolutionsApi~setDefaultResolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setDefaultResolution(setDefaultResolutionRequest, callback) {
      let postBody = setDefaultResolutionRequest;
      // verify the required parameter 'setDefaultResolutionRequest' is set
      if (setDefaultResolutionRequest === undefined || setDefaultResolutionRequest === null) {
        throw new Error("Missing the required parameter 'setDefaultResolutionRequest' when calling setDefaultResolution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/resolution/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResolution operation.
     * @callback module:api/IssueResolutionsApi~updateResolutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update resolution
     * Updates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param {String} id The ID of the issue resolution.
     * @param {module:model/UpdateResolutionDetails} updateResolutionDetails 
     * @param {module:api/IssueResolutionsApi~updateResolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateResolution(id, updateResolutionDetails, callback) {
      let postBody = updateResolutionDetails;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateResolution");
      }
      // verify the required parameter 'updateResolutionDetails' is set
      if (updateResolutionDetails === undefined || updateResolutionDetails === null) {
        throw new Error("Missing the required parameter 'updateResolutionDetails' when calling updateResolution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/api/3/resolution/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
