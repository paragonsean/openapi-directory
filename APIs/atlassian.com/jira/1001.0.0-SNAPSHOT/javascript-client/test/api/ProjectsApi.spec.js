/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheJiraCloudPlatformRestApi);
  }
}(this, function(expect, TheJiraCloudPlatformRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheJiraCloudPlatformRestApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('archiveProject', function() {
      it('should call archiveProject successfully', function(done) {
        //uncomment below and update the code to test archiveProject
        //instance.archiveProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProjectAsynchronously', function() {
      it('should call deleteProjectAsynchronously successfully', function(done) {
        //uncomment below and update the code to test deleteProjectAsynchronously
        //instance.deleteProjectAsynchronously(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllProjects', function() {
      it('should call getAllProjects successfully', function(done) {
        //uncomment below and update the code to test getAllProjects
        //instance.getAllProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllStatuses', function() {
      it('should call getAllStatuses successfully', function(done) {
        //uncomment below and update the code to test getAllStatuses
        //instance.getAllStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHierarchy', function() {
      it('should call getHierarchy successfully', function(done) {
        //uncomment below and update the code to test getHierarchy
        //instance.getHierarchy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNotificationSchemeForProject', function() {
      it('should call getNotificationSchemeForProject successfully', function(done) {
        //uncomment below and update the code to test getNotificationSchemeForProject
        //instance.getNotificationSchemeForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProject', function() {
      it('should call getProject successfully', function(done) {
        //uncomment below and update the code to test getProject
        //instance.getProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecent', function() {
      it('should call getRecent successfully', function(done) {
        //uncomment below and update the code to test getRecent
        //instance.getRecent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restore', function() {
      it('should call restore successfully', function(done) {
        //uncomment below and update the code to test restore
        //instance.restore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchProjects', function() {
      it('should call searchProjects successfully', function(done) {
        //uncomment below and update the code to test searchProjects
        //instance.searchProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectType', function() {
      it('should call updateProjectType successfully', function(done) {
        //uncomment below and update the code to test updateProjectType
        //instance.updateProjectType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
