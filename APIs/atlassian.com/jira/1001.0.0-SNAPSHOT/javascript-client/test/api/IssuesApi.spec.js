/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheJiraCloudPlatformRestApi);
  }
}(this, function(expect, TheJiraCloudPlatformRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheJiraCloudPlatformRestApi.IssuesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IssuesApi', function() {
    describe('assignIssue', function() {
      it('should call assignIssue successfully', function(done) {
        //uncomment below and update the code to test assignIssue
        //instance.assignIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIssue', function() {
      it('should call createIssue successfully', function(done) {
        //uncomment below and update the code to test createIssue
        //instance.createIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIssues', function() {
      it('should call createIssues successfully', function(done) {
        //uncomment below and update the code to test createIssues
        //instance.createIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIssue', function() {
      it('should call deleteIssue successfully', function(done) {
        //uncomment below and update the code to test deleteIssue
        //instance.deleteIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doTransition', function() {
      it('should call doTransition successfully', function(done) {
        //uncomment below and update the code to test doTransition
        //instance.doTransition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editIssue', function() {
      it('should call editIssue successfully', function(done) {
        //uncomment below and update the code to test editIssue
        //instance.editIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangeLogs', function() {
      it('should call getChangeLogs successfully', function(done) {
        //uncomment below and update the code to test getChangeLogs
        //instance.getChangeLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangeLogsByIds', function() {
      it('should call getChangeLogsByIds successfully', function(done) {
        //uncomment below and update the code to test getChangeLogsByIds
        //instance.getChangeLogsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCreateIssueMeta', function() {
      it('should call getCreateIssueMeta successfully', function(done) {
        //uncomment below and update the code to test getCreateIssueMeta
        //instance.getCreateIssueMeta(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEditIssueMeta', function() {
      it('should call getEditIssueMeta successfully', function(done) {
        //uncomment below and update the code to test getEditIssueMeta
        //instance.getEditIssueMeta(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvents', function() {
      it('should call getEvents successfully', function(done) {
        //uncomment below and update the code to test getEvents
        //instance.getEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssue', function() {
      it('should call getIssue successfully', function(done) {
        //uncomment below and update the code to test getIssue
        //instance.getIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTransitions', function() {
      it('should call getTransitions successfully', function(done) {
        //uncomment below and update the code to test getTransitions
        //instance.getTransitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notify', function() {
      it('should call notify successfully', function(done) {
        //uncomment below and update the code to test notify
        //instance.notify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
