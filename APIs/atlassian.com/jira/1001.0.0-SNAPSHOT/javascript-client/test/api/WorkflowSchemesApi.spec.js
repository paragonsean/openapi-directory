/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheJiraCloudPlatformRestApi);
  }
}(this, function(expect, TheJiraCloudPlatformRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheJiraCloudPlatformRestApi.WorkflowSchemesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkflowSchemesApi', function() {
    describe('createWorkflowScheme', function() {
      it('should call createWorkflowScheme successfully', function(done) {
        //uncomment below and update the code to test createWorkflowScheme
        //instance.createWorkflowScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDefaultWorkflow', function() {
      it('should call deleteDefaultWorkflow successfully', function(done) {
        //uncomment below and update the code to test deleteDefaultWorkflow
        //instance.deleteDefaultWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkflowMapping', function() {
      it('should call deleteWorkflowMapping successfully', function(done) {
        //uncomment below and update the code to test deleteWorkflowMapping
        //instance.deleteWorkflowMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkflowScheme', function() {
      it('should call deleteWorkflowScheme successfully', function(done) {
        //uncomment below and update the code to test deleteWorkflowScheme
        //instance.deleteWorkflowScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkflowSchemeIssueType', function() {
      it('should call deleteWorkflowSchemeIssueType successfully', function(done) {
        //uncomment below and update the code to test deleteWorkflowSchemeIssueType
        //instance.deleteWorkflowSchemeIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllWorkflowSchemes', function() {
      it('should call getAllWorkflowSchemes successfully', function(done) {
        //uncomment below and update the code to test getAllWorkflowSchemes
        //instance.getAllWorkflowSchemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefaultWorkflow', function() {
      it('should call getDefaultWorkflow successfully', function(done) {
        //uncomment below and update the code to test getDefaultWorkflow
        //instance.getDefaultWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflow', function() {
      it('should call getWorkflow successfully', function(done) {
        //uncomment below and update the code to test getWorkflow
        //instance.getWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflowScheme', function() {
      it('should call getWorkflowScheme successfully', function(done) {
        //uncomment below and update the code to test getWorkflowScheme
        //instance.getWorkflowScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflowSchemeIssueType', function() {
      it('should call getWorkflowSchemeIssueType successfully', function(done) {
        //uncomment below and update the code to test getWorkflowSchemeIssueType
        //instance.getWorkflowSchemeIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setWorkflowSchemeIssueType', function() {
      it('should call setWorkflowSchemeIssueType successfully', function(done) {
        //uncomment below and update the code to test setWorkflowSchemeIssueType
        //instance.setWorkflowSchemeIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDefaultWorkflow', function() {
      it('should call updateDefaultWorkflow successfully', function(done) {
        //uncomment below and update the code to test updateDefaultWorkflow
        //instance.updateDefaultWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkflowMapping', function() {
      it('should call updateWorkflowMapping successfully', function(done) {
        //uncomment below and update the code to test updateWorkflowMapping
        //instance.updateWorkflowMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkflowScheme', function() {
      it('should call updateWorkflowScheme successfully', function(done) {
        //uncomment below and update the code to test updateWorkflowScheme
        //instance.updateWorkflowScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
