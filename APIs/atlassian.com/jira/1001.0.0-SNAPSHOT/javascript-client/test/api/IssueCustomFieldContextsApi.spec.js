/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheJiraCloudPlatformRestApi);
  }
}(this, function(expect, TheJiraCloudPlatformRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheJiraCloudPlatformRestApi.IssueCustomFieldContextsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IssueCustomFieldContextsApi', function() {
    describe('addIssueTypesToContext', function() {
      it('should call addIssueTypesToContext successfully', function(done) {
        //uncomment below and update the code to test addIssueTypesToContext
        //instance.addIssueTypesToContext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assignProjectsToCustomFieldContext', function() {
      it('should call assignProjectsToCustomFieldContext successfully', function(done) {
        //uncomment below and update the code to test assignProjectsToCustomFieldContext
        //instance.assignProjectsToCustomFieldContext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomFieldContext', function() {
      it('should call createCustomFieldContext successfully', function(done) {
        //uncomment below and update the code to test createCustomFieldContext
        //instance.createCustomFieldContext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomFieldContext', function() {
      it('should call deleteCustomFieldContext successfully', function(done) {
        //uncomment below and update the code to test deleteCustomFieldContext
        //instance.deleteCustomFieldContext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContextsForField', function() {
      it('should call getContextsForField successfully', function(done) {
        //uncomment below and update the code to test getContextsForField
        //instance.getContextsForField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFieldContextsForProjectsAndIssueTypes', function() {
      it('should call getCustomFieldContextsForProjectsAndIssueTypes successfully', function(done) {
        //uncomment below and update the code to test getCustomFieldContextsForProjectsAndIssueTypes
        //instance.getCustomFieldContextsForProjectsAndIssueTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefaultValues', function() {
      it('should call getDefaultValues successfully', function(done) {
        //uncomment below and update the code to test getDefaultValues
        //instance.getDefaultValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueTypeMappingsForContexts', function() {
      it('should call getIssueTypeMappingsForContexts successfully', function(done) {
        //uncomment below and update the code to test getIssueTypeMappingsForContexts
        //instance.getIssueTypeMappingsForContexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectContextMapping', function() {
      it('should call getProjectContextMapping successfully', function(done) {
        //uncomment below and update the code to test getProjectContextMapping
        //instance.getProjectContextMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeCustomFieldContextFromProjects', function() {
      it('should call removeCustomFieldContextFromProjects successfully', function(done) {
        //uncomment below and update the code to test removeCustomFieldContextFromProjects
        //instance.removeCustomFieldContextFromProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeIssueTypesFromContext', function() {
      it('should call removeIssueTypesFromContext successfully', function(done) {
        //uncomment below and update the code to test removeIssueTypesFromContext
        //instance.removeIssueTypesFromContext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDefaultValues', function() {
      it('should call setDefaultValues successfully', function(done) {
        //uncomment below and update the code to test setDefaultValues
        //instance.setDefaultValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomFieldContext', function() {
      it('should call updateCustomFieldContext successfully', function(done) {
        //uncomment below and update the code to test updateCustomFieldContext
        //instance.updateCustomFieldContext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
