/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonTypeBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonTypeBean::OAIJsonTypeBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonTypeBean::OAIJsonTypeBean() {
    this->initializeModel();
}

OAIJsonTypeBean::~OAIJsonTypeBean() {}

void OAIJsonTypeBean::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_custom_id_isSet = false;
    m_custom_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJsonTypeBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonTypeBean::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_custom_id_isValid = ::OpenAPI::fromJsonValue(m_custom_id, json[QString("customId")]);
    m_custom_id_isSet = !json[QString("customId")].isNull() && m_custom_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJsonTypeBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonTypeBean::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.size() > 0) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_custom_id_isSet) {
        obj.insert(QString("customId"), ::OpenAPI::toJsonValue(m_custom_id));
    }
    if (m_items_isSet) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIJsonTypeBean::getConfiguration() const {
    return m_configuration;
}
void OAIJsonTypeBean::setConfiguration(const QMap<QString, QJsonValue> &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIJsonTypeBean::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIJsonTypeBean::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIJsonTypeBean::getCustom() const {
    return m_custom;
}
void OAIJsonTypeBean::setCustom(const QString &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIJsonTypeBean::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIJsonTypeBean::is_custom_Valid() const{
    return m_custom_isValid;
}

qint64 OAIJsonTypeBean::getCustomId() const {
    return m_custom_id;
}
void OAIJsonTypeBean::setCustomId(const qint64 &custom_id) {
    m_custom_id = custom_id;
    m_custom_id_isSet = true;
}

bool OAIJsonTypeBean::is_custom_id_Set() const{
    return m_custom_id_isSet;
}

bool OAIJsonTypeBean::is_custom_id_Valid() const{
    return m_custom_id_isValid;
}

QString OAIJsonTypeBean::getItems() const {
    return m_items;
}
void OAIJsonTypeBean::setItems(const QString &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIJsonTypeBean::is_items_Set() const{
    return m_items_isSet;
}

bool OAIJsonTypeBean::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIJsonTypeBean::getSystem() const {
    return m_system;
}
void OAIJsonTypeBean::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIJsonTypeBean::is_system_Set() const{
    return m_system_isSet;
}

bool OAIJsonTypeBean::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIJsonTypeBean::getType() const {
    return m_type;
}
void OAIJsonTypeBean::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJsonTypeBean::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJsonTypeBean::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJsonTypeBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonTypeBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
