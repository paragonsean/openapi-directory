/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJQLApi_H
#define OAI_OAIJQLApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutoCompleteSuggestions.h"
#include "OAIConvertedJQLQueries.h"
#include "OAIErrorCollection.h"
#include "OAIJQLPersonalDataMigrationRequest.h"
#include "OAIJQLReferenceData.h"
#include "OAIJqlQueriesToParse.h"
#include "OAIJqlQueriesToSanitize.h"
#include "OAIParsedJqlQueries.h"
#include "OAISanitizedJqlQueries.h"
#include "OAISearchAutoCompleteFilter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJQLApi : public QObject {
    Q_OBJECT

public:
    OAIJQLApi(const int timeOut = 0);
    ~OAIJQLApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAutoComplete();

    /**
    * @param[in]  oai_search_auto_complete_filter OAISearchAutoCompleteFilter [required]
    */
    virtual void getAutoCompletePost(const OAISearchAutoCompleteFilter &oai_search_auto_complete_filter);

    /**
    * @param[in]  field_name QString [optional]
    * @param[in]  field_value QString [optional]
    * @param[in]  predicate_name QString [optional]
    * @param[in]  predicate_value QString [optional]
    */
    virtual void getFieldAutoCompleteForQueryString(const ::OpenAPI::OptionalParam<QString> &field_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &field_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &predicate_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &predicate_value = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaijql_personal_data_migration_request OAIJQLPersonalDataMigrationRequest [required]
    */
    virtual void migrateQueries(const OAIJQLPersonalDataMigrationRequest &oaijql_personal_data_migration_request);

    /**
    * @param[in]  oai_jql_queries_to_parse OAIJqlQueriesToParse [required]
    * @param[in]  validation QString [optional]
    */
    virtual void parseJqlQueries(const OAIJqlQueriesToParse &oai_jql_queries_to_parse, const ::OpenAPI::OptionalParam<QString> &validation = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_jql_queries_to_sanitize OAIJqlQueriesToSanitize [required]
    */
    virtual void sanitiseJqlQueries(const OAIJqlQueriesToSanitize &oai_jql_queries_to_sanitize);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAutoCompleteCallback(OAIHttpRequestWorker *worker);
    void getAutoCompletePostCallback(OAIHttpRequestWorker *worker);
    void getFieldAutoCompleteForQueryStringCallback(OAIHttpRequestWorker *worker);
    void migrateQueriesCallback(OAIHttpRequestWorker *worker);
    void parseJqlQueriesCallback(OAIHttpRequestWorker *worker);
    void sanitiseJqlQueriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAutoCompleteSignal(OAIJQLReferenceData summary);
    void getAutoCompletePostSignal(OAIJQLReferenceData summary);
    void getFieldAutoCompleteForQueryStringSignal(OAIAutoCompleteSuggestions summary);
    void migrateQueriesSignal(OAIConvertedJQLQueries summary);
    void parseJqlQueriesSignal(OAIParsedJqlQueries summary);
    void sanitiseJqlQueriesSignal(OAISanitizedJqlQueries summary);


    void getAutoCompleteSignalFull(OAIHttpRequestWorker *worker, OAIJQLReferenceData summary);
    void getAutoCompletePostSignalFull(OAIHttpRequestWorker *worker, OAIJQLReferenceData summary);
    void getFieldAutoCompleteForQueryStringSignalFull(OAIHttpRequestWorker *worker, OAIAutoCompleteSuggestions summary);
    void migrateQueriesSignalFull(OAIHttpRequestWorker *worker, OAIConvertedJQLQueries summary);
    void parseJqlQueriesSignalFull(OAIHttpRequestWorker *worker, OAIParsedJqlQueries summary);
    void sanitiseJqlQueriesSignalFull(OAIHttpRequestWorker *worker, OAISanitizedJqlQueries summary);

    Q_DECL_DEPRECATED_X("Use getAutoCompleteSignalError() instead")
    void getAutoCompleteSignalE(OAIJQLReferenceData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutoCompleteSignalError(OAIJQLReferenceData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutoCompletePostSignalError() instead")
    void getAutoCompletePostSignalE(OAIJQLReferenceData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutoCompletePostSignalError(OAIJQLReferenceData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldAutoCompleteForQueryStringSignalError() instead")
    void getFieldAutoCompleteForQueryStringSignalE(OAIAutoCompleteSuggestions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldAutoCompleteForQueryStringSignalError(OAIAutoCompleteSuggestions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateQueriesSignalError() instead")
    void migrateQueriesSignalE(OAIConvertedJQLQueries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateQueriesSignalError(OAIConvertedJQLQueries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseJqlQueriesSignalError() instead")
    void parseJqlQueriesSignalE(OAIParsedJqlQueries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseJqlQueriesSignalError(OAIParsedJqlQueries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sanitiseJqlQueriesSignalError() instead")
    void sanitiseJqlQueriesSignalE(OAISanitizedJqlQueries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sanitiseJqlQueriesSignalError(OAISanitizedJqlQueries summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAutoCompleteSignalErrorFull() instead")
    void getAutoCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutoCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutoCompletePostSignalErrorFull() instead")
    void getAutoCompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutoCompletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldAutoCompleteForQueryStringSignalErrorFull() instead")
    void getFieldAutoCompleteForQueryStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldAutoCompleteForQueryStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateQueriesSignalErrorFull() instead")
    void migrateQueriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateQueriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseJqlQueriesSignalErrorFull() instead")
    void parseJqlQueriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseJqlQueriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sanitiseJqlQueriesSignalErrorFull() instead")
    void sanitiseJqlQueriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sanitiseJqlQueriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
