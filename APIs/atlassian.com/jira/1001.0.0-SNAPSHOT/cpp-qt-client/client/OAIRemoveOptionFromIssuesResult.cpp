/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveOptionFromIssuesResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveOptionFromIssuesResult::OAIRemoveOptionFromIssuesResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveOptionFromIssuesResult::OAIRemoveOptionFromIssuesResult() {
    this->initializeModel();
}

OAIRemoveOptionFromIssuesResult::~OAIRemoveOptionFromIssuesResult() {}

void OAIRemoveOptionFromIssuesResult::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_modified_issues_isSet = false;
    m_modified_issues_isValid = false;

    m_unmodified_issues_isSet = false;
    m_unmodified_issues_isValid = false;
}

void OAIRemoveOptionFromIssuesResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveOptionFromIssuesResult::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_modified_issues_isValid = ::OpenAPI::fromJsonValue(m_modified_issues, json[QString("modifiedIssues")]);
    m_modified_issues_isSet = !json[QString("modifiedIssues")].isNull() && m_modified_issues_isValid;

    m_unmodified_issues_isValid = ::OpenAPI::fromJsonValue(m_unmodified_issues, json[QString("unmodifiedIssues")]);
    m_unmodified_issues_isSet = !json[QString("unmodifiedIssues")].isNull() && m_unmodified_issues_isValid;
}

QString OAIRemoveOptionFromIssuesResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveOptionFromIssuesResult::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_modified_issues.size() > 0) {
        obj.insert(QString("modifiedIssues"), ::OpenAPI::toJsonValue(m_modified_issues));
    }
    if (m_unmodified_issues.size() > 0) {
        obj.insert(QString("unmodifiedIssues"), ::OpenAPI::toJsonValue(m_unmodified_issues));
    }
    return obj;
}

OAISimpleErrorCollection OAIRemoveOptionFromIssuesResult::getErrors() const {
    return m_errors;
}
void OAIRemoveOptionFromIssuesResult::setErrors(const OAISimpleErrorCollection &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIRemoveOptionFromIssuesResult::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIRemoveOptionFromIssuesResult::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<qint64> OAIRemoveOptionFromIssuesResult::getModifiedIssues() const {
    return m_modified_issues;
}
void OAIRemoveOptionFromIssuesResult::setModifiedIssues(const QList<qint64> &modified_issues) {
    m_modified_issues = modified_issues;
    m_modified_issues_isSet = true;
}

bool OAIRemoveOptionFromIssuesResult::is_modified_issues_Set() const{
    return m_modified_issues_isSet;
}

bool OAIRemoveOptionFromIssuesResult::is_modified_issues_Valid() const{
    return m_modified_issues_isValid;
}

QList<qint64> OAIRemoveOptionFromIssuesResult::getUnmodifiedIssues() const {
    return m_unmodified_issues;
}
void OAIRemoveOptionFromIssuesResult::setUnmodifiedIssues(const QList<qint64> &unmodified_issues) {
    m_unmodified_issues = unmodified_issues;
    m_unmodified_issues_isSet = true;
}

bool OAIRemoveOptionFromIssuesResult::is_unmodified_issues_Set() const{
    return m_unmodified_issues_isSet;
}

bool OAIRemoveOptionFromIssuesResult::is_unmodified_issues_Valid() const{
    return m_unmodified_issues_isValid;
}

bool OAIRemoveOptionFromIssuesResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmodified_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveOptionFromIssuesResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
