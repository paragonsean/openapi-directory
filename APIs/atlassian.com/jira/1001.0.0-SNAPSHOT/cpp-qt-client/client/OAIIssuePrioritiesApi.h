/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssuePrioritiesApi_H
#define OAI_OAIIssuePrioritiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatePriorityDetails.h"
#include "OAIErrorCollection.h"
#include "OAIPageBeanPriority.h"
#include "OAIPriority.h"
#include "OAIPriorityId.h"
#include "OAIReorderIssuePriorities.h"
#include "OAISetDefaultPriorityRequest.h"
#include "OAITaskProgressBeanObject.h"
#include "OAIUpdatePriorityDetails.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssuePrioritiesApi : public QObject {
    Q_OBJECT

public:
    OAIIssuePrioritiesApi(const int timeOut = 0);
    ~OAIIssuePrioritiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_priority_details OAICreatePriorityDetails [required]
    */
    virtual void createPriority(const OAICreatePriorityDetails &oai_create_priority_details);

    /**
    * @param[in]  id QString [required]
    * @param[in]  replace_with QString [required]
    */
    virtual void deletePriority(const QString &id, const QString &replace_with);


    Q_DECL_DEPRECATED virtual void getPriorities();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getPriority(const QString &id);

    /**
    * @param[in]  oai_reorder_issue_priorities OAIReorderIssuePriorities [required]
    */
    virtual void movePriorities(const OAIReorderIssuePriorities &oai_reorder_issue_priorities);

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  only_default bool [optional]
    */
    virtual void searchPriorities(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &only_default = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_set_default_priority_request OAISetDefaultPriorityRequest [required]
    */
    virtual void setDefaultPriority(const OAISetDefaultPriorityRequest &oai_set_default_priority_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_priority_details OAIUpdatePriorityDetails [required]
    */
    virtual void updatePriority(const QString &id, const OAIUpdatePriorityDetails &oai_update_priority_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPriorityCallback(OAIHttpRequestWorker *worker);
    void deletePriorityCallback(OAIHttpRequestWorker *worker);
    void getPrioritiesCallback(OAIHttpRequestWorker *worker);
    void getPriorityCallback(OAIHttpRequestWorker *worker);
    void movePrioritiesCallback(OAIHttpRequestWorker *worker);
    void searchPrioritiesCallback(OAIHttpRequestWorker *worker);
    void setDefaultPriorityCallback(OAIHttpRequestWorker *worker);
    void updatePriorityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPrioritySignal(OAIPriorityId summary);
    void deletePrioritySignal();
    void getPrioritiesSignal(QList<OAIPriority> summary);
    void getPrioritySignal(OAIPriority summary);
    void movePrioritiesSignal(QJsonValue summary);
    void searchPrioritiesSignal(OAIPageBeanPriority summary);
    void setDefaultPrioritySignal(QJsonValue summary);
    void updatePrioritySignal(QJsonValue summary);


    void createPrioritySignalFull(OAIHttpRequestWorker *worker, OAIPriorityId summary);
    void deletePrioritySignalFull(OAIHttpRequestWorker *worker);
    void getPrioritiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPriority> summary);
    void getPrioritySignalFull(OAIHttpRequestWorker *worker, OAIPriority summary);
    void movePrioritiesSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void searchPrioritiesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanPriority summary);
    void setDefaultPrioritySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updatePrioritySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use createPrioritySignalError() instead")
    void createPrioritySignalE(OAIPriorityId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrioritySignalError(OAIPriorityId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePrioritySignalError() instead")
    void deletePrioritySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePrioritySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritiesSignalError() instead")
    void getPrioritiesSignalE(QList<OAIPriority> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritiesSignalError(QList<OAIPriority> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritySignalError() instead")
    void getPrioritySignalE(OAIPriority summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritySignalError(OAIPriority summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movePrioritiesSignalError() instead")
    void movePrioritiesSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movePrioritiesSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchPrioritiesSignalError() instead")
    void searchPrioritiesSignalE(OAIPageBeanPriority summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchPrioritiesSignalError(OAIPageBeanPriority summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultPrioritySignalError() instead")
    void setDefaultPrioritySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultPrioritySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrioritySignalError() instead")
    void updatePrioritySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrioritySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPrioritySignalErrorFull() instead")
    void createPrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePrioritySignalErrorFull() instead")
    void deletePrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritiesSignalErrorFull() instead")
    void getPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritySignalErrorFull() instead")
    void getPrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movePrioritiesSignalErrorFull() instead")
    void movePrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movePrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchPrioritiesSignalErrorFull() instead")
    void searchPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultPrioritySignalErrorFull() instead")
    void setDefaultPrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultPrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrioritySignalErrorFull() instead")
    void updatePrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
