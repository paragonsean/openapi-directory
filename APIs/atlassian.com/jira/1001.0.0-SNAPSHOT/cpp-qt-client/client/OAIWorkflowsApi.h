/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowsApi_H
#define OAI_OAIWorkflowsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateWorkflowDetails.h"
#include "OAIDeprecatedWorkflow.h"
#include "OAIErrorCollection.h"
#include "OAIPageBeanWorkflow.h"
#include "OAIWorkflowIDs.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowsApi(const int timeOut = 0);
    ~OAIWorkflowsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_workflow_details OAICreateWorkflowDetails [required]
    */
    virtual void createWorkflow(const OAICreateWorkflowDetails &oai_create_workflow_details);

    /**
    * @param[in]  entity_id QString [required]
    */
    virtual void deleteInactiveWorkflow(const QString &entity_id);

    /**
    * @param[in]  workflow_name QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getAllWorkflows(const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  workflow_name QSet<QString> [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  query_string QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  is_active bool [optional]
    */
    virtual void getWorkflowsPaginated(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &workflow_name = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkflowCallback(OAIHttpRequestWorker *worker);
    void deleteInactiveWorkflowCallback(OAIHttpRequestWorker *worker);
    void getAllWorkflowsCallback(OAIHttpRequestWorker *worker);
    void getWorkflowsPaginatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkflowSignal(OAIWorkflowIDs summary);
    void deleteInactiveWorkflowSignal();
    void getAllWorkflowsSignal(QList<OAIDeprecatedWorkflow> summary);
    void getWorkflowsPaginatedSignal(OAIPageBeanWorkflow summary);


    void createWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowIDs summary);
    void deleteInactiveWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void getAllWorkflowsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeprecatedWorkflow> summary);
    void getWorkflowsPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanWorkflow summary);

    Q_DECL_DEPRECATED_X("Use createWorkflowSignalError() instead")
    void createWorkflowSignalE(OAIWorkflowIDs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSignalError(OAIWorkflowIDs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInactiveWorkflowSignalError() instead")
    void deleteInactiveWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInactiveWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowsSignalError() instead")
    void getAllWorkflowsSignalE(QList<OAIDeprecatedWorkflow> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowsSignalError(QList<OAIDeprecatedWorkflow> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowsPaginatedSignalError() instead")
    void getWorkflowsPaginatedSignalE(OAIPageBeanWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowsPaginatedSignalError(OAIPageBeanWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkflowSignalErrorFull() instead")
    void createWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInactiveWorkflowSignalErrorFull() instead")
    void deleteInactiveWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInactiveWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowsSignalErrorFull() instead")
    void getAllWorkflowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowsPaginatedSignalErrorFull() instead")
    void getWorkflowsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
