/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectPermissionSchemesApi_H
#define OAI_OAIProjectPermissionSchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIdBean.h"
#include "OAIPermissionScheme.h"
#include "OAIProjectIssueSecurityLevels.h"
#include "OAISecurityScheme.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectPermissionSchemesApi : public QObject {
    Q_OBJECT

public:
    OAIProjectPermissionSchemesApi(const int timeOut = 0);
    ~OAIProjectPermissionSchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_key_or_id QString [required]
    * @param[in]  oaiid_bean OAIIdBean [required]
    * @param[in]  expand QString [optional]
    */
    virtual void assignPermissionScheme(const QString &project_key_or_id, const OAIIdBean &oaiid_bean, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_key_or_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getAssignedPermissionScheme(const QString &project_key_or_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_key_or_id QString [required]
    */
    virtual void getProjectIssueSecurityScheme(const QString &project_key_or_id);

    /**
    * @param[in]  project_key_or_id QString [required]
    */
    virtual void getSecurityLevelsForProject(const QString &project_key_or_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void getAssignedPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void getProjectIssueSecuritySchemeCallback(OAIHttpRequestWorker *worker);
    void getSecurityLevelsForProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignPermissionSchemeSignal(OAIPermissionScheme summary);
    void getAssignedPermissionSchemeSignal(OAIPermissionScheme summary);
    void getProjectIssueSecuritySchemeSignal(OAISecurityScheme summary);
    void getSecurityLevelsForProjectSignal(OAIProjectIssueSecurityLevels summary);


    void assignPermissionSchemeSignalFull(OAIHttpRequestWorker *worker, OAIPermissionScheme summary);
    void getAssignedPermissionSchemeSignalFull(OAIHttpRequestWorker *worker, OAIPermissionScheme summary);
    void getProjectIssueSecuritySchemeSignalFull(OAIHttpRequestWorker *worker, OAISecurityScheme summary);
    void getSecurityLevelsForProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectIssueSecurityLevels summary);

    Q_DECL_DEPRECATED_X("Use assignPermissionSchemeSignalError() instead")
    void assignPermissionSchemeSignalE(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionSchemeSignalError(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssignedPermissionSchemeSignalError() instead")
    void getAssignedPermissionSchemeSignalE(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssignedPermissionSchemeSignalError(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectIssueSecuritySchemeSignalError() instead")
    void getProjectIssueSecuritySchemeSignalE(OAISecurityScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectIssueSecuritySchemeSignalError(OAISecurityScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelsForProjectSignalError() instead")
    void getSecurityLevelsForProjectSignalE(OAIProjectIssueSecurityLevels summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelsForProjectSignalError(OAIProjectIssueSecurityLevels summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignPermissionSchemeSignalErrorFull() instead")
    void assignPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssignedPermissionSchemeSignalErrorFull() instead")
    void getAssignedPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssignedPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectIssueSecuritySchemeSignalErrorFull() instead")
    void getProjectIssueSecuritySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectIssueSecuritySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelsForProjectSignalErrorFull() instead")
    void getSecurityLevelsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
