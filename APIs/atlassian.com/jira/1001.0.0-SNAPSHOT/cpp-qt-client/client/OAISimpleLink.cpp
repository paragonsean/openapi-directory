/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleLink::OAISimpleLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleLink::OAISimpleLink() {
    this->initializeModel();
}

OAISimpleLink::~OAISimpleLink() {}

void OAISimpleLink::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_icon_class_isSet = false;
    m_icon_class_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_style_class_isSet = false;
    m_style_class_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISimpleLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleLink::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_icon_class_isValid = ::OpenAPI::fromJsonValue(m_icon_class, json[QString("iconClass")]);
    m_icon_class_isSet = !json[QString("iconClass")].isNull() && m_icon_class_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_style_class_isValid = ::OpenAPI::fromJsonValue(m_style_class, json[QString("styleClass")]);
    m_style_class_isSet = !json[QString("styleClass")].isNull() && m_style_class_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAISimpleLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleLink::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_icon_class_isSet) {
        obj.insert(QString("iconClass"), ::OpenAPI::toJsonValue(m_icon_class));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_style_class_isSet) {
        obj.insert(QString("styleClass"), ::OpenAPI::toJsonValue(m_style_class));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAISimpleLink::getHref() const {
    return m_href;
}
void OAISimpleLink::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAISimpleLink::is_href_Set() const{
    return m_href_isSet;
}

bool OAISimpleLink::is_href_Valid() const{
    return m_href_isValid;
}

QString OAISimpleLink::getIconClass() const {
    return m_icon_class;
}
void OAISimpleLink::setIconClass(const QString &icon_class) {
    m_icon_class = icon_class;
    m_icon_class_isSet = true;
}

bool OAISimpleLink::is_icon_class_Set() const{
    return m_icon_class_isSet;
}

bool OAISimpleLink::is_icon_class_Valid() const{
    return m_icon_class_isValid;
}

QString OAISimpleLink::getId() const {
    return m_id;
}
void OAISimpleLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimpleLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimpleLink::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISimpleLink::getLabel() const {
    return m_label;
}
void OAISimpleLink::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISimpleLink::is_label_Set() const{
    return m_label_isSet;
}

bool OAISimpleLink::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISimpleLink::getStyleClass() const {
    return m_style_class;
}
void OAISimpleLink::setStyleClass(const QString &style_class) {
    m_style_class = style_class;
    m_style_class_isSet = true;
}

bool OAISimpleLink::is_style_class_Set() const{
    return m_style_class_isSet;
}

bool OAISimpleLink::is_style_class_Valid() const{
    return m_style_class_isValid;
}

QString OAISimpleLink::getTitle() const {
    return m_title;
}
void OAISimpleLink::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISimpleLink::is_title_Set() const{
    return m_title_isSet;
}

bool OAISimpleLink::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAISimpleLink::getWeight() const {
    return m_weight;
}
void OAISimpleLink::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISimpleLink::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISimpleLink::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISimpleLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
