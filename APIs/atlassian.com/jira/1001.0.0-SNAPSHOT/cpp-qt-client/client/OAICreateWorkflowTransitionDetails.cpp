/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkflowTransitionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkflowTransitionDetails::OAICreateWorkflowTransitionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkflowTransitionDetails::OAICreateWorkflowTransitionDetails() {
    this->initializeModel();
}

OAICreateWorkflowTransitionDetails::~OAICreateWorkflowTransitionDetails() {}

void OAICreateWorkflowTransitionDetails::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_screen_isSet = false;
    m_screen_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateWorkflowTransitionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkflowTransitionDetails::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_screen_isValid = ::OpenAPI::fromJsonValue(m_screen, json[QString("screen")]);
    m_screen_isSet = !json[QString("screen")].isNull() && m_screen_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateWorkflowTransitionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkflowTransitionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_from.size() > 0) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_screen.isSet()) {
        obj.insert(QString("screen"), ::OpenAPI::toJsonValue(m_screen));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateWorkflowTransitionDetails::getDescription() const {
    return m_description;
}
void OAICreateWorkflowTransitionDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAICreateWorkflowTransitionDetails::getFrom() const {
    return m_from;
}
void OAICreateWorkflowTransitionDetails::setFrom(const QList<QString> &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_from_Set() const{
    return m_from_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_from_Valid() const{
    return m_from_isValid;
}

QString OAICreateWorkflowTransitionDetails::getName() const {
    return m_name;
}
void OAICreateWorkflowTransitionDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICreateWorkflowTransitionDetails::getProperties() const {
    return m_properties;
}
void OAICreateWorkflowTransitionDetails::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_properties_Valid() const{
    return m_properties_isValid;
}

OAICreateWorkflowTransitionRulesDetails OAICreateWorkflowTransitionDetails::getRules() const {
    return m_rules;
}
void OAICreateWorkflowTransitionDetails::setRules(const OAICreateWorkflowTransitionRulesDetails &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_rules_Valid() const{
    return m_rules_isValid;
}

OAICreateWorkflowTransitionScreenDetails OAICreateWorkflowTransitionDetails::getScreen() const {
    return m_screen;
}
void OAICreateWorkflowTransitionDetails::setScreen(const OAICreateWorkflowTransitionScreenDetails &screen) {
    m_screen = screen;
    m_screen_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_screen_Set() const{
    return m_screen_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_screen_Valid() const{
    return m_screen_isValid;
}

QString OAICreateWorkflowTransitionDetails::getTo() const {
    return m_to;
}
void OAICreateWorkflowTransitionDetails::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_to_Set() const{
    return m_to_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_to_Valid() const{
    return m_to_isValid;
}

QString OAICreateWorkflowTransitionDetails::getType() const {
    return m_type;
}
void OAICreateWorkflowTransitionDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateWorkflowTransitionDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateWorkflowTransitionDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateWorkflowTransitionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkflowTransitionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_to_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
