/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionOperand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionOperand::OAIFunctionOperand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionOperand::OAIFunctionOperand() {
    this->initializeModel();
}

OAIFunctionOperand::~OAIFunctionOperand() {}

void OAIFunctionOperand::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_encoded_operand_isSet = false;
    m_encoded_operand_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;
}

void OAIFunctionOperand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionOperand::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_encoded_operand_isValid = ::OpenAPI::fromJsonValue(m_encoded_operand, json[QString("encodedOperand")]);
    m_encoded_operand_isSet = !json[QString("encodedOperand")].isNull() && m_encoded_operand_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;
}

QString OAIFunctionOperand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionOperand::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_encoded_operand_isSet) {
        obj.insert(QString("encodedOperand"), ::OpenAPI::toJsonValue(m_encoded_operand));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    return obj;
}

QList<QString> OAIFunctionOperand::getArguments() const {
    return m_arguments;
}
void OAIFunctionOperand::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIFunctionOperand::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIFunctionOperand::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIFunctionOperand::getEncodedOperand() const {
    return m_encoded_operand;
}
void OAIFunctionOperand::setEncodedOperand(const QString &encoded_operand) {
    m_encoded_operand = encoded_operand;
    m_encoded_operand_isSet = true;
}

bool OAIFunctionOperand::is_encoded_operand_Set() const{
    return m_encoded_operand_isSet;
}

bool OAIFunctionOperand::is_encoded_operand_Valid() const{
    return m_encoded_operand_isValid;
}

QString OAIFunctionOperand::getFunction() const {
    return m_function;
}
void OAIFunctionOperand::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIFunctionOperand::is_function_Set() const{
    return m_function_isSet;
}

bool OAIFunctionOperand::is_function_Valid() const{
    return m_function_isValid;
}

bool OAIFunctionOperand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionOperand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arguments_isValid && m_function_isValid && true;
}

} // namespace OpenAPI
