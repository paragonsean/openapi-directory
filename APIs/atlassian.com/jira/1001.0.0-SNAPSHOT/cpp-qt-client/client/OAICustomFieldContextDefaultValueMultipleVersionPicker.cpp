/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldContextDefaultValueMultipleVersionPicker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldContextDefaultValueMultipleVersionPicker::OAICustomFieldContextDefaultValueMultipleVersionPicker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldContextDefaultValueMultipleVersionPicker::OAICustomFieldContextDefaultValueMultipleVersionPicker() {
    this->initializeModel();
}

OAICustomFieldContextDefaultValueMultipleVersionPicker::~OAICustomFieldContextDefaultValueMultipleVersionPicker() {}

void OAICustomFieldContextDefaultValueMultipleVersionPicker::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_ids_isSet = false;
    m_version_ids_isValid = false;

    m_version_order_isSet = false;
    m_version_order_isValid = false;
}

void OAICustomFieldContextDefaultValueMultipleVersionPicker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldContextDefaultValueMultipleVersionPicker::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_ids_isValid = ::OpenAPI::fromJsonValue(m_version_ids, json[QString("versionIds")]);
    m_version_ids_isSet = !json[QString("versionIds")].isNull() && m_version_ids_isValid;

    m_version_order_isValid = ::OpenAPI::fromJsonValue(m_version_order, json[QString("versionOrder")]);
    m_version_order_isSet = !json[QString("versionOrder")].isNull() && m_version_order_isValid;
}

QString OAICustomFieldContextDefaultValueMultipleVersionPicker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldContextDefaultValueMultipleVersionPicker::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_ids.size() > 0) {
        obj.insert(QString("versionIds"), ::OpenAPI::toJsonValue(m_version_ids));
    }
    if (m_version_order_isSet) {
        obj.insert(QString("versionOrder"), ::OpenAPI::toJsonValue(m_version_order));
    }
    return obj;
}

QString OAICustomFieldContextDefaultValueMultipleVersionPicker::getType() const {
    return m_type;
}
void OAICustomFieldContextDefaultValueMultipleVersionPicker::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::is_type_Valid() const{
    return m_type_isValid;
}

QSet<QString> OAICustomFieldContextDefaultValueMultipleVersionPicker::getVersionIds() const {
    return m_version_ids;
}
void OAICustomFieldContextDefaultValueMultipleVersionPicker::setVersionIds(const QSet<QString> &version_ids) {
    m_version_ids = version_ids;
    m_version_ids_isSet = true;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::is_version_ids_Set() const{
    return m_version_ids_isSet;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::is_version_ids_Valid() const{
    return m_version_ids_isValid;
}

QString OAICustomFieldContextDefaultValueMultipleVersionPicker::getVersionOrder() const {
    return m_version_order;
}
void OAICustomFieldContextDefaultValueMultipleVersionPicker::setVersionOrder(const QString &version_order) {
    m_version_order = version_order;
    m_version_order_isSet = true;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::is_version_order_Set() const{
    return m_version_order_isSet;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::is_version_order_Valid() const{
    return m_version_order_isValid;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldContextDefaultValueMultipleVersionPicker::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_version_ids_isValid && true;
}

} // namespace OpenAPI
