/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppMigrationApi_H
#define OAI_OAIAppMigrationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectCustomFieldValues.h"
#include "OAIEntityPropertyDetails.h"
#include "OAIWorkflowRulesSearch.h"
#include "OAIWorkflowRulesSearchDetails.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppMigrationApi : public QObject {
    Q_OBJECT

public:
    OAIAppMigrationApi(const int timeOut = 0);
    ~OAIAppMigrationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  atlassian_transfer_id QString [required]
    * @param[in]  oai_connect_custom_field_values OAIConnectCustomFieldValues [required]
    */
    virtual void appIssueFieldValueUpdateResource_updateIssueFieldsPut(const QString &atlassian_transfer_id, const OAIConnectCustomFieldValues &oai_connect_custom_field_values);

    /**
    * @param[in]  atlassian_transfer_id QString [required]
    * @param[in]  entity_type QString [required]
    * @param[in]  oai_entity_property_details QList<OAIEntityPropertyDetails> [required]
    */
    virtual void migrationResource_updateEntityPropertiesValuePut(const QString &atlassian_transfer_id, const QString &entity_type, const QList<OAIEntityPropertyDetails> &oai_entity_property_details);

    /**
    * @param[in]  atlassian_transfer_id QString [required]
    * @param[in]  oai_workflow_rules_search OAIWorkflowRulesSearch [required]
    */
    virtual void migrationResource_workflowRuleSearchPost(const QString &atlassian_transfer_id, const OAIWorkflowRulesSearch &oai_workflow_rules_search);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appIssueFieldValueUpdateResource_updateIssueFieldsPutCallback(OAIHttpRequestWorker *worker);
    void migrationResource_updateEntityPropertiesValuePutCallback(OAIHttpRequestWorker *worker);
    void migrationResource_workflowRuleSearchPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appIssueFieldValueUpdateResource_updateIssueFieldsPutSignal(QJsonValue summary);
    void migrationResource_updateEntityPropertiesValuePutSignal();
    void migrationResource_workflowRuleSearchPostSignal(OAIWorkflowRulesSearchDetails summary);


    void appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void migrationResource_updateEntityPropertiesValuePutSignalFull(OAIHttpRequestWorker *worker);
    void migrationResource_workflowRuleSearchPostSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRulesSearchDetails summary);

    Q_DECL_DEPRECATED_X("Use appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalError() instead")
    void appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrationResource_updateEntityPropertiesValuePutSignalError() instead")
    void migrationResource_updateEntityPropertiesValuePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void migrationResource_updateEntityPropertiesValuePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrationResource_workflowRuleSearchPostSignalError() instead")
    void migrationResource_workflowRuleSearchPostSignalE(OAIWorkflowRulesSearchDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrationResource_workflowRuleSearchPostSignalError(OAIWorkflowRulesSearchDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalErrorFull() instead")
    void appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appIssueFieldValueUpdateResource_updateIssueFieldsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrationResource_updateEntityPropertiesValuePutSignalErrorFull() instead")
    void migrationResource_updateEntityPropertiesValuePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrationResource_updateEntityPropertiesValuePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrationResource_workflowRuleSearchPostSignalErrorFull() instead")
    void migrationResource_workflowRuleSearchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrationResource_workflowRuleSearchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
