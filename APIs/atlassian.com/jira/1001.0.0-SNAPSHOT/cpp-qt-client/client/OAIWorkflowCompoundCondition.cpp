/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowCompoundCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowCompoundCondition::OAIWorkflowCompoundCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowCompoundCondition::OAIWorkflowCompoundCondition() {
    this->initializeModel();
}

OAIWorkflowCompoundCondition::~OAIWorkflowCompoundCondition() {}

void OAIWorkflowCompoundCondition::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIWorkflowCompoundCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowCompoundCondition::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("nodeType")]);
    m_node_type_isSet = !json[QString("nodeType")].isNull() && m_node_type_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAIWorkflowCompoundCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowCompoundCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("nodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QList<OAIWorkflowCondition> OAIWorkflowCompoundCondition::getConditions() const {
    return m_conditions;
}
void OAIWorkflowCompoundCondition::setConditions(const QList<OAIWorkflowCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIWorkflowCompoundCondition::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIWorkflowCompoundCondition::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIWorkflowCompoundCondition::getNodeType() const {
    return m_node_type;
}
void OAIWorkflowCompoundCondition::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIWorkflowCompoundCondition::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIWorkflowCompoundCondition::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIWorkflowCompoundCondition::getROperator() const {
    return m_r_operator;
}
void OAIWorkflowCompoundCondition::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIWorkflowCompoundCondition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIWorkflowCompoundCondition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIWorkflowCompoundCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowCompoundCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conditions_isValid && m_node_type_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
