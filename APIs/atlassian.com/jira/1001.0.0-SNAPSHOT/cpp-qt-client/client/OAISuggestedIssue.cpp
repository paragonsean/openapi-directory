/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestedIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestedIssue::OAISuggestedIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestedIssue::OAISuggestedIssue() {
    this->initializeModel();
}

OAISuggestedIssue::~OAISuggestedIssue() {}

void OAISuggestedIssue::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_img_isSet = false;
    m_img_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key_html_isSet = false;
    m_key_html_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_summary_text_isSet = false;
    m_summary_text_isValid = false;
}

void OAISuggestedIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestedIssue::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_img_isValid = ::OpenAPI::fromJsonValue(m_img, json[QString("img")]);
    m_img_isSet = !json[QString("img")].isNull() && m_img_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key_html_isValid = ::OpenAPI::fromJsonValue(m_key_html, json[QString("keyHtml")]);
    m_key_html_isSet = !json[QString("keyHtml")].isNull() && m_key_html_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_summary_text_isValid = ::OpenAPI::fromJsonValue(m_summary_text, json[QString("summaryText")]);
    m_summary_text_isSet = !json[QString("summaryText")].isNull() && m_summary_text_isValid;
}

QString OAISuggestedIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestedIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_img_isSet) {
        obj.insert(QString("img"), ::OpenAPI::toJsonValue(m_img));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key_html_isSet) {
        obj.insert(QString("keyHtml"), ::OpenAPI::toJsonValue(m_key_html));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_summary_text_isSet) {
        obj.insert(QString("summaryText"), ::OpenAPI::toJsonValue(m_summary_text));
    }
    return obj;
}

qint64 OAISuggestedIssue::getId() const {
    return m_id;
}
void OAISuggestedIssue::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISuggestedIssue::is_id_Set() const{
    return m_id_isSet;
}

bool OAISuggestedIssue::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISuggestedIssue::getImg() const {
    return m_img;
}
void OAISuggestedIssue::setImg(const QString &img) {
    m_img = img;
    m_img_isSet = true;
}

bool OAISuggestedIssue::is_img_Set() const{
    return m_img_isSet;
}

bool OAISuggestedIssue::is_img_Valid() const{
    return m_img_isValid;
}

QString OAISuggestedIssue::getKey() const {
    return m_key;
}
void OAISuggestedIssue::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISuggestedIssue::is_key_Set() const{
    return m_key_isSet;
}

bool OAISuggestedIssue::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISuggestedIssue::getKeyHtml() const {
    return m_key_html;
}
void OAISuggestedIssue::setKeyHtml(const QString &key_html) {
    m_key_html = key_html;
    m_key_html_isSet = true;
}

bool OAISuggestedIssue::is_key_html_Set() const{
    return m_key_html_isSet;
}

bool OAISuggestedIssue::is_key_html_Valid() const{
    return m_key_html_isValid;
}

QString OAISuggestedIssue::getSummary() const {
    return m_summary;
}
void OAISuggestedIssue::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAISuggestedIssue::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAISuggestedIssue::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAISuggestedIssue::getSummaryText() const {
    return m_summary_text;
}
void OAISuggestedIssue::setSummaryText(const QString &summary_text) {
    m_summary_text = summary_text;
    m_summary_text_isSet = true;
}

bool OAISuggestedIssue::is_summary_text_Set() const{
    return m_summary_text_isSet;
}

bool OAISuggestedIssue::is_summary_text_Valid() const{
    return m_summary_text_isValid;
}

bool OAISuggestedIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestedIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
