/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContextualConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContextualConfiguration::OAIContextualConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContextualConfiguration::OAIContextualConfiguration() {
    this->initializeModel();
}

OAIContextualConfiguration::~OAIContextualConfiguration() {}

void OAIContextualConfiguration::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_field_context_id_isSet = false;
    m_field_context_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAIContextualConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContextualConfiguration::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_field_context_id_isValid = ::OpenAPI::fromJsonValue(m_field_context_id, json[QString("fieldContextId")]);
    m_field_context_id_isSet = !json[QString("fieldContextId")].isNull() && m_field_context_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAIContextualConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContextualConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_field_context_id_isSet) {
        obj.insert(QString("fieldContextId"), ::OpenAPI::toJsonValue(m_field_context_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QJsonValue OAIContextualConfiguration::getConfiguration() const {
    return m_configuration;
}
void OAIContextualConfiguration::setConfiguration(const QJsonValue &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIContextualConfiguration::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIContextualConfiguration::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIContextualConfiguration::getFieldContextId() const {
    return m_field_context_id;
}
void OAIContextualConfiguration::setFieldContextId(const QString &field_context_id) {
    m_field_context_id = field_context_id;
    m_field_context_id_isSet = true;
}

bool OAIContextualConfiguration::is_field_context_id_Set() const{
    return m_field_context_id_isSet;
}

bool OAIContextualConfiguration::is_field_context_id_Valid() const{
    return m_field_context_id_isValid;
}

QString OAIContextualConfiguration::getId() const {
    return m_id;
}
void OAIContextualConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContextualConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContextualConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

QJsonValue OAIContextualConfiguration::getSchema() const {
    return m_schema;
}
void OAIContextualConfiguration::setSchema(const QJsonValue &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIContextualConfiguration::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIContextualConfiguration::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIContextualConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContextualConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_context_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
