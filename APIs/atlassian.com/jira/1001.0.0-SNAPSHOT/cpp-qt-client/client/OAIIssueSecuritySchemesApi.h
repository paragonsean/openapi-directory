/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueSecuritySchemesApi_H
#define OAI_OAIIssueSecuritySchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddSecuritySchemeLevelsRequestBean.h"
#include "OAICreateIssueSecuritySchemeDetails.h"
#include "OAIErrorCollection.h"
#include "OAIPageBeanIssueSecuritySchemeToProjectMapping.h"
#include "OAIPageBeanSecurityLevel.h"
#include "OAIPageBeanSecurityLevelMember.h"
#include "OAIPageBeanSecuritySchemeWithProjects.h"
#include "OAISecurityScheme.h"
#include "OAISecuritySchemeId.h"
#include "OAISecuritySchemeMembersRequest.h"
#include "OAISecuritySchemes.h"
#include "OAISetDefaultLevelsRequest.h"
#include "OAITaskProgressBeanObject.h"
#include "OAIUpdateIssueSecurityLevelDetails.h"
#include "OAIUpdateIssueSecuritySchemeRequestBean.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueSecuritySchemesApi : public QObject {
    Q_OBJECT

public:
    OAIIssueSecuritySchemesApi(const int timeOut = 0);
    ~OAIIssueSecuritySchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scheme_id QString [required]
    * @param[in]  oai_add_security_scheme_levels_request_bean OAIAddSecuritySchemeLevelsRequestBean [required]
    */
    virtual void addSecurityLevel(const QString &scheme_id, const OAIAddSecuritySchemeLevelsRequestBean &oai_add_security_scheme_levels_request_bean);

    /**
    * @param[in]  scheme_id QString [required]
    * @param[in]  level_id QString [required]
    * @param[in]  oai_security_scheme_members_request OAISecuritySchemeMembersRequest [required]
    */
    virtual void addSecurityLevelMembers(const QString &scheme_id, const QString &level_id, const OAISecuritySchemeMembersRequest &oai_security_scheme_members_request);

    /**
    * @param[in]  oai_create_issue_security_scheme_details OAICreateIssueSecuritySchemeDetails [required]
    */
    virtual void createIssueSecurityScheme(const OAICreateIssueSecuritySchemeDetails &oai_create_issue_security_scheme_details);

    /**
    * @param[in]  scheme_id QString [required]
    */
    virtual void deleteSecurityScheme(const QString &scheme_id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getIssueSecurityScheme(const qint64 &id);


    virtual void getIssueSecuritySchemes();

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  id QSet<QString> [optional]
    * @param[in]  scheme_id QSet<QString> [optional]
    * @param[in]  level_id QSet<QString> [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getSecurityLevelMembers(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &scheme_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &level_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  id QSet<QString> [optional]
    * @param[in]  scheme_id QSet<QString> [optional]
    * @param[in]  only_default bool [optional]
    */
    virtual void getSecurityLevels(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &scheme_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<bool> &only_default = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  scheme_id QString [required]
    * @param[in]  level_id QString [required]
    * @param[in]  replace_with QString [optional]
    */
    virtual void removeLevel(const QString &scheme_id, const QString &level_id, const ::OpenAPI::OptionalParam<QString> &replace_with = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id QString [required]
    * @param[in]  level_id QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void removeMemberFromSecurityLevel(const QString &scheme_id, const QString &level_id, const QString &member_id);

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  issue_security_scheme_id QSet<QString> [optional]
    * @param[in]  project_id QSet<QString> [optional]
    */
    virtual void searchProjectsUsingSecuritySchemes(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &issue_security_scheme_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &project_id = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  id QSet<QString> [optional]
    * @param[in]  project_id QSet<QString> [optional]
    */
    virtual void searchSecuritySchemes(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &project_id = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  oai_set_default_levels_request OAISetDefaultLevelsRequest [required]
    */
    virtual void setDefaultLevels(const OAISetDefaultLevelsRequest &oai_set_default_levels_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_issue_security_scheme_request_bean OAIUpdateIssueSecuritySchemeRequestBean [required]
    */
    virtual void updateIssueSecurityScheme(const QString &id, const OAIUpdateIssueSecuritySchemeRequestBean &oai_update_issue_security_scheme_request_bean);

    /**
    * @param[in]  scheme_id QString [required]
    * @param[in]  level_id QString [required]
    * @param[in]  oai_update_issue_security_level_details OAIUpdateIssueSecurityLevelDetails [required]
    */
    virtual void updateSecurityLevel(const QString &scheme_id, const QString &level_id, const OAIUpdateIssueSecurityLevelDetails &oai_update_issue_security_level_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSecurityLevelCallback(OAIHttpRequestWorker *worker);
    void addSecurityLevelMembersCallback(OAIHttpRequestWorker *worker);
    void createIssueSecuritySchemeCallback(OAIHttpRequestWorker *worker);
    void deleteSecuritySchemeCallback(OAIHttpRequestWorker *worker);
    void getIssueSecuritySchemeCallback(OAIHttpRequestWorker *worker);
    void getIssueSecuritySchemesCallback(OAIHttpRequestWorker *worker);
    void getSecurityLevelMembersCallback(OAIHttpRequestWorker *worker);
    void getSecurityLevelsCallback(OAIHttpRequestWorker *worker);
    void removeLevelCallback(OAIHttpRequestWorker *worker);
    void removeMemberFromSecurityLevelCallback(OAIHttpRequestWorker *worker);
    void searchProjectsUsingSecuritySchemesCallback(OAIHttpRequestWorker *worker);
    void searchSecuritySchemesCallback(OAIHttpRequestWorker *worker);
    void setDefaultLevelsCallback(OAIHttpRequestWorker *worker);
    void updateIssueSecuritySchemeCallback(OAIHttpRequestWorker *worker);
    void updateSecurityLevelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSecurityLevelSignal(QJsonValue summary);
    void addSecurityLevelMembersSignal(QJsonValue summary);
    void createIssueSecuritySchemeSignal(OAISecuritySchemeId summary);
    void deleteSecuritySchemeSignal(QJsonValue summary);
    void getIssueSecuritySchemeSignal(OAISecurityScheme summary);
    void getIssueSecuritySchemesSignal(OAISecuritySchemes summary);
    void getSecurityLevelMembersSignal(OAIPageBeanSecurityLevelMember summary);
    void getSecurityLevelsSignal(OAIPageBeanSecurityLevel summary);
    void removeLevelSignal();
    void removeMemberFromSecurityLevelSignal(QJsonValue summary);
    void searchProjectsUsingSecuritySchemesSignal(OAIPageBeanIssueSecuritySchemeToProjectMapping summary);
    void searchSecuritySchemesSignal(OAIPageBeanSecuritySchemeWithProjects summary);
    void setDefaultLevelsSignal(QJsonValue summary);
    void updateIssueSecuritySchemeSignal(QJsonValue summary);
    void updateSecurityLevelSignal(QJsonValue summary);


    void addSecurityLevelSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void addSecurityLevelMembersSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createIssueSecuritySchemeSignalFull(OAIHttpRequestWorker *worker, OAISecuritySchemeId summary);
    void deleteSecuritySchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getIssueSecuritySchemeSignalFull(OAIHttpRequestWorker *worker, OAISecurityScheme summary);
    void getIssueSecuritySchemesSignalFull(OAIHttpRequestWorker *worker, OAISecuritySchemes summary);
    void getSecurityLevelMembersSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanSecurityLevelMember summary);
    void getSecurityLevelsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanSecurityLevel summary);
    void removeLevelSignalFull(OAIHttpRequestWorker *worker);
    void removeMemberFromSecurityLevelSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void searchProjectsUsingSecuritySchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueSecuritySchemeToProjectMapping summary);
    void searchSecuritySchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanSecuritySchemeWithProjects summary);
    void setDefaultLevelsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateIssueSecuritySchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateSecurityLevelSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use addSecurityLevelSignalError() instead")
    void addSecurityLevelSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSecurityLevelSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addSecurityLevelMembersSignalError() instead")
    void addSecurityLevelMembersSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSecurityLevelMembersSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueSecuritySchemeSignalError() instead")
    void createIssueSecuritySchemeSignalE(OAISecuritySchemeId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueSecuritySchemeSignalError(OAISecuritySchemeId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSecuritySchemeSignalError() instead")
    void deleteSecuritySchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSecuritySchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSecuritySchemeSignalError() instead")
    void getIssueSecuritySchemeSignalE(OAISecurityScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSecuritySchemeSignalError(OAISecurityScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSecuritySchemesSignalError() instead")
    void getIssueSecuritySchemesSignalE(OAISecuritySchemes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSecuritySchemesSignalError(OAISecuritySchemes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelMembersSignalError() instead")
    void getSecurityLevelMembersSignalE(OAIPageBeanSecurityLevelMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelMembersSignalError(OAIPageBeanSecurityLevelMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelsSignalError() instead")
    void getSecurityLevelsSignalE(OAIPageBeanSecurityLevel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelsSignalError(OAIPageBeanSecurityLevel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeLevelSignalError() instead")
    void removeLevelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeLevelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMemberFromSecurityLevelSignalError() instead")
    void removeMemberFromSecurityLevelSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMemberFromSecurityLevelSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProjectsUsingSecuritySchemesSignalError() instead")
    void searchProjectsUsingSecuritySchemesSignalE(OAIPageBeanIssueSecuritySchemeToProjectMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProjectsUsingSecuritySchemesSignalError(OAIPageBeanIssueSecuritySchemeToProjectMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSecuritySchemesSignalError() instead")
    void searchSecuritySchemesSignalE(OAIPageBeanSecuritySchemeWithProjects summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSecuritySchemesSignalError(OAIPageBeanSecuritySchemeWithProjects summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultLevelsSignalError() instead")
    void setDefaultLevelsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultLevelsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueSecuritySchemeSignalError() instead")
    void updateIssueSecuritySchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueSecuritySchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSecurityLevelSignalError() instead")
    void updateSecurityLevelSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSecurityLevelSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSecurityLevelSignalErrorFull() instead")
    void addSecurityLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSecurityLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addSecurityLevelMembersSignalErrorFull() instead")
    void addSecurityLevelMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSecurityLevelMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueSecuritySchemeSignalErrorFull() instead")
    void createIssueSecuritySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueSecuritySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSecuritySchemeSignalErrorFull() instead")
    void deleteSecuritySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSecuritySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSecuritySchemeSignalErrorFull() instead")
    void getIssueSecuritySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSecuritySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSecuritySchemesSignalErrorFull() instead")
    void getIssueSecuritySchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSecuritySchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelMembersSignalErrorFull() instead")
    void getSecurityLevelMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelsSignalErrorFull() instead")
    void getSecurityLevelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeLevelSignalErrorFull() instead")
    void removeLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMemberFromSecurityLevelSignalErrorFull() instead")
    void removeMemberFromSecurityLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMemberFromSecurityLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProjectsUsingSecuritySchemesSignalErrorFull() instead")
    void searchProjectsUsingSecuritySchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProjectsUsingSecuritySchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSecuritySchemesSignalErrorFull() instead")
    void searchSecuritySchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSecuritySchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultLevelsSignalErrorFull() instead")
    void setDefaultLevelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultLevelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueSecuritySchemeSignalErrorFull() instead")
    void updateIssueSecuritySchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueSecuritySchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSecurityLevelSignalErrorFull() instead")
    void updateSecurityLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSecurityLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
