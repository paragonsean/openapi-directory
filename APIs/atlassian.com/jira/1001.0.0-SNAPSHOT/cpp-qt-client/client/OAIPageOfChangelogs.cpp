/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageOfChangelogs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageOfChangelogs::OAIPageOfChangelogs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageOfChangelogs::OAIPageOfChangelogs() {
    this->initializeModel();
}

OAIPageOfChangelogs::~OAIPageOfChangelogs() {}

void OAIPageOfChangelogs::initializeModel() {

    m_histories_isSet = false;
    m_histories_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPageOfChangelogs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageOfChangelogs::fromJsonObject(QJsonObject json) {

    m_histories_isValid = ::OpenAPI::fromJsonValue(m_histories, json[QString("histories")]);
    m_histories_isSet = !json[QString("histories")].isNull() && m_histories_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPageOfChangelogs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageOfChangelogs::asJsonObject() const {
    QJsonObject obj;
    if (m_histories.size() > 0) {
        obj.insert(QString("histories"), ::OpenAPI::toJsonValue(m_histories));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIChangelog> OAIPageOfChangelogs::getHistories() const {
    return m_histories;
}
void OAIPageOfChangelogs::setHistories(const QList<OAIChangelog> &histories) {
    m_histories = histories;
    m_histories_isSet = true;
}

bool OAIPageOfChangelogs::is_histories_Set() const{
    return m_histories_isSet;
}

bool OAIPageOfChangelogs::is_histories_Valid() const{
    return m_histories_isValid;
}

qint32 OAIPageOfChangelogs::getMaxResults() const {
    return m_max_results;
}
void OAIPageOfChangelogs::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIPageOfChangelogs::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIPageOfChangelogs::is_max_results_Valid() const{
    return m_max_results_isValid;
}

qint32 OAIPageOfChangelogs::getStartAt() const {
    return m_start_at;
}
void OAIPageOfChangelogs::setStartAt(const qint32 &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIPageOfChangelogs::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIPageOfChangelogs::is_start_at_Valid() const{
    return m_start_at_isValid;
}

qint32 OAIPageOfChangelogs::getTotal() const {
    return m_total;
}
void OAIPageOfChangelogs::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPageOfChangelogs::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPageOfChangelogs::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPageOfChangelogs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_histories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageOfChangelogs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
