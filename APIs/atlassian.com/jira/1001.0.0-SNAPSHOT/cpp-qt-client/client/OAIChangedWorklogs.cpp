/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangedWorklogs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangedWorklogs::OAIChangedWorklogs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangedWorklogs::OAIChangedWorklogs() {
    this->initializeModel();
}

OAIChangedWorklogs::~OAIChangedWorklogs() {}

void OAIChangedWorklogs::initializeModel() {

    m_last_page_isSet = false;
    m_last_page_isValid = false;

    m_next_page_isSet = false;
    m_next_page_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_since_isSet = false;
    m_since_isValid = false;

    m_until_isSet = false;
    m_until_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIChangedWorklogs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangedWorklogs::fromJsonObject(QJsonObject json) {

    m_last_page_isValid = ::OpenAPI::fromJsonValue(m_last_page, json[QString("lastPage")]);
    m_last_page_isSet = !json[QString("lastPage")].isNull() && m_last_page_isValid;

    m_next_page_isValid = ::OpenAPI::fromJsonValue(m_next_page, json[QString("nextPage")]);
    m_next_page_isSet = !json[QString("nextPage")].isNull() && m_next_page_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_since_isValid = ::OpenAPI::fromJsonValue(m_since, json[QString("since")]);
    m_since_isSet = !json[QString("since")].isNull() && m_since_isValid;

    m_until_isValid = ::OpenAPI::fromJsonValue(m_until, json[QString("until")]);
    m_until_isSet = !json[QString("until")].isNull() && m_until_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIChangedWorklogs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangedWorklogs::asJsonObject() const {
    QJsonObject obj;
    if (m_last_page_isSet) {
        obj.insert(QString("lastPage"), ::OpenAPI::toJsonValue(m_last_page));
    }
    if (m_next_page_isSet) {
        obj.insert(QString("nextPage"), ::OpenAPI::toJsonValue(m_next_page));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_since_isSet) {
        obj.insert(QString("since"), ::OpenAPI::toJsonValue(m_since));
    }
    if (m_until_isSet) {
        obj.insert(QString("until"), ::OpenAPI::toJsonValue(m_until));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAIChangedWorklogs::isLastPage() const {
    return m_last_page;
}
void OAIChangedWorklogs::setLastPage(const bool &last_page) {
    m_last_page = last_page;
    m_last_page_isSet = true;
}

bool OAIChangedWorklogs::is_last_page_Set() const{
    return m_last_page_isSet;
}

bool OAIChangedWorklogs::is_last_page_Valid() const{
    return m_last_page_isValid;
}

QString OAIChangedWorklogs::getNextPage() const {
    return m_next_page;
}
void OAIChangedWorklogs::setNextPage(const QString &next_page) {
    m_next_page = next_page;
    m_next_page_isSet = true;
}

bool OAIChangedWorklogs::is_next_page_Set() const{
    return m_next_page_isSet;
}

bool OAIChangedWorklogs::is_next_page_Valid() const{
    return m_next_page_isValid;
}

QString OAIChangedWorklogs::getSelf() const {
    return m_self;
}
void OAIChangedWorklogs::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIChangedWorklogs::is_self_Set() const{
    return m_self_isSet;
}

bool OAIChangedWorklogs::is_self_Valid() const{
    return m_self_isValid;
}

qint64 OAIChangedWorklogs::getSince() const {
    return m_since;
}
void OAIChangedWorklogs::setSince(const qint64 &since) {
    m_since = since;
    m_since_isSet = true;
}

bool OAIChangedWorklogs::is_since_Set() const{
    return m_since_isSet;
}

bool OAIChangedWorklogs::is_since_Valid() const{
    return m_since_isValid;
}

qint64 OAIChangedWorklogs::getUntil() const {
    return m_until;
}
void OAIChangedWorklogs::setUntil(const qint64 &until) {
    m_until = until;
    m_until_isSet = true;
}

bool OAIChangedWorklogs::is_until_Set() const{
    return m_until_isSet;
}

bool OAIChangedWorklogs::is_until_Valid() const{
    return m_until_isValid;
}

QList<OAIChangedWorklog> OAIChangedWorklogs::getValues() const {
    return m_values;
}
void OAIChangedWorklogs::setValues(const QList<OAIChangedWorklog> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIChangedWorklogs::is_values_Set() const{
    return m_values_isSet;
}

bool OAIChangedWorklogs::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIChangedWorklogs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangedWorklogs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
