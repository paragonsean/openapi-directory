/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJiraExpressionAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJiraExpressionAnalysis::OAIJiraExpressionAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJiraExpressionAnalysis::OAIJiraExpressionAnalysis() {
    this->initializeModel();
}

OAIJiraExpressionAnalysis::~OAIJiraExpressionAnalysis() {}

void OAIJiraExpressionAnalysis::initializeModel() {

    m_complexity_isSet = false;
    m_complexity_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIJiraExpressionAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJiraExpressionAnalysis::fromJsonObject(QJsonObject json) {

    m_complexity_isValid = ::OpenAPI::fromJsonValue(m_complexity, json[QString("complexity")]);
    m_complexity_isSet = !json[QString("complexity")].isNull() && m_complexity_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIJiraExpressionAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJiraExpressionAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_complexity.isSet()) {
        obj.insert(QString("complexity"), ::OpenAPI::toJsonValue(m_complexity));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

OAIJiraExpressionComplexity OAIJiraExpressionAnalysis::getComplexity() const {
    return m_complexity;
}
void OAIJiraExpressionAnalysis::setComplexity(const OAIJiraExpressionComplexity &complexity) {
    m_complexity = complexity;
    m_complexity_isSet = true;
}

bool OAIJiraExpressionAnalysis::is_complexity_Set() const{
    return m_complexity_isSet;
}

bool OAIJiraExpressionAnalysis::is_complexity_Valid() const{
    return m_complexity_isValid;
}

QList<OAIJiraExpressionValidationError> OAIJiraExpressionAnalysis::getErrors() const {
    return m_errors;
}
void OAIJiraExpressionAnalysis::setErrors(const QList<OAIJiraExpressionValidationError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIJiraExpressionAnalysis::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIJiraExpressionAnalysis::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIJiraExpressionAnalysis::getExpression() const {
    return m_expression;
}
void OAIJiraExpressionAnalysis::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIJiraExpressionAnalysis::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIJiraExpressionAnalysis::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIJiraExpressionAnalysis::getType() const {
    return m_type;
}
void OAIJiraExpressionAnalysis::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJiraExpressionAnalysis::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJiraExpressionAnalysis::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJiraExpressionAnalysis::isRValid() const {
    return m_r_valid;
}
void OAIJiraExpressionAnalysis::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIJiraExpressionAnalysis::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIJiraExpressionAnalysis::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIJiraExpressionAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complexity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJiraExpressionAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
