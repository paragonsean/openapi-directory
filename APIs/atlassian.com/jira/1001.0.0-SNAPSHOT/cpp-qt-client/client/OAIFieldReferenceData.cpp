/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldReferenceData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldReferenceData::OAIFieldReferenceData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldReferenceData::OAIFieldReferenceData() {
    this->initializeModel();
}

OAIFieldReferenceData::~OAIFieldReferenceData() {}

void OAIFieldReferenceData::initializeModel() {

    m_r_auto_isSet = false;
    m_r_auto_isValid = false;

    m_cfid_isSet = false;
    m_cfid_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_deprecated_searcher_key_isSet = false;
    m_deprecated_searcher_key_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_operators_isSet = false;
    m_operators_isValid = false;

    m_orderable_isSet = false;
    m_orderable_isValid = false;

    m_searchable_isSet = false;
    m_searchable_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFieldReferenceData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldReferenceData::fromJsonObject(QJsonObject json) {

    m_r_auto_isValid = ::OpenAPI::fromJsonValue(m_r_auto, json[QString("auto")]);
    m_r_auto_isSet = !json[QString("auto")].isNull() && m_r_auto_isValid;

    m_cfid_isValid = ::OpenAPI::fromJsonValue(m_cfid, json[QString("cfid")]);
    m_cfid_isSet = !json[QString("cfid")].isNull() && m_cfid_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_deprecated_searcher_key_isValid = ::OpenAPI::fromJsonValue(m_deprecated_searcher_key, json[QString("deprecatedSearcherKey")]);
    m_deprecated_searcher_key_isSet = !json[QString("deprecatedSearcherKey")].isNull() && m_deprecated_searcher_key_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_operators_isValid = ::OpenAPI::fromJsonValue(m_operators, json[QString("operators")]);
    m_operators_isSet = !json[QString("operators")].isNull() && m_operators_isValid;

    m_orderable_isValid = ::OpenAPI::fromJsonValue(m_orderable, json[QString("orderable")]);
    m_orderable_isSet = !json[QString("orderable")].isNull() && m_orderable_isValid;

    m_searchable_isValid = ::OpenAPI::fromJsonValue(m_searchable, json[QString("searchable")]);
    m_searchable_isSet = !json[QString("searchable")].isNull() && m_searchable_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFieldReferenceData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldReferenceData::asJsonObject() const {
    QJsonObject obj;
    if (m_r_auto_isSet) {
        obj.insert(QString("auto"), ::OpenAPI::toJsonValue(m_r_auto));
    }
    if (m_cfid_isSet) {
        obj.insert(QString("cfid"), ::OpenAPI::toJsonValue(m_cfid));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_deprecated_searcher_key_isSet) {
        obj.insert(QString("deprecatedSearcherKey"), ::OpenAPI::toJsonValue(m_deprecated_searcher_key));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_operators.size() > 0) {
        obj.insert(QString("operators"), ::OpenAPI::toJsonValue(m_operators));
    }
    if (m_orderable_isSet) {
        obj.insert(QString("orderable"), ::OpenAPI::toJsonValue(m_orderable));
    }
    if (m_searchable_isSet) {
        obj.insert(QString("searchable"), ::OpenAPI::toJsonValue(m_searchable));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFieldReferenceData::getRAuto() const {
    return m_r_auto;
}
void OAIFieldReferenceData::setRAuto(const QString &r_auto) {
    m_r_auto = r_auto;
    m_r_auto_isSet = true;
}

bool OAIFieldReferenceData::is_r_auto_Set() const{
    return m_r_auto_isSet;
}

bool OAIFieldReferenceData::is_r_auto_Valid() const{
    return m_r_auto_isValid;
}

QString OAIFieldReferenceData::getCfid() const {
    return m_cfid;
}
void OAIFieldReferenceData::setCfid(const QString &cfid) {
    m_cfid = cfid;
    m_cfid_isSet = true;
}

bool OAIFieldReferenceData::is_cfid_Set() const{
    return m_cfid_isSet;
}

bool OAIFieldReferenceData::is_cfid_Valid() const{
    return m_cfid_isValid;
}

QString OAIFieldReferenceData::getDeprecated() const {
    return m_deprecated;
}
void OAIFieldReferenceData::setDeprecated(const QString &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIFieldReferenceData::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIFieldReferenceData::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIFieldReferenceData::getDeprecatedSearcherKey() const {
    return m_deprecated_searcher_key;
}
void OAIFieldReferenceData::setDeprecatedSearcherKey(const QString &deprecated_searcher_key) {
    m_deprecated_searcher_key = deprecated_searcher_key;
    m_deprecated_searcher_key_isSet = true;
}

bool OAIFieldReferenceData::is_deprecated_searcher_key_Set() const{
    return m_deprecated_searcher_key_isSet;
}

bool OAIFieldReferenceData::is_deprecated_searcher_key_Valid() const{
    return m_deprecated_searcher_key_isValid;
}

QString OAIFieldReferenceData::getDisplayName() const {
    return m_display_name;
}
void OAIFieldReferenceData::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFieldReferenceData::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFieldReferenceData::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIFieldReferenceData::getOperators() const {
    return m_operators;
}
void OAIFieldReferenceData::setOperators(const QList<QString> &operators) {
    m_operators = operators;
    m_operators_isSet = true;
}

bool OAIFieldReferenceData::is_operators_Set() const{
    return m_operators_isSet;
}

bool OAIFieldReferenceData::is_operators_Valid() const{
    return m_operators_isValid;
}

QString OAIFieldReferenceData::getOrderable() const {
    return m_orderable;
}
void OAIFieldReferenceData::setOrderable(const QString &orderable) {
    m_orderable = orderable;
    m_orderable_isSet = true;
}

bool OAIFieldReferenceData::is_orderable_Set() const{
    return m_orderable_isSet;
}

bool OAIFieldReferenceData::is_orderable_Valid() const{
    return m_orderable_isValid;
}

QString OAIFieldReferenceData::getSearchable() const {
    return m_searchable;
}
void OAIFieldReferenceData::setSearchable(const QString &searchable) {
    m_searchable = searchable;
    m_searchable_isSet = true;
}

bool OAIFieldReferenceData::is_searchable_Set() const{
    return m_searchable_isSet;
}

bool OAIFieldReferenceData::is_searchable_Valid() const{
    return m_searchable_isValid;
}

QList<QString> OAIFieldReferenceData::getTypes() const {
    return m_types;
}
void OAIFieldReferenceData::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIFieldReferenceData::is_types_Set() const{
    return m_types_isSet;
}

bool OAIFieldReferenceData::is_types_Valid() const{
    return m_types_isValid;
}

QString OAIFieldReferenceData::getValue() const {
    return m_value;
}
void OAIFieldReferenceData::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFieldReferenceData::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFieldReferenceData::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFieldReferenceData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cfid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_searcher_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldReferenceData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
