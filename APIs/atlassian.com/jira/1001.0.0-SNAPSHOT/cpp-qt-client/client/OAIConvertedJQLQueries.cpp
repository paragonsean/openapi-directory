/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConvertedJQLQueries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConvertedJQLQueries::OAIConvertedJQLQueries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConvertedJQLQueries::OAIConvertedJQLQueries() {
    this->initializeModel();
}

OAIConvertedJQLQueries::~OAIConvertedJQLQueries() {}

void OAIConvertedJQLQueries::initializeModel() {

    m_queries_with_unknown_users_isSet = false;
    m_queries_with_unknown_users_isValid = false;

    m_query_strings_isSet = false;
    m_query_strings_isValid = false;
}

void OAIConvertedJQLQueries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConvertedJQLQueries::fromJsonObject(QJsonObject json) {

    m_queries_with_unknown_users_isValid = ::OpenAPI::fromJsonValue(m_queries_with_unknown_users, json[QString("queriesWithUnknownUsers")]);
    m_queries_with_unknown_users_isSet = !json[QString("queriesWithUnknownUsers")].isNull() && m_queries_with_unknown_users_isValid;

    m_query_strings_isValid = ::OpenAPI::fromJsonValue(m_query_strings, json[QString("queryStrings")]);
    m_query_strings_isSet = !json[QString("queryStrings")].isNull() && m_query_strings_isValid;
}

QString OAIConvertedJQLQueries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConvertedJQLQueries::asJsonObject() const {
    QJsonObject obj;
    if (m_queries_with_unknown_users.size() > 0) {
        obj.insert(QString("queriesWithUnknownUsers"), ::OpenAPI::toJsonValue(m_queries_with_unknown_users));
    }
    if (m_query_strings.size() > 0) {
        obj.insert(QString("queryStrings"), ::OpenAPI::toJsonValue(m_query_strings));
    }
    return obj;
}

QList<OAIJQLQueryWithUnknownUsers> OAIConvertedJQLQueries::getQueriesWithUnknownUsers() const {
    return m_queries_with_unknown_users;
}
void OAIConvertedJQLQueries::setQueriesWithUnknownUsers(const QList<OAIJQLQueryWithUnknownUsers> &queries_with_unknown_users) {
    m_queries_with_unknown_users = queries_with_unknown_users;
    m_queries_with_unknown_users_isSet = true;
}

bool OAIConvertedJQLQueries::is_queries_with_unknown_users_Set() const{
    return m_queries_with_unknown_users_isSet;
}

bool OAIConvertedJQLQueries::is_queries_with_unknown_users_Valid() const{
    return m_queries_with_unknown_users_isValid;
}

QList<QString> OAIConvertedJQLQueries::getQueryStrings() const {
    return m_query_strings;
}
void OAIConvertedJQLQueries::setQueryStrings(const QList<QString> &query_strings) {
    m_query_strings = query_strings;
    m_query_strings_isSet = true;
}

bool OAIConvertedJQLQueries::is_query_strings_Set() const{
    return m_query_strings_isSet;
}

bool OAIConvertedJQLQueries::is_query_strings_Valid() const{
    return m_query_strings_isValid;
}

bool OAIConvertedJQLQueries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queries_with_unknown_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConvertedJQLQueries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
