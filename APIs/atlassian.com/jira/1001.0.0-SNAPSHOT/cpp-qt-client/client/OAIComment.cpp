/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jsd_author_can_see_request_isSet = false;
    m_jsd_author_can_see_request_isValid = false;

    m_jsd_public_isSet = false;
    m_jsd_public_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_rendered_body_isSet = false;
    m_rendered_body_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_update_author_isSet = false;
    m_update_author_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jsd_author_can_see_request_isValid = ::OpenAPI::fromJsonValue(m_jsd_author_can_see_request, json[QString("jsdAuthorCanSeeRequest")]);
    m_jsd_author_can_see_request_isSet = !json[QString("jsdAuthorCanSeeRequest")].isNull() && m_jsd_author_can_see_request_isValid;

    m_jsd_public_isValid = ::OpenAPI::fromJsonValue(m_jsd_public, json[QString("jsdPublic")]);
    m_jsd_public_isSet = !json[QString("jsdPublic")].isNull() && m_jsd_public_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_rendered_body_isValid = ::OpenAPI::fromJsonValue(m_rendered_body, json[QString("renderedBody")]);
    m_rendered_body_isSet = !json[QString("renderedBody")].isNull() && m_rendered_body_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_update_author_isValid = ::OpenAPI::fromJsonValue(m_update_author, json[QString("updateAuthor")]);
    m_update_author_isSet = !json[QString("updateAuthor")].isNull() && m_update_author_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jsd_author_can_see_request_isSet) {
        obj.insert(QString("jsdAuthorCanSeeRequest"), ::OpenAPI::toJsonValue(m_jsd_author_can_see_request));
    }
    if (m_jsd_public_isSet) {
        obj.insert(QString("jsdPublic"), ::OpenAPI::toJsonValue(m_jsd_public));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_rendered_body_isSet) {
        obj.insert(QString("renderedBody"), ::OpenAPI::toJsonValue(m_rendered_body));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_update_author.isSet()) {
        obj.insert(QString("updateAuthor"), ::OpenAPI::toJsonValue(m_update_author));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIUserDetails OAIComment::getAuthor() const {
    return m_author;
}
void OAIComment::setAuthor(const OAIUserDetails &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIComment::is_author_Set() const{
    return m_author_isSet;
}

bool OAIComment::is_author_Valid() const{
    return m_author_isValid;
}

QJsonValue OAIComment::getBody() const {
    return m_body;
}
void OAIComment::setBody(const QJsonValue &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIComment::is_body_Set() const{
    return m_body_isSet;
}

bool OAIComment::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIComment::getCreated() const {
    return m_created;
}
void OAIComment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIComment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIComment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIComment::getId() const {
    return m_id;
}
void OAIComment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComment::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIComment::isJsdAuthorCanSeeRequest() const {
    return m_jsd_author_can_see_request;
}
void OAIComment::setJsdAuthorCanSeeRequest(const bool &jsd_author_can_see_request) {
    m_jsd_author_can_see_request = jsd_author_can_see_request;
    m_jsd_author_can_see_request_isSet = true;
}

bool OAIComment::is_jsd_author_can_see_request_Set() const{
    return m_jsd_author_can_see_request_isSet;
}

bool OAIComment::is_jsd_author_can_see_request_Valid() const{
    return m_jsd_author_can_see_request_isValid;
}

bool OAIComment::isJsdPublic() const {
    return m_jsd_public;
}
void OAIComment::setJsdPublic(const bool &jsd_public) {
    m_jsd_public = jsd_public;
    m_jsd_public_isSet = true;
}

bool OAIComment::is_jsd_public_Set() const{
    return m_jsd_public_isSet;
}

bool OAIComment::is_jsd_public_Valid() const{
    return m_jsd_public_isValid;
}

QList<OAIEntityProperty> OAIComment::getProperties() const {
    return m_properties;
}
void OAIComment::setProperties(const QList<OAIEntityProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIComment::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIComment::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIComment::getRenderedBody() const {
    return m_rendered_body;
}
void OAIComment::setRenderedBody(const QString &rendered_body) {
    m_rendered_body = rendered_body;
    m_rendered_body_isSet = true;
}

bool OAIComment::is_rendered_body_Set() const{
    return m_rendered_body_isSet;
}

bool OAIComment::is_rendered_body_Valid() const{
    return m_rendered_body_isValid;
}

QString OAIComment::getSelf() const {
    return m_self;
}
void OAIComment::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIComment::is_self_Set() const{
    return m_self_isSet;
}

bool OAIComment::is_self_Valid() const{
    return m_self_isValid;
}

OAIUserDetails OAIComment::getUpdateAuthor() const {
    return m_update_author;
}
void OAIComment::setUpdateAuthor(const OAIUserDetails &update_author) {
    m_update_author = update_author;
    m_update_author_isSet = true;
}

bool OAIComment::is_update_author_Set() const{
    return m_update_author_isSet;
}

bool OAIComment::is_update_author_Valid() const{
    return m_update_author_isValid;
}

QDateTime OAIComment::getUpdated() const {
    return m_updated;
}
void OAIComment::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIComment::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIComment::is_updated_Valid() const{
    return m_updated_isValid;
}

OAIVisibility OAIComment::getVisibility() const {
    return m_visibility;
}
void OAIComment::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIComment::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIComment::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jsd_author_can_see_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jsd_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
