/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow::OAIWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow::OAIWorkflow() {
    this->initializeModel();
}

OAIWorkflow::~OAIWorkflow() {}

void OAIWorkflow::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_draft_workflow_isSet = false;
    m_has_draft_workflow_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_schemes_isSet = false;
    m_schemes_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_transitions_isSet = false;
    m_transitions_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_draft_workflow_isValid = ::OpenAPI::fromJsonValue(m_has_draft_workflow, json[QString("hasDraftWorkflow")]);
    m_has_draft_workflow_isSet = !json[QString("hasDraftWorkflow")].isNull() && m_has_draft_workflow_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_schemes_isValid = ::OpenAPI::fromJsonValue(m_schemes, json[QString("schemes")]);
    m_schemes_isSet = !json[QString("schemes")].isNull() && m_schemes_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_transitions_isValid = ::OpenAPI::fromJsonValue(m_transitions, json[QString("transitions")]);
    m_transitions_isSet = !json[QString("transitions")].isNull() && m_transitions_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_draft_workflow_isSet) {
        obj.insert(QString("hasDraftWorkflow"), ::OpenAPI::toJsonValue(m_has_draft_workflow));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_operations.isSet()) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_schemes.size() > 0) {
        obj.insert(QString("schemes"), ::OpenAPI::toJsonValue(m_schemes));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_transitions.size() > 0) {
        obj.insert(QString("transitions"), ::OpenAPI::toJsonValue(m_transitions));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QDateTime OAIWorkflow::getCreated() const {
    return m_created;
}
void OAIWorkflow::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWorkflow::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWorkflow::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWorkflow::getDescription() const {
    return m_description;
}
void OAIWorkflow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkflow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkflow::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWorkflow::isHasDraftWorkflow() const {
    return m_has_draft_workflow;
}
void OAIWorkflow::setHasDraftWorkflow(const bool &has_draft_workflow) {
    m_has_draft_workflow = has_draft_workflow;
    m_has_draft_workflow_isSet = true;
}

bool OAIWorkflow::is_has_draft_workflow_Set() const{
    return m_has_draft_workflow_isSet;
}

bool OAIWorkflow::is_has_draft_workflow_Valid() const{
    return m_has_draft_workflow_isValid;
}

OAIPublishedWorkflowId OAIWorkflow::getId() const {
    return m_id;
}
void OAIWorkflow::setId(const OAIPublishedWorkflowId &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkflow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkflow::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIWorkflow::isIsDefault() const {
    return m_is_default;
}
void OAIWorkflow::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIWorkflow::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIWorkflow::is_is_default_Valid() const{
    return m_is_default_isValid;
}

OAIWorkflowOperations OAIWorkflow::getOperations() const {
    return m_operations;
}
void OAIWorkflow::setOperations(const OAIWorkflowOperations &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIWorkflow::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIWorkflow::is_operations_Valid() const{
    return m_operations_isValid;
}

QList<OAIProjectDetails> OAIWorkflow::getProjects() const {
    return m_projects;
}
void OAIWorkflow::setProjects(const QList<OAIProjectDetails> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIWorkflow::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIWorkflow::is_projects_Valid() const{
    return m_projects_isValid;
}

QList<OAIWorkflowSchemeIdName> OAIWorkflow::getSchemes() const {
    return m_schemes;
}
void OAIWorkflow::setSchemes(const QList<OAIWorkflowSchemeIdName> &schemes) {
    m_schemes = schemes;
    m_schemes_isSet = true;
}

bool OAIWorkflow::is_schemes_Set() const{
    return m_schemes_isSet;
}

bool OAIWorkflow::is_schemes_Valid() const{
    return m_schemes_isValid;
}

QList<OAIWorkflowStatus> OAIWorkflow::getStatuses() const {
    return m_statuses;
}
void OAIWorkflow::setStatuses(const QList<OAIWorkflowStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIWorkflow::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIWorkflow::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QList<OAITransition> OAIWorkflow::getTransitions() const {
    return m_transitions;
}
void OAIWorkflow::setTransitions(const QList<OAITransition> &transitions) {
    m_transitions = transitions;
    m_transitions_isSet = true;
}

bool OAIWorkflow::is_transitions_Set() const{
    return m_transitions_isSet;
}

bool OAIWorkflow::is_transitions_Valid() const{
    return m_transitions_isValid;
}

QDateTime OAIWorkflow::getUpdated() const {
    return m_updated;
}
void OAIWorkflow::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIWorkflow::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIWorkflow::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_draft_workflow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
