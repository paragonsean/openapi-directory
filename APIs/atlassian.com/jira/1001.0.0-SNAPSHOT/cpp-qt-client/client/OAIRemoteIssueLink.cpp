/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteIssueLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteIssueLink::OAIRemoteIssueLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteIssueLink::OAIRemoteIssueLink() {
    this->initializeModel();
}

OAIRemoteIssueLink::~OAIRemoteIssueLink() {}

void OAIRemoteIssueLink::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_global_id_isSet = false;
    m_global_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_relationship_isSet = false;
    m_relationship_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIRemoteIssueLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteIssueLink::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_global_id_isValid = ::OpenAPI::fromJsonValue(m_global_id, json[QString("globalId")]);
    m_global_id_isSet = !json[QString("globalId")].isNull() && m_global_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_relationship_isValid = ::OpenAPI::fromJsonValue(m_relationship, json[QString("relationship")]);
    m_relationship_isSet = !json[QString("relationship")].isNull() && m_relationship_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIRemoteIssueLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteIssueLink::asJsonObject() const {
    QJsonObject obj;
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_global_id_isSet) {
        obj.insert(QString("globalId"), ::OpenAPI::toJsonValue(m_global_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_relationship_isSet) {
        obj.insert(QString("relationship"), ::OpenAPI::toJsonValue(m_relationship));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIApplication OAIRemoteIssueLink::getApplication() const {
    return m_application;
}
void OAIRemoteIssueLink::setApplication(const OAIApplication &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIRemoteIssueLink::is_application_Set() const{
    return m_application_isSet;
}

bool OAIRemoteIssueLink::is_application_Valid() const{
    return m_application_isValid;
}

QString OAIRemoteIssueLink::getGlobalId() const {
    return m_global_id;
}
void OAIRemoteIssueLink::setGlobalId(const QString &global_id) {
    m_global_id = global_id;
    m_global_id_isSet = true;
}

bool OAIRemoteIssueLink::is_global_id_Set() const{
    return m_global_id_isSet;
}

bool OAIRemoteIssueLink::is_global_id_Valid() const{
    return m_global_id_isValid;
}

qint64 OAIRemoteIssueLink::getId() const {
    return m_id;
}
void OAIRemoteIssueLink::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRemoteIssueLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRemoteIssueLink::is_id_Valid() const{
    return m_id_isValid;
}

OAIRemoteObject OAIRemoteIssueLink::getObject() const {
    return m_object;
}
void OAIRemoteIssueLink::setObject(const OAIRemoteObject &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIRemoteIssueLink::is_object_Set() const{
    return m_object_isSet;
}

bool OAIRemoteIssueLink::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIRemoteIssueLink::getRelationship() const {
    return m_relationship;
}
void OAIRemoteIssueLink::setRelationship(const QString &relationship) {
    m_relationship = relationship;
    m_relationship_isSet = true;
}

bool OAIRemoteIssueLink::is_relationship_Set() const{
    return m_relationship_isSet;
}

bool OAIRemoteIssueLink::is_relationship_Valid() const{
    return m_relationship_isValid;
}

QString OAIRemoteIssueLink::getSelf() const {
    return m_self;
}
void OAIRemoteIssueLink::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIRemoteIssueLink::is_self_Set() const{
    return m_self_isSet;
}

bool OAIRemoteIssueLink::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIRemoteIssueLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteIssueLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
