/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueRemoteLinksApi_H
#define OAI_OAIIssueRemoteLinksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRemoteIssueLink.h"
#include "OAIRemoteIssueLinkIdentifies.h"
#include "OAIRemoteIssueLinkRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueRemoteLinksApi : public QObject {
    Q_OBJECT

public:
    OAIIssueRemoteLinksApi(const int timeOut = 0);
    ~OAIIssueRemoteLinksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_remote_issue_link_request OAIRemoteIssueLinkRequest [required]
    */
    virtual void createOrUpdateRemoteIssueLink(const QString &issue_id_or_key, const OAIRemoteIssueLinkRequest &oai_remote_issue_link_request);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  global_id QString [required]
    */
    virtual void deleteRemoteIssueLinkByGlobalId(const QString &issue_id_or_key, const QString &global_id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  link_id QString [required]
    */
    virtual void deleteRemoteIssueLinkById(const QString &issue_id_or_key, const QString &link_id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  link_id QString [required]
    */
    virtual void getRemoteIssueLinkById(const QString &issue_id_or_key, const QString &link_id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  global_id QString [optional]
    */
    virtual void getRemoteIssueLinks(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &global_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  link_id QString [required]
    * @param[in]  oai_remote_issue_link_request OAIRemoteIssueLinkRequest [required]
    */
    virtual void updateRemoteIssueLink(const QString &issue_id_or_key, const QString &link_id, const OAIRemoteIssueLinkRequest &oai_remote_issue_link_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrUpdateRemoteIssueLinkCallback(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByGlobalIdCallback(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByIdCallback(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinkByIdCallback(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinksCallback(OAIHttpRequestWorker *worker);
    void updateRemoteIssueLinkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrUpdateRemoteIssueLinkSignal(OAIRemoteIssueLinkIdentifies summary);
    void deleteRemoteIssueLinkByGlobalIdSignal();
    void deleteRemoteIssueLinkByIdSignal();
    void getRemoteIssueLinkByIdSignal(OAIRemoteIssueLink summary);
    void getRemoteIssueLinksSignal(OAIRemoteIssueLink summary);
    void updateRemoteIssueLinkSignal(QJsonValue summary);


    void createOrUpdateRemoteIssueLinkSignalFull(OAIHttpRequestWorker *worker, OAIRemoteIssueLinkIdentifies summary);
    void deleteRemoteIssueLinkByGlobalIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByIdSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinkByIdSignalFull(OAIHttpRequestWorker *worker, OAIRemoteIssueLink summary);
    void getRemoteIssueLinksSignalFull(OAIHttpRequestWorker *worker, OAIRemoteIssueLink summary);
    void updateRemoteIssueLinkSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use createOrUpdateRemoteIssueLinkSignalError() instead")
    void createOrUpdateRemoteIssueLinkSignalE(OAIRemoteIssueLinkIdentifies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateRemoteIssueLinkSignalError(OAIRemoteIssueLinkIdentifies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByGlobalIdSignalError() instead")
    void deleteRemoteIssueLinkByGlobalIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByGlobalIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByIdSignalError() instead")
    void deleteRemoteIssueLinkByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinkByIdSignalError() instead")
    void getRemoteIssueLinkByIdSignalE(OAIRemoteIssueLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinkByIdSignalError(OAIRemoteIssueLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinksSignalError() instead")
    void getRemoteIssueLinksSignalE(OAIRemoteIssueLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinksSignalError(OAIRemoteIssueLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRemoteIssueLinkSignalError() instead")
    void updateRemoteIssueLinkSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRemoteIssueLinkSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrUpdateRemoteIssueLinkSignalErrorFull() instead")
    void createOrUpdateRemoteIssueLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateRemoteIssueLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByGlobalIdSignalErrorFull() instead")
    void deleteRemoteIssueLinkByGlobalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByGlobalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByIdSignalErrorFull() instead")
    void deleteRemoteIssueLinkByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinkByIdSignalErrorFull() instead")
    void getRemoteIssueLinkByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinkByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinksSignalErrorFull() instead")
    void getRemoteIssueLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRemoteIssueLinkSignalErrorFull() instead")
    void updateRemoteIssueLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRemoteIssueLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
