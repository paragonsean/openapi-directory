/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserFilter::OAIUserFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserFilter::OAIUserFilter() {
    this->initializeModel();
}

OAIUserFilter::~OAIUserFilter() {}

void OAIUserFilter::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_role_ids_isSet = false;
    m_role_ids_isValid = false;
}

void OAIUserFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserFilter::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_role_ids_isValid = ::OpenAPI::fromJsonValue(m_role_ids, json[QString("roleIds")]);
    m_role_ids_isSet = !json[QString("roleIds")].isNull() && m_role_ids_isValid;
}

QString OAIUserFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_role_ids.size() > 0) {
        obj.insert(QString("roleIds"), ::OpenAPI::toJsonValue(m_role_ids));
    }
    return obj;
}

bool OAIUserFilter::isEnabled() const {
    return m_enabled;
}
void OAIUserFilter::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUserFilter::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUserFilter::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QSet<QString> OAIUserFilter::getGroups() const {
    return m_groups;
}
void OAIUserFilter::setGroups(const QSet<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUserFilter::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUserFilter::is_groups_Valid() const{
    return m_groups_isValid;
}

QSet<qint64> OAIUserFilter::getRoleIds() const {
    return m_role_ids;
}
void OAIUserFilter::setRoleIds(const QSet<qint64> &role_ids) {
    m_role_ids = role_ids;
    m_role_ids_isSet = true;
}

bool OAIUserFilter::is_role_ids_Set() const{
    return m_role_ids_isSet;
}

bool OAIUserFilter::is_role_ids_Valid() const{
    return m_role_ids_isValid;
}

bool OAIUserFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
