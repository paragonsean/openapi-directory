/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectFeature::OAIProjectFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectFeature::OAIProjectFeature() {
    this->initializeModel();
}

OAIProjectFeature::~OAIProjectFeature() {}

void OAIProjectFeature::initializeModel() {

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_localised_description_isSet = false;
    m_localised_description_isValid = false;

    m_localised_name_isSet = false;
    m_localised_name_isValid = false;

    m_prerequisites_isSet = false;
    m_prerequisites_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_toggle_locked_isSet = false;
    m_toggle_locked_isValid = false;
}

void OAIProjectFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectFeature::fromJsonObject(QJsonObject json) {

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_localised_description_isValid = ::OpenAPI::fromJsonValue(m_localised_description, json[QString("localisedDescription")]);
    m_localised_description_isSet = !json[QString("localisedDescription")].isNull() && m_localised_description_isValid;

    m_localised_name_isValid = ::OpenAPI::fromJsonValue(m_localised_name, json[QString("localisedName")]);
    m_localised_name_isSet = !json[QString("localisedName")].isNull() && m_localised_name_isValid;

    m_prerequisites_isValid = ::OpenAPI::fromJsonValue(m_prerequisites, json[QString("prerequisites")]);
    m_prerequisites_isSet = !json[QString("prerequisites")].isNull() && m_prerequisites_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_toggle_locked_isValid = ::OpenAPI::fromJsonValue(m_toggle_locked, json[QString("toggleLocked")]);
    m_toggle_locked_isSet = !json[QString("toggleLocked")].isNull() && m_toggle_locked_isValid;
}

QString OAIProjectFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_isSet) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_localised_description_isSet) {
        obj.insert(QString("localisedDescription"), ::OpenAPI::toJsonValue(m_localised_description));
    }
    if (m_localised_name_isSet) {
        obj.insert(QString("localisedName"), ::OpenAPI::toJsonValue(m_localised_name));
    }
    if (m_prerequisites.size() > 0) {
        obj.insert(QString("prerequisites"), ::OpenAPI::toJsonValue(m_prerequisites));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_toggle_locked_isSet) {
        obj.insert(QString("toggleLocked"), ::OpenAPI::toJsonValue(m_toggle_locked));
    }
    return obj;
}

QString OAIProjectFeature::getFeature() const {
    return m_feature;
}
void OAIProjectFeature::setFeature(const QString &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIProjectFeature::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIProjectFeature::is_feature_Valid() const{
    return m_feature_isValid;
}

QString OAIProjectFeature::getImageUri() const {
    return m_image_uri;
}
void OAIProjectFeature::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIProjectFeature::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIProjectFeature::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAIProjectFeature::getLocalisedDescription() const {
    return m_localised_description;
}
void OAIProjectFeature::setLocalisedDescription(const QString &localised_description) {
    m_localised_description = localised_description;
    m_localised_description_isSet = true;
}

bool OAIProjectFeature::is_localised_description_Set() const{
    return m_localised_description_isSet;
}

bool OAIProjectFeature::is_localised_description_Valid() const{
    return m_localised_description_isValid;
}

QString OAIProjectFeature::getLocalisedName() const {
    return m_localised_name;
}
void OAIProjectFeature::setLocalisedName(const QString &localised_name) {
    m_localised_name = localised_name;
    m_localised_name_isSet = true;
}

bool OAIProjectFeature::is_localised_name_Set() const{
    return m_localised_name_isSet;
}

bool OAIProjectFeature::is_localised_name_Valid() const{
    return m_localised_name_isValid;
}

QList<QString> OAIProjectFeature::getPrerequisites() const {
    return m_prerequisites;
}
void OAIProjectFeature::setPrerequisites(const QList<QString> &prerequisites) {
    m_prerequisites = prerequisites;
    m_prerequisites_isSet = true;
}

bool OAIProjectFeature::is_prerequisites_Set() const{
    return m_prerequisites_isSet;
}

bool OAIProjectFeature::is_prerequisites_Valid() const{
    return m_prerequisites_isValid;
}

qint64 OAIProjectFeature::getProjectId() const {
    return m_project_id;
}
void OAIProjectFeature::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectFeature::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectFeature::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProjectFeature::getState() const {
    return m_state;
}
void OAIProjectFeature::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProjectFeature::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProjectFeature::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIProjectFeature::isToggleLocked() const {
    return m_toggle_locked;
}
void OAIProjectFeature::setToggleLocked(const bool &toggle_locked) {
    m_toggle_locked = toggle_locked;
    m_toggle_locked_isSet = true;
}

bool OAIProjectFeature::is_toggle_locked_Set() const{
    return m_toggle_locked_isSet;
}

bool OAIProjectFeature::is_toggle_locked_Valid() const{
    return m_toggle_locked_isValid;
}

bool OAIProjectFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localised_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localised_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toggle_locked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
