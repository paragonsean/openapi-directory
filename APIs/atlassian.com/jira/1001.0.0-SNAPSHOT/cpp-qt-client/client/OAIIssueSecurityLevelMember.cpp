/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueSecurityLevelMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueSecurityLevelMember::OAIIssueSecurityLevelMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueSecurityLevelMember::OAIIssueSecurityLevelMember() {
    this->initializeModel();
}

OAIIssueSecurityLevelMember::~OAIIssueSecurityLevelMember() {}

void OAIIssueSecurityLevelMember::initializeModel() {

    m_holder_isSet = false;
    m_holder_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_security_level_id_isSet = false;
    m_issue_security_level_id_isValid = false;
}

void OAIIssueSecurityLevelMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueSecurityLevelMember::fromJsonObject(QJsonObject json) {

    m_holder_isValid = ::OpenAPI::fromJsonValue(m_holder, json[QString("holder")]);
    m_holder_isSet = !json[QString("holder")].isNull() && m_holder_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_security_level_id_isValid = ::OpenAPI::fromJsonValue(m_issue_security_level_id, json[QString("issueSecurityLevelId")]);
    m_issue_security_level_id_isSet = !json[QString("issueSecurityLevelId")].isNull() && m_issue_security_level_id_isValid;
}

QString OAIIssueSecurityLevelMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueSecurityLevelMember::asJsonObject() const {
    QJsonObject obj;
    if (m_holder.isSet()) {
        obj.insert(QString("holder"), ::OpenAPI::toJsonValue(m_holder));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_security_level_id_isSet) {
        obj.insert(QString("issueSecurityLevelId"), ::OpenAPI::toJsonValue(m_issue_security_level_id));
    }
    return obj;
}

OAIPermissionHolder OAIIssueSecurityLevelMember::getHolder() const {
    return m_holder;
}
void OAIIssueSecurityLevelMember::setHolder(const OAIPermissionHolder &holder) {
    m_holder = holder;
    m_holder_isSet = true;
}

bool OAIIssueSecurityLevelMember::is_holder_Set() const{
    return m_holder_isSet;
}

bool OAIIssueSecurityLevelMember::is_holder_Valid() const{
    return m_holder_isValid;
}

qint64 OAIIssueSecurityLevelMember::getId() const {
    return m_id;
}
void OAIIssueSecurityLevelMember::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueSecurityLevelMember::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueSecurityLevelMember::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIIssueSecurityLevelMember::getIssueSecurityLevelId() const {
    return m_issue_security_level_id;
}
void OAIIssueSecurityLevelMember::setIssueSecurityLevelId(const qint64 &issue_security_level_id) {
    m_issue_security_level_id = issue_security_level_id;
    m_issue_security_level_id_isSet = true;
}

bool OAIIssueSecurityLevelMember::is_issue_security_level_id_Set() const{
    return m_issue_security_level_id_isSet;
}

bool OAIIssueSecurityLevelMember::is_issue_security_level_id_Valid() const{
    return m_issue_security_level_id_isValid;
}

bool OAIIssueSecurityLevelMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_security_level_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueSecurityLevelMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_holder_isValid && m_id_isValid && m_issue_security_level_id_isValid && true;
}

} // namespace OpenAPI
