/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISanitizedJqlQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISanitizedJqlQuery::OAISanitizedJqlQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISanitizedJqlQuery::OAISanitizedJqlQuery() {
    this->initializeModel();
}

OAISanitizedJqlQuery::~OAISanitizedJqlQuery() {}

void OAISanitizedJqlQuery::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_initial_query_isSet = false;
    m_initial_query_isValid = false;

    m_sanitized_query_isSet = false;
    m_sanitized_query_isValid = false;
}

void OAISanitizedJqlQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISanitizedJqlQuery::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_initial_query_isValid = ::OpenAPI::fromJsonValue(m_initial_query, json[QString("initialQuery")]);
    m_initial_query_isSet = !json[QString("initialQuery")].isNull() && m_initial_query_isValid;

    m_sanitized_query_isValid = ::OpenAPI::fromJsonValue(m_sanitized_query, json[QString("sanitizedQuery")]);
    m_sanitized_query_isSet = !json[QString("sanitizedQuery")].isNull() && m_sanitized_query_isValid;
}

QString OAISanitizedJqlQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISanitizedJqlQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_initial_query_isSet) {
        obj.insert(QString("initialQuery"), ::OpenAPI::toJsonValue(m_initial_query));
    }
    if (m_sanitized_query_isSet) {
        obj.insert(QString("sanitizedQuery"), ::OpenAPI::toJsonValue(m_sanitized_query));
    }
    return obj;
}

QString OAISanitizedJqlQuery::getAccountId() const {
    return m_account_id;
}
void OAISanitizedJqlQuery::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISanitizedJqlQuery::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISanitizedJqlQuery::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIErrorCollection OAISanitizedJqlQuery::getErrors() const {
    return m_errors;
}
void OAISanitizedJqlQuery::setErrors(const OAIErrorCollection &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAISanitizedJqlQuery::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAISanitizedJqlQuery::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAISanitizedJqlQuery::getInitialQuery() const {
    return m_initial_query;
}
void OAISanitizedJqlQuery::setInitialQuery(const QString &initial_query) {
    m_initial_query = initial_query;
    m_initial_query_isSet = true;
}

bool OAISanitizedJqlQuery::is_initial_query_Set() const{
    return m_initial_query_isSet;
}

bool OAISanitizedJqlQuery::is_initial_query_Valid() const{
    return m_initial_query_isValid;
}

QString OAISanitizedJqlQuery::getSanitizedQuery() const {
    return m_sanitized_query;
}
void OAISanitizedJqlQuery::setSanitizedQuery(const QString &sanitized_query) {
    m_sanitized_query = sanitized_query;
    m_sanitized_query_isSet = true;
}

bool OAISanitizedJqlQuery::is_sanitized_query_Set() const{
    return m_sanitized_query_isSet;
}

bool OAISanitizedJqlQuery::is_sanitized_query_Valid() const{
    return m_sanitized_query_isValid;
}

bool OAISanitizedJqlQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanitized_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISanitizedJqlQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
