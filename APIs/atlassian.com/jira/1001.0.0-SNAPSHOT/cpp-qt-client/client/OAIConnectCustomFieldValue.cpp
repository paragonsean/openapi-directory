/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectCustomFieldValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectCustomFieldValue::OAIConnectCustomFieldValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectCustomFieldValue::OAIConnectCustomFieldValue() {
    this->initializeModel();
}

OAIConnectCustomFieldValue::~OAIConnectCustomFieldValue() {}

void OAIConnectCustomFieldValue::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_option_id_isSet = false;
    m_option_id_isValid = false;

    m_rich_text_isSet = false;
    m_rich_text_isValid = false;

    m_string_isSet = false;
    m_string_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIConnectCustomFieldValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectCustomFieldValue::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("fieldID")]);
    m_field_id_isSet = !json[QString("fieldID")].isNull() && m_field_id_isValid;

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issueID")]);
    m_issue_id_isSet = !json[QString("issueID")].isNull() && m_issue_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_option_id_isValid = ::OpenAPI::fromJsonValue(m_option_id, json[QString("optionID")]);
    m_option_id_isSet = !json[QString("optionID")].isNull() && m_option_id_isValid;

    m_rich_text_isValid = ::OpenAPI::fromJsonValue(m_rich_text, json[QString("richText")]);
    m_rich_text_isSet = !json[QString("richText")].isNull() && m_rich_text_isValid;

    m_string_isValid = ::OpenAPI::fromJsonValue(m_string, json[QString("string")]);
    m_string_isSet = !json[QString("string")].isNull() && m_string_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIConnectCustomFieldValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectCustomFieldValue::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_field_id_isSet) {
        obj.insert(QString("fieldID"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_issue_id_isSet) {
        obj.insert(QString("issueID"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_option_id_isSet) {
        obj.insert(QString("optionID"), ::OpenAPI::toJsonValue(m_option_id));
    }
    if (m_rich_text_isSet) {
        obj.insert(QString("richText"), ::OpenAPI::toJsonValue(m_rich_text));
    }
    if (m_string_isSet) {
        obj.insert(QString("string"), ::OpenAPI::toJsonValue(m_string));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIConnectCustomFieldValue::getType() const {
    return m__type;
}
void OAIConnectCustomFieldValue::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIConnectCustomFieldValue::is__type_Set() const{
    return m__type_isSet;
}

bool OAIConnectCustomFieldValue::is__type_Valid() const{
    return m__type_isValid;
}

qint32 OAIConnectCustomFieldValue::getFieldId() const {
    return m_field_id;
}
void OAIConnectCustomFieldValue::setFieldId(const qint32 &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIConnectCustomFieldValue::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIConnectCustomFieldValue::is_field_id_Valid() const{
    return m_field_id_isValid;
}

qint32 OAIConnectCustomFieldValue::getIssueId() const {
    return m_issue_id;
}
void OAIConnectCustomFieldValue::setIssueId(const qint32 &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAIConnectCustomFieldValue::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAIConnectCustomFieldValue::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

double OAIConnectCustomFieldValue::getNumber() const {
    return m_number;
}
void OAIConnectCustomFieldValue::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIConnectCustomFieldValue::is_number_Set() const{
    return m_number_isSet;
}

bool OAIConnectCustomFieldValue::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIConnectCustomFieldValue::getOptionId() const {
    return m_option_id;
}
void OAIConnectCustomFieldValue::setOptionId(const QString &option_id) {
    m_option_id = option_id;
    m_option_id_isSet = true;
}

bool OAIConnectCustomFieldValue::is_option_id_Set() const{
    return m_option_id_isSet;
}

bool OAIConnectCustomFieldValue::is_option_id_Valid() const{
    return m_option_id_isValid;
}

QString OAIConnectCustomFieldValue::getRichText() const {
    return m_rich_text;
}
void OAIConnectCustomFieldValue::setRichText(const QString &rich_text) {
    m_rich_text = rich_text;
    m_rich_text_isSet = true;
}

bool OAIConnectCustomFieldValue::is_rich_text_Set() const{
    return m_rich_text_isSet;
}

bool OAIConnectCustomFieldValue::is_rich_text_Valid() const{
    return m_rich_text_isValid;
}

QString OAIConnectCustomFieldValue::getString() const {
    return m_string;
}
void OAIConnectCustomFieldValue::setString(const QString &string) {
    m_string = string;
    m_string_isSet = true;
}

bool OAIConnectCustomFieldValue::is_string_Set() const{
    return m_string_isSet;
}

bool OAIConnectCustomFieldValue::is_string_Valid() const{
    return m_string_isValid;
}

QString OAIConnectCustomFieldValue::getText() const {
    return m_text;
}
void OAIConnectCustomFieldValue::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIConnectCustomFieldValue::is_text_Set() const{
    return m_text_isSet;
}

bool OAIConnectCustomFieldValue::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIConnectCustomFieldValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rich_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectCustomFieldValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && m_field_id_isValid && m_issue_id_isValid && true;
}

} // namespace OpenAPI
