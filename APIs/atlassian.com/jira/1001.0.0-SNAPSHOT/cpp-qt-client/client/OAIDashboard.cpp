/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboard::OAIDashboard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboard::OAIDashboard() {
    this->initializeModel();
}

OAIDashboard::~OAIDashboard() {}

void OAIDashboard::initializeModel() {

    m_automatic_refresh_ms_isSet = false;
    m_automatic_refresh_ms_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_edit_permissions_isSet = false;
    m_edit_permissions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_favourite_isSet = false;
    m_is_favourite_isValid = false;

    m_is_writable_isSet = false;
    m_is_writable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_popularity_isSet = false;
    m_popularity_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_share_permissions_isSet = false;
    m_share_permissions_isValid = false;

    m_system_dashboard_isSet = false;
    m_system_dashboard_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIDashboard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboard::fromJsonObject(QJsonObject json) {

    m_automatic_refresh_ms_isValid = ::OpenAPI::fromJsonValue(m_automatic_refresh_ms, json[QString("automaticRefreshMs")]);
    m_automatic_refresh_ms_isSet = !json[QString("automaticRefreshMs")].isNull() && m_automatic_refresh_ms_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_edit_permissions_isValid = ::OpenAPI::fromJsonValue(m_edit_permissions, json[QString("editPermissions")]);
    m_edit_permissions_isSet = !json[QString("editPermissions")].isNull() && m_edit_permissions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_favourite_isValid = ::OpenAPI::fromJsonValue(m_is_favourite, json[QString("isFavourite")]);
    m_is_favourite_isSet = !json[QString("isFavourite")].isNull() && m_is_favourite_isValid;

    m_is_writable_isValid = ::OpenAPI::fromJsonValue(m_is_writable, json[QString("isWritable")]);
    m_is_writable_isSet = !json[QString("isWritable")].isNull() && m_is_writable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_popularity_isValid = ::OpenAPI::fromJsonValue(m_popularity, json[QString("popularity")]);
    m_popularity_isSet = !json[QString("popularity")].isNull() && m_popularity_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_share_permissions_isValid = ::OpenAPI::fromJsonValue(m_share_permissions, json[QString("sharePermissions")]);
    m_share_permissions_isSet = !json[QString("sharePermissions")].isNull() && m_share_permissions_isValid;

    m_system_dashboard_isValid = ::OpenAPI::fromJsonValue(m_system_dashboard, json[QString("systemDashboard")]);
    m_system_dashboard_isSet = !json[QString("systemDashboard")].isNull() && m_system_dashboard_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIDashboard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboard::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_refresh_ms_isSet) {
        obj.insert(QString("automaticRefreshMs"), ::OpenAPI::toJsonValue(m_automatic_refresh_ms));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_edit_permissions.size() > 0) {
        obj.insert(QString("editPermissions"), ::OpenAPI::toJsonValue(m_edit_permissions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_favourite_isSet) {
        obj.insert(QString("isFavourite"), ::OpenAPI::toJsonValue(m_is_favourite));
    }
    if (m_is_writable_isSet) {
        obj.insert(QString("isWritable"), ::OpenAPI::toJsonValue(m_is_writable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_popularity_isSet) {
        obj.insert(QString("popularity"), ::OpenAPI::toJsonValue(m_popularity));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_share_permissions.size() > 0) {
        obj.insert(QString("sharePermissions"), ::OpenAPI::toJsonValue(m_share_permissions));
    }
    if (m_system_dashboard_isSet) {
        obj.insert(QString("systemDashboard"), ::OpenAPI::toJsonValue(m_system_dashboard));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

qint32 OAIDashboard::getAutomaticRefreshMs() const {
    return m_automatic_refresh_ms;
}
void OAIDashboard::setAutomaticRefreshMs(const qint32 &automatic_refresh_ms) {
    m_automatic_refresh_ms = automatic_refresh_ms;
    m_automatic_refresh_ms_isSet = true;
}

bool OAIDashboard::is_automatic_refresh_ms_Set() const{
    return m_automatic_refresh_ms_isSet;
}

bool OAIDashboard::is_automatic_refresh_ms_Valid() const{
    return m_automatic_refresh_ms_isValid;
}

QString OAIDashboard::getDescription() const {
    return m_description;
}
void OAIDashboard::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDashboard::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDashboard::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISharePermission> OAIDashboard::getEditPermissions() const {
    return m_edit_permissions;
}
void OAIDashboard::setEditPermissions(const QList<OAISharePermission> &edit_permissions) {
    m_edit_permissions = edit_permissions;
    m_edit_permissions_isSet = true;
}

bool OAIDashboard::is_edit_permissions_Set() const{
    return m_edit_permissions_isSet;
}

bool OAIDashboard::is_edit_permissions_Valid() const{
    return m_edit_permissions_isValid;
}

QString OAIDashboard::getId() const {
    return m_id;
}
void OAIDashboard::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDashboard::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDashboard::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDashboard::isIsFavourite() const {
    return m_is_favourite;
}
void OAIDashboard::setIsFavourite(const bool &is_favourite) {
    m_is_favourite = is_favourite;
    m_is_favourite_isSet = true;
}

bool OAIDashboard::is_is_favourite_Set() const{
    return m_is_favourite_isSet;
}

bool OAIDashboard::is_is_favourite_Valid() const{
    return m_is_favourite_isValid;
}

bool OAIDashboard::isIsWritable() const {
    return m_is_writable;
}
void OAIDashboard::setIsWritable(const bool &is_writable) {
    m_is_writable = is_writable;
    m_is_writable_isSet = true;
}

bool OAIDashboard::is_is_writable_Set() const{
    return m_is_writable_isSet;
}

bool OAIDashboard::is_is_writable_Valid() const{
    return m_is_writable_isValid;
}

QString OAIDashboard::getName() const {
    return m_name;
}
void OAIDashboard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDashboard::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDashboard::is_name_Valid() const{
    return m_name_isValid;
}

OAIUserBean OAIDashboard::getOwner() const {
    return m_owner;
}
void OAIDashboard::setOwner(const OAIUserBean &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIDashboard::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIDashboard::is_owner_Valid() const{
    return m_owner_isValid;
}

qint64 OAIDashboard::getPopularity() const {
    return m_popularity;
}
void OAIDashboard::setPopularity(const qint64 &popularity) {
    m_popularity = popularity;
    m_popularity_isSet = true;
}

bool OAIDashboard::is_popularity_Set() const{
    return m_popularity_isSet;
}

bool OAIDashboard::is_popularity_Valid() const{
    return m_popularity_isValid;
}

qint32 OAIDashboard::getRank() const {
    return m_rank;
}
void OAIDashboard::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIDashboard::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIDashboard::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIDashboard::getSelf() const {
    return m_self;
}
void OAIDashboard::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIDashboard::is_self_Set() const{
    return m_self_isSet;
}

bool OAIDashboard::is_self_Valid() const{
    return m_self_isValid;
}

QList<OAISharePermission> OAIDashboard::getSharePermissions() const {
    return m_share_permissions;
}
void OAIDashboard::setSharePermissions(const QList<OAISharePermission> &share_permissions) {
    m_share_permissions = share_permissions;
    m_share_permissions_isSet = true;
}

bool OAIDashboard::is_share_permissions_Set() const{
    return m_share_permissions_isSet;
}

bool OAIDashboard::is_share_permissions_Valid() const{
    return m_share_permissions_isValid;
}

bool OAIDashboard::isSystemDashboard() const {
    return m_system_dashboard;
}
void OAIDashboard::setSystemDashboard(const bool &system_dashboard) {
    m_system_dashboard = system_dashboard;
    m_system_dashboard_isSet = true;
}

bool OAIDashboard::is_system_dashboard_Set() const{
    return m_system_dashboard_isSet;
}

bool OAIDashboard::is_system_dashboard_Valid() const{
    return m_system_dashboard_isValid;
}

QString OAIDashboard::getView() const {
    return m_view;
}
void OAIDashboard::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIDashboard::is_view_Set() const{
    return m_view_isSet;
}

bool OAIDashboard::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIDashboard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_refresh_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_favourite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_writable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_popularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_dashboard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
