/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldContextProjectMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldContextProjectMapping::OAICustomFieldContextProjectMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldContextProjectMapping::OAICustomFieldContextProjectMapping() {
    this->initializeModel();
}

OAICustomFieldContextProjectMapping::~OAICustomFieldContextProjectMapping() {}

void OAICustomFieldContextProjectMapping::initializeModel() {

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_is_global_context_isSet = false;
    m_is_global_context_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAICustomFieldContextProjectMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldContextProjectMapping::fromJsonObject(QJsonObject json) {

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("contextId")]);
    m_context_id_isSet = !json[QString("contextId")].isNull() && m_context_id_isValid;

    m_is_global_context_isValid = ::OpenAPI::fromJsonValue(m_is_global_context, json[QString("isGlobalContext")]);
    m_is_global_context_isSet = !json[QString("isGlobalContext")].isNull() && m_is_global_context_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;
}

QString OAICustomFieldContextProjectMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldContextProjectMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_context_id_isSet) {
        obj.insert(QString("contextId"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_is_global_context_isSet) {
        obj.insert(QString("isGlobalContext"), ::OpenAPI::toJsonValue(m_is_global_context));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

QString OAICustomFieldContextProjectMapping::getContextId() const {
    return m_context_id;
}
void OAICustomFieldContextProjectMapping::setContextId(const QString &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAICustomFieldContextProjectMapping::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAICustomFieldContextProjectMapping::is_context_id_Valid() const{
    return m_context_id_isValid;
}

bool OAICustomFieldContextProjectMapping::isIsGlobalContext() const {
    return m_is_global_context;
}
void OAICustomFieldContextProjectMapping::setIsGlobalContext(const bool &is_global_context) {
    m_is_global_context = is_global_context;
    m_is_global_context_isSet = true;
}

bool OAICustomFieldContextProjectMapping::is_is_global_context_Set() const{
    return m_is_global_context_isSet;
}

bool OAICustomFieldContextProjectMapping::is_is_global_context_Valid() const{
    return m_is_global_context_isValid;
}

QString OAICustomFieldContextProjectMapping::getProjectId() const {
    return m_project_id;
}
void OAICustomFieldContextProjectMapping::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAICustomFieldContextProjectMapping::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAICustomFieldContextProjectMapping::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAICustomFieldContextProjectMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldContextProjectMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_id_isValid && true;
}

} // namespace OpenAPI
