/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueCustomFieldOptionsApi_H
#define OAI_OAIIssueCustomFieldOptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkCustomFieldOptionCreateRequest.h"
#include "OAIBulkCustomFieldOptionUpdateRequest.h"
#include "OAICustomFieldCreatedContextOptionsList.h"
#include "OAICustomFieldOption.h"
#include "OAICustomFieldUpdatedContextOptionsList.h"
#include "OAIOrderOfCustomFieldOptions.h"
#include "OAIPageBeanCustomFieldContextOption.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueCustomFieldOptionsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueCustomFieldOptionsApi(const int timeOut = 0);
    ~OAIIssueCustomFieldOptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_bulk_custom_field_option_create_request OAIBulkCustomFieldOptionCreateRequest [required]
    */
    virtual void createCustomFieldOption(const QString &field_id, const qint64 &context_id, const OAIBulkCustomFieldOptionCreateRequest &oai_bulk_custom_field_option_create_request);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  option_id qint64 [required]
    */
    virtual void deleteCustomFieldOption(const QString &field_id, const qint64 &context_id, const qint64 &option_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCustomFieldOption(const QString &id);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  option_id qint64 [optional]
    * @param[in]  only_options bool [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getOptionsForContext(const QString &field_id, const qint64 &context_id, const ::OpenAPI::OptionalParam<qint64> &option_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &only_options = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_order_of_custom_field_options OAIOrderOfCustomFieldOptions [required]
    */
    virtual void reorderCustomFieldOptions(const QString &field_id, const qint64 &context_id, const OAIOrderOfCustomFieldOptions &oai_order_of_custom_field_options);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_bulk_custom_field_option_update_request OAIBulkCustomFieldOptionUpdateRequest [required]
    */
    virtual void updateCustomFieldOption(const QString &field_id, const qint64 &context_id, const OAIBulkCustomFieldOptionUpdateRequest &oai_bulk_custom_field_option_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomFieldOptionCallback(OAIHttpRequestWorker *worker);
    void deleteCustomFieldOptionCallback(OAIHttpRequestWorker *worker);
    void getCustomFieldOptionCallback(OAIHttpRequestWorker *worker);
    void getOptionsForContextCallback(OAIHttpRequestWorker *worker);
    void reorderCustomFieldOptionsCallback(OAIHttpRequestWorker *worker);
    void updateCustomFieldOptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomFieldOptionSignal(OAICustomFieldCreatedContextOptionsList summary);
    void deleteCustomFieldOptionSignal();
    void getCustomFieldOptionSignal(OAICustomFieldOption summary);
    void getOptionsForContextSignal(OAIPageBeanCustomFieldContextOption summary);
    void reorderCustomFieldOptionsSignal(QJsonValue summary);
    void updateCustomFieldOptionSignal(OAICustomFieldUpdatedContextOptionsList summary);


    void createCustomFieldOptionSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldCreatedContextOptionsList summary);
    void deleteCustomFieldOptionSignalFull(OAIHttpRequestWorker *worker);
    void getCustomFieldOptionSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldOption summary);
    void getOptionsForContextSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanCustomFieldContextOption summary);
    void reorderCustomFieldOptionsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateCustomFieldOptionSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldUpdatedContextOptionsList summary);

    Q_DECL_DEPRECATED_X("Use createCustomFieldOptionSignalError() instead")
    void createCustomFieldOptionSignalE(OAICustomFieldCreatedContextOptionsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldOptionSignalError(OAICustomFieldCreatedContextOptionsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFieldOptionSignalError() instead")
    void deleteCustomFieldOptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFieldOptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldOptionSignalError() instead")
    void getCustomFieldOptionSignalE(OAICustomFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldOptionSignalError(OAICustomFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOptionsForContextSignalError() instead")
    void getOptionsForContextSignalE(OAIPageBeanCustomFieldContextOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOptionsForContextSignalError(OAIPageBeanCustomFieldContextOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reorderCustomFieldOptionsSignalError() instead")
    void reorderCustomFieldOptionsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderCustomFieldOptionsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldOptionSignalError() instead")
    void updateCustomFieldOptionSignalE(OAICustomFieldUpdatedContextOptionsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldOptionSignalError(OAICustomFieldUpdatedContextOptionsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomFieldOptionSignalErrorFull() instead")
    void createCustomFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFieldOptionSignalErrorFull() instead")
    void deleteCustomFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldOptionSignalErrorFull() instead")
    void getCustomFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOptionsForContextSignalErrorFull() instead")
    void getOptionsForContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOptionsForContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reorderCustomFieldOptionsSignalErrorFull() instead")
    void reorderCustomFieldOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderCustomFieldOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldOptionSignalErrorFull() instead")
    void updateCustomFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
