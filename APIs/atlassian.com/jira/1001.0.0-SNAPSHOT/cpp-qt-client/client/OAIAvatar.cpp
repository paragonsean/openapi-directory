/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvatar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvatar::OAIAvatar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvatar::OAIAvatar() {
    this->initializeModel();
}

OAIAvatar::~OAIAvatar() {}

void OAIAvatar::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_deletable_isSet = false;
    m_is_deletable_isValid = false;

    m_is_selected_isSet = false;
    m_is_selected_isValid = false;

    m_is_system_avatar_isSet = false;
    m_is_system_avatar_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIAvatar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvatar::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_deletable_isValid = ::OpenAPI::fromJsonValue(m_is_deletable, json[QString("isDeletable")]);
    m_is_deletable_isSet = !json[QString("isDeletable")].isNull() && m_is_deletable_isValid;

    m_is_selected_isValid = ::OpenAPI::fromJsonValue(m_is_selected, json[QString("isSelected")]);
    m_is_selected_isSet = !json[QString("isSelected")].isNull() && m_is_selected_isValid;

    m_is_system_avatar_isValid = ::OpenAPI::fromJsonValue(m_is_system_avatar, json[QString("isSystemAvatar")]);
    m_is_system_avatar_isSet = !json[QString("isSystemAvatar")].isNull() && m_is_system_avatar_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIAvatar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvatar::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_deletable_isSet) {
        obj.insert(QString("isDeletable"), ::OpenAPI::toJsonValue(m_is_deletable));
    }
    if (m_is_selected_isSet) {
        obj.insert(QString("isSelected"), ::OpenAPI::toJsonValue(m_is_selected));
    }
    if (m_is_system_avatar_isSet) {
        obj.insert(QString("isSystemAvatar"), ::OpenAPI::toJsonValue(m_is_system_avatar));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QString OAIAvatar::getFileName() const {
    return m_file_name;
}
void OAIAvatar::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIAvatar::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIAvatar::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIAvatar::getId() const {
    return m_id;
}
void OAIAvatar::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAvatar::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAvatar::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAvatar::isIsDeletable() const {
    return m_is_deletable;
}
void OAIAvatar::setIsDeletable(const bool &is_deletable) {
    m_is_deletable = is_deletable;
    m_is_deletable_isSet = true;
}

bool OAIAvatar::is_is_deletable_Set() const{
    return m_is_deletable_isSet;
}

bool OAIAvatar::is_is_deletable_Valid() const{
    return m_is_deletable_isValid;
}

bool OAIAvatar::isIsSelected() const {
    return m_is_selected;
}
void OAIAvatar::setIsSelected(const bool &is_selected) {
    m_is_selected = is_selected;
    m_is_selected_isSet = true;
}

bool OAIAvatar::is_is_selected_Set() const{
    return m_is_selected_isSet;
}

bool OAIAvatar::is_is_selected_Valid() const{
    return m_is_selected_isValid;
}

bool OAIAvatar::isIsSystemAvatar() const {
    return m_is_system_avatar;
}
void OAIAvatar::setIsSystemAvatar(const bool &is_system_avatar) {
    m_is_system_avatar = is_system_avatar;
    m_is_system_avatar_isSet = true;
}

bool OAIAvatar::is_is_system_avatar_Set() const{
    return m_is_system_avatar_isSet;
}

bool OAIAvatar::is_is_system_avatar_Valid() const{
    return m_is_system_avatar_isValid;
}

QString OAIAvatar::getOwner() const {
    return m_owner;
}
void OAIAvatar::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAvatar::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAvatar::is_owner_Valid() const{
    return m_owner_isValid;
}

QMap<QString, QString> OAIAvatar::getUrls() const {
    return m_urls;
}
void OAIAvatar::setUrls(const QMap<QString, QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIAvatar::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIAvatar::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIAvatar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deletable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvatar::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
