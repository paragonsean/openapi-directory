/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJiraExpressionsComplexityBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJiraExpressionsComplexityBean::OAIJiraExpressionsComplexityBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJiraExpressionsComplexityBean::OAIJiraExpressionsComplexityBean() {
    this->initializeModel();
}

OAIJiraExpressionsComplexityBean::~OAIJiraExpressionsComplexityBean() {}

void OAIJiraExpressionsComplexityBean::initializeModel() {

    m_beans_isSet = false;
    m_beans_isValid = false;

    m_expensive_operations_isSet = false;
    m_expensive_operations_isValid = false;

    m_primitive_values_isSet = false;
    m_primitive_values_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIJiraExpressionsComplexityBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJiraExpressionsComplexityBean::fromJsonObject(QJsonObject json) {

    m_beans_isValid = ::OpenAPI::fromJsonValue(m_beans, json[QString("beans")]);
    m_beans_isSet = !json[QString("beans")].isNull() && m_beans_isValid;

    m_expensive_operations_isValid = ::OpenAPI::fromJsonValue(m_expensive_operations, json[QString("expensiveOperations")]);
    m_expensive_operations_isSet = !json[QString("expensiveOperations")].isNull() && m_expensive_operations_isValid;

    m_primitive_values_isValid = ::OpenAPI::fromJsonValue(m_primitive_values, json[QString("primitiveValues")]);
    m_primitive_values_isSet = !json[QString("primitiveValues")].isNull() && m_primitive_values_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIJiraExpressionsComplexityBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJiraExpressionsComplexityBean::asJsonObject() const {
    QJsonObject obj;
    if (m_beans.isSet()) {
        obj.insert(QString("beans"), ::OpenAPI::toJsonValue(m_beans));
    }
    if (m_expensive_operations.isSet()) {
        obj.insert(QString("expensiveOperations"), ::OpenAPI::toJsonValue(m_expensive_operations));
    }
    if (m_primitive_values.isSet()) {
        obj.insert(QString("primitiveValues"), ::OpenAPI::toJsonValue(m_primitive_values));
    }
    if (m_steps.isSet()) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

OAIJiraExpressionsComplexityValueBean OAIJiraExpressionsComplexityBean::getBeans() const {
    return m_beans;
}
void OAIJiraExpressionsComplexityBean::setBeans(const OAIJiraExpressionsComplexityValueBean &beans) {
    m_beans = beans;
    m_beans_isSet = true;
}

bool OAIJiraExpressionsComplexityBean::is_beans_Set() const{
    return m_beans_isSet;
}

bool OAIJiraExpressionsComplexityBean::is_beans_Valid() const{
    return m_beans_isValid;
}

OAIJiraExpressionsComplexityValueBean OAIJiraExpressionsComplexityBean::getExpensiveOperations() const {
    return m_expensive_operations;
}
void OAIJiraExpressionsComplexityBean::setExpensiveOperations(const OAIJiraExpressionsComplexityValueBean &expensive_operations) {
    m_expensive_operations = expensive_operations;
    m_expensive_operations_isSet = true;
}

bool OAIJiraExpressionsComplexityBean::is_expensive_operations_Set() const{
    return m_expensive_operations_isSet;
}

bool OAIJiraExpressionsComplexityBean::is_expensive_operations_Valid() const{
    return m_expensive_operations_isValid;
}

OAIJiraExpressionsComplexityValueBean OAIJiraExpressionsComplexityBean::getPrimitiveValues() const {
    return m_primitive_values;
}
void OAIJiraExpressionsComplexityBean::setPrimitiveValues(const OAIJiraExpressionsComplexityValueBean &primitive_values) {
    m_primitive_values = primitive_values;
    m_primitive_values_isSet = true;
}

bool OAIJiraExpressionsComplexityBean::is_primitive_values_Set() const{
    return m_primitive_values_isSet;
}

bool OAIJiraExpressionsComplexityBean::is_primitive_values_Valid() const{
    return m_primitive_values_isValid;
}

OAIJiraExpressionsComplexityValueBean OAIJiraExpressionsComplexityBean::getSteps() const {
    return m_steps;
}
void OAIJiraExpressionsComplexityBean::setSteps(const OAIJiraExpressionsComplexityValueBean &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIJiraExpressionsComplexityBean::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIJiraExpressionsComplexityBean::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIJiraExpressionsComplexityBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expensive_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primitive_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJiraExpressionsComplexityBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_beans_isValid && m_expensive_operations_isValid && m_primitive_values_isValid && m_steps_isValid && true;
}

} // namespace OpenAPI
