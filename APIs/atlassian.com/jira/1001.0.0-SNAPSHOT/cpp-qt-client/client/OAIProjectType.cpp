/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectType::OAIProjectType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectType::OAIProjectType() {
    this->initializeModel();
}

OAIProjectType::~OAIProjectType() {}

void OAIProjectType::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_i18n_key_isSet = false;
    m_description_i18n_key_isValid = false;

    m_formatted_key_isSet = false;
    m_formatted_key_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIProjectType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectType::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_i18n_key_isValid = ::OpenAPI::fromJsonValue(m_description_i18n_key, json[QString("descriptionI18nKey")]);
    m_description_i18n_key_isSet = !json[QString("descriptionI18nKey")].isNull() && m_description_i18n_key_isValid;

    m_formatted_key_isValid = ::OpenAPI::fromJsonValue(m_formatted_key, json[QString("formattedKey")]);
    m_formatted_key_isSet = !json[QString("formattedKey")].isNull() && m_formatted_key_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIProjectType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectType::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description_i18n_key_isSet) {
        obj.insert(QString("descriptionI18nKey"), ::OpenAPI::toJsonValue(m_description_i18n_key));
    }
    if (m_formatted_key_isSet) {
        obj.insert(QString("formattedKey"), ::OpenAPI::toJsonValue(m_formatted_key));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIProjectType::getColor() const {
    return m_color;
}
void OAIProjectType::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIProjectType::is_color_Set() const{
    return m_color_isSet;
}

bool OAIProjectType::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIProjectType::getDescriptionI18nKey() const {
    return m_description_i18n_key;
}
void OAIProjectType::setDescriptionI18nKey(const QString &description_i18n_key) {
    m_description_i18n_key = description_i18n_key;
    m_description_i18n_key_isSet = true;
}

bool OAIProjectType::is_description_i18n_key_Set() const{
    return m_description_i18n_key_isSet;
}

bool OAIProjectType::is_description_i18n_key_Valid() const{
    return m_description_i18n_key_isValid;
}

QString OAIProjectType::getFormattedKey() const {
    return m_formatted_key;
}
void OAIProjectType::setFormattedKey(const QString &formatted_key) {
    m_formatted_key = formatted_key;
    m_formatted_key_isSet = true;
}

bool OAIProjectType::is_formatted_key_Set() const{
    return m_formatted_key_isSet;
}

bool OAIProjectType::is_formatted_key_Valid() const{
    return m_formatted_key_isValid;
}

QString OAIProjectType::getIcon() const {
    return m_icon;
}
void OAIProjectType::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIProjectType::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIProjectType::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIProjectType::getKey() const {
    return m_key;
}
void OAIProjectType::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIProjectType::is_key_Set() const{
    return m_key_isSet;
}

bool OAIProjectType::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIProjectType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_i18n_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
