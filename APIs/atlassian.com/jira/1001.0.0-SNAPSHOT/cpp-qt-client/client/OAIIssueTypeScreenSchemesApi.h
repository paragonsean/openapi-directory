/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueTypeScreenSchemesApi_H
#define OAI_OAIIssueTypeScreenSchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIssueTypeIds.h"
#include "OAIIssueTypeScreenSchemeDetails.h"
#include "OAIIssueTypeScreenSchemeId.h"
#include "OAIIssueTypeScreenSchemeMappingDetails.h"
#include "OAIIssueTypeScreenSchemeProjectAssociation.h"
#include "OAIIssueTypeScreenSchemeUpdateDetails.h"
#include "OAIPageBeanIssueTypeScreenScheme.h"
#include "OAIPageBeanIssueTypeScreenSchemeItem.h"
#include "OAIPageBeanIssueTypeScreenSchemesProjects.h"
#include "OAIPageBeanProjectDetails.h"
#include "OAIUpdateDefaultScreenScheme.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueTypeScreenSchemesApi : public QObject {
    Q_OBJECT

public:
    OAIIssueTypeScreenSchemesApi(const int timeOut = 0);
    ~OAIIssueTypeScreenSchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_type_screen_scheme_id QString [required]
    * @param[in]  oai_issue_type_screen_scheme_mapping_details OAIIssueTypeScreenSchemeMappingDetails [required]
    */
    virtual void appendMappingsForIssueTypeScreenScheme(const QString &issue_type_screen_scheme_id, const OAIIssueTypeScreenSchemeMappingDetails &oai_issue_type_screen_scheme_mapping_details);

    /**
    * @param[in]  oai_issue_type_screen_scheme_project_association OAIIssueTypeScreenSchemeProjectAssociation [required]
    */
    virtual void assignIssueTypeScreenSchemeToProject(const OAIIssueTypeScreenSchemeProjectAssociation &oai_issue_type_screen_scheme_project_association);

    /**
    * @param[in]  oai_issue_type_screen_scheme_details OAIIssueTypeScreenSchemeDetails [required]
    */
    virtual void createIssueTypeScreenScheme(const OAIIssueTypeScreenSchemeDetails &oai_issue_type_screen_scheme_details);

    /**
    * @param[in]  issue_type_screen_scheme_id QString [required]
    */
    virtual void deleteIssueTypeScreenScheme(const QString &issue_type_screen_scheme_id);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  issue_type_screen_scheme_id QSet<qint64> [optional]
    */
    virtual void getIssueTypeScreenSchemeMappings(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &issue_type_screen_scheme_id = ::OpenAPI::OptionalParam<QSet<qint64>>());

    /**
    * @param[in]  project_id QSet<qint64> [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getIssueTypeScreenSchemeProjectAssociations(const QSet<qint64> &project_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  id QSet<qint64> [optional]
    * @param[in]  query_string QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getIssueTypeScreenSchemes(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<QString> &query_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_type_screen_scheme_id qint64 [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  query QString [optional]
    */
    virtual void getProjectsForIssueTypeScreenScheme(const qint64 &issue_type_screen_scheme_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_type_screen_scheme_id QString [required]
    * @param[in]  oai_issue_type_ids OAIIssueTypeIds [required]
    */
    virtual void removeMappingsFromIssueTypeScreenScheme(const QString &issue_type_screen_scheme_id, const OAIIssueTypeIds &oai_issue_type_ids);

    /**
    * @param[in]  issue_type_screen_scheme_id QString [required]
    * @param[in]  oai_update_default_screen_scheme OAIUpdateDefaultScreenScheme [required]
    */
    virtual void updateDefaultScreenScheme(const QString &issue_type_screen_scheme_id, const OAIUpdateDefaultScreenScheme &oai_update_default_screen_scheme);

    /**
    * @param[in]  issue_type_screen_scheme_id QString [required]
    * @param[in]  oai_issue_type_screen_scheme_update_details OAIIssueTypeScreenSchemeUpdateDetails [required]
    */
    virtual void updateIssueTypeScreenScheme(const QString &issue_type_screen_scheme_id, const OAIIssueTypeScreenSchemeUpdateDetails &oai_issue_type_screen_scheme_update_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appendMappingsForIssueTypeScreenSchemeCallback(OAIHttpRequestWorker *worker);
    void assignIssueTypeScreenSchemeToProjectCallback(OAIHttpRequestWorker *worker);
    void createIssueTypeScreenSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteIssueTypeScreenSchemeCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeScreenSchemeMappingsCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeScreenSchemeProjectAssociationsCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeScreenSchemesCallback(OAIHttpRequestWorker *worker);
    void getProjectsForIssueTypeScreenSchemeCallback(OAIHttpRequestWorker *worker);
    void removeMappingsFromIssueTypeScreenSchemeCallback(OAIHttpRequestWorker *worker);
    void updateDefaultScreenSchemeCallback(OAIHttpRequestWorker *worker);
    void updateIssueTypeScreenSchemeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appendMappingsForIssueTypeScreenSchemeSignal(QJsonValue summary);
    void assignIssueTypeScreenSchemeToProjectSignal(QJsonValue summary);
    void createIssueTypeScreenSchemeSignal(OAIIssueTypeScreenSchemeId summary);
    void deleteIssueTypeScreenSchemeSignal(QJsonValue summary);
    void getIssueTypeScreenSchemeMappingsSignal(OAIPageBeanIssueTypeScreenSchemeItem summary);
    void getIssueTypeScreenSchemeProjectAssociationsSignal(OAIPageBeanIssueTypeScreenSchemesProjects summary);
    void getIssueTypeScreenSchemesSignal(OAIPageBeanIssueTypeScreenScheme summary);
    void getProjectsForIssueTypeScreenSchemeSignal(OAIPageBeanProjectDetails summary);
    void removeMappingsFromIssueTypeScreenSchemeSignal(QJsonValue summary);
    void updateDefaultScreenSchemeSignal(QJsonValue summary);
    void updateIssueTypeScreenSchemeSignal(QJsonValue summary);


    void appendMappingsForIssueTypeScreenSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void assignIssueTypeScreenSchemeToProjectSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createIssueTypeScreenSchemeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeScreenSchemeId summary);
    void deleteIssueTypeScreenSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getIssueTypeScreenSchemeMappingsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeScreenSchemeItem summary);
    void getIssueTypeScreenSchemeProjectAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeScreenSchemesProjects summary);
    void getIssueTypeScreenSchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeScreenScheme summary);
    void getProjectsForIssueTypeScreenSchemeSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanProjectDetails summary);
    void removeMappingsFromIssueTypeScreenSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateDefaultScreenSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateIssueTypeScreenSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use appendMappingsForIssueTypeScreenSchemeSignalError() instead")
    void appendMappingsForIssueTypeScreenSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appendMappingsForIssueTypeScreenSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignIssueTypeScreenSchemeToProjectSignalError() instead")
    void assignIssueTypeScreenSchemeToProjectSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignIssueTypeScreenSchemeToProjectSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeScreenSchemeSignalError() instead")
    void createIssueTypeScreenSchemeSignalE(OAIIssueTypeScreenSchemeId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeScreenSchemeSignalError(OAIIssueTypeScreenSchemeId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueTypeScreenSchemeSignalError() instead")
    void deleteIssueTypeScreenSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueTypeScreenSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeScreenSchemeMappingsSignalError() instead")
    void getIssueTypeScreenSchemeMappingsSignalE(OAIPageBeanIssueTypeScreenSchemeItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeScreenSchemeMappingsSignalError(OAIPageBeanIssueTypeScreenSchemeItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeScreenSchemeProjectAssociationsSignalError() instead")
    void getIssueTypeScreenSchemeProjectAssociationsSignalE(OAIPageBeanIssueTypeScreenSchemesProjects summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeScreenSchemeProjectAssociationsSignalError(OAIPageBeanIssueTypeScreenSchemesProjects summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeScreenSchemesSignalError() instead")
    void getIssueTypeScreenSchemesSignalE(OAIPageBeanIssueTypeScreenScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeScreenSchemesSignalError(OAIPageBeanIssueTypeScreenScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForIssueTypeScreenSchemeSignalError() instead")
    void getProjectsForIssueTypeScreenSchemeSignalE(OAIPageBeanProjectDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForIssueTypeScreenSchemeSignalError(OAIPageBeanProjectDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMappingsFromIssueTypeScreenSchemeSignalError() instead")
    void removeMappingsFromIssueTypeScreenSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMappingsFromIssueTypeScreenSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultScreenSchemeSignalError() instead")
    void updateDefaultScreenSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultScreenSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeScreenSchemeSignalError() instead")
    void updateIssueTypeScreenSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeScreenSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appendMappingsForIssueTypeScreenSchemeSignalErrorFull() instead")
    void appendMappingsForIssueTypeScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appendMappingsForIssueTypeScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignIssueTypeScreenSchemeToProjectSignalErrorFull() instead")
    void assignIssueTypeScreenSchemeToProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignIssueTypeScreenSchemeToProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeScreenSchemeSignalErrorFull() instead")
    void createIssueTypeScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueTypeScreenSchemeSignalErrorFull() instead")
    void deleteIssueTypeScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueTypeScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeScreenSchemeMappingsSignalErrorFull() instead")
    void getIssueTypeScreenSchemeMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeScreenSchemeMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeScreenSchemeProjectAssociationsSignalErrorFull() instead")
    void getIssueTypeScreenSchemeProjectAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeScreenSchemeProjectAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeScreenSchemesSignalErrorFull() instead")
    void getIssueTypeScreenSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeScreenSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForIssueTypeScreenSchemeSignalErrorFull() instead")
    void getProjectsForIssueTypeScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForIssueTypeScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMappingsFromIssueTypeScreenSchemeSignalErrorFull() instead")
    void removeMappingsFromIssueTypeScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMappingsFromIssueTypeScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultScreenSchemeSignalErrorFull() instead")
    void updateDefaultScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeScreenSchemeSignalErrorFull() instead")
    void updateIssueTypeScreenSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeScreenSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
