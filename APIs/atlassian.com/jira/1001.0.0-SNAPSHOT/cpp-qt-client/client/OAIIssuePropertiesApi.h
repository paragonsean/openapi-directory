/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssuePropertiesApi_H
#define OAI_OAIIssuePropertiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkIssuePropertyUpdateRequest.h"
#include "OAIEntityProperty.h"
#include "OAIErrorCollection.h"
#include "OAIIssueEntityProperties.h"
#include "OAIIssueFilterForBulkPropertyDelete.h"
#include "OAIMultiIssueEntityProperties.h"
#include "OAIPropertyKeys.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssuePropertiesApi : public QObject {
    Q_OBJECT

public:
    OAIIssuePropertiesApi(const int timeOut = 0);
    ~OAIIssuePropertiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  property_key QString [required]
    * @param[in]  oai_issue_filter_for_bulk_property_delete OAIIssueFilterForBulkPropertyDelete [required]
    */
    virtual void bulkDeleteIssueProperty(const QString &property_key, const OAIIssueFilterForBulkPropertyDelete &oai_issue_filter_for_bulk_property_delete);

    /**
    * @param[in]  oai_multi_issue_entity_properties OAIMultiIssueEntityProperties [required]
    */
    virtual void bulkSetIssuePropertiesByIssue(const OAIMultiIssueEntityProperties &oai_multi_issue_entity_properties);

    /**
    * @param[in]  property_key QString [required]
    * @param[in]  oai_bulk_issue_property_update_request OAIBulkIssuePropertyUpdateRequest [required]
    */
    virtual void bulkSetIssueProperty(const QString &property_key, const OAIBulkIssuePropertyUpdateRequest &oai_bulk_issue_property_update_request);

    /**
    * @param[in]  oai_issue_entity_properties OAIIssueEntityProperties [required]
    */
    virtual void bulkSetIssuesPropertiesList(const OAIIssueEntityProperties &oai_issue_entity_properties);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void deleteIssueProperty(const QString &issue_id_or_key, const QString &property_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void getIssueProperty(const QString &issue_id_or_key, const QString &property_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getIssuePropertyKeys(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    * @param[in]  body QJsonValue [required]
    */
    virtual void setIssueProperty(const QString &issue_id_or_key, const QString &property_key, const QJsonValue &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bulkDeleteIssuePropertyCallback(OAIHttpRequestWorker *worker);
    void bulkSetIssuePropertiesByIssueCallback(OAIHttpRequestWorker *worker);
    void bulkSetIssuePropertyCallback(OAIHttpRequestWorker *worker);
    void bulkSetIssuesPropertiesListCallback(OAIHttpRequestWorker *worker);
    void deleteIssuePropertyCallback(OAIHttpRequestWorker *worker);
    void getIssuePropertyCallback(OAIHttpRequestWorker *worker);
    void getIssuePropertyKeysCallback(OAIHttpRequestWorker *worker);
    void setIssuePropertyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bulkDeleteIssuePropertySignal();
    void bulkSetIssuePropertiesByIssueSignal();
    void bulkSetIssuePropertySignal();
    void bulkSetIssuesPropertiesListSignal();
    void deleteIssuePropertySignal();
    void getIssuePropertySignal(OAIEntityProperty summary);
    void getIssuePropertyKeysSignal(OAIPropertyKeys summary);
    void setIssuePropertySignal(QJsonValue summary);


    void bulkDeleteIssuePropertySignalFull(OAIHttpRequestWorker *worker);
    void bulkSetIssuePropertiesByIssueSignalFull(OAIHttpRequestWorker *worker);
    void bulkSetIssuePropertySignalFull(OAIHttpRequestWorker *worker);
    void bulkSetIssuesPropertiesListSignalFull(OAIHttpRequestWorker *worker);
    void deleteIssuePropertySignalFull(OAIHttpRequestWorker *worker);
    void getIssuePropertySignalFull(OAIHttpRequestWorker *worker, OAIEntityProperty summary);
    void getIssuePropertyKeysSignalFull(OAIHttpRequestWorker *worker, OAIPropertyKeys summary);
    void setIssuePropertySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use bulkDeleteIssuePropertySignalError() instead")
    void bulkDeleteIssuePropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bulkDeleteIssuePropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSetIssuePropertiesByIssueSignalError() instead")
    void bulkSetIssuePropertiesByIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSetIssuePropertiesByIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSetIssuePropertySignalError() instead")
    void bulkSetIssuePropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSetIssuePropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSetIssuesPropertiesListSignalError() instead")
    void bulkSetIssuesPropertiesListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSetIssuesPropertiesListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssuePropertySignalError() instead")
    void deleteIssuePropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssuePropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuePropertySignalError() instead")
    void getIssuePropertySignalE(OAIEntityProperty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePropertySignalError(OAIEntityProperty summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuePropertyKeysSignalError() instead")
    void getIssuePropertyKeysSignalE(OAIPropertyKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePropertyKeysSignalError(OAIPropertyKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setIssuePropertySignalError() instead")
    void setIssuePropertySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setIssuePropertySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bulkDeleteIssuePropertySignalErrorFull() instead")
    void bulkDeleteIssuePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkDeleteIssuePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSetIssuePropertiesByIssueSignalErrorFull() instead")
    void bulkSetIssuePropertiesByIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSetIssuePropertiesByIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSetIssuePropertySignalErrorFull() instead")
    void bulkSetIssuePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSetIssuePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSetIssuesPropertiesListSignalErrorFull() instead")
    void bulkSetIssuesPropertiesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSetIssuesPropertiesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssuePropertySignalErrorFull() instead")
    void deleteIssuePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssuePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuePropertySignalErrorFull() instead")
    void getIssuePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuePropertyKeysSignalErrorFull() instead")
    void getIssuePropertyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePropertyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setIssuePropertySignalErrorFull() instead")
    void setIssuePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setIssuePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
