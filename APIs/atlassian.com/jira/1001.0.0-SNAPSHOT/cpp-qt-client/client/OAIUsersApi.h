/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIColumnItem.h"
#include "OAIGroupName.h"
#include "OAINewUserDetails.h"
#include "OAIPageBeanUser.h"
#include "OAIUnrestrictedUserEmail.h"
#include "OAIUser.h"
#include "OAIUserMigrationBean.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QList<QString> [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  username QList<QString> [optional]
    * @param[in]  key QList<QString> [optional]
    */
    virtual void bulkGetUsers(const QList<QString> &account_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &username = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &key = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  username QList<QString> [optional]
    * @param[in]  key QList<QString> [optional]
    */
    virtual void bulkGetUsersMigration(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &username = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &key = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_new_user_details OAINewUserDetails [required]
    */
    virtual void createUser(const OAINewUserDetails &oai_new_user_details);

    /**
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getAllUsers(const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getAllUsersDefault(const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getUser(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void getUserDefaultColumns(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void getUserEmail(const QString &account_id);

    /**
    * @param[in]  account_id QList<QString> [required]
    */
    virtual void getUserEmailBulk(const QList<QString> &account_id);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void getUserGroups(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void removeUser(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void resetUserColumns(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void setUserColumns(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bulkGetUsersCallback(OAIHttpRequestWorker *worker);
    void bulkGetUsersMigrationCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void getAllUsersCallback(OAIHttpRequestWorker *worker);
    void getAllUsersDefaultCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserDefaultColumnsCallback(OAIHttpRequestWorker *worker);
    void getUserEmailCallback(OAIHttpRequestWorker *worker);
    void getUserEmailBulkCallback(OAIHttpRequestWorker *worker);
    void getUserGroupsCallback(OAIHttpRequestWorker *worker);
    void removeUserCallback(OAIHttpRequestWorker *worker);
    void resetUserColumnsCallback(OAIHttpRequestWorker *worker);
    void setUserColumnsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bulkGetUsersSignal(OAIPageBeanUser summary);
    void bulkGetUsersMigrationSignal(QList<OAIUserMigrationBean> summary);
    void createUserSignal(OAIUser summary);
    void getAllUsersSignal(QList<OAIUser> summary);
    void getAllUsersDefaultSignal(QList<OAIUser> summary);
    void getUserSignal(OAIUser summary);
    void getUserDefaultColumnsSignal(QList<OAIColumnItem> summary);
    void getUserEmailSignal(OAIUnrestrictedUserEmail summary);
    void getUserEmailBulkSignal(OAIUnrestrictedUserEmail summary);
    void getUserGroupsSignal(QList<OAIGroupName> summary);
    void removeUserSignal();
    void resetUserColumnsSignal();
    void setUserColumnsSignal(QJsonValue summary);


    void bulkGetUsersSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanUser summary);
    void bulkGetUsersMigrationSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserMigrationBean> summary);
    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getAllUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getAllUsersDefaultSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserDefaultColumnsSignalFull(OAIHttpRequestWorker *worker, QList<OAIColumnItem> summary);
    void getUserEmailSignalFull(OAIHttpRequestWorker *worker, OAIUnrestrictedUserEmail summary);
    void getUserEmailBulkSignalFull(OAIHttpRequestWorker *worker, OAIUnrestrictedUserEmail summary);
    void getUserGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupName> summary);
    void removeUserSignalFull(OAIHttpRequestWorker *worker);
    void resetUserColumnsSignalFull(OAIHttpRequestWorker *worker);
    void setUserColumnsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use bulkGetUsersSignalError() instead")
    void bulkGetUsersSignalE(OAIPageBeanUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkGetUsersSignalError(OAIPageBeanUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkGetUsersMigrationSignalError() instead")
    void bulkGetUsersMigrationSignalE(QList<OAIUserMigrationBean> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkGetUsersMigrationSignalError(QList<OAIUserMigrationBean> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUsersSignalError() instead")
    void getAllUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUsersDefaultSignalError() instead")
    void getAllUsersDefaultSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUsersDefaultSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserDefaultColumnsSignalError() instead")
    void getUserDefaultColumnsSignalE(QList<OAIColumnItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserDefaultColumnsSignalError(QList<OAIColumnItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEmailSignalError() instead")
    void getUserEmailSignalE(OAIUnrestrictedUserEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEmailSignalError(OAIUnrestrictedUserEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEmailBulkSignalError() instead")
    void getUserEmailBulkSignalE(OAIUnrestrictedUserEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEmailBulkSignalError(OAIUnrestrictedUserEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserGroupsSignalError() instead")
    void getUserGroupsSignalE(QList<OAIGroupName> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalError(QList<OAIGroupName> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserSignalError() instead")
    void removeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetUserColumnsSignalError() instead")
    void resetUserColumnsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetUserColumnsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserColumnsSignalError() instead")
    void setUserColumnsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserColumnsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bulkGetUsersSignalErrorFull() instead")
    void bulkGetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkGetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkGetUsersMigrationSignalErrorFull() instead")
    void bulkGetUsersMigrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkGetUsersMigrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUsersSignalErrorFull() instead")
    void getAllUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUsersDefaultSignalErrorFull() instead")
    void getAllUsersDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUsersDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserDefaultColumnsSignalErrorFull() instead")
    void getUserDefaultColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserDefaultColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEmailSignalErrorFull() instead")
    void getUserEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEmailBulkSignalErrorFull() instead")
    void getUserEmailBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEmailBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserGroupsSignalErrorFull() instead")
    void getUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserSignalErrorFull() instead")
    void removeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetUserColumnsSignalErrorFull() instead")
    void resetUserColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetUserColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserColumnsSignalErrorFull() instead")
    void setUserColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
