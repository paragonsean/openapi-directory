/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_application_roles_isSet = false;
    m_application_roles_isValid = false;

    m_avatar_urls_isSet = false;
    m_avatar_urls_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_application_roles_isValid = ::OpenAPI::fromJsonValue(m_application_roles, json[QString("applicationRoles")]);
    m_application_roles_isSet = !json[QString("applicationRoles")].isNull() && m_application_roles_isValid;

    m_avatar_urls_isValid = ::OpenAPI::fromJsonValue(m_avatar_urls, json[QString("avatarUrls")]);
    m_avatar_urls_isSet = !json[QString("avatarUrls")].isNull() && m_avatar_urls_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_application_roles.isSet()) {
        obj.insert(QString("applicationRoles"), ::OpenAPI::toJsonValue(m_application_roles));
    }
    if (m_avatar_urls.isSet()) {
        obj.insert(QString("avatarUrls"), ::OpenAPI::toJsonValue(m_avatar_urls));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIUser::getAccountId() const {
    return m_account_id;
}
void OAIUser::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUser::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUser::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUser::getAccountType() const {
    return m_account_type;
}
void OAIUser::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIUser::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIUser::is_account_type_Valid() const{
    return m_account_type_isValid;
}

bool OAIUser::isActive() const {
    return m_active;
}
void OAIUser::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUser::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUser::is_active_Valid() const{
    return m_active_isValid;
}

OAISimpleListWrapperApplicationRole OAIUser::getApplicationRoles() const {
    return m_application_roles;
}
void OAIUser::setApplicationRoles(const OAISimpleListWrapperApplicationRole &application_roles) {
    m_application_roles = application_roles;
    m_application_roles_isSet = true;
}

bool OAIUser::is_application_roles_Set() const{
    return m_application_roles_isSet;
}

bool OAIUser::is_application_roles_Valid() const{
    return m_application_roles_isValid;
}

OAIAvatarUrlsBean OAIUser::getAvatarUrls() const {
    return m_avatar_urls;
}
void OAIUser::setAvatarUrls(const OAIAvatarUrlsBean &avatar_urls) {
    m_avatar_urls = avatar_urls;
    m_avatar_urls_isSet = true;
}

bool OAIUser::is_avatar_urls_Set() const{
    return m_avatar_urls_isSet;
}

bool OAIUser::is_avatar_urls_Valid() const{
    return m_avatar_urls_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser::getEmailAddress() const {
    return m_email_address;
}
void OAIUser::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIUser::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIUser::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIUser::getExpand() const {
    return m_expand;
}
void OAIUser::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIUser::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIUser::is_expand_Valid() const{
    return m_expand_isValid;
}

OAISimpleListWrapperGroupName OAIUser::getGroups() const {
    return m_groups;
}
void OAIUser::setGroups(const OAISimpleListWrapperGroupName &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUser::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUser::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIUser::getKey() const {
    return m_key;
}
void OAIUser::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUser::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUser::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIUser::getLocale() const {
    return m_locale;
}
void OAIUser::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUser::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUser::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getSelf() const {
    return m_self;
}
void OAIUser::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIUser::is_self_Set() const{
    return m_self_isSet;
}

bool OAIUser::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIUser::getTimeZone() const {
    return m_time_zone;
}
void OAIUser::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUser::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUser::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
