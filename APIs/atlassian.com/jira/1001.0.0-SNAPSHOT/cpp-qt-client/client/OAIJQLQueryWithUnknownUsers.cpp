/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJQLQueryWithUnknownUsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJQLQueryWithUnknownUsers::OAIJQLQueryWithUnknownUsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJQLQueryWithUnknownUsers::OAIJQLQueryWithUnknownUsers() {
    this->initializeModel();
}

OAIJQLQueryWithUnknownUsers::~OAIJQLQueryWithUnknownUsers() {}

void OAIJQLQueryWithUnknownUsers::initializeModel() {

    m_converted_query_isSet = false;
    m_converted_query_isValid = false;

    m_original_query_isSet = false;
    m_original_query_isValid = false;
}

void OAIJQLQueryWithUnknownUsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJQLQueryWithUnknownUsers::fromJsonObject(QJsonObject json) {

    m_converted_query_isValid = ::OpenAPI::fromJsonValue(m_converted_query, json[QString("convertedQuery")]);
    m_converted_query_isSet = !json[QString("convertedQuery")].isNull() && m_converted_query_isValid;

    m_original_query_isValid = ::OpenAPI::fromJsonValue(m_original_query, json[QString("originalQuery")]);
    m_original_query_isSet = !json[QString("originalQuery")].isNull() && m_original_query_isValid;
}

QString OAIJQLQueryWithUnknownUsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJQLQueryWithUnknownUsers::asJsonObject() const {
    QJsonObject obj;
    if (m_converted_query_isSet) {
        obj.insert(QString("convertedQuery"), ::OpenAPI::toJsonValue(m_converted_query));
    }
    if (m_original_query_isSet) {
        obj.insert(QString("originalQuery"), ::OpenAPI::toJsonValue(m_original_query));
    }
    return obj;
}

QString OAIJQLQueryWithUnknownUsers::getConvertedQuery() const {
    return m_converted_query;
}
void OAIJQLQueryWithUnknownUsers::setConvertedQuery(const QString &converted_query) {
    m_converted_query = converted_query;
    m_converted_query_isSet = true;
}

bool OAIJQLQueryWithUnknownUsers::is_converted_query_Set() const{
    return m_converted_query_isSet;
}

bool OAIJQLQueryWithUnknownUsers::is_converted_query_Valid() const{
    return m_converted_query_isValid;
}

QString OAIJQLQueryWithUnknownUsers::getOriginalQuery() const {
    return m_original_query;
}
void OAIJQLQueryWithUnknownUsers::setOriginalQuery(const QString &original_query) {
    m_original_query = original_query;
    m_original_query_isSet = true;
}

bool OAIJQLQueryWithUnknownUsers::is_original_query_Set() const{
    return m_original_query_isSet;
}

bool OAIJQLQueryWithUnknownUsers::is_original_query_Valid() const{
    return m_original_query_isValid;
}

bool OAIJQLQueryWithUnknownUsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_converted_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJQLQueryWithUnknownUsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
