/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddGroupBean.h"
#include "OAIFoundGroups.h"
#include "OAIGroup.h"
#include "OAIPageBeanGroupDetails.h"
#include "OAIPageBeanUserDetails.h"
#include "OAIUpdateUserToGroupBean.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_update_user_to_group_bean OAIUpdateUserToGroupBean [required]
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    */
    virtual void addUserToGroup(const OAIUpdateUserToGroupBean &oai_update_user_to_group_bean, const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  group_id QSet<QString> [optional]
    * @param[in]  group_name QSet<QString> [optional]
    * @param[in]  access_type QString [optional]
    * @param[in]  application_key QString [optional]
    */
    virtual void bulkGetGroups(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &group_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &group_name = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &access_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_add_group_bean OAIAddGroupBean [required]
    */
    virtual void createGroup(const OAIAddGroupBean &oai_add_group_bean);

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  exclude_id QList<QString> [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  case_insensitive bool [optional]
    * @param[in]  user_name QString [optional]
    */
    virtual void findGroups(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &case_insensitive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  expand QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  include_inactive_users bool [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getUsersFromGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_inactive_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  swap_group QString [optional]
    * @param[in]  swap_group_id QString [optional]
    */
    virtual void removeGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &swap_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &swap_group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void removeUserFromGroup(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addUserToGroupCallback(OAIHttpRequestWorker *worker);
    void bulkGetGroupsCallback(OAIHttpRequestWorker *worker);
    void createGroupCallback(OAIHttpRequestWorker *worker);
    void findGroupsCallback(OAIHttpRequestWorker *worker);
    void getGroupCallback(OAIHttpRequestWorker *worker);
    void getUsersFromGroupCallback(OAIHttpRequestWorker *worker);
    void removeGroupCallback(OAIHttpRequestWorker *worker);
    void removeUserFromGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addUserToGroupSignal(OAIGroup summary);
    void bulkGetGroupsSignal(OAIPageBeanGroupDetails summary);
    void createGroupSignal(OAIGroup summary);
    void findGroupsSignal(OAIFoundGroups summary);
    void getGroupSignal(OAIGroup summary);
    void getUsersFromGroupSignal(OAIPageBeanUserDetails summary);
    void removeGroupSignal();
    void removeUserFromGroupSignal();


    void addUserToGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void bulkGetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanGroupDetails summary);
    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void findGroupsSignalFull(OAIHttpRequestWorker *worker, OAIFoundGroups summary);
    void getGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void getUsersFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanUserDetails summary);
    void removeGroupSignalFull(OAIHttpRequestWorker *worker);
    void removeUserFromGroupSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addUserToGroupSignalError() instead")
    void addUserToGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkGetGroupsSignalError() instead")
    void bulkGetGroupsSignalE(OAIPageBeanGroupDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkGetGroupsSignalError(OAIPageBeanGroupDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupsSignalError() instead")
    void findGroupsSignalE(OAIFoundGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupsSignalError(OAIFoundGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalError() instead")
    void getGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersFromGroupSignalError() instead")
    void getUsersFromGroupSignalE(OAIPageBeanUserDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersFromGroupSignalError(OAIPageBeanUserDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupSignalError() instead")
    void removeGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromGroupSignalError() instead")
    void removeUserFromGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addUserToGroupSignalErrorFull() instead")
    void addUserToGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkGetGroupsSignalErrorFull() instead")
    void bulkGetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkGetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupsSignalErrorFull() instead")
    void findGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalErrorFull() instead")
    void getGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersFromGroupSignalErrorFull() instead")
    void getUsersFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupSignalErrorFull() instead")
    void removeGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromGroupSignalErrorFull() instead")
    void removeUserFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
