/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMyselfApi_H
#define OAI_OAIMyselfApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILocale.h"
#include "OAIUser.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMyselfApi : public QObject {
    Q_OBJECT

public:
    OAIMyselfApi(const int timeOut = 0);
    ~OAIMyselfApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    Q_DECL_DEPRECATED virtual void deleteLocale();

    /**
    * @param[in]  expand QString [optional]
    */
    virtual void getCurrentUser(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


    virtual void getLocale();

    /**
    * @param[in]  key QString [required]
    */
    virtual void getPreference(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void removePreference(const QString &key);

    /**
    * @param[in]  oai_locale OAILocale [required]
    */
    Q_DECL_DEPRECATED virtual void setLocale(const OAILocale &oai_locale);

    /**
    * @param[in]  key QString [required]
    * @param[in]  body QString [required]
    */
    virtual void setPreference(const QString &key, const QString &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteLocaleCallback(OAIHttpRequestWorker *worker);
    void getCurrentUserCallback(OAIHttpRequestWorker *worker);
    void getLocaleCallback(OAIHttpRequestWorker *worker);
    void getPreferenceCallback(OAIHttpRequestWorker *worker);
    void removePreferenceCallback(OAIHttpRequestWorker *worker);
    void setLocaleCallback(OAIHttpRequestWorker *worker);
    void setPreferenceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteLocaleSignal(QJsonValue summary);
    void getCurrentUserSignal(OAIUser summary);
    void getLocaleSignal(OAILocale summary);
    void getPreferenceSignal(QString summary);
    void removePreferenceSignal();
    void setLocaleSignal(QJsonValue summary);
    void setPreferenceSignal(QJsonValue summary);


    void deleteLocaleSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getCurrentUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getLocaleSignalFull(OAIHttpRequestWorker *worker, OAILocale summary);
    void getPreferenceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void removePreferenceSignalFull(OAIHttpRequestWorker *worker);
    void setLocaleSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void setPreferenceSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use deleteLocaleSignalError() instead")
    void deleteLocaleSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLocaleSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUserSignalError() instead")
    void getCurrentUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocaleSignalError() instead")
    void getLocaleSignalE(OAILocale summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocaleSignalError(OAILocale summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPreferenceSignalError() instead")
    void getPreferenceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPreferenceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePreferenceSignalError() instead")
    void removePreferenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removePreferenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLocaleSignalError() instead")
    void setLocaleSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setLocaleSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPreferenceSignalError() instead")
    void setPreferenceSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPreferenceSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteLocaleSignalErrorFull() instead")
    void deleteLocaleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLocaleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUserSignalErrorFull() instead")
    void getCurrentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocaleSignalErrorFull() instead")
    void getLocaleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocaleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPreferenceSignalErrorFull() instead")
    void getPreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePreferenceSignalErrorFull() instead")
    void removePreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLocaleSignalErrorFull() instead")
    void setLocaleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setLocaleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPreferenceSignalErrorFull() instead")
    void setPreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
