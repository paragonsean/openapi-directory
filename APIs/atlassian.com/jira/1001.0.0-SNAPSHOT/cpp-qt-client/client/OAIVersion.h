/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVersion.h
 *
 * Details about a project version.
 */

#ifndef OAIVersion_H
#define OAIVersion_H

#include <QJsonObject>

#include "OAISimpleLink.h"
#include "OAIVersionIssuesStatus.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleLink;

class OAIVersion : public OAIObject {
public:
    OAIVersion();
    OAIVersion(QString json);
    ~OAIVersion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getExpand() const;
    void setExpand(const QString &expand);
    bool is_expand_Set() const;
    bool is_expand_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIVersionIssuesStatus getIssuesStatusForFixVersion() const;
    void setIssuesStatusForFixVersion(const OAIVersionIssuesStatus &issues_status_for_fix_version);
    bool is_issues_status_for_fix_version_Set() const;
    bool is_issues_status_for_fix_version_Valid() const;

    QString getMoveUnfixedIssuesTo() const;
    void setMoveUnfixedIssuesTo(const QString &move_unfixed_issues_to);
    bool is_move_unfixed_issues_to_Set() const;
    bool is_move_unfixed_issues_to_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAISimpleLink> getOperations() const;
    void setOperations(const QList<OAISimpleLink> &operations);
    bool is_operations_Set() const;
    bool is_operations_Valid() const;

    bool isOverdue() const;
    void setOverdue(const bool &overdue);
    bool is_overdue_Set() const;
    bool is_overdue_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    qint64 getProjectId() const;
    void setProjectId(const qint64 &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    QDate getReleaseDate() const;
    void setReleaseDate(const QDate &release_date);
    bool is_release_date_Set() const;
    bool is_release_date_Valid() const;

    bool isReleased() const;
    void setReleased(const bool &released);
    bool is_released_Set() const;
    bool is_released_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    QDate getStartDate() const;
    void setStartDate(const QDate &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QString getUserReleaseDate() const;
    void setUserReleaseDate(const QString &user_release_date);
    bool is_user_release_date_Set() const;
    bool is_user_release_date_Valid() const;

    QString getUserStartDate() const;
    void setUserStartDate(const QString &user_start_date);
    bool is_user_start_date_Set() const;
    bool is_user_start_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_expand;
    bool m_expand_isSet;
    bool m_expand_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIVersionIssuesStatus m_issues_status_for_fix_version;
    bool m_issues_status_for_fix_version_isSet;
    bool m_issues_status_for_fix_version_isValid;

    QString m_move_unfixed_issues_to;
    bool m_move_unfixed_issues_to_isSet;
    bool m_move_unfixed_issues_to_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAISimpleLink> m_operations;
    bool m_operations_isSet;
    bool m_operations_isValid;

    bool m_overdue;
    bool m_overdue_isSet;
    bool m_overdue_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    qint64 m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    QDate m_release_date;
    bool m_release_date_isSet;
    bool m_release_date_isValid;

    bool m_released;
    bool m_released_isSet;
    bool m_released_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    QDate m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QString m_user_release_date;
    bool m_user_release_date_isSet;
    bool m_user_release_date_isValid;

    QString m_user_start_date;
    bool m_user_start_date_isSet;
    bool m_user_start_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVersion)

#endif // OAIVersion_H
