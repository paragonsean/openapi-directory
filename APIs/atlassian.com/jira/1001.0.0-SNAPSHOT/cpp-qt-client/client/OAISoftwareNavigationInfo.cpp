/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareNavigationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareNavigationInfo::OAISoftwareNavigationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareNavigationInfo::OAISoftwareNavigationInfo() {
    this->initializeModel();
}

OAISoftwareNavigationInfo::~OAISoftwareNavigationInfo() {}

void OAISoftwareNavigationInfo::initializeModel() {

    m_board_id_isSet = false;
    m_board_id_isValid = false;

    m_board_name_isSet = false;
    m_board_name_isValid = false;

    m_simple_board_isSet = false;
    m_simple_board_isValid = false;

    m_total_boards_in_project_isSet = false;
    m_total_boards_in_project_isValid = false;
}

void OAISoftwareNavigationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareNavigationInfo::fromJsonObject(QJsonObject json) {

    m_board_id_isValid = ::OpenAPI::fromJsonValue(m_board_id, json[QString("boardId")]);
    m_board_id_isSet = !json[QString("boardId")].isNull() && m_board_id_isValid;

    m_board_name_isValid = ::OpenAPI::fromJsonValue(m_board_name, json[QString("boardName")]);
    m_board_name_isSet = !json[QString("boardName")].isNull() && m_board_name_isValid;

    m_simple_board_isValid = ::OpenAPI::fromJsonValue(m_simple_board, json[QString("simpleBoard")]);
    m_simple_board_isSet = !json[QString("simpleBoard")].isNull() && m_simple_board_isValid;

    m_total_boards_in_project_isValid = ::OpenAPI::fromJsonValue(m_total_boards_in_project, json[QString("totalBoardsInProject")]);
    m_total_boards_in_project_isSet = !json[QString("totalBoardsInProject")].isNull() && m_total_boards_in_project_isValid;
}

QString OAISoftwareNavigationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareNavigationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_board_id_isSet) {
        obj.insert(QString("boardId"), ::OpenAPI::toJsonValue(m_board_id));
    }
    if (m_board_name_isSet) {
        obj.insert(QString("boardName"), ::OpenAPI::toJsonValue(m_board_name));
    }
    if (m_simple_board_isSet) {
        obj.insert(QString("simpleBoard"), ::OpenAPI::toJsonValue(m_simple_board));
    }
    if (m_total_boards_in_project_isSet) {
        obj.insert(QString("totalBoardsInProject"), ::OpenAPI::toJsonValue(m_total_boards_in_project));
    }
    return obj;
}

qint64 OAISoftwareNavigationInfo::getBoardId() const {
    return m_board_id;
}
void OAISoftwareNavigationInfo::setBoardId(const qint64 &board_id) {
    m_board_id = board_id;
    m_board_id_isSet = true;
}

bool OAISoftwareNavigationInfo::is_board_id_Set() const{
    return m_board_id_isSet;
}

bool OAISoftwareNavigationInfo::is_board_id_Valid() const{
    return m_board_id_isValid;
}

QString OAISoftwareNavigationInfo::getBoardName() const {
    return m_board_name;
}
void OAISoftwareNavigationInfo::setBoardName(const QString &board_name) {
    m_board_name = board_name;
    m_board_name_isSet = true;
}

bool OAISoftwareNavigationInfo::is_board_name_Set() const{
    return m_board_name_isSet;
}

bool OAISoftwareNavigationInfo::is_board_name_Valid() const{
    return m_board_name_isValid;
}

bool OAISoftwareNavigationInfo::isSimpleBoard() const {
    return m_simple_board;
}
void OAISoftwareNavigationInfo::setSimpleBoard(const bool &simple_board) {
    m_simple_board = simple_board;
    m_simple_board_isSet = true;
}

bool OAISoftwareNavigationInfo::is_simple_board_Set() const{
    return m_simple_board_isSet;
}

bool OAISoftwareNavigationInfo::is_simple_board_Valid() const{
    return m_simple_board_isValid;
}

qint64 OAISoftwareNavigationInfo::getTotalBoardsInProject() const {
    return m_total_boards_in_project;
}
void OAISoftwareNavigationInfo::setTotalBoardsInProject(const qint64 &total_boards_in_project) {
    m_total_boards_in_project = total_boards_in_project;
    m_total_boards_in_project_isSet = true;
}

bool OAISoftwareNavigationInfo::is_total_boards_in_project_Set() const{
    return m_total_boards_in_project_isSet;
}

bool OAISoftwareNavigationInfo::is_total_boards_in_project_Valid() const{
    return m_total_boards_in_project_isValid;
}

bool OAISoftwareNavigationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_board_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_board_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_boards_in_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareNavigationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
