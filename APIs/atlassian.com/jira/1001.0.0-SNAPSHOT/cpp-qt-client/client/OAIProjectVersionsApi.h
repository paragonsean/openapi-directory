/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectVersionsApi_H
#define OAI_OAIProjectVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleteAndReplaceVersionBean.h"
#include "OAIPageBeanVersion.h"
#include "OAIVersion.h"
#include "OAIVersionIssueCounts.h"
#include "OAIVersionMoveBean.h"
#include "OAIVersionUnresolvedIssuesCount.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectVersionsApi(const int timeOut = 0);
    ~OAIProjectVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_version OAIVersion [required]
    */
    virtual void createVersion(const OAIVersion &oai_version);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_delete_and_replace_version_bean OAIDeleteAndReplaceVersionBean [required]
    */
    virtual void deleteAndReplaceVersion(const QString &id, const OAIDeleteAndReplaceVersionBean &oai_delete_and_replace_version_bean);

    /**
    * @param[in]  id QString [required]
    * @param[in]  move_fix_issues_to QString [optional]
    * @param[in]  move_affected_issues_to QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVersion(const QString &id, const ::OpenAPI::OptionalParam<QString> &move_fix_issues_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &move_affected_issues_to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getProjectVersions(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getProjectVersionsPaginated(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getVersion(const QString &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVersionRelatedIssues(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVersionUnresolvedIssues(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  move_issues_to QString [required]
    */
    virtual void mergeVersions(const QString &id, const QString &move_issues_to);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_version_move_bean OAIVersionMoveBean [required]
    */
    virtual void moveVersion(const QString &id, const OAIVersionMoveBean &oai_version_move_bean);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_version OAIVersion [required]
    */
    virtual void updateVersion(const QString &id, const OAIVersion &oai_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVersionCallback(OAIHttpRequestWorker *worker);
    void deleteAndReplaceVersionCallback(OAIHttpRequestWorker *worker);
    void deleteVersionCallback(OAIHttpRequestWorker *worker);
    void getProjectVersionsCallback(OAIHttpRequestWorker *worker);
    void getProjectVersionsPaginatedCallback(OAIHttpRequestWorker *worker);
    void getVersionCallback(OAIHttpRequestWorker *worker);
    void getVersionRelatedIssuesCallback(OAIHttpRequestWorker *worker);
    void getVersionUnresolvedIssuesCallback(OAIHttpRequestWorker *worker);
    void mergeVersionsCallback(OAIHttpRequestWorker *worker);
    void moveVersionCallback(OAIHttpRequestWorker *worker);
    void updateVersionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVersionSignal(OAIVersion summary);
    void deleteAndReplaceVersionSignal(QJsonValue summary);
    void deleteVersionSignal();
    void getProjectVersionsSignal(QList<OAIVersion> summary);
    void getProjectVersionsPaginatedSignal(OAIPageBeanVersion summary);
    void getVersionSignal(OAIVersion summary);
    void getVersionRelatedIssuesSignal(OAIVersionIssueCounts summary);
    void getVersionUnresolvedIssuesSignal(OAIVersionUnresolvedIssuesCount summary);
    void mergeVersionsSignal(QJsonValue summary);
    void moveVersionSignal(OAIVersion summary);
    void updateVersionSignal(OAIVersion summary);


    void createVersionSignalFull(OAIHttpRequestWorker *worker, OAIVersion summary);
    void deleteAndReplaceVersionSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteVersionSignalFull(OAIHttpRequestWorker *worker);
    void getProjectVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVersion> summary);
    void getProjectVersionsPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanVersion summary);
    void getVersionSignalFull(OAIHttpRequestWorker *worker, OAIVersion summary);
    void getVersionRelatedIssuesSignalFull(OAIHttpRequestWorker *worker, OAIVersionIssueCounts summary);
    void getVersionUnresolvedIssuesSignalFull(OAIHttpRequestWorker *worker, OAIVersionUnresolvedIssuesCount summary);
    void mergeVersionsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void moveVersionSignalFull(OAIHttpRequestWorker *worker, OAIVersion summary);
    void updateVersionSignalFull(OAIHttpRequestWorker *worker, OAIVersion summary);

    Q_DECL_DEPRECATED_X("Use createVersionSignalError() instead")
    void createVersionSignalE(OAIVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVersionSignalError(OAIVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAndReplaceVersionSignalError() instead")
    void deleteAndReplaceVersionSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAndReplaceVersionSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVersionSignalError() instead")
    void deleteVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsSignalError() instead")
    void getProjectVersionsSignalE(QList<OAIVersion> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsSignalError(QList<OAIVersion> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsPaginatedSignalError() instead")
    void getProjectVersionsPaginatedSignalE(OAIPageBeanVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsPaginatedSignalError(OAIPageBeanVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalError() instead")
    void getVersionSignalE(OAIVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalError(OAIVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionRelatedIssuesSignalError() instead")
    void getVersionRelatedIssuesSignalE(OAIVersionIssueCounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionRelatedIssuesSignalError(OAIVersionIssueCounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionUnresolvedIssuesSignalError() instead")
    void getVersionUnresolvedIssuesSignalE(OAIVersionUnresolvedIssuesCount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionUnresolvedIssuesSignalError(OAIVersionUnresolvedIssuesCount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeVersionsSignalError() instead")
    void mergeVersionsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeVersionsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveVersionSignalError() instead")
    void moveVersionSignalE(OAIVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveVersionSignalError(OAIVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVersionSignalError() instead")
    void updateVersionSignalE(OAIVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVersionSignalError(OAIVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVersionSignalErrorFull() instead")
    void createVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAndReplaceVersionSignalErrorFull() instead")
    void deleteAndReplaceVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAndReplaceVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVersionSignalErrorFull() instead")
    void deleteVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsSignalErrorFull() instead")
    void getProjectVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsPaginatedSignalErrorFull() instead")
    void getProjectVersionsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalErrorFull() instead")
    void getVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionRelatedIssuesSignalErrorFull() instead")
    void getVersionRelatedIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionRelatedIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionUnresolvedIssuesSignalErrorFull() instead")
    void getVersionUnresolvedIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionUnresolvedIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeVersionsSignalErrorFull() instead")
    void mergeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveVersionSignalErrorFull() instead")
    void moveVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVersionSignalErrorFull() instead")
    void updateVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
