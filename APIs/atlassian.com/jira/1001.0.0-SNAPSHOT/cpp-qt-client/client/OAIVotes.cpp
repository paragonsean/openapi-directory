/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVotes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVotes::OAIVotes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVotes::OAIVotes() {
    this->initializeModel();
}

OAIVotes::~OAIVotes() {}

void OAIVotes::initializeModel() {

    m_has_voted_isSet = false;
    m_has_voted_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_voters_isSet = false;
    m_voters_isValid = false;

    m_votes_isSet = false;
    m_votes_isValid = false;
}

void OAIVotes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVotes::fromJsonObject(QJsonObject json) {

    m_has_voted_isValid = ::OpenAPI::fromJsonValue(m_has_voted, json[QString("hasVoted")]);
    m_has_voted_isSet = !json[QString("hasVoted")].isNull() && m_has_voted_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_voters_isValid = ::OpenAPI::fromJsonValue(m_voters, json[QString("voters")]);
    m_voters_isSet = !json[QString("voters")].isNull() && m_voters_isValid;

    m_votes_isValid = ::OpenAPI::fromJsonValue(m_votes, json[QString("votes")]);
    m_votes_isSet = !json[QString("votes")].isNull() && m_votes_isValid;
}

QString OAIVotes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVotes::asJsonObject() const {
    QJsonObject obj;
    if (m_has_voted_isSet) {
        obj.insert(QString("hasVoted"), ::OpenAPI::toJsonValue(m_has_voted));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_voters.size() > 0) {
        obj.insert(QString("voters"), ::OpenAPI::toJsonValue(m_voters));
    }
    if (m_votes_isSet) {
        obj.insert(QString("votes"), ::OpenAPI::toJsonValue(m_votes));
    }
    return obj;
}

bool OAIVotes::isHasVoted() const {
    return m_has_voted;
}
void OAIVotes::setHasVoted(const bool &has_voted) {
    m_has_voted = has_voted;
    m_has_voted_isSet = true;
}

bool OAIVotes::is_has_voted_Set() const{
    return m_has_voted_isSet;
}

bool OAIVotes::is_has_voted_Valid() const{
    return m_has_voted_isValid;
}

QString OAIVotes::getSelf() const {
    return m_self;
}
void OAIVotes::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIVotes::is_self_Set() const{
    return m_self_isSet;
}

bool OAIVotes::is_self_Valid() const{
    return m_self_isValid;
}

QList<OAIUser> OAIVotes::getVoters() const {
    return m_voters;
}
void OAIVotes::setVoters(const QList<OAIUser> &voters) {
    m_voters = voters;
    m_voters_isSet = true;
}

bool OAIVotes::is_voters_Set() const{
    return m_voters_isSet;
}

bool OAIVotes::is_voters_Valid() const{
    return m_voters_isValid;
}

qint64 OAIVotes::getVotes() const {
    return m_votes;
}
void OAIVotes::setVotes(const qint64 &votes) {
    m_votes = votes;
    m_votes_isSet = true;
}

bool OAIVotes::is_votes_Set() const{
    return m_votes_isSet;
}

bool OAIVotes::is_votes_Valid() const{
    return m_votes_isValid;
}

bool OAIVotes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_voted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVotes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
