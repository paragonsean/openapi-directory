/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowScheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowScheme::OAIWorkflowScheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowScheme::OAIWorkflowScheme() {
    this->initializeModel();
}

OAIWorkflowScheme::~OAIWorkflowScheme() {}

void OAIWorkflowScheme::initializeModel() {

    m_default_workflow_isSet = false;
    m_default_workflow_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_type_mappings_isSet = false;
    m_issue_type_mappings_isValid = false;

    m_issue_types_isSet = false;
    m_issue_types_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_last_modified_user_isSet = false;
    m_last_modified_user_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_default_workflow_isSet = false;
    m_original_default_workflow_isValid = false;

    m_original_issue_type_mappings_isSet = false;
    m_original_issue_type_mappings_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_update_draft_if_needed_isSet = false;
    m_update_draft_if_needed_isValid = false;
}

void OAIWorkflowScheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowScheme::fromJsonObject(QJsonObject json) {

    m_default_workflow_isValid = ::OpenAPI::fromJsonValue(m_default_workflow, json[QString("defaultWorkflow")]);
    m_default_workflow_isSet = !json[QString("defaultWorkflow")].isNull() && m_default_workflow_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_type_mappings_isValid = ::OpenAPI::fromJsonValue(m_issue_type_mappings, json[QString("issueTypeMappings")]);
    m_issue_type_mappings_isSet = !json[QString("issueTypeMappings")].isNull() && m_issue_type_mappings_isValid;

    m_issue_types_isValid = ::OpenAPI::fromJsonValue(m_issue_types, json[QString("issueTypes")]);
    m_issue_types_isSet = !json[QString("issueTypes")].isNull() && m_issue_types_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_last_modified_user_isValid = ::OpenAPI::fromJsonValue(m_last_modified_user, json[QString("lastModifiedUser")]);
    m_last_modified_user_isSet = !json[QString("lastModifiedUser")].isNull() && m_last_modified_user_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_default_workflow_isValid = ::OpenAPI::fromJsonValue(m_original_default_workflow, json[QString("originalDefaultWorkflow")]);
    m_original_default_workflow_isSet = !json[QString("originalDefaultWorkflow")].isNull() && m_original_default_workflow_isValid;

    m_original_issue_type_mappings_isValid = ::OpenAPI::fromJsonValue(m_original_issue_type_mappings, json[QString("originalIssueTypeMappings")]);
    m_original_issue_type_mappings_isSet = !json[QString("originalIssueTypeMappings")].isNull() && m_original_issue_type_mappings_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_update_draft_if_needed_isValid = ::OpenAPI::fromJsonValue(m_update_draft_if_needed, json[QString("updateDraftIfNeeded")]);
    m_update_draft_if_needed_isSet = !json[QString("updateDraftIfNeeded")].isNull() && m_update_draft_if_needed_isValid;
}

QString OAIWorkflowScheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowScheme::asJsonObject() const {
    QJsonObject obj;
    if (m_default_workflow_isSet) {
        obj.insert(QString("defaultWorkflow"), ::OpenAPI::toJsonValue(m_default_workflow));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_type_mappings.size() > 0) {
        obj.insert(QString("issueTypeMappings"), ::OpenAPI::toJsonValue(m_issue_type_mappings));
    }
    if (m_issue_types.size() > 0) {
        obj.insert(QString("issueTypes"), ::OpenAPI::toJsonValue(m_issue_types));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_last_modified_user.isSet()) {
        obj.insert(QString("lastModifiedUser"), ::OpenAPI::toJsonValue(m_last_modified_user));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_default_workflow_isSet) {
        obj.insert(QString("originalDefaultWorkflow"), ::OpenAPI::toJsonValue(m_original_default_workflow));
    }
    if (m_original_issue_type_mappings.size() > 0) {
        obj.insert(QString("originalIssueTypeMappings"), ::OpenAPI::toJsonValue(m_original_issue_type_mappings));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_update_draft_if_needed_isSet) {
        obj.insert(QString("updateDraftIfNeeded"), ::OpenAPI::toJsonValue(m_update_draft_if_needed));
    }
    return obj;
}

QString OAIWorkflowScheme::getDefaultWorkflow() const {
    return m_default_workflow;
}
void OAIWorkflowScheme::setDefaultWorkflow(const QString &default_workflow) {
    m_default_workflow = default_workflow;
    m_default_workflow_isSet = true;
}

bool OAIWorkflowScheme::is_default_workflow_Set() const{
    return m_default_workflow_isSet;
}

bool OAIWorkflowScheme::is_default_workflow_Valid() const{
    return m_default_workflow_isValid;
}

QString OAIWorkflowScheme::getDescription() const {
    return m_description;
}
void OAIWorkflowScheme::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkflowScheme::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkflowScheme::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWorkflowScheme::isDraft() const {
    return m_draft;
}
void OAIWorkflowScheme::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIWorkflowScheme::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIWorkflowScheme::is_draft_Valid() const{
    return m_draft_isValid;
}

qint64 OAIWorkflowScheme::getId() const {
    return m_id;
}
void OAIWorkflowScheme::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkflowScheme::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkflowScheme::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIWorkflowScheme::getIssueTypeMappings() const {
    return m_issue_type_mappings;
}
void OAIWorkflowScheme::setIssueTypeMappings(const QMap<QString, QString> &issue_type_mappings) {
    m_issue_type_mappings = issue_type_mappings;
    m_issue_type_mappings_isSet = true;
}

bool OAIWorkflowScheme::is_issue_type_mappings_Set() const{
    return m_issue_type_mappings_isSet;
}

bool OAIWorkflowScheme::is_issue_type_mappings_Valid() const{
    return m_issue_type_mappings_isValid;
}

QMap<QString, OAIIssueTypeDetails> OAIWorkflowScheme::getIssueTypes() const {
    return m_issue_types;
}
void OAIWorkflowScheme::setIssueTypes(const QMap<QString, OAIIssueTypeDetails> &issue_types) {
    m_issue_types = issue_types;
    m_issue_types_isSet = true;
}

bool OAIWorkflowScheme::is_issue_types_Set() const{
    return m_issue_types_isSet;
}

bool OAIWorkflowScheme::is_issue_types_Valid() const{
    return m_issue_types_isValid;
}

QString OAIWorkflowScheme::getLastModified() const {
    return m_last_modified;
}
void OAIWorkflowScheme::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIWorkflowScheme::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIWorkflowScheme::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAIUser OAIWorkflowScheme::getLastModifiedUser() const {
    return m_last_modified_user;
}
void OAIWorkflowScheme::setLastModifiedUser(const OAIUser &last_modified_user) {
    m_last_modified_user = last_modified_user;
    m_last_modified_user_isSet = true;
}

bool OAIWorkflowScheme::is_last_modified_user_Set() const{
    return m_last_modified_user_isSet;
}

bool OAIWorkflowScheme::is_last_modified_user_Valid() const{
    return m_last_modified_user_isValid;
}

QString OAIWorkflowScheme::getName() const {
    return m_name;
}
void OAIWorkflowScheme::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowScheme::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowScheme::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflowScheme::getOriginalDefaultWorkflow() const {
    return m_original_default_workflow;
}
void OAIWorkflowScheme::setOriginalDefaultWorkflow(const QString &original_default_workflow) {
    m_original_default_workflow = original_default_workflow;
    m_original_default_workflow_isSet = true;
}

bool OAIWorkflowScheme::is_original_default_workflow_Set() const{
    return m_original_default_workflow_isSet;
}

bool OAIWorkflowScheme::is_original_default_workflow_Valid() const{
    return m_original_default_workflow_isValid;
}

QMap<QString, QString> OAIWorkflowScheme::getOriginalIssueTypeMappings() const {
    return m_original_issue_type_mappings;
}
void OAIWorkflowScheme::setOriginalIssueTypeMappings(const QMap<QString, QString> &original_issue_type_mappings) {
    m_original_issue_type_mappings = original_issue_type_mappings;
    m_original_issue_type_mappings_isSet = true;
}

bool OAIWorkflowScheme::is_original_issue_type_mappings_Set() const{
    return m_original_issue_type_mappings_isSet;
}

bool OAIWorkflowScheme::is_original_issue_type_mappings_Valid() const{
    return m_original_issue_type_mappings_isValid;
}

QString OAIWorkflowScheme::getSelf() const {
    return m_self;
}
void OAIWorkflowScheme::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIWorkflowScheme::is_self_Set() const{
    return m_self_isSet;
}

bool OAIWorkflowScheme::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIWorkflowScheme::isUpdateDraftIfNeeded() const {
    return m_update_draft_if_needed;
}
void OAIWorkflowScheme::setUpdateDraftIfNeeded(const bool &update_draft_if_needed) {
    m_update_draft_if_needed = update_draft_if_needed;
    m_update_draft_if_needed_isSet = true;
}

bool OAIWorkflowScheme::is_update_draft_if_needed_Set() const{
    return m_update_draft_if_needed_isSet;
}

bool OAIWorkflowScheme::is_update_draft_if_needed_Valid() const{
    return m_update_draft_if_needed_isValid;
}

bool OAIWorkflowScheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_workflow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_default_workflow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_issue_type_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_draft_if_needed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowScheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
