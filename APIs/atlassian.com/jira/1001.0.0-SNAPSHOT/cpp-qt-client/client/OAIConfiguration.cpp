/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguration::OAIConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguration::OAIConfiguration() {
    this->initializeModel();
}

OAIConfiguration::~OAIConfiguration() {}

void OAIConfiguration::initializeModel() {

    m_attachments_enabled_isSet = false;
    m_attachments_enabled_isValid = false;

    m_issue_linking_enabled_isSet = false;
    m_issue_linking_enabled_isValid = false;

    m_sub_tasks_enabled_isSet = false;
    m_sub_tasks_enabled_isValid = false;

    m_time_tracking_configuration_isSet = false;
    m_time_tracking_configuration_isValid = false;

    m_time_tracking_enabled_isSet = false;
    m_time_tracking_enabled_isValid = false;

    m_unassigned_issues_allowed_isSet = false;
    m_unassigned_issues_allowed_isValid = false;

    m_voting_enabled_isSet = false;
    m_voting_enabled_isValid = false;

    m_watching_enabled_isSet = false;
    m_watching_enabled_isValid = false;
}

void OAIConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguration::fromJsonObject(QJsonObject json) {

    m_attachments_enabled_isValid = ::OpenAPI::fromJsonValue(m_attachments_enabled, json[QString("attachmentsEnabled")]);
    m_attachments_enabled_isSet = !json[QString("attachmentsEnabled")].isNull() && m_attachments_enabled_isValid;

    m_issue_linking_enabled_isValid = ::OpenAPI::fromJsonValue(m_issue_linking_enabled, json[QString("issueLinkingEnabled")]);
    m_issue_linking_enabled_isSet = !json[QString("issueLinkingEnabled")].isNull() && m_issue_linking_enabled_isValid;

    m_sub_tasks_enabled_isValid = ::OpenAPI::fromJsonValue(m_sub_tasks_enabled, json[QString("subTasksEnabled")]);
    m_sub_tasks_enabled_isSet = !json[QString("subTasksEnabled")].isNull() && m_sub_tasks_enabled_isValid;

    m_time_tracking_configuration_isValid = ::OpenAPI::fromJsonValue(m_time_tracking_configuration, json[QString("timeTrackingConfiguration")]);
    m_time_tracking_configuration_isSet = !json[QString("timeTrackingConfiguration")].isNull() && m_time_tracking_configuration_isValid;

    m_time_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_time_tracking_enabled, json[QString("timeTrackingEnabled")]);
    m_time_tracking_enabled_isSet = !json[QString("timeTrackingEnabled")].isNull() && m_time_tracking_enabled_isValid;

    m_unassigned_issues_allowed_isValid = ::OpenAPI::fromJsonValue(m_unassigned_issues_allowed, json[QString("unassignedIssuesAllowed")]);
    m_unassigned_issues_allowed_isSet = !json[QString("unassignedIssuesAllowed")].isNull() && m_unassigned_issues_allowed_isValid;

    m_voting_enabled_isValid = ::OpenAPI::fromJsonValue(m_voting_enabled, json[QString("votingEnabled")]);
    m_voting_enabled_isSet = !json[QString("votingEnabled")].isNull() && m_voting_enabled_isValid;

    m_watching_enabled_isValid = ::OpenAPI::fromJsonValue(m_watching_enabled, json[QString("watchingEnabled")]);
    m_watching_enabled_isSet = !json[QString("watchingEnabled")].isNull() && m_watching_enabled_isValid;
}

QString OAIConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments_enabled_isSet) {
        obj.insert(QString("attachmentsEnabled"), ::OpenAPI::toJsonValue(m_attachments_enabled));
    }
    if (m_issue_linking_enabled_isSet) {
        obj.insert(QString("issueLinkingEnabled"), ::OpenAPI::toJsonValue(m_issue_linking_enabled));
    }
    if (m_sub_tasks_enabled_isSet) {
        obj.insert(QString("subTasksEnabled"), ::OpenAPI::toJsonValue(m_sub_tasks_enabled));
    }
    if (m_time_tracking_configuration.isSet()) {
        obj.insert(QString("timeTrackingConfiguration"), ::OpenAPI::toJsonValue(m_time_tracking_configuration));
    }
    if (m_time_tracking_enabled_isSet) {
        obj.insert(QString("timeTrackingEnabled"), ::OpenAPI::toJsonValue(m_time_tracking_enabled));
    }
    if (m_unassigned_issues_allowed_isSet) {
        obj.insert(QString("unassignedIssuesAllowed"), ::OpenAPI::toJsonValue(m_unassigned_issues_allowed));
    }
    if (m_voting_enabled_isSet) {
        obj.insert(QString("votingEnabled"), ::OpenAPI::toJsonValue(m_voting_enabled));
    }
    if (m_watching_enabled_isSet) {
        obj.insert(QString("watchingEnabled"), ::OpenAPI::toJsonValue(m_watching_enabled));
    }
    return obj;
}

bool OAIConfiguration::isAttachmentsEnabled() const {
    return m_attachments_enabled;
}
void OAIConfiguration::setAttachmentsEnabled(const bool &attachments_enabled) {
    m_attachments_enabled = attachments_enabled;
    m_attachments_enabled_isSet = true;
}

bool OAIConfiguration::is_attachments_enabled_Set() const{
    return m_attachments_enabled_isSet;
}

bool OAIConfiguration::is_attachments_enabled_Valid() const{
    return m_attachments_enabled_isValid;
}

bool OAIConfiguration::isIssueLinkingEnabled() const {
    return m_issue_linking_enabled;
}
void OAIConfiguration::setIssueLinkingEnabled(const bool &issue_linking_enabled) {
    m_issue_linking_enabled = issue_linking_enabled;
    m_issue_linking_enabled_isSet = true;
}

bool OAIConfiguration::is_issue_linking_enabled_Set() const{
    return m_issue_linking_enabled_isSet;
}

bool OAIConfiguration::is_issue_linking_enabled_Valid() const{
    return m_issue_linking_enabled_isValid;
}

bool OAIConfiguration::isSubTasksEnabled() const {
    return m_sub_tasks_enabled;
}
void OAIConfiguration::setSubTasksEnabled(const bool &sub_tasks_enabled) {
    m_sub_tasks_enabled = sub_tasks_enabled;
    m_sub_tasks_enabled_isSet = true;
}

bool OAIConfiguration::is_sub_tasks_enabled_Set() const{
    return m_sub_tasks_enabled_isSet;
}

bool OAIConfiguration::is_sub_tasks_enabled_Valid() const{
    return m_sub_tasks_enabled_isValid;
}

OAITimeTrackingConfiguration OAIConfiguration::getTimeTrackingConfiguration() const {
    return m_time_tracking_configuration;
}
void OAIConfiguration::setTimeTrackingConfiguration(const OAITimeTrackingConfiguration &time_tracking_configuration) {
    m_time_tracking_configuration = time_tracking_configuration;
    m_time_tracking_configuration_isSet = true;
}

bool OAIConfiguration::is_time_tracking_configuration_Set() const{
    return m_time_tracking_configuration_isSet;
}

bool OAIConfiguration::is_time_tracking_configuration_Valid() const{
    return m_time_tracking_configuration_isValid;
}

bool OAIConfiguration::isTimeTrackingEnabled() const {
    return m_time_tracking_enabled;
}
void OAIConfiguration::setTimeTrackingEnabled(const bool &time_tracking_enabled) {
    m_time_tracking_enabled = time_tracking_enabled;
    m_time_tracking_enabled_isSet = true;
}

bool OAIConfiguration::is_time_tracking_enabled_Set() const{
    return m_time_tracking_enabled_isSet;
}

bool OAIConfiguration::is_time_tracking_enabled_Valid() const{
    return m_time_tracking_enabled_isValid;
}

bool OAIConfiguration::isUnassignedIssuesAllowed() const {
    return m_unassigned_issues_allowed;
}
void OAIConfiguration::setUnassignedIssuesAllowed(const bool &unassigned_issues_allowed) {
    m_unassigned_issues_allowed = unassigned_issues_allowed;
    m_unassigned_issues_allowed_isSet = true;
}

bool OAIConfiguration::is_unassigned_issues_allowed_Set() const{
    return m_unassigned_issues_allowed_isSet;
}

bool OAIConfiguration::is_unassigned_issues_allowed_Valid() const{
    return m_unassigned_issues_allowed_isValid;
}

bool OAIConfiguration::isVotingEnabled() const {
    return m_voting_enabled;
}
void OAIConfiguration::setVotingEnabled(const bool &voting_enabled) {
    m_voting_enabled = voting_enabled;
    m_voting_enabled_isSet = true;
}

bool OAIConfiguration::is_voting_enabled_Set() const{
    return m_voting_enabled_isSet;
}

bool OAIConfiguration::is_voting_enabled_Valid() const{
    return m_voting_enabled_isValid;
}

bool OAIConfiguration::isWatchingEnabled() const {
    return m_watching_enabled;
}
void OAIConfiguration::setWatchingEnabled(const bool &watching_enabled) {
    m_watching_enabled = watching_enabled;
    m_watching_enabled_isSet = true;
}

bool OAIConfiguration::is_watching_enabled_Set() const{
    return m_watching_enabled_isSet;
}

bool OAIConfiguration::is_watching_enabled_Valid() const{
    return m_watching_enabled_isValid;
}

bool OAIConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_linking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_tasks_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_tracking_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unassigned_issues_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
