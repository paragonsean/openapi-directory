/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRequestBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRequestBean::OAISearchRequestBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRequestBean::OAISearchRequestBean() {
    this->initializeModel();
}

OAISearchRequestBean::~OAISearchRequestBean() {}

void OAISearchRequestBean::initializeModel() {

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_fields_by_keys_isSet = false;
    m_fields_by_keys_isValid = false;

    m_jql_isSet = false;
    m_jql_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_validate_query_isSet = false;
    m_validate_query_isValid = false;
}

void OAISearchRequestBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRequestBean::fromJsonObject(QJsonObject json) {

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_fields_by_keys_isValid = ::OpenAPI::fromJsonValue(m_fields_by_keys, json[QString("fieldsByKeys")]);
    m_fields_by_keys_isSet = !json[QString("fieldsByKeys")].isNull() && m_fields_by_keys_isValid;

    m_jql_isValid = ::OpenAPI::fromJsonValue(m_jql, json[QString("jql")]);
    m_jql_isSet = !json[QString("jql")].isNull() && m_jql_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_validate_query_isValid = ::OpenAPI::fromJsonValue(m_validate_query, json[QString("validateQuery")]);
    m_validate_query_isSet = !json[QString("validateQuery")].isNull() && m_validate_query_isValid;
}

QString OAISearchRequestBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRequestBean::asJsonObject() const {
    QJsonObject obj;
    if (m_expand.size() > 0) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_fields_by_keys_isSet) {
        obj.insert(QString("fieldsByKeys"), ::OpenAPI::toJsonValue(m_fields_by_keys));
    }
    if (m_jql_isSet) {
        obj.insert(QString("jql"), ::OpenAPI::toJsonValue(m_jql));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_validate_query_isSet) {
        obj.insert(QString("validateQuery"), ::OpenAPI::toJsonValue(m_validate_query));
    }
    return obj;
}

QList<QString> OAISearchRequestBean::getExpand() const {
    return m_expand;
}
void OAISearchRequestBean::setExpand(const QList<QString> &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAISearchRequestBean::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAISearchRequestBean::is_expand_Valid() const{
    return m_expand_isValid;
}

QList<QString> OAISearchRequestBean::getFields() const {
    return m_fields;
}
void OAISearchRequestBean::setFields(const QList<QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAISearchRequestBean::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAISearchRequestBean::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAISearchRequestBean::isFieldsByKeys() const {
    return m_fields_by_keys;
}
void OAISearchRequestBean::setFieldsByKeys(const bool &fields_by_keys) {
    m_fields_by_keys = fields_by_keys;
    m_fields_by_keys_isSet = true;
}

bool OAISearchRequestBean::is_fields_by_keys_Set() const{
    return m_fields_by_keys_isSet;
}

bool OAISearchRequestBean::is_fields_by_keys_Valid() const{
    return m_fields_by_keys_isValid;
}

QString OAISearchRequestBean::getJql() const {
    return m_jql;
}
void OAISearchRequestBean::setJql(const QString &jql) {
    m_jql = jql;
    m_jql_isSet = true;
}

bool OAISearchRequestBean::is_jql_Set() const{
    return m_jql_isSet;
}

bool OAISearchRequestBean::is_jql_Valid() const{
    return m_jql_isValid;
}

qint32 OAISearchRequestBean::getMaxResults() const {
    return m_max_results;
}
void OAISearchRequestBean::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchRequestBean::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchRequestBean::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList<QString> OAISearchRequestBean::getProperties() const {
    return m_properties;
}
void OAISearchRequestBean::setProperties(const QList<QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISearchRequestBean::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISearchRequestBean::is_properties_Valid() const{
    return m_properties_isValid;
}

qint32 OAISearchRequestBean::getStartAt() const {
    return m_start_at;
}
void OAISearchRequestBean::setStartAt(const qint32 &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAISearchRequestBean::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAISearchRequestBean::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QString OAISearchRequestBean::getValidateQuery() const {
    return m_validate_query;
}
void OAISearchRequestBean::setValidateQuery(const QString &validate_query) {
    m_validate_query = validate_query;
    m_validate_query_isSet = true;
}

bool OAISearchRequestBean::is_validate_query_Set() const{
    return m_validate_query_isSet;
}

bool OAISearchRequestBean::is_validate_query_Valid() const{
    return m_validate_query_isValid;
}

bool OAISearchRequestBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_by_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRequestBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
