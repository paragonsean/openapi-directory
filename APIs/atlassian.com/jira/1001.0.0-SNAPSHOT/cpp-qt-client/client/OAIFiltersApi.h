/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFiltersApi_H
#define OAI_OAIFiltersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangeFilterOwner.h"
#include "OAIColumnItem.h"
#include "OAIErrorCollection.h"
#include "OAIFilter.h"
#include "OAIPageBeanFilterDetails.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFiltersApi : public QObject {
    Q_OBJECT

public:
    OAIFiltersApi(const int timeOut = 0);
    ~OAIFiltersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_change_filter_owner OAIChangeFilterOwner [required]
    */
    virtual void changeFilterOwner(const qint64 &id, const OAIChangeFilterOwner &oai_change_filter_owner);

    /**
    * @param[in]  oai_filter OAIFilter [required]
    * @param[in]  expand QString [optional]
    * @param[in]  override_share_permissions bool [optional]
    */
    virtual void createFilter(const OAIFilter &oai_filter, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_share_permissions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void deleteFavouriteForFilter(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteFilter(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getColumns(const qint64 &id);

    /**
    * @param[in]  expand QString [optional]
    */
    virtual void getFavouriteFilters(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    * @param[in]  override_share_permissions bool [optional]
    */
    virtual void getFilter(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_share_permissions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  filter_name QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  project_id qint64 [optional]
    * @param[in]  id QSet<qint64> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  override_share_permissions bool [optional]
    */
    virtual void getFiltersPaginated(const ::OpenAPI::OptionalParam<QString> &filter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &project_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_share_permissions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  include_favourites bool [optional]
    */
    virtual void getMyFilters(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_favourites = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void resetColumns(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void setColumns(const qint64 &id, const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void setFavouriteForFilter(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_filter OAIFilter [required]
    * @param[in]  expand QString [optional]
    * @param[in]  override_share_permissions bool [optional]
    */
    virtual void updateFilter(const qint64 &id, const OAIFilter &oai_filter, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_share_permissions = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeFilterOwnerCallback(OAIHttpRequestWorker *worker);
    void createFilterCallback(OAIHttpRequestWorker *worker);
    void deleteFavouriteForFilterCallback(OAIHttpRequestWorker *worker);
    void deleteFilterCallback(OAIHttpRequestWorker *worker);
    void getColumnsCallback(OAIHttpRequestWorker *worker);
    void getFavouriteFiltersCallback(OAIHttpRequestWorker *worker);
    void getFilterCallback(OAIHttpRequestWorker *worker);
    void getFiltersPaginatedCallback(OAIHttpRequestWorker *worker);
    void getMyFiltersCallback(OAIHttpRequestWorker *worker);
    void resetColumnsCallback(OAIHttpRequestWorker *worker);
    void setColumnsCallback(OAIHttpRequestWorker *worker);
    void setFavouriteForFilterCallback(OAIHttpRequestWorker *worker);
    void updateFilterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeFilterOwnerSignal(QJsonValue summary);
    void createFilterSignal(OAIFilter summary);
    void deleteFavouriteForFilterSignal(OAIFilter summary);
    void deleteFilterSignal();
    void getColumnsSignal(QList<OAIColumnItem> summary);
    void getFavouriteFiltersSignal(QList<OAIFilter> summary);
    void getFilterSignal(OAIFilter summary);
    void getFiltersPaginatedSignal(OAIPageBeanFilterDetails summary);
    void getMyFiltersSignal(QList<OAIFilter> summary);
    void resetColumnsSignal();
    void setColumnsSignal(QJsonValue summary);
    void setFavouriteForFilterSignal(OAIFilter summary);
    void updateFilterSignal(OAIFilter summary);


    void changeFilterOwnerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void deleteFavouriteForFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void deleteFilterSignalFull(OAIHttpRequestWorker *worker);
    void getColumnsSignalFull(OAIHttpRequestWorker *worker, QList<OAIColumnItem> summary);
    void getFavouriteFiltersSignalFull(OAIHttpRequestWorker *worker, QList<OAIFilter> summary);
    void getFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void getFiltersPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanFilterDetails summary);
    void getMyFiltersSignalFull(OAIHttpRequestWorker *worker, QList<OAIFilter> summary);
    void resetColumnsSignalFull(OAIHttpRequestWorker *worker);
    void setColumnsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void setFavouriteForFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void updateFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);

    Q_DECL_DEPRECATED_X("Use changeFilterOwnerSignalError() instead")
    void changeFilterOwnerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeFilterOwnerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFilterSignalError() instead")
    void createFilterSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFilterSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFavouriteForFilterSignalError() instead")
    void deleteFavouriteForFilterSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFavouriteForFilterSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFilterSignalError() instead")
    void deleteFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getColumnsSignalError() instead")
    void getColumnsSignalE(QList<OAIColumnItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getColumnsSignalError(QList<OAIColumnItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavouriteFiltersSignalError() instead")
    void getFavouriteFiltersSignalE(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavouriteFiltersSignalError(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterSignalError() instead")
    void getFilterSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFiltersPaginatedSignalError() instead")
    void getFiltersPaginatedSignalE(OAIPageBeanFilterDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFiltersPaginatedSignalError(OAIPageBeanFilterDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyFiltersSignalError() instead")
    void getMyFiltersSignalE(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyFiltersSignalError(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetColumnsSignalError() instead")
    void resetColumnsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetColumnsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setColumnsSignalError() instead")
    void setColumnsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setColumnsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFavouriteForFilterSignalError() instead")
    void setFavouriteForFilterSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setFavouriteForFilterSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterSignalError() instead")
    void updateFilterSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeFilterOwnerSignalErrorFull() instead")
    void changeFilterOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeFilterOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFilterSignalErrorFull() instead")
    void createFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFavouriteForFilterSignalErrorFull() instead")
    void deleteFavouriteForFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFavouriteForFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFilterSignalErrorFull() instead")
    void deleteFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getColumnsSignalErrorFull() instead")
    void getColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavouriteFiltersSignalErrorFull() instead")
    void getFavouriteFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavouriteFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterSignalErrorFull() instead")
    void getFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFiltersPaginatedSignalErrorFull() instead")
    void getFiltersPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFiltersPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyFiltersSignalErrorFull() instead")
    void getMyFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetColumnsSignalErrorFull() instead")
    void resetColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setColumnsSignalErrorFull() instead")
    void setColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFavouriteForFilterSignalErrorFull() instead")
    void setFavouriteForFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setFavouriteForFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterSignalErrorFull() instead")
    void updateFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
