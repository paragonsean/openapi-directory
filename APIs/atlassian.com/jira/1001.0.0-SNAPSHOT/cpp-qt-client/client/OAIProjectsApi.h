/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateProjectDetails.h"
#include "OAIIssueTypeWithStatus.h"
#include "OAINotificationScheme.h"
#include "OAIObject.h"
#include "OAIPageBeanProject.h"
#include "OAIProject.h"
#include "OAIProjectIdentifiers.h"
#include "OAIProjectIssueTypeHierarchy.h"
#include "OAITaskProgressBeanObject.h"
#include "OAIUpdateProjectDetails.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void archiveProject(const QString &project_id_or_key);

    /**
    * @param[in]  oai_create_project_details OAICreateProjectDetails [required]
    */
    virtual void createProject(const OAICreateProjectDetails &oai_create_project_details);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  enable_undo bool [optional]
    */
    virtual void deleteProject(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<bool> &enable_undo = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void deleteProjectAsynchronously(const QString &project_id_or_key);

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  recent qint32 [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void getAllProjects(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &recent = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void getAllStatuses(const QString &project_id_or_key);

    /**
    * @param[in]  project_id qint64 [required]
    */
    Q_DECL_DEPRECATED virtual void getHierarchy(const qint64 &project_id);

    /**
    * @param[in]  project_key_or_id QString [required]
    * @param[in]  expand QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getNotificationSchemeForProject(const QString &project_key_or_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void getProject(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  properties QList<OAIObject> [optional]
    */
    virtual void getRecent(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &properties = ::OpenAPI::OptionalParam<QList<OAIObject>>());

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void restore(const QString &project_id_or_key);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  id QSet<qint64> [optional]
    * @param[in]  keys QSet<QString> [optional]
    * @param[in]  query QString [optional]
    * @param[in]  type_key QString [optional]
    * @param[in]  category_id qint64 [optional]
    * @param[in]  action QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  status QList<QString> [optional]
    * @param[in]  properties QList<OAIObject> [optional]
    * @param[in]  property_query QString [optional]
    */
    virtual void searchProjects(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &keys = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &category_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &properties = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<QString> &property_query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  oai_update_project_details OAIUpdateProjectDetails [required]
    * @param[in]  expand QString [optional]
    */
    virtual void updateProject(const QString &project_id_or_key, const OAIUpdateProjectDetails &oai_update_project_details, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  new_project_type_key QString [required]
    */
    Q_DECL_DEPRECATED virtual void updateProjectType(const QString &project_id_or_key, const QString &new_project_type_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void archiveProjectCallback(OAIHttpRequestWorker *worker);
    void createProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectAsynchronouslyCallback(OAIHttpRequestWorker *worker);
    void getAllProjectsCallback(OAIHttpRequestWorker *worker);
    void getAllStatusesCallback(OAIHttpRequestWorker *worker);
    void getHierarchyCallback(OAIHttpRequestWorker *worker);
    void getNotificationSchemeForProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getRecentCallback(OAIHttpRequestWorker *worker);
    void restoreCallback(OAIHttpRequestWorker *worker);
    void searchProjectsCallback(OAIHttpRequestWorker *worker);
    void updateProjectCallback(OAIHttpRequestWorker *worker);
    void updateProjectTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void archiveProjectSignal(QJsonValue summary);
    void createProjectSignal(OAIProjectIdentifiers summary);
    void deleteProjectSignal();
    void deleteProjectAsynchronouslySignal();
    void getAllProjectsSignal(QList<OAIProject> summary);
    void getAllStatusesSignal(QList<OAIIssueTypeWithStatus> summary);
    void getHierarchySignal(OAIProjectIssueTypeHierarchy summary);
    void getNotificationSchemeForProjectSignal(OAINotificationScheme summary);
    void getProjectSignal(OAIProject summary);
    void getRecentSignal(QList<OAIProject> summary);
    void restoreSignal(OAIProject summary);
    void searchProjectsSignal(OAIPageBeanProject summary);
    void updateProjectSignal(OAIProject summary);
    void updateProjectTypeSignal(OAIProject summary);


    void archiveProjectSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectIdentifiers summary);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectAsynchronouslySignalFull(OAIHttpRequestWorker *worker);
    void getAllProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void getAllStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssueTypeWithStatus> summary);
    void getHierarchySignalFull(OAIHttpRequestWorker *worker, OAIProjectIssueTypeHierarchy summary);
    void getNotificationSchemeForProjectSignalFull(OAIHttpRequestWorker *worker, OAINotificationScheme summary);
    void getProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getRecentSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void restoreSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void searchProjectsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanProject summary);
    void updateProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void updateProjectTypeSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);

    Q_DECL_DEPRECATED_X("Use archiveProjectSignalError() instead")
    void archiveProjectSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveProjectSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(OAIProjectIdentifiers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(OAIProjectIdentifiers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectAsynchronouslySignalError() instead")
    void deleteProjectAsynchronouslySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectAsynchronouslySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectsSignalError() instead")
    void getAllProjectsSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectsSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllStatusesSignalError() instead")
    void getAllStatusesSignalE(QList<OAIIssueTypeWithStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllStatusesSignalError(QList<OAIIssueTypeWithStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHierarchySignalError() instead")
    void getHierarchySignalE(OAIProjectIssueTypeHierarchy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHierarchySignalError(OAIProjectIssueTypeHierarchy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemeForProjectSignalError() instead")
    void getNotificationSchemeForProjectSignalE(OAINotificationScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemeForProjectSignalError(OAINotificationScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSignalError() instead")
    void getRecentSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreSignalError() instead")
    void restoreSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProjectsSignalError() instead")
    void searchProjectsSignalE(OAIPageBeanProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProjectsSignalError(OAIPageBeanProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalError() instead")
    void updateProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectTypeSignalError() instead")
    void updateProjectTypeSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectTypeSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use archiveProjectSignalErrorFull() instead")
    void archiveProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectAsynchronouslySignalErrorFull() instead")
    void deleteProjectAsynchronouslySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectAsynchronouslySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectsSignalErrorFull() instead")
    void getAllProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllStatusesSignalErrorFull() instead")
    void getAllStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHierarchySignalErrorFull() instead")
    void getHierarchySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHierarchySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemeForProjectSignalErrorFull() instead")
    void getNotificationSchemeForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemeForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSignalErrorFull() instead")
    void getRecentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreSignalErrorFull() instead")
    void restoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProjectsSignalErrorFull() instead")
    void searchProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalErrorFull() instead")
    void updateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectTypeSignalErrorFull() instead")
    void updateProjectTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
