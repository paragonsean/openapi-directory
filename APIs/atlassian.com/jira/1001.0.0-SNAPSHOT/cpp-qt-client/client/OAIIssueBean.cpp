/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueBean::OAIIssueBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueBean::OAIIssueBean() {
    this->initializeModel();
}

OAIIssueBean::~OAIIssueBean() {}

void OAIIssueBean::initializeModel() {

    m_changelog_isSet = false;
    m_changelog_isValid = false;

    m_editmeta_isSet = false;
    m_editmeta_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_fields_to_include_isSet = false;
    m_fields_to_include_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_rendered_fields_isSet = false;
    m_rendered_fields_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_transitions_isSet = false;
    m_transitions_isValid = false;

    m_versioned_representations_isSet = false;
    m_versioned_representations_isValid = false;
}

void OAIIssueBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueBean::fromJsonObject(QJsonObject json) {

    m_changelog_isValid = ::OpenAPI::fromJsonValue(m_changelog, json[QString("changelog")]);
    m_changelog_isSet = !json[QString("changelog")].isNull() && m_changelog_isValid;

    m_editmeta_isValid = ::OpenAPI::fromJsonValue(m_editmeta, json[QString("editmeta")]);
    m_editmeta_isSet = !json[QString("editmeta")].isNull() && m_editmeta_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_fields_to_include_isValid = ::OpenAPI::fromJsonValue(m_fields_to_include, json[QString("fieldsToInclude")]);
    m_fields_to_include_isSet = !json[QString("fieldsToInclude")].isNull() && m_fields_to_include_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_rendered_fields_isValid = ::OpenAPI::fromJsonValue(m_rendered_fields, json[QString("renderedFields")]);
    m_rendered_fields_isSet = !json[QString("renderedFields")].isNull() && m_rendered_fields_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_transitions_isValid = ::OpenAPI::fromJsonValue(m_transitions, json[QString("transitions")]);
    m_transitions_isSet = !json[QString("transitions")].isNull() && m_transitions_isValid;

    if(json["versionedRepresentations"].isObject()){
        auto varmap = json["versionedRepresentations"].toObject().toVariantMap();
        m_versioned_representations_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QJsonValue> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_versioned_representations_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_versioned_representations_isSet &= !jval.isNull() && m_versioned_representations_isValid;
                m_versioned_representations.insert(m_versioned_representations.end(), val, item);
            }
        }
    }
}

QString OAIIssueBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueBean::asJsonObject() const {
    QJsonObject obj;
    if (m_changelog.isSet()) {
        obj.insert(QString("changelog"), ::OpenAPI::toJsonValue(m_changelog));
    }
    if (m_editmeta.isSet()) {
        obj.insert(QString("editmeta"), ::OpenAPI::toJsonValue(m_editmeta));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_fields_to_include.isSet()) {
        obj.insert(QString("fieldsToInclude"), ::OpenAPI::toJsonValue(m_fields_to_include));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_operations.isSet()) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_rendered_fields.size() > 0) {
        obj.insert(QString("renderedFields"), ::OpenAPI::toJsonValue(m_rendered_fields));
    }
    if (m_schema.size() > 0) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_transitions.size() > 0) {
        obj.insert(QString("transitions"), ::OpenAPI::toJsonValue(m_transitions));
    }
    if (m_versioned_representations.size() > 0) {
        
        obj.insert(QString("versionedRepresentations"), toJsonValue(m_versioned_representations));
    }
    return obj;
}

OAIPageOfChangelogs OAIIssueBean::getChangelog() const {
    return m_changelog;
}
void OAIIssueBean::setChangelog(const OAIPageOfChangelogs &changelog) {
    m_changelog = changelog;
    m_changelog_isSet = true;
}

bool OAIIssueBean::is_changelog_Set() const{
    return m_changelog_isSet;
}

bool OAIIssueBean::is_changelog_Valid() const{
    return m_changelog_isValid;
}

OAIIssueUpdateMetadata OAIIssueBean::getEditmeta() const {
    return m_editmeta;
}
void OAIIssueBean::setEditmeta(const OAIIssueUpdateMetadata &editmeta) {
    m_editmeta = editmeta;
    m_editmeta_isSet = true;
}

bool OAIIssueBean::is_editmeta_Set() const{
    return m_editmeta_isSet;
}

bool OAIIssueBean::is_editmeta_Valid() const{
    return m_editmeta_isValid;
}

QString OAIIssueBean::getExpand() const {
    return m_expand;
}
void OAIIssueBean::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIIssueBean::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIIssueBean::is_expand_Valid() const{
    return m_expand_isValid;
}

QMap<QString, QJsonValue> OAIIssueBean::getFields() const {
    return m_fields;
}
void OAIIssueBean::setFields(const QMap<QString, QJsonValue> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIIssueBean::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIIssueBean::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIIncludedFields OAIIssueBean::getFieldsToInclude() const {
    return m_fields_to_include;
}
void OAIIssueBean::setFieldsToInclude(const OAIIncludedFields &fields_to_include) {
    m_fields_to_include = fields_to_include;
    m_fields_to_include_isSet = true;
}

bool OAIIssueBean::is_fields_to_include_Set() const{
    return m_fields_to_include_isSet;
}

bool OAIIssueBean::is_fields_to_include_Valid() const{
    return m_fields_to_include_isValid;
}

QString OAIIssueBean::getId() const {
    return m_id;
}
void OAIIssueBean::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueBean::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueBean::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIssueBean::getKey() const {
    return m_key;
}
void OAIIssueBean::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIIssueBean::is_key_Set() const{
    return m_key_isSet;
}

bool OAIIssueBean::is_key_Valid() const{
    return m_key_isValid;
}

QMap<QString, QString> OAIIssueBean::getNames() const {
    return m_names;
}
void OAIIssueBean::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIIssueBean::is_names_Set() const{
    return m_names_isSet;
}

bool OAIIssueBean::is_names_Valid() const{
    return m_names_isValid;
}

OAIOperations OAIIssueBean::getOperations() const {
    return m_operations;
}
void OAIIssueBean::setOperations(const OAIOperations &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIIssueBean::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIIssueBean::is_operations_Valid() const{
    return m_operations_isValid;
}

QMap<QString, QJsonValue> OAIIssueBean::getProperties() const {
    return m_properties;
}
void OAIIssueBean::setProperties(const QMap<QString, QJsonValue> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIIssueBean::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIIssueBean::is_properties_Valid() const{
    return m_properties_isValid;
}

QMap<QString, QJsonValue> OAIIssueBean::getRenderedFields() const {
    return m_rendered_fields;
}
void OAIIssueBean::setRenderedFields(const QMap<QString, QJsonValue> &rendered_fields) {
    m_rendered_fields = rendered_fields;
    m_rendered_fields_isSet = true;
}

bool OAIIssueBean::is_rendered_fields_Set() const{
    return m_rendered_fields_isSet;
}

bool OAIIssueBean::is_rendered_fields_Valid() const{
    return m_rendered_fields_isValid;
}

QMap<QString, OAIJsonTypeBean> OAIIssueBean::getSchema() const {
    return m_schema;
}
void OAIIssueBean::setSchema(const QMap<QString, OAIJsonTypeBean> &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIIssueBean::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIIssueBean::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIIssueBean::getSelf() const {
    return m_self;
}
void OAIIssueBean::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIIssueBean::is_self_Set() const{
    return m_self_isSet;
}

bool OAIIssueBean::is_self_Valid() const{
    return m_self_isValid;
}

QList<OAIIssueTransition> OAIIssueBean::getTransitions() const {
    return m_transitions;
}
void OAIIssueBean::setTransitions(const QList<OAIIssueTransition> &transitions) {
    m_transitions = transitions;
    m_transitions_isSet = true;
}

bool OAIIssueBean::is_transitions_Set() const{
    return m_transitions_isSet;
}

bool OAIIssueBean::is_transitions_Valid() const{
    return m_transitions_isValid;
}

QMap<QString, QMap<QString, QJsonValue>> OAIIssueBean::getVersionedRepresentations() const {
    return m_versioned_representations;
}
void OAIIssueBean::setVersionedRepresentations(const QMap<QString, QMap<QString, QJsonValue>> &versioned_representations) {
    m_versioned_representations = versioned_representations;
    m_versioned_representations_isSet = true;
}

bool OAIIssueBean::is_versioned_representations_Set() const{
    return m_versioned_representations_isSet;
}

bool OAIIssueBean::is_versioned_representations_Valid() const{
    return m_versioned_representations_isValid;
}

bool OAIIssueBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changelog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editmeta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_to_include.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_versioned_representations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
