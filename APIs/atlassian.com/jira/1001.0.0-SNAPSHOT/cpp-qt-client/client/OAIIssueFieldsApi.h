/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueFieldsApi_H
#define OAI_OAIIssueFieldsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomFieldDefinitionJsonBean.h"
#include "OAIErrorCollection.h"
#include "OAIFieldDetails.h"
#include "OAIPageBeanContext.h"
#include "OAIPageBeanField.h"
#include "OAITaskProgressBeanObject.h"
#include "OAIUpdateCustomFieldDetails.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueFieldsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueFieldsApi(const int timeOut = 0);
    ~OAIIssueFieldsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_custom_field_definition_json_bean OAICustomFieldDefinitionJsonBean [required]
    */
    virtual void createCustomField(const OAICustomFieldDefinitionJsonBean &oai_custom_field_definition_json_bean);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteCustomField(const QString &id);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void getContextsForFieldDeprecated(const QString &field_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());


    virtual void getFields();

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  id QSet<QString> [optional]
    * @param[in]  query QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getFieldsPaginated(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  id QSet<QString> [optional]
    * @param[in]  query QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void getTrashedFieldsPaginated(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void restoreCustomField(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void trashCustomField(const QString &id);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  oai_update_custom_field_details OAIUpdateCustomFieldDetails [required]
    */
    virtual void updateCustomField(const QString &field_id, const OAIUpdateCustomFieldDetails &oai_update_custom_field_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomFieldCallback(OAIHttpRequestWorker *worker);
    void deleteCustomFieldCallback(OAIHttpRequestWorker *worker);
    void getContextsForFieldDeprecatedCallback(OAIHttpRequestWorker *worker);
    void getFieldsCallback(OAIHttpRequestWorker *worker);
    void getFieldsPaginatedCallback(OAIHttpRequestWorker *worker);
    void getTrashedFieldsPaginatedCallback(OAIHttpRequestWorker *worker);
    void restoreCustomFieldCallback(OAIHttpRequestWorker *worker);
    void trashCustomFieldCallback(OAIHttpRequestWorker *worker);
    void updateCustomFieldCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomFieldSignal(OAIFieldDetails summary);
    void deleteCustomFieldSignal();
    void getContextsForFieldDeprecatedSignal(OAIPageBeanContext summary);
    void getFieldsSignal(QList<OAIFieldDetails> summary);
    void getFieldsPaginatedSignal(OAIPageBeanField summary);
    void getTrashedFieldsPaginatedSignal(OAIPageBeanField summary);
    void restoreCustomFieldSignal(QJsonValue summary);
    void trashCustomFieldSignal(QJsonValue summary);
    void updateCustomFieldSignal(QJsonValue summary);


    void createCustomFieldSignalFull(OAIHttpRequestWorker *worker, OAIFieldDetails summary);
    void deleteCustomFieldSignalFull(OAIHttpRequestWorker *worker);
    void getContextsForFieldDeprecatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanContext summary);
    void getFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFieldDetails> summary);
    void getFieldsPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanField summary);
    void getTrashedFieldsPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanField summary);
    void restoreCustomFieldSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void trashCustomFieldSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateCustomFieldSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use createCustomFieldSignalError() instead")
    void createCustomFieldSignalE(OAIFieldDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldSignalError(OAIFieldDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFieldSignalError() instead")
    void deleteCustomFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContextsForFieldDeprecatedSignalError() instead")
    void getContextsForFieldDeprecatedSignalE(OAIPageBeanContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContextsForFieldDeprecatedSignalError(OAIPageBeanContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsSignalError() instead")
    void getFieldsSignalE(QList<OAIFieldDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsSignalError(QList<OAIFieldDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsPaginatedSignalError() instead")
    void getFieldsPaginatedSignalE(OAIPageBeanField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsPaginatedSignalError(OAIPageBeanField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrashedFieldsPaginatedSignalError() instead")
    void getTrashedFieldsPaginatedSignalE(OAIPageBeanField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrashedFieldsPaginatedSignalError(OAIPageBeanField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreCustomFieldSignalError() instead")
    void restoreCustomFieldSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreCustomFieldSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trashCustomFieldSignalError() instead")
    void trashCustomFieldSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trashCustomFieldSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldSignalError() instead")
    void updateCustomFieldSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomFieldSignalErrorFull() instead")
    void createCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFieldSignalErrorFull() instead")
    void deleteCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContextsForFieldDeprecatedSignalErrorFull() instead")
    void getContextsForFieldDeprecatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContextsForFieldDeprecatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsSignalErrorFull() instead")
    void getFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsPaginatedSignalErrorFull() instead")
    void getFieldsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrashedFieldsPaginatedSignalErrorFull() instead")
    void getTrashedFieldsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrashedFieldsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreCustomFieldSignalErrorFull() instead")
    void restoreCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trashCustomFieldSignalErrorFull() instead")
    void trashCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trashCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldSignalErrorFull() instead")
    void updateCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
