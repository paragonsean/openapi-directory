/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject.h
 *
 * Details about a project.
 */

#ifndef OAIProject_H
#define OAIProject_H

#include <QJsonObject>

#include "OAIAvatarUrlsBean.h"
#include "OAIHierarchy.h"
#include "OAIIssueTypeDetails.h"
#include "OAIProjectCategory.h"
#include "OAIProjectComponent.h"
#include "OAIProjectInsight.h"
#include "OAIProjectLandingPageInfo.h"
#include "OAIProjectPermissions.h"
#include "OAIUser.h"
#include "OAIVersion.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser;
class OAIAvatarUrlsBean;
class OAIProjectComponent;
class OAIProjectInsight;
class OAIHierarchy;
class OAIIssueTypeDetails;
class OAIProjectLandingPageInfo;
class OAIProjectPermissions;
class OAIProjectCategory;
class OAIVersion;

class OAIProject : public OAIObject {
public:
    OAIProject();
    OAIProject(QString json);
    ~OAIProject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    OAIUser getArchivedBy() const;
    void setArchivedBy(const OAIUser &archived_by);
    bool is_archived_by_Set() const;
    bool is_archived_by_Valid() const;

    QDateTime getArchivedDate() const;
    void setArchivedDate(const QDateTime &archived_date);
    bool is_archived_date_Set() const;
    bool is_archived_date_Valid() const;

    QString getAssigneeType() const;
    void setAssigneeType(const QString &assignee_type);
    bool is_assignee_type_Set() const;
    bool is_assignee_type_Valid() const;

    OAIAvatarUrlsBean getAvatarUrls() const;
    void setAvatarUrls(const OAIAvatarUrlsBean &avatar_urls);
    bool is_avatar_urls_Set() const;
    bool is_avatar_urls_Valid() const;

    QList<OAIProjectComponent> getComponents() const;
    void setComponents(const QList<OAIProjectComponent> &components);
    bool is_components_Set() const;
    bool is_components_Valid() const;

    bool isDeleted() const;
    void setDeleted(const bool &deleted);
    bool is_deleted_Set() const;
    bool is_deleted_Valid() const;

    OAIUser getDeletedBy() const;
    void setDeletedBy(const OAIUser &deleted_by);
    bool is_deleted_by_Set() const;
    bool is_deleted_by_Valid() const;

    QDateTime getDeletedDate() const;
    void setDeletedDate(const QDateTime &deleted_date);
    bool is_deleted_date_Set() const;
    bool is_deleted_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getExpand() const;
    void setExpand(const QString &expand);
    bool is_expand_Set() const;
    bool is_expand_Valid() const;

    bool isFavourite() const;
    void setFavourite(const bool &favourite);
    bool is_favourite_Set() const;
    bool is_favourite_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIProjectInsight getInsight() const;
    void setInsight(const OAIProjectInsight &insight);
    bool is_insight_Set() const;
    bool is_insight_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    OAIHierarchy getIssueTypeHierarchy() const;
    void setIssueTypeHierarchy(const OAIHierarchy &issue_type_hierarchy);
    bool is_issue_type_hierarchy_Set() const;
    bool is_issue_type_hierarchy_Valid() const;

    QList<OAIIssueTypeDetails> getIssueTypes() const;
    void setIssueTypes(const QList<OAIIssueTypeDetails> &issue_types);
    bool is_issue_types_Set() const;
    bool is_issue_types_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    OAIProjectLandingPageInfo getLandingPageInfo() const;
    void setLandingPageInfo(const OAIProjectLandingPageInfo &landing_page_info);
    bool is_landing_page_info_Set() const;
    bool is_landing_page_info_Valid() const;

    OAIUser getLead() const;
    void setLead(const OAIUser &lead);
    bool is_lead_Set() const;
    bool is_lead_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIProjectPermissions getPermissions() const;
    void setPermissions(const OAIProjectPermissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    OAIProjectCategory getProjectCategory() const;
    void setProjectCategory(const OAIProjectCategory &project_category);
    bool is_project_category_Set() const;
    bool is_project_category_Valid() const;

    QString getProjectTypeKey() const;
    void setProjectTypeKey(const QString &project_type_key);
    bool is_project_type_key_Set() const;
    bool is_project_type_key_Valid() const;

    QMap<QString, QJsonValue> getProperties() const;
    void setProperties(const QMap<QString, QJsonValue> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QDateTime getRetentionTillDate() const;
    void setRetentionTillDate(const QDateTime &retention_till_date);
    bool is_retention_till_date_Set() const;
    bool is_retention_till_date_Valid() const;

    QMap<QString, QString> getRoles() const;
    void setRoles(const QMap<QString, QString> &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    bool isSimplified() const;
    void setSimplified(const bool &simplified);
    bool is_simplified_Set() const;
    bool is_simplified_Valid() const;

    QString getStyle() const;
    void setStyle(const QString &style);
    bool is_style_Set() const;
    bool is_style_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    QList<OAIVersion> getVersions() const;
    void setVersions(const QList<OAIVersion> &versions);
    bool is_versions_Set() const;
    bool is_versions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    OAIUser m_archived_by;
    bool m_archived_by_isSet;
    bool m_archived_by_isValid;

    QDateTime m_archived_date;
    bool m_archived_date_isSet;
    bool m_archived_date_isValid;

    QString m_assignee_type;
    bool m_assignee_type_isSet;
    bool m_assignee_type_isValid;

    OAIAvatarUrlsBean m_avatar_urls;
    bool m_avatar_urls_isSet;
    bool m_avatar_urls_isValid;

    QList<OAIProjectComponent> m_components;
    bool m_components_isSet;
    bool m_components_isValid;

    bool m_deleted;
    bool m_deleted_isSet;
    bool m_deleted_isValid;

    OAIUser m_deleted_by;
    bool m_deleted_by_isSet;
    bool m_deleted_by_isValid;

    QDateTime m_deleted_date;
    bool m_deleted_date_isSet;
    bool m_deleted_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_expand;
    bool m_expand_isSet;
    bool m_expand_isValid;

    bool m_favourite;
    bool m_favourite_isSet;
    bool m_favourite_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIProjectInsight m_insight;
    bool m_insight_isSet;
    bool m_insight_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    OAIHierarchy m_issue_type_hierarchy;
    bool m_issue_type_hierarchy_isSet;
    bool m_issue_type_hierarchy_isValid;

    QList<OAIIssueTypeDetails> m_issue_types;
    bool m_issue_types_isSet;
    bool m_issue_types_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    OAIProjectLandingPageInfo m_landing_page_info;
    bool m_landing_page_info_isSet;
    bool m_landing_page_info_isValid;

    OAIUser m_lead;
    bool m_lead_isSet;
    bool m_lead_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIProjectPermissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    OAIProjectCategory m_project_category;
    bool m_project_category_isSet;
    bool m_project_category_isValid;

    QString m_project_type_key;
    bool m_project_type_key_isSet;
    bool m_project_type_key_isValid;

    QMap<QString, QJsonValue> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QDateTime m_retention_till_date;
    bool m_retention_till_date_isSet;
    bool m_retention_till_date_isValid;

    QMap<QString, QString> m_roles;
    bool m_roles_isSet;
    bool m_roles_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    bool m_simplified;
    bool m_simplified_isSet;
    bool m_simplified_isValid;

    QString m_style;
    bool m_style_isSet;
    bool m_style_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;

    QList<OAIVersion> m_versions;
    bool m_versions_isSet;
    bool m_versions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject)

#endif // OAIProject_H
