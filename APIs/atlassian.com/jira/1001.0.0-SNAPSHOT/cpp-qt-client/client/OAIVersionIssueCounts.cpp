/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionIssueCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionIssueCounts::OAIVersionIssueCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionIssueCounts::OAIVersionIssueCounts() {
    this->initializeModel();
}

OAIVersionIssueCounts::~OAIVersionIssueCounts() {}

void OAIVersionIssueCounts::initializeModel() {

    m_custom_field_usage_isSet = false;
    m_custom_field_usage_isValid = false;

    m_issue_count_with_custom_fields_showing_version_isSet = false;
    m_issue_count_with_custom_fields_showing_version_isValid = false;

    m_issues_affected_count_isSet = false;
    m_issues_affected_count_isValid = false;

    m_issues_fixed_count_isSet = false;
    m_issues_fixed_count_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIVersionIssueCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionIssueCounts::fromJsonObject(QJsonObject json) {

    m_custom_field_usage_isValid = ::OpenAPI::fromJsonValue(m_custom_field_usage, json[QString("customFieldUsage")]);
    m_custom_field_usage_isSet = !json[QString("customFieldUsage")].isNull() && m_custom_field_usage_isValid;

    m_issue_count_with_custom_fields_showing_version_isValid = ::OpenAPI::fromJsonValue(m_issue_count_with_custom_fields_showing_version, json[QString("issueCountWithCustomFieldsShowingVersion")]);
    m_issue_count_with_custom_fields_showing_version_isSet = !json[QString("issueCountWithCustomFieldsShowingVersion")].isNull() && m_issue_count_with_custom_fields_showing_version_isValid;

    m_issues_affected_count_isValid = ::OpenAPI::fromJsonValue(m_issues_affected_count, json[QString("issuesAffectedCount")]);
    m_issues_affected_count_isSet = !json[QString("issuesAffectedCount")].isNull() && m_issues_affected_count_isValid;

    m_issues_fixed_count_isValid = ::OpenAPI::fromJsonValue(m_issues_fixed_count, json[QString("issuesFixedCount")]);
    m_issues_fixed_count_isSet = !json[QString("issuesFixedCount")].isNull() && m_issues_fixed_count_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIVersionIssueCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionIssueCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_field_usage.size() > 0) {
        obj.insert(QString("customFieldUsage"), ::OpenAPI::toJsonValue(m_custom_field_usage));
    }
    if (m_issue_count_with_custom_fields_showing_version_isSet) {
        obj.insert(QString("issueCountWithCustomFieldsShowingVersion"), ::OpenAPI::toJsonValue(m_issue_count_with_custom_fields_showing_version));
    }
    if (m_issues_affected_count_isSet) {
        obj.insert(QString("issuesAffectedCount"), ::OpenAPI::toJsonValue(m_issues_affected_count));
    }
    if (m_issues_fixed_count_isSet) {
        obj.insert(QString("issuesFixedCount"), ::OpenAPI::toJsonValue(m_issues_fixed_count));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QList<OAIVersionUsageInCustomField> OAIVersionIssueCounts::getCustomFieldUsage() const {
    return m_custom_field_usage;
}
void OAIVersionIssueCounts::setCustomFieldUsage(const QList<OAIVersionUsageInCustomField> &custom_field_usage) {
    m_custom_field_usage = custom_field_usage;
    m_custom_field_usage_isSet = true;
}

bool OAIVersionIssueCounts::is_custom_field_usage_Set() const{
    return m_custom_field_usage_isSet;
}

bool OAIVersionIssueCounts::is_custom_field_usage_Valid() const{
    return m_custom_field_usage_isValid;
}

qint64 OAIVersionIssueCounts::getIssueCountWithCustomFieldsShowingVersion() const {
    return m_issue_count_with_custom_fields_showing_version;
}
void OAIVersionIssueCounts::setIssueCountWithCustomFieldsShowingVersion(const qint64 &issue_count_with_custom_fields_showing_version) {
    m_issue_count_with_custom_fields_showing_version = issue_count_with_custom_fields_showing_version;
    m_issue_count_with_custom_fields_showing_version_isSet = true;
}

bool OAIVersionIssueCounts::is_issue_count_with_custom_fields_showing_version_Set() const{
    return m_issue_count_with_custom_fields_showing_version_isSet;
}

bool OAIVersionIssueCounts::is_issue_count_with_custom_fields_showing_version_Valid() const{
    return m_issue_count_with_custom_fields_showing_version_isValid;
}

qint64 OAIVersionIssueCounts::getIssuesAffectedCount() const {
    return m_issues_affected_count;
}
void OAIVersionIssueCounts::setIssuesAffectedCount(const qint64 &issues_affected_count) {
    m_issues_affected_count = issues_affected_count;
    m_issues_affected_count_isSet = true;
}

bool OAIVersionIssueCounts::is_issues_affected_count_Set() const{
    return m_issues_affected_count_isSet;
}

bool OAIVersionIssueCounts::is_issues_affected_count_Valid() const{
    return m_issues_affected_count_isValid;
}

qint64 OAIVersionIssueCounts::getIssuesFixedCount() const {
    return m_issues_fixed_count;
}
void OAIVersionIssueCounts::setIssuesFixedCount(const qint64 &issues_fixed_count) {
    m_issues_fixed_count = issues_fixed_count;
    m_issues_fixed_count_isSet = true;
}

bool OAIVersionIssueCounts::is_issues_fixed_count_Set() const{
    return m_issues_fixed_count_isSet;
}

bool OAIVersionIssueCounts::is_issues_fixed_count_Valid() const{
    return m_issues_fixed_count_isValid;
}

QString OAIVersionIssueCounts::getSelf() const {
    return m_self;
}
void OAIVersionIssueCounts::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIVersionIssueCounts::is_self_Set() const{
    return m_self_isSet;
}

bool OAIVersionIssueCounts::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIVersionIssueCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_field_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_count_with_custom_fields_showing_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_affected_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_fixed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionIssueCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
