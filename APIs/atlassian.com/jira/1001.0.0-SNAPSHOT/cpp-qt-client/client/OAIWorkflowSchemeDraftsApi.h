/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowSchemeDraftsApi_H
#define OAI_OAIWorkflowSchemeDraftsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultWorkflow.h"
#include "OAIIssueTypeWorkflowMapping.h"
#include "OAIIssueTypesWorkflowMapping.h"
#include "OAIPublishDraftWorkflowScheme.h"
#include "OAITaskProgressBeanObject.h"
#include "OAIWorkflowScheme.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowSchemeDraftsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowSchemeDraftsApi(const int timeOut = 0);
    ~OAIWorkflowSchemeDraftsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void createWorkflowSchemeDraftFromParent(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteDraftDefaultWorkflow(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [required]
    */
    virtual void deleteDraftWorkflowMapping(const qint64 &id, const QString &workflow_name);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteWorkflowSchemeDraft(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  issue_type QString [required]
    */
    virtual void deleteWorkflowSchemeDraftIssueType(const qint64 &id, const QString &issue_type);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getDraftDefaultWorkflow(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    */
    virtual void getDraftWorkflow(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getWorkflowSchemeDraft(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  issue_type QString [required]
    */
    virtual void getWorkflowSchemeDraftIssueType(const qint64 &id, const QString &issue_type);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_publish_draft_workflow_scheme OAIPublishDraftWorkflowScheme [required]
    * @param[in]  validate_only bool [optional]
    */
    virtual void publishDraftWorkflowScheme(const qint64 &id, const OAIPublishDraftWorkflowScheme &oai_publish_draft_workflow_scheme, const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  issue_type QString [required]
    * @param[in]  oai_issue_type_workflow_mapping OAIIssueTypeWorkflowMapping [required]
    */
    virtual void setWorkflowSchemeDraftIssueType(const qint64 &id, const QString &issue_type, const OAIIssueTypeWorkflowMapping &oai_issue_type_workflow_mapping);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_default_workflow OAIDefaultWorkflow [required]
    */
    virtual void updateDraftDefaultWorkflow(const qint64 &id, const OAIDefaultWorkflow &oai_default_workflow);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  oai_issue_types_workflow_mapping OAIIssueTypesWorkflowMapping [required]
    */
    virtual void updateDraftWorkflowMapping(const qint64 &id, const QString &workflow_name, const OAIIssueTypesWorkflowMapping &oai_issue_types_workflow_mapping);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_workflow_scheme OAIWorkflowScheme [required]
    */
    virtual void updateWorkflowSchemeDraft(const qint64 &id, const OAIWorkflowScheme &oai_workflow_scheme);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkflowSchemeDraftFromParentCallback(OAIHttpRequestWorker *worker);
    void deleteDraftDefaultWorkflowCallback(OAIHttpRequestWorker *worker);
    void deleteDraftWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeDraftCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeDraftIssueTypeCallback(OAIHttpRequestWorker *worker);
    void getDraftDefaultWorkflowCallback(OAIHttpRequestWorker *worker);
    void getDraftWorkflowCallback(OAIHttpRequestWorker *worker);
    void getWorkflowSchemeDraftCallback(OAIHttpRequestWorker *worker);
    void getWorkflowSchemeDraftIssueTypeCallback(OAIHttpRequestWorker *worker);
    void publishDraftWorkflowSchemeCallback(OAIHttpRequestWorker *worker);
    void setWorkflowSchemeDraftIssueTypeCallback(OAIHttpRequestWorker *worker);
    void updateDraftDefaultWorkflowCallback(OAIHttpRequestWorker *worker);
    void updateDraftWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void updateWorkflowSchemeDraftCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkflowSchemeDraftFromParentSignal(OAIWorkflowScheme summary);
    void deleteDraftDefaultWorkflowSignal(OAIWorkflowScheme summary);
    void deleteDraftWorkflowMappingSignal();
    void deleteWorkflowSchemeDraftSignal();
    void deleteWorkflowSchemeDraftIssueTypeSignal(OAIWorkflowScheme summary);
    void getDraftDefaultWorkflowSignal(OAIDefaultWorkflow summary);
    void getDraftWorkflowSignal(OAIIssueTypesWorkflowMapping summary);
    void getWorkflowSchemeDraftSignal(OAIWorkflowScheme summary);
    void getWorkflowSchemeDraftIssueTypeSignal(OAIIssueTypeWorkflowMapping summary);
    void publishDraftWorkflowSchemeSignal();
    void setWorkflowSchemeDraftIssueTypeSignal(OAIWorkflowScheme summary);
    void updateDraftDefaultWorkflowSignal(OAIWorkflowScheme summary);
    void updateDraftWorkflowMappingSignal(OAIWorkflowScheme summary);
    void updateWorkflowSchemeDraftSignal(OAIWorkflowScheme summary);


    void createWorkflowSchemeDraftFromParentSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void deleteDraftDefaultWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void deleteDraftWorkflowMappingSignalFull(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeDraftSignalFull(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeDraftIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void getDraftDefaultWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIDefaultWorkflow summary);
    void getDraftWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypesWorkflowMapping summary);
    void getWorkflowSchemeDraftSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void getWorkflowSchemeDraftIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeWorkflowMapping summary);
    void publishDraftWorkflowSchemeSignalFull(OAIHttpRequestWorker *worker);
    void setWorkflowSchemeDraftIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void updateDraftDefaultWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void updateDraftWorkflowMappingSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void updateWorkflowSchemeDraftSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);

    Q_DECL_DEPRECATED_X("Use createWorkflowSchemeDraftFromParentSignalError() instead")
    void createWorkflowSchemeDraftFromParentSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSchemeDraftFromParentSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftDefaultWorkflowSignalError() instead")
    void deleteDraftDefaultWorkflowSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftDefaultWorkflowSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftWorkflowMappingSignalError() instead")
    void deleteDraftWorkflowMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftWorkflowMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeDraftSignalError() instead")
    void deleteWorkflowSchemeDraftSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeDraftSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeDraftIssueTypeSignalError() instead")
    void deleteWorkflowSchemeDraftIssueTypeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeDraftIssueTypeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftDefaultWorkflowSignalError() instead")
    void getDraftDefaultWorkflowSignalE(OAIDefaultWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftDefaultWorkflowSignalError(OAIDefaultWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftWorkflowSignalError() instead")
    void getDraftWorkflowSignalE(OAIIssueTypesWorkflowMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftWorkflowSignalError(OAIIssueTypesWorkflowMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeDraftSignalError() instead")
    void getWorkflowSchemeDraftSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeDraftSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeDraftIssueTypeSignalError() instead")
    void getWorkflowSchemeDraftIssueTypeSignalE(OAIIssueTypeWorkflowMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeDraftIssueTypeSignalError(OAIIssueTypeWorkflowMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishDraftWorkflowSchemeSignalError() instead")
    void publishDraftWorkflowSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publishDraftWorkflowSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWorkflowSchemeDraftIssueTypeSignalError() instead")
    void setWorkflowSchemeDraftIssueTypeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setWorkflowSchemeDraftIssueTypeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftDefaultWorkflowSignalError() instead")
    void updateDraftDefaultWorkflowSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftDefaultWorkflowSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftWorkflowMappingSignalError() instead")
    void updateDraftWorkflowMappingSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftWorkflowMappingSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSchemeDraftSignalError() instead")
    void updateWorkflowSchemeDraftSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSchemeDraftSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkflowSchemeDraftFromParentSignalErrorFull() instead")
    void createWorkflowSchemeDraftFromParentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSchemeDraftFromParentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftDefaultWorkflowSignalErrorFull() instead")
    void deleteDraftDefaultWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftDefaultWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftWorkflowMappingSignalErrorFull() instead")
    void deleteDraftWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeDraftSignalErrorFull() instead")
    void deleteWorkflowSchemeDraftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeDraftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeDraftIssueTypeSignalErrorFull() instead")
    void deleteWorkflowSchemeDraftIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeDraftIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftDefaultWorkflowSignalErrorFull() instead")
    void getDraftDefaultWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftDefaultWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftWorkflowSignalErrorFull() instead")
    void getDraftWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeDraftSignalErrorFull() instead")
    void getWorkflowSchemeDraftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeDraftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeDraftIssueTypeSignalErrorFull() instead")
    void getWorkflowSchemeDraftIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeDraftIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishDraftWorkflowSchemeSignalErrorFull() instead")
    void publishDraftWorkflowSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishDraftWorkflowSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWorkflowSchemeDraftIssueTypeSignalErrorFull() instead")
    void setWorkflowSchemeDraftIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setWorkflowSchemeDraftIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftDefaultWorkflowSignalErrorFull() instead")
    void updateDraftDefaultWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftDefaultWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftWorkflowMappingSignalErrorFull() instead")
    void updateDraftWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSchemeDraftSignalErrorFull() instead")
    void updateWorkflowSchemeDraftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSchemeDraftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
