/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueResolutionsApi_H
#define OAI_OAIIssueResolutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateResolutionDetails.h"
#include "OAIErrorCollection.h"
#include "OAIPageBeanResolutionJsonBean.h"
#include "OAIReorderIssueResolutionsRequest.h"
#include "OAIResolution.h"
#include "OAIResolutionId.h"
#include "OAISetDefaultResolutionRequest.h"
#include "OAITaskProgressBeanObject.h"
#include "OAIUpdateResolutionDetails.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueResolutionsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueResolutionsApi(const int timeOut = 0);
    ~OAIIssueResolutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_resolution_details OAICreateResolutionDetails [required]
    */
    virtual void createResolution(const OAICreateResolutionDetails &oai_create_resolution_details);

    /**
    * @param[in]  id QString [required]
    * @param[in]  replace_with QString [required]
    */
    virtual void deleteResolution(const QString &id, const QString &replace_with);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getResolution(const QString &id);


    Q_DECL_DEPRECATED virtual void getResolutions();

    /**
    * @param[in]  oai_reorder_issue_resolutions_request OAIReorderIssueResolutionsRequest [required]
    */
    virtual void moveResolutions(const OAIReorderIssueResolutionsRequest &oai_reorder_issue_resolutions_request);

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  only_default bool [optional]
    */
    virtual void searchResolutions(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &only_default = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_set_default_resolution_request OAISetDefaultResolutionRequest [required]
    */
    virtual void setDefaultResolution(const OAISetDefaultResolutionRequest &oai_set_default_resolution_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_resolution_details OAIUpdateResolutionDetails [required]
    */
    virtual void updateResolution(const QString &id, const OAIUpdateResolutionDetails &oai_update_resolution_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createResolutionCallback(OAIHttpRequestWorker *worker);
    void deleteResolutionCallback(OAIHttpRequestWorker *worker);
    void getResolutionCallback(OAIHttpRequestWorker *worker);
    void getResolutionsCallback(OAIHttpRequestWorker *worker);
    void moveResolutionsCallback(OAIHttpRequestWorker *worker);
    void searchResolutionsCallback(OAIHttpRequestWorker *worker);
    void setDefaultResolutionCallback(OAIHttpRequestWorker *worker);
    void updateResolutionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createResolutionSignal(OAIResolutionId summary);
    void deleteResolutionSignal();
    void getResolutionSignal(OAIResolution summary);
    void getResolutionsSignal(QList<OAIResolution> summary);
    void moveResolutionsSignal(QJsonValue summary);
    void searchResolutionsSignal(OAIPageBeanResolutionJsonBean summary);
    void setDefaultResolutionSignal(QJsonValue summary);
    void updateResolutionSignal(QJsonValue summary);


    void createResolutionSignalFull(OAIHttpRequestWorker *worker, OAIResolutionId summary);
    void deleteResolutionSignalFull(OAIHttpRequestWorker *worker);
    void getResolutionSignalFull(OAIHttpRequestWorker *worker, OAIResolution summary);
    void getResolutionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResolution> summary);
    void moveResolutionsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void searchResolutionsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanResolutionJsonBean summary);
    void setDefaultResolutionSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateResolutionSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use createResolutionSignalError() instead")
    void createResolutionSignalE(OAIResolutionId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolutionSignalError(OAIResolutionId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolutionSignalError() instead")
    void deleteResolutionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolutionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionSignalError() instead")
    void getResolutionSignalE(OAIResolution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionSignalError(OAIResolution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionsSignalError() instead")
    void getResolutionsSignalE(QList<OAIResolution> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionsSignalError(QList<OAIResolution> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveResolutionsSignalError() instead")
    void moveResolutionsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveResolutionsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchResolutionsSignalError() instead")
    void searchResolutionsSignalE(OAIPageBeanResolutionJsonBean summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchResolutionsSignalError(OAIPageBeanResolutionJsonBean summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultResolutionSignalError() instead")
    void setDefaultResolutionSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultResolutionSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolutionSignalError() instead")
    void updateResolutionSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolutionSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createResolutionSignalErrorFull() instead")
    void createResolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolutionSignalErrorFull() instead")
    void deleteResolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionSignalErrorFull() instead")
    void getResolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionsSignalErrorFull() instead")
    void getResolutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveResolutionsSignalErrorFull() instead")
    void moveResolutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveResolutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchResolutionsSignalErrorFull() instead")
    void searchResolutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchResolutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultResolutionSignalErrorFull() instead")
    void setDefaultResolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultResolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolutionSignalErrorFull() instead")
    void updateResolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
