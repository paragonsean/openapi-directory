/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentArchiveItemReadable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentArchiveItemReadable::OAIAttachmentArchiveItemReadable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentArchiveItemReadable::OAIAttachmentArchiveItemReadable() {
    this->initializeModel();
}

OAIAttachmentArchiveItemReadable::~OAIAttachmentArchiveItemReadable() {}

void OAIAttachmentArchiveItemReadable::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIAttachmentArchiveItemReadable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentArchiveItemReadable::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIAttachmentArchiveItemReadable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentArchiveItemReadable::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

qint64 OAIAttachmentArchiveItemReadable::getIndex() const {
    return m_index;
}
void OAIAttachmentArchiveItemReadable::setIndex(const qint64 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIAttachmentArchiveItemReadable::is_index_Set() const{
    return m_index_isSet;
}

bool OAIAttachmentArchiveItemReadable::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIAttachmentArchiveItemReadable::getLabel() const {
    return m_label;
}
void OAIAttachmentArchiveItemReadable::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAttachmentArchiveItemReadable::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAttachmentArchiveItemReadable::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIAttachmentArchiveItemReadable::getMediaType() const {
    return m_media_type;
}
void OAIAttachmentArchiveItemReadable::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIAttachmentArchiveItemReadable::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIAttachmentArchiveItemReadable::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIAttachmentArchiveItemReadable::getPath() const {
    return m_path;
}
void OAIAttachmentArchiveItemReadable::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAttachmentArchiveItemReadable::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAttachmentArchiveItemReadable::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAttachmentArchiveItemReadable::getSize() const {
    return m_size;
}
void OAIAttachmentArchiveItemReadable::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAttachmentArchiveItemReadable::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttachmentArchiveItemReadable::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIAttachmentArchiveItemReadable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentArchiveItemReadable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
