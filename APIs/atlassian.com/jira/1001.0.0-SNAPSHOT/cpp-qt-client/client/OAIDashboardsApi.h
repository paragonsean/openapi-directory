/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDashboardsApi_H
#define OAI_OAIDashboardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAvailableDashboardGadgetsResponse.h"
#include "OAIDashboard.h"
#include "OAIDashboardDetails.h"
#include "OAIDashboardGadget.h"
#include "OAIDashboardGadgetResponse.h"
#include "OAIDashboardGadgetSettings.h"
#include "OAIDashboardGadgetUpdateRequest.h"
#include "OAIEntityProperty.h"
#include "OAIErrorCollection.h"
#include "OAIPageBeanDashboard.h"
#include "OAIPageOfDashboards.h"
#include "OAIPropertyKeys.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDashboardsApi : public QObject {
    Q_OBJECT

public:
    OAIDashboardsApi(const int timeOut = 0);
    ~OAIDashboardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dashboard_id qint64 [required]
    * @param[in]  oai_dashboard_gadget_settings OAIDashboardGadgetSettings [required]
    */
    virtual void addGadget(const qint64 &dashboard_id, const OAIDashboardGadgetSettings &oai_dashboard_gadget_settings);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_dashboard_details OAIDashboardDetails [required]
    */
    virtual void copyDashboard(const QString &id, const OAIDashboardDetails &oai_dashboard_details);

    /**
    * @param[in]  oai_dashboard_details OAIDashboardDetails [required]
    */
    virtual void createDashboard(const OAIDashboardDetails &oai_dashboard_details);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteDashboard(const QString &id);

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void deleteDashboardItemProperty(const QString &dashboard_id, const QString &item_id, const QString &property_key);


    virtual void getAllAvailableDashboardGadgets();

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getAllDashboards(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  dashboard_id qint64 [required]
    * @param[in]  module_key QList<QString> [optional]
    * @param[in]  uri QList<QString> [optional]
    * @param[in]  gadget_id QList<qint64> [optional]
    */
    virtual void getAllGadgets(const qint64 &dashboard_id, const ::OpenAPI::OptionalParam<QList<QString>> &module_key = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &uri = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint64>> &gadget_id = ::OpenAPI::OptionalParam<QList<qint64>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDashboard(const QString &id);

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void getDashboardItemProperty(const QString &dashboard_id, const QString &item_id, const QString &property_key);

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void getDashboardItemPropertyKeys(const QString &dashboard_id, const QString &item_id);

    /**
    * @param[in]  dashboard_name QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  groupname QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  project_id qint64 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getDashboardsPaginated(const ::OpenAPI::OptionalParam<QString> &dashboard_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &project_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id qint64 [required]
    * @param[in]  gadget_id qint64 [required]
    */
    virtual void removeGadget(const qint64 &dashboard_id, const qint64 &gadget_id);

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  property_key QString [required]
    * @param[in]  body QJsonValue [required]
    */
    virtual void setDashboardItemProperty(const QString &dashboard_id, const QString &item_id, const QString &property_key, const QJsonValue &body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_dashboard_details OAIDashboardDetails [required]
    */
    virtual void updateDashboard(const QString &id, const OAIDashboardDetails &oai_dashboard_details);

    /**
    * @param[in]  dashboard_id qint64 [required]
    * @param[in]  gadget_id qint64 [required]
    * @param[in]  oai_dashboard_gadget_update_request OAIDashboardGadgetUpdateRequest [required]
    */
    virtual void updateGadget(const qint64 &dashboard_id, const qint64 &gadget_id, const OAIDashboardGadgetUpdateRequest &oai_dashboard_gadget_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addGadgetCallback(OAIHttpRequestWorker *worker);
    void copyDashboardCallback(OAIHttpRequestWorker *worker);
    void createDashboardCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardItemPropertyCallback(OAIHttpRequestWorker *worker);
    void getAllAvailableDashboardGadgetsCallback(OAIHttpRequestWorker *worker);
    void getAllDashboardsCallback(OAIHttpRequestWorker *worker);
    void getAllGadgetsCallback(OAIHttpRequestWorker *worker);
    void getDashboardCallback(OAIHttpRequestWorker *worker);
    void getDashboardItemPropertyCallback(OAIHttpRequestWorker *worker);
    void getDashboardItemPropertyKeysCallback(OAIHttpRequestWorker *worker);
    void getDashboardsPaginatedCallback(OAIHttpRequestWorker *worker);
    void removeGadgetCallback(OAIHttpRequestWorker *worker);
    void setDashboardItemPropertyCallback(OAIHttpRequestWorker *worker);
    void updateDashboardCallback(OAIHttpRequestWorker *worker);
    void updateGadgetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addGadgetSignal(OAIDashboardGadget summary);
    void copyDashboardSignal(OAIDashboard summary);
    void createDashboardSignal(OAIDashboard summary);
    void deleteDashboardSignal();
    void deleteDashboardItemPropertySignal();
    void getAllAvailableDashboardGadgetsSignal(OAIAvailableDashboardGadgetsResponse summary);
    void getAllDashboardsSignal(OAIPageOfDashboards summary);
    void getAllGadgetsSignal(OAIDashboardGadgetResponse summary);
    void getDashboardSignal(OAIDashboard summary);
    void getDashboardItemPropertySignal(OAIEntityProperty summary);
    void getDashboardItemPropertyKeysSignal(OAIPropertyKeys summary);
    void getDashboardsPaginatedSignal(OAIPageBeanDashboard summary);
    void removeGadgetSignal(QJsonValue summary);
    void setDashboardItemPropertySignal(QJsonValue summary);
    void updateDashboardSignal(OAIDashboard summary);
    void updateGadgetSignal(QJsonValue summary);


    void addGadgetSignalFull(OAIHttpRequestWorker *worker, OAIDashboardGadget summary);
    void copyDashboardSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void createDashboardSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void deleteDashboardSignalFull(OAIHttpRequestWorker *worker);
    void deleteDashboardItemPropertySignalFull(OAIHttpRequestWorker *worker);
    void getAllAvailableDashboardGadgetsSignalFull(OAIHttpRequestWorker *worker, OAIAvailableDashboardGadgetsResponse summary);
    void getAllDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIPageOfDashboards summary);
    void getAllGadgetsSignalFull(OAIHttpRequestWorker *worker, OAIDashboardGadgetResponse summary);
    void getDashboardSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void getDashboardItemPropertySignalFull(OAIHttpRequestWorker *worker, OAIEntityProperty summary);
    void getDashboardItemPropertyKeysSignalFull(OAIHttpRequestWorker *worker, OAIPropertyKeys summary);
    void getDashboardsPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanDashboard summary);
    void removeGadgetSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void setDashboardItemPropertySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateDashboardSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void updateGadgetSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use addGadgetSignalError() instead")
    void addGadgetSignalE(OAIDashboardGadget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addGadgetSignalError(OAIDashboardGadget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyDashboardSignalError() instead")
    void copyDashboardSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyDashboardSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDashboardSignalError() instead")
    void createDashboardSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDashboardSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardSignalError() instead")
    void deleteDashboardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardItemPropertySignalError() instead")
    void deleteDashboardItemPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardItemPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAvailableDashboardGadgetsSignalError() instead")
    void getAllAvailableDashboardGadgetsSignalE(OAIAvailableDashboardGadgetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAvailableDashboardGadgetsSignalError(OAIAvailableDashboardGadgetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDashboardsSignalError() instead")
    void getAllDashboardsSignalE(OAIPageOfDashboards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDashboardsSignalError(OAIPageOfDashboards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllGadgetsSignalError() instead")
    void getAllGadgetsSignalE(OAIDashboardGadgetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllGadgetsSignalError(OAIDashboardGadgetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardSignalError() instead")
    void getDashboardSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardItemPropertySignalError() instead")
    void getDashboardItemPropertySignalE(OAIEntityProperty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardItemPropertySignalError(OAIEntityProperty summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardItemPropertyKeysSignalError() instead")
    void getDashboardItemPropertyKeysSignalE(OAIPropertyKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardItemPropertyKeysSignalError(OAIPropertyKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsPaginatedSignalError() instead")
    void getDashboardsPaginatedSignalE(OAIPageBeanDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsPaginatedSignalError(OAIPageBeanDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGadgetSignalError() instead")
    void removeGadgetSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGadgetSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDashboardItemPropertySignalError() instead")
    void setDashboardItemPropertySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDashboardItemPropertySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardSignalError() instead")
    void updateDashboardSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGadgetSignalError() instead")
    void updateGadgetSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGadgetSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addGadgetSignalErrorFull() instead")
    void addGadgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGadgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyDashboardSignalErrorFull() instead")
    void copyDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDashboardSignalErrorFull() instead")
    void createDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardSignalErrorFull() instead")
    void deleteDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardItemPropertySignalErrorFull() instead")
    void deleteDashboardItemPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardItemPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAvailableDashboardGadgetsSignalErrorFull() instead")
    void getAllAvailableDashboardGadgetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAvailableDashboardGadgetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDashboardsSignalErrorFull() instead")
    void getAllDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllGadgetsSignalErrorFull() instead")
    void getAllGadgetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllGadgetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardSignalErrorFull() instead")
    void getDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardItemPropertySignalErrorFull() instead")
    void getDashboardItemPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardItemPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardItemPropertyKeysSignalErrorFull() instead")
    void getDashboardItemPropertyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardItemPropertyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsPaginatedSignalErrorFull() instead")
    void getDashboardsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGadgetSignalErrorFull() instead")
    void removeGadgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGadgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDashboardItemPropertySignalErrorFull() instead")
    void setDashboardItemPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDashboardItemPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardSignalErrorFull() instead")
    void updateDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGadgetSignalErrorFull() instead")
    void updateGadgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGadgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
