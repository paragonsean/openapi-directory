/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonNode::OAIJsonNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonNode::OAIJsonNode() {
    this->initializeModel();
}

OAIJsonNode::~OAIJsonNode() {}

void OAIJsonNode::initializeModel() {

    m_array_isSet = false;
    m_array_isValid = false;

    m_big_decimal_isSet = false;
    m_big_decimal_isValid = false;

    m_big_integer_isSet = false;
    m_big_integer_isValid = false;

    m_big_integer_value_isSet = false;
    m_big_integer_value_isValid = false;

    m_binary_isSet = false;
    m_binary_isValid = false;

    m_binary_value_isSet = false;
    m_binary_value_isValid = false;

    m_boolean_isSet = false;
    m_boolean_isValid = false;

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_container_node_isSet = false;
    m_container_node_isValid = false;

    m_decimal_value_isSet = false;
    m_decimal_value_isValid = false;

    m_r_double_isSet = false;
    m_r_double_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_field_names_isSet = false;
    m_field_names_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_floating_point_number_isSet = false;
    m_floating_point_number_isValid = false;

    m_r_int_isSet = false;
    m_r_int_isValid = false;

    m_int_value_isSet = false;
    m_int_value_isValid = false;

    m_integral_number_isSet = false;
    m_integral_number_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_long_value_isSet = false;
    m_long_value_isValid = false;

    m_missing_node_isSet = false;
    m_missing_node_isValid = false;

    m_null_isSet = false;
    m_null_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_number_type_isSet = false;
    m_number_type_isValid = false;

    m_number_value_isSet = false;
    m_number_value_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_pojo_isSet = false;
    m_pojo_isValid = false;

    m_text_value_isSet = false;
    m_text_value_isValid = false;

    m_textual_isSet = false;
    m_textual_isValid = false;

    m_value_as_boolean_isSet = false;
    m_value_as_boolean_isValid = false;

    m_value_as_double_isSet = false;
    m_value_as_double_isValid = false;

    m_value_as_int_isSet = false;
    m_value_as_int_isValid = false;

    m_value_as_long_isSet = false;
    m_value_as_long_isValid = false;

    m_value_as_text_isSet = false;
    m_value_as_text_isValid = false;

    m_value_node_isSet = false;
    m_value_node_isValid = false;
}

void OAIJsonNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonNode::fromJsonObject(QJsonObject json) {

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_big_decimal_isValid = ::OpenAPI::fromJsonValue(m_big_decimal, json[QString("bigDecimal")]);
    m_big_decimal_isSet = !json[QString("bigDecimal")].isNull() && m_big_decimal_isValid;

    m_big_integer_isValid = ::OpenAPI::fromJsonValue(m_big_integer, json[QString("bigInteger")]);
    m_big_integer_isSet = !json[QString("bigInteger")].isNull() && m_big_integer_isValid;

    m_big_integer_value_isValid = ::OpenAPI::fromJsonValue(m_big_integer_value, json[QString("bigIntegerValue")]);
    m_big_integer_value_isSet = !json[QString("bigIntegerValue")].isNull() && m_big_integer_value_isValid;

    m_binary_isValid = ::OpenAPI::fromJsonValue(m_binary, json[QString("binary")]);
    m_binary_isSet = !json[QString("binary")].isNull() && m_binary_isValid;

    m_binary_value_isValid = ::OpenAPI::fromJsonValue(m_binary_value, json[QString("binaryValue")]);
    m_binary_value_isSet = !json[QString("binaryValue")].isNull() && m_binary_value_isValid;

    m_boolean_isValid = ::OpenAPI::fromJsonValue(m_boolean, json[QString("boolean")]);
    m_boolean_isSet = !json[QString("boolean")].isNull() && m_boolean_isValid;

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;

    m_container_node_isValid = ::OpenAPI::fromJsonValue(m_container_node, json[QString("containerNode")]);
    m_container_node_isSet = !json[QString("containerNode")].isNull() && m_container_node_isValid;

    m_decimal_value_isValid = ::OpenAPI::fromJsonValue(m_decimal_value, json[QString("decimalValue")]);
    m_decimal_value_isSet = !json[QString("decimalValue")].isNull() && m_decimal_value_isValid;

    m_r_double_isValid = ::OpenAPI::fromJsonValue(m_r_double, json[QString("double")]);
    m_r_double_isSet = !json[QString("double")].isNull() && m_r_double_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_field_names_isValid = ::OpenAPI::fromJsonValue(m_field_names, json[QString("fieldNames")]);
    m_field_names_isSet = !json[QString("fieldNames")].isNull() && m_field_names_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_floating_point_number_isValid = ::OpenAPI::fromJsonValue(m_floating_point_number, json[QString("floatingPointNumber")]);
    m_floating_point_number_isSet = !json[QString("floatingPointNumber")].isNull() && m_floating_point_number_isValid;

    m_r_int_isValid = ::OpenAPI::fromJsonValue(m_r_int, json[QString("int")]);
    m_r_int_isSet = !json[QString("int")].isNull() && m_r_int_isValid;

    m_int_value_isValid = ::OpenAPI::fromJsonValue(m_int_value, json[QString("intValue")]);
    m_int_value_isSet = !json[QString("intValue")].isNull() && m_int_value_isValid;

    m_integral_number_isValid = ::OpenAPI::fromJsonValue(m_integral_number, json[QString("integralNumber")]);
    m_integral_number_isSet = !json[QString("integralNumber")].isNull() && m_integral_number_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_long_value_isValid = ::OpenAPI::fromJsonValue(m_long_value, json[QString("longValue")]);
    m_long_value_isSet = !json[QString("longValue")].isNull() && m_long_value_isValid;

    m_missing_node_isValid = ::OpenAPI::fromJsonValue(m_missing_node, json[QString("missingNode")]);
    m_missing_node_isSet = !json[QString("missingNode")].isNull() && m_missing_node_isValid;

    m_null_isValid = ::OpenAPI::fromJsonValue(m_null, json[QString("null")]);
    m_null_isSet = !json[QString("null")].isNull() && m_null_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_number_type_isValid = ::OpenAPI::fromJsonValue(m_number_type, json[QString("numberType")]);
    m_number_type_isSet = !json[QString("numberType")].isNull() && m_number_type_isValid;

    m_number_value_isValid = ::OpenAPI::fromJsonValue(m_number_value, json[QString("numberValue")]);
    m_number_value_isSet = !json[QString("numberValue")].isNull() && m_number_value_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_pojo_isValid = ::OpenAPI::fromJsonValue(m_pojo, json[QString("pojo")]);
    m_pojo_isSet = !json[QString("pojo")].isNull() && m_pojo_isValid;

    m_text_value_isValid = ::OpenAPI::fromJsonValue(m_text_value, json[QString("textValue")]);
    m_text_value_isSet = !json[QString("textValue")].isNull() && m_text_value_isValid;

    m_textual_isValid = ::OpenAPI::fromJsonValue(m_textual, json[QString("textual")]);
    m_textual_isSet = !json[QString("textual")].isNull() && m_textual_isValid;

    m_value_as_boolean_isValid = ::OpenAPI::fromJsonValue(m_value_as_boolean, json[QString("valueAsBoolean")]);
    m_value_as_boolean_isSet = !json[QString("valueAsBoolean")].isNull() && m_value_as_boolean_isValid;

    m_value_as_double_isValid = ::OpenAPI::fromJsonValue(m_value_as_double, json[QString("valueAsDouble")]);
    m_value_as_double_isSet = !json[QString("valueAsDouble")].isNull() && m_value_as_double_isValid;

    m_value_as_int_isValid = ::OpenAPI::fromJsonValue(m_value_as_int, json[QString("valueAsInt")]);
    m_value_as_int_isSet = !json[QString("valueAsInt")].isNull() && m_value_as_int_isValid;

    m_value_as_long_isValid = ::OpenAPI::fromJsonValue(m_value_as_long, json[QString("valueAsLong")]);
    m_value_as_long_isSet = !json[QString("valueAsLong")].isNull() && m_value_as_long_isValid;

    m_value_as_text_isValid = ::OpenAPI::fromJsonValue(m_value_as_text, json[QString("valueAsText")]);
    m_value_as_text_isSet = !json[QString("valueAsText")].isNull() && m_value_as_text_isValid;

    m_value_node_isValid = ::OpenAPI::fromJsonValue(m_value_node, json[QString("valueNode")]);
    m_value_node_isSet = !json[QString("valueNode")].isNull() && m_value_node_isValid;
}

QString OAIJsonNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonNode::asJsonObject() const {
    QJsonObject obj;
    if (m_array_isSet) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_big_decimal_isSet) {
        obj.insert(QString("bigDecimal"), ::OpenAPI::toJsonValue(m_big_decimal));
    }
    if (m_big_integer_isSet) {
        obj.insert(QString("bigInteger"), ::OpenAPI::toJsonValue(m_big_integer));
    }
    if (m_big_integer_value_isSet) {
        obj.insert(QString("bigIntegerValue"), ::OpenAPI::toJsonValue(m_big_integer_value));
    }
    if (m_binary_isSet) {
        obj.insert(QString("binary"), ::OpenAPI::toJsonValue(m_binary));
    }
    if (m_binary_value.size() > 0) {
        obj.insert(QString("binaryValue"), ::OpenAPI::toJsonValue(m_binary_value));
    }
    if (m_boolean_isSet) {
        obj.insert(QString("boolean"), ::OpenAPI::toJsonValue(m_boolean));
    }
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_container_node_isSet) {
        obj.insert(QString("containerNode"), ::OpenAPI::toJsonValue(m_container_node));
    }
    if (m_decimal_value_isSet) {
        obj.insert(QString("decimalValue"), ::OpenAPI::toJsonValue(m_decimal_value));
    }
    if (m_r_double_isSet) {
        obj.insert(QString("double"), ::OpenAPI::toJsonValue(m_r_double));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_elements_isSet) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_field_names_isSet) {
        obj.insert(QString("fieldNames"), ::OpenAPI::toJsonValue(m_field_names));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_floating_point_number_isSet) {
        obj.insert(QString("floatingPointNumber"), ::OpenAPI::toJsonValue(m_floating_point_number));
    }
    if (m_r_int_isSet) {
        obj.insert(QString("int"), ::OpenAPI::toJsonValue(m_r_int));
    }
    if (m_int_value_isSet) {
        obj.insert(QString("intValue"), ::OpenAPI::toJsonValue(m_int_value));
    }
    if (m_integral_number_isSet) {
        obj.insert(QString("integralNumber"), ::OpenAPI::toJsonValue(m_integral_number));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_long_value_isSet) {
        obj.insert(QString("longValue"), ::OpenAPI::toJsonValue(m_long_value));
    }
    if (m_missing_node_isSet) {
        obj.insert(QString("missingNode"), ::OpenAPI::toJsonValue(m_missing_node));
    }
    if (m_null_isSet) {
        obj.insert(QString("null"), ::OpenAPI::toJsonValue(m_null));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_number_type_isSet) {
        obj.insert(QString("numberType"), ::OpenAPI::toJsonValue(m_number_type));
    }
    if (m_number_value_isSet) {
        obj.insert(QString("numberValue"), ::OpenAPI::toJsonValue(m_number_value));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_pojo_isSet) {
        obj.insert(QString("pojo"), ::OpenAPI::toJsonValue(m_pojo));
    }
    if (m_text_value_isSet) {
        obj.insert(QString("textValue"), ::OpenAPI::toJsonValue(m_text_value));
    }
    if (m_textual_isSet) {
        obj.insert(QString("textual"), ::OpenAPI::toJsonValue(m_textual));
    }
    if (m_value_as_boolean_isSet) {
        obj.insert(QString("valueAsBoolean"), ::OpenAPI::toJsonValue(m_value_as_boolean));
    }
    if (m_value_as_double_isSet) {
        obj.insert(QString("valueAsDouble"), ::OpenAPI::toJsonValue(m_value_as_double));
    }
    if (m_value_as_int_isSet) {
        obj.insert(QString("valueAsInt"), ::OpenAPI::toJsonValue(m_value_as_int));
    }
    if (m_value_as_long_isSet) {
        obj.insert(QString("valueAsLong"), ::OpenAPI::toJsonValue(m_value_as_long));
    }
    if (m_value_as_text_isSet) {
        obj.insert(QString("valueAsText"), ::OpenAPI::toJsonValue(m_value_as_text));
    }
    if (m_value_node_isSet) {
        obj.insert(QString("valueNode"), ::OpenAPI::toJsonValue(m_value_node));
    }
    return obj;
}

bool OAIJsonNode::isArray() const {
    return m_array;
}
void OAIJsonNode::setArray(const bool &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAIJsonNode::is_array_Set() const{
    return m_array_isSet;
}

bool OAIJsonNode::is_array_Valid() const{
    return m_array_isValid;
}

bool OAIJsonNode::isBigDecimal() const {
    return m_big_decimal;
}
void OAIJsonNode::setBigDecimal(const bool &big_decimal) {
    m_big_decimal = big_decimal;
    m_big_decimal_isSet = true;
}

bool OAIJsonNode::is_big_decimal_Set() const{
    return m_big_decimal_isSet;
}

bool OAIJsonNode::is_big_decimal_Valid() const{
    return m_big_decimal_isValid;
}

bool OAIJsonNode::isBigInteger() const {
    return m_big_integer;
}
void OAIJsonNode::setBigInteger(const bool &big_integer) {
    m_big_integer = big_integer;
    m_big_integer_isSet = true;
}

bool OAIJsonNode::is_big_integer_Set() const{
    return m_big_integer_isSet;
}

bool OAIJsonNode::is_big_integer_Valid() const{
    return m_big_integer_isValid;
}

qint32 OAIJsonNode::getBigIntegerValue() const {
    return m_big_integer_value;
}
void OAIJsonNode::setBigIntegerValue(const qint32 &big_integer_value) {
    m_big_integer_value = big_integer_value;
    m_big_integer_value_isSet = true;
}

bool OAIJsonNode::is_big_integer_value_Set() const{
    return m_big_integer_value_isSet;
}

bool OAIJsonNode::is_big_integer_value_Valid() const{
    return m_big_integer_value_isValid;
}

bool OAIJsonNode::isBinary() const {
    return m_binary;
}
void OAIJsonNode::setBinary(const bool &binary) {
    m_binary = binary;
    m_binary_isSet = true;
}

bool OAIJsonNode::is_binary_Set() const{
    return m_binary_isSet;
}

bool OAIJsonNode::is_binary_Valid() const{
    return m_binary_isValid;
}

QList<QByteArray> OAIJsonNode::getBinaryValue() const {
    return m_binary_value;
}
void OAIJsonNode::setBinaryValue(const QList<QByteArray> &binary_value) {
    m_binary_value = binary_value;
    m_binary_value_isSet = true;
}

bool OAIJsonNode::is_binary_value_Set() const{
    return m_binary_value_isSet;
}

bool OAIJsonNode::is_binary_value_Valid() const{
    return m_binary_value_isValid;
}

bool OAIJsonNode::isBoolean() const {
    return m_boolean;
}
void OAIJsonNode::setBoolean(const bool &boolean) {
    m_boolean = boolean;
    m_boolean_isSet = true;
}

bool OAIJsonNode::is_boolean_Set() const{
    return m_boolean_isSet;
}

bool OAIJsonNode::is_boolean_Valid() const{
    return m_boolean_isValid;
}

bool OAIJsonNode::isBooleanValue() const {
    return m_boolean_value;
}
void OAIJsonNode::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIJsonNode::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIJsonNode::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

bool OAIJsonNode::isContainerNode() const {
    return m_container_node;
}
void OAIJsonNode::setContainerNode(const bool &container_node) {
    m_container_node = container_node;
    m_container_node_isSet = true;
}

bool OAIJsonNode::is_container_node_Set() const{
    return m_container_node_isSet;
}

bool OAIJsonNode::is_container_node_Valid() const{
    return m_container_node_isValid;
}

double OAIJsonNode::getDecimalValue() const {
    return m_decimal_value;
}
void OAIJsonNode::setDecimalValue(const double &decimal_value) {
    m_decimal_value = decimal_value;
    m_decimal_value_isSet = true;
}

bool OAIJsonNode::is_decimal_value_Set() const{
    return m_decimal_value_isSet;
}

bool OAIJsonNode::is_decimal_value_Valid() const{
    return m_decimal_value_isValid;
}

bool OAIJsonNode::isRDouble() const {
    return m_r_double;
}
void OAIJsonNode::setRDouble(const bool &r_double) {
    m_r_double = r_double;
    m_r_double_isSet = true;
}

bool OAIJsonNode::is_r_double_Set() const{
    return m_r_double_isSet;
}

bool OAIJsonNode::is_r_double_Valid() const{
    return m_r_double_isValid;
}

double OAIJsonNode::getDoubleValue() const {
    return m_double_value;
}
void OAIJsonNode::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIJsonNode::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIJsonNode::is_double_value_Valid() const{
    return m_double_value_isValid;
}

OAIObject OAIJsonNode::getElements() const {
    return m_elements;
}
void OAIJsonNode::setElements(const OAIObject &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIJsonNode::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIJsonNode::is_elements_Valid() const{
    return m_elements_isValid;
}

OAIObject OAIJsonNode::getFieldNames() const {
    return m_field_names;
}
void OAIJsonNode::setFieldNames(const OAIObject &field_names) {
    m_field_names = field_names;
    m_field_names_isSet = true;
}

bool OAIJsonNode::is_field_names_Set() const{
    return m_field_names_isSet;
}

bool OAIJsonNode::is_field_names_Valid() const{
    return m_field_names_isValid;
}

OAIObject OAIJsonNode::getFields() const {
    return m_fields;
}
void OAIJsonNode::setFields(const OAIObject &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIJsonNode::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIJsonNode::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIJsonNode::isFloatingPointNumber() const {
    return m_floating_point_number;
}
void OAIJsonNode::setFloatingPointNumber(const bool &floating_point_number) {
    m_floating_point_number = floating_point_number;
    m_floating_point_number_isSet = true;
}

bool OAIJsonNode::is_floating_point_number_Set() const{
    return m_floating_point_number_isSet;
}

bool OAIJsonNode::is_floating_point_number_Valid() const{
    return m_floating_point_number_isValid;
}

bool OAIJsonNode::isRInt() const {
    return m_r_int;
}
void OAIJsonNode::setRInt(const bool &r_int) {
    m_r_int = r_int;
    m_r_int_isSet = true;
}

bool OAIJsonNode::is_r_int_Set() const{
    return m_r_int_isSet;
}

bool OAIJsonNode::is_r_int_Valid() const{
    return m_r_int_isValid;
}

qint32 OAIJsonNode::getIntValue() const {
    return m_int_value;
}
void OAIJsonNode::setIntValue(const qint32 &int_value) {
    m_int_value = int_value;
    m_int_value_isSet = true;
}

bool OAIJsonNode::is_int_value_Set() const{
    return m_int_value_isSet;
}

bool OAIJsonNode::is_int_value_Valid() const{
    return m_int_value_isValid;
}

bool OAIJsonNode::isIntegralNumber() const {
    return m_integral_number;
}
void OAIJsonNode::setIntegralNumber(const bool &integral_number) {
    m_integral_number = integral_number;
    m_integral_number_isSet = true;
}

bool OAIJsonNode::is_integral_number_Set() const{
    return m_integral_number_isSet;
}

bool OAIJsonNode::is_integral_number_Valid() const{
    return m_integral_number_isValid;
}

bool OAIJsonNode::isRLong() const {
    return m_r_long;
}
void OAIJsonNode::setRLong(const bool &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAIJsonNode::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIJsonNode::is_r_long_Valid() const{
    return m_r_long_isValid;
}

qint64 OAIJsonNode::getLongValue() const {
    return m_long_value;
}
void OAIJsonNode::setLongValue(const qint64 &long_value) {
    m_long_value = long_value;
    m_long_value_isSet = true;
}

bool OAIJsonNode::is_long_value_Set() const{
    return m_long_value_isSet;
}

bool OAIJsonNode::is_long_value_Valid() const{
    return m_long_value_isValid;
}

bool OAIJsonNode::isMissingNode() const {
    return m_missing_node;
}
void OAIJsonNode::setMissingNode(const bool &missing_node) {
    m_missing_node = missing_node;
    m_missing_node_isSet = true;
}

bool OAIJsonNode::is_missing_node_Set() const{
    return m_missing_node_isSet;
}

bool OAIJsonNode::is_missing_node_Valid() const{
    return m_missing_node_isValid;
}

bool OAIJsonNode::isNull() const {
    return m_null;
}
void OAIJsonNode::setNull(const bool &null) {
    m_null = null;
    m_null_isSet = true;
}

bool OAIJsonNode::is_null_Set() const{
    return m_null_isSet;
}

bool OAIJsonNode::is_null_Valid() const{
    return m_null_isValid;
}

bool OAIJsonNode::isNumber() const {
    return m_number;
}
void OAIJsonNode::setNumber(const bool &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIJsonNode::is_number_Set() const{
    return m_number_isSet;
}

bool OAIJsonNode::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIJsonNode::getNumberType() const {
    return m_number_type;
}
void OAIJsonNode::setNumberType(const QString &number_type) {
    m_number_type = number_type;
    m_number_type_isSet = true;
}

bool OAIJsonNode::is_number_type_Set() const{
    return m_number_type_isSet;
}

bool OAIJsonNode::is_number_type_Valid() const{
    return m_number_type_isValid;
}

double OAIJsonNode::getNumberValue() const {
    return m_number_value;
}
void OAIJsonNode::setNumberValue(const double &number_value) {
    m_number_value = number_value;
    m_number_value_isSet = true;
}

bool OAIJsonNode::is_number_value_Set() const{
    return m_number_value_isSet;
}

bool OAIJsonNode::is_number_value_Valid() const{
    return m_number_value_isValid;
}

bool OAIJsonNode::isObject() const {
    return m_object;
}
void OAIJsonNode::setObject(const bool &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIJsonNode::is_object_Set() const{
    return m_object_isSet;
}

bool OAIJsonNode::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIJsonNode::isPojo() const {
    return m_pojo;
}
void OAIJsonNode::setPojo(const bool &pojo) {
    m_pojo = pojo;
    m_pojo_isSet = true;
}

bool OAIJsonNode::is_pojo_Set() const{
    return m_pojo_isSet;
}

bool OAIJsonNode::is_pojo_Valid() const{
    return m_pojo_isValid;
}

QString OAIJsonNode::getTextValue() const {
    return m_text_value;
}
void OAIJsonNode::setTextValue(const QString &text_value) {
    m_text_value = text_value;
    m_text_value_isSet = true;
}

bool OAIJsonNode::is_text_value_Set() const{
    return m_text_value_isSet;
}

bool OAIJsonNode::is_text_value_Valid() const{
    return m_text_value_isValid;
}

bool OAIJsonNode::isTextual() const {
    return m_textual;
}
void OAIJsonNode::setTextual(const bool &textual) {
    m_textual = textual;
    m_textual_isSet = true;
}

bool OAIJsonNode::is_textual_Set() const{
    return m_textual_isSet;
}

bool OAIJsonNode::is_textual_Valid() const{
    return m_textual_isValid;
}

bool OAIJsonNode::isValueAsBoolean() const {
    return m_value_as_boolean;
}
void OAIJsonNode::setValueAsBoolean(const bool &value_as_boolean) {
    m_value_as_boolean = value_as_boolean;
    m_value_as_boolean_isSet = true;
}

bool OAIJsonNode::is_value_as_boolean_Set() const{
    return m_value_as_boolean_isSet;
}

bool OAIJsonNode::is_value_as_boolean_Valid() const{
    return m_value_as_boolean_isValid;
}

double OAIJsonNode::getValueAsDouble() const {
    return m_value_as_double;
}
void OAIJsonNode::setValueAsDouble(const double &value_as_double) {
    m_value_as_double = value_as_double;
    m_value_as_double_isSet = true;
}

bool OAIJsonNode::is_value_as_double_Set() const{
    return m_value_as_double_isSet;
}

bool OAIJsonNode::is_value_as_double_Valid() const{
    return m_value_as_double_isValid;
}

qint32 OAIJsonNode::getValueAsInt() const {
    return m_value_as_int;
}
void OAIJsonNode::setValueAsInt(const qint32 &value_as_int) {
    m_value_as_int = value_as_int;
    m_value_as_int_isSet = true;
}

bool OAIJsonNode::is_value_as_int_Set() const{
    return m_value_as_int_isSet;
}

bool OAIJsonNode::is_value_as_int_Valid() const{
    return m_value_as_int_isValid;
}

qint64 OAIJsonNode::getValueAsLong() const {
    return m_value_as_long;
}
void OAIJsonNode::setValueAsLong(const qint64 &value_as_long) {
    m_value_as_long = value_as_long;
    m_value_as_long_isSet = true;
}

bool OAIJsonNode::is_value_as_long_Set() const{
    return m_value_as_long_isSet;
}

bool OAIJsonNode::is_value_as_long_Valid() const{
    return m_value_as_long_isValid;
}

QString OAIJsonNode::getValueAsText() const {
    return m_value_as_text;
}
void OAIJsonNode::setValueAsText(const QString &value_as_text) {
    m_value_as_text = value_as_text;
    m_value_as_text_isSet = true;
}

bool OAIJsonNode::is_value_as_text_Set() const{
    return m_value_as_text_isSet;
}

bool OAIJsonNode::is_value_as_text_Valid() const{
    return m_value_as_text_isValid;
}

bool OAIJsonNode::isValueNode() const {
    return m_value_node;
}
void OAIJsonNode::setValueNode(const bool &value_node) {
    m_value_node = value_node;
    m_value_node_isSet = true;
}

bool OAIJsonNode::is_value_node_Set() const{
    return m_value_node_isSet;
}

bool OAIJsonNode::is_value_node_Valid() const{
    return m_value_node_isValid;
}

bool OAIJsonNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_big_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_big_integer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_big_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_double_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floating_point_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_int_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integral_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pojo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_textual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_boolean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_double_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_int_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_node_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
