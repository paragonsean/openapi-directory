/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchers::OAIWatchers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchers::OAIWatchers() {
    this->initializeModel();
}

OAIWatchers::~OAIWatchers() {}

void OAIWatchers::initializeModel() {

    m_is_watching_isSet = false;
    m_is_watching_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_watch_count_isSet = false;
    m_watch_count_isValid = false;

    m_watchers_isSet = false;
    m_watchers_isValid = false;
}

void OAIWatchers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchers::fromJsonObject(QJsonObject json) {

    m_is_watching_isValid = ::OpenAPI::fromJsonValue(m_is_watching, json[QString("isWatching")]);
    m_is_watching_isSet = !json[QString("isWatching")].isNull() && m_is_watching_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_watch_count_isValid = ::OpenAPI::fromJsonValue(m_watch_count, json[QString("watchCount")]);
    m_watch_count_isSet = !json[QString("watchCount")].isNull() && m_watch_count_isValid;

    m_watchers_isValid = ::OpenAPI::fromJsonValue(m_watchers, json[QString("watchers")]);
    m_watchers_isSet = !json[QString("watchers")].isNull() && m_watchers_isValid;
}

QString OAIWatchers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchers::asJsonObject() const {
    QJsonObject obj;
    if (m_is_watching_isSet) {
        obj.insert(QString("isWatching"), ::OpenAPI::toJsonValue(m_is_watching));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_watch_count_isSet) {
        obj.insert(QString("watchCount"), ::OpenAPI::toJsonValue(m_watch_count));
    }
    if (m_watchers.size() > 0) {
        obj.insert(QString("watchers"), ::OpenAPI::toJsonValue(m_watchers));
    }
    return obj;
}

bool OAIWatchers::isIsWatching() const {
    return m_is_watching;
}
void OAIWatchers::setIsWatching(const bool &is_watching) {
    m_is_watching = is_watching;
    m_is_watching_isSet = true;
}

bool OAIWatchers::is_is_watching_Set() const{
    return m_is_watching_isSet;
}

bool OAIWatchers::is_is_watching_Valid() const{
    return m_is_watching_isValid;
}

QString OAIWatchers::getSelf() const {
    return m_self;
}
void OAIWatchers::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIWatchers::is_self_Set() const{
    return m_self_isSet;
}

bool OAIWatchers::is_self_Valid() const{
    return m_self_isValid;
}

qint32 OAIWatchers::getWatchCount() const {
    return m_watch_count;
}
void OAIWatchers::setWatchCount(const qint32 &watch_count) {
    m_watch_count = watch_count;
    m_watch_count_isSet = true;
}

bool OAIWatchers::is_watch_count_Set() const{
    return m_watch_count_isSet;
}

bool OAIWatchers::is_watch_count_Valid() const{
    return m_watch_count_isValid;
}

QList<OAIUserDetails> OAIWatchers::getWatchers() const {
    return m_watchers;
}
void OAIWatchers::setWatchers(const QList<OAIUserDetails> &watchers) {
    m_watchers = watchers;
    m_watchers_isSet = true;
}

bool OAIWatchers::is_watchers_Set() const{
    return m_watchers_isSet;
}

bool OAIWatchers::is_watchers_Valid() const{
    return m_watchers_isValid;
}

bool OAIWatchers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_watching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
