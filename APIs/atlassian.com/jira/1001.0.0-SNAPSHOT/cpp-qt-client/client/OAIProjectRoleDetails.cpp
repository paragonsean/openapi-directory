/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectRoleDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectRoleDetails::OAIProjectRoleDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectRoleDetails::OAIProjectRoleDetails() {
    this->initializeModel();
}

OAIProjectRoleDetails::~OAIProjectRoleDetails() {}

void OAIProjectRoleDetails::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_configurable_isSet = false;
    m_role_configurable_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_translated_name_isSet = false;
    m_translated_name_isValid = false;
}

void OAIProjectRoleDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectRoleDetails::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_configurable_isValid = ::OpenAPI::fromJsonValue(m_role_configurable, json[QString("roleConfigurable")]);
    m_role_configurable_isSet = !json[QString("roleConfigurable")].isNull() && m_role_configurable_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_translated_name_isValid = ::OpenAPI::fromJsonValue(m_translated_name, json[QString("translatedName")]);
    m_translated_name_isSet = !json[QString("translatedName")].isNull() && m_translated_name_isValid;
}

QString OAIProjectRoleDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectRoleDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_configurable_isSet) {
        obj.insert(QString("roleConfigurable"), ::OpenAPI::toJsonValue(m_role_configurable));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_translated_name_isSet) {
        obj.insert(QString("translatedName"), ::OpenAPI::toJsonValue(m_translated_name));
    }
    return obj;
}

bool OAIProjectRoleDetails::isAdmin() const {
    return m_admin;
}
void OAIProjectRoleDetails::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIProjectRoleDetails::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIProjectRoleDetails::is_admin_Valid() const{
    return m_admin_isValid;
}

bool OAIProjectRoleDetails::isRDefault() const {
    return m_r_default;
}
void OAIProjectRoleDetails::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIProjectRoleDetails::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIProjectRoleDetails::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIProjectRoleDetails::getDescription() const {
    return m_description;
}
void OAIProjectRoleDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectRoleDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectRoleDetails::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIProjectRoleDetails::getId() const {
    return m_id;
}
void OAIProjectRoleDetails::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectRoleDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectRoleDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectRoleDetails::getName() const {
    return m_name;
}
void OAIProjectRoleDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectRoleDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectRoleDetails::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProjectRoleDetails::isRoleConfigurable() const {
    return m_role_configurable;
}
void OAIProjectRoleDetails::setRoleConfigurable(const bool &role_configurable) {
    m_role_configurable = role_configurable;
    m_role_configurable_isSet = true;
}

bool OAIProjectRoleDetails::is_role_configurable_Set() const{
    return m_role_configurable_isSet;
}

bool OAIProjectRoleDetails::is_role_configurable_Valid() const{
    return m_role_configurable_isValid;
}

OAIScope OAIProjectRoleDetails::getScope() const {
    return m_scope;
}
void OAIProjectRoleDetails::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIProjectRoleDetails::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIProjectRoleDetails::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIProjectRoleDetails::getSelf() const {
    return m_self;
}
void OAIProjectRoleDetails::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIProjectRoleDetails::is_self_Set() const{
    return m_self_isSet;
}

bool OAIProjectRoleDetails::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIProjectRoleDetails::getTranslatedName() const {
    return m_translated_name;
}
void OAIProjectRoleDetails::setTranslatedName(const QString &translated_name) {
    m_translated_name = translated_name;
    m_translated_name_isSet = true;
}

bool OAIProjectRoleDetails::is_translated_name_Set() const{
    return m_translated_name_isSet;
}

bool OAIProjectRoleDetails::is_translated_name_Valid() const{
    return m_translated_name_isValid;
}

bool OAIProjectRoleDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_configurable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectRoleDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
