/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJiraExpressionComplexity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJiraExpressionComplexity::OAIJiraExpressionComplexity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJiraExpressionComplexity::OAIJiraExpressionComplexity() {
    this->initializeModel();
}

OAIJiraExpressionComplexity::~OAIJiraExpressionComplexity() {}

void OAIJiraExpressionComplexity::initializeModel() {

    m_expensive_operations_isSet = false;
    m_expensive_operations_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAIJiraExpressionComplexity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJiraExpressionComplexity::fromJsonObject(QJsonObject json) {

    m_expensive_operations_isValid = ::OpenAPI::fromJsonValue(m_expensive_operations, json[QString("expensiveOperations")]);
    m_expensive_operations_isSet = !json[QString("expensiveOperations")].isNull() && m_expensive_operations_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAIJiraExpressionComplexity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJiraExpressionComplexity::asJsonObject() const {
    QJsonObject obj;
    if (m_expensive_operations_isSet) {
        obj.insert(QString("expensiveOperations"), ::OpenAPI::toJsonValue(m_expensive_operations));
    }
    if (m_variables.size() > 0) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

QString OAIJiraExpressionComplexity::getExpensiveOperations() const {
    return m_expensive_operations;
}
void OAIJiraExpressionComplexity::setExpensiveOperations(const QString &expensive_operations) {
    m_expensive_operations = expensive_operations;
    m_expensive_operations_isSet = true;
}

bool OAIJiraExpressionComplexity::is_expensive_operations_Set() const{
    return m_expensive_operations_isSet;
}

bool OAIJiraExpressionComplexity::is_expensive_operations_Valid() const{
    return m_expensive_operations_isValid;
}

QMap<QString, QString> OAIJiraExpressionComplexity::getVariables() const {
    return m_variables;
}
void OAIJiraExpressionComplexity::setVariables(const QMap<QString, QString> &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIJiraExpressionComplexity::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIJiraExpressionComplexity::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAIJiraExpressionComplexity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expensive_operations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJiraExpressionComplexity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expensive_operations_isValid && true;
}

} // namespace OpenAPI
