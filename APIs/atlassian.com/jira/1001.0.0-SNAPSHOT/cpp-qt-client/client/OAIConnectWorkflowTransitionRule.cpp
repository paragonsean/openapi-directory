/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectWorkflowTransitionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectWorkflowTransitionRule::OAIConnectWorkflowTransitionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectWorkflowTransitionRule::OAIConnectWorkflowTransitionRule() {
    this->initializeModel();
}

OAIConnectWorkflowTransitionRule::~OAIConnectWorkflowTransitionRule() {}

void OAIConnectWorkflowTransitionRule::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;
}

void OAIConnectWorkflowTransitionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectWorkflowTransitionRule::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("transition")]);
    m_transition_isSet = !json[QString("transition")].isNull() && m_transition_isValid;
}

QString OAIConnectWorkflowTransitionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectWorkflowTransitionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_transition.isSet()) {
        obj.insert(QString("transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    return obj;
}

OAIRuleConfiguration OAIConnectWorkflowTransitionRule::getConfiguration() const {
    return m_configuration;
}
void OAIConnectWorkflowTransitionRule::setConfiguration(const OAIRuleConfiguration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIConnectWorkflowTransitionRule::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIConnectWorkflowTransitionRule::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIConnectWorkflowTransitionRule::getId() const {
    return m_id;
}
void OAIConnectWorkflowTransitionRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectWorkflowTransitionRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectWorkflowTransitionRule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnectWorkflowTransitionRule::getKey() const {
    return m_key;
}
void OAIConnectWorkflowTransitionRule::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIConnectWorkflowTransitionRule::is_key_Set() const{
    return m_key_isSet;
}

bool OAIConnectWorkflowTransitionRule::is_key_Valid() const{
    return m_key_isValid;
}

OAIWorkflowTransition OAIConnectWorkflowTransitionRule::getTransition() const {
    return m_transition;
}
void OAIConnectWorkflowTransitionRule::setTransition(const OAIWorkflowTransition &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIConnectWorkflowTransitionRule::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIConnectWorkflowTransitionRule::is_transition_Valid() const{
    return m_transition_isValid;
}

bool OAIConnectWorkflowTransitionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectWorkflowTransitionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && m_id_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
