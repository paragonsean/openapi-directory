/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentArchive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentArchive::OAIAttachmentArchive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentArchive::OAIAttachmentArchive() {
    this->initializeModel();
}

OAIAttachmentArchive::~OAIAttachmentArchive() {}

void OAIAttachmentArchive::initializeModel() {

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_more_available_isSet = false;
    m_more_available_isValid = false;

    m_total_entry_count_isSet = false;
    m_total_entry_count_isValid = false;

    m_total_number_of_entries_available_isSet = false;
    m_total_number_of_entries_available_isValid = false;
}

void OAIAttachmentArchive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentArchive::fromJsonObject(QJsonObject json) {

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;

    m_more_available_isValid = ::OpenAPI::fromJsonValue(m_more_available, json[QString("moreAvailable")]);
    m_more_available_isSet = !json[QString("moreAvailable")].isNull() && m_more_available_isValid;

    m_total_entry_count_isValid = ::OpenAPI::fromJsonValue(m_total_entry_count, json[QString("totalEntryCount")]);
    m_total_entry_count_isSet = !json[QString("totalEntryCount")].isNull() && m_total_entry_count_isValid;

    m_total_number_of_entries_available_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_entries_available, json[QString("totalNumberOfEntriesAvailable")]);
    m_total_number_of_entries_available_isSet = !json[QString("totalNumberOfEntriesAvailable")].isNull() && m_total_number_of_entries_available_isValid;
}

QString OAIAttachmentArchive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentArchive::asJsonObject() const {
    QJsonObject obj;
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    if (m_more_available_isSet) {
        obj.insert(QString("moreAvailable"), ::OpenAPI::toJsonValue(m_more_available));
    }
    if (m_total_entry_count_isSet) {
        obj.insert(QString("totalEntryCount"), ::OpenAPI::toJsonValue(m_total_entry_count));
    }
    if (m_total_number_of_entries_available_isSet) {
        obj.insert(QString("totalNumberOfEntriesAvailable"), ::OpenAPI::toJsonValue(m_total_number_of_entries_available));
    }
    return obj;
}

QList<OAIAttachmentArchiveEntry> OAIAttachmentArchive::getEntries() const {
    return m_entries;
}
void OAIAttachmentArchive::setEntries(const QList<OAIAttachmentArchiveEntry> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIAttachmentArchive::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIAttachmentArchive::is_entries_Valid() const{
    return m_entries_isValid;
}

bool OAIAttachmentArchive::isMoreAvailable() const {
    return m_more_available;
}
void OAIAttachmentArchive::setMoreAvailable(const bool &more_available) {
    m_more_available = more_available;
    m_more_available_isSet = true;
}

bool OAIAttachmentArchive::is_more_available_Set() const{
    return m_more_available_isSet;
}

bool OAIAttachmentArchive::is_more_available_Valid() const{
    return m_more_available_isValid;
}

qint32 OAIAttachmentArchive::getTotalEntryCount() const {
    return m_total_entry_count;
}
void OAIAttachmentArchive::setTotalEntryCount(const qint32 &total_entry_count) {
    m_total_entry_count = total_entry_count;
    m_total_entry_count_isSet = true;
}

bool OAIAttachmentArchive::is_total_entry_count_Set() const{
    return m_total_entry_count_isSet;
}

bool OAIAttachmentArchive::is_total_entry_count_Valid() const{
    return m_total_entry_count_isValid;
}

qint32 OAIAttachmentArchive::getTotalNumberOfEntriesAvailable() const {
    return m_total_number_of_entries_available;
}
void OAIAttachmentArchive::setTotalNumberOfEntriesAvailable(const qint32 &total_number_of_entries_available) {
    m_total_number_of_entries_available = total_number_of_entries_available;
    m_total_number_of_entries_available_isSet = true;
}

bool OAIAttachmentArchive::is_total_number_of_entries_available_Set() const{
    return m_total_number_of_entries_available_isSet;
}

bool OAIAttachmentArchive::is_total_number_of_entries_available_Valid() const{
    return m_total_number_of_entries_available_isValid;
}

bool OAIAttachmentArchive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_entry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_entries_available_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentArchive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
