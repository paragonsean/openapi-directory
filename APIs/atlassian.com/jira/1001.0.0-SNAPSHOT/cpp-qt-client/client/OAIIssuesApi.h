/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssuesApi_H
#define OAI_OAIIssuesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatedIssue.h"
#include "OAICreatedIssues.h"
#include "OAIErrorCollection.h"
#include "OAIIssueBean.h"
#include "OAIIssueChangelogIds.h"
#include "OAIIssueCreateMetadata.h"
#include "OAIIssueEvent.h"
#include "OAIIssueUpdateDetails.h"
#include "OAIIssueUpdateMetadata.h"
#include "OAIIssuesUpdateBean.h"
#include "OAINotification.h"
#include "OAIPageBeanChangelog.h"
#include "OAIPageOfChangelogs.h"
#include "OAITransitions.h"
#include "OAIUser.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssuesApi : public QObject {
    Q_OBJECT

public:
    OAIIssuesApi(const int timeOut = 0);
    ~OAIIssuesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_user OAIUser [required]
    */
    virtual void assignIssue(const QString &issue_id_or_key, const OAIUser &oai_user);

    /**
    * @param[in]  oai_issue_update_details OAIIssueUpdateDetails [required]
    * @param[in]  update_history bool [optional]
    */
    virtual void createIssue(const OAIIssueUpdateDetails &oai_issue_update_details, const ::OpenAPI::OptionalParam<bool> &update_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_issues_update_bean OAIIssuesUpdateBean [required]
    */
    virtual void createIssues(const OAIIssuesUpdateBean &oai_issues_update_bean);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  delete_subtasks QString [optional]
    */
    virtual void deleteIssue(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &delete_subtasks = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_issue_update_details OAIIssueUpdateDetails [required]
    */
    virtual void doTransition(const QString &issue_id_or_key, const OAIIssueUpdateDetails &oai_issue_update_details);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_issue_update_details OAIIssueUpdateDetails [required]
    * @param[in]  notify_users bool [optional]
    * @param[in]  override_screen_security bool [optional]
    * @param[in]  override_editable_flag bool [optional]
    */
    virtual void editIssue(const QString &issue_id_or_key, const OAIIssueUpdateDetails &oai_issue_update_details, const ::OpenAPI::OptionalParam<bool> &notify_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &override_screen_security = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getChangeLogs(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_issue_changelog_ids OAIIssueChangelogIds [required]
    */
    virtual void getChangeLogsByIds(const QString &issue_id_or_key, const OAIIssueChangelogIds &oai_issue_changelog_ids);

    /**
    * @param[in]  project_ids QList<QString> [optional]
    * @param[in]  project_keys QList<QString> [optional]
    * @param[in]  issuetype_ids QList<QString> [optional]
    * @param[in]  issuetype_names QList<QString> [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getCreateIssueMeta(const ::OpenAPI::OptionalParam<QList<QString>> &project_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &project_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &issuetype_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &issuetype_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  override_screen_security bool [optional]
    * @param[in]  override_editable_flag bool [optional]
    */
    virtual void getEditIssueMeta(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<bool> &override_screen_security = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>());


    virtual void getEvents();

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  fields_by_keys bool [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  properties QList<QString> [optional]
    * @param[in]  update_history bool [optional]
    */
    virtual void getIssue(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &fields_by_keys = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &update_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  transition_id QString [optional]
    * @param[in]  skip_remote_only_condition bool [optional]
    * @param[in]  include_unavailable_transitions bool [optional]
    * @param[in]  sort_by_ops_bar_and_status bool [optional]
    */
    virtual void getTransitions(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transition_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_remote_only_condition = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_unavailable_transitions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_by_ops_bar_and_status = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_notification OAINotification [required]
    */
    virtual void notify(const QString &issue_id_or_key, const OAINotification &oai_notification);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignIssueCallback(OAIHttpRequestWorker *worker);
    void createIssueCallback(OAIHttpRequestWorker *worker);
    void createIssuesCallback(OAIHttpRequestWorker *worker);
    void deleteIssueCallback(OAIHttpRequestWorker *worker);
    void doTransitionCallback(OAIHttpRequestWorker *worker);
    void editIssueCallback(OAIHttpRequestWorker *worker);
    void getChangeLogsCallback(OAIHttpRequestWorker *worker);
    void getChangeLogsByIdsCallback(OAIHttpRequestWorker *worker);
    void getCreateIssueMetaCallback(OAIHttpRequestWorker *worker);
    void getEditIssueMetaCallback(OAIHttpRequestWorker *worker);
    void getEventsCallback(OAIHttpRequestWorker *worker);
    void getIssueCallback(OAIHttpRequestWorker *worker);
    void getTransitionsCallback(OAIHttpRequestWorker *worker);
    void notifyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignIssueSignal(QJsonValue summary);
    void createIssueSignal(OAICreatedIssue summary);
    void createIssuesSignal(OAICreatedIssues summary);
    void deleteIssueSignal();
    void doTransitionSignal(QJsonValue summary);
    void editIssueSignal(QJsonValue summary);
    void getChangeLogsSignal(OAIPageBeanChangelog summary);
    void getChangeLogsByIdsSignal(OAIPageOfChangelogs summary);
    void getCreateIssueMetaSignal(OAIIssueCreateMetadata summary);
    void getEditIssueMetaSignal(OAIIssueUpdateMetadata summary);
    void getEventsSignal(QList<OAIIssueEvent> summary);
    void getIssueSignal(OAIIssueBean summary);
    void getTransitionsSignal(OAITransitions summary);
    void notifySignal(QJsonValue summary);


    void assignIssueSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createIssueSignalFull(OAIHttpRequestWorker *worker, OAICreatedIssue summary);
    void createIssuesSignalFull(OAIHttpRequestWorker *worker, OAICreatedIssues summary);
    void deleteIssueSignalFull(OAIHttpRequestWorker *worker);
    void doTransitionSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void editIssueSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getChangeLogsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanChangelog summary);
    void getChangeLogsByIdsSignalFull(OAIHttpRequestWorker *worker, OAIPageOfChangelogs summary);
    void getCreateIssueMetaSignalFull(OAIHttpRequestWorker *worker, OAIIssueCreateMetadata summary);
    void getEditIssueMetaSignalFull(OAIHttpRequestWorker *worker, OAIIssueUpdateMetadata summary);
    void getEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssueEvent> summary);
    void getIssueSignalFull(OAIHttpRequestWorker *worker, OAIIssueBean summary);
    void getTransitionsSignalFull(OAIHttpRequestWorker *worker, OAITransitions summary);
    void notifySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use assignIssueSignalError() instead")
    void assignIssueSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignIssueSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueSignalError() instead")
    void createIssueSignalE(OAICreatedIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueSignalError(OAICreatedIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssuesSignalError() instead")
    void createIssuesSignalE(OAICreatedIssues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssuesSignalError(OAICreatedIssues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueSignalError() instead")
    void deleteIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doTransitionSignalError() instead")
    void doTransitionSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void doTransitionSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editIssueSignalError() instead")
    void editIssueSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editIssueSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeLogsSignalError() instead")
    void getChangeLogsSignalE(OAIPageBeanChangelog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeLogsSignalError(OAIPageBeanChangelog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeLogsByIdsSignalError() instead")
    void getChangeLogsByIdsSignalE(OAIPageOfChangelogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeLogsByIdsSignalError(OAIPageOfChangelogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreateIssueMetaSignalError() instead")
    void getCreateIssueMetaSignalE(OAIIssueCreateMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreateIssueMetaSignalError(OAIIssueCreateMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditIssueMetaSignalError() instead")
    void getEditIssueMetaSignalE(OAIIssueUpdateMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditIssueMetaSignalError(OAIIssueUpdateMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsSignalError() instead")
    void getEventsSignalE(QList<OAIIssueEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsSignalError(QList<OAIIssueEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSignalError() instead")
    void getIssueSignalE(OAIIssueBean summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSignalError(OAIIssueBean summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransitionsSignalError() instead")
    void getTransitionsSignalE(OAITransitions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransitionsSignalError(OAITransitions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifySignalError() instead")
    void notifySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignIssueSignalErrorFull() instead")
    void assignIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueSignalErrorFull() instead")
    void createIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssuesSignalErrorFull() instead")
    void createIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueSignalErrorFull() instead")
    void deleteIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doTransitionSignalErrorFull() instead")
    void doTransitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doTransitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editIssueSignalErrorFull() instead")
    void editIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeLogsSignalErrorFull() instead")
    void getChangeLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeLogsByIdsSignalErrorFull() instead")
    void getChangeLogsByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeLogsByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreateIssueMetaSignalErrorFull() instead")
    void getCreateIssueMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreateIssueMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditIssueMetaSignalErrorFull() instead")
    void getEditIssueMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditIssueMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsSignalErrorFull() instead")
    void getEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSignalErrorFull() instead")
    void getIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransitionsSignalErrorFull() instead")
    void getTransitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifySignalErrorFull() instead")
    void notifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
