/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJqlQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJqlQuery::OAIJqlQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJqlQuery::OAIJqlQuery() {
    this->initializeModel();
}

OAIJqlQuery::~OAIJqlQuery() {}

void OAIJqlQuery::initializeModel() {

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_where_isSet = false;
    m_where_isValid = false;
}

void OAIJqlQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJqlQuery::fromJsonObject(QJsonObject json) {

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_where_isValid = ::OpenAPI::fromJsonValue(m_where, json[QString("where")]);
    m_where_isSet = !json[QString("where")].isNull() && m_where_isValid;
}

QString OAIJqlQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJqlQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_order_by.isSet()) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_where.isSet()) {
        obj.insert(QString("where"), ::OpenAPI::toJsonValue(m_where));
    }
    return obj;
}

OAIJqlQueryOrderByClause OAIJqlQuery::getOrderBy() const {
    return m_order_by;
}
void OAIJqlQuery::setOrderBy(const OAIJqlQueryOrderByClause &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIJqlQuery::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIJqlQuery::is_order_by_Valid() const{
    return m_order_by_isValid;
}

OAIJqlQueryClause OAIJqlQuery::getWhere() const {
    return m_where;
}
void OAIJqlQuery::setWhere(const OAIJqlQueryClause &where) {
    m_where = where;
    m_where_isSet = true;
}

bool OAIJqlQuery::is_where_Set() const{
    return m_where_isSet;
}

bool OAIJqlQuery::is_where_Valid() const{
    return m_where_isValid;
}

bool OAIJqlQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_where.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJqlQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
