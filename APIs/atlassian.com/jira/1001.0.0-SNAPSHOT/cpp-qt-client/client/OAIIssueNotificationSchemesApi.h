/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueNotificationSchemesApi_H
#define OAI_OAIIssueNotificationSchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddNotificationsDetails.h"
#include "OAICreateNotificationSchemeDetails.h"
#include "OAIErrorCollection.h"
#include "OAINotificationScheme.h"
#include "OAINotificationSchemeId.h"
#include "OAIPageBeanNotificationScheme.h"
#include "OAIPageBeanNotificationSchemeAndProjectMappingJsonBean.h"
#include "OAIUpdateNotificationSchemeDetails.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueNotificationSchemesApi : public QObject {
    Q_OBJECT

public:
    OAIIssueNotificationSchemesApi(const int timeOut = 0);
    ~OAIIssueNotificationSchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_add_notifications_details OAIAddNotificationsDetails [required]
    */
    virtual void addNotifications(const QString &id, const OAIAddNotificationsDetails &oai_add_notifications_details);

    /**
    * @param[in]  oai_create_notification_scheme_details OAICreateNotificationSchemeDetails [required]
    */
    virtual void createNotificationScheme(const OAICreateNotificationSchemeDetails &oai_create_notification_scheme_details);

    /**
    * @param[in]  notification_scheme_id QString [required]
    */
    virtual void deleteNotificationScheme(const QString &notification_scheme_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getNotificationScheme(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  notification_scheme_id QSet<QString> [optional]
    * @param[in]  project_id QSet<QString> [optional]
    */
    virtual void getNotificationSchemeToProjectMappings(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &notification_scheme_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &project_id = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  start_at QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  id QSet<QString> [optional]
    * @param[in]  project_id QSet<QString> [optional]
    * @param[in]  only_default bool [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getNotificationSchemes(const ::OpenAPI::OptionalParam<QString> &start_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &project_id = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<bool> &only_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  notification_scheme_id QString [required]
    * @param[in]  notification_id QString [required]
    */
    virtual void removeNotificationFromNotificationScheme(const QString &notification_scheme_id, const QString &notification_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_notification_scheme_details OAIUpdateNotificationSchemeDetails [required]
    */
    virtual void updateNotificationScheme(const QString &id, const OAIUpdateNotificationSchemeDetails &oai_update_notification_scheme_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addNotificationsCallback(OAIHttpRequestWorker *worker);
    void createNotificationSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteNotificationSchemeCallback(OAIHttpRequestWorker *worker);
    void getNotificationSchemeCallback(OAIHttpRequestWorker *worker);
    void getNotificationSchemeToProjectMappingsCallback(OAIHttpRequestWorker *worker);
    void getNotificationSchemesCallback(OAIHttpRequestWorker *worker);
    void removeNotificationFromNotificationSchemeCallback(OAIHttpRequestWorker *worker);
    void updateNotificationSchemeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addNotificationsSignal(QJsonValue summary);
    void createNotificationSchemeSignal(OAINotificationSchemeId summary);
    void deleteNotificationSchemeSignal(QJsonValue summary);
    void getNotificationSchemeSignal(OAINotificationScheme summary);
    void getNotificationSchemeToProjectMappingsSignal(OAIPageBeanNotificationSchemeAndProjectMappingJsonBean summary);
    void getNotificationSchemesSignal(OAIPageBeanNotificationScheme summary);
    void removeNotificationFromNotificationSchemeSignal(QJsonValue summary);
    void updateNotificationSchemeSignal(QJsonValue summary);


    void addNotificationsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createNotificationSchemeSignalFull(OAIHttpRequestWorker *worker, OAINotificationSchemeId summary);
    void deleteNotificationSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNotificationSchemeSignalFull(OAIHttpRequestWorker *worker, OAINotificationScheme summary);
    void getNotificationSchemeToProjectMappingsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanNotificationSchemeAndProjectMappingJsonBean summary);
    void getNotificationSchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanNotificationScheme summary);
    void removeNotificationFromNotificationSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateNotificationSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use addNotificationsSignalError() instead")
    void addNotificationsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addNotificationsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNotificationSchemeSignalError() instead")
    void createNotificationSchemeSignalE(OAINotificationSchemeId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNotificationSchemeSignalError(OAINotificationSchemeId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationSchemeSignalError() instead")
    void deleteNotificationSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemeSignalError() instead")
    void getNotificationSchemeSignalE(OAINotificationScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemeSignalError(OAINotificationScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemeToProjectMappingsSignalError() instead")
    void getNotificationSchemeToProjectMappingsSignalE(OAIPageBeanNotificationSchemeAndProjectMappingJsonBean summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemeToProjectMappingsSignalError(OAIPageBeanNotificationSchemeAndProjectMappingJsonBean summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemesSignalError() instead")
    void getNotificationSchemesSignalE(OAIPageBeanNotificationScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemesSignalError(OAIPageBeanNotificationScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNotificationFromNotificationSchemeSignalError() instead")
    void removeNotificationFromNotificationSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNotificationFromNotificationSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationSchemeSignalError() instead")
    void updateNotificationSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addNotificationsSignalErrorFull() instead")
    void addNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNotificationSchemeSignalErrorFull() instead")
    void createNotificationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNotificationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationSchemeSignalErrorFull() instead")
    void deleteNotificationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemeSignalErrorFull() instead")
    void getNotificationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemeToProjectMappingsSignalErrorFull() instead")
    void getNotificationSchemeToProjectMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemeToProjectMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemesSignalErrorFull() instead")
    void getNotificationSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNotificationFromNotificationSchemeSignalErrorFull() instead")
    void removeNotificationFromNotificationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNotificationFromNotificationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationSchemeSignalErrorFull() instead")
    void updateNotificationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
