/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFields::OAIFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFields::OAIFields() {
    this->initializeModel();
}

OAIFields::~OAIFields() {}

void OAIFields::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_issue_type_isSet = false;
    m_issue_type_isValid = false;

    m_issuetype_isSet = false;
    m_issuetype_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_timetracking_isSet = false;
    m_timetracking_isValid = false;
}

void OAIFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFields::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_issue_type_isValid = ::OpenAPI::fromJsonValue(m_issue_type, json[QString("issueType")]);
    m_issue_type_isSet = !json[QString("issueType")].isNull() && m_issue_type_isValid;

    m_issuetype_isValid = ::OpenAPI::fromJsonValue(m_issuetype, json[QString("issuetype")]);
    m_issuetype_isSet = !json[QString("issuetype")].isNull() && m_issuetype_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_timetracking_isValid = ::OpenAPI::fromJsonValue(m_timetracking, json[QString("timetracking")]);
    m_timetracking_isSet = !json[QString("timetracking")].isNull() && m_timetracking_isValid;
}

QString OAIFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFields::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_issue_type.isSet()) {
        obj.insert(QString("issueType"), ::OpenAPI::toJsonValue(m_issue_type));
    }
    if (m_issuetype.isSet()) {
        obj.insert(QString("issuetype"), ::OpenAPI::toJsonValue(m_issuetype));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_timetracking.isSet()) {
        obj.insert(QString("timetracking"), ::OpenAPI::toJsonValue(m_timetracking));
    }
    return obj;
}

OAIUserDetails OAIFields::getAssignee() const {
    return m_assignee;
}
void OAIFields::setAssignee(const OAIUserDetails &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIFields::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIFields::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAIIssueTypeDetails OAIFields::getIssueType() const {
    return m_issue_type;
}
void OAIFields::setIssueType(const OAIIssueTypeDetails &issue_type) {
    m_issue_type = issue_type;
    m_issue_type_isSet = true;
}

bool OAIFields::is_issue_type_Set() const{
    return m_issue_type_isSet;
}

bool OAIFields::is_issue_type_Valid() const{
    return m_issue_type_isValid;
}

OAIIssueTypeDetails OAIFields::getIssuetype() const {
    return m_issuetype;
}
void OAIFields::setIssuetype(const OAIIssueTypeDetails &issuetype) {
    m_issuetype = issuetype;
    m_issuetype_isSet = true;
}

bool OAIFields::is_issuetype_Set() const{
    return m_issuetype_isSet;
}

bool OAIFields::is_issuetype_Valid() const{
    return m_issuetype_isValid;
}

OAIPriority OAIFields::getPriority() const {
    return m_priority;
}
void OAIFields::setPriority(const OAIPriority &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIFields::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIFields::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIStatusDetails OAIFields::getStatus() const {
    return m_status;
}
void OAIFields::setStatus(const OAIStatusDetails &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFields::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFields::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFields::getSummary() const {
    return m_summary;
}
void OAIFields::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIFields::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIFields::is_summary_Valid() const{
    return m_summary_isValid;
}

OAITimeTrackingDetails OAIFields::getTimetracking() const {
    return m_timetracking;
}
void OAIFields::setTimetracking(const OAITimeTrackingDetails &timetracking) {
    m_timetracking = timetracking;
    m_timetracking_isSet = true;
}

bool OAIFields::is_timetracking_Set() const{
    return m_timetracking_isSet;
}

bool OAIFields::is_timetracking_Valid() const{
    return m_timetracking_isValid;
}

bool OAIFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuetype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timetracking.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
