/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowRules::OAIWorkflowRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowRules::OAIWorkflowRules() {
    this->initializeModel();
}

OAIWorkflowRules::~OAIWorkflowRules() {}

void OAIWorkflowRules::initializeModel() {

    m_conditions_tree_isSet = false;
    m_conditions_tree_isValid = false;

    m_post_functions_isSet = false;
    m_post_functions_isValid = false;

    m_validators_isSet = false;
    m_validators_isValid = false;
}

void OAIWorkflowRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowRules::fromJsonObject(QJsonObject json) {

    m_conditions_tree_isValid = ::OpenAPI::fromJsonValue(m_conditions_tree, json[QString("conditionsTree")]);
    m_conditions_tree_isSet = !json[QString("conditionsTree")].isNull() && m_conditions_tree_isValid;

    m_post_functions_isValid = ::OpenAPI::fromJsonValue(m_post_functions, json[QString("postFunctions")]);
    m_post_functions_isSet = !json[QString("postFunctions")].isNull() && m_post_functions_isValid;

    m_validators_isValid = ::OpenAPI::fromJsonValue(m_validators, json[QString("validators")]);
    m_validators_isSet = !json[QString("validators")].isNull() && m_validators_isValid;
}

QString OAIWorkflowRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowRules::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions_tree.isSet()) {
        obj.insert(QString("conditionsTree"), ::OpenAPI::toJsonValue(m_conditions_tree));
    }
    if (m_post_functions.size() > 0) {
        obj.insert(QString("postFunctions"), ::OpenAPI::toJsonValue(m_post_functions));
    }
    if (m_validators.size() > 0) {
        obj.insert(QString("validators"), ::OpenAPI::toJsonValue(m_validators));
    }
    return obj;
}

OAIWorkflowCondition OAIWorkflowRules::getConditionsTree() const {
    return m_conditions_tree;
}
void OAIWorkflowRules::setConditionsTree(const OAIWorkflowCondition &conditions_tree) {
    m_conditions_tree = conditions_tree;
    m_conditions_tree_isSet = true;
}

bool OAIWorkflowRules::is_conditions_tree_Set() const{
    return m_conditions_tree_isSet;
}

bool OAIWorkflowRules::is_conditions_tree_Valid() const{
    return m_conditions_tree_isValid;
}

QList<OAIWorkflowTransitionRule> OAIWorkflowRules::getPostFunctions() const {
    return m_post_functions;
}
void OAIWorkflowRules::setPostFunctions(const QList<OAIWorkflowTransitionRule> &post_functions) {
    m_post_functions = post_functions;
    m_post_functions_isSet = true;
}

bool OAIWorkflowRules::is_post_functions_Set() const{
    return m_post_functions_isSet;
}

bool OAIWorkflowRules::is_post_functions_Valid() const{
    return m_post_functions_isValid;
}

QList<OAIWorkflowTransitionRule> OAIWorkflowRules::getValidators() const {
    return m_validators;
}
void OAIWorkflowRules::setValidators(const QList<OAIWorkflowTransitionRule> &validators) {
    m_validators = validators;
    m_validators_isSet = true;
}

bool OAIWorkflowRules::is_validators_Set() const{
    return m_validators_isSet;
}

bool OAIWorkflowRules::is_validators_Valid() const{
    return m_validators_isValid;
}

bool OAIWorkflowRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions_tree.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validators.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
