/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompoundClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompoundClause::OAICompoundClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompoundClause::OAICompoundClause() {
    this->initializeModel();
}

OAICompoundClause::~OAICompoundClause() {}

void OAICompoundClause::initializeModel() {

    m_clauses_isSet = false;
    m_clauses_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAICompoundClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompoundClause::fromJsonObject(QJsonObject json) {

    m_clauses_isValid = ::OpenAPI::fromJsonValue(m_clauses, json[QString("clauses")]);
    m_clauses_isSet = !json[QString("clauses")].isNull() && m_clauses_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAICompoundClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompoundClause::asJsonObject() const {
    QJsonObject obj;
    if (m_clauses.size() > 0) {
        obj.insert(QString("clauses"), ::OpenAPI::toJsonValue(m_clauses));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QList<OAIJqlQueryClause> OAICompoundClause::getClauses() const {
    return m_clauses;
}
void OAICompoundClause::setClauses(const QList<OAIJqlQueryClause> &clauses) {
    m_clauses = clauses;
    m_clauses_isSet = true;
}

bool OAICompoundClause::is_clauses_Set() const{
    return m_clauses_isSet;
}

bool OAICompoundClause::is_clauses_Valid() const{
    return m_clauses_isValid;
}

QString OAICompoundClause::getROperator() const {
    return m_r_operator;
}
void OAICompoundClause::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAICompoundClause::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAICompoundClause::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAICompoundClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clauses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompoundClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_clauses_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
