/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharePermissionInputBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharePermissionInputBean::OAISharePermissionInputBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharePermissionInputBean::OAISharePermissionInputBean() {
    this->initializeModel();
}

OAISharePermissionInputBean::~OAISharePermissionInputBean() {}

void OAISharePermissionInputBean::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_groupname_isSet = false;
    m_groupname_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_role_id_isSet = false;
    m_project_role_id_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISharePermissionInputBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharePermissionInputBean::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_groupname_isValid = ::OpenAPI::fromJsonValue(m_groupname, json[QString("groupname")]);
    m_groupname_isSet = !json[QString("groupname")].isNull() && m_groupname_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_role_id_isValid = ::OpenAPI::fromJsonValue(m_project_role_id, json[QString("projectRoleId")]);
    m_project_role_id_isSet = !json[QString("projectRoleId")].isNull() && m_project_role_id_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISharePermissionInputBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharePermissionInputBean::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_groupname_isSet) {
        obj.insert(QString("groupname"), ::OpenAPI::toJsonValue(m_groupname));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_role_id_isSet) {
        obj.insert(QString("projectRoleId"), ::OpenAPI::toJsonValue(m_project_role_id));
    }
    if (m_rights_isSet) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISharePermissionInputBean::getAccountId() const {
    return m_account_id;
}
void OAISharePermissionInputBean::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISharePermissionInputBean::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISharePermissionInputBean::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAISharePermissionInputBean::getGroupId() const {
    return m_group_id;
}
void OAISharePermissionInputBean::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAISharePermissionInputBean::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAISharePermissionInputBean::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAISharePermissionInputBean::getGroupname() const {
    return m_groupname;
}
void OAISharePermissionInputBean::setGroupname(const QString &groupname) {
    m_groupname = groupname;
    m_groupname_isSet = true;
}

bool OAISharePermissionInputBean::is_groupname_Set() const{
    return m_groupname_isSet;
}

bool OAISharePermissionInputBean::is_groupname_Valid() const{
    return m_groupname_isValid;
}

QString OAISharePermissionInputBean::getProjectId() const {
    return m_project_id;
}
void OAISharePermissionInputBean::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISharePermissionInputBean::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISharePermissionInputBean::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAISharePermissionInputBean::getProjectRoleId() const {
    return m_project_role_id;
}
void OAISharePermissionInputBean::setProjectRoleId(const QString &project_role_id) {
    m_project_role_id = project_role_id;
    m_project_role_id_isSet = true;
}

bool OAISharePermissionInputBean::is_project_role_id_Set() const{
    return m_project_role_id_isSet;
}

bool OAISharePermissionInputBean::is_project_role_id_Valid() const{
    return m_project_role_id_isValid;
}

qint32 OAISharePermissionInputBean::getRights() const {
    return m_rights;
}
void OAISharePermissionInputBean::setRights(const qint32 &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAISharePermissionInputBean::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAISharePermissionInputBean::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAISharePermissionInputBean::getType() const {
    return m_type;
}
void OAISharePermissionInputBean::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISharePermissionInputBean::is_type_Set() const{
    return m_type_isSet;
}

bool OAISharePermissionInputBean::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISharePermissionInputBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharePermissionInputBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
