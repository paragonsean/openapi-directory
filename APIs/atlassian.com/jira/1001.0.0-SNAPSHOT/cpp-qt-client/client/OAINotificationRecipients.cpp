/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationRecipients.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationRecipients::OAINotificationRecipients(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationRecipients::OAINotificationRecipients() {
    this->initializeModel();
}

OAINotificationRecipients::~OAINotificationRecipients() {}

void OAINotificationRecipients::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_reporter_isSet = false;
    m_reporter_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_voters_isSet = false;
    m_voters_isValid = false;

    m_watchers_isSet = false;
    m_watchers_isValid = false;
}

void OAINotificationRecipients::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationRecipients::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("groupIds")]);
    m_group_ids_isSet = !json[QString("groupIds")].isNull() && m_group_ids_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_reporter_isValid = ::OpenAPI::fromJsonValue(m_reporter, json[QString("reporter")]);
    m_reporter_isSet = !json[QString("reporter")].isNull() && m_reporter_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_voters_isValid = ::OpenAPI::fromJsonValue(m_voters, json[QString("voters")]);
    m_voters_isSet = !json[QString("voters")].isNull() && m_voters_isValid;

    m_watchers_isValid = ::OpenAPI::fromJsonValue(m_watchers, json[QString("watchers")]);
    m_watchers_isSet = !json[QString("watchers")].isNull() && m_watchers_isValid;
}

QString OAINotificationRecipients::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationRecipients::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee_isSet) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_group_ids.size() > 0) {
        obj.insert(QString("groupIds"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_reporter_isSet) {
        obj.insert(QString("reporter"), ::OpenAPI::toJsonValue(m_reporter));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_voters_isSet) {
        obj.insert(QString("voters"), ::OpenAPI::toJsonValue(m_voters));
    }
    if (m_watchers_isSet) {
        obj.insert(QString("watchers"), ::OpenAPI::toJsonValue(m_watchers));
    }
    return obj;
}

bool OAINotificationRecipients::isAssignee() const {
    return m_assignee;
}
void OAINotificationRecipients::setAssignee(const bool &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAINotificationRecipients::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAINotificationRecipients::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<QString> OAINotificationRecipients::getGroupIds() const {
    return m_group_ids;
}
void OAINotificationRecipients::setGroupIds(const QList<QString> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAINotificationRecipients::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAINotificationRecipients::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QList<OAIGroupName> OAINotificationRecipients::getGroups() const {
    return m_groups;
}
void OAINotificationRecipients::setGroups(const QList<OAIGroupName> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAINotificationRecipients::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAINotificationRecipients::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAINotificationRecipients::isReporter() const {
    return m_reporter;
}
void OAINotificationRecipients::setReporter(const bool &reporter) {
    m_reporter = reporter;
    m_reporter_isSet = true;
}

bool OAINotificationRecipients::is_reporter_Set() const{
    return m_reporter_isSet;
}

bool OAINotificationRecipients::is_reporter_Valid() const{
    return m_reporter_isValid;
}

QList<OAIUserDetails> OAINotificationRecipients::getUsers() const {
    return m_users;
}
void OAINotificationRecipients::setUsers(const QList<OAIUserDetails> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAINotificationRecipients::is_users_Set() const{
    return m_users_isSet;
}

bool OAINotificationRecipients::is_users_Valid() const{
    return m_users_isValid;
}

bool OAINotificationRecipients::isVoters() const {
    return m_voters;
}
void OAINotificationRecipients::setVoters(const bool &voters) {
    m_voters = voters;
    m_voters_isSet = true;
}

bool OAINotificationRecipients::is_voters_Set() const{
    return m_voters_isSet;
}

bool OAINotificationRecipients::is_voters_Valid() const{
    return m_voters_isValid;
}

bool OAINotificationRecipients::isWatchers() const {
    return m_watchers;
}
void OAINotificationRecipients::setWatchers(const bool &watchers) {
    m_watchers = watchers;
    m_watchers_isSet = true;
}

bool OAINotificationRecipients::is_watchers_Set() const{
    return m_watchers_isSet;
}

bool OAINotificationRecipients::is_watchers_Valid() const{
    return m_watchers_isValid;
}

bool OAINotificationRecipients::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_voters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationRecipients::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
