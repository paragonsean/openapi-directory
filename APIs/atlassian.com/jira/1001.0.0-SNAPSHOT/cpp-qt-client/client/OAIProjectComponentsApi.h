/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectComponentsApi_H
#define OAI_OAIProjectComponentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComponentIssuesCount.h"
#include "OAIPageBeanComponentWithIssueCount.h"
#include "OAIProjectComponent.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectComponentsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectComponentsApi(const int timeOut = 0);
    ~OAIProjectComponentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_project_component OAIProjectComponent [required]
    */
    virtual void createComponent(const OAIProjectComponent &oai_project_component);

    /**
    * @param[in]  id QString [required]
    * @param[in]  move_issues_to QString [optional]
    */
    virtual void deleteComponent(const QString &id, const ::OpenAPI::OptionalParam<QString> &move_issues_to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getComponent(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getComponentRelatedIssues(const QString &id);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void getProjectComponents(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  query QString [optional]
    */
    virtual void getProjectComponentsPaginated(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_project_component OAIProjectComponent [required]
    */
    virtual void updateComponent(const QString &id, const OAIProjectComponent &oai_project_component);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createComponentCallback(OAIHttpRequestWorker *worker);
    void deleteComponentCallback(OAIHttpRequestWorker *worker);
    void getComponentCallback(OAIHttpRequestWorker *worker);
    void getComponentRelatedIssuesCallback(OAIHttpRequestWorker *worker);
    void getProjectComponentsCallback(OAIHttpRequestWorker *worker);
    void getProjectComponentsPaginatedCallback(OAIHttpRequestWorker *worker);
    void updateComponentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createComponentSignal(OAIProjectComponent summary);
    void deleteComponentSignal();
    void getComponentSignal(OAIProjectComponent summary);
    void getComponentRelatedIssuesSignal(OAIComponentIssuesCount summary);
    void getProjectComponentsSignal(QList<OAIProjectComponent> summary);
    void getProjectComponentsPaginatedSignal(OAIPageBeanComponentWithIssueCount summary);
    void updateComponentSignal(OAIProjectComponent summary);


    void createComponentSignalFull(OAIHttpRequestWorker *worker, OAIProjectComponent summary);
    void deleteComponentSignalFull(OAIHttpRequestWorker *worker);
    void getComponentSignalFull(OAIHttpRequestWorker *worker, OAIProjectComponent summary);
    void getComponentRelatedIssuesSignalFull(OAIHttpRequestWorker *worker, OAIComponentIssuesCount summary);
    void getProjectComponentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectComponent> summary);
    void getProjectComponentsPaginatedSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanComponentWithIssueCount summary);
    void updateComponentSignalFull(OAIHttpRequestWorker *worker, OAIProjectComponent summary);

    Q_DECL_DEPRECATED_X("Use createComponentSignalError() instead")
    void createComponentSignalE(OAIProjectComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createComponentSignalError(OAIProjectComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteComponentSignalError() instead")
    void deleteComponentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteComponentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentSignalError() instead")
    void getComponentSignalE(OAIProjectComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentSignalError(OAIProjectComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentRelatedIssuesSignalError() instead")
    void getComponentRelatedIssuesSignalE(OAIComponentIssuesCount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentRelatedIssuesSignalError(OAIComponentIssuesCount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectComponentsSignalError() instead")
    void getProjectComponentsSignalE(QList<OAIProjectComponent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectComponentsSignalError(QList<OAIProjectComponent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectComponentsPaginatedSignalError() instead")
    void getProjectComponentsPaginatedSignalE(OAIPageBeanComponentWithIssueCount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectComponentsPaginatedSignalError(OAIPageBeanComponentWithIssueCount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateComponentSignalError() instead")
    void updateComponentSignalE(OAIProjectComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateComponentSignalError(OAIProjectComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createComponentSignalErrorFull() instead")
    void createComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteComponentSignalErrorFull() instead")
    void deleteComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentSignalErrorFull() instead")
    void getComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentRelatedIssuesSignalErrorFull() instead")
    void getComponentRelatedIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentRelatedIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectComponentsSignalErrorFull() instead")
    void getProjectComponentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectComponentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectComponentsPaginatedSignalErrorFull() instead")
    void getProjectComponentsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectComponentsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateComponentSignalErrorFull() instead")
    void updateComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
