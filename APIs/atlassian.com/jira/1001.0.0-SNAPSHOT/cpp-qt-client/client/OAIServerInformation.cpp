/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerInformation::OAIServerInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerInformation::OAIServerInformation() {
    this->initializeModel();
}

OAIServerInformation::~OAIServerInformation() {}

void OAIServerInformation::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_build_date_isSet = false;
    m_build_date_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_health_checks_isSet = false;
    m_health_checks_isValid = false;

    m_scm_info_isSet = false;
    m_scm_info_isValid = false;

    m_server_time_isSet = false;
    m_server_time_isValid = false;

    m_server_title_isSet = false;
    m_server_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_numbers_isSet = false;
    m_version_numbers_isValid = false;
}

void OAIServerInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerInformation::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_build_date_isValid = ::OpenAPI::fromJsonValue(m_build_date, json[QString("buildDate")]);
    m_build_date_isSet = !json[QString("buildDate")].isNull() && m_build_date_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("buildNumber")]);
    m_build_number_isSet = !json[QString("buildNumber")].isNull() && m_build_number_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("deploymentType")]);
    m_deployment_type_isSet = !json[QString("deploymentType")].isNull() && m_deployment_type_isValid;

    m_health_checks_isValid = ::OpenAPI::fromJsonValue(m_health_checks, json[QString("healthChecks")]);
    m_health_checks_isSet = !json[QString("healthChecks")].isNull() && m_health_checks_isValid;

    m_scm_info_isValid = ::OpenAPI::fromJsonValue(m_scm_info, json[QString("scmInfo")]);
    m_scm_info_isSet = !json[QString("scmInfo")].isNull() && m_scm_info_isValid;

    m_server_time_isValid = ::OpenAPI::fromJsonValue(m_server_time, json[QString("serverTime")]);
    m_server_time_isSet = !json[QString("serverTime")].isNull() && m_server_time_isValid;

    m_server_title_isValid = ::OpenAPI::fromJsonValue(m_server_title, json[QString("serverTitle")]);
    m_server_title_isSet = !json[QString("serverTitle")].isNull() && m_server_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_numbers_isValid = ::OpenAPI::fromJsonValue(m_version_numbers, json[QString("versionNumbers")]);
    m_version_numbers_isSet = !json[QString("versionNumbers")].isNull() && m_version_numbers_isValid;
}

QString OAIServerInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_build_date_isSet) {
        obj.insert(QString("buildDate"), ::OpenAPI::toJsonValue(m_build_date));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("buildNumber"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_deployment_type_isSet) {
        obj.insert(QString("deploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_health_checks.size() > 0) {
        obj.insert(QString("healthChecks"), ::OpenAPI::toJsonValue(m_health_checks));
    }
    if (m_scm_info_isSet) {
        obj.insert(QString("scmInfo"), ::OpenAPI::toJsonValue(m_scm_info));
    }
    if (m_server_time_isSet) {
        obj.insert(QString("serverTime"), ::OpenAPI::toJsonValue(m_server_time));
    }
    if (m_server_title_isSet) {
        obj.insert(QString("serverTitle"), ::OpenAPI::toJsonValue(m_server_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_numbers.size() > 0) {
        obj.insert(QString("versionNumbers"), ::OpenAPI::toJsonValue(m_version_numbers));
    }
    return obj;
}

QString OAIServerInformation::getBaseUrl() const {
    return m_base_url;
}
void OAIServerInformation::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIServerInformation::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIServerInformation::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QDateTime OAIServerInformation::getBuildDate() const {
    return m_build_date;
}
void OAIServerInformation::setBuildDate(const QDateTime &build_date) {
    m_build_date = build_date;
    m_build_date_isSet = true;
}

bool OAIServerInformation::is_build_date_Set() const{
    return m_build_date_isSet;
}

bool OAIServerInformation::is_build_date_Valid() const{
    return m_build_date_isValid;
}

qint32 OAIServerInformation::getBuildNumber() const {
    return m_build_number;
}
void OAIServerInformation::setBuildNumber(const qint32 &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIServerInformation::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIServerInformation::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QString OAIServerInformation::getDeploymentType() const {
    return m_deployment_type;
}
void OAIServerInformation::setDeploymentType(const QString &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAIServerInformation::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAIServerInformation::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

QList<OAIHealthCheckResult> OAIServerInformation::getHealthChecks() const {
    return m_health_checks;
}
void OAIServerInformation::setHealthChecks(const QList<OAIHealthCheckResult> &health_checks) {
    m_health_checks = health_checks;
    m_health_checks_isSet = true;
}

bool OAIServerInformation::is_health_checks_Set() const{
    return m_health_checks_isSet;
}

bool OAIServerInformation::is_health_checks_Valid() const{
    return m_health_checks_isValid;
}

QString OAIServerInformation::getScmInfo() const {
    return m_scm_info;
}
void OAIServerInformation::setScmInfo(const QString &scm_info) {
    m_scm_info = scm_info;
    m_scm_info_isSet = true;
}

bool OAIServerInformation::is_scm_info_Set() const{
    return m_scm_info_isSet;
}

bool OAIServerInformation::is_scm_info_Valid() const{
    return m_scm_info_isValid;
}

QDateTime OAIServerInformation::getServerTime() const {
    return m_server_time;
}
void OAIServerInformation::setServerTime(const QDateTime &server_time) {
    m_server_time = server_time;
    m_server_time_isSet = true;
}

bool OAIServerInformation::is_server_time_Set() const{
    return m_server_time_isSet;
}

bool OAIServerInformation::is_server_time_Valid() const{
    return m_server_time_isValid;
}

QString OAIServerInformation::getServerTitle() const {
    return m_server_title;
}
void OAIServerInformation::setServerTitle(const QString &server_title) {
    m_server_title = server_title;
    m_server_title_isSet = true;
}

bool OAIServerInformation::is_server_title_Set() const{
    return m_server_title_isSet;
}

bool OAIServerInformation::is_server_title_Valid() const{
    return m_server_title_isValid;
}

QString OAIServerInformation::getVersion() const {
    return m_version;
}
void OAIServerInformation::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServerInformation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServerInformation::is_version_Valid() const{
    return m_version_isValid;
}

QList<qint32> OAIServerInformation::getVersionNumbers() const {
    return m_version_numbers;
}
void OAIServerInformation::setVersionNumbers(const QList<qint32> &version_numbers) {
    m_version_numbers = version_numbers;
    m_version_numbers_isSet = true;
}

bool OAIServerInformation::is_version_numbers_Set() const{
    return m_version_numbers_isSet;
}

bool OAIServerInformation::is_version_numbers_Valid() const{
    return m_version_numbers_isValid;
}

bool OAIServerInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
