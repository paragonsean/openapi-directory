/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_archived_by_isSet = false;
    m_archived_by_isValid = false;

    m_archived_date_isSet = false;
    m_archived_date_isValid = false;

    m_assignee_type_isSet = false;
    m_assignee_type_isValid = false;

    m_avatar_urls_isSet = false;
    m_avatar_urls_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_deleted_by_isSet = false;
    m_deleted_by_isValid = false;

    m_deleted_date_isSet = false;
    m_deleted_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_favourite_isSet = false;
    m_favourite_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insight_isSet = false;
    m_insight_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_issue_type_hierarchy_isSet = false;
    m_issue_type_hierarchy_isValid = false;

    m_issue_types_isSet = false;
    m_issue_types_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_landing_page_info_isSet = false;
    m_landing_page_info_isValid = false;

    m_lead_isSet = false;
    m_lead_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_project_category_isSet = false;
    m_project_category_isValid = false;

    m_project_type_key_isSet = false;
    m_project_type_key_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_retention_till_date_isSet = false;
    m_retention_till_date_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_simplified_isSet = false;
    m_simplified_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_archived_by_isValid = ::OpenAPI::fromJsonValue(m_archived_by, json[QString("archivedBy")]);
    m_archived_by_isSet = !json[QString("archivedBy")].isNull() && m_archived_by_isValid;

    m_archived_date_isValid = ::OpenAPI::fromJsonValue(m_archived_date, json[QString("archivedDate")]);
    m_archived_date_isSet = !json[QString("archivedDate")].isNull() && m_archived_date_isValid;

    m_assignee_type_isValid = ::OpenAPI::fromJsonValue(m_assignee_type, json[QString("assigneeType")]);
    m_assignee_type_isSet = !json[QString("assigneeType")].isNull() && m_assignee_type_isValid;

    m_avatar_urls_isValid = ::OpenAPI::fromJsonValue(m_avatar_urls, json[QString("avatarUrls")]);
    m_avatar_urls_isSet = !json[QString("avatarUrls")].isNull() && m_avatar_urls_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_deleted_by_isValid = ::OpenAPI::fromJsonValue(m_deleted_by, json[QString("deletedBy")]);
    m_deleted_by_isSet = !json[QString("deletedBy")].isNull() && m_deleted_by_isValid;

    m_deleted_date_isValid = ::OpenAPI::fromJsonValue(m_deleted_date, json[QString("deletedDate")]);
    m_deleted_date_isSet = !json[QString("deletedDate")].isNull() && m_deleted_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_favourite_isValid = ::OpenAPI::fromJsonValue(m_favourite, json[QString("favourite")]);
    m_favourite_isSet = !json[QString("favourite")].isNull() && m_favourite_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insight_isValid = ::OpenAPI::fromJsonValue(m_insight, json[QString("insight")]);
    m_insight_isSet = !json[QString("insight")].isNull() && m_insight_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("isPrivate")]);
    m_is_private_isSet = !json[QString("isPrivate")].isNull() && m_is_private_isValid;

    m_issue_type_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_issue_type_hierarchy, json[QString("issueTypeHierarchy")]);
    m_issue_type_hierarchy_isSet = !json[QString("issueTypeHierarchy")].isNull() && m_issue_type_hierarchy_isValid;

    m_issue_types_isValid = ::OpenAPI::fromJsonValue(m_issue_types, json[QString("issueTypes")]);
    m_issue_types_isSet = !json[QString("issueTypes")].isNull() && m_issue_types_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_landing_page_info_isValid = ::OpenAPI::fromJsonValue(m_landing_page_info, json[QString("landingPageInfo")]);
    m_landing_page_info_isSet = !json[QString("landingPageInfo")].isNull() && m_landing_page_info_isValid;

    m_lead_isValid = ::OpenAPI::fromJsonValue(m_lead, json[QString("lead")]);
    m_lead_isSet = !json[QString("lead")].isNull() && m_lead_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_project_category_isValid = ::OpenAPI::fromJsonValue(m_project_category, json[QString("projectCategory")]);
    m_project_category_isSet = !json[QString("projectCategory")].isNull() && m_project_category_isValid;

    m_project_type_key_isValid = ::OpenAPI::fromJsonValue(m_project_type_key, json[QString("projectTypeKey")]);
    m_project_type_key_isSet = !json[QString("projectTypeKey")].isNull() && m_project_type_key_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_retention_till_date_isValid = ::OpenAPI::fromJsonValue(m_retention_till_date, json[QString("retentionTillDate")]);
    m_retention_till_date_isSet = !json[QString("retentionTillDate")].isNull() && m_retention_till_date_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_simplified_isValid = ::OpenAPI::fromJsonValue(m_simplified, json[QString("simplified")]);
    m_simplified_isSet = !json[QString("simplified")].isNull() && m_simplified_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_archived_by.isSet()) {
        obj.insert(QString("archivedBy"), ::OpenAPI::toJsonValue(m_archived_by));
    }
    if (m_archived_date_isSet) {
        obj.insert(QString("archivedDate"), ::OpenAPI::toJsonValue(m_archived_date));
    }
    if (m_assignee_type_isSet) {
        obj.insert(QString("assigneeType"), ::OpenAPI::toJsonValue(m_assignee_type));
    }
    if (m_avatar_urls.isSet()) {
        obj.insert(QString("avatarUrls"), ::OpenAPI::toJsonValue(m_avatar_urls));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_deleted_by.isSet()) {
        obj.insert(QString("deletedBy"), ::OpenAPI::toJsonValue(m_deleted_by));
    }
    if (m_deleted_date_isSet) {
        obj.insert(QString("deletedDate"), ::OpenAPI::toJsonValue(m_deleted_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_favourite_isSet) {
        obj.insert(QString("favourite"), ::OpenAPI::toJsonValue(m_favourite));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_insight.isSet()) {
        obj.insert(QString("insight"), ::OpenAPI::toJsonValue(m_insight));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("isPrivate"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_issue_type_hierarchy.isSet()) {
        obj.insert(QString("issueTypeHierarchy"), ::OpenAPI::toJsonValue(m_issue_type_hierarchy));
    }
    if (m_issue_types.size() > 0) {
        obj.insert(QString("issueTypes"), ::OpenAPI::toJsonValue(m_issue_types));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_landing_page_info.isSet()) {
        obj.insert(QString("landingPageInfo"), ::OpenAPI::toJsonValue(m_landing_page_info));
    }
    if (m_lead.isSet()) {
        obj.insert(QString("lead"), ::OpenAPI::toJsonValue(m_lead));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_project_category.isSet()) {
        obj.insert(QString("projectCategory"), ::OpenAPI::toJsonValue(m_project_category));
    }
    if (m_project_type_key_isSet) {
        obj.insert(QString("projectTypeKey"), ::OpenAPI::toJsonValue(m_project_type_key));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_retention_till_date_isSet) {
        obj.insert(QString("retentionTillDate"), ::OpenAPI::toJsonValue(m_retention_till_date));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_simplified_isSet) {
        obj.insert(QString("simplified"), ::OpenAPI::toJsonValue(m_simplified));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

bool OAIProject::isArchived() const {
    return m_archived;
}
void OAIProject::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIProject::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIProject::is_archived_Valid() const{
    return m_archived_isValid;
}

OAIUser OAIProject::getArchivedBy() const {
    return m_archived_by;
}
void OAIProject::setArchivedBy(const OAIUser &archived_by) {
    m_archived_by = archived_by;
    m_archived_by_isSet = true;
}

bool OAIProject::is_archived_by_Set() const{
    return m_archived_by_isSet;
}

bool OAIProject::is_archived_by_Valid() const{
    return m_archived_by_isValid;
}

QDateTime OAIProject::getArchivedDate() const {
    return m_archived_date;
}
void OAIProject::setArchivedDate(const QDateTime &archived_date) {
    m_archived_date = archived_date;
    m_archived_date_isSet = true;
}

bool OAIProject::is_archived_date_Set() const{
    return m_archived_date_isSet;
}

bool OAIProject::is_archived_date_Valid() const{
    return m_archived_date_isValid;
}

QString OAIProject::getAssigneeType() const {
    return m_assignee_type;
}
void OAIProject::setAssigneeType(const QString &assignee_type) {
    m_assignee_type = assignee_type;
    m_assignee_type_isSet = true;
}

bool OAIProject::is_assignee_type_Set() const{
    return m_assignee_type_isSet;
}

bool OAIProject::is_assignee_type_Valid() const{
    return m_assignee_type_isValid;
}

OAIAvatarUrlsBean OAIProject::getAvatarUrls() const {
    return m_avatar_urls;
}
void OAIProject::setAvatarUrls(const OAIAvatarUrlsBean &avatar_urls) {
    m_avatar_urls = avatar_urls;
    m_avatar_urls_isSet = true;
}

bool OAIProject::is_avatar_urls_Set() const{
    return m_avatar_urls_isSet;
}

bool OAIProject::is_avatar_urls_Valid() const{
    return m_avatar_urls_isValid;
}

QList<OAIProjectComponent> OAIProject::getComponents() const {
    return m_components;
}
void OAIProject::setComponents(const QList<OAIProjectComponent> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIProject::is_components_Set() const{
    return m_components_isSet;
}

bool OAIProject::is_components_Valid() const{
    return m_components_isValid;
}

bool OAIProject::isDeleted() const {
    return m_deleted;
}
void OAIProject::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIProject::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIProject::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIUser OAIProject::getDeletedBy() const {
    return m_deleted_by;
}
void OAIProject::setDeletedBy(const OAIUser &deleted_by) {
    m_deleted_by = deleted_by;
    m_deleted_by_isSet = true;
}

bool OAIProject::is_deleted_by_Set() const{
    return m_deleted_by_isSet;
}

bool OAIProject::is_deleted_by_Valid() const{
    return m_deleted_by_isValid;
}

QDateTime OAIProject::getDeletedDate() const {
    return m_deleted_date;
}
void OAIProject::setDeletedDate(const QDateTime &deleted_date) {
    m_deleted_date = deleted_date;
    m_deleted_date_isSet = true;
}

bool OAIProject::is_deleted_date_Set() const{
    return m_deleted_date_isSet;
}

bool OAIProject::is_deleted_date_Valid() const{
    return m_deleted_date_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProject::getEmail() const {
    return m_email;
}
void OAIProject::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIProject::is_email_Set() const{
    return m_email_isSet;
}

bool OAIProject::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIProject::getExpand() const {
    return m_expand;
}
void OAIProject::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIProject::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIProject::is_expand_Valid() const{
    return m_expand_isValid;
}

bool OAIProject::isFavourite() const {
    return m_favourite;
}
void OAIProject::setFavourite(const bool &favourite) {
    m_favourite = favourite;
    m_favourite_isSet = true;
}

bool OAIProject::is_favourite_Set() const{
    return m_favourite_isSet;
}

bool OAIProject::is_favourite_Valid() const{
    return m_favourite_isValid;
}

QString OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

OAIProjectInsight OAIProject::getInsight() const {
    return m_insight;
}
void OAIProject::setInsight(const OAIProjectInsight &insight) {
    m_insight = insight;
    m_insight_isSet = true;
}

bool OAIProject::is_insight_Set() const{
    return m_insight_isSet;
}

bool OAIProject::is_insight_Valid() const{
    return m_insight_isValid;
}

bool OAIProject::isIsPrivate() const {
    return m_is_private;
}
void OAIProject::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIProject::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIProject::is_is_private_Valid() const{
    return m_is_private_isValid;
}

OAIHierarchy OAIProject::getIssueTypeHierarchy() const {
    return m_issue_type_hierarchy;
}
void OAIProject::setIssueTypeHierarchy(const OAIHierarchy &issue_type_hierarchy) {
    m_issue_type_hierarchy = issue_type_hierarchy;
    m_issue_type_hierarchy_isSet = true;
}

bool OAIProject::is_issue_type_hierarchy_Set() const{
    return m_issue_type_hierarchy_isSet;
}

bool OAIProject::is_issue_type_hierarchy_Valid() const{
    return m_issue_type_hierarchy_isValid;
}

QList<OAIIssueTypeDetails> OAIProject::getIssueTypes() const {
    return m_issue_types;
}
void OAIProject::setIssueTypes(const QList<OAIIssueTypeDetails> &issue_types) {
    m_issue_types = issue_types;
    m_issue_types_isSet = true;
}

bool OAIProject::is_issue_types_Set() const{
    return m_issue_types_isSet;
}

bool OAIProject::is_issue_types_Valid() const{
    return m_issue_types_isValid;
}

QString OAIProject::getKey() const {
    return m_key;
}
void OAIProject::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIProject::is_key_Set() const{
    return m_key_isSet;
}

bool OAIProject::is_key_Valid() const{
    return m_key_isValid;
}

OAIProjectLandingPageInfo OAIProject::getLandingPageInfo() const {
    return m_landing_page_info;
}
void OAIProject::setLandingPageInfo(const OAIProjectLandingPageInfo &landing_page_info) {
    m_landing_page_info = landing_page_info;
    m_landing_page_info_isSet = true;
}

bool OAIProject::is_landing_page_info_Set() const{
    return m_landing_page_info_isSet;
}

bool OAIProject::is_landing_page_info_Valid() const{
    return m_landing_page_info_isValid;
}

OAIUser OAIProject::getLead() const {
    return m_lead;
}
void OAIProject::setLead(const OAIUser &lead) {
    m_lead = lead;
    m_lead_isSet = true;
}

bool OAIProject::is_lead_Set() const{
    return m_lead_isSet;
}

bool OAIProject::is_lead_Valid() const{
    return m_lead_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

OAIProjectPermissions OAIProject::getPermissions() const {
    return m_permissions;
}
void OAIProject::setPermissions(const OAIProjectPermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIProject::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIProject::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIProjectCategory OAIProject::getProjectCategory() const {
    return m_project_category;
}
void OAIProject::setProjectCategory(const OAIProjectCategory &project_category) {
    m_project_category = project_category;
    m_project_category_isSet = true;
}

bool OAIProject::is_project_category_Set() const{
    return m_project_category_isSet;
}

bool OAIProject::is_project_category_Valid() const{
    return m_project_category_isValid;
}

QString OAIProject::getProjectTypeKey() const {
    return m_project_type_key;
}
void OAIProject::setProjectTypeKey(const QString &project_type_key) {
    m_project_type_key = project_type_key;
    m_project_type_key_isSet = true;
}

bool OAIProject::is_project_type_key_Set() const{
    return m_project_type_key_isSet;
}

bool OAIProject::is_project_type_key_Valid() const{
    return m_project_type_key_isValid;
}

QMap<QString, QJsonValue> OAIProject::getProperties() const {
    return m_properties;
}
void OAIProject::setProperties(const QMap<QString, QJsonValue> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIProject::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIProject::is_properties_Valid() const{
    return m_properties_isValid;
}

QDateTime OAIProject::getRetentionTillDate() const {
    return m_retention_till_date;
}
void OAIProject::setRetentionTillDate(const QDateTime &retention_till_date) {
    m_retention_till_date = retention_till_date;
    m_retention_till_date_isSet = true;
}

bool OAIProject::is_retention_till_date_Set() const{
    return m_retention_till_date_isSet;
}

bool OAIProject::is_retention_till_date_Valid() const{
    return m_retention_till_date_isValid;
}

QMap<QString, QString> OAIProject::getRoles() const {
    return m_roles;
}
void OAIProject::setRoles(const QMap<QString, QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIProject::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIProject::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIProject::getSelf() const {
    return m_self;
}
void OAIProject::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIProject::is_self_Set() const{
    return m_self_isSet;
}

bool OAIProject::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIProject::isSimplified() const {
    return m_simplified;
}
void OAIProject::setSimplified(const bool &simplified) {
    m_simplified = simplified;
    m_simplified_isSet = true;
}

bool OAIProject::is_simplified_Set() const{
    return m_simplified_isSet;
}

bool OAIProject::is_simplified_Valid() const{
    return m_simplified_isValid;
}

QString OAIProject::getStyle() const {
    return m_style;
}
void OAIProject::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIProject::is_style_Set() const{
    return m_style_isSet;
}

bool OAIProject::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIProject::getUrl() const {
    return m_url;
}
void OAIProject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProject::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIProject::getUuid() const {
    return m_uuid;
}
void OAIProject::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIProject::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIProject::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QList<OAIVersion> OAIProject::getVersions() const {
    return m_versions;
}
void OAIProject::setVersions(const QList<OAIVersion> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIProject::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIProject::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type_hierarchy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landing_page_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_till_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simplified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
