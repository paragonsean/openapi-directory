/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldContextSingleUserPickerDefaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldContextSingleUserPickerDefaults::OAICustomFieldContextSingleUserPickerDefaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldContextSingleUserPickerDefaults::OAICustomFieldContextSingleUserPickerDefaults() {
    this->initializeModel();
}

OAICustomFieldContextSingleUserPickerDefaults::~OAICustomFieldContextSingleUserPickerDefaults() {}

void OAICustomFieldContextSingleUserPickerDefaults::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_filter_isSet = false;
    m_user_filter_isValid = false;
}

void OAICustomFieldContextSingleUserPickerDefaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldContextSingleUserPickerDefaults::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("contextId")]);
    m_context_id_isSet = !json[QString("contextId")].isNull() && m_context_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_filter_isValid = ::OpenAPI::fromJsonValue(m_user_filter, json[QString("userFilter")]);
    m_user_filter_isSet = !json[QString("userFilter")].isNull() && m_user_filter_isValid;
}

QString OAICustomFieldContextSingleUserPickerDefaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldContextSingleUserPickerDefaults::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_context_id_isSet) {
        obj.insert(QString("contextId"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_filter.isSet()) {
        obj.insert(QString("userFilter"), ::OpenAPI::toJsonValue(m_user_filter));
    }
    return obj;
}

QString OAICustomFieldContextSingleUserPickerDefaults::getAccountId() const {
    return m_account_id;
}
void OAICustomFieldContextSingleUserPickerDefaults::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICustomFieldContextSingleUserPickerDefaults::getContextId() const {
    return m_context_id;
}
void OAICustomFieldContextSingleUserPickerDefaults::setContextId(const QString &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_context_id_Valid() const{
    return m_context_id_isValid;
}

QString OAICustomFieldContextSingleUserPickerDefaults::getType() const {
    return m_type;
}
void OAICustomFieldContextSingleUserPickerDefaults::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserFilter OAICustomFieldContextSingleUserPickerDefaults::getUserFilter() const {
    return m_user_filter;
}
void OAICustomFieldContextSingleUserPickerDefaults::setUserFilter(const OAIUserFilter &user_filter) {
    m_user_filter = user_filter;
    m_user_filter_isSet = true;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_user_filter_Set() const{
    return m_user_filter_isSet;
}

bool OAICustomFieldContextSingleUserPickerDefaults::is_user_filter_Valid() const{
    return m_user_filter_isValid;
}

bool OAICustomFieldContextSingleUserPickerDefaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldContextSingleUserPickerDefaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_context_id_isValid && m_type_isValid && m_user_filter_isValid && true;
}

} // namespace OpenAPI
