/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTransition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTransition::OAIIssueTransition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTransition::OAIIssueTransition() {
    this->initializeModel();
}

OAIIssueTransition::~OAIIssueTransition() {}

void OAIIssueTransition::initializeModel() {

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_has_screen_isSet = false;
    m_has_screen_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_is_conditional_isSet = false;
    m_is_conditional_isValid = false;

    m_is_global_isSet = false;
    m_is_global_isValid = false;

    m_is_initial_isSet = false;
    m_is_initial_isValid = false;

    m_looped_isSet = false;
    m_looped_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIIssueTransition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTransition::fromJsonObject(QJsonObject json) {

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_has_screen_isValid = ::OpenAPI::fromJsonValue(m_has_screen, json[QString("hasScreen")]);
    m_has_screen_isSet = !json[QString("hasScreen")].isNull() && m_has_screen_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("isAvailable")]);
    m_is_available_isSet = !json[QString("isAvailable")].isNull() && m_is_available_isValid;

    m_is_conditional_isValid = ::OpenAPI::fromJsonValue(m_is_conditional, json[QString("isConditional")]);
    m_is_conditional_isSet = !json[QString("isConditional")].isNull() && m_is_conditional_isValid;

    m_is_global_isValid = ::OpenAPI::fromJsonValue(m_is_global, json[QString("isGlobal")]);
    m_is_global_isSet = !json[QString("isGlobal")].isNull() && m_is_global_isValid;

    m_is_initial_isValid = ::OpenAPI::fromJsonValue(m_is_initial, json[QString("isInitial")]);
    m_is_initial_isSet = !json[QString("isInitial")].isNull() && m_is_initial_isValid;

    m_looped_isValid = ::OpenAPI::fromJsonValue(m_looped, json[QString("looped")]);
    m_looped_isSet = !json[QString("looped")].isNull() && m_looped_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIIssueTransition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTransition::asJsonObject() const {
    QJsonObject obj;
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_has_screen_isSet) {
        obj.insert(QString("hasScreen"), ::OpenAPI::toJsonValue(m_has_screen));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("isAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_is_conditional_isSet) {
        obj.insert(QString("isConditional"), ::OpenAPI::toJsonValue(m_is_conditional));
    }
    if (m_is_global_isSet) {
        obj.insert(QString("isGlobal"), ::OpenAPI::toJsonValue(m_is_global));
    }
    if (m_is_initial_isSet) {
        obj.insert(QString("isInitial"), ::OpenAPI::toJsonValue(m_is_initial));
    }
    if (m_looped_isSet) {
        obj.insert(QString("looped"), ::OpenAPI::toJsonValue(m_looped));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIIssueTransition::getExpand() const {
    return m_expand;
}
void OAIIssueTransition::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIIssueTransition::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIIssueTransition::is_expand_Valid() const{
    return m_expand_isValid;
}

QMap<QString, OAIFieldMetadata> OAIIssueTransition::getFields() const {
    return m_fields;
}
void OAIIssueTransition::setFields(const QMap<QString, OAIFieldMetadata> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIIssueTransition::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIIssueTransition::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIIssueTransition::isHasScreen() const {
    return m_has_screen;
}
void OAIIssueTransition::setHasScreen(const bool &has_screen) {
    m_has_screen = has_screen;
    m_has_screen_isSet = true;
}

bool OAIIssueTransition::is_has_screen_Set() const{
    return m_has_screen_isSet;
}

bool OAIIssueTransition::is_has_screen_Valid() const{
    return m_has_screen_isValid;
}

QString OAIIssueTransition::getId() const {
    return m_id;
}
void OAIIssueTransition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueTransition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueTransition::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIIssueTransition::isIsAvailable() const {
    return m_is_available;
}
void OAIIssueTransition::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIIssueTransition::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIIssueTransition::is_is_available_Valid() const{
    return m_is_available_isValid;
}

bool OAIIssueTransition::isIsConditional() const {
    return m_is_conditional;
}
void OAIIssueTransition::setIsConditional(const bool &is_conditional) {
    m_is_conditional = is_conditional;
    m_is_conditional_isSet = true;
}

bool OAIIssueTransition::is_is_conditional_Set() const{
    return m_is_conditional_isSet;
}

bool OAIIssueTransition::is_is_conditional_Valid() const{
    return m_is_conditional_isValid;
}

bool OAIIssueTransition::isIsGlobal() const {
    return m_is_global;
}
void OAIIssueTransition::setIsGlobal(const bool &is_global) {
    m_is_global = is_global;
    m_is_global_isSet = true;
}

bool OAIIssueTransition::is_is_global_Set() const{
    return m_is_global_isSet;
}

bool OAIIssueTransition::is_is_global_Valid() const{
    return m_is_global_isValid;
}

bool OAIIssueTransition::isIsInitial() const {
    return m_is_initial;
}
void OAIIssueTransition::setIsInitial(const bool &is_initial) {
    m_is_initial = is_initial;
    m_is_initial_isSet = true;
}

bool OAIIssueTransition::is_is_initial_Set() const{
    return m_is_initial_isSet;
}

bool OAIIssueTransition::is_is_initial_Valid() const{
    return m_is_initial_isValid;
}

bool OAIIssueTransition::isLooped() const {
    return m_looped;
}
void OAIIssueTransition::setLooped(const bool &looped) {
    m_looped = looped;
    m_looped_isSet = true;
}

bool OAIIssueTransition::is_looped_Set() const{
    return m_looped_isSet;
}

bool OAIIssueTransition::is_looped_Valid() const{
    return m_looped_isValid;
}

QString OAIIssueTransition::getName() const {
    return m_name;
}
void OAIIssueTransition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIssueTransition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIssueTransition::is_name_Valid() const{
    return m_name_isValid;
}

OAIStatusDetails OAIIssueTransition::getTo() const {
    return m_to;
}
void OAIIssueTransition::setTo(const OAIStatusDetails &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIIssueTransition::is_to_Set() const{
    return m_to_isSet;
}

bool OAIIssueTransition::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIIssueTransition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_conditional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_initial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTransition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
