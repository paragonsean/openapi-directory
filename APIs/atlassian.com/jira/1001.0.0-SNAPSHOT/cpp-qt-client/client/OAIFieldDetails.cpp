/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldDetails::OAIFieldDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldDetails::OAIFieldDetails() {
    this->initializeModel();
}

OAIFieldDetails::~OAIFieldDetails() {}

void OAIFieldDetails::initializeModel() {

    m_clause_names_isSet = false;
    m_clause_names_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_navigable_isSet = false;
    m_navigable_isValid = false;

    m_orderable_isSet = false;
    m_orderable_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_searchable_isSet = false;
    m_searchable_isValid = false;
}

void OAIFieldDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldDetails::fromJsonObject(QJsonObject json) {

    m_clause_names_isValid = ::OpenAPI::fromJsonValue(m_clause_names, json[QString("clauseNames")]);
    m_clause_names_isSet = !json[QString("clauseNames")].isNull() && m_clause_names_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_navigable_isValid = ::OpenAPI::fromJsonValue(m_navigable, json[QString("navigable")]);
    m_navigable_isSet = !json[QString("navigable")].isNull() && m_navigable_isValid;

    m_orderable_isValid = ::OpenAPI::fromJsonValue(m_orderable, json[QString("orderable")]);
    m_orderable_isSet = !json[QString("orderable")].isNull() && m_orderable_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_searchable_isValid = ::OpenAPI::fromJsonValue(m_searchable, json[QString("searchable")]);
    m_searchable_isSet = !json[QString("searchable")].isNull() && m_searchable_isValid;
}

QString OAIFieldDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_clause_names.size() > 0) {
        obj.insert(QString("clauseNames"), ::OpenAPI::toJsonValue(m_clause_names));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_navigable_isSet) {
        obj.insert(QString("navigable"), ::OpenAPI::toJsonValue(m_navigable));
    }
    if (m_orderable_isSet) {
        obj.insert(QString("orderable"), ::OpenAPI::toJsonValue(m_orderable));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_searchable_isSet) {
        obj.insert(QString("searchable"), ::OpenAPI::toJsonValue(m_searchable));
    }
    return obj;
}

QSet<QString> OAIFieldDetails::getClauseNames() const {
    return m_clause_names;
}
void OAIFieldDetails::setClauseNames(const QSet<QString> &clause_names) {
    m_clause_names = clause_names;
    m_clause_names_isSet = true;
}

bool OAIFieldDetails::is_clause_names_Set() const{
    return m_clause_names_isSet;
}

bool OAIFieldDetails::is_clause_names_Valid() const{
    return m_clause_names_isValid;
}

bool OAIFieldDetails::isCustom() const {
    return m_custom;
}
void OAIFieldDetails::setCustom(const bool &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIFieldDetails::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIFieldDetails::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAIFieldDetails::getId() const {
    return m_id;
}
void OAIFieldDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFieldDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFieldDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFieldDetails::getKey() const {
    return m_key;
}
void OAIFieldDetails::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFieldDetails::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFieldDetails::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFieldDetails::getName() const {
    return m_name;
}
void OAIFieldDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFieldDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFieldDetails::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFieldDetails::isNavigable() const {
    return m_navigable;
}
void OAIFieldDetails::setNavigable(const bool &navigable) {
    m_navigable = navigable;
    m_navigable_isSet = true;
}

bool OAIFieldDetails::is_navigable_Set() const{
    return m_navigable_isSet;
}

bool OAIFieldDetails::is_navigable_Valid() const{
    return m_navigable_isValid;
}

bool OAIFieldDetails::isOrderable() const {
    return m_orderable;
}
void OAIFieldDetails::setOrderable(const bool &orderable) {
    m_orderable = orderable;
    m_orderable_isSet = true;
}

bool OAIFieldDetails::is_orderable_Set() const{
    return m_orderable_isSet;
}

bool OAIFieldDetails::is_orderable_Valid() const{
    return m_orderable_isValid;
}

OAIJsonTypeBean OAIFieldDetails::getSchema() const {
    return m_schema;
}
void OAIFieldDetails::setSchema(const OAIJsonTypeBean &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIFieldDetails::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIFieldDetails::is_schema_Valid() const{
    return m_schema_isValid;
}

OAIScope OAIFieldDetails::getScope() const {
    return m_scope;
}
void OAIFieldDetails::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIFieldDetails::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIFieldDetails::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIFieldDetails::isSearchable() const {
    return m_searchable;
}
void OAIFieldDetails::setSearchable(const bool &searchable) {
    m_searchable = searchable;
    m_searchable_isSet = true;
}

bool OAIFieldDetails::is_searchable_Set() const{
    return m_searchable_isSet;
}

bool OAIFieldDetails::is_searchable_Valid() const{
    return m_searchable_isValid;
}

bool OAIFieldDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clause_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
