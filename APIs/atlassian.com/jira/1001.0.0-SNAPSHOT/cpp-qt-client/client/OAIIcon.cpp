/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIcon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIcon::OAIIcon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIcon::OAIIcon() {
    this->initializeModel();
}

OAIIcon::~OAIIcon() {}

void OAIIcon::initializeModel() {

    m_link_isSet = false;
    m_link_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url16x16_isSet = false;
    m_url16x16_isValid = false;
}

void OAIIcon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIcon::fromJsonObject(QJsonObject json) {

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url16x16_isValid = ::OpenAPI::fromJsonValue(m_url16x16, json[QString("url16x16")]);
    m_url16x16_isSet = !json[QString("url16x16")].isNull() && m_url16x16_isValid;
}

QString OAIIcon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIcon::asJsonObject() const {
    QJsonObject obj;
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url16x16_isSet) {
        obj.insert(QString("url16x16"), ::OpenAPI::toJsonValue(m_url16x16));
    }
    return obj;
}

QString OAIIcon::getLink() const {
    return m_link;
}
void OAIIcon::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIIcon::is_link_Set() const{
    return m_link_isSet;
}

bool OAIIcon::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIIcon::getTitle() const {
    return m_title;
}
void OAIIcon::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIcon::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIcon::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIIcon::getUrl16x16() const {
    return m_url16x16;
}
void OAIIcon::setUrl16x16(const QString &url16x16) {
    m_url16x16 = url16x16;
    m_url16x16_isSet = true;
}

bool OAIIcon::is_url16x16_Set() const{
    return m_url16x16_isSet;
}

bool OAIIcon::is_url16x16_Valid() const{
    return m_url16x16_isValid;
}

bool OAIIcon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url16x16_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIcon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
