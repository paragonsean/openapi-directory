/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterSubscription::OAIFilterSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterSubscription::OAIFilterSubscription() {
    this->initializeModel();
}

OAIFilterSubscription::~OAIFilterSubscription() {}

void OAIFilterSubscription::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIFilterSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterSubscription::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIFilterSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIGroupName OAIFilterSubscription::getGroup() const {
    return m_group;
}
void OAIFilterSubscription::setGroup(const OAIGroupName &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFilterSubscription::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFilterSubscription::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIFilterSubscription::getId() const {
    return m_id;
}
void OAIFilterSubscription::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFilterSubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFilterSubscription::is_id_Valid() const{
    return m_id_isValid;
}

OAIUser OAIFilterSubscription::getUser() const {
    return m_user;
}
void OAIFilterSubscription::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIFilterSubscription::is_user_Set() const{
    return m_user_isSet;
}

bool OAIFilterSubscription::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIFilterSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
