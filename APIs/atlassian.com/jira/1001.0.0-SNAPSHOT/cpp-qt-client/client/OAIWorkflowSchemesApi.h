/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowSchemesApi_H
#define OAI_OAIWorkflowSchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultWorkflow.h"
#include "OAIIssueTypeWorkflowMapping.h"
#include "OAIIssueTypesWorkflowMapping.h"
#include "OAIPageBeanWorkflowScheme.h"
#include "OAIWorkflowScheme.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowSchemesApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowSchemesApi(const int timeOut = 0);
    ~OAIWorkflowSchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_workflow_scheme OAIWorkflowScheme [required]
    */
    virtual void createWorkflowScheme(const OAIWorkflowScheme &oai_workflow_scheme);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  update_draft_if_needed bool [optional]
    */
    virtual void deleteDefaultWorkflow(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &update_draft_if_needed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  update_draft_if_needed bool [optional]
    */
    virtual void deleteWorkflowMapping(const qint64 &id, const QString &workflow_name, const ::OpenAPI::OptionalParam<bool> &update_draft_if_needed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteWorkflowScheme(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  issue_type QString [required]
    * @param[in]  update_draft_if_needed bool [optional]
    */
    virtual void deleteWorkflowSchemeIssueType(const qint64 &id, const QString &issue_type, const ::OpenAPI::OptionalParam<bool> &update_draft_if_needed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getAllWorkflowSchemes(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getDefaultWorkflow(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getWorkflow(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getWorkflowScheme(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  issue_type QString [required]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getWorkflowSchemeIssueType(const qint64 &id, const QString &issue_type, const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  issue_type QString [required]
    * @param[in]  oai_issue_type_workflow_mapping OAIIssueTypeWorkflowMapping [required]
    */
    virtual void setWorkflowSchemeIssueType(const qint64 &id, const QString &issue_type, const OAIIssueTypeWorkflowMapping &oai_issue_type_workflow_mapping);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_default_workflow OAIDefaultWorkflow [required]
    */
    virtual void updateDefaultWorkflow(const qint64 &id, const OAIDefaultWorkflow &oai_default_workflow);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  oai_issue_types_workflow_mapping OAIIssueTypesWorkflowMapping [required]
    */
    virtual void updateWorkflowMapping(const qint64 &id, const QString &workflow_name, const OAIIssueTypesWorkflowMapping &oai_issue_types_workflow_mapping);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_workflow_scheme OAIWorkflowScheme [required]
    */
    virtual void updateWorkflowScheme(const qint64 &id, const OAIWorkflowScheme &oai_workflow_scheme);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkflowSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteDefaultWorkflowCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeIssueTypeCallback(OAIHttpRequestWorker *worker);
    void getAllWorkflowSchemesCallback(OAIHttpRequestWorker *worker);
    void getDefaultWorkflowCallback(OAIHttpRequestWorker *worker);
    void getWorkflowCallback(OAIHttpRequestWorker *worker);
    void getWorkflowSchemeCallback(OAIHttpRequestWorker *worker);
    void getWorkflowSchemeIssueTypeCallback(OAIHttpRequestWorker *worker);
    void setWorkflowSchemeIssueTypeCallback(OAIHttpRequestWorker *worker);
    void updateDefaultWorkflowCallback(OAIHttpRequestWorker *worker);
    void updateWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void updateWorkflowSchemeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkflowSchemeSignal(OAIWorkflowScheme summary);
    void deleteDefaultWorkflowSignal(OAIWorkflowScheme summary);
    void deleteWorkflowMappingSignal();
    void deleteWorkflowSchemeSignal(QJsonValue summary);
    void deleteWorkflowSchemeIssueTypeSignal(OAIWorkflowScheme summary);
    void getAllWorkflowSchemesSignal(OAIPageBeanWorkflowScheme summary);
    void getDefaultWorkflowSignal(OAIDefaultWorkflow summary);
    void getWorkflowSignal(OAIIssueTypesWorkflowMapping summary);
    void getWorkflowSchemeSignal(OAIWorkflowScheme summary);
    void getWorkflowSchemeIssueTypeSignal(OAIIssueTypeWorkflowMapping summary);
    void setWorkflowSchemeIssueTypeSignal(OAIWorkflowScheme summary);
    void updateDefaultWorkflowSignal(OAIWorkflowScheme summary);
    void updateWorkflowMappingSignal(OAIWorkflowScheme summary);
    void updateWorkflowSchemeSignal(OAIWorkflowScheme summary);


    void createWorkflowSchemeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void deleteDefaultWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void deleteWorkflowMappingSignalFull(OAIHttpRequestWorker *worker);
    void deleteWorkflowSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteWorkflowSchemeIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void getAllWorkflowSchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanWorkflowScheme summary);
    void getDefaultWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIDefaultWorkflow summary);
    void getWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypesWorkflowMapping summary);
    void getWorkflowSchemeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void getWorkflowSchemeIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeWorkflowMapping summary);
    void setWorkflowSchemeIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void updateDefaultWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void updateWorkflowMappingSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);
    void updateWorkflowSchemeSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowScheme summary);

    Q_DECL_DEPRECATED_X("Use createWorkflowSchemeSignalError() instead")
    void createWorkflowSchemeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSchemeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultWorkflowSignalError() instead")
    void deleteDefaultWorkflowSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultWorkflowSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowMappingSignalError() instead")
    void deleteWorkflowMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeSignalError() instead")
    void deleteWorkflowSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeIssueTypeSignalError() instead")
    void deleteWorkflowSchemeIssueTypeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeIssueTypeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowSchemesSignalError() instead")
    void getAllWorkflowSchemesSignalE(OAIPageBeanWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowSchemesSignalError(OAIPageBeanWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultWorkflowSignalError() instead")
    void getDefaultWorkflowSignalE(OAIDefaultWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultWorkflowSignalError(OAIDefaultWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSignalError() instead")
    void getWorkflowSignalE(OAIIssueTypesWorkflowMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSignalError(OAIIssueTypesWorkflowMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeSignalError() instead")
    void getWorkflowSchemeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeIssueTypeSignalError() instead")
    void getWorkflowSchemeIssueTypeSignalE(OAIIssueTypeWorkflowMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeIssueTypeSignalError(OAIIssueTypeWorkflowMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWorkflowSchemeIssueTypeSignalError() instead")
    void setWorkflowSchemeIssueTypeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setWorkflowSchemeIssueTypeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultWorkflowSignalError() instead")
    void updateDefaultWorkflowSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultWorkflowSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowMappingSignalError() instead")
    void updateWorkflowMappingSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowMappingSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSchemeSignalError() instead")
    void updateWorkflowSchemeSignalE(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSchemeSignalError(OAIWorkflowScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkflowSchemeSignalErrorFull() instead")
    void createWorkflowSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultWorkflowSignalErrorFull() instead")
    void deleteDefaultWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowMappingSignalErrorFull() instead")
    void deleteWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeSignalErrorFull() instead")
    void deleteWorkflowSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSchemeIssueTypeSignalErrorFull() instead")
    void deleteWorkflowSchemeIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSchemeIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowSchemesSignalErrorFull() instead")
    void getAllWorkflowSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultWorkflowSignalErrorFull() instead")
    void getDefaultWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSignalErrorFull() instead")
    void getWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeSignalErrorFull() instead")
    void getWorkflowSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSchemeIssueTypeSignalErrorFull() instead")
    void getWorkflowSchemeIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSchemeIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWorkflowSchemeIssueTypeSignalErrorFull() instead")
    void setWorkflowSchemeIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setWorkflowSchemeIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultWorkflowSignalErrorFull() instead")
    void updateDefaultWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowMappingSignalErrorFull() instead")
    void updateWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSchemeSignalErrorFull() instead")
    void updateWorkflowSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
