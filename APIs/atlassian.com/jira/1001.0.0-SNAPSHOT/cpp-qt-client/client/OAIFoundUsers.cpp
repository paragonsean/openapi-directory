/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoundUsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFoundUsers::OAIFoundUsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFoundUsers::OAIFoundUsers() {
    this->initializeModel();
}

OAIFoundUsers::~OAIFoundUsers() {}

void OAIFoundUsers::initializeModel() {

    m_header_isSet = false;
    m_header_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIFoundUsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFoundUsers::fromJsonObject(QJsonObject json) {

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIFoundUsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFoundUsers::asJsonObject() const {
    QJsonObject obj;
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIFoundUsers::getHeader() const {
    return m_header;
}
void OAIFoundUsers::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIFoundUsers::is_header_Set() const{
    return m_header_isSet;
}

bool OAIFoundUsers::is_header_Valid() const{
    return m_header_isValid;
}

qint32 OAIFoundUsers::getTotal() const {
    return m_total;
}
void OAIFoundUsers::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIFoundUsers::is_total_Set() const{
    return m_total_isSet;
}

bool OAIFoundUsers::is_total_Valid() const{
    return m_total_isValid;
}

QList<OAIUserPickerUser> OAIFoundUsers::getUsers() const {
    return m_users;
}
void OAIFoundUsers::setUsers(const QList<OAIUserPickerUser> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIFoundUsers::is_users_Set() const{
    return m_users_isSet;
}

bool OAIFoundUsers::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIFoundUsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFoundUsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
