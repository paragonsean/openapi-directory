/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeTrackingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeTrackingDetails::OAITimeTrackingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeTrackingDetails::OAITimeTrackingDetails() {
    this->initializeModel();
}

OAITimeTrackingDetails::~OAITimeTrackingDetails() {}

void OAITimeTrackingDetails::initializeModel() {

    m_original_estimate_isSet = false;
    m_original_estimate_isValid = false;

    m_original_estimate_seconds_isSet = false;
    m_original_estimate_seconds_isValid = false;

    m_remaining_estimate_isSet = false;
    m_remaining_estimate_isValid = false;

    m_remaining_estimate_seconds_isSet = false;
    m_remaining_estimate_seconds_isValid = false;

    m_time_spent_isSet = false;
    m_time_spent_isValid = false;

    m_time_spent_seconds_isSet = false;
    m_time_spent_seconds_isValid = false;
}

void OAITimeTrackingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeTrackingDetails::fromJsonObject(QJsonObject json) {

    m_original_estimate_isValid = ::OpenAPI::fromJsonValue(m_original_estimate, json[QString("originalEstimate")]);
    m_original_estimate_isSet = !json[QString("originalEstimate")].isNull() && m_original_estimate_isValid;

    m_original_estimate_seconds_isValid = ::OpenAPI::fromJsonValue(m_original_estimate_seconds, json[QString("originalEstimateSeconds")]);
    m_original_estimate_seconds_isSet = !json[QString("originalEstimateSeconds")].isNull() && m_original_estimate_seconds_isValid;

    m_remaining_estimate_isValid = ::OpenAPI::fromJsonValue(m_remaining_estimate, json[QString("remainingEstimate")]);
    m_remaining_estimate_isSet = !json[QString("remainingEstimate")].isNull() && m_remaining_estimate_isValid;

    m_remaining_estimate_seconds_isValid = ::OpenAPI::fromJsonValue(m_remaining_estimate_seconds, json[QString("remainingEstimateSeconds")]);
    m_remaining_estimate_seconds_isSet = !json[QString("remainingEstimateSeconds")].isNull() && m_remaining_estimate_seconds_isValid;

    m_time_spent_isValid = ::OpenAPI::fromJsonValue(m_time_spent, json[QString("timeSpent")]);
    m_time_spent_isSet = !json[QString("timeSpent")].isNull() && m_time_spent_isValid;

    m_time_spent_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_spent_seconds, json[QString("timeSpentSeconds")]);
    m_time_spent_seconds_isSet = !json[QString("timeSpentSeconds")].isNull() && m_time_spent_seconds_isValid;
}

QString OAITimeTrackingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeTrackingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_original_estimate_isSet) {
        obj.insert(QString("originalEstimate"), ::OpenAPI::toJsonValue(m_original_estimate));
    }
    if (m_original_estimate_seconds_isSet) {
        obj.insert(QString("originalEstimateSeconds"), ::OpenAPI::toJsonValue(m_original_estimate_seconds));
    }
    if (m_remaining_estimate_isSet) {
        obj.insert(QString("remainingEstimate"), ::OpenAPI::toJsonValue(m_remaining_estimate));
    }
    if (m_remaining_estimate_seconds_isSet) {
        obj.insert(QString("remainingEstimateSeconds"), ::OpenAPI::toJsonValue(m_remaining_estimate_seconds));
    }
    if (m_time_spent_isSet) {
        obj.insert(QString("timeSpent"), ::OpenAPI::toJsonValue(m_time_spent));
    }
    if (m_time_spent_seconds_isSet) {
        obj.insert(QString("timeSpentSeconds"), ::OpenAPI::toJsonValue(m_time_spent_seconds));
    }
    return obj;
}

QString OAITimeTrackingDetails::getOriginalEstimate() const {
    return m_original_estimate;
}
void OAITimeTrackingDetails::setOriginalEstimate(const QString &original_estimate) {
    m_original_estimate = original_estimate;
    m_original_estimate_isSet = true;
}

bool OAITimeTrackingDetails::is_original_estimate_Set() const{
    return m_original_estimate_isSet;
}

bool OAITimeTrackingDetails::is_original_estimate_Valid() const{
    return m_original_estimate_isValid;
}

qint64 OAITimeTrackingDetails::getOriginalEstimateSeconds() const {
    return m_original_estimate_seconds;
}
void OAITimeTrackingDetails::setOriginalEstimateSeconds(const qint64 &original_estimate_seconds) {
    m_original_estimate_seconds = original_estimate_seconds;
    m_original_estimate_seconds_isSet = true;
}

bool OAITimeTrackingDetails::is_original_estimate_seconds_Set() const{
    return m_original_estimate_seconds_isSet;
}

bool OAITimeTrackingDetails::is_original_estimate_seconds_Valid() const{
    return m_original_estimate_seconds_isValid;
}

QString OAITimeTrackingDetails::getRemainingEstimate() const {
    return m_remaining_estimate;
}
void OAITimeTrackingDetails::setRemainingEstimate(const QString &remaining_estimate) {
    m_remaining_estimate = remaining_estimate;
    m_remaining_estimate_isSet = true;
}

bool OAITimeTrackingDetails::is_remaining_estimate_Set() const{
    return m_remaining_estimate_isSet;
}

bool OAITimeTrackingDetails::is_remaining_estimate_Valid() const{
    return m_remaining_estimate_isValid;
}

qint64 OAITimeTrackingDetails::getRemainingEstimateSeconds() const {
    return m_remaining_estimate_seconds;
}
void OAITimeTrackingDetails::setRemainingEstimateSeconds(const qint64 &remaining_estimate_seconds) {
    m_remaining_estimate_seconds = remaining_estimate_seconds;
    m_remaining_estimate_seconds_isSet = true;
}

bool OAITimeTrackingDetails::is_remaining_estimate_seconds_Set() const{
    return m_remaining_estimate_seconds_isSet;
}

bool OAITimeTrackingDetails::is_remaining_estimate_seconds_Valid() const{
    return m_remaining_estimate_seconds_isValid;
}

QString OAITimeTrackingDetails::getTimeSpent() const {
    return m_time_spent;
}
void OAITimeTrackingDetails::setTimeSpent(const QString &time_spent) {
    m_time_spent = time_spent;
    m_time_spent_isSet = true;
}

bool OAITimeTrackingDetails::is_time_spent_Set() const{
    return m_time_spent_isSet;
}

bool OAITimeTrackingDetails::is_time_spent_Valid() const{
    return m_time_spent_isValid;
}

qint64 OAITimeTrackingDetails::getTimeSpentSeconds() const {
    return m_time_spent_seconds;
}
void OAITimeTrackingDetails::setTimeSpentSeconds(const qint64 &time_spent_seconds) {
    m_time_spent_seconds = time_spent_seconds;
    m_time_spent_seconds_isSet = true;
}

bool OAITimeTrackingDetails::is_time_spent_seconds_Set() const{
    return m_time_spent_seconds_isSet;
}

bool OAITimeTrackingDetails::is_time_spent_seconds_Valid() const{
    return m_time_spent_seconds_isValid;
}

bool OAITimeTrackingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_estimate_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_estimate_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_spent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_spent_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeTrackingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
