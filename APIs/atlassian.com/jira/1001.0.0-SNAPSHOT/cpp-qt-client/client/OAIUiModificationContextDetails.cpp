/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUiModificationContextDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUiModificationContextDetails::OAIUiModificationContextDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUiModificationContextDetails::OAIUiModificationContextDetails() {
    this->initializeModel();
}

OAIUiModificationContextDetails::~OAIUiModificationContextDetails() {}

void OAIUiModificationContextDetails::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_issue_type_id_isSet = false;
    m_issue_type_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_view_type_isSet = false;
    m_view_type_isValid = false;
}

void OAIUiModificationContextDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUiModificationContextDetails::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("isAvailable")]);
    m_is_available_isSet = !json[QString("isAvailable")].isNull() && m_is_available_isValid;

    m_issue_type_id_isValid = ::OpenAPI::fromJsonValue(m_issue_type_id, json[QString("issueTypeId")]);
    m_issue_type_id_isSet = !json[QString("issueTypeId")].isNull() && m_issue_type_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_view_type_isValid = ::OpenAPI::fromJsonValue(m_view_type, json[QString("viewType")]);
    m_view_type_isSet = !json[QString("viewType")].isNull() && m_view_type_isValid;
}

QString OAIUiModificationContextDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUiModificationContextDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("isAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_issue_type_id_isSet) {
        obj.insert(QString("issueTypeId"), ::OpenAPI::toJsonValue(m_issue_type_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_view_type_isSet) {
        obj.insert(QString("viewType"), ::OpenAPI::toJsonValue(m_view_type));
    }
    return obj;
}

QString OAIUiModificationContextDetails::getId() const {
    return m_id;
}
void OAIUiModificationContextDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUiModificationContextDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUiModificationContextDetails::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUiModificationContextDetails::isIsAvailable() const {
    return m_is_available;
}
void OAIUiModificationContextDetails::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIUiModificationContextDetails::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIUiModificationContextDetails::is_is_available_Valid() const{
    return m_is_available_isValid;
}

QString OAIUiModificationContextDetails::getIssueTypeId() const {
    return m_issue_type_id;
}
void OAIUiModificationContextDetails::setIssueTypeId(const QString &issue_type_id) {
    m_issue_type_id = issue_type_id;
    m_issue_type_id_isSet = true;
}

bool OAIUiModificationContextDetails::is_issue_type_id_Set() const{
    return m_issue_type_id_isSet;
}

bool OAIUiModificationContextDetails::is_issue_type_id_Valid() const{
    return m_issue_type_id_isValid;
}

QString OAIUiModificationContextDetails::getProjectId() const {
    return m_project_id;
}
void OAIUiModificationContextDetails::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIUiModificationContextDetails::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIUiModificationContextDetails::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIUiModificationContextDetails::getViewType() const {
    return m_view_type;
}
void OAIUiModificationContextDetails::setViewType(const QString &view_type) {
    m_view_type = view_type;
    m_view_type_isSet = true;
}

bool OAIUiModificationContextDetails::is_view_type_Set() const{
    return m_view_type_isSet;
}

bool OAIUiModificationContextDetails::is_view_type_Valid() const{
    return m_view_type_isValid;
}

bool OAIUiModificationContextDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUiModificationContextDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_issue_type_id_isValid && m_project_id_isValid && m_view_type_isValid && true;
}

} // namespace OpenAPI
