/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldContextDefaultValueSingleVersionPicker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldContextDefaultValueSingleVersionPicker::OAICustomFieldContextDefaultValueSingleVersionPicker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldContextDefaultValueSingleVersionPicker::OAICustomFieldContextDefaultValueSingleVersionPicker() {
    this->initializeModel();
}

OAICustomFieldContextDefaultValueSingleVersionPicker::~OAICustomFieldContextDefaultValueSingleVersionPicker() {}

void OAICustomFieldContextDefaultValueSingleVersionPicker::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_version_order_isSet = false;
    m_version_order_isValid = false;
}

void OAICustomFieldContextDefaultValueSingleVersionPicker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldContextDefaultValueSingleVersionPicker::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_version_order_isValid = ::OpenAPI::fromJsonValue(m_version_order, json[QString("versionOrder")]);
    m_version_order_isSet = !json[QString("versionOrder")].isNull() && m_version_order_isValid;
}

QString OAICustomFieldContextDefaultValueSingleVersionPicker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldContextDefaultValueSingleVersionPicker::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_version_order_isSet) {
        obj.insert(QString("versionOrder"), ::OpenAPI::toJsonValue(m_version_order));
    }
    return obj;
}

QString OAICustomFieldContextDefaultValueSingleVersionPicker::getType() const {
    return m_type;
}
void OAICustomFieldContextDefaultValueSingleVersionPicker::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICustomFieldContextDefaultValueSingleVersionPicker::getVersionId() const {
    return m_version_id;
}
void OAICustomFieldContextDefaultValueSingleVersionPicker::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAICustomFieldContextDefaultValueSingleVersionPicker::getVersionOrder() const {
    return m_version_order;
}
void OAICustomFieldContextDefaultValueSingleVersionPicker::setVersionOrder(const QString &version_order) {
    m_version_order = version_order;
    m_version_order_isSet = true;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::is_version_order_Set() const{
    return m_version_order_isSet;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::is_version_order_Valid() const{
    return m_version_order_isValid;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldContextDefaultValueSingleVersionPicker::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_version_id_isValid && true;
}

} // namespace OpenAPI
