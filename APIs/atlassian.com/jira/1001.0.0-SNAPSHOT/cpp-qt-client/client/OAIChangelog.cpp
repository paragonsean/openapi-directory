/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangelog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangelog::OAIChangelog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangelog::OAIChangelog() {
    this->initializeModel();
}

OAIChangelog::~OAIChangelog() {}

void OAIChangelog::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_history_metadata_isSet = false;
    m_history_metadata_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIChangelog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangelog::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_history_metadata_isValid = ::OpenAPI::fromJsonValue(m_history_metadata, json[QString("historyMetadata")]);
    m_history_metadata_isSet = !json[QString("historyMetadata")].isNull() && m_history_metadata_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAIChangelog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangelog::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_history_metadata.isSet()) {
        obj.insert(QString("historyMetadata"), ::OpenAPI::toJsonValue(m_history_metadata));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

OAIUserDetails OAIChangelog::getAuthor() const {
    return m_author;
}
void OAIChangelog::setAuthor(const OAIUserDetails &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIChangelog::is_author_Set() const{
    return m_author_isSet;
}

bool OAIChangelog::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIChangelog::getCreated() const {
    return m_created;
}
void OAIChangelog::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIChangelog::is_created_Set() const{
    return m_created_isSet;
}

bool OAIChangelog::is_created_Valid() const{
    return m_created_isValid;
}

OAIHistoryMetadata OAIChangelog::getHistoryMetadata() const {
    return m_history_metadata;
}
void OAIChangelog::setHistoryMetadata(const OAIHistoryMetadata &history_metadata) {
    m_history_metadata = history_metadata;
    m_history_metadata_isSet = true;
}

bool OAIChangelog::is_history_metadata_Set() const{
    return m_history_metadata_isSet;
}

bool OAIChangelog::is_history_metadata_Valid() const{
    return m_history_metadata_isValid;
}

QString OAIChangelog::getId() const {
    return m_id;
}
void OAIChangelog::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChangelog::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChangelog::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIChangeDetails> OAIChangelog::getItems() const {
    return m_items;
}
void OAIChangelog::setItems(const QList<OAIChangeDetails> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIChangelog::is_items_Set() const{
    return m_items_isSet;
}

bool OAIChangelog::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIChangelog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangelog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
