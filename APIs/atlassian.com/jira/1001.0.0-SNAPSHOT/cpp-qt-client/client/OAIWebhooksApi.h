/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContainerForRegisteredWebhooks.h"
#include "OAIContainerForWebhookIDs.h"
#include "OAIErrorCollection.h"
#include "OAIFailedWebhooks.h"
#include "OAIPageBeanWebhook.h"
#include "OAIWebhookRegistrationDetails.h"
#include "OAIWebhooksExpirationDate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_container_for_webhook_ids OAIContainerForWebhookIDs [required]
    */
    virtual void deleteWebhookById(const OAIContainerForWebhookIDs &oai_container_for_webhook_ids);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getDynamicWebhooksForApp(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  max_results qint32 [optional]
    * @param[in]  after qint64 [optional]
    */
    virtual void getFailedWebhooks(const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &after = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  oai_container_for_webhook_ids OAIContainerForWebhookIDs [required]
    */
    virtual void refreshWebhooks(const OAIContainerForWebhookIDs &oai_container_for_webhook_ids);

    /**
    * @param[in]  oai_webhook_registration_details OAIWebhookRegistrationDetails [required]
    */
    virtual void registerDynamicWebhooks(const OAIWebhookRegistrationDetails &oai_webhook_registration_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteWebhookByIdCallback(OAIHttpRequestWorker *worker);
    void getDynamicWebhooksForAppCallback(OAIHttpRequestWorker *worker);
    void getFailedWebhooksCallback(OAIHttpRequestWorker *worker);
    void refreshWebhooksCallback(OAIHttpRequestWorker *worker);
    void registerDynamicWebhooksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteWebhookByIdSignal();
    void getDynamicWebhooksForAppSignal(OAIPageBeanWebhook summary);
    void getFailedWebhooksSignal(OAIFailedWebhooks summary);
    void refreshWebhooksSignal(OAIWebhooksExpirationDate summary);
    void registerDynamicWebhooksSignal(OAIContainerForRegisteredWebhooks summary);


    void deleteWebhookByIdSignalFull(OAIHttpRequestWorker *worker);
    void getDynamicWebhooksForAppSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanWebhook summary);
    void getFailedWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIFailedWebhooks summary);
    void refreshWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIWebhooksExpirationDate summary);
    void registerDynamicWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIContainerForRegisteredWebhooks summary);

    Q_DECL_DEPRECATED_X("Use deleteWebhookByIdSignalError() instead")
    void deleteWebhookByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDynamicWebhooksForAppSignalError() instead")
    void getDynamicWebhooksForAppSignalE(OAIPageBeanWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDynamicWebhooksForAppSignalError(OAIPageBeanWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFailedWebhooksSignalError() instead")
    void getFailedWebhooksSignalE(OAIFailedWebhooks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFailedWebhooksSignalError(OAIFailedWebhooks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshWebhooksSignalError() instead")
    void refreshWebhooksSignalE(OAIWebhooksExpirationDate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshWebhooksSignalError(OAIWebhooksExpirationDate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerDynamicWebhooksSignalError() instead")
    void registerDynamicWebhooksSignalE(OAIContainerForRegisteredWebhooks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerDynamicWebhooksSignalError(OAIContainerForRegisteredWebhooks summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteWebhookByIdSignalErrorFull() instead")
    void deleteWebhookByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDynamicWebhooksForAppSignalErrorFull() instead")
    void getDynamicWebhooksForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDynamicWebhooksForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFailedWebhooksSignalErrorFull() instead")
    void getFailedWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFailedWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshWebhooksSignalErrorFull() instead")
    void refreshWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerDynamicWebhooksSignalErrorFull() instead")
    void registerDynamicWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerDynamicWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
