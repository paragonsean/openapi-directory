/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserBeanAvatarUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserBeanAvatarUrls::OAIUserBeanAvatarUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserBeanAvatarUrls::OAIUserBeanAvatarUrls() {
    this->initializeModel();
}

OAIUserBeanAvatarUrls::~OAIUserBeanAvatarUrls() {}

void OAIUserBeanAvatarUrls::initializeModel() {

    m_r_16x16_isSet = false;
    m_r_16x16_isValid = false;

    m_r_24x24_isSet = false;
    m_r_24x24_isValid = false;

    m_r_32x32_isSet = false;
    m_r_32x32_isValid = false;

    m_r_48x48_isSet = false;
    m_r_48x48_isValid = false;
}

void OAIUserBeanAvatarUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserBeanAvatarUrls::fromJsonObject(QJsonObject json) {

    m_r_16x16_isValid = ::OpenAPI::fromJsonValue(m_r_16x16, json[QString("16x16")]);
    m_r_16x16_isSet = !json[QString("16x16")].isNull() && m_r_16x16_isValid;

    m_r_24x24_isValid = ::OpenAPI::fromJsonValue(m_r_24x24, json[QString("24x24")]);
    m_r_24x24_isSet = !json[QString("24x24")].isNull() && m_r_24x24_isValid;

    m_r_32x32_isValid = ::OpenAPI::fromJsonValue(m_r_32x32, json[QString("32x32")]);
    m_r_32x32_isSet = !json[QString("32x32")].isNull() && m_r_32x32_isValid;

    m_r_48x48_isValid = ::OpenAPI::fromJsonValue(m_r_48x48, json[QString("48x48")]);
    m_r_48x48_isSet = !json[QString("48x48")].isNull() && m_r_48x48_isValid;
}

QString OAIUserBeanAvatarUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserBeanAvatarUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_r_16x16_isSet) {
        obj.insert(QString("16x16"), ::OpenAPI::toJsonValue(m_r_16x16));
    }
    if (m_r_24x24_isSet) {
        obj.insert(QString("24x24"), ::OpenAPI::toJsonValue(m_r_24x24));
    }
    if (m_r_32x32_isSet) {
        obj.insert(QString("32x32"), ::OpenAPI::toJsonValue(m_r_32x32));
    }
    if (m_r_48x48_isSet) {
        obj.insert(QString("48x48"), ::OpenAPI::toJsonValue(m_r_48x48));
    }
    return obj;
}

QString OAIUserBeanAvatarUrls::getR16x16() const {
    return m_r_16x16;
}
void OAIUserBeanAvatarUrls::setR16x16(const QString &r_16x16) {
    m_r_16x16 = r_16x16;
    m_r_16x16_isSet = true;
}

bool OAIUserBeanAvatarUrls::is_r_16x16_Set() const{
    return m_r_16x16_isSet;
}

bool OAIUserBeanAvatarUrls::is_r_16x16_Valid() const{
    return m_r_16x16_isValid;
}

QString OAIUserBeanAvatarUrls::getR24x24() const {
    return m_r_24x24;
}
void OAIUserBeanAvatarUrls::setR24x24(const QString &r_24x24) {
    m_r_24x24 = r_24x24;
    m_r_24x24_isSet = true;
}

bool OAIUserBeanAvatarUrls::is_r_24x24_Set() const{
    return m_r_24x24_isSet;
}

bool OAIUserBeanAvatarUrls::is_r_24x24_Valid() const{
    return m_r_24x24_isValid;
}

QString OAIUserBeanAvatarUrls::getR32x32() const {
    return m_r_32x32;
}
void OAIUserBeanAvatarUrls::setR32x32(const QString &r_32x32) {
    m_r_32x32 = r_32x32;
    m_r_32x32_isSet = true;
}

bool OAIUserBeanAvatarUrls::is_r_32x32_Set() const{
    return m_r_32x32_isSet;
}

bool OAIUserBeanAvatarUrls::is_r_32x32_Valid() const{
    return m_r_32x32_isValid;
}

QString OAIUserBeanAvatarUrls::getR48x48() const {
    return m_r_48x48;
}
void OAIUserBeanAvatarUrls::setR48x48(const QString &r_48x48) {
    m_r_48x48 = r_48x48;
    m_r_48x48_isSet = true;
}

bool OAIUserBeanAvatarUrls::is_r_48x48_Set() const{
    return m_r_48x48_isSet;
}

bool OAIUserBeanAvatarUrls::is_r_48x48_Valid() const{
    return m_r_48x48_isValid;
}

bool OAIUserBeanAvatarUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_16x16_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_24x24_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_32x32_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_48x48_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserBeanAvatarUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
