/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueAttachmentsApi_H
#define OAI_OAIIssueAttachmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttachment.h"
#include "OAIAttachmentArchiveImpl.h"
#include "OAIAttachmentArchiveMetadataReadable.h"
#include "OAIAttachmentMetadata.h"
#include "OAIAttachmentSettings.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueAttachmentsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueAttachmentsApi(const int timeOut = 0);
    ~OAIIssueAttachmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void addAttachment(const QString &issue_id_or_key);

    /**
    * @param[in]  id QString [required]
    */
    virtual void expandAttachmentForHumans(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void expandAttachmentForMachines(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAttachment(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  redirect bool [optional]
    */
    virtual void getAttachmentContent(const QString &id, const ::OpenAPI::OptionalParam<bool> &redirect = ::OpenAPI::OptionalParam<bool>());


    virtual void getAttachmentMeta();

    /**
    * @param[in]  id QString [required]
    * @param[in]  redirect bool [optional]
    * @param[in]  fallback_to_default bool [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    */
    virtual void getAttachmentThumbnail(const QString &id, const ::OpenAPI::OptionalParam<bool> &redirect = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fallback_to_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void removeAttachment(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addAttachmentCallback(OAIHttpRequestWorker *worker);
    void expandAttachmentForHumansCallback(OAIHttpRequestWorker *worker);
    void expandAttachmentForMachinesCallback(OAIHttpRequestWorker *worker);
    void getAttachmentCallback(OAIHttpRequestWorker *worker);
    void getAttachmentContentCallback(OAIHttpRequestWorker *worker);
    void getAttachmentMetaCallback(OAIHttpRequestWorker *worker);
    void getAttachmentThumbnailCallback(OAIHttpRequestWorker *worker);
    void removeAttachmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addAttachmentSignal(QList<OAIAttachment> summary);
    void expandAttachmentForHumansSignal(OAIAttachmentArchiveMetadataReadable summary);
    void expandAttachmentForMachinesSignal(OAIAttachmentArchiveImpl summary);
    void getAttachmentSignal(OAIAttachmentMetadata summary);
    void getAttachmentContentSignal(OAIObject summary);
    void getAttachmentMetaSignal(OAIAttachmentSettings summary);
    void getAttachmentThumbnailSignal(OAIObject summary);
    void removeAttachmentSignal();


    void addAttachmentSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachment> summary);
    void expandAttachmentForHumansSignalFull(OAIHttpRequestWorker *worker, OAIAttachmentArchiveMetadataReadable summary);
    void expandAttachmentForMachinesSignalFull(OAIHttpRequestWorker *worker, OAIAttachmentArchiveImpl summary);
    void getAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIAttachmentMetadata summary);
    void getAttachmentContentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAttachmentMetaSignalFull(OAIHttpRequestWorker *worker, OAIAttachmentSettings summary);
    void getAttachmentThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void removeAttachmentSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addAttachmentSignalError() instead")
    void addAttachmentSignalE(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAttachmentSignalError(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandAttachmentForHumansSignalError() instead")
    void expandAttachmentForHumansSignalE(OAIAttachmentArchiveMetadataReadable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expandAttachmentForHumansSignalError(OAIAttachmentArchiveMetadataReadable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandAttachmentForMachinesSignalError() instead")
    void expandAttachmentForMachinesSignalE(OAIAttachmentArchiveImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expandAttachmentForMachinesSignalError(OAIAttachmentArchiveImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentSignalError() instead")
    void getAttachmentSignalE(OAIAttachmentMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentSignalError(OAIAttachmentMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentContentSignalError() instead")
    void getAttachmentContentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentContentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentMetaSignalError() instead")
    void getAttachmentMetaSignalE(OAIAttachmentSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentMetaSignalError(OAIAttachmentSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentThumbnailSignalError() instead")
    void getAttachmentThumbnailSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentThumbnailSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAttachmentSignalError() instead")
    void removeAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addAttachmentSignalErrorFull() instead")
    void addAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandAttachmentForHumansSignalErrorFull() instead")
    void expandAttachmentForHumansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expandAttachmentForHumansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandAttachmentForMachinesSignalErrorFull() instead")
    void expandAttachmentForMachinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expandAttachmentForMachinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentSignalErrorFull() instead")
    void getAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentContentSignalErrorFull() instead")
    void getAttachmentContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentMetaSignalErrorFull() instead")
    void getAttachmentMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentThumbnailSignalErrorFull() instead")
    void getAttachmentThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAttachmentSignalErrorFull() instead")
    void removeAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
