/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueUpdateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueUpdateDetails::OAIIssueUpdateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueUpdateDetails::OAIIssueUpdateDetails() {
    this->initializeModel();
}

OAIIssueUpdateDetails::~OAIIssueUpdateDetails() {}

void OAIIssueUpdateDetails::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_history_metadata_isSet = false;
    m_history_metadata_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;
}

void OAIIssueUpdateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueUpdateDetails::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_history_metadata_isValid = ::OpenAPI::fromJsonValue(m_history_metadata, json[QString("historyMetadata")]);
    m_history_metadata_isSet = !json[QString("historyMetadata")].isNull() && m_history_metadata_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("transition")]);
    m_transition_isSet = !json[QString("transition")].isNull() && m_transition_isValid;

    if(json["update"].isObject()){
        auto varmap = json["update"].toObject().toVariantMap();
        m_update_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIFieldUpdateOperation> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_update_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_update_isSet &= !jval.isNull() && m_update_isValid;
                m_update.insert(m_update.end(), val, item);
            }
        }
    }
}

QString OAIIssueUpdateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueUpdateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_history_metadata.isSet()) {
        obj.insert(QString("historyMetadata"), ::OpenAPI::toJsonValue(m_history_metadata));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_transition.isSet()) {
        obj.insert(QString("transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    if (m_update.size() > 0) {
        
        obj.insert(QString("update"), toJsonValue(m_update));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIIssueUpdateDetails::getFields() const {
    return m_fields;
}
void OAIIssueUpdateDetails::setFields(const QMap<QString, QJsonValue> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIIssueUpdateDetails::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIIssueUpdateDetails::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIHistoryMetadata OAIIssueUpdateDetails::getHistoryMetadata() const {
    return m_history_metadata;
}
void OAIIssueUpdateDetails::setHistoryMetadata(const OAIHistoryMetadata &history_metadata) {
    m_history_metadata = history_metadata;
    m_history_metadata_isSet = true;
}

bool OAIIssueUpdateDetails::is_history_metadata_Set() const{
    return m_history_metadata_isSet;
}

bool OAIIssueUpdateDetails::is_history_metadata_Valid() const{
    return m_history_metadata_isValid;
}

QList<OAIEntityProperty> OAIIssueUpdateDetails::getProperties() const {
    return m_properties;
}
void OAIIssueUpdateDetails::setProperties(const QList<OAIEntityProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIIssueUpdateDetails::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIIssueUpdateDetails::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIIssueTransition OAIIssueUpdateDetails::getTransition() const {
    return m_transition;
}
void OAIIssueUpdateDetails::setTransition(const OAIIssueTransition &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIIssueUpdateDetails::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIIssueUpdateDetails::is_transition_Valid() const{
    return m_transition_isValid;
}

QMap<QString, QList<OAIFieldUpdateOperation>> OAIIssueUpdateDetails::getUpdate() const {
    return m_update;
}
void OAIIssueUpdateDetails::setUpdate(const QMap<QString, QList<OAIFieldUpdateOperation>> &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAIIssueUpdateDetails::is_update_Set() const{
    return m_update_isSet;
}

bool OAIIssueUpdateDetails::is_update_Valid() const{
    return m_update_isValid;
}

bool OAIIssueUpdateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueUpdateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
