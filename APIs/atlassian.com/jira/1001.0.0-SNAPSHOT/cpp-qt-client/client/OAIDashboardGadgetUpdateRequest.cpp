/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardGadgetUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardGadgetUpdateRequest::OAIDashboardGadgetUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardGadgetUpdateRequest::OAIDashboardGadgetUpdateRequest() {
    this->initializeModel();
}

OAIDashboardGadgetUpdateRequest::~OAIDashboardGadgetUpdateRequest() {}

void OAIDashboardGadgetUpdateRequest::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDashboardGadgetUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardGadgetUpdateRequest::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDashboardGadgetUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardGadgetUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIDashboardGadgetUpdateRequest::getColor() const {
    return m_color;
}
void OAIDashboardGadgetUpdateRequest::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIDashboardGadgetUpdateRequest::is_color_Set() const{
    return m_color_isSet;
}

bool OAIDashboardGadgetUpdateRequest::is_color_Valid() const{
    return m_color_isValid;
}

OAIDashboardGadgetPosition OAIDashboardGadgetUpdateRequest::getPosition() const {
    return m_position;
}
void OAIDashboardGadgetUpdateRequest::setPosition(const OAIDashboardGadgetPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDashboardGadgetUpdateRequest::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDashboardGadgetUpdateRequest::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIDashboardGadgetUpdateRequest::getTitle() const {
    return m_title;
}
void OAIDashboardGadgetUpdateRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDashboardGadgetUpdateRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDashboardGadgetUpdateRequest::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDashboardGadgetUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardGadgetUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
