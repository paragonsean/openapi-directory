/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimplifiedHierarchyLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimplifiedHierarchyLevel::OAISimplifiedHierarchyLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimplifiedHierarchyLevel::OAISimplifiedHierarchyLevel() {
    this->initializeModel();
}

OAISimplifiedHierarchyLevel::~OAISimplifiedHierarchyLevel() {}

void OAISimplifiedHierarchyLevel::initializeModel() {

    m_above_level_id_isSet = false;
    m_above_level_id_isValid = false;

    m_below_level_id_isSet = false;
    m_below_level_id_isValid = false;

    m_external_uuid_isSet = false;
    m_external_uuid_isValid = false;

    m_hierarchy_level_number_isSet = false;
    m_hierarchy_level_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_type_ids_isSet = false;
    m_issue_type_ids_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_configuration_id_isSet = false;
    m_project_configuration_id_isValid = false;
}

void OAISimplifiedHierarchyLevel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimplifiedHierarchyLevel::fromJsonObject(QJsonObject json) {

    m_above_level_id_isValid = ::OpenAPI::fromJsonValue(m_above_level_id, json[QString("aboveLevelId")]);
    m_above_level_id_isSet = !json[QString("aboveLevelId")].isNull() && m_above_level_id_isValid;

    m_below_level_id_isValid = ::OpenAPI::fromJsonValue(m_below_level_id, json[QString("belowLevelId")]);
    m_below_level_id_isSet = !json[QString("belowLevelId")].isNull() && m_below_level_id_isValid;

    m_external_uuid_isValid = ::OpenAPI::fromJsonValue(m_external_uuid, json[QString("externalUuid")]);
    m_external_uuid_isSet = !json[QString("externalUuid")].isNull() && m_external_uuid_isValid;

    m_hierarchy_level_number_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_level_number, json[QString("hierarchyLevelNumber")]);
    m_hierarchy_level_number_isSet = !json[QString("hierarchyLevelNumber")].isNull() && m_hierarchy_level_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_type_ids_isValid = ::OpenAPI::fromJsonValue(m_issue_type_ids, json[QString("issueTypeIds")]);
    m_issue_type_ids_isSet = !json[QString("issueTypeIds")].isNull() && m_issue_type_ids_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_project_configuration_id, json[QString("projectConfigurationId")]);
    m_project_configuration_id_isSet = !json[QString("projectConfigurationId")].isNull() && m_project_configuration_id_isValid;
}

QString OAISimplifiedHierarchyLevel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimplifiedHierarchyLevel::asJsonObject() const {
    QJsonObject obj;
    if (m_above_level_id_isSet) {
        obj.insert(QString("aboveLevelId"), ::OpenAPI::toJsonValue(m_above_level_id));
    }
    if (m_below_level_id_isSet) {
        obj.insert(QString("belowLevelId"), ::OpenAPI::toJsonValue(m_below_level_id));
    }
    if (m_external_uuid_isSet) {
        obj.insert(QString("externalUuid"), ::OpenAPI::toJsonValue(m_external_uuid));
    }
    if (m_hierarchy_level_number_isSet) {
        obj.insert(QString("hierarchyLevelNumber"), ::OpenAPI::toJsonValue(m_hierarchy_level_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_type_ids.size() > 0) {
        obj.insert(QString("issueTypeIds"), ::OpenAPI::toJsonValue(m_issue_type_ids));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_configuration_id_isSet) {
        obj.insert(QString("projectConfigurationId"), ::OpenAPI::toJsonValue(m_project_configuration_id));
    }
    return obj;
}

qint64 OAISimplifiedHierarchyLevel::getAboveLevelId() const {
    return m_above_level_id;
}
void OAISimplifiedHierarchyLevel::setAboveLevelId(const qint64 &above_level_id) {
    m_above_level_id = above_level_id;
    m_above_level_id_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_above_level_id_Set() const{
    return m_above_level_id_isSet;
}

bool OAISimplifiedHierarchyLevel::is_above_level_id_Valid() const{
    return m_above_level_id_isValid;
}

qint64 OAISimplifiedHierarchyLevel::getBelowLevelId() const {
    return m_below_level_id;
}
void OAISimplifiedHierarchyLevel::setBelowLevelId(const qint64 &below_level_id) {
    m_below_level_id = below_level_id;
    m_below_level_id_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_below_level_id_Set() const{
    return m_below_level_id_isSet;
}

bool OAISimplifiedHierarchyLevel::is_below_level_id_Valid() const{
    return m_below_level_id_isValid;
}

QString OAISimplifiedHierarchyLevel::getExternalUuid() const {
    return m_external_uuid;
}
void OAISimplifiedHierarchyLevel::setExternalUuid(const QString &external_uuid) {
    m_external_uuid = external_uuid;
    m_external_uuid_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_external_uuid_Set() const{
    return m_external_uuid_isSet;
}

bool OAISimplifiedHierarchyLevel::is_external_uuid_Valid() const{
    return m_external_uuid_isValid;
}

qint32 OAISimplifiedHierarchyLevel::getHierarchyLevelNumber() const {
    return m_hierarchy_level_number;
}
void OAISimplifiedHierarchyLevel::setHierarchyLevelNumber(const qint32 &hierarchy_level_number) {
    m_hierarchy_level_number = hierarchy_level_number;
    m_hierarchy_level_number_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_hierarchy_level_number_Set() const{
    return m_hierarchy_level_number_isSet;
}

bool OAISimplifiedHierarchyLevel::is_hierarchy_level_number_Valid() const{
    return m_hierarchy_level_number_isValid;
}

qint64 OAISimplifiedHierarchyLevel::getId() const {
    return m_id;
}
void OAISimplifiedHierarchyLevel::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimplifiedHierarchyLevel::is_id_Valid() const{
    return m_id_isValid;
}

QList<qint64> OAISimplifiedHierarchyLevel::getIssueTypeIds() const {
    return m_issue_type_ids;
}
void OAISimplifiedHierarchyLevel::setIssueTypeIds(const QList<qint64> &issue_type_ids) {
    m_issue_type_ids = issue_type_ids;
    m_issue_type_ids_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_issue_type_ids_Set() const{
    return m_issue_type_ids_isSet;
}

bool OAISimplifiedHierarchyLevel::is_issue_type_ids_Valid() const{
    return m_issue_type_ids_isValid;
}

qint32 OAISimplifiedHierarchyLevel::getLevel() const {
    return m_level;
}
void OAISimplifiedHierarchyLevel::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_level_Set() const{
    return m_level_isSet;
}

bool OAISimplifiedHierarchyLevel::is_level_Valid() const{
    return m_level_isValid;
}

QString OAISimplifiedHierarchyLevel::getName() const {
    return m_name;
}
void OAISimplifiedHierarchyLevel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimplifiedHierarchyLevel::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAISimplifiedHierarchyLevel::getProjectConfigurationId() const {
    return m_project_configuration_id;
}
void OAISimplifiedHierarchyLevel::setProjectConfigurationId(const qint64 &project_configuration_id) {
    m_project_configuration_id = project_configuration_id;
    m_project_configuration_id_isSet = true;
}

bool OAISimplifiedHierarchyLevel::is_project_configuration_id_Set() const{
    return m_project_configuration_id_isSet;
}

bool OAISimplifiedHierarchyLevel::is_project_configuration_id_Valid() const{
    return m_project_configuration_id_isValid;
}

bool OAISimplifiedHierarchyLevel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_above_level_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_below_level_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_level_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimplifiedHierarchyLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
