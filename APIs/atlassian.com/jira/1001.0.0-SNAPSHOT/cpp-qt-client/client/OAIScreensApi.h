/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScreensApi_H
#define OAI_OAIScreensApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPageBeanScreen.h"
#include "OAIPageBeanScreenWithTab.h"
#include "OAIScreen.h"
#include "OAIScreenDetails.h"
#include "OAIScreenableField.h"
#include "OAIUpdateScreenDetails.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScreensApi : public QObject {
    Q_OBJECT

public:
    OAIScreensApi(const int timeOut = 0);
    ~OAIScreensApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  field_id QString [required]
    */
    virtual void addFieldToDefaultScreen(const QString &field_id);

    /**
    * @param[in]  oai_screen_details OAIScreenDetails [required]
    */
    virtual void createScreen(const OAIScreenDetails &oai_screen_details);

    /**
    * @param[in]  screen_id qint64 [required]
    */
    virtual void deleteScreen(const qint64 &screen_id);

    /**
    * @param[in]  screen_id qint64 [required]
    */
    virtual void getAvailableScreenFields(const qint64 &screen_id);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  id QSet<qint64> [optional]
    * @param[in]  query_string QString [optional]
    * @param[in]  scope QSet<QString> [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void getScreens(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<QString> &query_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &scope = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getScreensForField(const QString &field_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  oai_update_screen_details OAIUpdateScreenDetails [required]
    */
    virtual void updateScreen(const qint64 &screen_id, const OAIUpdateScreenDetails &oai_update_screen_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFieldToDefaultScreenCallback(OAIHttpRequestWorker *worker);
    void createScreenCallback(OAIHttpRequestWorker *worker);
    void deleteScreenCallback(OAIHttpRequestWorker *worker);
    void getAvailableScreenFieldsCallback(OAIHttpRequestWorker *worker);
    void getScreensCallback(OAIHttpRequestWorker *worker);
    void getScreensForFieldCallback(OAIHttpRequestWorker *worker);
    void updateScreenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFieldToDefaultScreenSignal(QJsonValue summary);
    void createScreenSignal(OAIScreen summary);
    void deleteScreenSignal();
    void getAvailableScreenFieldsSignal(QList<OAIScreenableField> summary);
    void getScreensSignal(OAIPageBeanScreen summary);
    void getScreensForFieldSignal(OAIPageBeanScreenWithTab summary);
    void updateScreenSignal(OAIScreen summary);


    void addFieldToDefaultScreenSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createScreenSignalFull(OAIHttpRequestWorker *worker, OAIScreen summary);
    void deleteScreenSignalFull(OAIHttpRequestWorker *worker);
    void getAvailableScreenFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenableField> summary);
    void getScreensSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanScreen summary);
    void getScreensForFieldSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanScreenWithTab summary);
    void updateScreenSignalFull(OAIHttpRequestWorker *worker, OAIScreen summary);

    Q_DECL_DEPRECATED_X("Use addFieldToDefaultScreenSignalError() instead")
    void addFieldToDefaultScreenSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldToDefaultScreenSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScreenSignalError() instead")
    void createScreenSignalE(OAIScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScreenSignalError(OAIScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenSignalError() instead")
    void deleteScreenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableScreenFieldsSignalError() instead")
    void getAvailableScreenFieldsSignalE(QList<OAIScreenableField> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableScreenFieldsSignalError(QList<OAIScreenableField> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreensSignalError() instead")
    void getScreensSignalE(OAIPageBeanScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreensSignalError(OAIPageBeanScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreensForFieldSignalError() instead")
    void getScreensForFieldSignalE(OAIPageBeanScreenWithTab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreensForFieldSignalError(OAIPageBeanScreenWithTab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScreenSignalError() instead")
    void updateScreenSignalE(OAIScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScreenSignalError(OAIScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFieldToDefaultScreenSignalErrorFull() instead")
    void addFieldToDefaultScreenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldToDefaultScreenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScreenSignalErrorFull() instead")
    void createScreenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScreenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenSignalErrorFull() instead")
    void deleteScreenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableScreenFieldsSignalErrorFull() instead")
    void getAvailableScreenFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableScreenFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreensSignalErrorFull() instead")
    void getScreensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreensForFieldSignalErrorFull() instead")
    void getScreensForFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreensForFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScreenSignalErrorFull() instead")
    void updateScreenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScreenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
