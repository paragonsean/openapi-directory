/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueFilterForBulkPropertySet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueFilterForBulkPropertySet::OAIIssueFilterForBulkPropertySet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueFilterForBulkPropertySet::OAIIssueFilterForBulkPropertySet() {
    this->initializeModel();
}

OAIIssueFilterForBulkPropertySet::~OAIIssueFilterForBulkPropertySet() {}

void OAIIssueFilterForBulkPropertySet::initializeModel() {

    m_current_value_isSet = false;
    m_current_value_isValid = false;

    m_entity_ids_isSet = false;
    m_entity_ids_isValid = false;

    m_has_property_isSet = false;
    m_has_property_isValid = false;
}

void OAIIssueFilterForBulkPropertySet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueFilterForBulkPropertySet::fromJsonObject(QJsonObject json) {

    m_current_value_isValid = ::OpenAPI::fromJsonValue(m_current_value, json[QString("currentValue")]);
    m_current_value_isSet = !json[QString("currentValue")].isNull() && m_current_value_isValid;

    m_entity_ids_isValid = ::OpenAPI::fromJsonValue(m_entity_ids, json[QString("entityIds")]);
    m_entity_ids_isSet = !json[QString("entityIds")].isNull() && m_entity_ids_isValid;

    m_has_property_isValid = ::OpenAPI::fromJsonValue(m_has_property, json[QString("hasProperty")]);
    m_has_property_isSet = !json[QString("hasProperty")].isNull() && m_has_property_isValid;
}

QString OAIIssueFilterForBulkPropertySet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueFilterForBulkPropertySet::asJsonObject() const {
    QJsonObject obj;
    if (m_current_value_isSet) {
        obj.insert(QString("currentValue"), ::OpenAPI::toJsonValue(m_current_value));
    }
    if (m_entity_ids.size() > 0) {
        obj.insert(QString("entityIds"), ::OpenAPI::toJsonValue(m_entity_ids));
    }
    if (m_has_property_isSet) {
        obj.insert(QString("hasProperty"), ::OpenAPI::toJsonValue(m_has_property));
    }
    return obj;
}

QJsonValue OAIIssueFilterForBulkPropertySet::getCurrentValue() const {
    return m_current_value;
}
void OAIIssueFilterForBulkPropertySet::setCurrentValue(const QJsonValue &current_value) {
    m_current_value = current_value;
    m_current_value_isSet = true;
}

bool OAIIssueFilterForBulkPropertySet::is_current_value_Set() const{
    return m_current_value_isSet;
}

bool OAIIssueFilterForBulkPropertySet::is_current_value_Valid() const{
    return m_current_value_isValid;
}

QSet<qint64> OAIIssueFilterForBulkPropertySet::getEntityIds() const {
    return m_entity_ids;
}
void OAIIssueFilterForBulkPropertySet::setEntityIds(const QSet<qint64> &entity_ids) {
    m_entity_ids = entity_ids;
    m_entity_ids_isSet = true;
}

bool OAIIssueFilterForBulkPropertySet::is_entity_ids_Set() const{
    return m_entity_ids_isSet;
}

bool OAIIssueFilterForBulkPropertySet::is_entity_ids_Valid() const{
    return m_entity_ids_isValid;
}

bool OAIIssueFilterForBulkPropertySet::isHasProperty() const {
    return m_has_property;
}
void OAIIssueFilterForBulkPropertySet::setHasProperty(const bool &has_property) {
    m_has_property = has_property;
    m_has_property_isSet = true;
}

bool OAIIssueFilterForBulkPropertySet::is_has_property_Set() const{
    return m_has_property_isSet;
}

bool OAIIssueFilterForBulkPropertySet::is_has_property_Valid() const{
    return m_has_property_isValid;
}

bool OAIIssueFilterForBulkPropertySet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueFilterForBulkPropertySet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
