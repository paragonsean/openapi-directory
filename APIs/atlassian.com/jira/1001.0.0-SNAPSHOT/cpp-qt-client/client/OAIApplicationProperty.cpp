/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperty::OAIApplicationProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperty::OAIApplicationProperty() {
    this->initializeModel();
}

OAIApplicationProperty::~OAIApplicationProperty() {}

void OAIApplicationProperty::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_example_isSet = false;
    m_example_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIApplicationProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperty::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_example_isValid = ::OpenAPI::fromJsonValue(m_example, json[QString("example")]);
    m_example_isSet = !json[QString("example")].isNull() && m_example_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIApplicationProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_example_isSet) {
        obj.insert(QString("example"), ::OpenAPI::toJsonValue(m_example));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<QString> OAIApplicationProperty::getAllowedValues() const {
    return m_allowed_values;
}
void OAIApplicationProperty::setAllowedValues(const QList<QString> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIApplicationProperty::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIApplicationProperty::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIApplicationProperty::getDefaultValue() const {
    return m_default_value;
}
void OAIApplicationProperty::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIApplicationProperty::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIApplicationProperty::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIApplicationProperty::getDesc() const {
    return m_desc;
}
void OAIApplicationProperty::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIApplicationProperty::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIApplicationProperty::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIApplicationProperty::getExample() const {
    return m_example;
}
void OAIApplicationProperty::setExample(const QString &example) {
    m_example = example;
    m_example_isSet = true;
}

bool OAIApplicationProperty::is_example_Set() const{
    return m_example_isSet;
}

bool OAIApplicationProperty::is_example_Valid() const{
    return m_example_isValid;
}

QString OAIApplicationProperty::getId() const {
    return m_id;
}
void OAIApplicationProperty::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationProperty::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationProperty::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApplicationProperty::getKey() const {
    return m_key;
}
void OAIApplicationProperty::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApplicationProperty::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApplicationProperty::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIApplicationProperty::getName() const {
    return m_name;
}
void OAIApplicationProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationProperty::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationProperty::getType() const {
    return m_type;
}
void OAIApplicationProperty::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApplicationProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApplicationProperty::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIApplicationProperty::getValue() const {
    return m_value;
}
void OAIApplicationProperty::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIApplicationProperty::is_value_Set() const{
    return m_value_isSet;
}

bool OAIApplicationProperty::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIApplicationProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
