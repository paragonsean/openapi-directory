/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueFieldConfigurationsApi_H
#define OAI_OAIIssueFieldConfigurationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociateFieldConfigurationsWithIssueTypesRequest.h"
#include "OAIErrorCollection.h"
#include "OAIFieldConfiguration.h"
#include "OAIFieldConfigurationDetails.h"
#include "OAIFieldConfigurationItemsDetails.h"
#include "OAIFieldConfigurationScheme.h"
#include "OAIFieldConfigurationSchemeProjectAssociation.h"
#include "OAIIssueTypeIdsToRemove.h"
#include "OAIPageBeanFieldConfigurationDetails.h"
#include "OAIPageBeanFieldConfigurationIssueTypeItem.h"
#include "OAIPageBeanFieldConfigurationItem.h"
#include "OAIPageBeanFieldConfigurationScheme.h"
#include "OAIPageBeanFieldConfigurationSchemeProjects.h"
#include "OAIUpdateFieldConfigurationSchemeDetails.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueFieldConfigurationsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueFieldConfigurationsApi(const int timeOut = 0);
    ~OAIIssueFieldConfigurationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_field_configuration_scheme_project_association OAIFieldConfigurationSchemeProjectAssociation [required]
    */
    virtual void assignFieldConfigurationSchemeToProject(const OAIFieldConfigurationSchemeProjectAssociation &oai_field_configuration_scheme_project_association);

    /**
    * @param[in]  oai_field_configuration_details OAIFieldConfigurationDetails [required]
    */
    virtual void createFieldConfiguration(const OAIFieldConfigurationDetails &oai_field_configuration_details);

    /**
    * @param[in]  oai_update_field_configuration_scheme_details OAIUpdateFieldConfigurationSchemeDetails [required]
    */
    virtual void createFieldConfigurationScheme(const OAIUpdateFieldConfigurationSchemeDetails &oai_update_field_configuration_scheme_details);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteFieldConfiguration(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteFieldConfigurationScheme(const qint64 &id);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  id QSet<qint64> [optional]
    */
    virtual void getAllFieldConfigurationSchemes(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  id QSet<qint64> [optional]
    * @param[in]  is_default bool [optional]
    * @param[in]  query QString [optional]
    */
    virtual void getAllFieldConfigurations(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<bool> &is_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getFieldConfigurationItems(const qint64 &id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  field_configuration_scheme_id QSet<qint64> [optional]
    */
    virtual void getFieldConfigurationSchemeMappings(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &field_configuration_scheme_id = ::OpenAPI::OptionalParam<QSet<qint64>>());

    /**
    * @param[in]  project_id QSet<qint64> [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getFieldConfigurationSchemeProjectMapping(const QSet<qint64> &project_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_issue_type_ids_to_remove OAIIssueTypeIdsToRemove [required]
    */
    virtual void removeIssueTypesFromGlobalFieldConfigurationScheme(const qint64 &id, const OAIIssueTypeIdsToRemove &oai_issue_type_ids_to_remove);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_associate_field_configurations_with_issue_types_request OAIAssociateFieldConfigurationsWithIssueTypesRequest [required]
    */
    virtual void setFieldConfigurationSchemeMapping(const qint64 &id, const OAIAssociateFieldConfigurationsWithIssueTypesRequest &oai_associate_field_configurations_with_issue_types_request);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_field_configuration_details OAIFieldConfigurationDetails [required]
    */
    virtual void updateFieldConfiguration(const qint64 &id, const OAIFieldConfigurationDetails &oai_field_configuration_details);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_field_configuration_items_details OAIFieldConfigurationItemsDetails [required]
    */
    virtual void updateFieldConfigurationItems(const qint64 &id, const OAIFieldConfigurationItemsDetails &oai_field_configuration_items_details);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_update_field_configuration_scheme_details OAIUpdateFieldConfigurationSchemeDetails [required]
    */
    virtual void updateFieldConfigurationScheme(const qint64 &id, const OAIUpdateFieldConfigurationSchemeDetails &oai_update_field_configuration_scheme_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignFieldConfigurationSchemeToProjectCallback(OAIHttpRequestWorker *worker);
    void createFieldConfigurationCallback(OAIHttpRequestWorker *worker);
    void createFieldConfigurationSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteFieldConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteFieldConfigurationSchemeCallback(OAIHttpRequestWorker *worker);
    void getAllFieldConfigurationSchemesCallback(OAIHttpRequestWorker *worker);
    void getAllFieldConfigurationsCallback(OAIHttpRequestWorker *worker);
    void getFieldConfigurationItemsCallback(OAIHttpRequestWorker *worker);
    void getFieldConfigurationSchemeMappingsCallback(OAIHttpRequestWorker *worker);
    void getFieldConfigurationSchemeProjectMappingCallback(OAIHttpRequestWorker *worker);
    void removeIssueTypesFromGlobalFieldConfigurationSchemeCallback(OAIHttpRequestWorker *worker);
    void setFieldConfigurationSchemeMappingCallback(OAIHttpRequestWorker *worker);
    void updateFieldConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateFieldConfigurationItemsCallback(OAIHttpRequestWorker *worker);
    void updateFieldConfigurationSchemeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignFieldConfigurationSchemeToProjectSignal(QJsonValue summary);
    void createFieldConfigurationSignal(OAIFieldConfiguration summary);
    void createFieldConfigurationSchemeSignal(OAIFieldConfigurationScheme summary);
    void deleteFieldConfigurationSignal(QJsonValue summary);
    void deleteFieldConfigurationSchemeSignal(QJsonValue summary);
    void getAllFieldConfigurationSchemesSignal(OAIPageBeanFieldConfigurationScheme summary);
    void getAllFieldConfigurationsSignal(OAIPageBeanFieldConfigurationDetails summary);
    void getFieldConfigurationItemsSignal(OAIPageBeanFieldConfigurationItem summary);
    void getFieldConfigurationSchemeMappingsSignal(OAIPageBeanFieldConfigurationIssueTypeItem summary);
    void getFieldConfigurationSchemeProjectMappingSignal(OAIPageBeanFieldConfigurationSchemeProjects summary);
    void removeIssueTypesFromGlobalFieldConfigurationSchemeSignal(QJsonValue summary);
    void setFieldConfigurationSchemeMappingSignal(QJsonValue summary);
    void updateFieldConfigurationSignal(QJsonValue summary);
    void updateFieldConfigurationItemsSignal(QJsonValue summary);
    void updateFieldConfigurationSchemeSignal(QJsonValue summary);


    void assignFieldConfigurationSchemeToProjectSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createFieldConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIFieldConfiguration summary);
    void createFieldConfigurationSchemeSignalFull(OAIHttpRequestWorker *worker, OAIFieldConfigurationScheme summary);
    void deleteFieldConfigurationSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteFieldConfigurationSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getAllFieldConfigurationSchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanFieldConfigurationScheme summary);
    void getAllFieldConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanFieldConfigurationDetails summary);
    void getFieldConfigurationItemsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanFieldConfigurationItem summary);
    void getFieldConfigurationSchemeMappingsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanFieldConfigurationIssueTypeItem summary);
    void getFieldConfigurationSchemeProjectMappingSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanFieldConfigurationSchemeProjects summary);
    void removeIssueTypesFromGlobalFieldConfigurationSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void setFieldConfigurationSchemeMappingSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateFieldConfigurationSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateFieldConfigurationItemsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateFieldConfigurationSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use assignFieldConfigurationSchemeToProjectSignalError() instead")
    void assignFieldConfigurationSchemeToProjectSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignFieldConfigurationSchemeToProjectSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldConfigurationSignalError() instead")
    void createFieldConfigurationSignalE(OAIFieldConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldConfigurationSignalError(OAIFieldConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldConfigurationSchemeSignalError() instead")
    void createFieldConfigurationSchemeSignalE(OAIFieldConfigurationScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldConfigurationSchemeSignalError(OAIFieldConfigurationScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldConfigurationSignalError() instead")
    void deleteFieldConfigurationSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldConfigurationSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldConfigurationSchemeSignalError() instead")
    void deleteFieldConfigurationSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldConfigurationSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllFieldConfigurationSchemesSignalError() instead")
    void getAllFieldConfigurationSchemesSignalE(OAIPageBeanFieldConfigurationScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFieldConfigurationSchemesSignalError(OAIPageBeanFieldConfigurationScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllFieldConfigurationsSignalError() instead")
    void getAllFieldConfigurationsSignalE(OAIPageBeanFieldConfigurationDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFieldConfigurationsSignalError(OAIPageBeanFieldConfigurationDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldConfigurationItemsSignalError() instead")
    void getFieldConfigurationItemsSignalE(OAIPageBeanFieldConfigurationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldConfigurationItemsSignalError(OAIPageBeanFieldConfigurationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldConfigurationSchemeMappingsSignalError() instead")
    void getFieldConfigurationSchemeMappingsSignalE(OAIPageBeanFieldConfigurationIssueTypeItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldConfigurationSchemeMappingsSignalError(OAIPageBeanFieldConfigurationIssueTypeItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldConfigurationSchemeProjectMappingSignalError() instead")
    void getFieldConfigurationSchemeProjectMappingSignalE(OAIPageBeanFieldConfigurationSchemeProjects summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldConfigurationSchemeProjectMappingSignalError(OAIPageBeanFieldConfigurationSchemeProjects summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeIssueTypesFromGlobalFieldConfigurationSchemeSignalError() instead")
    void removeIssueTypesFromGlobalFieldConfigurationSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeIssueTypesFromGlobalFieldConfigurationSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFieldConfigurationSchemeMappingSignalError() instead")
    void setFieldConfigurationSchemeMappingSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setFieldConfigurationSchemeMappingSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldConfigurationSignalError() instead")
    void updateFieldConfigurationSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldConfigurationSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldConfigurationItemsSignalError() instead")
    void updateFieldConfigurationItemsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldConfigurationItemsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldConfigurationSchemeSignalError() instead")
    void updateFieldConfigurationSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldConfigurationSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignFieldConfigurationSchemeToProjectSignalErrorFull() instead")
    void assignFieldConfigurationSchemeToProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignFieldConfigurationSchemeToProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldConfigurationSignalErrorFull() instead")
    void createFieldConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldConfigurationSchemeSignalErrorFull() instead")
    void createFieldConfigurationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldConfigurationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldConfigurationSignalErrorFull() instead")
    void deleteFieldConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldConfigurationSchemeSignalErrorFull() instead")
    void deleteFieldConfigurationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldConfigurationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllFieldConfigurationSchemesSignalErrorFull() instead")
    void getAllFieldConfigurationSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFieldConfigurationSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllFieldConfigurationsSignalErrorFull() instead")
    void getAllFieldConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFieldConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldConfigurationItemsSignalErrorFull() instead")
    void getFieldConfigurationItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldConfigurationItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldConfigurationSchemeMappingsSignalErrorFull() instead")
    void getFieldConfigurationSchemeMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldConfigurationSchemeMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldConfigurationSchemeProjectMappingSignalErrorFull() instead")
    void getFieldConfigurationSchemeProjectMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldConfigurationSchemeProjectMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeIssueTypesFromGlobalFieldConfigurationSchemeSignalErrorFull() instead")
    void removeIssueTypesFromGlobalFieldConfigurationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeIssueTypesFromGlobalFieldConfigurationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setFieldConfigurationSchemeMappingSignalErrorFull() instead")
    void setFieldConfigurationSchemeMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setFieldConfigurationSchemeMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldConfigurationSignalErrorFull() instead")
    void updateFieldConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldConfigurationItemsSignalErrorFull() instead")
    void updateFieldConfigurationItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldConfigurationItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldConfigurationSchemeSignalErrorFull() instead")
    void updateFieldConfigurationSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldConfigurationSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
