/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueCustomFieldContextsApi_H
#define OAI_OAIIssueCustomFieldContextsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCustomFieldContext.h"
#include "OAICustomFieldContextDefaultValueUpdate.h"
#include "OAICustomFieldContextUpdateDetails.h"
#include "OAIIssueTypeIds.h"
#include "OAIPageBeanContextForProjectAndIssueType.h"
#include "OAIPageBeanCustomFieldContext.h"
#include "OAIPageBeanCustomFieldContextDefaultValue.h"
#include "OAIPageBeanCustomFieldContextProjectMapping.h"
#include "OAIPageBeanIssueTypeToContextMapping.h"
#include "OAIProjectIds.h"
#include "OAIProjectIssueTypeMappings.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueCustomFieldContextsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueCustomFieldContextsApi(const int timeOut = 0);
    ~OAIIssueCustomFieldContextsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_issue_type_ids OAIIssueTypeIds [required]
    */
    virtual void addIssueTypesToContext(const QString &field_id, const qint64 &context_id, const OAIIssueTypeIds &oai_issue_type_ids);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_project_ids OAIProjectIds [required]
    */
    virtual void assignProjectsToCustomFieldContext(const QString &field_id, const qint64 &context_id, const OAIProjectIds &oai_project_ids);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  oai_create_custom_field_context OAICreateCustomFieldContext [required]
    */
    virtual void createCustomFieldContext(const QString &field_id, const OAICreateCustomFieldContext &oai_create_custom_field_context);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    */
    virtual void deleteCustomFieldContext(const QString &field_id, const qint64 &context_id);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  is_any_issue_type bool [optional]
    * @param[in]  is_global_context bool [optional]
    * @param[in]  context_id QSet<qint64> [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getContextsForField(const QString &field_id, const ::OpenAPI::OptionalParam<bool> &is_any_issue_type = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_global_context = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &context_id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  oai_project_issue_type_mappings OAIProjectIssueTypeMappings [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getCustomFieldContextsForProjectsAndIssueTypes(const QString &field_id, const OAIProjectIssueTypeMappings &oai_project_issue_type_mappings, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id QSet<qint64> [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getDefaultValues(const QString &field_id, const ::OpenAPI::OptionalParam<QSet<qint64>> &context_id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id QList<qint64> [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getIssueTypeMappingsForContexts(const QString &field_id, const ::OpenAPI::OptionalParam<QList<qint64>> &context_id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id QSet<qint64> [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getProjectContextMapping(const QString &field_id, const ::OpenAPI::OptionalParam<QSet<qint64>> &context_id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_project_ids OAIProjectIds [required]
    */
    virtual void removeCustomFieldContextFromProjects(const QString &field_id, const qint64 &context_id, const OAIProjectIds &oai_project_ids);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_issue_type_ids OAIIssueTypeIds [required]
    */
    virtual void removeIssueTypesFromContext(const QString &field_id, const qint64 &context_id, const OAIIssueTypeIds &oai_issue_type_ids);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  oai_custom_field_context_default_value_update OAICustomFieldContextDefaultValueUpdate [required]
    */
    virtual void setDefaultValues(const QString &field_id, const OAICustomFieldContextDefaultValueUpdate &oai_custom_field_context_default_value_update);

    /**
    * @param[in]  field_id QString [required]
    * @param[in]  context_id qint64 [required]
    * @param[in]  oai_custom_field_context_update_details OAICustomFieldContextUpdateDetails [required]
    */
    virtual void updateCustomFieldContext(const QString &field_id, const qint64 &context_id, const OAICustomFieldContextUpdateDetails &oai_custom_field_context_update_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addIssueTypesToContextCallback(OAIHttpRequestWorker *worker);
    void assignProjectsToCustomFieldContextCallback(OAIHttpRequestWorker *worker);
    void createCustomFieldContextCallback(OAIHttpRequestWorker *worker);
    void deleteCustomFieldContextCallback(OAIHttpRequestWorker *worker);
    void getContextsForFieldCallback(OAIHttpRequestWorker *worker);
    void getCustomFieldContextsForProjectsAndIssueTypesCallback(OAIHttpRequestWorker *worker);
    void getDefaultValuesCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeMappingsForContextsCallback(OAIHttpRequestWorker *worker);
    void getProjectContextMappingCallback(OAIHttpRequestWorker *worker);
    void removeCustomFieldContextFromProjectsCallback(OAIHttpRequestWorker *worker);
    void removeIssueTypesFromContextCallback(OAIHttpRequestWorker *worker);
    void setDefaultValuesCallback(OAIHttpRequestWorker *worker);
    void updateCustomFieldContextCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addIssueTypesToContextSignal(QJsonValue summary);
    void assignProjectsToCustomFieldContextSignal(QJsonValue summary);
    void createCustomFieldContextSignal(OAICreateCustomFieldContext summary);
    void deleteCustomFieldContextSignal(QJsonValue summary);
    void getContextsForFieldSignal(OAIPageBeanCustomFieldContext summary);
    void getCustomFieldContextsForProjectsAndIssueTypesSignal(OAIPageBeanContextForProjectAndIssueType summary);
    void getDefaultValuesSignal(OAIPageBeanCustomFieldContextDefaultValue summary);
    void getIssueTypeMappingsForContextsSignal(OAIPageBeanIssueTypeToContextMapping summary);
    void getProjectContextMappingSignal(OAIPageBeanCustomFieldContextProjectMapping summary);
    void removeCustomFieldContextFromProjectsSignal(QJsonValue summary);
    void removeIssueTypesFromContextSignal(QJsonValue summary);
    void setDefaultValuesSignal(QJsonValue summary);
    void updateCustomFieldContextSignal(QJsonValue summary);


    void addIssueTypesToContextSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void assignProjectsToCustomFieldContextSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createCustomFieldContextSignalFull(OAIHttpRequestWorker *worker, OAICreateCustomFieldContext summary);
    void deleteCustomFieldContextSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getContextsForFieldSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanCustomFieldContext summary);
    void getCustomFieldContextsForProjectsAndIssueTypesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanContextForProjectAndIssueType summary);
    void getDefaultValuesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanCustomFieldContextDefaultValue summary);
    void getIssueTypeMappingsForContextsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeToContextMapping summary);
    void getProjectContextMappingSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanCustomFieldContextProjectMapping summary);
    void removeCustomFieldContextFromProjectsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void removeIssueTypesFromContextSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void setDefaultValuesSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateCustomFieldContextSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use addIssueTypesToContextSignalError() instead")
    void addIssueTypesToContextSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addIssueTypesToContextSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignProjectsToCustomFieldContextSignalError() instead")
    void assignProjectsToCustomFieldContextSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignProjectsToCustomFieldContextSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomFieldContextSignalError() instead")
    void createCustomFieldContextSignalE(OAICreateCustomFieldContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldContextSignalError(OAICreateCustomFieldContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFieldContextSignalError() instead")
    void deleteCustomFieldContextSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFieldContextSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContextsForFieldSignalError() instead")
    void getContextsForFieldSignalE(OAIPageBeanCustomFieldContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContextsForFieldSignalError(OAIPageBeanCustomFieldContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldContextsForProjectsAndIssueTypesSignalError() instead")
    void getCustomFieldContextsForProjectsAndIssueTypesSignalE(OAIPageBeanContextForProjectAndIssueType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldContextsForProjectsAndIssueTypesSignalError(OAIPageBeanContextForProjectAndIssueType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultValuesSignalError() instead")
    void getDefaultValuesSignalE(OAIPageBeanCustomFieldContextDefaultValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultValuesSignalError(OAIPageBeanCustomFieldContextDefaultValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeMappingsForContextsSignalError() instead")
    void getIssueTypeMappingsForContextsSignalE(OAIPageBeanIssueTypeToContextMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeMappingsForContextsSignalError(OAIPageBeanIssueTypeToContextMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectContextMappingSignalError() instead")
    void getProjectContextMappingSignalE(OAIPageBeanCustomFieldContextProjectMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectContextMappingSignalError(OAIPageBeanCustomFieldContextProjectMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomFieldContextFromProjectsSignalError() instead")
    void removeCustomFieldContextFromProjectsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomFieldContextFromProjectsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeIssueTypesFromContextSignalError() instead")
    void removeIssueTypesFromContextSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeIssueTypesFromContextSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultValuesSignalError() instead")
    void setDefaultValuesSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultValuesSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldContextSignalError() instead")
    void updateCustomFieldContextSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldContextSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addIssueTypesToContextSignalErrorFull() instead")
    void addIssueTypesToContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addIssueTypesToContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignProjectsToCustomFieldContextSignalErrorFull() instead")
    void assignProjectsToCustomFieldContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignProjectsToCustomFieldContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomFieldContextSignalErrorFull() instead")
    void createCustomFieldContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFieldContextSignalErrorFull() instead")
    void deleteCustomFieldContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFieldContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContextsForFieldSignalErrorFull() instead")
    void getContextsForFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContextsForFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldContextsForProjectsAndIssueTypesSignalErrorFull() instead")
    void getCustomFieldContextsForProjectsAndIssueTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldContextsForProjectsAndIssueTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultValuesSignalErrorFull() instead")
    void getDefaultValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeMappingsForContextsSignalErrorFull() instead")
    void getIssueTypeMappingsForContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeMappingsForContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectContextMappingSignalErrorFull() instead")
    void getProjectContextMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectContextMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomFieldContextFromProjectsSignalErrorFull() instead")
    void removeCustomFieldContextFromProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomFieldContextFromProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeIssueTypesFromContextSignalErrorFull() instead")
    void removeIssueTypesFromContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeIssueTypesFromContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultValuesSignalErrorFull() instead")
    void setDefaultValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldContextSignalErrorFull() instead")
    void updateCustomFieldContextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldContextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
