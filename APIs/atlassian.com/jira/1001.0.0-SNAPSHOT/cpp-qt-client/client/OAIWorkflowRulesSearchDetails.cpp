/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowRulesSearchDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowRulesSearchDetails::OAIWorkflowRulesSearchDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowRulesSearchDetails::OAIWorkflowRulesSearchDetails() {
    this->initializeModel();
}

OAIWorkflowRulesSearchDetails::~OAIWorkflowRulesSearchDetails() {}

void OAIWorkflowRulesSearchDetails::initializeModel() {

    m_invalid_rules_isSet = false;
    m_invalid_rules_isValid = false;

    m_valid_rules_isSet = false;
    m_valid_rules_isValid = false;

    m_workflow_entity_id_isSet = false;
    m_workflow_entity_id_isValid = false;
}

void OAIWorkflowRulesSearchDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowRulesSearchDetails::fromJsonObject(QJsonObject json) {

    m_invalid_rules_isValid = ::OpenAPI::fromJsonValue(m_invalid_rules, json[QString("invalidRules")]);
    m_invalid_rules_isSet = !json[QString("invalidRules")].isNull() && m_invalid_rules_isValid;

    m_valid_rules_isValid = ::OpenAPI::fromJsonValue(m_valid_rules, json[QString("validRules")]);
    m_valid_rules_isSet = !json[QString("validRules")].isNull() && m_valid_rules_isValid;

    m_workflow_entity_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_entity_id, json[QString("workflowEntityId")]);
    m_workflow_entity_id_isSet = !json[QString("workflowEntityId")].isNull() && m_workflow_entity_id_isValid;
}

QString OAIWorkflowRulesSearchDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowRulesSearchDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_invalid_rules.size() > 0) {
        obj.insert(QString("invalidRules"), ::OpenAPI::toJsonValue(m_invalid_rules));
    }
    if (m_valid_rules.size() > 0) {
        obj.insert(QString("validRules"), ::OpenAPI::toJsonValue(m_valid_rules));
    }
    if (m_workflow_entity_id_isSet) {
        obj.insert(QString("workflowEntityId"), ::OpenAPI::toJsonValue(m_workflow_entity_id));
    }
    return obj;
}

QList<QString> OAIWorkflowRulesSearchDetails::getInvalidRules() const {
    return m_invalid_rules;
}
void OAIWorkflowRulesSearchDetails::setInvalidRules(const QList<QString> &invalid_rules) {
    m_invalid_rules = invalid_rules;
    m_invalid_rules_isSet = true;
}

bool OAIWorkflowRulesSearchDetails::is_invalid_rules_Set() const{
    return m_invalid_rules_isSet;
}

bool OAIWorkflowRulesSearchDetails::is_invalid_rules_Valid() const{
    return m_invalid_rules_isValid;
}

QList<OAIWorkflowTransitionRules> OAIWorkflowRulesSearchDetails::getValidRules() const {
    return m_valid_rules;
}
void OAIWorkflowRulesSearchDetails::setValidRules(const QList<OAIWorkflowTransitionRules> &valid_rules) {
    m_valid_rules = valid_rules;
    m_valid_rules_isSet = true;
}

bool OAIWorkflowRulesSearchDetails::is_valid_rules_Set() const{
    return m_valid_rules_isSet;
}

bool OAIWorkflowRulesSearchDetails::is_valid_rules_Valid() const{
    return m_valid_rules_isValid;
}

QString OAIWorkflowRulesSearchDetails::getWorkflowEntityId() const {
    return m_workflow_entity_id;
}
void OAIWorkflowRulesSearchDetails::setWorkflowEntityId(const QString &workflow_entity_id) {
    m_workflow_entity_id = workflow_entity_id;
    m_workflow_entity_id_isSet = true;
}

bool OAIWorkflowRulesSearchDetails::is_workflow_entity_id_Set() const{
    return m_workflow_entity_id_isSet;
}

bool OAIWorkflowRulesSearchDetails::is_workflow_entity_id_Valid() const{
    return m_workflow_entity_id_isValid;
}

bool OAIWorkflowRulesSearchDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invalid_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowRulesSearchDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
