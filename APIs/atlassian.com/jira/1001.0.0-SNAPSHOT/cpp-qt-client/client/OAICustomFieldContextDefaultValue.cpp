/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldContextDefaultValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldContextDefaultValue::OAICustomFieldContextDefaultValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldContextDefaultValue::OAICustomFieldContextDefaultValue() {
    this->initializeModel();
}

OAICustomFieldContextDefaultValue::~OAICustomFieldContextDefaultValue() {}

void OAICustomFieldContextDefaultValue::initializeModel() {

    m_cascading_option_id_isSet = false;
    m_cascading_option_id_isValid = false;

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_option_id_isSet = false;
    m_option_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_option_ids_isSet = false;
    m_option_ids_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_user_filter_isSet = false;
    m_user_filter_isValid = false;

    m_account_ids_isSet = false;
    m_account_ids_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_use_current_isSet = false;
    m_use_current_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_version_order_isSet = false;
    m_version_order_isValid = false;

    m_version_ids_isSet = false;
    m_version_ids_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAICustomFieldContextDefaultValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldContextDefaultValue::fromJsonObject(QJsonObject json) {

    m_cascading_option_id_isValid = ::OpenAPI::fromJsonValue(m_cascading_option_id, json[QString("cascadingOptionId")]);
    m_cascading_option_id_isSet = !json[QString("cascadingOptionId")].isNull() && m_cascading_option_id_isValid;

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("contextId")]);
    m_context_id_isSet = !json[QString("contextId")].isNull() && m_context_id_isValid;

    m_option_id_isValid = ::OpenAPI::fromJsonValue(m_option_id, json[QString("optionId")]);
    m_option_id_isSet = !json[QString("optionId")].isNull() && m_option_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_option_ids_isValid = ::OpenAPI::fromJsonValue(m_option_ids, json[QString("optionIds")]);
    m_option_ids_isSet = !json[QString("optionIds")].isNull() && m_option_ids_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_user_filter_isValid = ::OpenAPI::fromJsonValue(m_user_filter, json[QString("userFilter")]);
    m_user_filter_isSet = !json[QString("userFilter")].isNull() && m_user_filter_isValid;

    m_account_ids_isValid = ::OpenAPI::fromJsonValue(m_account_ids, json[QString("accountIds")]);
    m_account_ids_isSet = !json[QString("accountIds")].isNull() && m_account_ids_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("groupIds")]);
    m_group_ids_isSet = !json[QString("groupIds")].isNull() && m_group_ids_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_use_current_isValid = ::OpenAPI::fromJsonValue(m_use_current, json[QString("useCurrent")]);
    m_use_current_isSet = !json[QString("useCurrent")].isNull() && m_use_current_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_version_order_isValid = ::OpenAPI::fromJsonValue(m_version_order, json[QString("versionOrder")]);
    m_version_order_isSet = !json[QString("versionOrder")].isNull() && m_version_order_isValid;

    m_version_ids_isValid = ::OpenAPI::fromJsonValue(m_version_ids, json[QString("versionIds")]);
    m_version_ids_isSet = !json[QString("versionIds")].isNull() && m_version_ids_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;
}

QString OAICustomFieldContextDefaultValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldContextDefaultValue::asJsonObject() const {
    QJsonObject obj;
    if (m_cascading_option_id_isSet) {
        obj.insert(QString("cascadingOptionId"), ::OpenAPI::toJsonValue(m_cascading_option_id));
    }
    if (m_context_id_isSet) {
        obj.insert(QString("contextId"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_option_id_isSet) {
        obj.insert(QString("optionId"), ::OpenAPI::toJsonValue(m_option_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_option_ids.size() > 0) {
        obj.insert(QString("optionIds"), ::OpenAPI::toJsonValue(m_option_ids));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_user_filter.isSet()) {
        obj.insert(QString("userFilter"), ::OpenAPI::toJsonValue(m_user_filter));
    }
    if (m_account_ids.size() > 0) {
        obj.insert(QString("accountIds"), ::OpenAPI::toJsonValue(m_account_ids));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_ids.size() > 0) {
        obj.insert(QString("groupIds"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_use_current_isSet) {
        obj.insert(QString("useCurrent"), ::OpenAPI::toJsonValue(m_use_current));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_version_order_isSet) {
        obj.insert(QString("versionOrder"), ::OpenAPI::toJsonValue(m_version_order));
    }
    if (m_version_ids.size() > 0) {
        obj.insert(QString("versionIds"), ::OpenAPI::toJsonValue(m_version_ids));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

QString OAICustomFieldContextDefaultValue::getCascadingOptionId() const {
    return m_cascading_option_id;
}
void OAICustomFieldContextDefaultValue::setCascadingOptionId(const QString &cascading_option_id) {
    m_cascading_option_id = cascading_option_id;
    m_cascading_option_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_cascading_option_id_Set() const{
    return m_cascading_option_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_cascading_option_id_Valid() const{
    return m_cascading_option_id_isValid;
}

QString OAICustomFieldContextDefaultValue::getContextId() const {
    return m_context_id;
}
void OAICustomFieldContextDefaultValue::setContextId(const QString &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_context_id_Valid() const{
    return m_context_id_isValid;
}

QString OAICustomFieldContextDefaultValue::getOptionId() const {
    return m_option_id;
}
void OAICustomFieldContextDefaultValue::setOptionId(const QString &option_id) {
    m_option_id = option_id;
    m_option_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_option_id_Set() const{
    return m_option_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_option_id_Valid() const{
    return m_option_id_isValid;
}

QString OAICustomFieldContextDefaultValue::getType() const {
    return m_type;
}
void OAICustomFieldContextDefaultValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomFieldContextDefaultValue::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAICustomFieldContextDefaultValue::getOptionIds() const {
    return m_option_ids;
}
void OAICustomFieldContextDefaultValue::setOptionIds(const QList<QString> &option_ids) {
    m_option_ids = option_ids;
    m_option_ids_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_option_ids_Set() const{
    return m_option_ids_isSet;
}

bool OAICustomFieldContextDefaultValue::is_option_ids_Valid() const{
    return m_option_ids_isValid;
}

QString OAICustomFieldContextDefaultValue::getAccountId() const {
    return m_account_id;
}
void OAICustomFieldContextDefaultValue::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIUserFilter OAICustomFieldContextDefaultValue::getUserFilter() const {
    return m_user_filter;
}
void OAICustomFieldContextDefaultValue::setUserFilter(const OAIUserFilter &user_filter) {
    m_user_filter = user_filter;
    m_user_filter_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_user_filter_Set() const{
    return m_user_filter_isSet;
}

bool OAICustomFieldContextDefaultValue::is_user_filter_Valid() const{
    return m_user_filter_isValid;
}

QList<QString> OAICustomFieldContextDefaultValue::getAccountIds() const {
    return m_account_ids;
}
void OAICustomFieldContextDefaultValue::setAccountIds(const QList<QString> &account_ids) {
    m_account_ids = account_ids;
    m_account_ids_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_account_ids_Set() const{
    return m_account_ids_isSet;
}

bool OAICustomFieldContextDefaultValue::is_account_ids_Valid() const{
    return m_account_ids_isValid;
}

QString OAICustomFieldContextDefaultValue::getGroupId() const {
    return m_group_id;
}
void OAICustomFieldContextDefaultValue::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QSet<QString> OAICustomFieldContextDefaultValue::getGroupIds() const {
    return m_group_ids;
}
void OAICustomFieldContextDefaultValue::setGroupIds(const QSet<QString> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAICustomFieldContextDefaultValue::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAICustomFieldContextDefaultValue::getDate() const {
    return m_date;
}
void OAICustomFieldContextDefaultValue::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_date_Set() const{
    return m_date_isSet;
}

bool OAICustomFieldContextDefaultValue::is_date_Valid() const{
    return m_date_isValid;
}

bool OAICustomFieldContextDefaultValue::isUseCurrent() const {
    return m_use_current;
}
void OAICustomFieldContextDefaultValue::setUseCurrent(const bool &use_current) {
    m_use_current = use_current;
    m_use_current_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_use_current_Set() const{
    return m_use_current_isSet;
}

bool OAICustomFieldContextDefaultValue::is_use_current_Valid() const{
    return m_use_current_isValid;
}

QString OAICustomFieldContextDefaultValue::getDateTime() const {
    return m_date_time;
}
void OAICustomFieldContextDefaultValue::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAICustomFieldContextDefaultValue::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAICustomFieldContextDefaultValue::getUrl() const {
    return m_url;
}
void OAICustomFieldContextDefaultValue::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_url_Set() const{
    return m_url_isSet;
}

bool OAICustomFieldContextDefaultValue::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICustomFieldContextDefaultValue::getProjectId() const {
    return m_project_id;
}
void OAICustomFieldContextDefaultValue::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_project_id_Valid() const{
    return m_project_id_isValid;
}

double OAICustomFieldContextDefaultValue::getNumber() const {
    return m_number;
}
void OAICustomFieldContextDefaultValue::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_number_Set() const{
    return m_number_isSet;
}

bool OAICustomFieldContextDefaultValue::is_number_Valid() const{
    return m_number_isValid;
}

QList<QString> OAICustomFieldContextDefaultValue::getLabels() const {
    return m_labels;
}
void OAICustomFieldContextDefaultValue::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICustomFieldContextDefaultValue::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICustomFieldContextDefaultValue::getText() const {
    return m_text;
}
void OAICustomFieldContextDefaultValue::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_text_Set() const{
    return m_text_isSet;
}

bool OAICustomFieldContextDefaultValue::is_text_Valid() const{
    return m_text_isValid;
}

QString OAICustomFieldContextDefaultValue::getVersionId() const {
    return m_version_id;
}
void OAICustomFieldContextDefaultValue::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAICustomFieldContextDefaultValue::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAICustomFieldContextDefaultValue::getVersionOrder() const {
    return m_version_order;
}
void OAICustomFieldContextDefaultValue::setVersionOrder(const QString &version_order) {
    m_version_order = version_order;
    m_version_order_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_version_order_Set() const{
    return m_version_order_isSet;
}

bool OAICustomFieldContextDefaultValue::is_version_order_Valid() const{
    return m_version_order_isValid;
}

QSet<QString> OAICustomFieldContextDefaultValue::getVersionIds() const {
    return m_version_ids;
}
void OAICustomFieldContextDefaultValue::setVersionIds(const QSet<QString> &version_ids) {
    m_version_ids = version_ids;
    m_version_ids_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_version_ids_Set() const{
    return m_version_ids_isSet;
}

bool OAICustomFieldContextDefaultValue::is_version_ids_Valid() const{
    return m_version_ids_isValid;
}

QList<QString> OAICustomFieldContextDefaultValue::getValues() const {
    return m_values;
}
void OAICustomFieldContextDefaultValue::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_values_Set() const{
    return m_values_isSet;
}

bool OAICustomFieldContextDefaultValue::is_values_Valid() const{
    return m_values_isValid;
}

OAIObject OAICustomFieldContextDefaultValue::getObject() const {
    return m_object;
}
void OAICustomFieldContextDefaultValue::setObject(const OAIObject &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAICustomFieldContextDefaultValue::is_object_Set() const{
    return m_object_isSet;
}

bool OAICustomFieldContextDefaultValue::is_object_Valid() const{
    return m_object_isValid;
}

bool OAICustomFieldContextDefaultValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cascading_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldContextDefaultValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_id_isValid && m_option_id_isValid && m_type_isValid && m_option_ids_isValid && m_account_id_isValid && m_user_filter_isValid && m_account_ids_isValid && m_group_id_isValid && m_group_ids_isValid && m_url_isValid && m_project_id_isValid && m_number_isValid && m_labels_isValid && m_version_id_isValid && m_version_ids_isValid && true;
}

} // namespace OpenAPI
