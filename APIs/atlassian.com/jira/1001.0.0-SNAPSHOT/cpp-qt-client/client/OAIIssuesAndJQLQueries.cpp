/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuesAndJQLQueries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuesAndJQLQueries::OAIIssuesAndJQLQueries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuesAndJQLQueries::OAIIssuesAndJQLQueries() {
    this->initializeModel();
}

OAIIssuesAndJQLQueries::~OAIIssuesAndJQLQueries() {}

void OAIIssuesAndJQLQueries::initializeModel() {

    m_issue_ids_isSet = false;
    m_issue_ids_isValid = false;

    m_jqls_isSet = false;
    m_jqls_isValid = false;
}

void OAIIssuesAndJQLQueries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuesAndJQLQueries::fromJsonObject(QJsonObject json) {

    m_issue_ids_isValid = ::OpenAPI::fromJsonValue(m_issue_ids, json[QString("issueIds")]);
    m_issue_ids_isSet = !json[QString("issueIds")].isNull() && m_issue_ids_isValid;

    m_jqls_isValid = ::OpenAPI::fromJsonValue(m_jqls, json[QString("jqls")]);
    m_jqls_isSet = !json[QString("jqls")].isNull() && m_jqls_isValid;
}

QString OAIIssuesAndJQLQueries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuesAndJQLQueries::asJsonObject() const {
    QJsonObject obj;
    if (m_issue_ids.size() > 0) {
        obj.insert(QString("issueIds"), ::OpenAPI::toJsonValue(m_issue_ids));
    }
    if (m_jqls.size() > 0) {
        obj.insert(QString("jqls"), ::OpenAPI::toJsonValue(m_jqls));
    }
    return obj;
}

QSet<qint64> OAIIssuesAndJQLQueries::getIssueIds() const {
    return m_issue_ids;
}
void OAIIssuesAndJQLQueries::setIssueIds(const QSet<qint64> &issue_ids) {
    m_issue_ids = issue_ids;
    m_issue_ids_isSet = true;
}

bool OAIIssuesAndJQLQueries::is_issue_ids_Set() const{
    return m_issue_ids_isSet;
}

bool OAIIssuesAndJQLQueries::is_issue_ids_Valid() const{
    return m_issue_ids_isValid;
}

QList<QString> OAIIssuesAndJQLQueries::getJqls() const {
    return m_jqls;
}
void OAIIssuesAndJQLQueries::setJqls(const QList<QString> &jqls) {
    m_jqls = jqls;
    m_jqls_isSet = true;
}

bool OAIIssuesAndJQLQueries::is_jqls_Set() const{
    return m_jqls_isSet;
}

bool OAIIssuesAndJQLQueries::is_jqls_Valid() const{
    return m_jqls_isValid;
}

bool OAIIssuesAndJQLQueries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jqls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuesAndJQLQueries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_issue_ids_isValid && m_jqls_isValid && true;
}

} // namespace OpenAPI
