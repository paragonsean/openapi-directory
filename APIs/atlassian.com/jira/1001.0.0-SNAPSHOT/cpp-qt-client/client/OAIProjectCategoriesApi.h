/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectCategoriesApi_H
#define OAI_OAIProjectCategoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProjectCategory.h"
#include "OAIUpdatedProjectCategory.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectCategoriesApi : public QObject {
    Q_OBJECT

public:
    OAIProjectCategoriesApi(const int timeOut = 0);
    ~OAIProjectCategoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_project_category OAIProjectCategory [required]
    */
    virtual void createProjectCategory(const OAIProjectCategory &oai_project_category);


    virtual void getAllProjectCategories();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectCategoryById(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void removeProjectCategory(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_project_category OAIProjectCategory [required]
    */
    virtual void updateProjectCategory(const qint64 &id, const OAIProjectCategory &oai_project_category);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProjectCategoryCallback(OAIHttpRequestWorker *worker);
    void getAllProjectCategoriesCallback(OAIHttpRequestWorker *worker);
    void getProjectCategoryByIdCallback(OAIHttpRequestWorker *worker);
    void removeProjectCategoryCallback(OAIHttpRequestWorker *worker);
    void updateProjectCategoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProjectCategorySignal(OAIProjectCategory summary);
    void getAllProjectCategoriesSignal(QList<OAIProjectCategory> summary);
    void getProjectCategoryByIdSignal(OAIProjectCategory summary);
    void removeProjectCategorySignal();
    void updateProjectCategorySignal(OAIUpdatedProjectCategory summary);


    void createProjectCategorySignalFull(OAIHttpRequestWorker *worker, OAIProjectCategory summary);
    void getAllProjectCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCategory> summary);
    void getProjectCategoryByIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectCategory summary);
    void removeProjectCategorySignalFull(OAIHttpRequestWorker *worker);
    void updateProjectCategorySignalFull(OAIHttpRequestWorker *worker, OAIUpdatedProjectCategory summary);

    Q_DECL_DEPRECATED_X("Use createProjectCategorySignalError() instead")
    void createProjectCategorySignalE(OAIProjectCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectCategorySignalError(OAIProjectCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectCategoriesSignalError() instead")
    void getAllProjectCategoriesSignalE(QList<OAIProjectCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectCategoriesSignalError(QList<OAIProjectCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectCategoryByIdSignalError() instead")
    void getProjectCategoryByIdSignalE(OAIProjectCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectCategoryByIdSignalError(OAIProjectCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProjectCategorySignalError() instead")
    void removeProjectCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeProjectCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectCategorySignalError() instead")
    void updateProjectCategorySignalE(OAIUpdatedProjectCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectCategorySignalError(OAIUpdatedProjectCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProjectCategorySignalErrorFull() instead")
    void createProjectCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectCategoriesSignalErrorFull() instead")
    void getAllProjectCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectCategoryByIdSignalErrorFull() instead")
    void getProjectCategoryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectCategoryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProjectCategorySignalErrorFull() instead")
    void removeProjectCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeProjectCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectCategorySignalErrorFull() instead")
    void updateProjectCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
