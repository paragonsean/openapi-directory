/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldContextDefaultValueDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldContextDefaultValueDate::OAICustomFieldContextDefaultValueDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldContextDefaultValueDate::OAICustomFieldContextDefaultValueDate() {
    this->initializeModel();
}

OAICustomFieldContextDefaultValueDate::~OAICustomFieldContextDefaultValueDate() {}

void OAICustomFieldContextDefaultValueDate::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_use_current_isSet = false;
    m_use_current_isValid = false;
}

void OAICustomFieldContextDefaultValueDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldContextDefaultValueDate::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_use_current_isValid = ::OpenAPI::fromJsonValue(m_use_current, json[QString("useCurrent")]);
    m_use_current_isSet = !json[QString("useCurrent")].isNull() && m_use_current_isValid;
}

QString OAICustomFieldContextDefaultValueDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldContextDefaultValueDate::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_use_current_isSet) {
        obj.insert(QString("useCurrent"), ::OpenAPI::toJsonValue(m_use_current));
    }
    return obj;
}

QString OAICustomFieldContextDefaultValueDate::getDate() const {
    return m_date;
}
void OAICustomFieldContextDefaultValueDate::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICustomFieldContextDefaultValueDate::is_date_Set() const{
    return m_date_isSet;
}

bool OAICustomFieldContextDefaultValueDate::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICustomFieldContextDefaultValueDate::getType() const {
    return m_type;
}
void OAICustomFieldContextDefaultValueDate::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomFieldContextDefaultValueDate::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomFieldContextDefaultValueDate::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICustomFieldContextDefaultValueDate::isUseCurrent() const {
    return m_use_current;
}
void OAICustomFieldContextDefaultValueDate::setUseCurrent(const bool &use_current) {
    m_use_current = use_current;
    m_use_current_isSet = true;
}

bool OAICustomFieldContextDefaultValueDate::is_use_current_Set() const{
    return m_use_current_isSet;
}

bool OAICustomFieldContextDefaultValueDate::is_use_current_Valid() const{
    return m_use_current_isValid;
}

bool OAICustomFieldContextDefaultValueDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_current_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldContextDefaultValueDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
