/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkOperationErrorResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkOperationErrorResult::OAIBulkOperationErrorResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkOperationErrorResult::OAIBulkOperationErrorResult() {
    this->initializeModel();
}

OAIBulkOperationErrorResult::~OAIBulkOperationErrorResult() {}

void OAIBulkOperationErrorResult::initializeModel() {

    m_element_errors_isSet = false;
    m_element_errors_isValid = false;

    m_failed_element_number_isSet = false;
    m_failed_element_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBulkOperationErrorResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkOperationErrorResult::fromJsonObject(QJsonObject json) {

    m_element_errors_isValid = ::OpenAPI::fromJsonValue(m_element_errors, json[QString("elementErrors")]);
    m_element_errors_isSet = !json[QString("elementErrors")].isNull() && m_element_errors_isValid;

    m_failed_element_number_isValid = ::OpenAPI::fromJsonValue(m_failed_element_number, json[QString("failedElementNumber")]);
    m_failed_element_number_isSet = !json[QString("failedElementNumber")].isNull() && m_failed_element_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBulkOperationErrorResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkOperationErrorResult::asJsonObject() const {
    QJsonObject obj;
    if (m_element_errors.isSet()) {
        obj.insert(QString("elementErrors"), ::OpenAPI::toJsonValue(m_element_errors));
    }
    if (m_failed_element_number_isSet) {
        obj.insert(QString("failedElementNumber"), ::OpenAPI::toJsonValue(m_failed_element_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIErrorCollection OAIBulkOperationErrorResult::getElementErrors() const {
    return m_element_errors;
}
void OAIBulkOperationErrorResult::setElementErrors(const OAIErrorCollection &element_errors) {
    m_element_errors = element_errors;
    m_element_errors_isSet = true;
}

bool OAIBulkOperationErrorResult::is_element_errors_Set() const{
    return m_element_errors_isSet;
}

bool OAIBulkOperationErrorResult::is_element_errors_Valid() const{
    return m_element_errors_isValid;
}

qint32 OAIBulkOperationErrorResult::getFailedElementNumber() const {
    return m_failed_element_number;
}
void OAIBulkOperationErrorResult::setFailedElementNumber(const qint32 &failed_element_number) {
    m_failed_element_number = failed_element_number;
    m_failed_element_number_isSet = true;
}

bool OAIBulkOperationErrorResult::is_failed_element_number_Set() const{
    return m_failed_element_number_isSet;
}

bool OAIBulkOperationErrorResult::is_failed_element_number_Valid() const{
    return m_failed_element_number_isValid;
}

qint32 OAIBulkOperationErrorResult::getStatus() const {
    return m_status;
}
void OAIBulkOperationErrorResult::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBulkOperationErrorResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBulkOperationErrorResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBulkOperationErrorResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_element_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkOperationErrorResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
