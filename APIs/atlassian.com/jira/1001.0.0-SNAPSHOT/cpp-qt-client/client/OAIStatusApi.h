/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatusApi_H
#define OAI_OAIStatusApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJiraStatus.h"
#include "OAIPageOfStatuses.h"
#include "OAIStatusCreateRequest.h"
#include "OAIStatusUpdateRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatusApi : public QObject {
    Q_OBJECT

public:
    OAIStatusApi(const int timeOut = 0);
    ~OAIStatusApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_status_create_request OAIStatusCreateRequest [required]
    */
    virtual void createStatuses(const OAIStatusCreateRequest &oai_status_create_request);

    /**
    * @param[in]  id QList<QString> [optional]
    */
    virtual void deleteStatusesById(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  id QList<QString> [optional]
    */
    virtual void getStatusesById(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  search_string QString [optional]
    * @param[in]  status_category QString [optional]
    */
    virtual void search(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_category = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_status_update_request OAIStatusUpdateRequest [required]
    */
    virtual void updateStatuses(const OAIStatusUpdateRequest &oai_status_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createStatusesCallback(OAIHttpRequestWorker *worker);
    void deleteStatusesByIdCallback(OAIHttpRequestWorker *worker);
    void getStatusesByIdCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void updateStatusesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createStatusesSignal(QList<OAIJiraStatus> summary);
    void deleteStatusesByIdSignal(QJsonValue summary);
    void getStatusesByIdSignal(QList<OAIJiraStatus> summary);
    void searchSignal(OAIPageOfStatuses summary);
    void updateStatusesSignal(QJsonValue summary);


    void createStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIJiraStatus> summary);
    void deleteStatusesByIdSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getStatusesByIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIJiraStatus> summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, OAIPageOfStatuses summary);
    void updateStatusesSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use createStatusesSignalError() instead")
    void createStatusesSignalE(QList<OAIJiraStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStatusesSignalError(QList<OAIJiraStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStatusesByIdSignalError() instead")
    void deleteStatusesByIdSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStatusesByIdSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusesByIdSignalError() instead")
    void getStatusesByIdSignalE(QList<OAIJiraStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusesByIdSignalError(QList<OAIJiraStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(OAIPageOfStatuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(OAIPageOfStatuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStatusesSignalError() instead")
    void updateStatusesSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStatusesSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createStatusesSignalErrorFull() instead")
    void createStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStatusesByIdSignalErrorFull() instead")
    void deleteStatusesByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStatusesByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusesByIdSignalErrorFull() instead")
    void getStatusesByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusesByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStatusesSignalErrorFull() instead")
    void updateStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
