/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueCustomFieldOptionsAppsApi_H
#define OAI_OAIIssueCustomFieldOptionsAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIssueFieldOption.h"
#include "OAIIssueFieldOptionCreateBean.h"
#include "OAIPageBeanIssueFieldOption.h"
#include "OAITaskProgressBeanRemoveOptionFromIssuesResult.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueCustomFieldOptionsAppsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueCustomFieldOptionsAppsApi(const int timeOut = 0);
    ~OAIIssueCustomFieldOptionsAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  oai_issue_field_option_create_bean OAIIssueFieldOptionCreateBean [required]
    */
    virtual void createIssueFieldOption(const QString &field_key, const OAIIssueFieldOptionCreateBean &oai_issue_field_option_create_bean);

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  option_id qint64 [required]
    */
    virtual void deleteIssueFieldOption(const QString &field_key, const qint64 &option_id);

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getAllIssueFieldOptions(const QString &field_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  option_id qint64 [required]
    */
    virtual void getIssueFieldOption(const QString &field_key, const qint64 &option_id);

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  project_id qint64 [optional]
    */
    virtual void getSelectableIssueFieldOptions(const QString &field_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &project_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  project_id qint64 [optional]
    */
    virtual void getVisibleIssueFieldOptions(const QString &field_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &project_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  option_id qint64 [required]
    * @param[in]  replace_with qint64 [optional]
    * @param[in]  jql QString [optional]
    * @param[in]  override_screen_security bool [optional]
    * @param[in]  override_editable_flag bool [optional]
    */
    virtual void replaceIssueFieldOption(const QString &field_key, const qint64 &option_id, const ::OpenAPI::OptionalParam<qint64> &replace_with = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &jql = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_screen_security = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  field_key QString [required]
    * @param[in]  option_id qint64 [required]
    * @param[in]  oai_issue_field_option OAIIssueFieldOption [required]
    */
    virtual void updateIssueFieldOption(const QString &field_key, const qint64 &option_id, const OAIIssueFieldOption &oai_issue_field_option);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIssueFieldOptionCallback(OAIHttpRequestWorker *worker);
    void deleteIssueFieldOptionCallback(OAIHttpRequestWorker *worker);
    void getAllIssueFieldOptionsCallback(OAIHttpRequestWorker *worker);
    void getIssueFieldOptionCallback(OAIHttpRequestWorker *worker);
    void getSelectableIssueFieldOptionsCallback(OAIHttpRequestWorker *worker);
    void getVisibleIssueFieldOptionsCallback(OAIHttpRequestWorker *worker);
    void replaceIssueFieldOptionCallback(OAIHttpRequestWorker *worker);
    void updateIssueFieldOptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIssueFieldOptionSignal(OAIIssueFieldOption summary);
    void deleteIssueFieldOptionSignal(QJsonValue summary);
    void getAllIssueFieldOptionsSignal(OAIPageBeanIssueFieldOption summary);
    void getIssueFieldOptionSignal(OAIIssueFieldOption summary);
    void getSelectableIssueFieldOptionsSignal(OAIPageBeanIssueFieldOption summary);
    void getVisibleIssueFieldOptionsSignal(OAIPageBeanIssueFieldOption summary);
    void replaceIssueFieldOptionSignal();
    void updateIssueFieldOptionSignal(OAIIssueFieldOption summary);


    void createIssueFieldOptionSignalFull(OAIHttpRequestWorker *worker, OAIIssueFieldOption summary);
    void deleteIssueFieldOptionSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getAllIssueFieldOptionsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueFieldOption summary);
    void getIssueFieldOptionSignalFull(OAIHttpRequestWorker *worker, OAIIssueFieldOption summary);
    void getSelectableIssueFieldOptionsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueFieldOption summary);
    void getVisibleIssueFieldOptionsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueFieldOption summary);
    void replaceIssueFieldOptionSignalFull(OAIHttpRequestWorker *worker);
    void updateIssueFieldOptionSignalFull(OAIHttpRequestWorker *worker, OAIIssueFieldOption summary);

    Q_DECL_DEPRECATED_X("Use createIssueFieldOptionSignalError() instead")
    void createIssueFieldOptionSignalE(OAIIssueFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueFieldOptionSignalError(OAIIssueFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueFieldOptionSignalError() instead")
    void deleteIssueFieldOptionSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueFieldOptionSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIssueFieldOptionsSignalError() instead")
    void getAllIssueFieldOptionsSignalE(OAIPageBeanIssueFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIssueFieldOptionsSignalError(OAIPageBeanIssueFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueFieldOptionSignalError() instead")
    void getIssueFieldOptionSignalE(OAIIssueFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueFieldOptionSignalError(OAIIssueFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelectableIssueFieldOptionsSignalError() instead")
    void getSelectableIssueFieldOptionsSignalE(OAIPageBeanIssueFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelectableIssueFieldOptionsSignalError(OAIPageBeanIssueFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVisibleIssueFieldOptionsSignalError() instead")
    void getVisibleIssueFieldOptionsSignalE(OAIPageBeanIssueFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVisibleIssueFieldOptionsSignalError(OAIPageBeanIssueFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceIssueFieldOptionSignalError() instead")
    void replaceIssueFieldOptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replaceIssueFieldOptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueFieldOptionSignalError() instead")
    void updateIssueFieldOptionSignalE(OAIIssueFieldOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueFieldOptionSignalError(OAIIssueFieldOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIssueFieldOptionSignalErrorFull() instead")
    void createIssueFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueFieldOptionSignalErrorFull() instead")
    void deleteIssueFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIssueFieldOptionsSignalErrorFull() instead")
    void getAllIssueFieldOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIssueFieldOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueFieldOptionSignalErrorFull() instead")
    void getIssueFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelectableIssueFieldOptionsSignalErrorFull() instead")
    void getSelectableIssueFieldOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelectableIssueFieldOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVisibleIssueFieldOptionsSignalErrorFull() instead")
    void getVisibleIssueFieldOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVisibleIssueFieldOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceIssueFieldOptionSignalErrorFull() instead")
    void replaceIssueFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceIssueFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueFieldOptionSignalErrorFull() instead")
    void updateIssueFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
