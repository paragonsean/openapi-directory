/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleErrorCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleErrorCollection::OAISimpleErrorCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleErrorCollection::OAISimpleErrorCollection() {
    this->initializeModel();
}

OAISimpleErrorCollection::~OAISimpleErrorCollection() {}

void OAISimpleErrorCollection::initializeModel() {

    m_error_messages_isSet = false;
    m_error_messages_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_http_status_code_isSet = false;
    m_http_status_code_isValid = false;
}

void OAISimpleErrorCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleErrorCollection::fromJsonObject(QJsonObject json) {

    m_error_messages_isValid = ::OpenAPI::fromJsonValue(m_error_messages, json[QString("errorMessages")]);
    m_error_messages_isSet = !json[QString("errorMessages")].isNull() && m_error_messages_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_http_status_code_isValid = ::OpenAPI::fromJsonValue(m_http_status_code, json[QString("httpStatusCode")]);
    m_http_status_code_isSet = !json[QString("httpStatusCode")].isNull() && m_http_status_code_isValid;
}

QString OAISimpleErrorCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleErrorCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_error_messages.size() > 0) {
        obj.insert(QString("errorMessages"), ::OpenAPI::toJsonValue(m_error_messages));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_http_status_code_isSet) {
        obj.insert(QString("httpStatusCode"), ::OpenAPI::toJsonValue(m_http_status_code));
    }
    return obj;
}

QList<QString> OAISimpleErrorCollection::getErrorMessages() const {
    return m_error_messages;
}
void OAISimpleErrorCollection::setErrorMessages(const QList<QString> &error_messages) {
    m_error_messages = error_messages;
    m_error_messages_isSet = true;
}

bool OAISimpleErrorCollection::is_error_messages_Set() const{
    return m_error_messages_isSet;
}

bool OAISimpleErrorCollection::is_error_messages_Valid() const{
    return m_error_messages_isValid;
}

QMap<QString, QString> OAISimpleErrorCollection::getErrors() const {
    return m_errors;
}
void OAISimpleErrorCollection::setErrors(const QMap<QString, QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAISimpleErrorCollection::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAISimpleErrorCollection::is_errors_Valid() const{
    return m_errors_isValid;
}

qint32 OAISimpleErrorCollection::getHttpStatusCode() const {
    return m_http_status_code;
}
void OAISimpleErrorCollection::setHttpStatusCode(const qint32 &http_status_code) {
    m_http_status_code = http_status_code;
    m_http_status_code_isSet = true;
}

bool OAISimpleErrorCollection::is_http_status_code_Set() const{
    return m_http_status_code_isSet;
}

bool OAISimpleErrorCollection::is_http_status_code_Valid() const{
    return m_http_status_code_isValid;
}

bool OAISimpleErrorCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleErrorCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
