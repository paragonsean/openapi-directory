/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJiraExpressionForAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJiraExpressionForAnalysis::OAIJiraExpressionForAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJiraExpressionForAnalysis::OAIJiraExpressionForAnalysis() {
    this->initializeModel();
}

OAIJiraExpressionForAnalysis::~OAIJiraExpressionForAnalysis() {}

void OAIJiraExpressionForAnalysis::initializeModel() {

    m_context_variables_isSet = false;
    m_context_variables_isValid = false;

    m_expressions_isSet = false;
    m_expressions_isValid = false;
}

void OAIJiraExpressionForAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJiraExpressionForAnalysis::fromJsonObject(QJsonObject json) {

    m_context_variables_isValid = ::OpenAPI::fromJsonValue(m_context_variables, json[QString("contextVariables")]);
    m_context_variables_isSet = !json[QString("contextVariables")].isNull() && m_context_variables_isValid;

    m_expressions_isValid = ::OpenAPI::fromJsonValue(m_expressions, json[QString("expressions")]);
    m_expressions_isSet = !json[QString("expressions")].isNull() && m_expressions_isValid;
}

QString OAIJiraExpressionForAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJiraExpressionForAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_context_variables.size() > 0) {
        obj.insert(QString("contextVariables"), ::OpenAPI::toJsonValue(m_context_variables));
    }
    if (m_expressions.size() > 0) {
        obj.insert(QString("expressions"), ::OpenAPI::toJsonValue(m_expressions));
    }
    return obj;
}

QMap<QString, QString> OAIJiraExpressionForAnalysis::getContextVariables() const {
    return m_context_variables;
}
void OAIJiraExpressionForAnalysis::setContextVariables(const QMap<QString, QString> &context_variables) {
    m_context_variables = context_variables;
    m_context_variables_isSet = true;
}

bool OAIJiraExpressionForAnalysis::is_context_variables_Set() const{
    return m_context_variables_isSet;
}

bool OAIJiraExpressionForAnalysis::is_context_variables_Valid() const{
    return m_context_variables_isValid;
}

QList<QString> OAIJiraExpressionForAnalysis::getExpressions() const {
    return m_expressions;
}
void OAIJiraExpressionForAnalysis::setExpressions(const QList<QString> &expressions) {
    m_expressions = expressions;
    m_expressions_isSet = true;
}

bool OAIJiraExpressionForAnalysis::is_expressions_Set() const{
    return m_expressions_isSet;
}

bool OAIJiraExpressionForAnalysis::is_expressions_Valid() const{
    return m_expressions_isValid;
}

bool OAIJiraExpressionForAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJiraExpressionForAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expressions_isValid && true;
}

} // namespace OpenAPI
