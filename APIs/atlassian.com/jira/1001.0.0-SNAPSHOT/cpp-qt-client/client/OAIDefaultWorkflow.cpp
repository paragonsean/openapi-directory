/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultWorkflow::OAIDefaultWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultWorkflow::OAIDefaultWorkflow() {
    this->initializeModel();
}

OAIDefaultWorkflow::~OAIDefaultWorkflow() {}

void OAIDefaultWorkflow::initializeModel() {

    m_update_draft_if_needed_isSet = false;
    m_update_draft_if_needed_isValid = false;

    m_workflow_isSet = false;
    m_workflow_isValid = false;
}

void OAIDefaultWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultWorkflow::fromJsonObject(QJsonObject json) {

    m_update_draft_if_needed_isValid = ::OpenAPI::fromJsonValue(m_update_draft_if_needed, json[QString("updateDraftIfNeeded")]);
    m_update_draft_if_needed_isSet = !json[QString("updateDraftIfNeeded")].isNull() && m_update_draft_if_needed_isValid;

    m_workflow_isValid = ::OpenAPI::fromJsonValue(m_workflow, json[QString("workflow")]);
    m_workflow_isSet = !json[QString("workflow")].isNull() && m_workflow_isValid;
}

QString OAIDefaultWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_update_draft_if_needed_isSet) {
        obj.insert(QString("updateDraftIfNeeded"), ::OpenAPI::toJsonValue(m_update_draft_if_needed));
    }
    if (m_workflow_isSet) {
        obj.insert(QString("workflow"), ::OpenAPI::toJsonValue(m_workflow));
    }
    return obj;
}

bool OAIDefaultWorkflow::isUpdateDraftIfNeeded() const {
    return m_update_draft_if_needed;
}
void OAIDefaultWorkflow::setUpdateDraftIfNeeded(const bool &update_draft_if_needed) {
    m_update_draft_if_needed = update_draft_if_needed;
    m_update_draft_if_needed_isSet = true;
}

bool OAIDefaultWorkflow::is_update_draft_if_needed_Set() const{
    return m_update_draft_if_needed_isSet;
}

bool OAIDefaultWorkflow::is_update_draft_if_needed_Valid() const{
    return m_update_draft_if_needed_isValid;
}

QString OAIDefaultWorkflow::getWorkflow() const {
    return m_workflow;
}
void OAIDefaultWorkflow::setWorkflow(const QString &workflow) {
    m_workflow = workflow;
    m_workflow_isSet = true;
}

bool OAIDefaultWorkflow::is_workflow_Set() const{
    return m_workflow_isSet;
}

bool OAIDefaultWorkflow::is_workflow_Valid() const{
    return m_workflow_isValid;
}

bool OAIDefaultWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_draft_if_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_isValid && true;
}

} // namespace OpenAPI
