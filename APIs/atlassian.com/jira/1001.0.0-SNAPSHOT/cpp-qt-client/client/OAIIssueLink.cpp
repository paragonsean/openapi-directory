/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueLink::OAIIssueLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueLink::OAIIssueLink() {
    this->initializeModel();
}

OAIIssueLink::~OAIIssueLink() {}

void OAIIssueLink::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_inward_issue_isSet = false;
    m_inward_issue_isValid = false;

    m_outward_issue_isSet = false;
    m_outward_issue_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIssueLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueLink::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inward_issue_isValid = ::OpenAPI::fromJsonValue(m_inward_issue, json[QString("inwardIssue")]);
    m_inward_issue_isSet = !json[QString("inwardIssue")].isNull() && m_inward_issue_isValid;

    m_outward_issue_isValid = ::OpenAPI::fromJsonValue(m_outward_issue, json[QString("outwardIssue")]);
    m_outward_issue_isSet = !json[QString("outwardIssue")].isNull() && m_outward_issue_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIssueLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueLink::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inward_issue.isSet()) {
        obj.insert(QString("inwardIssue"), ::OpenAPI::toJsonValue(m_inward_issue));
    }
    if (m_outward_issue.isSet()) {
        obj.insert(QString("outwardIssue"), ::OpenAPI::toJsonValue(m_outward_issue));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIssueLink::getId() const {
    return m_id;
}
void OAIIssueLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueLink::is_id_Valid() const{
    return m_id_isValid;
}

OAILinkedIssue OAIIssueLink::getInwardIssue() const {
    return m_inward_issue;
}
void OAIIssueLink::setInwardIssue(const OAILinkedIssue &inward_issue) {
    m_inward_issue = inward_issue;
    m_inward_issue_isSet = true;
}

bool OAIIssueLink::is_inward_issue_Set() const{
    return m_inward_issue_isSet;
}

bool OAIIssueLink::is_inward_issue_Valid() const{
    return m_inward_issue_isValid;
}

OAILinkedIssue OAIIssueLink::getOutwardIssue() const {
    return m_outward_issue;
}
void OAIIssueLink::setOutwardIssue(const OAILinkedIssue &outward_issue) {
    m_outward_issue = outward_issue;
    m_outward_issue_isSet = true;
}

bool OAIIssueLink::is_outward_issue_Set() const{
    return m_outward_issue_isSet;
}

bool OAIIssueLink::is_outward_issue_Valid() const{
    return m_outward_issue_isValid;
}

QString OAIIssueLink::getSelf() const {
    return m_self;
}
void OAIIssueLink::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIIssueLink::is_self_Set() const{
    return m_self_isSet;
}

bool OAIIssueLink::is_self_Valid() const{
    return m_self_isValid;
}

OAIIssueLinkType OAIIssueLink::getType() const {
    return m_type;
}
void OAIIssueLink::setType(const OAIIssueLinkType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssueLink::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssueLink::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIssueLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inward_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outward_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inward_issue_isValid && m_outward_issue_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
