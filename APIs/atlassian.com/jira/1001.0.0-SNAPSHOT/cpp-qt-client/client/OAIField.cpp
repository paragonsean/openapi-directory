/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_contexts_count_isSet = false;
    m_contexts_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_is_unscreenable_isSet = false;
    m_is_unscreenable_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_used_isSet = false;
    m_last_used_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_projects_count_isSet = false;
    m_projects_count_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_screens_count_isSet = false;
    m_screens_count_isValid = false;

    m_searcher_key_isSet = false;
    m_searcher_key_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_contexts_count_isValid = ::OpenAPI::fromJsonValue(m_contexts_count, json[QString("contextsCount")]);
    m_contexts_count_isSet = !json[QString("contextsCount")].isNull() && m_contexts_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_is_unscreenable_isValid = ::OpenAPI::fromJsonValue(m_is_unscreenable, json[QString("isUnscreenable")]);
    m_is_unscreenable_isSet = !json[QString("isUnscreenable")].isNull() && m_is_unscreenable_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_used_isValid = ::OpenAPI::fromJsonValue(m_last_used, json[QString("lastUsed")]);
    m_last_used_isSet = !json[QString("lastUsed")].isNull() && m_last_used_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_projects_count_isValid = ::OpenAPI::fromJsonValue(m_projects_count, json[QString("projectsCount")]);
    m_projects_count_isSet = !json[QString("projectsCount")].isNull() && m_projects_count_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_screens_count_isValid = ::OpenAPI::fromJsonValue(m_screens_count, json[QString("screensCount")]);
    m_screens_count_isSet = !json[QString("screensCount")].isNull() && m_screens_count_isValid;

    m_searcher_key_isValid = ::OpenAPI::fromJsonValue(m_searcher_key, json[QString("searcherKey")]);
    m_searcher_key_isSet = !json[QString("searcherKey")].isNull() && m_searcher_key_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_contexts_count_isSet) {
        obj.insert(QString("contextsCount"), ::OpenAPI::toJsonValue(m_contexts_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_is_unscreenable_isSet) {
        obj.insert(QString("isUnscreenable"), ::OpenAPI::toJsonValue(m_is_unscreenable));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_used.isSet()) {
        obj.insert(QString("lastUsed"), ::OpenAPI::toJsonValue(m_last_used));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_projects_count_isSet) {
        obj.insert(QString("projectsCount"), ::OpenAPI::toJsonValue(m_projects_count));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_screens_count_isSet) {
        obj.insert(QString("screensCount"), ::OpenAPI::toJsonValue(m_screens_count));
    }
    if (m_searcher_key_isSet) {
        obj.insert(QString("searcherKey"), ::OpenAPI::toJsonValue(m_searcher_key));
    }
    return obj;
}

qint64 OAIField::getContextsCount() const {
    return m_contexts_count;
}
void OAIField::setContextsCount(const qint64 &contexts_count) {
    m_contexts_count = contexts_count;
    m_contexts_count_isSet = true;
}

bool OAIField::is_contexts_count_Set() const{
    return m_contexts_count_isSet;
}

bool OAIField::is_contexts_count_Valid() const{
    return m_contexts_count_isValid;
}

QString OAIField::getDescription() const {
    return m_description;
}
void OAIField::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIField::is_description_Set() const{
    return m_description_isSet;
}

bool OAIField::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIField::getId() const {
    return m_id;
}
void OAIField::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIField::is_id_Set() const{
    return m_id_isSet;
}

bool OAIField::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIField::isIsLocked() const {
    return m_is_locked;
}
void OAIField::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIField::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIField::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

bool OAIField::isIsUnscreenable() const {
    return m_is_unscreenable;
}
void OAIField::setIsUnscreenable(const bool &is_unscreenable) {
    m_is_unscreenable = is_unscreenable;
    m_is_unscreenable_isSet = true;
}

bool OAIField::is_is_unscreenable_Set() const{
    return m_is_unscreenable_isSet;
}

bool OAIField::is_is_unscreenable_Valid() const{
    return m_is_unscreenable_isValid;
}

QString OAIField::getKey() const {
    return m_key;
}
void OAIField::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIField::is_key_Set() const{
    return m_key_isSet;
}

bool OAIField::is_key_Valid() const{
    return m_key_isValid;
}

OAIFieldLastUsed OAIField::getLastUsed() const {
    return m_last_used;
}
void OAIField::setLastUsed(const OAIFieldLastUsed &last_used) {
    m_last_used = last_used;
    m_last_used_isSet = true;
}

bool OAIField::is_last_used_Set() const{
    return m_last_used_isSet;
}

bool OAIField::is_last_used_Valid() const{
    return m_last_used_isValid;
}

QString OAIField::getName() const {
    return m_name;
}
void OAIField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIField::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIField::getProjectsCount() const {
    return m_projects_count;
}
void OAIField::setProjectsCount(const qint64 &projects_count) {
    m_projects_count = projects_count;
    m_projects_count_isSet = true;
}

bool OAIField::is_projects_count_Set() const{
    return m_projects_count_isSet;
}

bool OAIField::is_projects_count_Valid() const{
    return m_projects_count_isValid;
}

OAIJsonTypeBean OAIField::getSchema() const {
    return m_schema;
}
void OAIField::setSchema(const OAIJsonTypeBean &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIField::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIField::is_schema_Valid() const{
    return m_schema_isValid;
}

qint64 OAIField::getScreensCount() const {
    return m_screens_count;
}
void OAIField::setScreensCount(const qint64 &screens_count) {
    m_screens_count = screens_count;
    m_screens_count_isSet = true;
}

bool OAIField::is_screens_count_Set() const{
    return m_screens_count_isSet;
}

bool OAIField::is_screens_count_Valid() const{
    return m_screens_count_isValid;
}

QString OAIField::getSearcherKey() const {
    return m_searcher_key;
}
void OAIField::setSearcherKey(const QString &searcher_key) {
    m_searcher_key = searcher_key;
    m_searcher_key_isSet = true;
}

bool OAIField::is_searcher_key_Set() const{
    return m_searcher_key_isSet;
}

bool OAIField::is_searcher_key_Valid() const{
    return m_searcher_key_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contexts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unscreenable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_screens_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searcher_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_schema_isValid && true;
}

} // namespace OpenAPI
