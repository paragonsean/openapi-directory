/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAvatarsApi_H
#define OAI_OAIAvatarsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAvatar.h"
#include "OAIAvatars.h"
#include "OAIErrorCollection.h"
#include "OAIObject.h"
#include "OAISystemAvatars.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAvatarsApi : public QObject {
    Q_OBJECT

public:
    OAIAvatarsApi(const int timeOut = 0);
    ~OAIAvatarsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  owning_object_id QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void deleteAvatar(const QString &type, const QString &owning_object_id, const qint64 &id);

    /**
    * @param[in]  type QString [required]
    */
    virtual void getAllSystemAvatars(const QString &type);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  size QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getAvatarImageByID(const QString &type, const qint64 &id, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  size QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getAvatarImageByOwner(const QString &type, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  size QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getAvatarImageByType(const QString &type, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void getAvatars(const QString &type, const QString &entity_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  size qint32 [required]
    * @param[in]  body QJsonValue [required]
    * @param[in]  x qint32 [optional]
    * @param[in]  y qint32 [optional]
    */
    virtual void storeAvatar(const QString &type, const QString &entity_id, const qint32 &size, const QJsonValue &body, const ::OpenAPI::OptionalParam<qint32> &x = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &y = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAvatarCallback(OAIHttpRequestWorker *worker);
    void getAllSystemAvatarsCallback(OAIHttpRequestWorker *worker);
    void getAvatarImageByIDCallback(OAIHttpRequestWorker *worker);
    void getAvatarImageByOwnerCallback(OAIHttpRequestWorker *worker);
    void getAvatarImageByTypeCallback(OAIHttpRequestWorker *worker);
    void getAvatarsCallback(OAIHttpRequestWorker *worker);
    void storeAvatarCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAvatarSignal();
    void getAllSystemAvatarsSignal(OAISystemAvatars summary);
    void getAvatarImageByIDSignal();
    void getAvatarImageByOwnerSignal();
    void getAvatarImageByTypeSignal();
    void getAvatarsSignal(OAIAvatars summary);
    void storeAvatarSignal(OAIAvatar summary);


    void deleteAvatarSignalFull(OAIHttpRequestWorker *worker);
    void getAllSystemAvatarsSignalFull(OAIHttpRequestWorker *worker, OAISystemAvatars summary);
    void getAvatarImageByIDSignalFull(OAIHttpRequestWorker *worker);
    void getAvatarImageByOwnerSignalFull(OAIHttpRequestWorker *worker);
    void getAvatarImageByTypeSignalFull(OAIHttpRequestWorker *worker);
    void getAvatarsSignalFull(OAIHttpRequestWorker *worker, OAIAvatars summary);
    void storeAvatarSignalFull(OAIHttpRequestWorker *worker, OAIAvatar summary);

    Q_DECL_DEPRECATED_X("Use deleteAvatarSignalError() instead")
    void deleteAvatarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAvatarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSystemAvatarsSignalError() instead")
    void getAllSystemAvatarsSignalE(OAISystemAvatars summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSystemAvatarsSignalError(OAISystemAvatars summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarImageByIDSignalError() instead")
    void getAvatarImageByIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarImageByIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarImageByOwnerSignalError() instead")
    void getAvatarImageByOwnerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarImageByOwnerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarImageByTypeSignalError() instead")
    void getAvatarImageByTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarImageByTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarsSignalError() instead")
    void getAvatarsSignalE(OAIAvatars summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarsSignalError(OAIAvatars summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeAvatarSignalError() instead")
    void storeAvatarSignalE(OAIAvatar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeAvatarSignalError(OAIAvatar summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAvatarSignalErrorFull() instead")
    void deleteAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSystemAvatarsSignalErrorFull() instead")
    void getAllSystemAvatarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSystemAvatarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarImageByIDSignalErrorFull() instead")
    void getAvatarImageByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarImageByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarImageByOwnerSignalErrorFull() instead")
    void getAvatarImageByOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarImageByOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarImageByTypeSignalErrorFull() instead")
    void getAvatarImageByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarImageByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarsSignalErrorFull() instead")
    void getAvatarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeAvatarSignalErrorFull() instead")
    void storeAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
