/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDetails::OAIProjectDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDetails::OAIProjectDetails() {
    this->initializeModel();
}

OAIProjectDetails::~OAIProjectDetails() {}

void OAIProjectDetails::initializeModel() {

    m_avatar_urls_isSet = false;
    m_avatar_urls_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_category_isSet = false;
    m_project_category_isValid = false;

    m_project_type_key_isSet = false;
    m_project_type_key_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_simplified_isSet = false;
    m_simplified_isValid = false;
}

void OAIProjectDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDetails::fromJsonObject(QJsonObject json) {

    m_avatar_urls_isValid = ::OpenAPI::fromJsonValue(m_avatar_urls, json[QString("avatarUrls")]);
    m_avatar_urls_isSet = !json[QString("avatarUrls")].isNull() && m_avatar_urls_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_category_isValid = ::OpenAPI::fromJsonValue(m_project_category, json[QString("projectCategory")]);
    m_project_category_isSet = !json[QString("projectCategory")].isNull() && m_project_category_isValid;

    m_project_type_key_isValid = ::OpenAPI::fromJsonValue(m_project_type_key, json[QString("projectTypeKey")]);
    m_project_type_key_isSet = !json[QString("projectTypeKey")].isNull() && m_project_type_key_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_simplified_isValid = ::OpenAPI::fromJsonValue(m_simplified, json[QString("simplified")]);
    m_simplified_isSet = !json[QString("simplified")].isNull() && m_simplified_isValid;
}

QString OAIProjectDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_urls.isSet()) {
        obj.insert(QString("avatarUrls"), ::OpenAPI::toJsonValue(m_avatar_urls));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_category.isSet()) {
        obj.insert(QString("projectCategory"), ::OpenAPI::toJsonValue(m_project_category));
    }
    if (m_project_type_key_isSet) {
        obj.insert(QString("projectTypeKey"), ::OpenAPI::toJsonValue(m_project_type_key));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_simplified_isSet) {
        obj.insert(QString("simplified"), ::OpenAPI::toJsonValue(m_simplified));
    }
    return obj;
}

OAIAvatarUrlsBean OAIProjectDetails::getAvatarUrls() const {
    return m_avatar_urls;
}
void OAIProjectDetails::setAvatarUrls(const OAIAvatarUrlsBean &avatar_urls) {
    m_avatar_urls = avatar_urls;
    m_avatar_urls_isSet = true;
}

bool OAIProjectDetails::is_avatar_urls_Set() const{
    return m_avatar_urls_isSet;
}

bool OAIProjectDetails::is_avatar_urls_Valid() const{
    return m_avatar_urls_isValid;
}

QString OAIProjectDetails::getId() const {
    return m_id;
}
void OAIProjectDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectDetails::getKey() const {
    return m_key;
}
void OAIProjectDetails::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIProjectDetails::is_key_Set() const{
    return m_key_isSet;
}

bool OAIProjectDetails::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIProjectDetails::getName() const {
    return m_name;
}
void OAIProjectDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectDetails::is_name_Valid() const{
    return m_name_isValid;
}

OAIUpdatedProjectCategory OAIProjectDetails::getProjectCategory() const {
    return m_project_category;
}
void OAIProjectDetails::setProjectCategory(const OAIUpdatedProjectCategory &project_category) {
    m_project_category = project_category;
    m_project_category_isSet = true;
}

bool OAIProjectDetails::is_project_category_Set() const{
    return m_project_category_isSet;
}

bool OAIProjectDetails::is_project_category_Valid() const{
    return m_project_category_isValid;
}

QString OAIProjectDetails::getProjectTypeKey() const {
    return m_project_type_key;
}
void OAIProjectDetails::setProjectTypeKey(const QString &project_type_key) {
    m_project_type_key = project_type_key;
    m_project_type_key_isSet = true;
}

bool OAIProjectDetails::is_project_type_key_Set() const{
    return m_project_type_key_isSet;
}

bool OAIProjectDetails::is_project_type_key_Valid() const{
    return m_project_type_key_isValid;
}

QString OAIProjectDetails::getSelf() const {
    return m_self;
}
void OAIProjectDetails::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIProjectDetails::is_self_Set() const{
    return m_self_isSet;
}

bool OAIProjectDetails::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIProjectDetails::isSimplified() const {
    return m_simplified;
}
void OAIProjectDetails::setSimplified(const bool &simplified) {
    m_simplified = simplified;
    m_simplified_isSet = true;
}

bool OAIProjectDetails::is_simplified_Set() const{
    return m_simplified_isSet;
}

bool OAIProjectDetails::is_simplified_Valid() const{
    return m_simplified_isValid;
}

bool OAIProjectDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simplified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
