/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterDetails::OAIFilterDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterDetails::OAIFilterDetails() {
    this->initializeModel();
}

OAIFilterDetails::~OAIFilterDetails() {}

void OAIFilterDetails::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_edit_permissions_isSet = false;
    m_edit_permissions_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_favourite_isSet = false;
    m_favourite_isValid = false;

    m_favourited_count_isSet = false;
    m_favourited_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jql_isSet = false;
    m_jql_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_search_url_isSet = false;
    m_search_url_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_share_permissions_isSet = false;
    m_share_permissions_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;

    m_view_url_isSet = false;
    m_view_url_isValid = false;
}

void OAIFilterDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterDetails::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_edit_permissions_isValid = ::OpenAPI::fromJsonValue(m_edit_permissions, json[QString("editPermissions")]);
    m_edit_permissions_isSet = !json[QString("editPermissions")].isNull() && m_edit_permissions_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_favourite_isValid = ::OpenAPI::fromJsonValue(m_favourite, json[QString("favourite")]);
    m_favourite_isSet = !json[QString("favourite")].isNull() && m_favourite_isValid;

    m_favourited_count_isValid = ::OpenAPI::fromJsonValue(m_favourited_count, json[QString("favouritedCount")]);
    m_favourited_count_isSet = !json[QString("favouritedCount")].isNull() && m_favourited_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jql_isValid = ::OpenAPI::fromJsonValue(m_jql, json[QString("jql")]);
    m_jql_isSet = !json[QString("jql")].isNull() && m_jql_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_search_url_isValid = ::OpenAPI::fromJsonValue(m_search_url, json[QString("searchUrl")]);
    m_search_url_isSet = !json[QString("searchUrl")].isNull() && m_search_url_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_share_permissions_isValid = ::OpenAPI::fromJsonValue(m_share_permissions, json[QString("sharePermissions")]);
    m_share_permissions_isSet = !json[QString("sharePermissions")].isNull() && m_share_permissions_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;

    m_view_url_isValid = ::OpenAPI::fromJsonValue(m_view_url, json[QString("viewUrl")]);
    m_view_url_isSet = !json[QString("viewUrl")].isNull() && m_view_url_isValid;
}

QString OAIFilterDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_edit_permissions.size() > 0) {
        obj.insert(QString("editPermissions"), ::OpenAPI::toJsonValue(m_edit_permissions));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_favourite_isSet) {
        obj.insert(QString("favourite"), ::OpenAPI::toJsonValue(m_favourite));
    }
    if (m_favourited_count_isSet) {
        obj.insert(QString("favouritedCount"), ::OpenAPI::toJsonValue(m_favourited_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jql_isSet) {
        obj.insert(QString("jql"), ::OpenAPI::toJsonValue(m_jql));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_search_url_isSet) {
        obj.insert(QString("searchUrl"), ::OpenAPI::toJsonValue(m_search_url));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_share_permissions.size() > 0) {
        obj.insert(QString("sharePermissions"), ::OpenAPI::toJsonValue(m_share_permissions));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    if (m_view_url_isSet) {
        obj.insert(QString("viewUrl"), ::OpenAPI::toJsonValue(m_view_url));
    }
    return obj;
}

QString OAIFilterDetails::getDescription() const {
    return m_description;
}
void OAIFilterDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFilterDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFilterDetails::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISharePermission> OAIFilterDetails::getEditPermissions() const {
    return m_edit_permissions;
}
void OAIFilterDetails::setEditPermissions(const QList<OAISharePermission> &edit_permissions) {
    m_edit_permissions = edit_permissions;
    m_edit_permissions_isSet = true;
}

bool OAIFilterDetails::is_edit_permissions_Set() const{
    return m_edit_permissions_isSet;
}

bool OAIFilterDetails::is_edit_permissions_Valid() const{
    return m_edit_permissions_isValid;
}

QString OAIFilterDetails::getExpand() const {
    return m_expand;
}
void OAIFilterDetails::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIFilterDetails::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIFilterDetails::is_expand_Valid() const{
    return m_expand_isValid;
}

bool OAIFilterDetails::isFavourite() const {
    return m_favourite;
}
void OAIFilterDetails::setFavourite(const bool &favourite) {
    m_favourite = favourite;
    m_favourite_isSet = true;
}

bool OAIFilterDetails::is_favourite_Set() const{
    return m_favourite_isSet;
}

bool OAIFilterDetails::is_favourite_Valid() const{
    return m_favourite_isValid;
}

qint64 OAIFilterDetails::getFavouritedCount() const {
    return m_favourited_count;
}
void OAIFilterDetails::setFavouritedCount(const qint64 &favourited_count) {
    m_favourited_count = favourited_count;
    m_favourited_count_isSet = true;
}

bool OAIFilterDetails::is_favourited_count_Set() const{
    return m_favourited_count_isSet;
}

bool OAIFilterDetails::is_favourited_count_Valid() const{
    return m_favourited_count_isValid;
}

QString OAIFilterDetails::getId() const {
    return m_id;
}
void OAIFilterDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFilterDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFilterDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFilterDetails::getJql() const {
    return m_jql;
}
void OAIFilterDetails::setJql(const QString &jql) {
    m_jql = jql;
    m_jql_isSet = true;
}

bool OAIFilterDetails::is_jql_Set() const{
    return m_jql_isSet;
}

bool OAIFilterDetails::is_jql_Valid() const{
    return m_jql_isValid;
}

QString OAIFilterDetails::getName() const {
    return m_name;
}
void OAIFilterDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFilterDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFilterDetails::is_name_Valid() const{
    return m_name_isValid;
}

OAIUser OAIFilterDetails::getOwner() const {
    return m_owner;
}
void OAIFilterDetails::setOwner(const OAIUser &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIFilterDetails::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIFilterDetails::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIFilterDetails::getSearchUrl() const {
    return m_search_url;
}
void OAIFilterDetails::setSearchUrl(const QString &search_url) {
    m_search_url = search_url;
    m_search_url_isSet = true;
}

bool OAIFilterDetails::is_search_url_Set() const{
    return m_search_url_isSet;
}

bool OAIFilterDetails::is_search_url_Valid() const{
    return m_search_url_isValid;
}

QString OAIFilterDetails::getSelf() const {
    return m_self;
}
void OAIFilterDetails::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIFilterDetails::is_self_Set() const{
    return m_self_isSet;
}

bool OAIFilterDetails::is_self_Valid() const{
    return m_self_isValid;
}

QList<OAISharePermission> OAIFilterDetails::getSharePermissions() const {
    return m_share_permissions;
}
void OAIFilterDetails::setSharePermissions(const QList<OAISharePermission> &share_permissions) {
    m_share_permissions = share_permissions;
    m_share_permissions_isSet = true;
}

bool OAIFilterDetails::is_share_permissions_Set() const{
    return m_share_permissions_isSet;
}

bool OAIFilterDetails::is_share_permissions_Valid() const{
    return m_share_permissions_isValid;
}

QList<OAIFilterSubscription> OAIFilterDetails::getSubscriptions() const {
    return m_subscriptions;
}
void OAIFilterDetails::setSubscriptions(const QList<OAIFilterSubscription> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIFilterDetails::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIFilterDetails::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

QString OAIFilterDetails::getViewUrl() const {
    return m_view_url;
}
void OAIFilterDetails::setViewUrl(const QString &view_url) {
    m_view_url = view_url;
    m_view_url_isSet = true;
}

bool OAIFilterDetails::is_view_url_Set() const{
    return m_view_url_isSet;
}

bool OAIFilterDetails::is_view_url_Valid() const{
    return m_view_url_isValid;
}

bool OAIFilterDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourited_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
