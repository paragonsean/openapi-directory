/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldMetadata::OAIFieldMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldMetadata::OAIFieldMetadata() {
    this->initializeModel();
}

OAIFieldMetadata::~OAIFieldMetadata() {}

void OAIFieldMetadata::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_auto_complete_url_isSet = false;
    m_auto_complete_url_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_has_default_value_isSet = false;
    m_has_default_value_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAIFieldMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldMetadata::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_auto_complete_url_isValid = ::OpenAPI::fromJsonValue(m_auto_complete_url, json[QString("autoCompleteUrl")]);
    m_auto_complete_url_isSet = !json[QString("autoCompleteUrl")].isNull() && m_auto_complete_url_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_has_default_value_isValid = ::OpenAPI::fromJsonValue(m_has_default_value, json[QString("hasDefaultValue")]);
    m_has_default_value_isSet = !json[QString("hasDefaultValue")].isNull() && m_has_default_value_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAIFieldMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_auto_complete_url_isSet) {
        obj.insert(QString("autoCompleteUrl"), ::OpenAPI::toJsonValue(m_auto_complete_url));
    }
    if (m_configuration.size() > 0) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_has_default_value_isSet) {
        obj.insert(QString("hasDefaultValue"), ::OpenAPI::toJsonValue(m_has_default_value));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QList<QJsonValue> OAIFieldMetadata::getAllowedValues() const {
    return m_allowed_values;
}
void OAIFieldMetadata::setAllowedValues(const QList<QJsonValue> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIFieldMetadata::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIFieldMetadata::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIFieldMetadata::getAutoCompleteUrl() const {
    return m_auto_complete_url;
}
void OAIFieldMetadata::setAutoCompleteUrl(const QString &auto_complete_url) {
    m_auto_complete_url = auto_complete_url;
    m_auto_complete_url_isSet = true;
}

bool OAIFieldMetadata::is_auto_complete_url_Set() const{
    return m_auto_complete_url_isSet;
}

bool OAIFieldMetadata::is_auto_complete_url_Valid() const{
    return m_auto_complete_url_isValid;
}

QMap<QString, QJsonValue> OAIFieldMetadata::getConfiguration() const {
    return m_configuration;
}
void OAIFieldMetadata::setConfiguration(const QMap<QString, QJsonValue> &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIFieldMetadata::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIFieldMetadata::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QJsonValue OAIFieldMetadata::getDefaultValue() const {
    return m_default_value;
}
void OAIFieldMetadata::setDefaultValue(const QJsonValue &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIFieldMetadata::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIFieldMetadata::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAIFieldMetadata::isHasDefaultValue() const {
    return m_has_default_value;
}
void OAIFieldMetadata::setHasDefaultValue(const bool &has_default_value) {
    m_has_default_value = has_default_value;
    m_has_default_value_isSet = true;
}

bool OAIFieldMetadata::is_has_default_value_Set() const{
    return m_has_default_value_isSet;
}

bool OAIFieldMetadata::is_has_default_value_Valid() const{
    return m_has_default_value_isValid;
}

QString OAIFieldMetadata::getKey() const {
    return m_key;
}
void OAIFieldMetadata::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFieldMetadata::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFieldMetadata::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFieldMetadata::getName() const {
    return m_name;
}
void OAIFieldMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFieldMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFieldMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIFieldMetadata::getOperations() const {
    return m_operations;
}
void OAIFieldMetadata::setOperations(const QList<QString> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIFieldMetadata::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIFieldMetadata::is_operations_Valid() const{
    return m_operations_isValid;
}

bool OAIFieldMetadata::isRequired() const {
    return m_required;
}
void OAIFieldMetadata::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIFieldMetadata::is_required_Set() const{
    return m_required_isSet;
}

bool OAIFieldMetadata::is_required_Valid() const{
    return m_required_isValid;
}

OAIJsonTypeBean OAIFieldMetadata::getSchema() const {
    return m_schema;
}
void OAIFieldMetadata::setSchema(const OAIJsonTypeBean &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIFieldMetadata::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIFieldMetadata::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIFieldMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_complete_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_name_isValid && m_operations_isValid && m_required_isValid && m_schema_isValid && true;
}

} // namespace OpenAPI
