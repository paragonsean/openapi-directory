/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicense::OAILicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicense::OAILicense() {
    this->initializeModel();
}

OAILicense::~OAILicense() {}

void OAILicense::initializeModel() {

    m_applications_isSet = false;
    m_applications_isValid = false;
}

void OAILicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicense::fromJsonObject(QJsonObject json) {

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("applications")]);
    m_applications_isSet = !json[QString("applications")].isNull() && m_applications_isValid;
}

QString OAILicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicense::asJsonObject() const {
    QJsonObject obj;
    if (m_applications.size() > 0) {
        obj.insert(QString("applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    return obj;
}

QList<OAILicensedApplication> OAILicense::getApplications() const {
    return m_applications;
}
void OAILicense::setApplications(const QList<OAILicensedApplication> &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAILicense::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAILicense::is_applications_Valid() const{
    return m_applications_isValid;
}

bool OAILicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_applications_isValid && true;
}

} // namespace OpenAPI
