/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueMatchesForJQL.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueMatchesForJQL::OAIIssueMatchesForJQL(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueMatchesForJQL::OAIIssueMatchesForJQL() {
    this->initializeModel();
}

OAIIssueMatchesForJQL::~OAIIssueMatchesForJQL() {}

void OAIIssueMatchesForJQL::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_matched_issues_isSet = false;
    m_matched_issues_isValid = false;
}

void OAIIssueMatchesForJQL::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueMatchesForJQL::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_matched_issues_isValid = ::OpenAPI::fromJsonValue(m_matched_issues, json[QString("matchedIssues")]);
    m_matched_issues_isSet = !json[QString("matchedIssues")].isNull() && m_matched_issues_isValid;
}

QString OAIIssueMatchesForJQL::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueMatchesForJQL::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_matched_issues.size() > 0) {
        obj.insert(QString("matchedIssues"), ::OpenAPI::toJsonValue(m_matched_issues));
    }
    return obj;
}

QSet<QString> OAIIssueMatchesForJQL::getErrors() const {
    return m_errors;
}
void OAIIssueMatchesForJQL::setErrors(const QSet<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIIssueMatchesForJQL::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIIssueMatchesForJQL::is_errors_Valid() const{
    return m_errors_isValid;
}

QSet<qint64> OAIIssueMatchesForJQL::getMatchedIssues() const {
    return m_matched_issues;
}
void OAIIssueMatchesForJQL::setMatchedIssues(const QSet<qint64> &matched_issues) {
    m_matched_issues = matched_issues;
    m_matched_issues_isSet = true;
}

bool OAIIssueMatchesForJQL::is_matched_issues_Set() const{
    return m_matched_issues_isSet;
}

bool OAIIssueMatchesForJQL::is_matched_issues_Valid() const{
    return m_matched_issues_isValid;
}

bool OAIIssueMatchesForJQL::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueMatchesForJQL::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_errors_isValid && m_matched_issues_isValid && true;
}

} // namespace OpenAPI
