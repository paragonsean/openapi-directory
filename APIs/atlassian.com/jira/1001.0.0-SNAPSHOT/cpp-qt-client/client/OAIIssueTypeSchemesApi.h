/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueTypeSchemesApi_H
#define OAI_OAIIssueTypeSchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIssueTypeIds.h"
#include "OAIIssueTypeSchemeDetails.h"
#include "OAIIssueTypeSchemeID.h"
#include "OAIIssueTypeSchemeProjectAssociation.h"
#include "OAIIssueTypeSchemeUpdateDetails.h"
#include "OAIOrderOfIssueTypes.h"
#include "OAIPageBeanIssueTypeScheme.h"
#include "OAIPageBeanIssueTypeSchemeMapping.h"
#include "OAIPageBeanIssueTypeSchemeProjects.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueTypeSchemesApi : public QObject {
    Q_OBJECT

public:
    OAIIssueTypeSchemesApi(const int timeOut = 0);
    ~OAIIssueTypeSchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_type_scheme_id qint64 [required]
    * @param[in]  oai_issue_type_ids OAIIssueTypeIds [required]
    */
    virtual void addIssueTypesToIssueTypeScheme(const qint64 &issue_type_scheme_id, const OAIIssueTypeIds &oai_issue_type_ids);

    /**
    * @param[in]  oai_issue_type_scheme_project_association OAIIssueTypeSchemeProjectAssociation [required]
    */
    virtual void assignIssueTypeSchemeToProject(const OAIIssueTypeSchemeProjectAssociation &oai_issue_type_scheme_project_association);

    /**
    * @param[in]  oai_issue_type_scheme_details OAIIssueTypeSchemeDetails [required]
    */
    virtual void createIssueTypeScheme(const OAIIssueTypeSchemeDetails &oai_issue_type_scheme_details);

    /**
    * @param[in]  issue_type_scheme_id qint64 [required]
    */
    virtual void deleteIssueTypeScheme(const qint64 &issue_type_scheme_id);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  id QSet<qint64> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  query_string QString [optional]
    */
    virtual void getAllIssueTypeSchemes(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &id = ::OpenAPI::OptionalParam<QSet<qint64>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query_string = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QSet<qint64> [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getIssueTypeSchemeForProjects(const QSet<qint64> &project_id, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  issue_type_scheme_id QSet<qint64> [optional]
    */
    virtual void getIssueTypeSchemesMapping(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<qint64>> &issue_type_scheme_id = ::OpenAPI::OptionalParam<QSet<qint64>>());

    /**
    * @param[in]  issue_type_scheme_id qint64 [required]
    * @param[in]  issue_type_id qint64 [required]
    */
    virtual void removeIssueTypeFromIssueTypeScheme(const qint64 &issue_type_scheme_id, const qint64 &issue_type_id);

    /**
    * @param[in]  issue_type_scheme_id qint64 [required]
    * @param[in]  oai_order_of_issue_types OAIOrderOfIssueTypes [required]
    */
    virtual void reorderIssueTypesInIssueTypeScheme(const qint64 &issue_type_scheme_id, const OAIOrderOfIssueTypes &oai_order_of_issue_types);

    /**
    * @param[in]  issue_type_scheme_id qint64 [required]
    * @param[in]  oai_issue_type_scheme_update_details OAIIssueTypeSchemeUpdateDetails [required]
    */
    virtual void updateIssueTypeScheme(const qint64 &issue_type_scheme_id, const OAIIssueTypeSchemeUpdateDetails &oai_issue_type_scheme_update_details);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addIssueTypesToIssueTypeSchemeCallback(OAIHttpRequestWorker *worker);
    void assignIssueTypeSchemeToProjectCallback(OAIHttpRequestWorker *worker);
    void createIssueTypeSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteIssueTypeSchemeCallback(OAIHttpRequestWorker *worker);
    void getAllIssueTypeSchemesCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeSchemeForProjectsCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeSchemesMappingCallback(OAIHttpRequestWorker *worker);
    void removeIssueTypeFromIssueTypeSchemeCallback(OAIHttpRequestWorker *worker);
    void reorderIssueTypesInIssueTypeSchemeCallback(OAIHttpRequestWorker *worker);
    void updateIssueTypeSchemeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addIssueTypesToIssueTypeSchemeSignal(QJsonValue summary);
    void assignIssueTypeSchemeToProjectSignal(QJsonValue summary);
    void createIssueTypeSchemeSignal(OAIIssueTypeSchemeID summary);
    void deleteIssueTypeSchemeSignal(QJsonValue summary);
    void getAllIssueTypeSchemesSignal(OAIPageBeanIssueTypeScheme summary);
    void getIssueTypeSchemeForProjectsSignal(OAIPageBeanIssueTypeSchemeProjects summary);
    void getIssueTypeSchemesMappingSignal(OAIPageBeanIssueTypeSchemeMapping summary);
    void removeIssueTypeFromIssueTypeSchemeSignal(QJsonValue summary);
    void reorderIssueTypesInIssueTypeSchemeSignal(QJsonValue summary);
    void updateIssueTypeSchemeSignal(QJsonValue summary);


    void addIssueTypesToIssueTypeSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void assignIssueTypeSchemeToProjectSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createIssueTypeSchemeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeSchemeID summary);
    void deleteIssueTypeSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getAllIssueTypeSchemesSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeScheme summary);
    void getIssueTypeSchemeForProjectsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeSchemeProjects summary);
    void getIssueTypeSchemesMappingSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanIssueTypeSchemeMapping summary);
    void removeIssueTypeFromIssueTypeSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void reorderIssueTypesInIssueTypeSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateIssueTypeSchemeSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use addIssueTypesToIssueTypeSchemeSignalError() instead")
    void addIssueTypesToIssueTypeSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addIssueTypesToIssueTypeSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignIssueTypeSchemeToProjectSignalError() instead")
    void assignIssueTypeSchemeToProjectSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignIssueTypeSchemeToProjectSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeSchemeSignalError() instead")
    void createIssueTypeSchemeSignalE(OAIIssueTypeSchemeID summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeSchemeSignalError(OAIIssueTypeSchemeID summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueTypeSchemeSignalError() instead")
    void deleteIssueTypeSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueTypeSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIssueTypeSchemesSignalError() instead")
    void getAllIssueTypeSchemesSignalE(OAIPageBeanIssueTypeScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIssueTypeSchemesSignalError(OAIPageBeanIssueTypeScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeSchemeForProjectsSignalError() instead")
    void getIssueTypeSchemeForProjectsSignalE(OAIPageBeanIssueTypeSchemeProjects summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeSchemeForProjectsSignalError(OAIPageBeanIssueTypeSchemeProjects summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeSchemesMappingSignalError() instead")
    void getIssueTypeSchemesMappingSignalE(OAIPageBeanIssueTypeSchemeMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeSchemesMappingSignalError(OAIPageBeanIssueTypeSchemeMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeIssueTypeFromIssueTypeSchemeSignalError() instead")
    void removeIssueTypeFromIssueTypeSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeIssueTypeFromIssueTypeSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reorderIssueTypesInIssueTypeSchemeSignalError() instead")
    void reorderIssueTypesInIssueTypeSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderIssueTypesInIssueTypeSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeSchemeSignalError() instead")
    void updateIssueTypeSchemeSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeSchemeSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addIssueTypesToIssueTypeSchemeSignalErrorFull() instead")
    void addIssueTypesToIssueTypeSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addIssueTypesToIssueTypeSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignIssueTypeSchemeToProjectSignalErrorFull() instead")
    void assignIssueTypeSchemeToProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignIssueTypeSchemeToProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeSchemeSignalErrorFull() instead")
    void createIssueTypeSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueTypeSchemeSignalErrorFull() instead")
    void deleteIssueTypeSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueTypeSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIssueTypeSchemesSignalErrorFull() instead")
    void getAllIssueTypeSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIssueTypeSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeSchemeForProjectsSignalErrorFull() instead")
    void getIssueTypeSchemeForProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeSchemeForProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeSchemesMappingSignalErrorFull() instead")
    void getIssueTypeSchemesMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeSchemesMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeIssueTypeFromIssueTypeSchemeSignalErrorFull() instead")
    void removeIssueTypeFromIssueTypeSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeIssueTypeFromIssueTypeSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reorderIssueTypesInIssueTypeSchemeSignalErrorFull() instead")
    void reorderIssueTypesInIssueTypeSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderIssueTypesInIssueTypeSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeSchemeSignalErrorFull() instead")
    void updateIssueTypeSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
