/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_html_body_isSet = false;
    m_html_body_isValid = false;

    m_restrict_isSet = false;
    m_restrict_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_text_body_isSet = false;
    m_text_body_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_html_body_isValid = ::OpenAPI::fromJsonValue(m_html_body, json[QString("htmlBody")]);
    m_html_body_isSet = !json[QString("htmlBody")].isNull() && m_html_body_isValid;

    m_restrict_isValid = ::OpenAPI::fromJsonValue(m_restrict, json[QString("restrict")]);
    m_restrict_isSet = !json[QString("restrict")].isNull() && m_restrict_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_text_body_isValid = ::OpenAPI::fromJsonValue(m_text_body, json[QString("textBody")]);
    m_text_body_isSet = !json[QString("textBody")].isNull() && m_text_body_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_html_body_isSet) {
        obj.insert(QString("htmlBody"), ::OpenAPI::toJsonValue(m_html_body));
    }
    if (m_restrict.isSet()) {
        obj.insert(QString("restrict"), ::OpenAPI::toJsonValue(m_restrict));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_text_body_isSet) {
        obj.insert(QString("textBody"), ::OpenAPI::toJsonValue(m_text_body));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAINotification::getHtmlBody() const {
    return m_html_body;
}
void OAINotification::setHtmlBody(const QString &html_body) {
    m_html_body = html_body;
    m_html_body_isSet = true;
}

bool OAINotification::is_html_body_Set() const{
    return m_html_body_isSet;
}

bool OAINotification::is_html_body_Valid() const{
    return m_html_body_isValid;
}

OAINotificationRecipientsRestrictions OAINotification::getRestrict() const {
    return m_restrict;
}
void OAINotification::setRestrict(const OAINotificationRecipientsRestrictions &restrict) {
    m_restrict = restrict;
    m_restrict_isSet = true;
}

bool OAINotification::is_restrict_Set() const{
    return m_restrict_isSet;
}

bool OAINotification::is_restrict_Valid() const{
    return m_restrict_isValid;
}

QString OAINotification::getSubject() const {
    return m_subject;
}
void OAINotification::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAINotification::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAINotification::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAINotification::getTextBody() const {
    return m_text_body;
}
void OAINotification::setTextBody(const QString &text_body) {
    m_text_body = text_body;
    m_text_body_isSet = true;
}

bool OAINotification::is_text_body_Set() const{
    return m_text_body_isSet;
}

bool OAINotification::is_text_body_Valid() const{
    return m_text_body_isValid;
}

OAINotificationRecipients OAINotification::getTo() const {
    return m_to;
}
void OAINotification::setTo(const OAINotificationRecipients &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAINotification::is_to_Set() const{
    return m_to_isSet;
}

bool OAINotification::is_to_Valid() const{
    return m_to_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
