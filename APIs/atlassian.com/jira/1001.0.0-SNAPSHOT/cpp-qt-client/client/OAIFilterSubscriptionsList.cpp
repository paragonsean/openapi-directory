/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterSubscriptionsList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterSubscriptionsList::OAIFilterSubscriptionsList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterSubscriptionsList::OAIFilterSubscriptionsList() {
    this->initializeModel();
}

OAIFilterSubscriptionsList::~OAIFilterSubscriptionsList() {}

void OAIFilterSubscriptionsList::initializeModel() {

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;
}

void OAIFilterSubscriptionsList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterSubscriptionsList::fromJsonObject(QJsonObject json) {

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("end-index")]);
    m_end_index_isSet = !json[QString("end-index")].isNull() && m_end_index_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("max-results")]);
    m_max_results_isSet = !json[QString("max-results")].isNull() && m_max_results_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("start-index")]);
    m_start_index_isSet = !json[QString("start-index")].isNull() && m_start_index_isValid;
}

QString OAIFilterSubscriptionsList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterSubscriptionsList::asJsonObject() const {
    QJsonObject obj;
    if (m_end_index_isSet) {
        obj.insert(QString("end-index"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("max-results"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("start-index"), ::OpenAPI::toJsonValue(m_start_index));
    }
    return obj;
}

qint32 OAIFilterSubscriptionsList::getEndIndex() const {
    return m_end_index;
}
void OAIFilterSubscriptionsList::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIFilterSubscriptionsList::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIFilterSubscriptionsList::is_end_index_Valid() const{
    return m_end_index_isValid;
}

QList<OAIFilterSubscription> OAIFilterSubscriptionsList::getItems() const {
    return m_items;
}
void OAIFilterSubscriptionsList::setItems(const QList<OAIFilterSubscription> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIFilterSubscriptionsList::is_items_Set() const{
    return m_items_isSet;
}

bool OAIFilterSubscriptionsList::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIFilterSubscriptionsList::getMaxResults() const {
    return m_max_results;
}
void OAIFilterSubscriptionsList::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIFilterSubscriptionsList::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIFilterSubscriptionsList::is_max_results_Valid() const{
    return m_max_results_isValid;
}

qint32 OAIFilterSubscriptionsList::getSize() const {
    return m_size;
}
void OAIFilterSubscriptionsList::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFilterSubscriptionsList::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFilterSubscriptionsList::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIFilterSubscriptionsList::getStartIndex() const {
    return m_start_index;
}
void OAIFilterSubscriptionsList::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIFilterSubscriptionsList::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIFilterSubscriptionsList::is_start_index_Valid() const{
    return m_start_index_isValid;
}

bool OAIFilterSubscriptionsList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterSubscriptionsList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
