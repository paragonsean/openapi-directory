/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardGadgetPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardGadgetPosition::OAIDashboardGadgetPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardGadgetPosition::OAIDashboardGadgetPosition() {
    this->initializeModel();
}

OAIDashboardGadgetPosition::~OAIDashboardGadgetPosition() {}

void OAIDashboardGadgetPosition::initializeModel() {

    m_the_column_position_of_the_gadget__isSet = false;
    m_the_column_position_of_the_gadget__isValid = false;

    m_the_row_position_of_the_gadget__isSet = false;
    m_the_row_position_of_the_gadget__isValid = false;
}

void OAIDashboardGadgetPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardGadgetPosition::fromJsonObject(QJsonObject json) {

    m_the_column_position_of_the_gadget__isValid = ::OpenAPI::fromJsonValue(m_the_column_position_of_the_gadget_, json[QString("The column position of the gadget.")]);
    m_the_column_position_of_the_gadget__isSet = !json[QString("The column position of the gadget.")].isNull() && m_the_column_position_of_the_gadget__isValid;

    m_the_row_position_of_the_gadget__isValid = ::OpenAPI::fromJsonValue(m_the_row_position_of_the_gadget_, json[QString("The row position of the gadget.")]);
    m_the_row_position_of_the_gadget__isSet = !json[QString("The row position of the gadget.")].isNull() && m_the_row_position_of_the_gadget__isValid;
}

QString OAIDashboardGadgetPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardGadgetPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_the_column_position_of_the_gadget__isSet) {
        obj.insert(QString("The column position of the gadget."), ::OpenAPI::toJsonValue(m_the_column_position_of_the_gadget_));
    }
    if (m_the_row_position_of_the_gadget__isSet) {
        obj.insert(QString("The row position of the gadget."), ::OpenAPI::toJsonValue(m_the_row_position_of_the_gadget_));
    }
    return obj;
}

qint32 OAIDashboardGadgetPosition::getTheColumnPositionOfTheGadget() const {
    return m_the_column_position_of_the_gadget_;
}
void OAIDashboardGadgetPosition::setTheColumnPositionOfTheGadget(const qint32 &the_column_position_of_the_gadget_) {
    m_the_column_position_of_the_gadget_ = the_column_position_of_the_gadget_;
    m_the_column_position_of_the_gadget__isSet = true;
}

bool OAIDashboardGadgetPosition::is_the_column_position_of_the_gadget__Set() const{
    return m_the_column_position_of_the_gadget__isSet;
}

bool OAIDashboardGadgetPosition::is_the_column_position_of_the_gadget__Valid() const{
    return m_the_column_position_of_the_gadget__isValid;
}

qint32 OAIDashboardGadgetPosition::getTheRowPositionOfTheGadget() const {
    return m_the_row_position_of_the_gadget_;
}
void OAIDashboardGadgetPosition::setTheRowPositionOfTheGadget(const qint32 &the_row_position_of_the_gadget_) {
    m_the_row_position_of_the_gadget_ = the_row_position_of_the_gadget_;
    m_the_row_position_of_the_gadget__isSet = true;
}

bool OAIDashboardGadgetPosition::is_the_row_position_of_the_gadget__Set() const{
    return m_the_row_position_of_the_gadget__isSet;
}

bool OAIDashboardGadgetPosition::is_the_row_position_of_the_gadget__Valid() const{
    return m_the_row_position_of_the_gadget__isValid;
}

bool OAIDashboardGadgetPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_the_column_position_of_the_gadget__isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_the_row_position_of_the_gadget__isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardGadgetPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_the_column_position_of_the_gadget__isValid && m_the_row_position_of_the_gadget__isValid && true;
}

} // namespace OpenAPI
