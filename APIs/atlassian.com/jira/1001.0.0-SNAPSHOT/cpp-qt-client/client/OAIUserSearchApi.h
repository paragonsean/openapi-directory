/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserSearchApi_H
#define OAI_OAIUserSearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFoundUsers.h"
#include "OAIPageBeanUser.h"
#include "OAIPageBeanUserKey.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserSearchApi : public QObject {
    Q_OBJECT

public:
    OAIUserSearchApi(const int timeOut = 0);
    ~OAIUserSearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  session_id QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  action_descriptor_id qint32 [optional]
    * @param[in]  recommend bool [optional]
    */
    virtual void findAssignableUsers(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &action_descriptor_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &recommend = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_keys QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findBulkAssignableUsers(const QString &project_keys, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findUserKeysByQuery(const QString &query, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  property QString [optional]
    */
    virtual void findUsers(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &property = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findUsersByQuery(const QString &query, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  show_avatar bool [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  exclude_account_ids QList<QString> [optional]
    * @param[in]  avatar_size QString [optional]
    * @param[in]  exclude_connect_users bool [optional]
    */
    virtual void findUsersForPicker(const QString &query, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &show_avatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_account_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &avatar_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_connect_users = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  permissions QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  project_key QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findUsersWithAllPermissions(const QString &permissions, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  project_key QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findUsersWithBrowsePermission(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findAssignableUsersCallback(OAIHttpRequestWorker *worker);
    void findBulkAssignableUsersCallback(OAIHttpRequestWorker *worker);
    void findUserKeysByQueryCallback(OAIHttpRequestWorker *worker);
    void findUsersCallback(OAIHttpRequestWorker *worker);
    void findUsersByQueryCallback(OAIHttpRequestWorker *worker);
    void findUsersForPickerCallback(OAIHttpRequestWorker *worker);
    void findUsersWithAllPermissionsCallback(OAIHttpRequestWorker *worker);
    void findUsersWithBrowsePermissionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findAssignableUsersSignal(QList<OAIUser> summary);
    void findBulkAssignableUsersSignal(QList<OAIUser> summary);
    void findUserKeysByQuerySignal(OAIPageBeanUserKey summary);
    void findUsersSignal(QList<OAIUser> summary);
    void findUsersByQuerySignal(OAIPageBeanUser summary);
    void findUsersForPickerSignal(OAIFoundUsers summary);
    void findUsersWithAllPermissionsSignal(QList<OAIUser> summary);
    void findUsersWithBrowsePermissionSignal(QList<OAIUser> summary);


    void findAssignableUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void findBulkAssignableUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void findUserKeysByQuerySignalFull(OAIHttpRequestWorker *worker, OAIPageBeanUserKey summary);
    void findUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void findUsersByQuerySignalFull(OAIHttpRequestWorker *worker, OAIPageBeanUser summary);
    void findUsersForPickerSignalFull(OAIHttpRequestWorker *worker, OAIFoundUsers summary);
    void findUsersWithAllPermissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void findUsersWithBrowsePermissionSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);

    Q_DECL_DEPRECATED_X("Use findAssignableUsersSignalError() instead")
    void findAssignableUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findAssignableUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findBulkAssignableUsersSignalError() instead")
    void findBulkAssignableUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findBulkAssignableUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserKeysByQuerySignalError() instead")
    void findUserKeysByQuerySignalE(OAIPageBeanUserKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserKeysByQuerySignalError(OAIPageBeanUserKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersSignalError() instead")
    void findUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersByQuerySignalError() instead")
    void findUsersByQuerySignalE(OAIPageBeanUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersByQuerySignalError(OAIPageBeanUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersForPickerSignalError() instead")
    void findUsersForPickerSignalE(OAIFoundUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersForPickerSignalError(OAIFoundUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithAllPermissionsSignalError() instead")
    void findUsersWithAllPermissionsSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithAllPermissionsSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithBrowsePermissionSignalError() instead")
    void findUsersWithBrowsePermissionSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithBrowsePermissionSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findAssignableUsersSignalErrorFull() instead")
    void findAssignableUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findAssignableUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findBulkAssignableUsersSignalErrorFull() instead")
    void findBulkAssignableUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findBulkAssignableUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserKeysByQuerySignalErrorFull() instead")
    void findUserKeysByQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserKeysByQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersSignalErrorFull() instead")
    void findUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersByQuerySignalErrorFull() instead")
    void findUsersByQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersByQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersForPickerSignalErrorFull() instead")
    void findUsersForPickerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersForPickerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithAllPermissionsSignalErrorFull() instead")
    void findUsersWithAllPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithAllPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithBrowsePermissionSignalErrorFull() instead")
    void findUsersWithBrowsePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithBrowsePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
