/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentArchiveMetadataReadable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentArchiveMetadataReadable::OAIAttachmentArchiveMetadataReadable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentArchiveMetadataReadable::OAIAttachmentArchiveMetadataReadable() {
    this->initializeModel();
}

OAIAttachmentArchiveMetadataReadable::~OAIAttachmentArchiveMetadataReadable() {}

void OAIAttachmentArchiveMetadataReadable::initializeModel() {

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_total_entry_count_isSet = false;
    m_total_entry_count_isValid = false;
}

void OAIAttachmentArchiveMetadataReadable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentArchiveMetadataReadable::fromJsonObject(QJsonObject json) {

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_total_entry_count_isValid = ::OpenAPI::fromJsonValue(m_total_entry_count, json[QString("totalEntryCount")]);
    m_total_entry_count_isSet = !json[QString("totalEntryCount")].isNull() && m_total_entry_count_isValid;
}

QString OAIAttachmentArchiveMetadataReadable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentArchiveMetadataReadable::asJsonObject() const {
    QJsonObject obj;
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_total_entry_count_isSet) {
        obj.insert(QString("totalEntryCount"), ::OpenAPI::toJsonValue(m_total_entry_count));
    }
    return obj;
}

QList<OAIAttachmentArchiveItemReadable> OAIAttachmentArchiveMetadataReadable::getEntries() const {
    return m_entries;
}
void OAIAttachmentArchiveMetadataReadable::setEntries(const QList<OAIAttachmentArchiveItemReadable> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIAttachmentArchiveMetadataReadable::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIAttachmentArchiveMetadataReadable::is_entries_Valid() const{
    return m_entries_isValid;
}

qint64 OAIAttachmentArchiveMetadataReadable::getId() const {
    return m_id;
}
void OAIAttachmentArchiveMetadataReadable::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachmentArchiveMetadataReadable::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachmentArchiveMetadataReadable::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAttachmentArchiveMetadataReadable::getMediaType() const {
    return m_media_type;
}
void OAIAttachmentArchiveMetadataReadable::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIAttachmentArchiveMetadataReadable::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIAttachmentArchiveMetadataReadable::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIAttachmentArchiveMetadataReadable::getName() const {
    return m_name;
}
void OAIAttachmentArchiveMetadataReadable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttachmentArchiveMetadataReadable::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachmentArchiveMetadataReadable::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIAttachmentArchiveMetadataReadable::getTotalEntryCount() const {
    return m_total_entry_count;
}
void OAIAttachmentArchiveMetadataReadable::setTotalEntryCount(const qint64 &total_entry_count) {
    m_total_entry_count = total_entry_count;
    m_total_entry_count_isSet = true;
}

bool OAIAttachmentArchiveMetadataReadable::is_total_entry_count_Set() const{
    return m_total_entry_count_isSet;
}

bool OAIAttachmentArchiveMetadataReadable::is_total_entry_count_Valid() const{
    return m_total_entry_count_isValid;
}

bool OAIAttachmentArchiveMetadataReadable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_entry_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentArchiveMetadataReadable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
