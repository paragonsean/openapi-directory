/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPermission::OAIUserPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPermission::OAIUserPermission() {
    this->initializeModel();
}

OAIUserPermission::~OAIUserPermission() {}

void OAIUserPermission::initializeModel() {

    m_deprecated_key_isSet = false;
    m_deprecated_key_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_have_permission_isSet = false;
    m_have_permission_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUserPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPermission::fromJsonObject(QJsonObject json) {

    m_deprecated_key_isValid = ::OpenAPI::fromJsonValue(m_deprecated_key, json[QString("deprecatedKey")]);
    m_deprecated_key_isSet = !json[QString("deprecatedKey")].isNull() && m_deprecated_key_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_have_permission_isValid = ::OpenAPI::fromJsonValue(m_have_permission, json[QString("havePermission")]);
    m_have_permission_isSet = !json[QString("havePermission")].isNull() && m_have_permission_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUserPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_key_isSet) {
        obj.insert(QString("deprecatedKey"), ::OpenAPI::toJsonValue(m_deprecated_key));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_have_permission_isSet) {
        obj.insert(QString("havePermission"), ::OpenAPI::toJsonValue(m_have_permission));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIUserPermission::isDeprecatedKey() const {
    return m_deprecated_key;
}
void OAIUserPermission::setDeprecatedKey(const bool &deprecated_key) {
    m_deprecated_key = deprecated_key;
    m_deprecated_key_isSet = true;
}

bool OAIUserPermission::is_deprecated_key_Set() const{
    return m_deprecated_key_isSet;
}

bool OAIUserPermission::is_deprecated_key_Valid() const{
    return m_deprecated_key_isValid;
}

QString OAIUserPermission::getDescription() const {
    return m_description;
}
void OAIUserPermission::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUserPermission::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUserPermission::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUserPermission::isHavePermission() const {
    return m_have_permission;
}
void OAIUserPermission::setHavePermission(const bool &have_permission) {
    m_have_permission = have_permission;
    m_have_permission_isSet = true;
}

bool OAIUserPermission::is_have_permission_Set() const{
    return m_have_permission_isSet;
}

bool OAIUserPermission::is_have_permission_Valid() const{
    return m_have_permission_isValid;
}

QString OAIUserPermission::getId() const {
    return m_id;
}
void OAIUserPermission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserPermission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserPermission::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserPermission::getKey() const {
    return m_key;
}
void OAIUserPermission::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUserPermission::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUserPermission::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIUserPermission::getName() const {
    return m_name;
}
void OAIUserPermission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserPermission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserPermission::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserPermission::getType() const {
    return m_type;
}
void OAIUserPermission::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUserPermission::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUserPermission::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUserPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_have_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
