/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkflowTransitionRulesDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkflowTransitionRulesDetails::OAICreateWorkflowTransitionRulesDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkflowTransitionRulesDetails::OAICreateWorkflowTransitionRulesDetails() {
    this->initializeModel();
}

OAICreateWorkflowTransitionRulesDetails::~OAICreateWorkflowTransitionRulesDetails() {}

void OAICreateWorkflowTransitionRulesDetails::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_post_functions_isSet = false;
    m_post_functions_isValid = false;

    m_validators_isSet = false;
    m_validators_isValid = false;
}

void OAICreateWorkflowTransitionRulesDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkflowTransitionRulesDetails::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_post_functions_isValid = ::OpenAPI::fromJsonValue(m_post_functions, json[QString("postFunctions")]);
    m_post_functions_isSet = !json[QString("postFunctions")].isNull() && m_post_functions_isValid;

    m_validators_isValid = ::OpenAPI::fromJsonValue(m_validators, json[QString("validators")]);
    m_validators_isSet = !json[QString("validators")].isNull() && m_validators_isValid;
}

QString OAICreateWorkflowTransitionRulesDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkflowTransitionRulesDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.isSet()) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_post_functions.size() > 0) {
        obj.insert(QString("postFunctions"), ::OpenAPI::toJsonValue(m_post_functions));
    }
    if (m_validators.size() > 0) {
        obj.insert(QString("validators"), ::OpenAPI::toJsonValue(m_validators));
    }
    return obj;
}

OAICreateWorkflowCondition OAICreateWorkflowTransitionRulesDetails::getConditions() const {
    return m_conditions;
}
void OAICreateWorkflowTransitionRulesDetails::setConditions(const OAICreateWorkflowCondition &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICreateWorkflowTransitionRulesDetails::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICreateWorkflowTransitionRulesDetails::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QList<OAICreateWorkflowTransitionRule> OAICreateWorkflowTransitionRulesDetails::getPostFunctions() const {
    return m_post_functions;
}
void OAICreateWorkflowTransitionRulesDetails::setPostFunctions(const QList<OAICreateWorkflowTransitionRule> &post_functions) {
    m_post_functions = post_functions;
    m_post_functions_isSet = true;
}

bool OAICreateWorkflowTransitionRulesDetails::is_post_functions_Set() const{
    return m_post_functions_isSet;
}

bool OAICreateWorkflowTransitionRulesDetails::is_post_functions_Valid() const{
    return m_post_functions_isValid;
}

QList<OAICreateWorkflowTransitionRule> OAICreateWorkflowTransitionRulesDetails::getValidators() const {
    return m_validators;
}
void OAICreateWorkflowTransitionRulesDetails::setValidators(const QList<OAICreateWorkflowTransitionRule> &validators) {
    m_validators = validators;
    m_validators_isSet = true;
}

bool OAICreateWorkflowTransitionRulesDetails::is_validators_Set() const{
    return m_validators_isSet;
}

bool OAICreateWorkflowTransitionRulesDetails::is_validators_Valid() const{
    return m_validators_isValid;
}

bool OAICreateWorkflowTransitionRulesDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validators.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkflowTransitionRulesDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
