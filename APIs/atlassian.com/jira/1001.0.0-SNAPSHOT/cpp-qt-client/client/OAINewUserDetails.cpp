/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewUserDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewUserDetails::OAINewUserDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewUserDetails::OAINewUserDetails() {
    this->initializeModel();
}

OAINewUserDetails::~OAINewUserDetails() {}

void OAINewUserDetails::initializeModel() {

    m_application_keys_isSet = false;
    m_application_keys_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAINewUserDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewUserDetails::fromJsonObject(QJsonObject json) {

    m_application_keys_isValid = ::OpenAPI::fromJsonValue(m_application_keys, json[QString("applicationKeys")]);
    m_application_keys_isSet = !json[QString("applicationKeys")].isNull() && m_application_keys_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAINewUserDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewUserDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_application_keys.size() > 0) {
        obj.insert(QString("applicationKeys"), ::OpenAPI::toJsonValue(m_application_keys));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QList<QString> OAINewUserDetails::getApplicationKeys() const {
    return m_application_keys;
}
void OAINewUserDetails::setApplicationKeys(const QList<QString> &application_keys) {
    m_application_keys = application_keys;
    m_application_keys_isSet = true;
}

bool OAINewUserDetails::is_application_keys_Set() const{
    return m_application_keys_isSet;
}

bool OAINewUserDetails::is_application_keys_Valid() const{
    return m_application_keys_isValid;
}

QString OAINewUserDetails::getDisplayName() const {
    return m_display_name;
}
void OAINewUserDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAINewUserDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAINewUserDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAINewUserDetails::getEmailAddress() const {
    return m_email_address;
}
void OAINewUserDetails::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAINewUserDetails::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAINewUserDetails::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAINewUserDetails::getKey() const {
    return m_key;
}
void OAINewUserDetails::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAINewUserDetails::is_key_Set() const{
    return m_key_isSet;
}

bool OAINewUserDetails::is_key_Valid() const{
    return m_key_isValid;
}

QString OAINewUserDetails::getName() const {
    return m_name;
}
void OAINewUserDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINewUserDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAINewUserDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINewUserDetails::getPassword() const {
    return m_password;
}
void OAINewUserDetails::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAINewUserDetails::is_password_Set() const{
    return m_password_isSet;
}

bool OAINewUserDetails::is_password_Valid() const{
    return m_password_isValid;
}

QSet<QString> OAINewUserDetails::getProducts() const {
    return m_products;
}
void OAINewUserDetails::setProducts(const QSet<QString> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAINewUserDetails::is_products_Set() const{
    return m_products_isSet;
}

bool OAINewUserDetails::is_products_Valid() const{
    return m_products_isValid;
}

QString OAINewUserDetails::getSelf() const {
    return m_self;
}
void OAINewUserDetails::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAINewUserDetails::is_self_Set() const{
    return m_self_isSet;
}

bool OAINewUserDetails::is_self_Valid() const{
    return m_self_isValid;
}

bool OAINewUserDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewUserDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_address_isValid && true;
}

} // namespace OpenAPI
