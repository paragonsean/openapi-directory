/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectRoleActorsApi_H
#define OAI_OAIProjectRoleActorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActorInputBean.h"
#include "OAIActorsMap.h"
#include "OAIProjectRole.h"
#include "OAIProjectRoleActorsUpdateBean.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectRoleActorsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectRoleActorsApi(const int timeOut = 0);
    ~OAIProjectRoleActorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_actors_map OAIActorsMap [required]
    */
    virtual void addActorUsers(const QString &project_id_or_key, const qint64 &id, const OAIActorsMap &oai_actors_map);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_actor_input_bean OAIActorInputBean [required]
    */
    virtual void addProjectRoleActorsToRole(const qint64 &id, const OAIActorInputBean &oai_actor_input_bean);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  user QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  group_id QString [optional]
    */
    virtual void deleteActor(const QString &project_id_or_key, const qint64 &id, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  user QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    */
    virtual void deleteProjectRoleActorsFromRole(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectRoleActorsForRole(const qint64 &id);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_project_role_actors_update_bean OAIProjectRoleActorsUpdateBean [required]
    */
    virtual void setActors(const QString &project_id_or_key, const qint64 &id, const OAIProjectRoleActorsUpdateBean &oai_project_role_actors_update_bean);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addActorUsersCallback(OAIHttpRequestWorker *worker);
    void addProjectRoleActorsToRoleCallback(OAIHttpRequestWorker *worker);
    void deleteActorCallback(OAIHttpRequestWorker *worker);
    void deleteProjectRoleActorsFromRoleCallback(OAIHttpRequestWorker *worker);
    void getProjectRoleActorsForRoleCallback(OAIHttpRequestWorker *worker);
    void setActorsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addActorUsersSignal(OAIProjectRole summary);
    void addProjectRoleActorsToRoleSignal(OAIProjectRole summary);
    void deleteActorSignal();
    void deleteProjectRoleActorsFromRoleSignal(OAIProjectRole summary);
    void getProjectRoleActorsForRoleSignal(OAIProjectRole summary);
    void setActorsSignal(OAIProjectRole summary);


    void addActorUsersSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void addProjectRoleActorsToRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void deleteActorSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectRoleActorsFromRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void getProjectRoleActorsForRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void setActorsSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);

    Q_DECL_DEPRECATED_X("Use addActorUsersSignalError() instead")
    void addActorUsersSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addActorUsersSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addProjectRoleActorsToRoleSignalError() instead")
    void addProjectRoleActorsToRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectRoleActorsToRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActorSignalError() instead")
    void deleteActorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleActorsFromRoleSignalError() instead")
    void deleteProjectRoleActorsFromRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleActorsFromRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleActorsForRoleSignalError() instead")
    void getProjectRoleActorsForRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleActorsForRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setActorsSignalError() instead")
    void setActorsSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setActorsSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addActorUsersSignalErrorFull() instead")
    void addActorUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addActorUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addProjectRoleActorsToRoleSignalErrorFull() instead")
    void addProjectRoleActorsToRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectRoleActorsToRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActorSignalErrorFull() instead")
    void deleteActorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleActorsFromRoleSignalErrorFull() instead")
    void deleteProjectRoleActorsFromRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleActorsFromRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleActorsForRoleSignalErrorFull() instead")
    void getProjectRoleActorsForRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleActorsForRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setActorsSignalErrorFull() instead")
    void setActorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setActorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
