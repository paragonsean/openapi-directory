/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScreenTabFieldsApi_H
#define OAI_OAIScreenTabFieldsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddFieldBean.h"
#include "OAIMoveFieldBean.h"
#include "OAIScreenableField.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScreenTabFieldsApi : public QObject {
    Q_OBJECT

public:
    OAIScreenTabFieldsApi(const int timeOut = 0);
    ~OAIScreenTabFieldsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  oai_add_field_bean OAIAddFieldBean [required]
    */
    virtual void addScreenTabField(const qint64 &screen_id, const qint64 &tab_id, const OAIAddFieldBean &oai_add_field_bean);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  project_key QString [optional]
    */
    virtual void getAllScreenTabFields(const qint64 &screen_id, const qint64 &tab_id, const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_move_field_bean OAIMoveFieldBean [required]
    */
    virtual void moveScreenTabField(const qint64 &screen_id, const qint64 &tab_id, const QString &id, const OAIMoveFieldBean &oai_move_field_bean);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  id QString [required]
    */
    virtual void removeScreenTabField(const qint64 &screen_id, const qint64 &tab_id, const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addScreenTabFieldCallback(OAIHttpRequestWorker *worker);
    void getAllScreenTabFieldsCallback(OAIHttpRequestWorker *worker);
    void moveScreenTabFieldCallback(OAIHttpRequestWorker *worker);
    void removeScreenTabFieldCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addScreenTabFieldSignal(OAIScreenableField summary);
    void getAllScreenTabFieldsSignal(QList<OAIScreenableField> summary);
    void moveScreenTabFieldSignal(QJsonValue summary);
    void removeScreenTabFieldSignal();


    void addScreenTabFieldSignalFull(OAIHttpRequestWorker *worker, OAIScreenableField summary);
    void getAllScreenTabFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenableField> summary);
    void moveScreenTabFieldSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void removeScreenTabFieldSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addScreenTabFieldSignalError() instead")
    void addScreenTabFieldSignalE(OAIScreenableField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addScreenTabFieldSignalError(OAIScreenableField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllScreenTabFieldsSignalError() instead")
    void getAllScreenTabFieldsSignalE(QList<OAIScreenableField> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllScreenTabFieldsSignalError(QList<OAIScreenableField> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveScreenTabFieldSignalError() instead")
    void moveScreenTabFieldSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveScreenTabFieldSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeScreenTabFieldSignalError() instead")
    void removeScreenTabFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeScreenTabFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addScreenTabFieldSignalErrorFull() instead")
    void addScreenTabFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addScreenTabFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllScreenTabFieldsSignalErrorFull() instead")
    void getAllScreenTabFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllScreenTabFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveScreenTabFieldSignalErrorFull() instead")
    void moveScreenTabFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveScreenTabFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeScreenTabFieldSignalErrorFull() instead")
    void removeScreenTabFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeScreenTabFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
