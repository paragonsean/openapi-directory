/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationRole::OAIApplicationRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationRole::OAIApplicationRole() {
    this->initializeModel();
}

OAIApplicationRole::~OAIApplicationRole() {}

void OAIApplicationRole::initializeModel() {

    m_default_groups_isSet = false;
    m_default_groups_isValid = false;

    m_default_groups_details_isSet = false;
    m_default_groups_details_isValid = false;

    m_defined_isSet = false;
    m_defined_isValid = false;

    m_group_details_isSet = false;
    m_group_details_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_has_unlimited_seats_isSet = false;
    m_has_unlimited_seats_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_seats_isSet = false;
    m_number_of_seats_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_remaining_seats_isSet = false;
    m_remaining_seats_isValid = false;

    m_selected_by_default_isSet = false;
    m_selected_by_default_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_user_count_description_isSet = false;
    m_user_count_description_isValid = false;
}

void OAIApplicationRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationRole::fromJsonObject(QJsonObject json) {

    m_default_groups_isValid = ::OpenAPI::fromJsonValue(m_default_groups, json[QString("defaultGroups")]);
    m_default_groups_isSet = !json[QString("defaultGroups")].isNull() && m_default_groups_isValid;

    m_default_groups_details_isValid = ::OpenAPI::fromJsonValue(m_default_groups_details, json[QString("defaultGroupsDetails")]);
    m_default_groups_details_isSet = !json[QString("defaultGroupsDetails")].isNull() && m_default_groups_details_isValid;

    m_defined_isValid = ::OpenAPI::fromJsonValue(m_defined, json[QString("defined")]);
    m_defined_isSet = !json[QString("defined")].isNull() && m_defined_isValid;

    m_group_details_isValid = ::OpenAPI::fromJsonValue(m_group_details, json[QString("groupDetails")]);
    m_group_details_isSet = !json[QString("groupDetails")].isNull() && m_group_details_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_has_unlimited_seats_isValid = ::OpenAPI::fromJsonValue(m_has_unlimited_seats, json[QString("hasUnlimitedSeats")]);
    m_has_unlimited_seats_isSet = !json[QString("hasUnlimitedSeats")].isNull() && m_has_unlimited_seats_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_seats_isValid = ::OpenAPI::fromJsonValue(m_number_of_seats, json[QString("numberOfSeats")]);
    m_number_of_seats_isSet = !json[QString("numberOfSeats")].isNull() && m_number_of_seats_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_remaining_seats_isValid = ::OpenAPI::fromJsonValue(m_remaining_seats, json[QString("remainingSeats")]);
    m_remaining_seats_isSet = !json[QString("remainingSeats")].isNull() && m_remaining_seats_isValid;

    m_selected_by_default_isValid = ::OpenAPI::fromJsonValue(m_selected_by_default, json[QString("selectedByDefault")]);
    m_selected_by_default_isSet = !json[QString("selectedByDefault")].isNull() && m_selected_by_default_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("userCount")]);
    m_user_count_isSet = !json[QString("userCount")].isNull() && m_user_count_isValid;

    m_user_count_description_isValid = ::OpenAPI::fromJsonValue(m_user_count_description, json[QString("userCountDescription")]);
    m_user_count_description_isSet = !json[QString("userCountDescription")].isNull() && m_user_count_description_isValid;
}

QString OAIApplicationRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationRole::asJsonObject() const {
    QJsonObject obj;
    if (m_default_groups.size() > 0) {
        obj.insert(QString("defaultGroups"), ::OpenAPI::toJsonValue(m_default_groups));
    }
    if (m_default_groups_details.size() > 0) {
        obj.insert(QString("defaultGroupsDetails"), ::OpenAPI::toJsonValue(m_default_groups_details));
    }
    if (m_defined_isSet) {
        obj.insert(QString("defined"), ::OpenAPI::toJsonValue(m_defined));
    }
    if (m_group_details.size() > 0) {
        obj.insert(QString("groupDetails"), ::OpenAPI::toJsonValue(m_group_details));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_has_unlimited_seats_isSet) {
        obj.insert(QString("hasUnlimitedSeats"), ::OpenAPI::toJsonValue(m_has_unlimited_seats));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_seats_isSet) {
        obj.insert(QString("numberOfSeats"), ::OpenAPI::toJsonValue(m_number_of_seats));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_remaining_seats_isSet) {
        obj.insert(QString("remainingSeats"), ::OpenAPI::toJsonValue(m_remaining_seats));
    }
    if (m_selected_by_default_isSet) {
        obj.insert(QString("selectedByDefault"), ::OpenAPI::toJsonValue(m_selected_by_default));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("userCount"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_user_count_description_isSet) {
        obj.insert(QString("userCountDescription"), ::OpenAPI::toJsonValue(m_user_count_description));
    }
    return obj;
}

QSet<QString> OAIApplicationRole::getDefaultGroups() const {
    return m_default_groups;
}
void OAIApplicationRole::setDefaultGroups(const QSet<QString> &default_groups) {
    m_default_groups = default_groups;
    m_default_groups_isSet = true;
}

bool OAIApplicationRole::is_default_groups_Set() const{
    return m_default_groups_isSet;
}

bool OAIApplicationRole::is_default_groups_Valid() const{
    return m_default_groups_isValid;
}

QList<OAIGroupName> OAIApplicationRole::getDefaultGroupsDetails() const {
    return m_default_groups_details;
}
void OAIApplicationRole::setDefaultGroupsDetails(const QList<OAIGroupName> &default_groups_details) {
    m_default_groups_details = default_groups_details;
    m_default_groups_details_isSet = true;
}

bool OAIApplicationRole::is_default_groups_details_Set() const{
    return m_default_groups_details_isSet;
}

bool OAIApplicationRole::is_default_groups_details_Valid() const{
    return m_default_groups_details_isValid;
}

bool OAIApplicationRole::isDefined() const {
    return m_defined;
}
void OAIApplicationRole::setDefined(const bool &defined) {
    m_defined = defined;
    m_defined_isSet = true;
}

bool OAIApplicationRole::is_defined_Set() const{
    return m_defined_isSet;
}

bool OAIApplicationRole::is_defined_Valid() const{
    return m_defined_isValid;
}

QList<OAIGroupName> OAIApplicationRole::getGroupDetails() const {
    return m_group_details;
}
void OAIApplicationRole::setGroupDetails(const QList<OAIGroupName> &group_details) {
    m_group_details = group_details;
    m_group_details_isSet = true;
}

bool OAIApplicationRole::is_group_details_Set() const{
    return m_group_details_isSet;
}

bool OAIApplicationRole::is_group_details_Valid() const{
    return m_group_details_isValid;
}

QSet<QString> OAIApplicationRole::getGroups() const {
    return m_groups;
}
void OAIApplicationRole::setGroups(const QSet<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIApplicationRole::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIApplicationRole::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIApplicationRole::isHasUnlimitedSeats() const {
    return m_has_unlimited_seats;
}
void OAIApplicationRole::setHasUnlimitedSeats(const bool &has_unlimited_seats) {
    m_has_unlimited_seats = has_unlimited_seats;
    m_has_unlimited_seats_isSet = true;
}

bool OAIApplicationRole::is_has_unlimited_seats_Set() const{
    return m_has_unlimited_seats_isSet;
}

bool OAIApplicationRole::is_has_unlimited_seats_Valid() const{
    return m_has_unlimited_seats_isValid;
}

QString OAIApplicationRole::getKey() const {
    return m_key;
}
void OAIApplicationRole::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApplicationRole::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApplicationRole::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIApplicationRole::getName() const {
    return m_name;
}
void OAIApplicationRole::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationRole::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationRole::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIApplicationRole::getNumberOfSeats() const {
    return m_number_of_seats;
}
void OAIApplicationRole::setNumberOfSeats(const qint32 &number_of_seats) {
    m_number_of_seats = number_of_seats;
    m_number_of_seats_isSet = true;
}

bool OAIApplicationRole::is_number_of_seats_Set() const{
    return m_number_of_seats_isSet;
}

bool OAIApplicationRole::is_number_of_seats_Valid() const{
    return m_number_of_seats_isValid;
}

bool OAIApplicationRole::isPlatform() const {
    return m_platform;
}
void OAIApplicationRole::setPlatform(const bool &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIApplicationRole::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIApplicationRole::is_platform_Valid() const{
    return m_platform_isValid;
}

qint32 OAIApplicationRole::getRemainingSeats() const {
    return m_remaining_seats;
}
void OAIApplicationRole::setRemainingSeats(const qint32 &remaining_seats) {
    m_remaining_seats = remaining_seats;
    m_remaining_seats_isSet = true;
}

bool OAIApplicationRole::is_remaining_seats_Set() const{
    return m_remaining_seats_isSet;
}

bool OAIApplicationRole::is_remaining_seats_Valid() const{
    return m_remaining_seats_isValid;
}

bool OAIApplicationRole::isSelectedByDefault() const {
    return m_selected_by_default;
}
void OAIApplicationRole::setSelectedByDefault(const bool &selected_by_default) {
    m_selected_by_default = selected_by_default;
    m_selected_by_default_isSet = true;
}

bool OAIApplicationRole::is_selected_by_default_Set() const{
    return m_selected_by_default_isSet;
}

bool OAIApplicationRole::is_selected_by_default_Valid() const{
    return m_selected_by_default_isValid;
}

qint32 OAIApplicationRole::getUserCount() const {
    return m_user_count;
}
void OAIApplicationRole::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIApplicationRole::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIApplicationRole::is_user_count_Valid() const{
    return m_user_count_isValid;
}

QString OAIApplicationRole::getUserCountDescription() const {
    return m_user_count_description;
}
void OAIApplicationRole::setUserCountDescription(const QString &user_count_description) {
    m_user_count_description = user_count_description;
    m_user_count_description_isSet = true;
}

bool OAIApplicationRole::is_user_count_description_Set() const{
    return m_user_count_description_isSet;
}

bool OAIApplicationRole::is_user_count_description_Valid() const{
    return m_user_count_description_isValid;
}

bool OAIApplicationRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_groups_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_defined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_unlimited_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
