/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueTypesApi_H
#define OAI_OAIIssueTypesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAvatar.h"
#include "OAIIssueTypeCreateBean.h"
#include "OAIIssueTypeDetails.h"
#include "OAIIssueTypeUpdateBean.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueTypesApi : public QObject {
    Q_OBJECT

public:
    OAIIssueTypesApi(const int timeOut = 0);
    ~OAIIssueTypesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_issue_type_create_bean OAIIssueTypeCreateBean [required]
    */
    virtual void createIssueType(const OAIIssueTypeCreateBean &oai_issue_type_create_bean);

    /**
    * @param[in]  id QString [required]
    * @param[in]  size qint32 [required]
    * @param[in]  body QJsonValue [required]
    * @param[in]  x qint32 [optional]
    * @param[in]  y qint32 [optional]
    */
    virtual void createIssueTypeAvatar(const QString &id, const qint32 &size, const QJsonValue &body, const ::OpenAPI::OptionalParam<qint32> &x = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &y = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  alternative_issue_type_id QString [optional]
    */
    virtual void deleteIssueType(const QString &id, const ::OpenAPI::OptionalParam<QString> &alternative_issue_type_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAlternativeIssueTypes(const QString &id);


    virtual void getIssueAllTypes();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getIssueType(const QString &id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  level qint32 [optional]
    */
    virtual void getIssueTypesForProject(const qint64 &project_id, const ::OpenAPI::OptionalParam<qint32> &level = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_issue_type_update_bean OAIIssueTypeUpdateBean [required]
    */
    virtual void updateIssueType(const QString &id, const OAIIssueTypeUpdateBean &oai_issue_type_update_bean);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIssueTypeCallback(OAIHttpRequestWorker *worker);
    void createIssueTypeAvatarCallback(OAIHttpRequestWorker *worker);
    void deleteIssueTypeCallback(OAIHttpRequestWorker *worker);
    void getAlternativeIssueTypesCallback(OAIHttpRequestWorker *worker);
    void getIssueAllTypesCallback(OAIHttpRequestWorker *worker);
    void getIssueTypeCallback(OAIHttpRequestWorker *worker);
    void getIssueTypesForProjectCallback(OAIHttpRequestWorker *worker);
    void updateIssueTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIssueTypeSignal(OAIIssueTypeDetails summary);
    void createIssueTypeAvatarSignal(OAIAvatar summary);
    void deleteIssueTypeSignal();
    void getAlternativeIssueTypesSignal(QList<OAIIssueTypeDetails> summary);
    void getIssueAllTypesSignal(QList<OAIIssueTypeDetails> summary);
    void getIssueTypeSignal(OAIIssueTypeDetails summary);
    void getIssueTypesForProjectSignal(QList<OAIIssueTypeDetails> summary);
    void updateIssueTypeSignal(OAIIssueTypeDetails summary);


    void createIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeDetails summary);
    void createIssueTypeAvatarSignalFull(OAIHttpRequestWorker *worker, OAIAvatar summary);
    void deleteIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void getAlternativeIssueTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssueTypeDetails> summary);
    void getIssueAllTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssueTypeDetails> summary);
    void getIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeDetails summary);
    void getIssueTypesForProjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssueTypeDetails> summary);
    void updateIssueTypeSignalFull(OAIHttpRequestWorker *worker, OAIIssueTypeDetails summary);

    Q_DECL_DEPRECATED_X("Use createIssueTypeSignalError() instead")
    void createIssueTypeSignalE(OAIIssueTypeDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeSignalError(OAIIssueTypeDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeAvatarSignalError() instead")
    void createIssueTypeAvatarSignalE(OAIAvatar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeAvatarSignalError(OAIAvatar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueTypeSignalError() instead")
    void deleteIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlternativeIssueTypesSignalError() instead")
    void getAlternativeIssueTypesSignalE(QList<OAIIssueTypeDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlternativeIssueTypesSignalError(QList<OAIIssueTypeDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueAllTypesSignalError() instead")
    void getIssueAllTypesSignalE(QList<OAIIssueTypeDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueAllTypesSignalError(QList<OAIIssueTypeDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeSignalError() instead")
    void getIssueTypeSignalE(OAIIssueTypeDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeSignalError(OAIIssueTypeDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypesForProjectSignalError() instead")
    void getIssueTypesForProjectSignalE(QList<OAIIssueTypeDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypesForProjectSignalError(QList<OAIIssueTypeDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeSignalError() instead")
    void updateIssueTypeSignalE(OAIIssueTypeDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeSignalError(OAIIssueTypeDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIssueTypeSignalErrorFull() instead")
    void createIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeAvatarSignalErrorFull() instead")
    void createIssueTypeAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueTypeSignalErrorFull() instead")
    void deleteIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlternativeIssueTypesSignalErrorFull() instead")
    void getAlternativeIssueTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlternativeIssueTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueAllTypesSignalErrorFull() instead")
    void getIssueAllTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueAllTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypeSignalErrorFull() instead")
    void getIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueTypesForProjectSignalErrorFull() instead")
    void getIssueTypesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueTypesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeSignalErrorFull() instead")
    void updateIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
