/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueWatchersApi_H
#define OAI_OAIIssueWatchersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkIssueIsWatching.h"
#include "OAIIssueList.h"
#include "OAIWatchers.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueWatchersApi : public QObject {
    Q_OBJECT

public:
    OAIIssueWatchersApi(const int timeOut = 0);
    ~OAIIssueWatchersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  body QString [required]
    */
    virtual void addWatcher(const QString &issue_id_or_key, const QString &body);

    /**
    * @param[in]  oai_issue_list OAIIssueList [required]
    */
    virtual void getIsWatchingIssueBulk(const OAIIssueList &oai_issue_list);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getIssueWatchers(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  account_id QString [optional]
    */
    virtual void removeWatcher(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addWatcherCallback(OAIHttpRequestWorker *worker);
    void getIsWatchingIssueBulkCallback(OAIHttpRequestWorker *worker);
    void getIssueWatchersCallback(OAIHttpRequestWorker *worker);
    void removeWatcherCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addWatcherSignal(QJsonValue summary);
    void getIsWatchingIssueBulkSignal(OAIBulkIssueIsWatching summary);
    void getIssueWatchersSignal(OAIWatchers summary);
    void removeWatcherSignal();


    void addWatcherSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getIsWatchingIssueBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkIssueIsWatching summary);
    void getIssueWatchersSignalFull(OAIHttpRequestWorker *worker, OAIWatchers summary);
    void removeWatcherSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addWatcherSignalError() instead")
    void addWatcherSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addWatcherSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIsWatchingIssueBulkSignalError() instead")
    void getIsWatchingIssueBulkSignalE(OAIBulkIssueIsWatching summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIsWatchingIssueBulkSignalError(OAIBulkIssueIsWatching summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWatchersSignalError() instead")
    void getIssueWatchersSignalE(OAIWatchers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWatchersSignalError(OAIWatchers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWatcherSignalError() instead")
    void removeWatcherSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeWatcherSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addWatcherSignalErrorFull() instead")
    void addWatcherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWatcherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIsWatchingIssueBulkSignalErrorFull() instead")
    void getIsWatchingIssueBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIsWatchingIssueBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWatchersSignalErrorFull() instead")
    void getIssueWatchersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWatchersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWatcherSignalErrorFull() instead")
    void removeWatcherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeWatcherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
