/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnouncementBannerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnouncementBannerConfiguration::OAIAnnouncementBannerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnouncementBannerConfiguration::OAIAnnouncementBannerConfiguration() {
    this->initializeModel();
}

OAIAnnouncementBannerConfiguration::~OAIAnnouncementBannerConfiguration() {}

void OAIAnnouncementBannerConfiguration::initializeModel() {

    m_hash_id_isSet = false;
    m_hash_id_isValid = false;

    m_is_dismissible_isSet = false;
    m_is_dismissible_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIAnnouncementBannerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnouncementBannerConfiguration::fromJsonObject(QJsonObject json) {

    m_hash_id_isValid = ::OpenAPI::fromJsonValue(m_hash_id, json[QString("hashId")]);
    m_hash_id_isSet = !json[QString("hashId")].isNull() && m_hash_id_isValid;

    m_is_dismissible_isValid = ::OpenAPI::fromJsonValue(m_is_dismissible, json[QString("isDismissible")]);
    m_is_dismissible_isSet = !json[QString("isDismissible")].isNull() && m_is_dismissible_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIAnnouncementBannerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnouncementBannerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_hash_id_isSet) {
        obj.insert(QString("hashId"), ::OpenAPI::toJsonValue(m_hash_id));
    }
    if (m_is_dismissible_isSet) {
        obj.insert(QString("isDismissible"), ::OpenAPI::toJsonValue(m_is_dismissible));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIAnnouncementBannerConfiguration::getHashId() const {
    return m_hash_id;
}
void OAIAnnouncementBannerConfiguration::setHashId(const QString &hash_id) {
    m_hash_id = hash_id;
    m_hash_id_isSet = true;
}

bool OAIAnnouncementBannerConfiguration::is_hash_id_Set() const{
    return m_hash_id_isSet;
}

bool OAIAnnouncementBannerConfiguration::is_hash_id_Valid() const{
    return m_hash_id_isValid;
}

bool OAIAnnouncementBannerConfiguration::isIsDismissible() const {
    return m_is_dismissible;
}
void OAIAnnouncementBannerConfiguration::setIsDismissible(const bool &is_dismissible) {
    m_is_dismissible = is_dismissible;
    m_is_dismissible_isSet = true;
}

bool OAIAnnouncementBannerConfiguration::is_is_dismissible_Set() const{
    return m_is_dismissible_isSet;
}

bool OAIAnnouncementBannerConfiguration::is_is_dismissible_Valid() const{
    return m_is_dismissible_isValid;
}

bool OAIAnnouncementBannerConfiguration::isIsEnabled() const {
    return m_is_enabled;
}
void OAIAnnouncementBannerConfiguration::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIAnnouncementBannerConfiguration::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIAnnouncementBannerConfiguration::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QString OAIAnnouncementBannerConfiguration::getMessage() const {
    return m_message;
}
void OAIAnnouncementBannerConfiguration::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAnnouncementBannerConfiguration::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAnnouncementBannerConfiguration::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAnnouncementBannerConfiguration::getVisibility() const {
    return m_visibility;
}
void OAIAnnouncementBannerConfiguration::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIAnnouncementBannerConfiguration::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIAnnouncementBannerConfiguration::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIAnnouncementBannerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hash_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dismissible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnouncementBannerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
