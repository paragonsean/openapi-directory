/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeTrackingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeTrackingConfiguration::OAITimeTrackingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeTrackingConfiguration::OAITimeTrackingConfiguration() {
    this->initializeModel();
}

OAITimeTrackingConfiguration::~OAITimeTrackingConfiguration() {}

void OAITimeTrackingConfiguration::initializeModel() {

    m_default_unit_isSet = false;
    m_default_unit_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_working_days_per_week_isSet = false;
    m_working_days_per_week_isValid = false;

    m_working_hours_per_day_isSet = false;
    m_working_hours_per_day_isValid = false;
}

void OAITimeTrackingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeTrackingConfiguration::fromJsonObject(QJsonObject json) {

    m_default_unit_isValid = ::OpenAPI::fromJsonValue(m_default_unit, json[QString("defaultUnit")]);
    m_default_unit_isSet = !json[QString("defaultUnit")].isNull() && m_default_unit_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_working_days_per_week_isValid = ::OpenAPI::fromJsonValue(m_working_days_per_week, json[QString("workingDaysPerWeek")]);
    m_working_days_per_week_isSet = !json[QString("workingDaysPerWeek")].isNull() && m_working_days_per_week_isValid;

    m_working_hours_per_day_isValid = ::OpenAPI::fromJsonValue(m_working_hours_per_day, json[QString("workingHoursPerDay")]);
    m_working_hours_per_day_isSet = !json[QString("workingHoursPerDay")].isNull() && m_working_hours_per_day_isValid;
}

QString OAITimeTrackingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeTrackingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_default_unit_isSet) {
        obj.insert(QString("defaultUnit"), ::OpenAPI::toJsonValue(m_default_unit));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_working_days_per_week_isSet) {
        obj.insert(QString("workingDaysPerWeek"), ::OpenAPI::toJsonValue(m_working_days_per_week));
    }
    if (m_working_hours_per_day_isSet) {
        obj.insert(QString("workingHoursPerDay"), ::OpenAPI::toJsonValue(m_working_hours_per_day));
    }
    return obj;
}

QString OAITimeTrackingConfiguration::getDefaultUnit() const {
    return m_default_unit;
}
void OAITimeTrackingConfiguration::setDefaultUnit(const QString &default_unit) {
    m_default_unit = default_unit;
    m_default_unit_isSet = true;
}

bool OAITimeTrackingConfiguration::is_default_unit_Set() const{
    return m_default_unit_isSet;
}

bool OAITimeTrackingConfiguration::is_default_unit_Valid() const{
    return m_default_unit_isValid;
}

QString OAITimeTrackingConfiguration::getTimeFormat() const {
    return m_time_format;
}
void OAITimeTrackingConfiguration::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAITimeTrackingConfiguration::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAITimeTrackingConfiguration::is_time_format_Valid() const{
    return m_time_format_isValid;
}

double OAITimeTrackingConfiguration::getWorkingDaysPerWeek() const {
    return m_working_days_per_week;
}
void OAITimeTrackingConfiguration::setWorkingDaysPerWeek(const double &working_days_per_week) {
    m_working_days_per_week = working_days_per_week;
    m_working_days_per_week_isSet = true;
}

bool OAITimeTrackingConfiguration::is_working_days_per_week_Set() const{
    return m_working_days_per_week_isSet;
}

bool OAITimeTrackingConfiguration::is_working_days_per_week_Valid() const{
    return m_working_days_per_week_isValid;
}

double OAITimeTrackingConfiguration::getWorkingHoursPerDay() const {
    return m_working_hours_per_day;
}
void OAITimeTrackingConfiguration::setWorkingHoursPerDay(const double &working_hours_per_day) {
    m_working_hours_per_day = working_hours_per_day;
    m_working_hours_per_day_isSet = true;
}

bool OAITimeTrackingConfiguration::is_working_hours_per_day_Set() const{
    return m_working_hours_per_day_isSet;
}

bool OAITimeTrackingConfiguration::is_working_hours_per_day_Valid() const{
    return m_working_hours_per_day_isValid;
}

bool OAITimeTrackingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_days_per_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_hours_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeTrackingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_unit_isValid && m_time_format_isValid && m_working_days_per_week_isValid && m_working_hours_per_day_isValid && true;
}

} // namespace OpenAPI
