/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionIssuesStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionIssuesStatus::OAIVersionIssuesStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionIssuesStatus::OAIVersionIssuesStatus() {
    this->initializeModel();
}

OAIVersionIssuesStatus::~OAIVersionIssuesStatus() {}

void OAIVersionIssuesStatus::initializeModel() {

    m_done_isSet = false;
    m_done_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_to_do_isSet = false;
    m_to_do_isValid = false;

    m_unmapped_isSet = false;
    m_unmapped_isValid = false;
}

void OAIVersionIssuesStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionIssuesStatus::fromJsonObject(QJsonObject json) {

    m_done_isValid = ::OpenAPI::fromJsonValue(m_done, json[QString("done")]);
    m_done_isSet = !json[QString("done")].isNull() && m_done_isValid;

    m_in_progress_isValid = ::OpenAPI::fromJsonValue(m_in_progress, json[QString("inProgress")]);
    m_in_progress_isSet = !json[QString("inProgress")].isNull() && m_in_progress_isValid;

    m_to_do_isValid = ::OpenAPI::fromJsonValue(m_to_do, json[QString("toDo")]);
    m_to_do_isSet = !json[QString("toDo")].isNull() && m_to_do_isValid;

    m_unmapped_isValid = ::OpenAPI::fromJsonValue(m_unmapped, json[QString("unmapped")]);
    m_unmapped_isSet = !json[QString("unmapped")].isNull() && m_unmapped_isValid;
}

QString OAIVersionIssuesStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionIssuesStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_done_isSet) {
        obj.insert(QString("done"), ::OpenAPI::toJsonValue(m_done));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("inProgress"), ::OpenAPI::toJsonValue(m_in_progress));
    }
    if (m_to_do_isSet) {
        obj.insert(QString("toDo"), ::OpenAPI::toJsonValue(m_to_do));
    }
    if (m_unmapped_isSet) {
        obj.insert(QString("unmapped"), ::OpenAPI::toJsonValue(m_unmapped));
    }
    return obj;
}

qint64 OAIVersionIssuesStatus::getDone() const {
    return m_done;
}
void OAIVersionIssuesStatus::setDone(const qint64 &done) {
    m_done = done;
    m_done_isSet = true;
}

bool OAIVersionIssuesStatus::is_done_Set() const{
    return m_done_isSet;
}

bool OAIVersionIssuesStatus::is_done_Valid() const{
    return m_done_isValid;
}

qint64 OAIVersionIssuesStatus::getInProgress() const {
    return m_in_progress;
}
void OAIVersionIssuesStatus::setInProgress(const qint64 &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OAIVersionIssuesStatus::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OAIVersionIssuesStatus::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

qint64 OAIVersionIssuesStatus::getToDo() const {
    return m_to_do;
}
void OAIVersionIssuesStatus::setToDo(const qint64 &to_do) {
    m_to_do = to_do;
    m_to_do_isSet = true;
}

bool OAIVersionIssuesStatus::is_to_do_Set() const{
    return m_to_do_isSet;
}

bool OAIVersionIssuesStatus::is_to_do_Valid() const{
    return m_to_do_isValid;
}

qint64 OAIVersionIssuesStatus::getUnmapped() const {
    return m_unmapped;
}
void OAIVersionIssuesStatus::setUnmapped(const qint64 &unmapped) {
    m_unmapped = unmapped;
    m_unmapped_isSet = true;
}

bool OAIVersionIssuesStatus::is_unmapped_Set() const{
    return m_unmapped_isSet;
}

bool OAIVersionIssuesStatus::is_unmapped_Valid() const{
    return m_unmapped_isValid;
}

bool OAIVersionIssuesStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_do_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmapped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionIssuesStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
