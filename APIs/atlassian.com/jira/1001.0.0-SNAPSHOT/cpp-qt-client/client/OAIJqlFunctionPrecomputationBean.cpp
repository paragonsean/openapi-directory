/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJqlFunctionPrecomputationBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJqlFunctionPrecomputationBean::OAIJqlFunctionPrecomputationBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJqlFunctionPrecomputationBean::OAIJqlFunctionPrecomputationBean() {
    this->initializeModel();
}

OAIJqlFunctionPrecomputationBean::~OAIJqlFunctionPrecomputationBean() {}

void OAIJqlFunctionPrecomputationBean::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_function_key_isSet = false;
    m_function_key_isValid = false;

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIJqlFunctionPrecomputationBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJqlFunctionPrecomputationBean::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_function_key_isValid = ::OpenAPI::fromJsonValue(m_function_key, json[QString("functionKey")]);
    m_function_key_isSet = !json[QString("functionKey")].isNull() && m_function_key_isValid;

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIJqlFunctionPrecomputationBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJqlFunctionPrecomputationBean::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_function_key_isSet) {
        obj.insert(QString("functionKey"), ::OpenAPI::toJsonValue(m_function_key));
    }
    if (m_function_name_isSet) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<QString> OAIJqlFunctionPrecomputationBean::getArguments() const {
    return m_arguments;
}
void OAIJqlFunctionPrecomputationBean::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QDateTime OAIJqlFunctionPrecomputationBean::getCreated() const {
    return m_created;
}
void OAIJqlFunctionPrecomputationBean::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_created_Set() const{
    return m_created_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIJqlFunctionPrecomputationBean::getField() const {
    return m_field;
}
void OAIJqlFunctionPrecomputationBean::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_field_Set() const{
    return m_field_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIJqlFunctionPrecomputationBean::getFunctionKey() const {
    return m_function_key;
}
void OAIJqlFunctionPrecomputationBean::setFunctionKey(const QString &function_key) {
    m_function_key = function_key;
    m_function_key_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_function_key_Set() const{
    return m_function_key_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_function_key_Valid() const{
    return m_function_key_isValid;
}

QString OAIJqlFunctionPrecomputationBean::getFunctionName() const {
    return m_function_name;
}
void OAIJqlFunctionPrecomputationBean::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIJqlFunctionPrecomputationBean::getId() const {
    return m_id;
}
void OAIJqlFunctionPrecomputationBean::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJqlFunctionPrecomputationBean::getROperator() const {
    return m_r_operator;
}
void OAIJqlFunctionPrecomputationBean::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QDateTime OAIJqlFunctionPrecomputationBean::getUpdated() const {
    return m_updated;
}
void OAIJqlFunctionPrecomputationBean::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_updated_Valid() const{
    return m_updated_isValid;
}

QDateTime OAIJqlFunctionPrecomputationBean::getUsed() const {
    return m_used;
}
void OAIJqlFunctionPrecomputationBean::setUsed(const QDateTime &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_used_Set() const{
    return m_used_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_used_Valid() const{
    return m_used_isValid;
}

QString OAIJqlFunctionPrecomputationBean::getValue() const {
    return m_value;
}
void OAIJqlFunctionPrecomputationBean::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIJqlFunctionPrecomputationBean::is_value_Set() const{
    return m_value_isSet;
}

bool OAIJqlFunctionPrecomputationBean::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIJqlFunctionPrecomputationBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJqlFunctionPrecomputationBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
