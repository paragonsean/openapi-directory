/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectLandingPageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectLandingPageInfo::OAIProjectLandingPageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectLandingPageInfo::OAIProjectLandingPageInfo() {
    this->initializeModel();
}

OAIProjectLandingPageInfo::~OAIProjectLandingPageInfo() {}

void OAIProjectLandingPageInfo::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_board_id_isSet = false;
    m_board_id_isValid = false;

    m_board_name_isSet = false;
    m_board_name_isValid = false;

    m_project_key_isSet = false;
    m_project_key_isValid = false;

    m_project_type_isSet = false;
    m_project_type_isValid = false;

    m_queue_category_isSet = false;
    m_queue_category_isValid = false;

    m_queue_id_isSet = false;
    m_queue_id_isValid = false;

    m_queue_name_isSet = false;
    m_queue_name_isValid = false;

    m_simple_board_isSet = false;
    m_simple_board_isValid = false;

    m_simplified_isSet = false;
    m_simplified_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProjectLandingPageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectLandingPageInfo::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_board_id_isValid = ::OpenAPI::fromJsonValue(m_board_id, json[QString("boardId")]);
    m_board_id_isSet = !json[QString("boardId")].isNull() && m_board_id_isValid;

    m_board_name_isValid = ::OpenAPI::fromJsonValue(m_board_name, json[QString("boardName")]);
    m_board_name_isSet = !json[QString("boardName")].isNull() && m_board_name_isValid;

    m_project_key_isValid = ::OpenAPI::fromJsonValue(m_project_key, json[QString("projectKey")]);
    m_project_key_isSet = !json[QString("projectKey")].isNull() && m_project_key_isValid;

    m_project_type_isValid = ::OpenAPI::fromJsonValue(m_project_type, json[QString("projectType")]);
    m_project_type_isSet = !json[QString("projectType")].isNull() && m_project_type_isValid;

    m_queue_category_isValid = ::OpenAPI::fromJsonValue(m_queue_category, json[QString("queueCategory")]);
    m_queue_category_isSet = !json[QString("queueCategory")].isNull() && m_queue_category_isValid;

    m_queue_id_isValid = ::OpenAPI::fromJsonValue(m_queue_id, json[QString("queueId")]);
    m_queue_id_isSet = !json[QString("queueId")].isNull() && m_queue_id_isValid;

    m_queue_name_isValid = ::OpenAPI::fromJsonValue(m_queue_name, json[QString("queueName")]);
    m_queue_name_isSet = !json[QString("queueName")].isNull() && m_queue_name_isValid;

    m_simple_board_isValid = ::OpenAPI::fromJsonValue(m_simple_board, json[QString("simpleBoard")]);
    m_simple_board_isSet = !json[QString("simpleBoard")].isNull() && m_simple_board_isValid;

    m_simplified_isValid = ::OpenAPI::fromJsonValue(m_simplified, json[QString("simplified")]);
    m_simplified_isSet = !json[QString("simplified")].isNull() && m_simplified_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProjectLandingPageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectLandingPageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_board_id_isSet) {
        obj.insert(QString("boardId"), ::OpenAPI::toJsonValue(m_board_id));
    }
    if (m_board_name_isSet) {
        obj.insert(QString("boardName"), ::OpenAPI::toJsonValue(m_board_name));
    }
    if (m_project_key_isSet) {
        obj.insert(QString("projectKey"), ::OpenAPI::toJsonValue(m_project_key));
    }
    if (m_project_type_isSet) {
        obj.insert(QString("projectType"), ::OpenAPI::toJsonValue(m_project_type));
    }
    if (m_queue_category_isSet) {
        obj.insert(QString("queueCategory"), ::OpenAPI::toJsonValue(m_queue_category));
    }
    if (m_queue_id_isSet) {
        obj.insert(QString("queueId"), ::OpenAPI::toJsonValue(m_queue_id));
    }
    if (m_queue_name_isSet) {
        obj.insert(QString("queueName"), ::OpenAPI::toJsonValue(m_queue_name));
    }
    if (m_simple_board_isSet) {
        obj.insert(QString("simpleBoard"), ::OpenAPI::toJsonValue(m_simple_board));
    }
    if (m_simplified_isSet) {
        obj.insert(QString("simplified"), ::OpenAPI::toJsonValue(m_simplified));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QMap<QString, QString> OAIProjectLandingPageInfo::getAttributes() const {
    return m_attributes;
}
void OAIProjectLandingPageInfo::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProjectLandingPageInfo::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProjectLandingPageInfo::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint64 OAIProjectLandingPageInfo::getBoardId() const {
    return m_board_id;
}
void OAIProjectLandingPageInfo::setBoardId(const qint64 &board_id) {
    m_board_id = board_id;
    m_board_id_isSet = true;
}

bool OAIProjectLandingPageInfo::is_board_id_Set() const{
    return m_board_id_isSet;
}

bool OAIProjectLandingPageInfo::is_board_id_Valid() const{
    return m_board_id_isValid;
}

QString OAIProjectLandingPageInfo::getBoardName() const {
    return m_board_name;
}
void OAIProjectLandingPageInfo::setBoardName(const QString &board_name) {
    m_board_name = board_name;
    m_board_name_isSet = true;
}

bool OAIProjectLandingPageInfo::is_board_name_Set() const{
    return m_board_name_isSet;
}

bool OAIProjectLandingPageInfo::is_board_name_Valid() const{
    return m_board_name_isValid;
}

QString OAIProjectLandingPageInfo::getProjectKey() const {
    return m_project_key;
}
void OAIProjectLandingPageInfo::setProjectKey(const QString &project_key) {
    m_project_key = project_key;
    m_project_key_isSet = true;
}

bool OAIProjectLandingPageInfo::is_project_key_Set() const{
    return m_project_key_isSet;
}

bool OAIProjectLandingPageInfo::is_project_key_Valid() const{
    return m_project_key_isValid;
}

QString OAIProjectLandingPageInfo::getProjectType() const {
    return m_project_type;
}
void OAIProjectLandingPageInfo::setProjectType(const QString &project_type) {
    m_project_type = project_type;
    m_project_type_isSet = true;
}

bool OAIProjectLandingPageInfo::is_project_type_Set() const{
    return m_project_type_isSet;
}

bool OAIProjectLandingPageInfo::is_project_type_Valid() const{
    return m_project_type_isValid;
}

QString OAIProjectLandingPageInfo::getQueueCategory() const {
    return m_queue_category;
}
void OAIProjectLandingPageInfo::setQueueCategory(const QString &queue_category) {
    m_queue_category = queue_category;
    m_queue_category_isSet = true;
}

bool OAIProjectLandingPageInfo::is_queue_category_Set() const{
    return m_queue_category_isSet;
}

bool OAIProjectLandingPageInfo::is_queue_category_Valid() const{
    return m_queue_category_isValid;
}

qint64 OAIProjectLandingPageInfo::getQueueId() const {
    return m_queue_id;
}
void OAIProjectLandingPageInfo::setQueueId(const qint64 &queue_id) {
    m_queue_id = queue_id;
    m_queue_id_isSet = true;
}

bool OAIProjectLandingPageInfo::is_queue_id_Set() const{
    return m_queue_id_isSet;
}

bool OAIProjectLandingPageInfo::is_queue_id_Valid() const{
    return m_queue_id_isValid;
}

QString OAIProjectLandingPageInfo::getQueueName() const {
    return m_queue_name;
}
void OAIProjectLandingPageInfo::setQueueName(const QString &queue_name) {
    m_queue_name = queue_name;
    m_queue_name_isSet = true;
}

bool OAIProjectLandingPageInfo::is_queue_name_Set() const{
    return m_queue_name_isSet;
}

bool OAIProjectLandingPageInfo::is_queue_name_Valid() const{
    return m_queue_name_isValid;
}

bool OAIProjectLandingPageInfo::isSimpleBoard() const {
    return m_simple_board;
}
void OAIProjectLandingPageInfo::setSimpleBoard(const bool &simple_board) {
    m_simple_board = simple_board;
    m_simple_board_isSet = true;
}

bool OAIProjectLandingPageInfo::is_simple_board_Set() const{
    return m_simple_board_isSet;
}

bool OAIProjectLandingPageInfo::is_simple_board_Valid() const{
    return m_simple_board_isValid;
}

bool OAIProjectLandingPageInfo::isSimplified() const {
    return m_simplified;
}
void OAIProjectLandingPageInfo::setSimplified(const bool &simplified) {
    m_simplified = simplified;
    m_simplified_isSet = true;
}

bool OAIProjectLandingPageInfo::is_simplified_Set() const{
    return m_simplified_isSet;
}

bool OAIProjectLandingPageInfo::is_simplified_Valid() const{
    return m_simplified_isValid;
}

QString OAIProjectLandingPageInfo::getUrl() const {
    return m_url;
}
void OAIProjectLandingPageInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProjectLandingPageInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProjectLandingPageInfo::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProjectLandingPageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_board_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_board_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simplified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectLandingPageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
