/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJiraExpressionEvalContextBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJiraExpressionEvalContextBean::OAIJiraExpressionEvalContextBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJiraExpressionEvalContextBean::OAIJiraExpressionEvalContextBean() {
    this->initializeModel();
}

OAIJiraExpressionEvalContextBean::~OAIJiraExpressionEvalContextBean() {}

void OAIJiraExpressionEvalContextBean::initializeModel() {

    m_board_isSet = false;
    m_board_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_customer_request_isSet = false;
    m_customer_request_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_service_desk_isSet = false;
    m_service_desk_isValid = false;

    m_sprint_isSet = false;
    m_sprint_isValid = false;
}

void OAIJiraExpressionEvalContextBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJiraExpressionEvalContextBean::fromJsonObject(QJsonObject json) {

    m_board_isValid = ::OpenAPI::fromJsonValue(m_board, json[QString("board")]);
    m_board_isSet = !json[QString("board")].isNull() && m_board_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_customer_request_isValid = ::OpenAPI::fromJsonValue(m_customer_request, json[QString("customerRequest")]);
    m_customer_request_isSet = !json[QString("customerRequest")].isNull() && m_customer_request_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_service_desk_isValid = ::OpenAPI::fromJsonValue(m_service_desk, json[QString("serviceDesk")]);
    m_service_desk_isSet = !json[QString("serviceDesk")].isNull() && m_service_desk_isValid;

    m_sprint_isValid = ::OpenAPI::fromJsonValue(m_sprint, json[QString("sprint")]);
    m_sprint_isSet = !json[QString("sprint")].isNull() && m_sprint_isValid;
}

QString OAIJiraExpressionEvalContextBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJiraExpressionEvalContextBean::asJsonObject() const {
    QJsonObject obj;
    if (m_board_isSet) {
        obj.insert(QString("board"), ::OpenAPI::toJsonValue(m_board));
    }
    if (m_custom.size() > 0) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_customer_request_isSet) {
        obj.insert(QString("customerRequest"), ::OpenAPI::toJsonValue(m_customer_request));
    }
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_issues.isSet()) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_service_desk_isSet) {
        obj.insert(QString("serviceDesk"), ::OpenAPI::toJsonValue(m_service_desk));
    }
    if (m_sprint_isSet) {
        obj.insert(QString("sprint"), ::OpenAPI::toJsonValue(m_sprint));
    }
    return obj;
}

qint64 OAIJiraExpressionEvalContextBean::getBoard() const {
    return m_board;
}
void OAIJiraExpressionEvalContextBean::setBoard(const qint64 &board) {
    m_board = board;
    m_board_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_board_Set() const{
    return m_board_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_board_Valid() const{
    return m_board_isValid;
}

QList<OAICustomContextVariable> OAIJiraExpressionEvalContextBean::getCustom() const {
    return m_custom;
}
void OAIJiraExpressionEvalContextBean::setCustom(const QList<OAICustomContextVariable> &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_custom_Valid() const{
    return m_custom_isValid;
}

qint64 OAIJiraExpressionEvalContextBean::getCustomerRequest() const {
    return m_customer_request;
}
void OAIJiraExpressionEvalContextBean::setCustomerRequest(const qint64 &customer_request) {
    m_customer_request = customer_request;
    m_customer_request_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_customer_request_Set() const{
    return m_customer_request_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_customer_request_Valid() const{
    return m_customer_request_isValid;
}

OAIIdOrKeyBean OAIJiraExpressionEvalContextBean::getIssue() const {
    return m_issue;
}
void OAIJiraExpressionEvalContextBean::setIssue(const OAIIdOrKeyBean &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_issue_Valid() const{
    return m_issue_isValid;
}

OAIJexpIssues OAIJiraExpressionEvalContextBean::getIssues() const {
    return m_issues;
}
void OAIJiraExpressionEvalContextBean::setIssues(const OAIJexpIssues &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_issues_Valid() const{
    return m_issues_isValid;
}

OAIIdOrKeyBean OAIJiraExpressionEvalContextBean::getProject() const {
    return m_project;
}
void OAIJiraExpressionEvalContextBean::setProject(const OAIIdOrKeyBean &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_project_Set() const{
    return m_project_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_project_Valid() const{
    return m_project_isValid;
}

qint64 OAIJiraExpressionEvalContextBean::getServiceDesk() const {
    return m_service_desk;
}
void OAIJiraExpressionEvalContextBean::setServiceDesk(const qint64 &service_desk) {
    m_service_desk = service_desk;
    m_service_desk_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_service_desk_Set() const{
    return m_service_desk_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_service_desk_Valid() const{
    return m_service_desk_isValid;
}

qint64 OAIJiraExpressionEvalContextBean::getSprint() const {
    return m_sprint;
}
void OAIJiraExpressionEvalContextBean::setSprint(const qint64 &sprint) {
    m_sprint = sprint;
    m_sprint_isSet = true;
}

bool OAIJiraExpressionEvalContextBean::is_sprint_Set() const{
    return m_sprint_isSet;
}

bool OAIJiraExpressionEvalContextBean::is_sprint_Valid() const{
    return m_sprint_isValid;
}

bool OAIJiraExpressionEvalContextBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_desk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJiraExpressionEvalContextBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
