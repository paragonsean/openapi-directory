/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPermissionsApi_H
#define OAI_OAIPermissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkPermissionGrants.h"
#include "OAIBulkPermissionsRequestBean.h"
#include "OAIErrorCollection.h"
#include "OAIPermissions.h"
#include "OAIPermissionsKeysBean.h"
#include "OAIPermittedProjects.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPermissionsApi : public QObject {
    Q_OBJECT

public:
    OAIPermissionsApi(const int timeOut = 0);
    ~OAIPermissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAllPermissions();

    /**
    * @param[in]  oai_bulk_permissions_request_bean OAIBulkPermissionsRequestBean [required]
    */
    virtual void getBulkPermissions(const OAIBulkPermissionsRequestBean &oai_bulk_permissions_request_bean);

    /**
    * @param[in]  project_key QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  issue_id QString [optional]
    * @param[in]  permissions QString [optional]
    * @param[in]  project_uuid QString [optional]
    * @param[in]  project_configuration_uuid QString [optional]
    * @param[in]  comment_id QString [optional]
    */
    virtual void getMyPermissions(const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permissions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_configuration_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &comment_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_permissions_keys_bean OAIPermissionsKeysBean [required]
    */
    virtual void getPermittedProjects(const OAIPermissionsKeysBean &oai_permissions_keys_bean);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllPermissionsCallback(OAIHttpRequestWorker *worker);
    void getBulkPermissionsCallback(OAIHttpRequestWorker *worker);
    void getMyPermissionsCallback(OAIHttpRequestWorker *worker);
    void getPermittedProjectsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllPermissionsSignal(OAIPermissions summary);
    void getBulkPermissionsSignal(OAIBulkPermissionGrants summary);
    void getMyPermissionsSignal(OAIPermissions summary);
    void getPermittedProjectsSignal(OAIPermittedProjects summary);


    void getAllPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissions summary);
    void getBulkPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkPermissionGrants summary);
    void getMyPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissions summary);
    void getPermittedProjectsSignalFull(OAIHttpRequestWorker *worker, OAIPermittedProjects summary);

    Q_DECL_DEPRECATED_X("Use getAllPermissionsSignalError() instead")
    void getAllPermissionsSignalE(OAIPermissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsSignalError(OAIPermissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkPermissionsSignalError() instead")
    void getBulkPermissionsSignalE(OAIBulkPermissionGrants summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkPermissionsSignalError(OAIBulkPermissionGrants summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyPermissionsSignalError() instead")
    void getMyPermissionsSignalE(OAIPermissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyPermissionsSignalError(OAIPermissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermittedProjectsSignalError() instead")
    void getPermittedProjectsSignalE(OAIPermittedProjects summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermittedProjectsSignalError(OAIPermittedProjects summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllPermissionsSignalErrorFull() instead")
    void getAllPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkPermissionsSignalErrorFull() instead")
    void getBulkPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyPermissionsSignalErrorFull() instead")
    void getMyPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermittedProjectsSignalErrorFull() instead")
    void getPermittedProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermittedProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
