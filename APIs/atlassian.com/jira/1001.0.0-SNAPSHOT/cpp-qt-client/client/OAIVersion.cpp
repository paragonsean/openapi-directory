/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_status_for_fix_version_isSet = false;
    m_issues_status_for_fix_version_isValid = false;

    m_move_unfixed_issues_to_isSet = false;
    m_move_unfixed_issues_to_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_overdue_isSet = false;
    m_overdue_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_user_release_date_isSet = false;
    m_user_release_date_isValid = false;

    m_user_start_date_isSet = false;
    m_user_start_date_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_status_for_fix_version_isValid = ::OpenAPI::fromJsonValue(m_issues_status_for_fix_version, json[QString("issuesStatusForFixVersion")]);
    m_issues_status_for_fix_version_isSet = !json[QString("issuesStatusForFixVersion")].isNull() && m_issues_status_for_fix_version_isValid;

    m_move_unfixed_issues_to_isValid = ::OpenAPI::fromJsonValue(m_move_unfixed_issues_to, json[QString("moveUnfixedIssuesTo")]);
    m_move_unfixed_issues_to_isSet = !json[QString("moveUnfixedIssuesTo")].isNull() && m_move_unfixed_issues_to_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_overdue_isValid = ::OpenAPI::fromJsonValue(m_overdue, json[QString("overdue")]);
    m_overdue_isSet = !json[QString("overdue")].isNull() && m_overdue_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_user_release_date_isValid = ::OpenAPI::fromJsonValue(m_user_release_date, json[QString("userReleaseDate")]);
    m_user_release_date_isSet = !json[QString("userReleaseDate")].isNull() && m_user_release_date_isValid;

    m_user_start_date_isValid = ::OpenAPI::fromJsonValue(m_user_start_date, json[QString("userStartDate")]);
    m_user_start_date_isSet = !json[QString("userStartDate")].isNull() && m_user_start_date_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues_status_for_fix_version.isSet()) {
        obj.insert(QString("issuesStatusForFixVersion"), ::OpenAPI::toJsonValue(m_issues_status_for_fix_version));
    }
    if (m_move_unfixed_issues_to_isSet) {
        obj.insert(QString("moveUnfixedIssuesTo"), ::OpenAPI::toJsonValue(m_move_unfixed_issues_to));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_overdue_isSet) {
        obj.insert(QString("overdue"), ::OpenAPI::toJsonValue(m_overdue));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_user_release_date_isSet) {
        obj.insert(QString("userReleaseDate"), ::OpenAPI::toJsonValue(m_user_release_date));
    }
    if (m_user_start_date_isSet) {
        obj.insert(QString("userStartDate"), ::OpenAPI::toJsonValue(m_user_start_date));
    }
    return obj;
}

bool OAIVersion::isArchived() const {
    return m_archived;
}
void OAIVersion::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIVersion::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIVersion::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIVersion::getDescription() const {
    return m_description;
}
void OAIVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVersion::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVersion::getExpand() const {
    return m_expand;
}
void OAIVersion::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIVersion::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIVersion::is_expand_Valid() const{
    return m_expand_isValid;
}

QString OAIVersion::getId() const {
    return m_id;
}
void OAIVersion::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVersion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVersion::is_id_Valid() const{
    return m_id_isValid;
}

OAIVersionIssuesStatus OAIVersion::getIssuesStatusForFixVersion() const {
    return m_issues_status_for_fix_version;
}
void OAIVersion::setIssuesStatusForFixVersion(const OAIVersionIssuesStatus &issues_status_for_fix_version) {
    m_issues_status_for_fix_version = issues_status_for_fix_version;
    m_issues_status_for_fix_version_isSet = true;
}

bool OAIVersion::is_issues_status_for_fix_version_Set() const{
    return m_issues_status_for_fix_version_isSet;
}

bool OAIVersion::is_issues_status_for_fix_version_Valid() const{
    return m_issues_status_for_fix_version_isValid;
}

QString OAIVersion::getMoveUnfixedIssuesTo() const {
    return m_move_unfixed_issues_to;
}
void OAIVersion::setMoveUnfixedIssuesTo(const QString &move_unfixed_issues_to) {
    m_move_unfixed_issues_to = move_unfixed_issues_to;
    m_move_unfixed_issues_to_isSet = true;
}

bool OAIVersion::is_move_unfixed_issues_to_Set() const{
    return m_move_unfixed_issues_to_isSet;
}

bool OAIVersion::is_move_unfixed_issues_to_Valid() const{
    return m_move_unfixed_issues_to_isValid;
}

QString OAIVersion::getName() const {
    return m_name;
}
void OAIVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVersion::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISimpleLink> OAIVersion::getOperations() const {
    return m_operations;
}
void OAIVersion::setOperations(const QList<OAISimpleLink> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIVersion::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIVersion::is_operations_Valid() const{
    return m_operations_isValid;
}

bool OAIVersion::isOverdue() const {
    return m_overdue;
}
void OAIVersion::setOverdue(const bool &overdue) {
    m_overdue = overdue;
    m_overdue_isSet = true;
}

bool OAIVersion::is_overdue_Set() const{
    return m_overdue_isSet;
}

bool OAIVersion::is_overdue_Valid() const{
    return m_overdue_isValid;
}

QString OAIVersion::getProject() const {
    return m_project;
}
void OAIVersion::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIVersion::is_project_Set() const{
    return m_project_isSet;
}

bool OAIVersion::is_project_Valid() const{
    return m_project_isValid;
}

qint64 OAIVersion::getProjectId() const {
    return m_project_id;
}
void OAIVersion::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIVersion::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIVersion::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QDate OAIVersion::getReleaseDate() const {
    return m_release_date;
}
void OAIVersion::setReleaseDate(const QDate &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIVersion::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIVersion::is_release_date_Valid() const{
    return m_release_date_isValid;
}

bool OAIVersion::isReleased() const {
    return m_released;
}
void OAIVersion::setReleased(const bool &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIVersion::is_released_Set() const{
    return m_released_isSet;
}

bool OAIVersion::is_released_Valid() const{
    return m_released_isValid;
}

QString OAIVersion::getSelf() const {
    return m_self;
}
void OAIVersion::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIVersion::is_self_Set() const{
    return m_self_isSet;
}

bool OAIVersion::is_self_Valid() const{
    return m_self_isValid;
}

QDate OAIVersion::getStartDate() const {
    return m_start_date;
}
void OAIVersion::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIVersion::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIVersion::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIVersion::getUserReleaseDate() const {
    return m_user_release_date;
}
void OAIVersion::setUserReleaseDate(const QString &user_release_date) {
    m_user_release_date = user_release_date;
    m_user_release_date_isSet = true;
}

bool OAIVersion::is_user_release_date_Set() const{
    return m_user_release_date_isSet;
}

bool OAIVersion::is_user_release_date_Valid() const{
    return m_user_release_date_isValid;
}

QString OAIVersion::getUserStartDate() const {
    return m_user_start_date;
}
void OAIVersion::setUserStartDate(const QString &user_start_date) {
    m_user_start_date = user_start_date;
    m_user_start_date_isSet = true;
}

bool OAIVersion::is_user_start_date_Set() const{
    return m_user_start_date_isSet;
}

bool OAIVersion::is_user_start_date_Valid() const{
    return m_user_start_date_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_status_for_fix_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_unfixed_issues_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
