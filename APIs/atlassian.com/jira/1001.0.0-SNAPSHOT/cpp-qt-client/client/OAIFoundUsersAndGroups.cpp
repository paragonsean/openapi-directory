/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoundUsersAndGroups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFoundUsersAndGroups::OAIFoundUsersAndGroups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFoundUsersAndGroups::OAIFoundUsersAndGroups() {
    this->initializeModel();
}

OAIFoundUsersAndGroups::~OAIFoundUsersAndGroups() {}

void OAIFoundUsersAndGroups::initializeModel() {

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIFoundUsersAndGroups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFoundUsersAndGroups::fromJsonObject(QJsonObject json) {

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIFoundUsersAndGroups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFoundUsersAndGroups::asJsonObject() const {
    QJsonObject obj;
    if (m_groups.isSet()) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_users.isSet()) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

OAIFoundGroups OAIFoundUsersAndGroups::getGroups() const {
    return m_groups;
}
void OAIFoundUsersAndGroups::setGroups(const OAIFoundGroups &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIFoundUsersAndGroups::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIFoundUsersAndGroups::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIFoundUsers OAIFoundUsersAndGroups::getUsers() const {
    return m_users;
}
void OAIFoundUsersAndGroups::setUsers(const OAIFoundUsers &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIFoundUsersAndGroups::is_users_Set() const{
    return m_users_isSet;
}

bool OAIFoundUsersAndGroups::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIFoundUsersAndGroups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFoundUsersAndGroups::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
