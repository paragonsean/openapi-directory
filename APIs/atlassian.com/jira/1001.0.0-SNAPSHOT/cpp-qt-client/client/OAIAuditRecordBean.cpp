/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditRecordBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditRecordBean::OAIAuditRecordBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditRecordBean::OAIAuditRecordBean() {
    this->initializeModel();
}

OAIAuditRecordBean::~OAIAuditRecordBean() {}

void OAIAuditRecordBean::initializeModel() {

    m_associated_items_isSet = false;
    m_associated_items_isValid = false;

    m_author_key_isSet = false;
    m_author_key_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_changed_values_isSet = false;
    m_changed_values_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_item_isSet = false;
    m_object_item_isValid = false;

    m_remote_address_isSet = false;
    m_remote_address_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIAuditRecordBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditRecordBean::fromJsonObject(QJsonObject json) {

    m_associated_items_isValid = ::OpenAPI::fromJsonValue(m_associated_items, json[QString("associatedItems")]);
    m_associated_items_isSet = !json[QString("associatedItems")].isNull() && m_associated_items_isValid;

    m_author_key_isValid = ::OpenAPI::fromJsonValue(m_author_key, json[QString("authorKey")]);
    m_author_key_isSet = !json[QString("authorKey")].isNull() && m_author_key_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_changed_values_isValid = ::OpenAPI::fromJsonValue(m_changed_values, json[QString("changedValues")]);
    m_changed_values_isSet = !json[QString("changedValues")].isNull() && m_changed_values_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("eventSource")]);
    m_event_source_isSet = !json[QString("eventSource")].isNull() && m_event_source_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_item_isValid = ::OpenAPI::fromJsonValue(m_object_item, json[QString("objectItem")]);
    m_object_item_isSet = !json[QString("objectItem")].isNull() && m_object_item_isValid;

    m_remote_address_isValid = ::OpenAPI::fromJsonValue(m_remote_address, json[QString("remoteAddress")]);
    m_remote_address_isSet = !json[QString("remoteAddress")].isNull() && m_remote_address_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIAuditRecordBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditRecordBean::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_items.size() > 0) {
        obj.insert(QString("associatedItems"), ::OpenAPI::toJsonValue(m_associated_items));
    }
    if (m_author_key_isSet) {
        obj.insert(QString("authorKey"), ::OpenAPI::toJsonValue(m_author_key));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_changed_values.size() > 0) {
        obj.insert(QString("changedValues"), ::OpenAPI::toJsonValue(m_changed_values));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("eventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_object_item.isSet()) {
        obj.insert(QString("objectItem"), ::OpenAPI::toJsonValue(m_object_item));
    }
    if (m_remote_address_isSet) {
        obj.insert(QString("remoteAddress"), ::OpenAPI::toJsonValue(m_remote_address));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIAssociatedItemBean> OAIAuditRecordBean::getAssociatedItems() const {
    return m_associated_items;
}
void OAIAuditRecordBean::setAssociatedItems(const QList<OAIAssociatedItemBean> &associated_items) {
    m_associated_items = associated_items;
    m_associated_items_isSet = true;
}

bool OAIAuditRecordBean::is_associated_items_Set() const{
    return m_associated_items_isSet;
}

bool OAIAuditRecordBean::is_associated_items_Valid() const{
    return m_associated_items_isValid;
}

QString OAIAuditRecordBean::getAuthorKey() const {
    return m_author_key;
}
void OAIAuditRecordBean::setAuthorKey(const QString &author_key) {
    m_author_key = author_key;
    m_author_key_isSet = true;
}

bool OAIAuditRecordBean::is_author_key_Set() const{
    return m_author_key_isSet;
}

bool OAIAuditRecordBean::is_author_key_Valid() const{
    return m_author_key_isValid;
}

QString OAIAuditRecordBean::getCategory() const {
    return m_category;
}
void OAIAuditRecordBean::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAuditRecordBean::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAuditRecordBean::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIChangedValueBean> OAIAuditRecordBean::getChangedValues() const {
    return m_changed_values;
}
void OAIAuditRecordBean::setChangedValues(const QList<OAIChangedValueBean> &changed_values) {
    m_changed_values = changed_values;
    m_changed_values_isSet = true;
}

bool OAIAuditRecordBean::is_changed_values_Set() const{
    return m_changed_values_isSet;
}

bool OAIAuditRecordBean::is_changed_values_Valid() const{
    return m_changed_values_isValid;
}

QDateTime OAIAuditRecordBean::getCreated() const {
    return m_created;
}
void OAIAuditRecordBean::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAuditRecordBean::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAuditRecordBean::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAuditRecordBean::getDescription() const {
    return m_description;
}
void OAIAuditRecordBean::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuditRecordBean::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuditRecordBean::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuditRecordBean::getEventSource() const {
    return m_event_source;
}
void OAIAuditRecordBean::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIAuditRecordBean::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIAuditRecordBean::is_event_source_Valid() const{
    return m_event_source_isValid;
}

qint64 OAIAuditRecordBean::getId() const {
    return m_id;
}
void OAIAuditRecordBean::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuditRecordBean::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuditRecordBean::is_id_Valid() const{
    return m_id_isValid;
}

OAIAssociatedItemBean OAIAuditRecordBean::getObjectItem() const {
    return m_object_item;
}
void OAIAuditRecordBean::setObjectItem(const OAIAssociatedItemBean &object_item) {
    m_object_item = object_item;
    m_object_item_isSet = true;
}

bool OAIAuditRecordBean::is_object_item_Set() const{
    return m_object_item_isSet;
}

bool OAIAuditRecordBean::is_object_item_Valid() const{
    return m_object_item_isValid;
}

QString OAIAuditRecordBean::getRemoteAddress() const {
    return m_remote_address;
}
void OAIAuditRecordBean::setRemoteAddress(const QString &remote_address) {
    m_remote_address = remote_address;
    m_remote_address_isSet = true;
}

bool OAIAuditRecordBean::is_remote_address_Set() const{
    return m_remote_address_isSet;
}

bool OAIAuditRecordBean::is_remote_address_Valid() const{
    return m_remote_address_isValid;
}

QString OAIAuditRecordBean::getSummary() const {
    return m_summary;
}
void OAIAuditRecordBean::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIAuditRecordBean::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIAuditRecordBean::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIAuditRecordBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditRecordBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
