/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCollection::OAIErrorCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCollection::OAIErrorCollection() {
    this->initializeModel();
}

OAIErrorCollection::~OAIErrorCollection() {}

void OAIErrorCollection::initializeModel() {

    m_error_messages_isSet = false;
    m_error_messages_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIErrorCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorCollection::fromJsonObject(QJsonObject json) {

    m_error_messages_isValid = ::OpenAPI::fromJsonValue(m_error_messages, json[QString("errorMessages")]);
    m_error_messages_isSet = !json[QString("errorMessages")].isNull() && m_error_messages_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIErrorCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_error_messages.size() > 0) {
        obj.insert(QString("errorMessages"), ::OpenAPI::toJsonValue(m_error_messages));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<QString> OAIErrorCollection::getErrorMessages() const {
    return m_error_messages;
}
void OAIErrorCollection::setErrorMessages(const QList<QString> &error_messages) {
    m_error_messages = error_messages;
    m_error_messages_isSet = true;
}

bool OAIErrorCollection::is_error_messages_Set() const{
    return m_error_messages_isSet;
}

bool OAIErrorCollection::is_error_messages_Valid() const{
    return m_error_messages_isValid;
}

QMap<QString, QString> OAIErrorCollection::getErrors() const {
    return m_errors;
}
void OAIErrorCollection::setErrors(const QMap<QString, QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIErrorCollection::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIErrorCollection::is_errors_Valid() const{
    return m_errors_isValid;
}

qint32 OAIErrorCollection::getStatus() const {
    return m_status;
}
void OAIErrorCollection::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIErrorCollection::is_status_Set() const{
    return m_status_isSet;
}

bool OAIErrorCollection::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIErrorCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
