/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

OAIUserDetails OAIAttachment::getAuthor() const {
    return m_author;
}
void OAIAttachment::setAuthor(const OAIUserDetails &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIAttachment::is_author_Set() const{
    return m_author_isSet;
}

bool OAIAttachment::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIAttachment::getContent() const {
    return m_content;
}
void OAIAttachment::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIAttachment::is_content_Set() const{
    return m_content_isSet;
}

bool OAIAttachment::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIAttachment::getCreated() const {
    return m_created;
}
void OAIAttachment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAttachment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAttachment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAttachment::getFilename() const {
    return m_filename;
}
void OAIAttachment::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIAttachment::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIAttachment::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIAttachment::getId() const {
    return m_id;
}
void OAIAttachment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAttachment::getMimeType() const {
    return m_mime_type;
}
void OAIAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIAttachment::getSelf() const {
    return m_self;
}
void OAIAttachment::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAttachment::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAttachment::is_self_Valid() const{
    return m_self_isValid;
}

qint64 OAIAttachment::getSize() const {
    return m_size;
}
void OAIAttachment::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAttachment::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttachment::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAttachment::getThumbnail() const {
    return m_thumbnail;
}
void OAIAttachment::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIAttachment::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIAttachment::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
