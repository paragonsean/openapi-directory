/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuePickerSuggestionsIssueType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuePickerSuggestionsIssueType::OAIIssuePickerSuggestionsIssueType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuePickerSuggestionsIssueType::OAIIssuePickerSuggestionsIssueType() {
    this->initializeModel();
}

OAIIssuePickerSuggestionsIssueType::~OAIIssuePickerSuggestionsIssueType() {}

void OAIIssuePickerSuggestionsIssueType::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_msg_isSet = false;
    m_msg_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;
}

void OAIIssuePickerSuggestionsIssueType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuePickerSuggestionsIssueType::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_msg_isValid = ::OpenAPI::fromJsonValue(m_msg, json[QString("msg")]);
    m_msg_isSet = !json[QString("msg")].isNull() && m_msg_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;
}

QString OAIIssuePickerSuggestionsIssueType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuePickerSuggestionsIssueType::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_msg_isSet) {
        obj.insert(QString("msg"), ::OpenAPI::toJsonValue(m_msg));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    return obj;
}

QString OAIIssuePickerSuggestionsIssueType::getId() const {
    return m_id;
}
void OAIIssuePickerSuggestionsIssueType::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssuePickerSuggestionsIssueType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssuePickerSuggestionsIssueType::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAISuggestedIssue> OAIIssuePickerSuggestionsIssueType::getIssues() const {
    return m_issues;
}
void OAIIssuePickerSuggestionsIssueType::setIssues(const QList<OAISuggestedIssue> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIIssuePickerSuggestionsIssueType::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIIssuePickerSuggestionsIssueType::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIIssuePickerSuggestionsIssueType::getLabel() const {
    return m_label;
}
void OAIIssuePickerSuggestionsIssueType::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIIssuePickerSuggestionsIssueType::is_label_Set() const{
    return m_label_isSet;
}

bool OAIIssuePickerSuggestionsIssueType::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIIssuePickerSuggestionsIssueType::getMsg() const {
    return m_msg;
}
void OAIIssuePickerSuggestionsIssueType::setMsg(const QString &msg) {
    m_msg = msg;
    m_msg_isSet = true;
}

bool OAIIssuePickerSuggestionsIssueType::is_msg_Set() const{
    return m_msg_isSet;
}

bool OAIIssuePickerSuggestionsIssueType::is_msg_Valid() const{
    return m_msg_isValid;
}

QString OAIIssuePickerSuggestionsIssueType::getSub() const {
    return m_sub;
}
void OAIIssuePickerSuggestionsIssueType::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIIssuePickerSuggestionsIssueType::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIIssuePickerSuggestionsIssueType::is_sub_Valid() const{
    return m_sub_isValid;
}

bool OAIIssuePickerSuggestionsIssueType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuePickerSuggestionsIssueType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
