/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJqlQueryUnitaryOperand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJqlQueryUnitaryOperand::OAIJqlQueryUnitaryOperand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJqlQueryUnitaryOperand::OAIJqlQueryUnitaryOperand() {
    this->initializeModel();
}

OAIJqlQueryUnitaryOperand::~OAIJqlQueryUnitaryOperand() {}

void OAIJqlQueryUnitaryOperand::initializeModel() {

    m_encoded_value_isSet = false;
    m_encoded_value_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_encoded_operand_isSet = false;
    m_encoded_operand_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;
}

void OAIJqlQueryUnitaryOperand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJqlQueryUnitaryOperand::fromJsonObject(QJsonObject json) {

    m_encoded_value_isValid = ::OpenAPI::fromJsonValue(m_encoded_value, json[QString("encodedValue")]);
    m_encoded_value_isSet = !json[QString("encodedValue")].isNull() && m_encoded_value_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_encoded_operand_isValid = ::OpenAPI::fromJsonValue(m_encoded_operand, json[QString("encodedOperand")]);
    m_encoded_operand_isSet = !json[QString("encodedOperand")].isNull() && m_encoded_operand_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;
}

QString OAIJqlQueryUnitaryOperand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJqlQueryUnitaryOperand::asJsonObject() const {
    QJsonObject obj;
    if (m_encoded_value_isSet) {
        obj.insert(QString("encodedValue"), ::OpenAPI::toJsonValue(m_encoded_value));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_encoded_operand_isSet) {
        obj.insert(QString("encodedOperand"), ::OpenAPI::toJsonValue(m_encoded_operand));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    return obj;
}

QString OAIJqlQueryUnitaryOperand::getEncodedValue() const {
    return m_encoded_value;
}
void OAIJqlQueryUnitaryOperand::setEncodedValue(const QString &encoded_value) {
    m_encoded_value = encoded_value;
    m_encoded_value_isSet = true;
}

bool OAIJqlQueryUnitaryOperand::is_encoded_value_Set() const{
    return m_encoded_value_isSet;
}

bool OAIJqlQueryUnitaryOperand::is_encoded_value_Valid() const{
    return m_encoded_value_isValid;
}

QString OAIJqlQueryUnitaryOperand::getValue() const {
    return m_value;
}
void OAIJqlQueryUnitaryOperand::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIJqlQueryUnitaryOperand::is_value_Set() const{
    return m_value_isSet;
}

bool OAIJqlQueryUnitaryOperand::is_value_Valid() const{
    return m_value_isValid;
}

QList<QString> OAIJqlQueryUnitaryOperand::getArguments() const {
    return m_arguments;
}
void OAIJqlQueryUnitaryOperand::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIJqlQueryUnitaryOperand::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIJqlQueryUnitaryOperand::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIJqlQueryUnitaryOperand::getEncodedOperand() const {
    return m_encoded_operand;
}
void OAIJqlQueryUnitaryOperand::setEncodedOperand(const QString &encoded_operand) {
    m_encoded_operand = encoded_operand;
    m_encoded_operand_isSet = true;
}

bool OAIJqlQueryUnitaryOperand::is_encoded_operand_Set() const{
    return m_encoded_operand_isSet;
}

bool OAIJqlQueryUnitaryOperand::is_encoded_operand_Valid() const{
    return m_encoded_operand_isValid;
}

QString OAIJqlQueryUnitaryOperand::getFunction() const {
    return m_function;
}
void OAIJqlQueryUnitaryOperand::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIJqlQueryUnitaryOperand::is_function_Set() const{
    return m_function_isSet;
}

bool OAIJqlQueryUnitaryOperand::is_function_Valid() const{
    return m_function_isValid;
}

QString OAIJqlQueryUnitaryOperand::getKeyword() const {
    return m_keyword;
}
void OAIJqlQueryUnitaryOperand::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIJqlQueryUnitaryOperand::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIJqlQueryUnitaryOperand::is_keyword_Valid() const{
    return m_keyword_isValid;
}

bool OAIJqlQueryUnitaryOperand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoded_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJqlQueryUnitaryOperand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m_arguments_isValid && m_function_isValid && m_keyword_isValid && true;
}

} // namespace OpenAPI
