/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTypeIssueCreateMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTypeIssueCreateMetadata::OAIIssueTypeIssueCreateMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTypeIssueCreateMetadata::OAIIssueTypeIssueCreateMetadata() {
    this->initializeModel();
}

OAIIssueTypeIssueCreateMetadata::~OAIIssueTypeIssueCreateMetadata() {}

void OAIIssueTypeIssueCreateMetadata::initializeModel() {

    m_avatar_id_isSet = false;
    m_avatar_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_hierarchy_level_isSet = false;
    m_hierarchy_level_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_subtask_isSet = false;
    m_subtask_isValid = false;
}

void OAIIssueTypeIssueCreateMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTypeIssueCreateMetadata::fromJsonObject(QJsonObject json) {

    m_avatar_id_isValid = ::OpenAPI::fromJsonValue(m_avatar_id, json[QString("avatarId")]);
    m_avatar_id_isSet = !json[QString("avatarId")].isNull() && m_avatar_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_hierarchy_level_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_level, json[QString("hierarchyLevel")]);
    m_hierarchy_level_isSet = !json[QString("hierarchyLevel")].isNull() && m_hierarchy_level_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_subtask_isValid = ::OpenAPI::fromJsonValue(m_subtask, json[QString("subtask")]);
    m_subtask_isSet = !json[QString("subtask")].isNull() && m_subtask_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTypeIssueCreateMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_id_isSet) {
        obj.insert(QString("avatarId"), ::OpenAPI::toJsonValue(m_avatar_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_hierarchy_level_isSet) {
        obj.insert(QString("hierarchyLevel"), ::OpenAPI::toJsonValue(m_hierarchy_level));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_subtask_isSet) {
        obj.insert(QString("subtask"), ::OpenAPI::toJsonValue(m_subtask));
    }
    return obj;
}

qint64 OAIIssueTypeIssueCreateMetadata::getAvatarId() const {
    return m_avatar_id;
}
void OAIIssueTypeIssueCreateMetadata::setAvatarId(const qint64 &avatar_id) {
    m_avatar_id = avatar_id;
    m_avatar_id_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_avatar_id_Set() const{
    return m_avatar_id_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_avatar_id_Valid() const{
    return m_avatar_id_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getDescription() const {
    return m_description;
}
void OAIIssueTypeIssueCreateMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getEntityId() const {
    return m_entity_id;
}
void OAIIssueTypeIssueCreateMetadata::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getExpand() const {
    return m_expand;
}
void OAIIssueTypeIssueCreateMetadata::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_expand_Valid() const{
    return m_expand_isValid;
}

QMap<QString, OAIFieldMetadata> OAIIssueTypeIssueCreateMetadata::getFields() const {
    return m_fields;
}
void OAIIssueTypeIssueCreateMetadata::setFields(const QMap<QString, OAIFieldMetadata> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAIIssueTypeIssueCreateMetadata::getHierarchyLevel() const {
    return m_hierarchy_level;
}
void OAIIssueTypeIssueCreateMetadata::setHierarchyLevel(const qint32 &hierarchy_level) {
    m_hierarchy_level = hierarchy_level;
    m_hierarchy_level_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_hierarchy_level_Set() const{
    return m_hierarchy_level_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_hierarchy_level_Valid() const{
    return m_hierarchy_level_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getIconUrl() const {
    return m_icon_url;
}
void OAIIssueTypeIssueCreateMetadata::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getId() const {
    return m_id;
}
void OAIIssueTypeIssueCreateMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getName() const {
    return m_name;
}
void OAIIssueTypeIssueCreateMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_name_Valid() const{
    return m_name_isValid;
}

OAIScope OAIIssueTypeIssueCreateMetadata::getScope() const {
    return m_scope;
}
void OAIIssueTypeIssueCreateMetadata::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIIssueTypeIssueCreateMetadata::getSelf() const {
    return m_self;
}
void OAIIssueTypeIssueCreateMetadata::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_self_Set() const{
    return m_self_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIIssueTypeIssueCreateMetadata::isSubtask() const {
    return m_subtask;
}
void OAIIssueTypeIssueCreateMetadata::setSubtask(const bool &subtask) {
    m_subtask = subtask;
    m_subtask_isSet = true;
}

bool OAIIssueTypeIssueCreateMetadata::is_subtask_Set() const{
    return m_subtask_isSet;
}

bool OAIIssueTypeIssueCreateMetadata::is_subtask_Valid() const{
    return m_subtask_isValid;
}

bool OAIIssueTypeIssueCreateMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTypeIssueCreateMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
