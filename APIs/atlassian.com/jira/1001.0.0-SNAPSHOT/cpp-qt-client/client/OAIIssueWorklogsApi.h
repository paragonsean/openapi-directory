/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueWorklogsApi_H
#define OAI_OAIIssueWorklogsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangedWorklogs.h"
#include "OAIPageOfWorklogs.h"
#include "OAIWorklog.h"
#include "OAIWorklogIdsRequestBean.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueWorklogsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueWorklogsApi(const int timeOut = 0);
    ~OAIIssueWorklogsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_worklog OAIWorklog [required]
    * @param[in]  notify_users bool [optional]
    * @param[in]  adjust_estimate QString [optional]
    * @param[in]  new_estimate QString [optional]
    * @param[in]  reduce_by QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  override_editable_flag bool [optional]
    */
    virtual void addWorklog(const QString &issue_id_or_key, const OAIWorklog &oai_worklog, const ::OpenAPI::OptionalParam<bool> &notify_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &adjust_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reduce_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  notify_users bool [optional]
    * @param[in]  adjust_estimate QString [optional]
    * @param[in]  new_estimate QString [optional]
    * @param[in]  increase_by QString [optional]
    * @param[in]  override_editable_flag bool [optional]
    */
    virtual void deleteWorklog(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<bool> &notify_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &adjust_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &increase_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  since qint64 [optional]
    */
    virtual void getIdsOfWorklogsDeletedSince(const ::OpenAPI::OptionalParam<qint64> &since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  since qint64 [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getIdsOfWorklogsModifiedSince(const ::OpenAPI::OptionalParam<qint64> &since = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  started_after qint64 [optional]
    * @param[in]  started_before qint64 [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getIssueWorklog(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &started_after = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &started_before = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getWorklog(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_worklog_ids_request_bean OAIWorklogIdsRequestBean [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getWorklogsForIds(const OAIWorklogIdsRequestBean &oai_worklog_ids_request_bean, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_worklog OAIWorklog [required]
    * @param[in]  notify_users bool [optional]
    * @param[in]  adjust_estimate QString [optional]
    * @param[in]  new_estimate QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  override_editable_flag bool [optional]
    */
    virtual void updateWorklog(const QString &issue_id_or_key, const QString &id, const OAIWorklog &oai_worklog, const ::OpenAPI::OptionalParam<bool> &notify_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &adjust_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addWorklogCallback(OAIHttpRequestWorker *worker);
    void deleteWorklogCallback(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsDeletedSinceCallback(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsModifiedSinceCallback(OAIHttpRequestWorker *worker);
    void getIssueWorklogCallback(OAIHttpRequestWorker *worker);
    void getWorklogCallback(OAIHttpRequestWorker *worker);
    void getWorklogsForIdsCallback(OAIHttpRequestWorker *worker);
    void updateWorklogCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addWorklogSignal(OAIWorklog summary);
    void deleteWorklogSignal();
    void getIdsOfWorklogsDeletedSinceSignal(OAIChangedWorklogs summary);
    void getIdsOfWorklogsModifiedSinceSignal(OAIChangedWorklogs summary);
    void getIssueWorklogSignal(OAIPageOfWorklogs summary);
    void getWorklogSignal(OAIWorklog summary);
    void getWorklogsForIdsSignal(QList<OAIWorklog> summary);
    void updateWorklogSignal(OAIWorklog summary);


    void addWorklogSignalFull(OAIHttpRequestWorker *worker, OAIWorklog summary);
    void deleteWorklogSignalFull(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsDeletedSinceSignalFull(OAIHttpRequestWorker *worker, OAIChangedWorklogs summary);
    void getIdsOfWorklogsModifiedSinceSignalFull(OAIHttpRequestWorker *worker, OAIChangedWorklogs summary);
    void getIssueWorklogSignalFull(OAIHttpRequestWorker *worker, OAIPageOfWorklogs summary);
    void getWorklogSignalFull(OAIHttpRequestWorker *worker, OAIWorklog summary);
    void getWorklogsForIdsSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorklog> summary);
    void updateWorklogSignalFull(OAIHttpRequestWorker *worker, OAIWorklog summary);

    Q_DECL_DEPRECATED_X("Use addWorklogSignalError() instead")
    void addWorklogSignalE(OAIWorklog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addWorklogSignalError(OAIWorklog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorklogSignalError() instead")
    void deleteWorklogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorklogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsDeletedSinceSignalError() instead")
    void getIdsOfWorklogsDeletedSinceSignalE(OAIChangedWorklogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsDeletedSinceSignalError(OAIChangedWorklogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsModifiedSinceSignalError() instead")
    void getIdsOfWorklogsModifiedSinceSignalE(OAIChangedWorklogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsModifiedSinceSignalError(OAIChangedWorklogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWorklogSignalError() instead")
    void getIssueWorklogSignalE(OAIPageOfWorklogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWorklogSignalError(OAIPageOfWorklogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogSignalError() instead")
    void getWorklogSignalE(OAIWorklog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogSignalError(OAIWorklog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogsForIdsSignalError() instead")
    void getWorklogsForIdsSignalE(QList<OAIWorklog> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogsForIdsSignalError(QList<OAIWorklog> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorklogSignalError() instead")
    void updateWorklogSignalE(OAIWorklog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorklogSignalError(OAIWorklog summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addWorklogSignalErrorFull() instead")
    void addWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorklogSignalErrorFull() instead")
    void deleteWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsDeletedSinceSignalErrorFull() instead")
    void getIdsOfWorklogsDeletedSinceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsDeletedSinceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsModifiedSinceSignalErrorFull() instead")
    void getIdsOfWorklogsModifiedSinceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsModifiedSinceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWorklogSignalErrorFull() instead")
    void getIssueWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogSignalErrorFull() instead")
    void getWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogsForIdsSignalErrorFull() instead")
    void getWorklogsForIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogsForIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorklogSignalErrorFull() instead")
    void updateWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
