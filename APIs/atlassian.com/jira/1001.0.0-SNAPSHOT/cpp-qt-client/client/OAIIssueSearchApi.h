/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueSearchApi_H
#define OAI_OAIIssueSearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIssueMatches.h"
#include "OAIIssuePickerSuggestions.h"
#include "OAIIssuesAndJQLQueries.h"
#include "OAISearchRequestBean.h"
#include "OAISearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueSearchApi : public QObject {
    Q_OBJECT

public:
    OAIIssueSearchApi(const int timeOut = 0);
    ~OAIIssueSearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  current_jql QString [optional]
    * @param[in]  current_issue_key QString [optional]
    * @param[in]  current_project_id QString [optional]
    * @param[in]  show_sub_tasks bool [optional]
    * @param[in]  show_sub_task_parent bool [optional]
    */
    virtual void getIssuePickerResource(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_jql = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_sub_tasks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_sub_task_parent = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_issues_and_jql_queries OAIIssuesAndJQLQueries [required]
    */
    virtual void matchIssues(const OAIIssuesAndJQLQueries &oai_issues_and_jql_queries);

    /**
    * @param[in]  jql QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  validate_query QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  properties QList<QString> [optional]
    * @param[in]  fields_by_keys bool [optional]
    */
    virtual void searchForIssuesUsingJql(const ::OpenAPI::OptionalParam<QString> &jql = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &validate_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &fields_by_keys = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_search_request_bean OAISearchRequestBean [required]
    */
    virtual void searchForIssuesUsingJqlPost(const OAISearchRequestBean &oai_search_request_bean);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getIssuePickerResourceCallback(OAIHttpRequestWorker *worker);
    void matchIssuesCallback(OAIHttpRequestWorker *worker);
    void searchForIssuesUsingJqlCallback(OAIHttpRequestWorker *worker);
    void searchForIssuesUsingJqlPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getIssuePickerResourceSignal(OAIIssuePickerSuggestions summary);
    void matchIssuesSignal(OAIIssueMatches summary);
    void searchForIssuesUsingJqlSignal(OAISearchResults summary);
    void searchForIssuesUsingJqlPostSignal(OAISearchResults summary);


    void getIssuePickerResourceSignalFull(OAIHttpRequestWorker *worker, OAIIssuePickerSuggestions summary);
    void matchIssuesSignalFull(OAIHttpRequestWorker *worker, OAIIssueMatches summary);
    void searchForIssuesUsingJqlSignalFull(OAIHttpRequestWorker *worker, OAISearchResults summary);
    void searchForIssuesUsingJqlPostSignalFull(OAIHttpRequestWorker *worker, OAISearchResults summary);

    Q_DECL_DEPRECATED_X("Use getIssuePickerResourceSignalError() instead")
    void getIssuePickerResourceSignalE(OAIIssuePickerSuggestions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePickerResourceSignalError(OAIIssuePickerSuggestions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use matchIssuesSignalError() instead")
    void matchIssuesSignalE(OAIIssueMatches summary, QNetworkReply::NetworkError error_type, QString error_str);
    void matchIssuesSignalError(OAIIssueMatches summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchForIssuesUsingJqlSignalError() instead")
    void searchForIssuesUsingJqlSignalE(OAISearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchForIssuesUsingJqlSignalError(OAISearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchForIssuesUsingJqlPostSignalError() instead")
    void searchForIssuesUsingJqlPostSignalE(OAISearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchForIssuesUsingJqlPostSignalError(OAISearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getIssuePickerResourceSignalErrorFull() instead")
    void getIssuePickerResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePickerResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use matchIssuesSignalErrorFull() instead")
    void matchIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void matchIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchForIssuesUsingJqlSignalErrorFull() instead")
    void searchForIssuesUsingJqlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchForIssuesUsingJqlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchForIssuesUsingJqlPostSignalErrorFull() instead")
    void searchForIssuesUsingJqlPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchForIssuesUsingJqlPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
