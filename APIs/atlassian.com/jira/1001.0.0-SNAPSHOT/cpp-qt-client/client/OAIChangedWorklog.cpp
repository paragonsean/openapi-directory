/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangedWorklog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangedWorklog::OAIChangedWorklog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangedWorklog::OAIChangedWorklog() {
    this->initializeModel();
}

OAIChangedWorklog::~OAIChangedWorklog() {}

void OAIChangedWorklog::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_worklog_id_isSet = false;
    m_worklog_id_isValid = false;
}

void OAIChangedWorklog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangedWorklog::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;

    m_worklog_id_isValid = ::OpenAPI::fromJsonValue(m_worklog_id, json[QString("worklogId")]);
    m_worklog_id_isSet = !json[QString("worklogId")].isNull() && m_worklog_id_isValid;
}

QString OAIChangedWorklog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangedWorklog::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_worklog_id_isSet) {
        obj.insert(QString("worklogId"), ::OpenAPI::toJsonValue(m_worklog_id));
    }
    return obj;
}

QList<OAIEntityProperty> OAIChangedWorklog::getProperties() const {
    return m_properties;
}
void OAIChangedWorklog::setProperties(const QList<OAIEntityProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIChangedWorklog::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIChangedWorklog::is_properties_Valid() const{
    return m_properties_isValid;
}

qint64 OAIChangedWorklog::getUpdatedTime() const {
    return m_updated_time;
}
void OAIChangedWorklog::setUpdatedTime(const qint64 &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIChangedWorklog::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIChangedWorklog::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

qint64 OAIChangedWorklog::getWorklogId() const {
    return m_worklog_id;
}
void OAIChangedWorklog::setWorklogId(const qint64 &worklog_id) {
    m_worklog_id = worklog_id;
    m_worklog_id_isSet = true;
}

bool OAIChangedWorklog::is_worklog_id_Set() const{
    return m_worklog_id_isSet;
}

bool OAIChangedWorklog::is_worklog_id_Valid() const{
    return m_worklog_id_isValid;
}

bool OAIChangedWorklog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worklog_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangedWorklog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
