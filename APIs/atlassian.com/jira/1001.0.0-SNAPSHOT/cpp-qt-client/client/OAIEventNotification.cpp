/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventNotification::OAIEventNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventNotification::OAIEventNotification() {
    this->initializeModel();
}

OAIEventNotification::~OAIEventNotification() {}

void OAIEventNotification::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_project_role_isSet = false;
    m_project_role_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEventNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventNotification::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_project_role_isValid = ::OpenAPI::fromJsonValue(m_project_role, json[QString("projectRole")]);
    m_project_role_isSet = !json[QString("projectRole")].isNull() && m_project_role_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEventNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_field.isSet()) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notification_type_isSet) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_project_role.isSet()) {
        obj.insert(QString("projectRole"), ::OpenAPI::toJsonValue(m_project_role));
    }
    if (m_recipient_isSet) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIEventNotification::getEmailAddress() const {
    return m_email_address;
}
void OAIEventNotification::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIEventNotification::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIEventNotification::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIEventNotification::getExpand() const {
    return m_expand;
}
void OAIEventNotification::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIEventNotification::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIEventNotification::is_expand_Valid() const{
    return m_expand_isValid;
}

OAIFieldDetails OAIEventNotification::getField() const {
    return m_field;
}
void OAIEventNotification::setField(const OAIFieldDetails &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIEventNotification::is_field_Set() const{
    return m_field_isSet;
}

bool OAIEventNotification::is_field_Valid() const{
    return m_field_isValid;
}

OAIGroupName OAIEventNotification::getGroup() const {
    return m_group;
}
void OAIEventNotification::setGroup(const OAIGroupName &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIEventNotification::is_group_Set() const{
    return m_group_isSet;
}

bool OAIEventNotification::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIEventNotification::getId() const {
    return m_id;
}
void OAIEventNotification::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventNotification::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventNotification::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventNotification::getNotificationType() const {
    return m_notification_type;
}
void OAIEventNotification::setNotificationType(const QString &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAIEventNotification::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAIEventNotification::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

QString OAIEventNotification::getParameter() const {
    return m_parameter;
}
void OAIEventNotification::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIEventNotification::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIEventNotification::is_parameter_Valid() const{
    return m_parameter_isValid;
}

OAIProjectRole OAIEventNotification::getProjectRole() const {
    return m_project_role;
}
void OAIEventNotification::setProjectRole(const OAIProjectRole &project_role) {
    m_project_role = project_role;
    m_project_role_isSet = true;
}

bool OAIEventNotification::is_project_role_Set() const{
    return m_project_role_isSet;
}

bool OAIEventNotification::is_project_role_Valid() const{
    return m_project_role_isValid;
}

QString OAIEventNotification::getRecipient() const {
    return m_recipient;
}
void OAIEventNotification::setRecipient(const QString &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIEventNotification::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIEventNotification::is_recipient_Valid() const{
    return m_recipient_isValid;
}

OAIUserDetails OAIEventNotification::getUser() const {
    return m_user;
}
void OAIEventNotification::setUser(const OAIUserDetails &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEventNotification::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEventNotification::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEventNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
