/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScreenTabsApi_H
#define OAI_OAIScreenTabsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScreenableTab.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScreenTabsApi : public QObject {
    Q_OBJECT

public:
    OAIScreenTabsApi(const int timeOut = 0);
    ~OAIScreenTabsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  oai_screenable_tab OAIScreenableTab [required]
    */
    virtual void addScreenTab(const qint64 &screen_id, const OAIScreenableTab &oai_screenable_tab);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    */
    virtual void deleteScreenTab(const qint64 &screen_id, const qint64 &tab_id);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  project_key QString [optional]
    */
    virtual void getAllScreenTabs(const qint64 &screen_id, const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  pos qint32 [required]
    */
    virtual void moveScreenTab(const qint64 &screen_id, const qint64 &tab_id, const qint32 &pos);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  oai_screenable_tab OAIScreenableTab [required]
    */
    virtual void renameScreenTab(const qint64 &screen_id, const qint64 &tab_id, const OAIScreenableTab &oai_screenable_tab);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addScreenTabCallback(OAIHttpRequestWorker *worker);
    void deleteScreenTabCallback(OAIHttpRequestWorker *worker);
    void getAllScreenTabsCallback(OAIHttpRequestWorker *worker);
    void moveScreenTabCallback(OAIHttpRequestWorker *worker);
    void renameScreenTabCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addScreenTabSignal(OAIScreenableTab summary);
    void deleteScreenTabSignal();
    void getAllScreenTabsSignal(QList<OAIScreenableTab> summary);
    void moveScreenTabSignal(QJsonValue summary);
    void renameScreenTabSignal(OAIScreenableTab summary);


    void addScreenTabSignalFull(OAIHttpRequestWorker *worker, OAIScreenableTab summary);
    void deleteScreenTabSignalFull(OAIHttpRequestWorker *worker);
    void getAllScreenTabsSignalFull(OAIHttpRequestWorker *worker, QList<OAIScreenableTab> summary);
    void moveScreenTabSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void renameScreenTabSignalFull(OAIHttpRequestWorker *worker, OAIScreenableTab summary);

    Q_DECL_DEPRECATED_X("Use addScreenTabSignalError() instead")
    void addScreenTabSignalE(OAIScreenableTab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addScreenTabSignalError(OAIScreenableTab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenTabSignalError() instead")
    void deleteScreenTabSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenTabSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllScreenTabsSignalError() instead")
    void getAllScreenTabsSignalE(QList<OAIScreenableTab> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllScreenTabsSignalError(QList<OAIScreenableTab> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveScreenTabSignalError() instead")
    void moveScreenTabSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveScreenTabSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameScreenTabSignalError() instead")
    void renameScreenTabSignalE(OAIScreenableTab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renameScreenTabSignalError(OAIScreenableTab summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addScreenTabSignalErrorFull() instead")
    void addScreenTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addScreenTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenTabSignalErrorFull() instead")
    void deleteScreenTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllScreenTabsSignalErrorFull() instead")
    void getAllScreenTabsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllScreenTabsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveScreenTabSignalErrorFull() instead")
    void moveScreenTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveScreenTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameScreenTabSignalErrorFull() instead")
    void renameScreenTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameScreenTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
