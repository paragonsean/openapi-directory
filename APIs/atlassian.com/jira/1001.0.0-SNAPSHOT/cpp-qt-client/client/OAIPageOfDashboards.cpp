/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageOfDashboards.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageOfDashboards::OAIPageOfDashboards(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageOfDashboards::OAIPageOfDashboards() {
    this->initializeModel();
}

OAIPageOfDashboards::~OAIPageOfDashboards() {}

void OAIPageOfDashboards::initializeModel() {

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPageOfDashboards::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageOfDashboards::fromJsonObject(QJsonObject json) {

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("dashboards")]);
    m_dashboards_isSet = !json[QString("dashboards")].isNull() && m_dashboards_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPageOfDashboards::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageOfDashboards::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboards.size() > 0) {
        obj.insert(QString("dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIDashboard> OAIPageOfDashboards::getDashboards() const {
    return m_dashboards;
}
void OAIPageOfDashboards::setDashboards(const QList<OAIDashboard> &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAIPageOfDashboards::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAIPageOfDashboards::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

qint32 OAIPageOfDashboards::getMaxResults() const {
    return m_max_results;
}
void OAIPageOfDashboards::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIPageOfDashboards::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIPageOfDashboards::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIPageOfDashboards::getNext() const {
    return m_next;
}
void OAIPageOfDashboards::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIPageOfDashboards::is_next_Set() const{
    return m_next_isSet;
}

bool OAIPageOfDashboards::is_next_Valid() const{
    return m_next_isValid;
}

QString OAIPageOfDashboards::getPrev() const {
    return m_prev;
}
void OAIPageOfDashboards::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAIPageOfDashboards::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAIPageOfDashboards::is_prev_Valid() const{
    return m_prev_isValid;
}

qint32 OAIPageOfDashboards::getStartAt() const {
    return m_start_at;
}
void OAIPageOfDashboards::setStartAt(const qint32 &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIPageOfDashboards::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIPageOfDashboards::is_start_at_Valid() const{
    return m_start_at_isValid;
}

qint32 OAIPageOfDashboards::getTotal() const {
    return m_total;
}
void OAIPageOfDashboards::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPageOfDashboards::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPageOfDashboards::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPageOfDashboards::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageOfDashboards::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
