/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTransitionRulesUpdateErrorDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTransitionRulesUpdateErrorDetails::OAIWorkflowTransitionRulesUpdateErrorDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTransitionRulesUpdateErrorDetails::OAIWorkflowTransitionRulesUpdateErrorDetails() {
    this->initializeModel();
}

OAIWorkflowTransitionRulesUpdateErrorDetails::~OAIWorkflowTransitionRulesUpdateErrorDetails() {}

void OAIWorkflowTransitionRulesUpdateErrorDetails::initializeModel() {

    m_rule_update_errors_isSet = false;
    m_rule_update_errors_isValid = false;

    m_update_errors_isSet = false;
    m_update_errors_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAIWorkflowTransitionRulesUpdateErrorDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTransitionRulesUpdateErrorDetails::fromJsonObject(QJsonObject json) {

    if(json["ruleUpdateErrors"].isObject()){
        auto varmap = json["ruleUpdateErrors"].toObject().toVariantMap();
        m_rule_update_errors_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_rule_update_errors_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rule_update_errors_isSet &= !jval.isNull() && m_rule_update_errors_isValid;
                m_rule_update_errors.insert(m_rule_update_errors.end(), val, item);
            }
        }
    }

    m_update_errors_isValid = ::OpenAPI::fromJsonValue(m_update_errors, json[QString("updateErrors")]);
    m_update_errors_isSet = !json[QString("updateErrors")].isNull() && m_update_errors_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;
}

QString OAIWorkflowTransitionRulesUpdateErrorDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTransitionRulesUpdateErrorDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_update_errors.size() > 0) {
        
        obj.insert(QString("ruleUpdateErrors"), toJsonValue(m_rule_update_errors));
    }
    if (m_update_errors.size() > 0) {
        obj.insert(QString("updateErrors"), ::OpenAPI::toJsonValue(m_update_errors));
    }
    if (m_workflow_id.isSet()) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

QMap<QString, QSet<QString>> OAIWorkflowTransitionRulesUpdateErrorDetails::getRuleUpdateErrors() const {
    return m_rule_update_errors;
}
void OAIWorkflowTransitionRulesUpdateErrorDetails::setRuleUpdateErrors(const QMap<QString, QSet<QString>> &rule_update_errors) {
    m_rule_update_errors = rule_update_errors;
    m_rule_update_errors_isSet = true;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::is_rule_update_errors_Set() const{
    return m_rule_update_errors_isSet;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::is_rule_update_errors_Valid() const{
    return m_rule_update_errors_isValid;
}

QSet<QString> OAIWorkflowTransitionRulesUpdateErrorDetails::getUpdateErrors() const {
    return m_update_errors;
}
void OAIWorkflowTransitionRulesUpdateErrorDetails::setUpdateErrors(const QSet<QString> &update_errors) {
    m_update_errors = update_errors;
    m_update_errors_isSet = true;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::is_update_errors_Set() const{
    return m_update_errors_isSet;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::is_update_errors_Valid() const{
    return m_update_errors_isValid;
}

OAIWorkflowId OAIWorkflowTransitionRulesUpdateErrorDetails::getWorkflowId() const {
    return m_workflow_id;
}
void OAIWorkflowTransitionRulesUpdateErrorDetails::setWorkflowId(const OAIWorkflowId &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_update_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTransitionRulesUpdateErrorDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_update_errors_isValid && m_update_errors_isValid && m_workflow_id_isValid && true;
}

} // namespace OpenAPI
