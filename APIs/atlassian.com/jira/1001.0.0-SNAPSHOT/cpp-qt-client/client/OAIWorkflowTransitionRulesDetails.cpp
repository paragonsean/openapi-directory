/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTransitionRulesDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTransitionRulesDetails::OAIWorkflowTransitionRulesDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTransitionRulesDetails::OAIWorkflowTransitionRulesDetails() {
    this->initializeModel();
}

OAIWorkflowTransitionRulesDetails::~OAIWorkflowTransitionRulesDetails() {}

void OAIWorkflowTransitionRulesDetails::initializeModel() {

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_workflow_rule_ids_isSet = false;
    m_workflow_rule_ids_isValid = false;
}

void OAIWorkflowTransitionRulesDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTransitionRulesDetails::fromJsonObject(QJsonObject json) {

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;

    m_workflow_rule_ids_isValid = ::OpenAPI::fromJsonValue(m_workflow_rule_ids, json[QString("workflowRuleIds")]);
    m_workflow_rule_ids_isSet = !json[QString("workflowRuleIds")].isNull() && m_workflow_rule_ids_isValid;
}

QString OAIWorkflowTransitionRulesDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTransitionRulesDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_id.isSet()) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_workflow_rule_ids.size() > 0) {
        obj.insert(QString("workflowRuleIds"), ::OpenAPI::toJsonValue(m_workflow_rule_ids));
    }
    return obj;
}

OAIWorkflowId OAIWorkflowTransitionRulesDetails::getWorkflowId() const {
    return m_workflow_id;
}
void OAIWorkflowTransitionRulesDetails::setWorkflowId(const OAIWorkflowId &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIWorkflowTransitionRulesDetails::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIWorkflowTransitionRulesDetails::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

QSet<QString> OAIWorkflowTransitionRulesDetails::getWorkflowRuleIds() const {
    return m_workflow_rule_ids;
}
void OAIWorkflowTransitionRulesDetails::setWorkflowRuleIds(const QSet<QString> &workflow_rule_ids) {
    m_workflow_rule_ids = workflow_rule_ids;
    m_workflow_rule_ids_isSet = true;
}

bool OAIWorkflowTransitionRulesDetails::is_workflow_rule_ids_Set() const{
    return m_workflow_rule_ids_isSet;
}

bool OAIWorkflowTransitionRulesDetails::is_workflow_rule_ids_Valid() const{
    return m_workflow_rule_ids_isValid;
}

bool OAIWorkflowTransitionRulesDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_rule_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTransitionRulesDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_id_isValid && m_workflow_rule_ids_isValid && true;
}

} // namespace OpenAPI
