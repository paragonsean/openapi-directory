/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_field_ids_filter_isSet = false;
    m_field_ids_filter_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_property_keys_filter_isSet = false;
    m_issue_property_keys_filter_isValid = false;

    m_jql_filter_isSet = false;
    m_jql_filter_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_field_ids_filter_isValid = ::OpenAPI::fromJsonValue(m_field_ids_filter, json[QString("fieldIdsFilter")]);
    m_field_ids_filter_isSet = !json[QString("fieldIdsFilter")].isNull() && m_field_ids_filter_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_property_keys_filter_isValid = ::OpenAPI::fromJsonValue(m_issue_property_keys_filter, json[QString("issuePropertyKeysFilter")]);
    m_issue_property_keys_filter_isSet = !json[QString("issuePropertyKeysFilter")].isNull() && m_issue_property_keys_filter_isValid;

    m_jql_filter_isValid = ::OpenAPI::fromJsonValue(m_jql_filter, json[QString("jqlFilter")]);
    m_jql_filter_isSet = !json[QString("jqlFilter")].isNull() && m_jql_filter_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_field_ids_filter.size() > 0) {
        obj.insert(QString("fieldIdsFilter"), ::OpenAPI::toJsonValue(m_field_ids_filter));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_property_keys_filter.size() > 0) {
        obj.insert(QString("issuePropertyKeysFilter"), ::OpenAPI::toJsonValue(m_issue_property_keys_filter));
    }
    if (m_jql_filter_isSet) {
        obj.insert(QString("jqlFilter"), ::OpenAPI::toJsonValue(m_jql_filter));
    }
    return obj;
}

QList<QString> OAIWebhook::getEvents() const {
    return m_events;
}
void OAIWebhook::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhook::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhook::is_events_Valid() const{
    return m_events_isValid;
}

qint64 OAIWebhook::getExpirationDate() const {
    return m_expiration_date;
}
void OAIWebhook::setExpirationDate(const qint64 &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIWebhook::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIWebhook::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QList<QString> OAIWebhook::getFieldIdsFilter() const {
    return m_field_ids_filter;
}
void OAIWebhook::setFieldIdsFilter(const QList<QString> &field_ids_filter) {
    m_field_ids_filter = field_ids_filter;
    m_field_ids_filter_isSet = true;
}

bool OAIWebhook::is_field_ids_filter_Set() const{
    return m_field_ids_filter_isSet;
}

bool OAIWebhook::is_field_ids_filter_Valid() const{
    return m_field_ids_filter_isValid;
}

qint64 OAIWebhook::getId() const {
    return m_id;
}
void OAIWebhook::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIWebhook::getIssuePropertyKeysFilter() const {
    return m_issue_property_keys_filter;
}
void OAIWebhook::setIssuePropertyKeysFilter(const QList<QString> &issue_property_keys_filter) {
    m_issue_property_keys_filter = issue_property_keys_filter;
    m_issue_property_keys_filter_isSet = true;
}

bool OAIWebhook::is_issue_property_keys_filter_Set() const{
    return m_issue_property_keys_filter_isSet;
}

bool OAIWebhook::is_issue_property_keys_filter_Valid() const{
    return m_issue_property_keys_filter_isValid;
}

QString OAIWebhook::getJqlFilter() const {
    return m_jql_filter;
}
void OAIWebhook::setJqlFilter(const QString &jql_filter) {
    m_jql_filter = jql_filter;
    m_jql_filter_isSet = true;
}

bool OAIWebhook::is_jql_filter_Set() const{
    return m_jql_filter_isSet;
}

bool OAIWebhook::is_jql_filter_Valid() const{
    return m_jql_filter_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_ids_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_property_keys_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jql_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && m_id_isValid && m_jql_filter_isValid && true;
}

} // namespace OpenAPI
