/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJiraSettingsApi_H
#define OAI_OAIJiraSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationProperty.h"
#include "OAIConfiguration.h"
#include "OAISimpleApplicationPropertyBean.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJiraSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIJiraSettingsApi(const int timeOut = 0);
    ~OAIJiraSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAdvancedSettings();

    /**
    * @param[in]  key QString [optional]
    * @param[in]  permission_level QString [optional]
    * @param[in]  key_filter QString [optional]
    */
    virtual void getApplicationProperty(const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_filter = ::OpenAPI::OptionalParam<QString>());


    virtual void getConfiguration();

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_simple_application_property_bean OAISimpleApplicationPropertyBean [required]
    */
    virtual void setApplicationProperty(const QString &id, const OAISimpleApplicationPropertyBean &oai_simple_application_property_bean);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAdvancedSettingsCallback(OAIHttpRequestWorker *worker);
    void getApplicationPropertyCallback(OAIHttpRequestWorker *worker);
    void getConfigurationCallback(OAIHttpRequestWorker *worker);
    void setApplicationPropertyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAdvancedSettingsSignal(QList<OAIApplicationProperty> summary);
    void getApplicationPropertySignal(QList<OAIApplicationProperty> summary);
    void getConfigurationSignal(OAIConfiguration summary);
    void setApplicationPropertySignal(OAIApplicationProperty summary);


    void getAdvancedSettingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationProperty> summary);
    void getApplicationPropertySignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationProperty> summary);
    void getConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConfiguration summary);
    void setApplicationPropertySignalFull(OAIHttpRequestWorker *worker, OAIApplicationProperty summary);

    Q_DECL_DEPRECATED_X("Use getAdvancedSettingsSignalError() instead")
    void getAdvancedSettingsSignalE(QList<OAIApplicationProperty> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedSettingsSignalError(QList<OAIApplicationProperty> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationPropertySignalError() instead")
    void getApplicationPropertySignalE(QList<OAIApplicationProperty> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationPropertySignalError(QList<OAIApplicationProperty> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigurationSignalError() instead")
    void getConfigurationSignalE(OAIConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationSignalError(OAIConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setApplicationPropertySignalError() instead")
    void setApplicationPropertySignalE(OAIApplicationProperty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setApplicationPropertySignalError(OAIApplicationProperty summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAdvancedSettingsSignalErrorFull() instead")
    void getAdvancedSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationPropertySignalErrorFull() instead")
    void getApplicationPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigurationSignalErrorFull() instead")
    void getConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setApplicationPropertySignalErrorFull() instead")
    void setApplicationPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setApplicationPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
