/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPermissionSchemesApi_H
#define OAI_OAIPermissionSchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPermissionGrant.h"
#include "OAIPermissionGrants.h"
#include "OAIPermissionScheme.h"
#include "OAIPermissionSchemes.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPermissionSchemesApi : public QObject {
    Q_OBJECT

public:
    OAIPermissionSchemesApi(const int timeOut = 0);
    ~OAIPermissionSchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  oai_permission_grant OAIPermissionGrant [required]
    * @param[in]  expand QString [optional]
    */
    virtual void createPermissionGrant(const qint64 &scheme_id, const OAIPermissionGrant &oai_permission_grant, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_permission_scheme OAIPermissionScheme [required]
    * @param[in]  expand QString [optional]
    */
    virtual void createPermissionScheme(const OAIPermissionScheme &oai_permission_scheme, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id qint64 [required]
    */
    virtual void deletePermissionScheme(const qint64 &scheme_id);

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  permission_id qint64 [required]
    */
    virtual void deletePermissionSchemeEntity(const qint64 &scheme_id, const qint64 &permission_id);

    /**
    * @param[in]  expand QString [optional]
    */
    virtual void getAllPermissionSchemes(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionScheme(const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  permission_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionSchemeGrant(const qint64 &scheme_id, const qint64 &permission_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionSchemeGrants(const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  oai_permission_scheme OAIPermissionScheme [required]
    * @param[in]  expand QString [optional]
    */
    virtual void updatePermissionScheme(const qint64 &scheme_id, const OAIPermissionScheme &oai_permission_scheme, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPermissionGrantCallback(OAIHttpRequestWorker *worker);
    void createPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeEntityCallback(OAIHttpRequestWorker *worker);
    void getAllPermissionSchemesCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemeGrantCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemeGrantsCallback(OAIHttpRequestWorker *worker);
    void updatePermissionSchemeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPermissionGrantSignal(OAIPermissionGrant summary);
    void createPermissionSchemeSignal(OAIPermissionScheme summary);
    void deletePermissionSchemeSignal();
    void deletePermissionSchemeEntitySignal();
    void getAllPermissionSchemesSignal(OAIPermissionSchemes summary);
    void getPermissionSchemeSignal(OAIPermissionScheme summary);
    void getPermissionSchemeGrantSignal(OAIPermissionGrant summary);
    void getPermissionSchemeGrantsSignal(OAIPermissionGrants summary);
    void updatePermissionSchemeSignal(OAIPermissionScheme summary);


    void createPermissionGrantSignalFull(OAIHttpRequestWorker *worker, OAIPermissionGrant summary);
    void createPermissionSchemeSignalFull(OAIHttpRequestWorker *worker, OAIPermissionScheme summary);
    void deletePermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeEntitySignalFull(OAIHttpRequestWorker *worker);
    void getAllPermissionSchemesSignalFull(OAIHttpRequestWorker *worker, OAIPermissionSchemes summary);
    void getPermissionSchemeSignalFull(OAIHttpRequestWorker *worker, OAIPermissionScheme summary);
    void getPermissionSchemeGrantSignalFull(OAIHttpRequestWorker *worker, OAIPermissionGrant summary);
    void getPermissionSchemeGrantsSignalFull(OAIHttpRequestWorker *worker, OAIPermissionGrants summary);
    void updatePermissionSchemeSignalFull(OAIHttpRequestWorker *worker, OAIPermissionScheme summary);

    Q_DECL_DEPRECATED_X("Use createPermissionGrantSignalError() instead")
    void createPermissionGrantSignalE(OAIPermissionGrant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionGrantSignalError(OAIPermissionGrant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionSchemeSignalError() instead")
    void createPermissionSchemeSignalE(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionSchemeSignalError(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeSignalError() instead")
    void deletePermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeEntitySignalError() instead")
    void deletePermissionSchemeEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionSchemesSignalError() instead")
    void getAllPermissionSchemesSignalE(OAIPermissionSchemes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionSchemesSignalError(OAIPermissionSchemes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeSignalError() instead")
    void getPermissionSchemeSignalE(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeSignalError(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantSignalError() instead")
    void getPermissionSchemeGrantSignalE(OAIPermissionGrant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantSignalError(OAIPermissionGrant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantsSignalError() instead")
    void getPermissionSchemeGrantsSignalE(OAIPermissionGrants summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantsSignalError(OAIPermissionGrants summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionSchemeSignalError() instead")
    void updatePermissionSchemeSignalE(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionSchemeSignalError(OAIPermissionScheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPermissionGrantSignalErrorFull() instead")
    void createPermissionGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionSchemeSignalErrorFull() instead")
    void createPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeSignalErrorFull() instead")
    void deletePermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeEntitySignalErrorFull() instead")
    void deletePermissionSchemeEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionSchemesSignalErrorFull() instead")
    void getAllPermissionSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeSignalErrorFull() instead")
    void getPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantSignalErrorFull() instead")
    void getPermissionSchemeGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantsSignalErrorFull() instead")
    void getPermissionSchemeGrantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionSchemeSignalErrorFull() instead")
    void updatePermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
