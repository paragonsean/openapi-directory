/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWatchers.h
 *
 * The details of watchers on an issue.
 */

#ifndef OAIWatchers_H
#define OAIWatchers_H

#include <QJsonObject>

#include "OAIUserDetails.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserDetails;

class OAIWatchers : public OAIObject {
public:
    OAIWatchers();
    OAIWatchers(QString json);
    ~OAIWatchers() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsWatching() const;
    void setIsWatching(const bool &is_watching);
    bool is_is_watching_Set() const;
    bool is_is_watching_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    qint32 getWatchCount() const;
    void setWatchCount(const qint32 &watch_count);
    bool is_watch_count_Set() const;
    bool is_watch_count_Valid() const;

    QList<OAIUserDetails> getWatchers() const;
    void setWatchers(const QList<OAIUserDetails> &watchers);
    bool is_watchers_Set() const;
    bool is_watchers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_watching;
    bool m_is_watching_isSet;
    bool m_is_watching_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    qint32 m_watch_count;
    bool m_watch_count_isSet;
    bool m_watch_count_isValid;

    QList<OAIUserDetails> m_watchers;
    bool m_watchers_isSet;
    bool m_watchers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWatchers)

#endif // OAIWatchers_H
