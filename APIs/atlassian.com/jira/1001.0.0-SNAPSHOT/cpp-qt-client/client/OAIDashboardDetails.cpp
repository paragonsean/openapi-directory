/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardDetails::OAIDashboardDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardDetails::OAIDashboardDetails() {
    this->initializeModel();
}

OAIDashboardDetails::~OAIDashboardDetails() {}

void OAIDashboardDetails::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_edit_permissions_isSet = false;
    m_edit_permissions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_share_permissions_isSet = false;
    m_share_permissions_isValid = false;
}

void OAIDashboardDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardDetails::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_edit_permissions_isValid = ::OpenAPI::fromJsonValue(m_edit_permissions, json[QString("editPermissions")]);
    m_edit_permissions_isSet = !json[QString("editPermissions")].isNull() && m_edit_permissions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_share_permissions_isValid = ::OpenAPI::fromJsonValue(m_share_permissions, json[QString("sharePermissions")]);
    m_share_permissions_isSet = !json[QString("sharePermissions")].isNull() && m_share_permissions_isValid;
}

QString OAIDashboardDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_edit_permissions.size() > 0) {
        obj.insert(QString("editPermissions"), ::OpenAPI::toJsonValue(m_edit_permissions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_share_permissions.size() > 0) {
        obj.insert(QString("sharePermissions"), ::OpenAPI::toJsonValue(m_share_permissions));
    }
    return obj;
}

QString OAIDashboardDetails::getDescription() const {
    return m_description;
}
void OAIDashboardDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDashboardDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDashboardDetails::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISharePermission> OAIDashboardDetails::getEditPermissions() const {
    return m_edit_permissions;
}
void OAIDashboardDetails::setEditPermissions(const QList<OAISharePermission> &edit_permissions) {
    m_edit_permissions = edit_permissions;
    m_edit_permissions_isSet = true;
}

bool OAIDashboardDetails::is_edit_permissions_Set() const{
    return m_edit_permissions_isSet;
}

bool OAIDashboardDetails::is_edit_permissions_Valid() const{
    return m_edit_permissions_isValid;
}

QString OAIDashboardDetails::getName() const {
    return m_name;
}
void OAIDashboardDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDashboardDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDashboardDetails::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISharePermission> OAIDashboardDetails::getSharePermissions() const {
    return m_share_permissions;
}
void OAIDashboardDetails::setSharePermissions(const QList<OAISharePermission> &share_permissions) {
    m_share_permissions = share_permissions;
    m_share_permissions_isSet = true;
}

bool OAIDashboardDetails::is_share_permissions_Set() const{
    return m_share_permissions_isSet;
}

bool OAIDashboardDetails::is_share_permissions_Valid() const{
    return m_share_permissions_isValid;
}

bool OAIDashboardDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_edit_permissions_isValid && m_name_isValid && m_share_permissions_isValid && true;
}

} // namespace OpenAPI
