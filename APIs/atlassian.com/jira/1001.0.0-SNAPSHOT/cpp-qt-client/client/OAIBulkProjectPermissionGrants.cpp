/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkProjectPermissionGrants.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkProjectPermissionGrants::OAIBulkProjectPermissionGrants(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkProjectPermissionGrants::OAIBulkProjectPermissionGrants() {
    this->initializeModel();
}

OAIBulkProjectPermissionGrants::~OAIBulkProjectPermissionGrants() {}

void OAIBulkProjectPermissionGrants::initializeModel() {

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;
}

void OAIBulkProjectPermissionGrants::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkProjectPermissionGrants::fromJsonObject(QJsonObject json) {

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;
}

QString OAIBulkProjectPermissionGrants::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkProjectPermissionGrants::asJsonObject() const {
    QJsonObject obj;
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    return obj;
}

QSet<qint64> OAIBulkProjectPermissionGrants::getIssues() const {
    return m_issues;
}
void OAIBulkProjectPermissionGrants::setIssues(const QSet<qint64> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIBulkProjectPermissionGrants::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIBulkProjectPermissionGrants::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIBulkProjectPermissionGrants::getPermission() const {
    return m_permission;
}
void OAIBulkProjectPermissionGrants::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIBulkProjectPermissionGrants::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIBulkProjectPermissionGrants::is_permission_Valid() const{
    return m_permission_isValid;
}

QSet<qint64> OAIBulkProjectPermissionGrants::getProjects() const {
    return m_projects;
}
void OAIBulkProjectPermissionGrants::setProjects(const QSet<qint64> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIBulkProjectPermissionGrants::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIBulkProjectPermissionGrants::is_projects_Valid() const{
    return m_projects_isValid;
}

bool OAIBulkProjectPermissionGrants::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkProjectPermissionGrants::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_issues_isValid && m_permission_isValid && m_projects_isValid && true;
}

} // namespace OpenAPI
