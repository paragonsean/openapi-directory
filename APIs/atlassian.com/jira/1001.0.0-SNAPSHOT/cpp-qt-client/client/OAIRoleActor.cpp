/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleActor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleActor::OAIRoleActor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleActor::OAIRoleActor() {
    this->initializeModel();
}

OAIRoleActor::~OAIRoleActor() {}

void OAIRoleActor::initializeModel() {

    m_actor_group_isSet = false;
    m_actor_group_isValid = false;

    m_actor_user_isSet = false;
    m_actor_user_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRoleActor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleActor::fromJsonObject(QJsonObject json) {

    m_actor_group_isValid = ::OpenAPI::fromJsonValue(m_actor_group, json[QString("actorGroup")]);
    m_actor_group_isSet = !json[QString("actorGroup")].isNull() && m_actor_group_isValid;

    m_actor_user_isValid = ::OpenAPI::fromJsonValue(m_actor_user, json[QString("actorUser")]);
    m_actor_user_isSet = !json[QString("actorUser")].isNull() && m_actor_user_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatarUrl")]);
    m_avatar_url_isSet = !json[QString("avatarUrl")].isNull() && m_avatar_url_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRoleActor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleActor::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_group.isSet()) {
        obj.insert(QString("actorGroup"), ::OpenAPI::toJsonValue(m_actor_group));
    }
    if (m_actor_user.isSet()) {
        obj.insert(QString("actorUser"), ::OpenAPI::toJsonValue(m_actor_user));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatarUrl"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIProjectRoleGroup OAIRoleActor::getActorGroup() const {
    return m_actor_group;
}
void OAIRoleActor::setActorGroup(const OAIProjectRoleGroup &actor_group) {
    m_actor_group = actor_group;
    m_actor_group_isSet = true;
}

bool OAIRoleActor::is_actor_group_Set() const{
    return m_actor_group_isSet;
}

bool OAIRoleActor::is_actor_group_Valid() const{
    return m_actor_group_isValid;
}

OAIProjectRoleUser OAIRoleActor::getActorUser() const {
    return m_actor_user;
}
void OAIRoleActor::setActorUser(const OAIProjectRoleUser &actor_user) {
    m_actor_user = actor_user;
    m_actor_user_isSet = true;
}

bool OAIRoleActor::is_actor_user_Set() const{
    return m_actor_user_isSet;
}

bool OAIRoleActor::is_actor_user_Valid() const{
    return m_actor_user_isValid;
}

QString OAIRoleActor::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIRoleActor::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIRoleActor::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIRoleActor::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIRoleActor::getDisplayName() const {
    return m_display_name;
}
void OAIRoleActor::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRoleActor::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRoleActor::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint64 OAIRoleActor::getId() const {
    return m_id;
}
void OAIRoleActor::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoleActor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoleActor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRoleActor::getName() const {
    return m_name;
}
void OAIRoleActor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleActor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleActor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRoleActor::getType() const {
    return m_type;
}
void OAIRoleActor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRoleActor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRoleActor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRoleActor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleActor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
