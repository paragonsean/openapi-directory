/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueCommentsApi_H
#define OAI_OAIIssueCommentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComment.h"
#include "OAIIssueCommentListRequestBean.h"
#include "OAIPageBeanComment.h"
#include "OAIPageOfComments.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueCommentsApi : public QObject {
    Q_OBJECT

public:
    OAIIssueCommentsApi(const int timeOut = 0);
    ~OAIIssueCommentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  oai_comment OAIComment [required]
    * @param[in]  expand QString [optional]
    */
    virtual void addComment(const QString &issue_id_or_key, const OAIComment &oai_comment, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteComment(const QString &issue_id_or_key, const QString &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getComment(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getComments(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_issue_comment_list_request_bean OAIIssueCommentListRequestBean [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getCommentsByIds(const OAIIssueCommentListRequestBean &oai_issue_comment_list_request_bean, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_comment OAIComment [required]
    * @param[in]  notify_users bool [optional]
    * @param[in]  override_editable_flag bool [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void updateComment(const QString &issue_id_or_key, const QString &id, const OAIComment &oai_comment, const ::OpenAPI::OptionalParam<bool> &notify_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &override_editable_flag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addCommentCallback(OAIHttpRequestWorker *worker);
    void deleteCommentCallback(OAIHttpRequestWorker *worker);
    void getCommentCallback(OAIHttpRequestWorker *worker);
    void getCommentsCallback(OAIHttpRequestWorker *worker);
    void getCommentsByIdsCallback(OAIHttpRequestWorker *worker);
    void updateCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addCommentSignal(OAIComment summary);
    void deleteCommentSignal();
    void getCommentSignal(OAIComment summary);
    void getCommentsSignal(OAIPageOfComments summary);
    void getCommentsByIdsSignal(OAIPageBeanComment summary);
    void updateCommentSignal(OAIComment summary);


    void addCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void deleteCommentSignalFull(OAIHttpRequestWorker *worker);
    void getCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void getCommentsSignalFull(OAIHttpRequestWorker *worker, OAIPageOfComments summary);
    void getCommentsByIdsSignalFull(OAIHttpRequestWorker *worker, OAIPageBeanComment summary);
    void updateCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);

    Q_DECL_DEPRECATED_X("Use addCommentSignalError() instead")
    void addCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommentSignalError() instead")
    void deleteCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalError() instead")
    void getCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalError() instead")
    void getCommentsSignalE(OAIPageOfComments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalError(OAIPageOfComments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsByIdsSignalError() instead")
    void getCommentsByIdsSignalE(OAIPageBeanComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsByIdsSignalError(OAIPageBeanComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommentSignalError() instead")
    void updateCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addCommentSignalErrorFull() instead")
    void addCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommentSignalErrorFull() instead")
    void deleteCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalErrorFull() instead")
    void getCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalErrorFull() instead")
    void getCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsByIdsSignalErrorFull() instead")
    void getCommentsByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommentSignalErrorFull() instead")
    void updateCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
