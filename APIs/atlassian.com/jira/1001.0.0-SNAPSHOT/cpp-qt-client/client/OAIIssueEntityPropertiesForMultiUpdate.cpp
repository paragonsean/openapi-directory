/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueEntityPropertiesForMultiUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueEntityPropertiesForMultiUpdate::OAIIssueEntityPropertiesForMultiUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueEntityPropertiesForMultiUpdate::OAIIssueEntityPropertiesForMultiUpdate() {
    this->initializeModel();
}

OAIIssueEntityPropertiesForMultiUpdate::~OAIIssueEntityPropertiesForMultiUpdate() {}

void OAIIssueEntityPropertiesForMultiUpdate::initializeModel() {

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIIssueEntityPropertiesForMultiUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueEntityPropertiesForMultiUpdate::fromJsonObject(QJsonObject json) {

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issueID")]);
    m_issue_id_isSet = !json[QString("issueID")].isNull() && m_issue_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIIssueEntityPropertiesForMultiUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueEntityPropertiesForMultiUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_issue_id_isSet) {
        obj.insert(QString("issueID"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

qint64 OAIIssueEntityPropertiesForMultiUpdate::getIssueId() const {
    return m_issue_id;
}
void OAIIssueEntityPropertiesForMultiUpdate::setIssueId(const qint64 &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAIIssueEntityPropertiesForMultiUpdate::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAIIssueEntityPropertiesForMultiUpdate::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

QMap<QString, OAIJsonNode> OAIIssueEntityPropertiesForMultiUpdate::getProperties() const {
    return m_properties;
}
void OAIIssueEntityPropertiesForMultiUpdate::setProperties(const QMap<QString, OAIJsonNode> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIIssueEntityPropertiesForMultiUpdate::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIIssueEntityPropertiesForMultiUpdate::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIIssueEntityPropertiesForMultiUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueEntityPropertiesForMultiUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
