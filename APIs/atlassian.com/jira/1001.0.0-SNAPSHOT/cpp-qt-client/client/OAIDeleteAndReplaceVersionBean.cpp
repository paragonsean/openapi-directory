/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAndReplaceVersionBean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAndReplaceVersionBean::OAIDeleteAndReplaceVersionBean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAndReplaceVersionBean::OAIDeleteAndReplaceVersionBean() {
    this->initializeModel();
}

OAIDeleteAndReplaceVersionBean::~OAIDeleteAndReplaceVersionBean() {}

void OAIDeleteAndReplaceVersionBean::initializeModel() {

    m_custom_field_replacement_list_isSet = false;
    m_custom_field_replacement_list_isValid = false;

    m_move_affected_issues_to_isSet = false;
    m_move_affected_issues_to_isValid = false;

    m_move_fix_issues_to_isSet = false;
    m_move_fix_issues_to_isValid = false;
}

void OAIDeleteAndReplaceVersionBean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAndReplaceVersionBean::fromJsonObject(QJsonObject json) {

    m_custom_field_replacement_list_isValid = ::OpenAPI::fromJsonValue(m_custom_field_replacement_list, json[QString("customFieldReplacementList")]);
    m_custom_field_replacement_list_isSet = !json[QString("customFieldReplacementList")].isNull() && m_custom_field_replacement_list_isValid;

    m_move_affected_issues_to_isValid = ::OpenAPI::fromJsonValue(m_move_affected_issues_to, json[QString("moveAffectedIssuesTo")]);
    m_move_affected_issues_to_isSet = !json[QString("moveAffectedIssuesTo")].isNull() && m_move_affected_issues_to_isValid;

    m_move_fix_issues_to_isValid = ::OpenAPI::fromJsonValue(m_move_fix_issues_to, json[QString("moveFixIssuesTo")]);
    m_move_fix_issues_to_isSet = !json[QString("moveFixIssuesTo")].isNull() && m_move_fix_issues_to_isValid;
}

QString OAIDeleteAndReplaceVersionBean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAndReplaceVersionBean::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_field_replacement_list.size() > 0) {
        obj.insert(QString("customFieldReplacementList"), ::OpenAPI::toJsonValue(m_custom_field_replacement_list));
    }
    if (m_move_affected_issues_to_isSet) {
        obj.insert(QString("moveAffectedIssuesTo"), ::OpenAPI::toJsonValue(m_move_affected_issues_to));
    }
    if (m_move_fix_issues_to_isSet) {
        obj.insert(QString("moveFixIssuesTo"), ::OpenAPI::toJsonValue(m_move_fix_issues_to));
    }
    return obj;
}

QList<OAICustomFieldReplacement> OAIDeleteAndReplaceVersionBean::getCustomFieldReplacementList() const {
    return m_custom_field_replacement_list;
}
void OAIDeleteAndReplaceVersionBean::setCustomFieldReplacementList(const QList<OAICustomFieldReplacement> &custom_field_replacement_list) {
    m_custom_field_replacement_list = custom_field_replacement_list;
    m_custom_field_replacement_list_isSet = true;
}

bool OAIDeleteAndReplaceVersionBean::is_custom_field_replacement_list_Set() const{
    return m_custom_field_replacement_list_isSet;
}

bool OAIDeleteAndReplaceVersionBean::is_custom_field_replacement_list_Valid() const{
    return m_custom_field_replacement_list_isValid;
}

qint64 OAIDeleteAndReplaceVersionBean::getMoveAffectedIssuesTo() const {
    return m_move_affected_issues_to;
}
void OAIDeleteAndReplaceVersionBean::setMoveAffectedIssuesTo(const qint64 &move_affected_issues_to) {
    m_move_affected_issues_to = move_affected_issues_to;
    m_move_affected_issues_to_isSet = true;
}

bool OAIDeleteAndReplaceVersionBean::is_move_affected_issues_to_Set() const{
    return m_move_affected_issues_to_isSet;
}

bool OAIDeleteAndReplaceVersionBean::is_move_affected_issues_to_Valid() const{
    return m_move_affected_issues_to_isValid;
}

qint64 OAIDeleteAndReplaceVersionBean::getMoveFixIssuesTo() const {
    return m_move_fix_issues_to;
}
void OAIDeleteAndReplaceVersionBean::setMoveFixIssuesTo(const qint64 &move_fix_issues_to) {
    m_move_fix_issues_to = move_fix_issues_to;
    m_move_fix_issues_to_isSet = true;
}

bool OAIDeleteAndReplaceVersionBean::is_move_fix_issues_to_Set() const{
    return m_move_fix_issues_to_isSet;
}

bool OAIDeleteAndReplaceVersionBean::is_move_fix_issues_to_Valid() const{
    return m_move_fix_issues_to_isValid;
}

bool OAIDeleteAndReplaceVersionBean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_field_replacement_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_affected_issues_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_fix_issues_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAndReplaceVersionBean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
