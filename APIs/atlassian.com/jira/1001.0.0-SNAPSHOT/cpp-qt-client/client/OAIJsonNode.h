/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJsonNode.h
 *
 * 
 */

#ifndef OAIJsonNode_H
#define OAIJsonNode_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJsonNode : public OAIObject {
public:
    OAIJsonNode();
    OAIJsonNode(QString json);
    ~OAIJsonNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArray() const;
    void setArray(const bool &array);
    bool is_array_Set() const;
    bool is_array_Valid() const;

    bool isBigDecimal() const;
    void setBigDecimal(const bool &big_decimal);
    bool is_big_decimal_Set() const;
    bool is_big_decimal_Valid() const;

    bool isBigInteger() const;
    void setBigInteger(const bool &big_integer);
    bool is_big_integer_Set() const;
    bool is_big_integer_Valid() const;

    qint32 getBigIntegerValue() const;
    void setBigIntegerValue(const qint32 &big_integer_value);
    bool is_big_integer_value_Set() const;
    bool is_big_integer_value_Valid() const;

    bool isBinary() const;
    void setBinary(const bool &binary);
    bool is_binary_Set() const;
    bool is_binary_Valid() const;

    QList<QByteArray> getBinaryValue() const;
    void setBinaryValue(const QList<QByteArray> &binary_value);
    bool is_binary_value_Set() const;
    bool is_binary_value_Valid() const;

    bool isBoolean() const;
    void setBoolean(const bool &boolean);
    bool is_boolean_Set() const;
    bool is_boolean_Valid() const;

    bool isBooleanValue() const;
    void setBooleanValue(const bool &boolean_value);
    bool is_boolean_value_Set() const;
    bool is_boolean_value_Valid() const;

    bool isContainerNode() const;
    void setContainerNode(const bool &container_node);
    bool is_container_node_Set() const;
    bool is_container_node_Valid() const;

    double getDecimalValue() const;
    void setDecimalValue(const double &decimal_value);
    bool is_decimal_value_Set() const;
    bool is_decimal_value_Valid() const;

    bool isRDouble() const;
    void setRDouble(const bool &r_double);
    bool is_r_double_Set() const;
    bool is_r_double_Valid() const;

    double getDoubleValue() const;
    void setDoubleValue(const double &double_value);
    bool is_double_value_Set() const;
    bool is_double_value_Valid() const;

    OAIObject getElements() const;
    void setElements(const OAIObject &elements);
    bool is_elements_Set() const;
    bool is_elements_Valid() const;

    OAIObject getFieldNames() const;
    void setFieldNames(const OAIObject &field_names);
    bool is_field_names_Set() const;
    bool is_field_names_Valid() const;

    OAIObject getFields() const;
    void setFields(const OAIObject &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    bool isFloatingPointNumber() const;
    void setFloatingPointNumber(const bool &floating_point_number);
    bool is_floating_point_number_Set() const;
    bool is_floating_point_number_Valid() const;

    bool isRInt() const;
    void setRInt(const bool &r_int);
    bool is_r_int_Set() const;
    bool is_r_int_Valid() const;

    qint32 getIntValue() const;
    void setIntValue(const qint32 &int_value);
    bool is_int_value_Set() const;
    bool is_int_value_Valid() const;

    bool isIntegralNumber() const;
    void setIntegralNumber(const bool &integral_number);
    bool is_integral_number_Set() const;
    bool is_integral_number_Valid() const;

    bool isRLong() const;
    void setRLong(const bool &r_long);
    bool is_r_long_Set() const;
    bool is_r_long_Valid() const;

    qint64 getLongValue() const;
    void setLongValue(const qint64 &long_value);
    bool is_long_value_Set() const;
    bool is_long_value_Valid() const;

    bool isMissingNode() const;
    void setMissingNode(const bool &missing_node);
    bool is_missing_node_Set() const;
    bool is_missing_node_Valid() const;

    bool isNull() const;
    void setNull(const bool &null);
    bool is_null_Set() const;
    bool is_null_Valid() const;

    bool isNumber() const;
    void setNumber(const bool &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getNumberType() const;
    void setNumberType(const QString &number_type);
    bool is_number_type_Set() const;
    bool is_number_type_Valid() const;

    double getNumberValue() const;
    void setNumberValue(const double &number_value);
    bool is_number_value_Set() const;
    bool is_number_value_Valid() const;

    bool isObject() const;
    void setObject(const bool &object);
    bool is_object_Set() const;
    bool is_object_Valid() const;

    bool isPojo() const;
    void setPojo(const bool &pojo);
    bool is_pojo_Set() const;
    bool is_pojo_Valid() const;

    QString getTextValue() const;
    void setTextValue(const QString &text_value);
    bool is_text_value_Set() const;
    bool is_text_value_Valid() const;

    bool isTextual() const;
    void setTextual(const bool &textual);
    bool is_textual_Set() const;
    bool is_textual_Valid() const;

    bool isValueAsBoolean() const;
    void setValueAsBoolean(const bool &value_as_boolean);
    bool is_value_as_boolean_Set() const;
    bool is_value_as_boolean_Valid() const;

    double getValueAsDouble() const;
    void setValueAsDouble(const double &value_as_double);
    bool is_value_as_double_Set() const;
    bool is_value_as_double_Valid() const;

    qint32 getValueAsInt() const;
    void setValueAsInt(const qint32 &value_as_int);
    bool is_value_as_int_Set() const;
    bool is_value_as_int_Valid() const;

    qint64 getValueAsLong() const;
    void setValueAsLong(const qint64 &value_as_long);
    bool is_value_as_long_Set() const;
    bool is_value_as_long_Valid() const;

    QString getValueAsText() const;
    void setValueAsText(const QString &value_as_text);
    bool is_value_as_text_Set() const;
    bool is_value_as_text_Valid() const;

    bool isValueNode() const;
    void setValueNode(const bool &value_node);
    bool is_value_node_Set() const;
    bool is_value_node_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_array;
    bool m_array_isSet;
    bool m_array_isValid;

    bool m_big_decimal;
    bool m_big_decimal_isSet;
    bool m_big_decimal_isValid;

    bool m_big_integer;
    bool m_big_integer_isSet;
    bool m_big_integer_isValid;

    qint32 m_big_integer_value;
    bool m_big_integer_value_isSet;
    bool m_big_integer_value_isValid;

    bool m_binary;
    bool m_binary_isSet;
    bool m_binary_isValid;

    QList<QByteArray> m_binary_value;
    bool m_binary_value_isSet;
    bool m_binary_value_isValid;

    bool m_boolean;
    bool m_boolean_isSet;
    bool m_boolean_isValid;

    bool m_boolean_value;
    bool m_boolean_value_isSet;
    bool m_boolean_value_isValid;

    bool m_container_node;
    bool m_container_node_isSet;
    bool m_container_node_isValid;

    double m_decimal_value;
    bool m_decimal_value_isSet;
    bool m_decimal_value_isValid;

    bool m_r_double;
    bool m_r_double_isSet;
    bool m_r_double_isValid;

    double m_double_value;
    bool m_double_value_isSet;
    bool m_double_value_isValid;

    OAIObject m_elements;
    bool m_elements_isSet;
    bool m_elements_isValid;

    OAIObject m_field_names;
    bool m_field_names_isSet;
    bool m_field_names_isValid;

    OAIObject m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    bool m_floating_point_number;
    bool m_floating_point_number_isSet;
    bool m_floating_point_number_isValid;

    bool m_r_int;
    bool m_r_int_isSet;
    bool m_r_int_isValid;

    qint32 m_int_value;
    bool m_int_value_isSet;
    bool m_int_value_isValid;

    bool m_integral_number;
    bool m_integral_number_isSet;
    bool m_integral_number_isValid;

    bool m_r_long;
    bool m_r_long_isSet;
    bool m_r_long_isValid;

    qint64 m_long_value;
    bool m_long_value_isSet;
    bool m_long_value_isValid;

    bool m_missing_node;
    bool m_missing_node_isSet;
    bool m_missing_node_isValid;

    bool m_null;
    bool m_null_isSet;
    bool m_null_isValid;

    bool m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_number_type;
    bool m_number_type_isSet;
    bool m_number_type_isValid;

    double m_number_value;
    bool m_number_value_isSet;
    bool m_number_value_isValid;

    bool m_object;
    bool m_object_isSet;
    bool m_object_isValid;

    bool m_pojo;
    bool m_pojo_isSet;
    bool m_pojo_isValid;

    QString m_text_value;
    bool m_text_value_isSet;
    bool m_text_value_isValid;

    bool m_textual;
    bool m_textual_isSet;
    bool m_textual_isValid;

    bool m_value_as_boolean;
    bool m_value_as_boolean_isSet;
    bool m_value_as_boolean_isValid;

    double m_value_as_double;
    bool m_value_as_double_isSet;
    bool m_value_as_double_isValid;

    qint32 m_value_as_int;
    bool m_value_as_int_isSet;
    bool m_value_as_int_isValid;

    qint64 m_value_as_long;
    bool m_value_as_long_isSet;
    bool m_value_as_long_isValid;

    QString m_value_as_text;
    bool m_value_as_text_isSet;
    bool m_value_as_text_isValid;

    bool m_value_node;
    bool m_value_node_isSet;
    bool m_value_node_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJsonNode)

#endif // OAIJsonNode_H
