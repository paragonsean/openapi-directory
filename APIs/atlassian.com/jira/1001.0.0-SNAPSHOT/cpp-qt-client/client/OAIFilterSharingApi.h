/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilterSharingApi_H
#define OAI_OAIFilterSharingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultShareScope.h"
#include "OAISharePermission.h"
#include "OAISharePermissionInputBean.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilterSharingApi : public QObject {
    Q_OBJECT

public:
    OAIFilterSharingApi(const int timeOut = 0);
    ~OAIFilterSharingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_share_permission_input_bean OAISharePermissionInputBean [required]
    */
    virtual void addSharePermission(const qint64 &id, const OAISharePermissionInputBean &oai_share_permission_input_bean);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  permission_id qint64 [required]
    */
    virtual void deleteSharePermission(const qint64 &id, const qint64 &permission_id);


    virtual void getDefaultShareScope();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  permission_id qint64 [required]
    */
    virtual void getSharePermission(const qint64 &id, const qint64 &permission_id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getSharePermissions(const qint64 &id);

    /**
    * @param[in]  oai_default_share_scope OAIDefaultShareScope [required]
    */
    virtual void setDefaultShareScope(const OAIDefaultShareScope &oai_default_share_scope);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSharePermissionCallback(OAIHttpRequestWorker *worker);
    void deleteSharePermissionCallback(OAIHttpRequestWorker *worker);
    void getDefaultShareScopeCallback(OAIHttpRequestWorker *worker);
    void getSharePermissionCallback(OAIHttpRequestWorker *worker);
    void getSharePermissionsCallback(OAIHttpRequestWorker *worker);
    void setDefaultShareScopeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSharePermissionSignal(QList<OAISharePermission> summary);
    void deleteSharePermissionSignal();
    void getDefaultShareScopeSignal(OAIDefaultShareScope summary);
    void getSharePermissionSignal(OAISharePermission summary);
    void getSharePermissionsSignal(QList<OAISharePermission> summary);
    void setDefaultShareScopeSignal(OAIDefaultShareScope summary);


    void addSharePermissionSignalFull(OAIHttpRequestWorker *worker, QList<OAISharePermission> summary);
    void deleteSharePermissionSignalFull(OAIHttpRequestWorker *worker);
    void getDefaultShareScopeSignalFull(OAIHttpRequestWorker *worker, OAIDefaultShareScope summary);
    void getSharePermissionSignalFull(OAIHttpRequestWorker *worker, OAISharePermission summary);
    void getSharePermissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISharePermission> summary);
    void setDefaultShareScopeSignalFull(OAIHttpRequestWorker *worker, OAIDefaultShareScope summary);

    Q_DECL_DEPRECATED_X("Use addSharePermissionSignalError() instead")
    void addSharePermissionSignalE(QList<OAISharePermission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSharePermissionSignalError(QList<OAISharePermission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSharePermissionSignalError() instead")
    void deleteSharePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSharePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultShareScopeSignalError() instead")
    void getDefaultShareScopeSignalE(OAIDefaultShareScope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultShareScopeSignalError(OAIDefaultShareScope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionSignalError() instead")
    void getSharePermissionSignalE(OAISharePermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionSignalError(OAISharePermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionsSignalError() instead")
    void getSharePermissionsSignalE(QList<OAISharePermission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionsSignalError(QList<OAISharePermission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultShareScopeSignalError() instead")
    void setDefaultShareScopeSignalE(OAIDefaultShareScope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultShareScopeSignalError(OAIDefaultShareScope summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSharePermissionSignalErrorFull() instead")
    void addSharePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSharePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSharePermissionSignalErrorFull() instead")
    void deleteSharePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSharePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultShareScopeSignalErrorFull() instead")
    void getDefaultShareScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultShareScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionSignalErrorFull() instead")
    void getSharePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionsSignalErrorFull() instead")
    void getSharePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultShareScopeSignalErrorFull() instead")
    void setDefaultShareScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultShareScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
