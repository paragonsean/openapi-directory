/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectRolesApi_H
#define OAI_OAIProjectRolesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUpdateRoleRequestBean.h"
#include "OAIProjectRole.h"
#include "OAIProjectRoleDetails.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectRolesApi : public QObject {
    Q_OBJECT

public:
    OAIProjectRolesApi(const int timeOut = 0);
    ~OAIProjectRolesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_update_role_request_bean OAICreateUpdateRoleRequestBean [required]
    */
    virtual void createProjectRole(const OAICreateUpdateRoleRequestBean &oai_create_update_role_request_bean);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  swap qint64 [optional]
    */
    virtual void deleteProjectRole(const qint64 &id, const ::OpenAPI::OptionalParam<qint64> &swap = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_create_update_role_request_bean OAICreateUpdateRoleRequestBean [required]
    */
    virtual void fullyUpdateProjectRole(const qint64 &id, const OAICreateUpdateRoleRequestBean &oai_create_update_role_request_bean);


    virtual void getAllProjectRoles();

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  exclude_inactive_users bool [optional]
    */
    virtual void getProjectRole(const QString &project_id_or_key, const qint64 &id, const ::OpenAPI::OptionalParam<bool> &exclude_inactive_users = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectRoleById(const qint64 &id);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  current_member bool [optional]
    * @param[in]  exclude_connect_addons bool [optional]
    */
    virtual void getProjectRoleDetails(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<bool> &current_member = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_connect_addons = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void getProjectRoles(const QString &project_id_or_key);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_create_update_role_request_bean OAICreateUpdateRoleRequestBean [required]
    */
    virtual void partialUpdateProjectRole(const qint64 &id, const OAICreateUpdateRoleRequestBean &oai_create_update_role_request_bean);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProjectRoleCallback(OAIHttpRequestWorker *worker);
    void deleteProjectRoleCallback(OAIHttpRequestWorker *worker);
    void fullyUpdateProjectRoleCallback(OAIHttpRequestWorker *worker);
    void getAllProjectRolesCallback(OAIHttpRequestWorker *worker);
    void getProjectRoleCallback(OAIHttpRequestWorker *worker);
    void getProjectRoleByIdCallback(OAIHttpRequestWorker *worker);
    void getProjectRoleDetailsCallback(OAIHttpRequestWorker *worker);
    void getProjectRolesCallback(OAIHttpRequestWorker *worker);
    void partialUpdateProjectRoleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProjectRoleSignal(OAIProjectRole summary);
    void deleteProjectRoleSignal();
    void fullyUpdateProjectRoleSignal(OAIProjectRole summary);
    void getAllProjectRolesSignal(QList<OAIProjectRole> summary);
    void getProjectRoleSignal(OAIProjectRole summary);
    void getProjectRoleByIdSignal(OAIProjectRole summary);
    void getProjectRoleDetailsSignal(QList<OAIProjectRoleDetails> summary);
    void getProjectRolesSignal(QMap<QString, QString> summary);
    void partialUpdateProjectRoleSignal(OAIProjectRole summary);


    void createProjectRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void deleteProjectRoleSignalFull(OAIHttpRequestWorker *worker);
    void fullyUpdateProjectRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void getAllProjectRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectRole> summary);
    void getProjectRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void getProjectRoleByIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);
    void getProjectRoleDetailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectRoleDetails> summary);
    void getProjectRolesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void partialUpdateProjectRoleSignalFull(OAIHttpRequestWorker *worker, OAIProjectRole summary);

    Q_DECL_DEPRECATED_X("Use createProjectRoleSignalError() instead")
    void createProjectRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleSignalError() instead")
    void deleteProjectRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fullyUpdateProjectRoleSignalError() instead")
    void fullyUpdateProjectRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fullyUpdateProjectRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectRolesSignalError() instead")
    void getAllProjectRolesSignalE(QList<OAIProjectRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectRolesSignalError(QList<OAIProjectRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleSignalError() instead")
    void getProjectRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleByIdSignalError() instead")
    void getProjectRoleByIdSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleByIdSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleDetailsSignalError() instead")
    void getProjectRoleDetailsSignalE(QList<OAIProjectRoleDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleDetailsSignalError(QList<OAIProjectRoleDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRolesSignalError() instead")
    void getProjectRolesSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRolesSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partialUpdateProjectRoleSignalError() instead")
    void partialUpdateProjectRoleSignalE(OAIProjectRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partialUpdateProjectRoleSignalError(OAIProjectRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProjectRoleSignalErrorFull() instead")
    void createProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleSignalErrorFull() instead")
    void deleteProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fullyUpdateProjectRoleSignalErrorFull() instead")
    void fullyUpdateProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fullyUpdateProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectRolesSignalErrorFull() instead")
    void getAllProjectRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleSignalErrorFull() instead")
    void getProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleByIdSignalErrorFull() instead")
    void getProjectRoleByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleDetailsSignalErrorFull() instead")
    void getProjectRoleDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRolesSignalErrorFull() instead")
    void getProjectRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partialUpdateProjectRoleSignalErrorFull() instead")
    void partialUpdateProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partialUpdateProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
