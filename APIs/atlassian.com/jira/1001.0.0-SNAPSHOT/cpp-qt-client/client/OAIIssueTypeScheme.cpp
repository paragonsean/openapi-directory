/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTypeScheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTypeScheme::OAIIssueTypeScheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTypeScheme::OAIIssueTypeScheme() {
    this->initializeModel();
}

OAIIssueTypeScheme::~OAIIssueTypeScheme() {}

void OAIIssueTypeScheme::initializeModel() {

    m_default_issue_type_id_isSet = false;
    m_default_issue_type_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIIssueTypeScheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTypeScheme::fromJsonObject(QJsonObject json) {

    m_default_issue_type_id_isValid = ::OpenAPI::fromJsonValue(m_default_issue_type_id, json[QString("defaultIssueTypeId")]);
    m_default_issue_type_id_isSet = !json[QString("defaultIssueTypeId")].isNull() && m_default_issue_type_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIIssueTypeScheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTypeScheme::asJsonObject() const {
    QJsonObject obj;
    if (m_default_issue_type_id_isSet) {
        obj.insert(QString("defaultIssueTypeId"), ::OpenAPI::toJsonValue(m_default_issue_type_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIIssueTypeScheme::getDefaultIssueTypeId() const {
    return m_default_issue_type_id;
}
void OAIIssueTypeScheme::setDefaultIssueTypeId(const QString &default_issue_type_id) {
    m_default_issue_type_id = default_issue_type_id;
    m_default_issue_type_id_isSet = true;
}

bool OAIIssueTypeScheme::is_default_issue_type_id_Set() const{
    return m_default_issue_type_id_isSet;
}

bool OAIIssueTypeScheme::is_default_issue_type_id_Valid() const{
    return m_default_issue_type_id_isValid;
}

QString OAIIssueTypeScheme::getDescription() const {
    return m_description;
}
void OAIIssueTypeScheme::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIssueTypeScheme::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIssueTypeScheme::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIssueTypeScheme::getId() const {
    return m_id;
}
void OAIIssueTypeScheme::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssueTypeScheme::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssueTypeScheme::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIIssueTypeScheme::isIsDefault() const {
    return m_is_default;
}
void OAIIssueTypeScheme::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIIssueTypeScheme::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIIssueTypeScheme::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIIssueTypeScheme::getName() const {
    return m_name;
}
void OAIIssueTypeScheme::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIssueTypeScheme::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIssueTypeScheme::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIIssueTypeScheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_issue_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTypeScheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
