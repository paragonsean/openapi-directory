/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookRegistrationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookRegistrationDetails::OAIWebhookRegistrationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookRegistrationDetails::OAIWebhookRegistrationDetails() {
    this->initializeModel();
}

OAIWebhookRegistrationDetails::~OAIWebhookRegistrationDetails() {}

void OAIWebhookRegistrationDetails::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_webhooks_isSet = false;
    m_webhooks_isValid = false;
}

void OAIWebhookRegistrationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookRegistrationDetails::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_webhooks_isValid = ::OpenAPI::fromJsonValue(m_webhooks, json[QString("webhooks")]);
    m_webhooks_isSet = !json[QString("webhooks")].isNull() && m_webhooks_isValid;
}

QString OAIWebhookRegistrationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookRegistrationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_webhooks.size() > 0) {
        obj.insert(QString("webhooks"), ::OpenAPI::toJsonValue(m_webhooks));
    }
    return obj;
}

QString OAIWebhookRegistrationDetails::getUrl() const {
    return m_url;
}
void OAIWebhookRegistrationDetails::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhookRegistrationDetails::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhookRegistrationDetails::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIWebhookDetails> OAIWebhookRegistrationDetails::getWebhooks() const {
    return m_webhooks;
}
void OAIWebhookRegistrationDetails::setWebhooks(const QList<OAIWebhookDetails> &webhooks) {
    m_webhooks = webhooks;
    m_webhooks_isSet = true;
}

bool OAIWebhookRegistrationDetails::is_webhooks_Set() const{
    return m_webhooks_isSet;
}

bool OAIWebhookRegistrationDetails::is_webhooks_Valid() const{
    return m_webhooks_isValid;
}

bool OAIWebhookRegistrationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookRegistrationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && m_webhooks_isValid && true;
}

} // namespace OpenAPI
