/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResults::OAISearchResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResults::OAISearchResults() {
    this->initializeModel();
}

OAISearchResults::~OAISearchResults() {}

void OAISearchResults::initializeModel() {

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_warning_messages_isSet = false;
    m_warning_messages_isValid = false;
}

void OAISearchResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResults::fromJsonObject(QJsonObject json) {

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("expand")]);
    m_expand_isSet = !json[QString("expand")].isNull() && m_expand_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_warning_messages_isValid = ::OpenAPI::fromJsonValue(m_warning_messages, json[QString("warningMessages")]);
    m_warning_messages_isSet = !json[QString("warningMessages")].isNull() && m_warning_messages_isValid;
}

QString OAISearchResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResults::asJsonObject() const {
    QJsonObject obj;
    if (m_expand_isSet) {
        obj.insert(QString("expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_schema.size() > 0) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_warning_messages.size() > 0) {
        obj.insert(QString("warningMessages"), ::OpenAPI::toJsonValue(m_warning_messages));
    }
    return obj;
}

QString OAISearchResults::getExpand() const {
    return m_expand;
}
void OAISearchResults::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAISearchResults::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAISearchResults::is_expand_Valid() const{
    return m_expand_isValid;
}

QList<OAIIssueBean> OAISearchResults::getIssues() const {
    return m_issues;
}
void OAISearchResults::setIssues(const QList<OAIIssueBean> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAISearchResults::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAISearchResults::is_issues_Valid() const{
    return m_issues_isValid;
}

qint32 OAISearchResults::getMaxResults() const {
    return m_max_results;
}
void OAISearchResults::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchResults::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchResults::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QMap<QString, QString> OAISearchResults::getNames() const {
    return m_names;
}
void OAISearchResults::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAISearchResults::is_names_Set() const{
    return m_names_isSet;
}

bool OAISearchResults::is_names_Valid() const{
    return m_names_isValid;
}

QMap<QString, OAIJsonTypeBean> OAISearchResults::getSchema() const {
    return m_schema;
}
void OAISearchResults::setSchema(const QMap<QString, OAIJsonTypeBean> &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISearchResults::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISearchResults::is_schema_Valid() const{
    return m_schema_isValid;
}

qint32 OAISearchResults::getStartAt() const {
    return m_start_at;
}
void OAISearchResults::setStartAt(const qint32 &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAISearchResults::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAISearchResults::is_start_at_Valid() const{
    return m_start_at_isValid;
}

qint32 OAISearchResults::getTotal() const {
    return m_total;
}
void OAISearchResults::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISearchResults::is_total_Set() const{
    return m_total_isSet;
}

bool OAISearchResults::is_total_Valid() const{
    return m_total_isValid;
}

QList<QString> OAISearchResults::getWarningMessages() const {
    return m_warning_messages;
}
void OAISearchResults::setWarningMessages(const QList<QString> &warning_messages) {
    m_warning_messages = warning_messages;
    m_warning_messages_isSet = true;
}

bool OAISearchResults::is_warning_messages_Set() const{
    return m_warning_messages_isSet;
}

bool OAISearchResults::is_warning_messages_Valid() const{
    return m_warning_messages_isValid;
}

bool OAISearchResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
