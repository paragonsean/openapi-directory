/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.BulkProjectPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of global permissions to look up and project permissions with associated projects and issues to look up.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:51.093901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkPermissionsRequestBean {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_GLOBAL_PERMISSIONS = "globalPermissions";
  @SerializedName(SERIALIZED_NAME_GLOBAL_PERMISSIONS)
  private Set<String> globalPermissions = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PROJECT_PERMISSIONS = "projectPermissions";
  @SerializedName(SERIALIZED_NAME_PROJECT_PERMISSIONS)
  private Set<BulkProjectPermissions> projectPermissions = new LinkedHashSet<>();

  public BulkPermissionsRequestBean() {
  }

  public BulkPermissionsRequestBean accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account ID of a user.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public BulkPermissionsRequestBean globalPermissions(Set<String> globalPermissions) {
    this.globalPermissions = globalPermissions;
    return this;
  }

  public BulkPermissionsRequestBean addGlobalPermissionsItem(String globalPermissionsItem) {
    if (this.globalPermissions == null) {
      this.globalPermissions = new LinkedHashSet<>();
    }
    this.globalPermissions.add(globalPermissionsItem);
    return this;
  }

  /**
   * Global permissions to look up.
   * @return globalPermissions
   */
  @javax.annotation.Nullable
  public Set<String> getGlobalPermissions() {
    return globalPermissions;
  }

  public void setGlobalPermissions(Set<String> globalPermissions) {
    this.globalPermissions = globalPermissions;
  }


  public BulkPermissionsRequestBean projectPermissions(Set<BulkProjectPermissions> projectPermissions) {
    this.projectPermissions = projectPermissions;
    return this;
  }

  public BulkPermissionsRequestBean addProjectPermissionsItem(BulkProjectPermissions projectPermissionsItem) {
    if (this.projectPermissions == null) {
      this.projectPermissions = new LinkedHashSet<>();
    }
    this.projectPermissions.add(projectPermissionsItem);
    return this;
  }

  /**
   * Project permissions with associated projects and issues to look up.
   * @return projectPermissions
   */
  @javax.annotation.Nullable
  public Set<BulkProjectPermissions> getProjectPermissions() {
    return projectPermissions;
  }

  public void setProjectPermissions(Set<BulkProjectPermissions> projectPermissions) {
    this.projectPermissions = projectPermissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkPermissionsRequestBean bulkPermissionsRequestBean = (BulkPermissionsRequestBean) o;
    return Objects.equals(this.accountId, bulkPermissionsRequestBean.accountId) &&
        Objects.equals(this.globalPermissions, bulkPermissionsRequestBean.globalPermissions) &&
        Objects.equals(this.projectPermissions, bulkPermissionsRequestBean.projectPermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, globalPermissions, projectPermissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkPermissionsRequestBean {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    globalPermissions: ").append(toIndentedString(globalPermissions)).append("\n");
    sb.append("    projectPermissions: ").append(toIndentedString(projectPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("globalPermissions");
    openapiFields.add("projectPermissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkPermissionsRequestBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkPermissionsRequestBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkPermissionsRequestBean is not found in the empty JSON string", BulkPermissionsRequestBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkPermissionsRequestBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkPermissionsRequestBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("globalPermissions") != null && !jsonObj.get("globalPermissions").isJsonNull() && !jsonObj.get("globalPermissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("globalPermissions").toString()));
      }
      if (jsonObj.get("projectPermissions") != null && !jsonObj.get("projectPermissions").isJsonNull()) {
        JsonArray jsonArrayprojectPermissions = jsonObj.getAsJsonArray("projectPermissions");
        if (jsonArrayprojectPermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("projectPermissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `projectPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("projectPermissions").toString()));
          }

          // validate the optional field `projectPermissions` (array)
          for (int i = 0; i < jsonArrayprojectPermissions.size(); i++) {
            BulkProjectPermissions.validateJsonElement(jsonArrayprojectPermissions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkPermissionsRequestBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkPermissionsRequestBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkPermissionsRequestBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkPermissionsRequestBean.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkPermissionsRequestBean>() {
           @Override
           public void write(JsonWriter out, BulkPermissionsRequestBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkPermissionsRequestBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkPermissionsRequestBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkPermissionsRequestBean
   * @throws IOException if the JSON string is invalid with respect to BulkPermissionsRequestBean
   */
  public static BulkPermissionsRequestBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkPermissionsRequestBean.class);
  }

  /**
   * Convert an instance of BulkPermissionsRequestBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

