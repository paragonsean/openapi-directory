/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Jql function precomputation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:51.093901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JqlFunctionPrecomputationBean {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<String> arguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FUNCTION_KEY = "functionKey";
  @SerializedName(SERIALIZED_NAME_FUNCTION_KEY)
  private String functionKey;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private OffsetDateTime used;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public JqlFunctionPrecomputationBean() {
  }

  public JqlFunctionPrecomputationBean(
     List<String> arguments, 
     OffsetDateTime created, 
     String field, 
     String functionKey, 
     String functionName, 
     String id, 
     String operator, 
     OffsetDateTime updated, 
     OffsetDateTime used, 
     String value
  ) {
    this();
    this.arguments = arguments;
    this.created = created;
    this.field = field;
    this.functionKey = functionKey;
    this.functionName = functionName;
    this.id = id;
    this.operator = operator;
    this.updated = updated;
    this.used = used;
    this.value = value;
  }

  /**
   * Get arguments
   * @return arguments
   */
  @javax.annotation.Nullable
  public List<String> getArguments() {
    return arguments;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }



  /**
   * Get functionKey
   * @return functionKey
   */
  @javax.annotation.Nullable
  public String getFunctionKey() {
    return functionKey;
  }



  /**
   * Get functionName
   * @return functionName
   */
  @javax.annotation.Nullable
  public String getFunctionName() {
    return functionName;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public String getOperator() {
    return operator;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  /**
   * Get used
   * @return used
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsed() {
    return used;
  }



  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JqlFunctionPrecomputationBean jqlFunctionPrecomputationBean = (JqlFunctionPrecomputationBean) o;
    return Objects.equals(this.arguments, jqlFunctionPrecomputationBean.arguments) &&
        Objects.equals(this.created, jqlFunctionPrecomputationBean.created) &&
        Objects.equals(this.field, jqlFunctionPrecomputationBean.field) &&
        Objects.equals(this.functionKey, jqlFunctionPrecomputationBean.functionKey) &&
        Objects.equals(this.functionName, jqlFunctionPrecomputationBean.functionName) &&
        Objects.equals(this.id, jqlFunctionPrecomputationBean.id) &&
        Objects.equals(this.operator, jqlFunctionPrecomputationBean.operator) &&
        Objects.equals(this.updated, jqlFunctionPrecomputationBean.updated) &&
        Objects.equals(this.used, jqlFunctionPrecomputationBean.used) &&
        Objects.equals(this.value, jqlFunctionPrecomputationBean.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, created, field, functionKey, functionName, id, operator, updated, used, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JqlFunctionPrecomputationBean {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    functionKey: ").append(toIndentedString(functionKey)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("created");
    openapiFields.add("field");
    openapiFields.add("functionKey");
    openapiFields.add("functionName");
    openapiFields.add("id");
    openapiFields.add("operator");
    openapiFields.add("updated");
    openapiFields.add("used");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JqlFunctionPrecomputationBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JqlFunctionPrecomputationBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JqlFunctionPrecomputationBean is not found in the empty JSON string", JqlFunctionPrecomputationBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JqlFunctionPrecomputationBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JqlFunctionPrecomputationBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull() && !jsonObj.get("arguments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be an array in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("functionKey") != null && !jsonObj.get("functionKey").isJsonNull()) && !jsonObj.get("functionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionKey").toString()));
      }
      if ((jsonObj.get("functionName") != null && !jsonObj.get("functionName").isJsonNull()) && !jsonObj.get("functionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JqlFunctionPrecomputationBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JqlFunctionPrecomputationBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JqlFunctionPrecomputationBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JqlFunctionPrecomputationBean.class));

       return (TypeAdapter<T>) new TypeAdapter<JqlFunctionPrecomputationBean>() {
           @Override
           public void write(JsonWriter out, JqlFunctionPrecomputationBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JqlFunctionPrecomputationBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JqlFunctionPrecomputationBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JqlFunctionPrecomputationBean
   * @throws IOException if the JSON string is invalid with respect to JqlFunctionPrecomputationBean
   */
  public static JqlFunctionPrecomputationBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JqlFunctionPrecomputationBean.class);
  }

  /**
   * Convert an instance of JqlFunctionPrecomputationBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

