/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FieldReferenceData;
import org.openapitools.client.model.FunctionReferenceData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lists of JQL reference data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:51.093901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JQLReferenceData {
  public static final String SERIALIZED_NAME_JQL_RESERVED_WORDS = "jqlReservedWords";
  @SerializedName(SERIALIZED_NAME_JQL_RESERVED_WORDS)
  private List<String> jqlReservedWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE_FIELD_NAMES = "visibleFieldNames";
  @SerializedName(SERIALIZED_NAME_VISIBLE_FIELD_NAMES)
  private List<FieldReferenceData> visibleFieldNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE_FUNCTION_NAMES = "visibleFunctionNames";
  @SerializedName(SERIALIZED_NAME_VISIBLE_FUNCTION_NAMES)
  private List<FunctionReferenceData> visibleFunctionNames = new ArrayList<>();

  public JQLReferenceData() {
  }

  public JQLReferenceData jqlReservedWords(List<String> jqlReservedWords) {
    this.jqlReservedWords = jqlReservedWords;
    return this;
  }

  public JQLReferenceData addJqlReservedWordsItem(String jqlReservedWordsItem) {
    if (this.jqlReservedWords == null) {
      this.jqlReservedWords = new ArrayList<>();
    }
    this.jqlReservedWords.add(jqlReservedWordsItem);
    return this;
  }

  /**
   * List of JQL query reserved words.
   * @return jqlReservedWords
   */
  @javax.annotation.Nullable
  public List<String> getJqlReservedWords() {
    return jqlReservedWords;
  }

  public void setJqlReservedWords(List<String> jqlReservedWords) {
    this.jqlReservedWords = jqlReservedWords;
  }


  public JQLReferenceData visibleFieldNames(List<FieldReferenceData> visibleFieldNames) {
    this.visibleFieldNames = visibleFieldNames;
    return this;
  }

  public JQLReferenceData addVisibleFieldNamesItem(FieldReferenceData visibleFieldNamesItem) {
    if (this.visibleFieldNames == null) {
      this.visibleFieldNames = new ArrayList<>();
    }
    this.visibleFieldNames.add(visibleFieldNamesItem);
    return this;
  }

  /**
   * List of fields usable in JQL queries.
   * @return visibleFieldNames
   */
  @javax.annotation.Nullable
  public List<FieldReferenceData> getVisibleFieldNames() {
    return visibleFieldNames;
  }

  public void setVisibleFieldNames(List<FieldReferenceData> visibleFieldNames) {
    this.visibleFieldNames = visibleFieldNames;
  }


  public JQLReferenceData visibleFunctionNames(List<FunctionReferenceData> visibleFunctionNames) {
    this.visibleFunctionNames = visibleFunctionNames;
    return this;
  }

  public JQLReferenceData addVisibleFunctionNamesItem(FunctionReferenceData visibleFunctionNamesItem) {
    if (this.visibleFunctionNames == null) {
      this.visibleFunctionNames = new ArrayList<>();
    }
    this.visibleFunctionNames.add(visibleFunctionNamesItem);
    return this;
  }

  /**
   * List of functions usable in JQL queries.
   * @return visibleFunctionNames
   */
  @javax.annotation.Nullable
  public List<FunctionReferenceData> getVisibleFunctionNames() {
    return visibleFunctionNames;
  }

  public void setVisibleFunctionNames(List<FunctionReferenceData> visibleFunctionNames) {
    this.visibleFunctionNames = visibleFunctionNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JQLReferenceData jqLReferenceData = (JQLReferenceData) o;
    return Objects.equals(this.jqlReservedWords, jqLReferenceData.jqlReservedWords) &&
        Objects.equals(this.visibleFieldNames, jqLReferenceData.visibleFieldNames) &&
        Objects.equals(this.visibleFunctionNames, jqLReferenceData.visibleFunctionNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jqlReservedWords, visibleFieldNames, visibleFunctionNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JQLReferenceData {\n");
    sb.append("    jqlReservedWords: ").append(toIndentedString(jqlReservedWords)).append("\n");
    sb.append("    visibleFieldNames: ").append(toIndentedString(visibleFieldNames)).append("\n");
    sb.append("    visibleFunctionNames: ").append(toIndentedString(visibleFunctionNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jqlReservedWords");
    openapiFields.add("visibleFieldNames");
    openapiFields.add("visibleFunctionNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JQLReferenceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JQLReferenceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JQLReferenceData is not found in the empty JSON string", JQLReferenceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JQLReferenceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JQLReferenceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("jqlReservedWords") != null && !jsonObj.get("jqlReservedWords").isJsonNull() && !jsonObj.get("jqlReservedWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jqlReservedWords` to be an array in the JSON string but got `%s`", jsonObj.get("jqlReservedWords").toString()));
      }
      if (jsonObj.get("visibleFieldNames") != null && !jsonObj.get("visibleFieldNames").isJsonNull()) {
        JsonArray jsonArrayvisibleFieldNames = jsonObj.getAsJsonArray("visibleFieldNames");
        if (jsonArrayvisibleFieldNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("visibleFieldNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `visibleFieldNames` to be an array in the JSON string but got `%s`", jsonObj.get("visibleFieldNames").toString()));
          }

          // validate the optional field `visibleFieldNames` (array)
          for (int i = 0; i < jsonArrayvisibleFieldNames.size(); i++) {
            FieldReferenceData.validateJsonElement(jsonArrayvisibleFieldNames.get(i));
          };
        }
      }
      if (jsonObj.get("visibleFunctionNames") != null && !jsonObj.get("visibleFunctionNames").isJsonNull()) {
        JsonArray jsonArrayvisibleFunctionNames = jsonObj.getAsJsonArray("visibleFunctionNames");
        if (jsonArrayvisibleFunctionNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("visibleFunctionNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `visibleFunctionNames` to be an array in the JSON string but got `%s`", jsonObj.get("visibleFunctionNames").toString()));
          }

          // validate the optional field `visibleFunctionNames` (array)
          for (int i = 0; i < jsonArrayvisibleFunctionNames.size(); i++) {
            FunctionReferenceData.validateJsonElement(jsonArrayvisibleFunctionNames.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JQLReferenceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JQLReferenceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JQLReferenceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JQLReferenceData.class));

       return (TypeAdapter<T>) new TypeAdapter<JQLReferenceData>() {
           @Override
           public void write(JsonWriter out, JQLReferenceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JQLReferenceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JQLReferenceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JQLReferenceData
   * @throws IOException if the JSON string is invalid with respect to JQLReferenceData
   */
  public static JQLReferenceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JQLReferenceData.class);
  }

  /**
   * Convert an instance of JQLReferenceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

