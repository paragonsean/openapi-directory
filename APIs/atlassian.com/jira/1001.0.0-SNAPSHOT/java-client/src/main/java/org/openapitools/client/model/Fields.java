/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IssueTypeDetails;
import org.openapitools.client.model.Priority;
import org.openapitools.client.model.StatusDetails;
import org.openapitools.client.model.TimeTrackingDetails;
import org.openapitools.client.model.UserDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Key fields from the linked issue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:51.093901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Fields {
  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private UserDetails assignee;

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issueType";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  private IssueTypeDetails issueType;

  public static final String SERIALIZED_NAME_ISSUETYPE = "issuetype";
  @SerializedName(SERIALIZED_NAME_ISSUETYPE)
  private IssueTypeDetails issuetype;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Priority priority;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusDetails status;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TIMETRACKING = "timetracking";
  @SerializedName(SERIALIZED_NAME_TIMETRACKING)
  private TimeTrackingDetails timetracking;

  public Fields() {
  }

  public Fields(
     UserDetails assignee, 
     IssueTypeDetails issueType, 
     Priority priority, 
     StatusDetails status, 
     String summary, 
     TimeTrackingDetails timetracking
  ) {
    this();
    this.assignee = assignee;
    this.issueType = issueType;
    this.priority = priority;
    this.status = status;
    this.summary = summary;
    this.timetracking = timetracking;
  }

  /**
   * The assignee of the linked issue.
   * @return assignee
   */
  @javax.annotation.Nullable
  public UserDetails getAssignee() {
    return assignee;
  }



  /**
   * The type of the linked issue.
   * @return issueType
   */
  @javax.annotation.Nullable
  public IssueTypeDetails getIssueType() {
    return issueType;
  }



  public Fields issuetype(IssueTypeDetails issuetype) {
    this.issuetype = issuetype;
    return this;
  }

  /**
   * Get issuetype
   * @return issuetype
   */
  @javax.annotation.Nullable
  public IssueTypeDetails getIssuetype() {
    return issuetype;
  }

  public void setIssuetype(IssueTypeDetails issuetype) {
    this.issuetype = issuetype;
  }


  /**
   * The priority of the linked issue.
   * @return priority
   */
  @javax.annotation.Nullable
  public Priority getPriority() {
    return priority;
  }



  /**
   * The status of the linked issue.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusDetails getStatus() {
    return status;
  }



  /**
   * The summary description of the linked issue.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }



  /**
   * The time tracking of the linked issue.
   * @return timetracking
   */
  @javax.annotation.Nullable
  public TimeTrackingDetails getTimetracking() {
    return timetracking;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fields fields = (Fields) o;
    return Objects.equals(this.assignee, fields.assignee) &&
        Objects.equals(this.issueType, fields.issueType) &&
        Objects.equals(this.issuetype, fields.issuetype) &&
        Objects.equals(this.priority, fields.priority) &&
        Objects.equals(this.status, fields.status) &&
        Objects.equals(this.summary, fields.summary) &&
        Objects.equals(this.timetracking, fields.timetracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignee, issueType, issuetype, priority, status, summary, timetracking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fields {\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    issuetype: ").append(toIndentedString(issuetype)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    timetracking: ").append(toIndentedString(timetracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee");
    openapiFields.add("issueType");
    openapiFields.add("issuetype");
    openapiFields.add("priority");
    openapiFields.add("status");
    openapiFields.add("summary");
    openapiFields.add("timetracking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Fields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Fields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fields is not found in the empty JSON string", Fields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Fields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        UserDetails.validateJsonElement(jsonObj.get("assignee"));
      }
      // validate the optional field `issueType`
      if (jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) {
        IssueTypeDetails.validateJsonElement(jsonObj.get("issueType"));
      }
      // validate the optional field `issuetype`
      if (jsonObj.get("issuetype") != null && !jsonObj.get("issuetype").isJsonNull()) {
        IssueTypeDetails.validateJsonElement(jsonObj.get("issuetype"));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      // validate the optional field `timetracking`
      if (jsonObj.get("timetracking") != null && !jsonObj.get("timetracking").isJsonNull()) {
        TimeTrackingDetails.validateJsonElement(jsonObj.get("timetracking"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fields.class));

       return (TypeAdapter<T>) new TypeAdapter<Fields>() {
           @Override
           public void write(JsonWriter out, Fields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Fields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Fields
   * @throws IOException if the JSON string is invalid with respect to Fields
   */
  public static Fields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fields.class);
  }

  /**
   * Convert an instance of Fields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

