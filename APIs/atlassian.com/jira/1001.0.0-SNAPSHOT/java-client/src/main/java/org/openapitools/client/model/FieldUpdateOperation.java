/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an operation to perform on a field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:51.093901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldUpdateOperation {
  public static final String SERIALIZED_NAME_ADD = "add";
  @SerializedName(SERIALIZED_NAME_ADD)
  private Object add = null;

  public static final String SERIALIZED_NAME_COPY = "copy";
  @SerializedName(SERIALIZED_NAME_COPY)
  private Object copy = null;

  public static final String SERIALIZED_NAME_EDIT = "edit";
  @SerializedName(SERIALIZED_NAME_EDIT)
  private Object edit = null;

  public static final String SERIALIZED_NAME_REMOVE = "remove";
  @SerializedName(SERIALIZED_NAME_REMOVE)
  private Object remove = null;

  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private Object set = null;

  public FieldUpdateOperation() {
  }

  public FieldUpdateOperation add(Object add) {
    this.add = add;
    return this;
  }

  /**
   * The value to add to the field.
   * @return add
   */
  @javax.annotation.Nullable
  public Object getAdd() {
    return add;
  }

  public void setAdd(Object add) {
    this.add = add;
  }


  public FieldUpdateOperation copy(Object copy) {
    this.copy = copy;
    return this;
  }

  /**
   * The field value to copy from another issue.
   * @return copy
   */
  @javax.annotation.Nullable
  public Object getCopy() {
    return copy;
  }

  public void setCopy(Object copy) {
    this.copy = copy;
  }


  public FieldUpdateOperation edit(Object edit) {
    this.edit = edit;
    return this;
  }

  /**
   * The value to edit in the field.
   * @return edit
   */
  @javax.annotation.Nullable
  public Object getEdit() {
    return edit;
  }

  public void setEdit(Object edit) {
    this.edit = edit;
  }


  public FieldUpdateOperation remove(Object remove) {
    this.remove = remove;
    return this;
  }

  /**
   * The value to removed from the field.
   * @return remove
   */
  @javax.annotation.Nullable
  public Object getRemove() {
    return remove;
  }

  public void setRemove(Object remove) {
    this.remove = remove;
  }


  public FieldUpdateOperation set(Object set) {
    this.set = set;
    return this;
  }

  /**
   * The value to set in the field.
   * @return set
   */
  @javax.annotation.Nullable
  public Object getSet() {
    return set;
  }

  public void setSet(Object set) {
    this.set = set;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldUpdateOperation fieldUpdateOperation = (FieldUpdateOperation) o;
    return Objects.equals(this.add, fieldUpdateOperation.add) &&
        Objects.equals(this.copy, fieldUpdateOperation.copy) &&
        Objects.equals(this.edit, fieldUpdateOperation.edit) &&
        Objects.equals(this.remove, fieldUpdateOperation.remove) &&
        Objects.equals(this.set, fieldUpdateOperation.set);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(add, copy, edit, remove, set);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldUpdateOperation {\n");
    sb.append("    add: ").append(toIndentedString(add)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    edit: ").append(toIndentedString(edit)).append("\n");
    sb.append("    remove: ").append(toIndentedString(remove)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add");
    openapiFields.add("copy");
    openapiFields.add("edit");
    openapiFields.add("remove");
    openapiFields.add("set");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldUpdateOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldUpdateOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldUpdateOperation is not found in the empty JSON string", FieldUpdateOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldUpdateOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldUpdateOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldUpdateOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldUpdateOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldUpdateOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldUpdateOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldUpdateOperation>() {
           @Override
           public void write(JsonWriter out, FieldUpdateOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldUpdateOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldUpdateOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldUpdateOperation
   * @throws IOException if the JSON string is invalid with respect to FieldUpdateOperation
   */
  public static FieldUpdateOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldUpdateOperation.class);
  }

  /**
   * Convert an instance of FieldUpdateOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

