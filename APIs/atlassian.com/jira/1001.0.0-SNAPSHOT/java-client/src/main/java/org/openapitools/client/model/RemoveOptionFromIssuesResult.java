/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimpleErrorCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RemoveOptionFromIssuesResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:51.093901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoveOptionFromIssuesResult {
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private SimpleErrorCollection errors;

  public static final String SERIALIZED_NAME_MODIFIED_ISSUES = "modifiedIssues";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ISSUES)
  private List<Long> modifiedIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNMODIFIED_ISSUES = "unmodifiedIssues";
  @SerializedName(SERIALIZED_NAME_UNMODIFIED_ISSUES)
  private List<Long> unmodifiedIssues = new ArrayList<>();

  public RemoveOptionFromIssuesResult() {
  }

  public RemoveOptionFromIssuesResult errors(SimpleErrorCollection errors) {
    this.errors = errors;
    return this;
  }

  /**
   * A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned.
   * @return errors
   */
  @javax.annotation.Nullable
  public SimpleErrorCollection getErrors() {
    return errors;
  }

  public void setErrors(SimpleErrorCollection errors) {
    this.errors = errors;
  }


  public RemoveOptionFromIssuesResult modifiedIssues(List<Long> modifiedIssues) {
    this.modifiedIssues = modifiedIssues;
    return this;
  }

  public RemoveOptionFromIssuesResult addModifiedIssuesItem(Long modifiedIssuesItem) {
    if (this.modifiedIssues == null) {
      this.modifiedIssues = new ArrayList<>();
    }
    this.modifiedIssues.add(modifiedIssuesItem);
    return this;
  }

  /**
   * The IDs of the modified issues.
   * @return modifiedIssues
   */
  @javax.annotation.Nullable
  public List<Long> getModifiedIssues() {
    return modifiedIssues;
  }

  public void setModifiedIssues(List<Long> modifiedIssues) {
    this.modifiedIssues = modifiedIssues;
  }


  public RemoveOptionFromIssuesResult unmodifiedIssues(List<Long> unmodifiedIssues) {
    this.unmodifiedIssues = unmodifiedIssues;
    return this;
  }

  public RemoveOptionFromIssuesResult addUnmodifiedIssuesItem(Long unmodifiedIssuesItem) {
    if (this.unmodifiedIssues == null) {
      this.unmodifiedIssues = new ArrayList<>();
    }
    this.unmodifiedIssues.add(unmodifiedIssuesItem);
    return this;
  }

  /**
   * The IDs of the unchanged issues, those issues where errors prevent modification.
   * @return unmodifiedIssues
   */
  @javax.annotation.Nullable
  public List<Long> getUnmodifiedIssues() {
    return unmodifiedIssues;
  }

  public void setUnmodifiedIssues(List<Long> unmodifiedIssues) {
    this.unmodifiedIssues = unmodifiedIssues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoveOptionFromIssuesResult removeOptionFromIssuesResult = (RemoveOptionFromIssuesResult) o;
    return Objects.equals(this.errors, removeOptionFromIssuesResult.errors) &&
        Objects.equals(this.modifiedIssues, removeOptionFromIssuesResult.modifiedIssues) &&
        Objects.equals(this.unmodifiedIssues, removeOptionFromIssuesResult.unmodifiedIssues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, modifiedIssues, unmodifiedIssues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoveOptionFromIssuesResult {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    modifiedIssues: ").append(toIndentedString(modifiedIssues)).append("\n");
    sb.append("    unmodifiedIssues: ").append(toIndentedString(unmodifiedIssues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errors");
    openapiFields.add("modifiedIssues");
    openapiFields.add("unmodifiedIssues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoveOptionFromIssuesResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoveOptionFromIssuesResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoveOptionFromIssuesResult is not found in the empty JSON string", RemoveOptionFromIssuesResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoveOptionFromIssuesResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoveOptionFromIssuesResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `errors`
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        SimpleErrorCollection.validateJsonElement(jsonObj.get("errors"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifiedIssues") != null && !jsonObj.get("modifiedIssues").isJsonNull() && !jsonObj.get("modifiedIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedIssues` to be an array in the JSON string but got `%s`", jsonObj.get("modifiedIssues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unmodifiedIssues") != null && !jsonObj.get("unmodifiedIssues").isJsonNull() && !jsonObj.get("unmodifiedIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unmodifiedIssues` to be an array in the JSON string but got `%s`", jsonObj.get("unmodifiedIssues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoveOptionFromIssuesResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoveOptionFromIssuesResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoveOptionFromIssuesResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoveOptionFromIssuesResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoveOptionFromIssuesResult>() {
           @Override
           public void write(JsonWriter out, RemoveOptionFromIssuesResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoveOptionFromIssuesResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoveOptionFromIssuesResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoveOptionFromIssuesResult
   * @throws IOException if the JSON string is invalid with respect to RemoveOptionFromIssuesResult
   */
  public static RemoveOptionFromIssuesResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoveOptionFromIssuesResult.class);
  }

  /**
   * Convert an instance of RemoveOptionFromIssuesResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

