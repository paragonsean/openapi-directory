# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IndexStreamTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chunk_size: str=None, connection_code: str=None, connection_code_expires_at: datetime=None, created_at: datetime=None, hds_playback_url: str=None, hls_playback_url: str=None, id: str=None, location: str=None, name: str=None, primary_url: str=None, provider: str=None, rtmp_playback_url: str=None, stream_name: str=None, type: str=None, updated_at: datetime=None, username: str=None):
        """IndexStreamTarget - a model defined in OpenAPI

        :param chunk_size: The chunk_size of this IndexStreamTarget.
        :param connection_code: The connection_code of this IndexStreamTarget.
        :param connection_code_expires_at: The connection_code_expires_at of this IndexStreamTarget.
        :param created_at: The created_at of this IndexStreamTarget.
        :param hds_playback_url: The hds_playback_url of this IndexStreamTarget.
        :param hls_playback_url: The hls_playback_url of this IndexStreamTarget.
        :param id: The id of this IndexStreamTarget.
        :param location: The location of this IndexStreamTarget.
        :param name: The name of this IndexStreamTarget.
        :param primary_url: The primary_url of this IndexStreamTarget.
        :param provider: The provider of this IndexStreamTarget.
        :param rtmp_playback_url: The rtmp_playback_url of this IndexStreamTarget.
        :param stream_name: The stream_name of this IndexStreamTarget.
        :param type: The type of this IndexStreamTarget.
        :param updated_at: The updated_at of this IndexStreamTarget.
        :param username: The username of this IndexStreamTarget.
        """
        self.openapi_types = {
            'chunk_size': str,
            'connection_code': str,
            'connection_code_expires_at': datetime,
            'created_at': datetime,
            'hds_playback_url': str,
            'hls_playback_url': str,
            'id': str,
            'location': str,
            'name': str,
            'primary_url': str,
            'provider': str,
            'rtmp_playback_url': str,
            'stream_name': str,
            'type': str,
            'updated_at': datetime,
            'username': str
        }

        self.attribute_map = {
            'chunk_size': 'chunk_size',
            'connection_code': 'connection_code',
            'connection_code_expires_at': 'connection_code_expires_at',
            'created_at': 'created_at',
            'hds_playback_url': 'hds_playback_url',
            'hls_playback_url': 'hls_playback_url',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'primary_url': 'primary_url',
            'provider': 'provider',
            'rtmp_playback_url': 'rtmp_playback_url',
            'stream_name': 'stream_name',
            'type': 'type',
            'updated_at': 'updated_at',
            'username': 'username'
        }

        self._chunk_size = chunk_size
        self._connection_code = connection_code
        self._connection_code_expires_at = connection_code_expires_at
        self._created_at = created_at
        self._hds_playback_url = hds_playback_url
        self._hls_playback_url = hls_playback_url
        self._id = id
        self._location = location
        self._name = name
        self._primary_url = primary_url
        self._provider = provider
        self._rtmp_playback_url = rtmp_playback_url
        self._stream_name = stream_name
        self._type = type
        self._updated_at = updated_at
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexStreamTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The index_stream_target of this IndexStreamTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chunk_size(self):
        """Gets the chunk_size of this IndexStreamTarget.

        <strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.

        :return: The chunk_size of this IndexStreamTarget.
        :rtype: str
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this IndexStreamTarget.

        <strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.

        :param chunk_size: The chunk_size of this IndexStreamTarget.
        :type chunk_size: str
        """
        allowed_values = ["2", "4", "6", "8", "10"]  # noqa: E501
        if chunk_size not in allowed_values:
            raise ValueError(
                "Invalid value for `chunk_size` ({0}), must be one of {1}"
                .format(chunk_size, allowed_values)
            )

        self._chunk_size = chunk_size

    @property
    def connection_code(self):
        """Gets the connection_code of this IndexStreamTarget.

        A six-character, alphanumeric string that allows Wowza Streaming Engine to send a transcoded stream to a <strong>WowzaStreamTarget</strong> or for the Wowza GoCoder app to send an encoded stream to a <strong>UltraLowLatencyStreamTarget</strong>. The code can be used once and expires 24 hours after it's created.

        :return: The connection_code of this IndexStreamTarget.
        :rtype: str
        """
        return self._connection_code

    @connection_code.setter
    def connection_code(self, connection_code):
        """Sets the connection_code of this IndexStreamTarget.

        A six-character, alphanumeric string that allows Wowza Streaming Engine to send a transcoded stream to a <strong>WowzaStreamTarget</strong> or for the Wowza GoCoder app to send an encoded stream to a <strong>UltraLowLatencyStreamTarget</strong>. The code can be used once and expires 24 hours after it's created.

        :param connection_code: The connection_code of this IndexStreamTarget.
        :type connection_code: str
        """

        self._connection_code = connection_code

    @property
    def connection_code_expires_at(self):
        """Gets the connection_code_expires_at of this IndexStreamTarget.

        The date and time that the <em>connection_code</em> expires.

        :return: The connection_code_expires_at of this IndexStreamTarget.
        :rtype: datetime
        """
        return self._connection_code_expires_at

    @connection_code_expires_at.setter
    def connection_code_expires_at(self, connection_code_expires_at):
        """Sets the connection_code_expires_at of this IndexStreamTarget.

        The date and time that the <em>connection_code</em> expires.

        :param connection_code_expires_at: The connection_code_expires_at of this IndexStreamTarget.
        :type connection_code_expires_at: datetime
        """

        self._connection_code_expires_at = connection_code_expires_at

    @property
    def created_at(self):
        """Gets the created_at of this IndexStreamTarget.

        The date and time that the stream target was created.

        :return: The created_at of this IndexStreamTarget.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IndexStreamTarget.

        The date and time that the stream target was created.

        :param created_at: The created_at of this IndexStreamTarget.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def hds_playback_url(self):
        """Gets the hds_playback_url of this IndexStreamTarget.

        The web address that the target uses to play Adobe HDS streams.

        :return: The hds_playback_url of this IndexStreamTarget.
        :rtype: str
        """
        return self._hds_playback_url

    @hds_playback_url.setter
    def hds_playback_url(self, hds_playback_url):
        """Sets the hds_playback_url of this IndexStreamTarget.

        The web address that the target uses to play Adobe HDS streams.

        :param hds_playback_url: The hds_playback_url of this IndexStreamTarget.
        :type hds_playback_url: str
        """

        self._hds_playback_url = hds_playback_url

    @property
    def hls_playback_url(self):
        """Gets the hls_playback_url of this IndexStreamTarget.

        Only for targets whose <em>provider</em> is <strong>akamai_cupertino</strong>. The web address that the target uses to play Apple HLS streams.

        :return: The hls_playback_url of this IndexStreamTarget.
        :rtype: str
        """
        return self._hls_playback_url

    @hls_playback_url.setter
    def hls_playback_url(self, hls_playback_url):
        """Sets the hls_playback_url of this IndexStreamTarget.

        Only for targets whose <em>provider</em> is <strong>akamai_cupertino</strong>. The web address that the target uses to play Apple HLS streams.

        :param hls_playback_url: The hls_playback_url of this IndexStreamTarget.
        :type hls_playback_url: str
        """

        self._hls_playback_url = hls_playback_url

    @property
    def id(self):
        """Gets the id of this IndexStreamTarget.

        The unique alphanumeric string that identifies the stream target.

        :return: The id of this IndexStreamTarget.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndexStreamTarget.

        The unique alphanumeric string that identifies the stream target.

        :param id: The id of this IndexStreamTarget.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this IndexStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.

        :return: The location of this IndexStreamTarget.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this IndexStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.

        :param location: The location of this IndexStreamTarget.
        :type location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def name(self):
        """Gets the name of this IndexStreamTarget.

        A descriptive name for the stream target. Maximum 255 characters.

        :return: The name of this IndexStreamTarget.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexStreamTarget.

        A descriptive name for the stream target. Maximum 255 characters.

        :param name: The name of this IndexStreamTarget.
        :type name: str
        """

        self._name = name

    @property
    def primary_url(self):
        """Gets the primary_url of this IndexStreamTarget.

        The primary ingest URL of the target.

        :return: The primary_url of this IndexStreamTarget.
        :rtype: str
        """
        return self._primary_url

    @primary_url.setter
    def primary_url(self, primary_url):
        """Sets the primary_url of this IndexStreamTarget.

        The primary ingest URL of the target.

        :param primary_url: The primary_url of this IndexStreamTarget.
        :type primary_url: str
        """

        self._primary_url = primary_url

    @property
    def provider(self):
        """Gets the provider of this IndexStreamTarget.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :return: The provider of this IndexStreamTarget.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this IndexStreamTarget.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :param provider: The provider of this IndexStreamTarget.
        :type provider: str
        """

        self._provider = provider

    @property
    def rtmp_playback_url(self):
        """Gets the rtmp_playback_url of this IndexStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.

        :return: The rtmp_playback_url of this IndexStreamTarget.
        :rtype: str
        """
        return self._rtmp_playback_url

    @rtmp_playback_url.setter
    def rtmp_playback_url(self, rtmp_playback_url):
        """Sets the rtmp_playback_url of this IndexStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.

        :param rtmp_playback_url: The rtmp_playback_url of this IndexStreamTarget.
        :type rtmp_playback_url: str
        """

        self._rtmp_playback_url = rtmp_playback_url

    @property
    def stream_name(self):
        """Gets the stream_name of this IndexStreamTarget.

        The name of the stream being ingested into the target. Returned for all targets except those whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and whose <em>source_delivery_method</em> is **pull**.

        :return: The stream_name of this IndexStreamTarget.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this IndexStreamTarget.

        The name of the stream being ingested into the target. Returned for all targets except those whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and whose <em>source_delivery_method</em> is **pull**.

        :param stream_name: The stream_name of this IndexStreamTarget.
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def type(self):
        """Gets the type of this IndexStreamTarget.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :return: The type of this IndexStreamTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IndexStreamTarget.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :param type: The type of this IndexStreamTarget.
        :type type: str
        """
        allowed_values = ["WowzaStreamTarget", "UltraLowLatencyStreamTarget", "CustomStreamTarget"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this IndexStreamTarget.

        The date and time that the stream target was updated.

        :return: The updated_at of this IndexStreamTarget.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IndexStreamTarget.

        The date and time that the stream target was updated.

        :param updated_at: The updated_at of this IndexStreamTarget.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def username(self):
        """Gets the username of this IndexStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.

        :return: The username of this IndexStreamTarget.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this IndexStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.

        :param username: The username of this IndexStreamTarget.
        :type username: str
        """

        self._username = username
