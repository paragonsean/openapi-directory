# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.limits1 import Limits1
from openapi_server.models.shm_historic_metrics import ShmHistoricMetrics
from openapi_server import util


class ShowUptimeMetricsHistoric200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, historic: List[ShmHistoricMetrics]=None, limits: Limits1=None):
        """ShowUptimeMetricsHistoric200Response - a model defined in OpenAPI

        :param historic: The historic of this ShowUptimeMetricsHistoric200Response.
        :param limits: The limits of this ShowUptimeMetricsHistoric200Response.
        """
        self.openapi_types = {
            'historic': List[ShmHistoricMetrics],
            'limits': Limits1
        }

        self.attribute_map = {
            'historic': 'historic',
            'limits': 'limits'
        }

        self._historic = historic
        self._limits = limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShowUptimeMetricsHistoric200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The showUptimeMetricsHistoric_200_response of this ShowUptimeMetricsHistoric200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def historic(self):
        """Gets the historic of this ShowUptimeMetricsHistoric200Response.


        :return: The historic of this ShowUptimeMetricsHistoric200Response.
        :rtype: List[ShmHistoricMetrics]
        """
        return self._historic

    @historic.setter
    def historic(self, historic):
        """Sets the historic of this ShowUptimeMetricsHistoric200Response.


        :param historic: The historic of this ShowUptimeMetricsHistoric200Response.
        :type historic: List[ShmHistoricMetrics]
        """
        if historic is None:
            raise ValueError("Invalid value for `historic`, must not be `None`")

        self._historic = historic

    @property
    def limits(self):
        """Gets the limits of this ShowUptimeMetricsHistoric200Response.


        :return: The limits of this ShowUptimeMetricsHistoric200Response.
        :rtype: Limits1
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ShowUptimeMetricsHistoric200Response.


        :param limits: The limits of this ShowUptimeMetricsHistoric200Response.
        :type limits: Limits1
        """
        if limits is None:
            raise ValueError("Invalid value for `limits`, must not be `None`")

        self._limits = limits
