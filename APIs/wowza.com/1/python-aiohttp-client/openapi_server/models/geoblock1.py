# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Geoblock1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[str]=None, type: str=None, whitelist: List[str]=None):
        """Geoblock1 - a model defined in OpenAPI

        :param countries: The countries of this Geoblock1.
        :param type: The type of this Geoblock1.
        :param whitelist: The whitelist of this Geoblock1.
        """
        self.openapi_types = {
            'countries': List[str],
            'type': str,
            'whitelist': List[str]
        }

        self.attribute_map = {
            'countries': 'countries',
            'type': 'type',
            'whitelist': 'whitelist'
        }

        self._countries = countries
        self._type = type
        self._whitelist = whitelist

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Geoblock1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoblock_1 of this Geoblock1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this Geoblock1.

        Required when <em>type</em> is <strong>allow</strong> or <strong>deny</strong>. The locations affected by the geo-blocking. Enter a comma-separated list (an array) of two-letter ISO 3166-1 country codes. For a list, see <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1</a> on wikipedia.

        :return: The countries of this Geoblock1.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Geoblock1.

        Required when <em>type</em> is <strong>allow</strong> or <strong>deny</strong>. The locations affected by the geo-blocking. Enter a comma-separated list (an array) of two-letter ISO 3166-1 country codes. For a list, see <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1</a> on wikipedia.

        :param countries: The countries of this Geoblock1.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def type(self):
        """Gets the type of this Geoblock1.

        The type of geo-blocking to apply. The value <strong>allow</strong> permits viewing only in the locations specified by the <em>countries</em> parameter. The value <strong>deny</strong> prohibits viewing in the locations specified by the <em>countries</em> parameter. The value <strong>disabled</strong> (the default) permits viewing everywhere.

        :return: The type of this Geoblock1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Geoblock1.

        The type of geo-blocking to apply. The value <strong>allow</strong> permits viewing only in the locations specified by the <em>countries</em> parameter. The value <strong>deny</strong> prohibits viewing in the locations specified by the <em>countries</em> parameter. The value <strong>disabled</strong> (the default) permits viewing everywhere.

        :param type: The type of this Geoblock1.
        :type type: str
        """
        allowed_values = ["disabled", "allow", "deny"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def whitelist(self):
        """Gets the whitelist of this Geoblock1.

        Whitelisted addresses can be viewed even if they're within a geo-blocked location. Enter a comma-separated list (an array) of IP addresses that always allow streaming.

        :return: The whitelist of this Geoblock1.
        :rtype: List[str]
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist):
        """Sets the whitelist of this Geoblock1.

        Whitelisted addresses can be viewed even if they're within a geo-blocked location. Enter a comma-separated list (an array) of IP addresses that always allow streaming.

        :param whitelist: The whitelist of this Geoblock1.
        :type whitelist: List[str]
        """

        self._whitelist = whitelist
