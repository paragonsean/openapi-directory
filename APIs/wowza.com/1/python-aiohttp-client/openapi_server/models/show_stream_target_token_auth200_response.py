# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token_auth import TokenAuth
from openapi_server import util


class ShowStreamTargetTokenAuth200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_auth: TokenAuth=None):
        """ShowStreamTargetTokenAuth200Response - a model defined in OpenAPI

        :param token_auth: The token_auth of this ShowStreamTargetTokenAuth200Response.
        """
        self.openapi_types = {
            'token_auth': TokenAuth
        }

        self.attribute_map = {
            'token_auth': 'token_auth'
        }

        self._token_auth = token_auth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShowStreamTargetTokenAuth200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The showStreamTargetTokenAuth_200_response of this ShowStreamTargetTokenAuth200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_auth(self):
        """Gets the token_auth of this ShowStreamTargetTokenAuth200Response.


        :return: The token_auth of this ShowStreamTargetTokenAuth200Response.
        :rtype: TokenAuth
        """
        return self._token_auth

    @token_auth.setter
    def token_auth(self, token_auth):
        """Sets the token_auth of this ShowStreamTargetTokenAuth200Response.


        :param token_auth: The token_auth of this ShowStreamTargetTokenAuth200Response.
        :type token_auth: TokenAuth
        """
        if token_auth is None:
            raise ValueError("Invalid value for `token_auth`, must not be `None`")

        self._token_auth = token_auth
