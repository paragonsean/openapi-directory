# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_ip_address: str=None, backup_url: str=None, created_at: datetime=None, id: str=None, ip_address: str=None, location: str=None, location_method: str=None, name: str=None, password: str=None, playback_url: str=None, primary_url: str=None, provider: str=None, stream_name: str=None, updated_at: datetime=None, username: str=None):
        """StreamSource - a model defined in OpenAPI

        :param backup_ip_address: The backup_ip_address of this StreamSource.
        :param backup_url: The backup_url of this StreamSource.
        :param created_at: The created_at of this StreamSource.
        :param id: The id of this StreamSource.
        :param ip_address: The ip_address of this StreamSource.
        :param location: The location of this StreamSource.
        :param location_method: The location_method of this StreamSource.
        :param name: The name of this StreamSource.
        :param password: The password of this StreamSource.
        :param playback_url: The playback_url of this StreamSource.
        :param primary_url: The primary_url of this StreamSource.
        :param provider: The provider of this StreamSource.
        :param stream_name: The stream_name of this StreamSource.
        :param updated_at: The updated_at of this StreamSource.
        :param username: The username of this StreamSource.
        """
        self.openapi_types = {
            'backup_ip_address': str,
            'backup_url': str,
            'created_at': datetime,
            'id': str,
            'ip_address': str,
            'location': str,
            'location_method': str,
            'name': str,
            'password': str,
            'playback_url': str,
            'primary_url': str,
            'provider': str,
            'stream_name': str,
            'updated_at': datetime,
            'username': str
        }

        self.attribute_map = {
            'backup_ip_address': 'backup_ip_address',
            'backup_url': 'backup_url',
            'created_at': 'created_at',
            'id': 'id',
            'ip_address': 'ip_address',
            'location': 'location',
            'location_method': 'location_method',
            'name': 'name',
            'password': 'password',
            'playback_url': 'playback_url',
            'primary_url': 'primary_url',
            'provider': 'provider',
            'stream_name': 'stream_name',
            'updated_at': 'updated_at',
            'username': 'username'
        }

        self._backup_ip_address = backup_ip_address
        self._backup_url = backup_url
        self._created_at = created_at
        self._id = id
        self._ip_address = ip_address
        self._location = location
        self._location_method = location_method
        self._name = name
        self._password = password
        self._playback_url = playback_url
        self._primary_url = primary_url
        self._provider = provider
        self._stream_name = stream_name
        self._updated_at = updated_at
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_source of this StreamSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_ip_address(self):
        """Gets the backup_ip_address of this StreamSource.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the backup IP address of the source encoder.

        :return: The backup_ip_address of this StreamSource.
        :rtype: str
        """
        return self._backup_ip_address

    @backup_ip_address.setter
    def backup_ip_address(self, backup_ip_address):
        """Sets the backup_ip_address of this StreamSource.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the backup IP address of the source encoder.

        :param backup_ip_address: The backup_ip_address of this StreamSource.
        :type backup_ip_address: str
        """

        self._backup_ip_address = backup_ip_address

    @property
    def backup_url(self):
        """Gets the backup_url of this StreamSource.

        The backup RTMP playback URL of the transcoded stream.

        :return: The backup_url of this StreamSource.
        :rtype: str
        """
        return self._backup_url

    @backup_url.setter
    def backup_url(self, backup_url):
        """Sets the backup_url of this StreamSource.

        The backup RTMP playback URL of the transcoded stream.

        :param backup_url: The backup_url of this StreamSource.
        :type backup_url: str
        """

        self._backup_url = backup_url

    @property
    def created_at(self):
        """Gets the created_at of this StreamSource.

        The date and time that the stream source was created.

        :return: The created_at of this StreamSource.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StreamSource.

        The date and time that the stream source was created.

        :param created_at: The created_at of this StreamSource.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this StreamSource.

        The unique alphanumeric string that identifies the stream source.

        :return: The id of this StreamSource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamSource.

        The unique alphanumeric string that identifies the stream source.

        :param id: The id of this StreamSource.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this StreamSource.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the primary IP address of the source encoder.

        :return: The ip_address of this StreamSource.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this StreamSource.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the primary IP address of the source encoder.

        :param ip_address: The ip_address of this StreamSource.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this StreamSource.

        If <em>location_method</em> is <strong>region</strong>, specify a location as close as possible to the source encoder.

        :return: The location of this StreamSource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StreamSource.

        If <em>location_method</em> is <strong>region</strong>, specify a location as close as possible to the source encoder.

        :param location: The location of this StreamSource.
        :type location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def location_method(self):
        """Gets the location_method of this StreamSource.

        The method used to determine the location of the stream source, either by <strong>region</strong> or based on the source encoder's <strong>ip_address</strong>.

        :return: The location_method of this StreamSource.
        :rtype: str
        """
        return self._location_method

    @location_method.setter
    def location_method(self, location_method):
        """Sets the location_method of this StreamSource.

        The method used to determine the location of the stream source, either by <strong>region</strong> or based on the source encoder's <strong>ip_address</strong>.

        :param location_method: The location_method of this StreamSource.
        :type location_method: str
        """
        allowed_values = ["region", "ip_address"]  # noqa: E501
        if location_method not in allowed_values:
            raise ValueError(
                "Invalid value for `location_method` ({0}), must be one of {1}"
                .format(location_method, allowed_values)
            )

        self._location_method = location_method

    @property
    def name(self):
        """Gets the name of this StreamSource.

        A descriptive name for the stream source. Maximum 255 characters.

        :return: The name of this StreamSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StreamSource.

        A descriptive name for the stream source. Maximum 255 characters.

        :param name: The name of this StreamSource.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this StreamSource.

        The password that you can use to configure the source encoder to authenticate to the stream source.

        :return: The password of this StreamSource.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this StreamSource.

        The password that you can use to configure the source encoder to authenticate to the stream source.

        :param password: The password of this StreamSource.
        :type password: str
        """

        self._password = password

    @property
    def playback_url(self):
        """Gets the playback_url of this StreamSource.

        The full RTMP playback URL.

        :return: The playback_url of this StreamSource.
        :rtype: str
        """
        return self._playback_url

    @playback_url.setter
    def playback_url(self, playback_url):
        """Sets the playback_url of this StreamSource.

        The full RTMP playback URL.

        :param playback_url: The playback_url of this StreamSource.
        :type playback_url: str
        """

        self._playback_url = playback_url

    @property
    def primary_url(self):
        """Gets the primary_url of this StreamSource.

        The primary RTMP playback URL of the transcoded stream.

        :return: The primary_url of this StreamSource.
        :rtype: str
        """
        return self._primary_url

    @primary_url.setter
    def primary_url(self, primary_url):
        """Sets the primary_url of this StreamSource.

        The primary RTMP playback URL of the transcoded stream.

        :param primary_url: The primary_url of this StreamSource.
        :type primary_url: str
        """

        self._primary_url = primary_url

    @property
    def provider(self):
        """Gets the provider of this StreamSource.

        The provider of the Wowza Streaming Cloud stream source.

        :return: The provider of this StreamSource.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this StreamSource.

        The provider of the Wowza Streaming Cloud stream source.

        :param provider: The provider of this StreamSource.
        :type provider: str
        """

        self._provider = provider

    @property
    def stream_name(self):
        """Gets the stream_name of this StreamSource.

        The name of the stream that you can use to configure the source encoder to connect to the stream source.

        :return: The stream_name of this StreamSource.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this StreamSource.

        The name of the stream that you can use to configure the source encoder to connect to the stream source.

        :param stream_name: The stream_name of this StreamSource.
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def updated_at(self):
        """Gets the updated_at of this StreamSource.

        The date and time that the stream source was updated.

        :return: The updated_at of this StreamSource.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StreamSource.

        The date and time that the stream source was updated.

        :param updated_at: The updated_at of this StreamSource.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def username(self):
        """Gets the username of this StreamSource.

        The username that you can use to configure the source encoder to authenticate to the stream source.

        :return: The username of this StreamSource.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this StreamSource.

        The username that you can use to configure the source encoder to authenticate to the stream source.

        :param username: The username of this StreamSource.
        :type username: str
        """

        self._username = username
