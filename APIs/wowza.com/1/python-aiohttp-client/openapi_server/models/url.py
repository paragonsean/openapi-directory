# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Url(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: int=None, created_at: datetime=None, height: int=None, id: str=None, label: str=None, player_id: str=None, updated_at: datetime=None, url: str=None, width: int=None):
        """Url - a model defined in OpenAPI

        :param bitrate: The bitrate of this Url.
        :param created_at: The created_at of this Url.
        :param height: The height of this Url.
        :param id: The id of this Url.
        :param label: The label of this Url.
        :param player_id: The player_id of this Url.
        :param updated_at: The updated_at of this Url.
        :param url: The url of this Url.
        :param width: The width of this Url.
        """
        self.openapi_types = {
            'bitrate': int,
            'created_at': datetime,
            'height': int,
            'id': str,
            'label': str,
            'player_id': str,
            'updated_at': datetime,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'bitrate': 'bitrate',
            'created_at': 'created_at',
            'height': 'height',
            'id': 'id',
            'label': 'label',
            'player_id': 'player_id',
            'updated_at': 'updated_at',
            'url': 'url',
            'width': 'width'
        }

        self._bitrate = bitrate
        self._created_at = created_at
        self._height = height
        self._id = id
        self._label = label
        self._player_id = player_id
        self._updated_at = updated_at
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Url':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The url of this Url.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this Url.

        The video bitrate, in kilobits per second (Kbps), of the output rendition that will be played at the URL. May correspond to the bitrate of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :return: The bitrate of this Url.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this Url.

        The video bitrate, in kilobits per second (Kbps), of the output rendition that will be played at the URL. May correspond to the bitrate of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :param bitrate: The bitrate of this Url.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def created_at(self):
        """Gets the created_at of this Url.

        The date and time that the player URL was created.

        :return: The created_at of this Url.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Url.

        The date and time that the player URL was created.

        :param created_at: The created_at of this Url.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def height(self):
        """Gets the height of this Url.

        The height, in pixels, of the output rendition that will be played at the URL. May correspond to the height of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :return: The height of this Url.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Url.

        The height, in pixels, of the output rendition that will be played at the URL. May correspond to the height of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :param height: The height of this Url.
        :type height: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Url.

        The unique alphanumeric string that identifies the player URL.

        :return: The id of this Url.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Url.

        The unique alphanumeric string that identifies the player URL.

        :param id: The id of this Url.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Url.

        A descriptive name for the player URL. Maximum 255 characters.

        :return: The label of this Url.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Url.

        A descriptive name for the player URL. Maximum 255 characters.

        :param label: The label of this Url.
        :type label: str
        """

        self._label = label

    @property
    def player_id(self):
        """Gets the player_id of this Url.

        The unique alphanumeric string that identifies the player.

        :return: The player_id of this Url.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Url.

        The unique alphanumeric string that identifies the player.

        :param player_id: The player_id of this Url.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Url.

        The date and time that the player URL was updated.

        :return: The updated_at of this Url.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Url.

        The date and time that the player URL was updated.

        :param updated_at: The updated_at of this Url.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Url.

        The URL of the player. If using a Wowza CDN target, the URL format is `http://[wowzasubdomain]-f.akamaihd.net/z/[stream_name]_[angle]@[stream_id]/manifest.f4m` for Adobe HDS playback or `http://[wowzasubdomain]-f.akamaihd.net/i/[stream_name]_[angle]@[stream_id]/master.m3u8` for Apple HLS playback.

        :return: The url of this Url.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Url.

        The URL of the player. If using a Wowza CDN target, the URL format is `http://[wowzasubdomain]-f.akamaihd.net/z/[stream_name]_[angle]@[stream_id]/manifest.f4m` for Adobe HDS playback or `http://[wowzasubdomain]-f.akamaihd.net/i/[stream_name]_[angle]@[stream_id]/master.m3u8` for Apple HLS playback.

        :param url: The url of this Url.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this Url.

        The width, in pixels, of the output rendition that will be played at the URL. May correspond to the width of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :return: The width of this Url.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Url.

        The width, in pixels, of the output rendition that will be played at the URL. May correspond to the width of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :param width: The width of this Url.
        :type width: int
        """

        self._width = width
