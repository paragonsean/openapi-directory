# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_object import CountryObject
from openapi_server.models.protocol_object import ProtocolObject
from openapi_server.models.rendition_object import RenditionObject
from openapi_server import util


class StreamTarget7(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[CountryObject]=None, country_list: List[str]=None, percentage_viewers: int=None, percentage_viewing_time: int=None, protocols: List[ProtocolObject]=None, rendition_list: List[str]=None, renditions: List[RenditionObject]=None, seconds_avg_viewing_time: int=None, seconds_total_viewing_time: int=None, total_unique_viewers: int=None):
        """StreamTarget7 - a model defined in OpenAPI

        :param countries: The countries of this StreamTarget7.
        :param country_list: The country_list of this StreamTarget7.
        :param percentage_viewers: The percentage_viewers of this StreamTarget7.
        :param percentage_viewing_time: The percentage_viewing_time of this StreamTarget7.
        :param protocols: The protocols of this StreamTarget7.
        :param rendition_list: The rendition_list of this StreamTarget7.
        :param renditions: The renditions of this StreamTarget7.
        :param seconds_avg_viewing_time: The seconds_avg_viewing_time of this StreamTarget7.
        :param seconds_total_viewing_time: The seconds_total_viewing_time of this StreamTarget7.
        :param total_unique_viewers: The total_unique_viewers of this StreamTarget7.
        """
        self.openapi_types = {
            'countries': List[CountryObject],
            'country_list': List[str],
            'percentage_viewers': int,
            'percentage_viewing_time': int,
            'protocols': List[ProtocolObject],
            'rendition_list': List[str],
            'renditions': List[RenditionObject],
            'seconds_avg_viewing_time': int,
            'seconds_total_viewing_time': int,
            'total_unique_viewers': int
        }

        self.attribute_map = {
            'countries': 'countries',
            'country_list': 'country_list',
            'percentage_viewers': 'percentage_viewers',
            'percentage_viewing_time': 'percentage_viewing_time',
            'protocols': 'protocols',
            'rendition_list': 'rendition_list',
            'renditions': 'renditions',
            'seconds_avg_viewing_time': 'seconds_avg_viewing_time',
            'seconds_total_viewing_time': 'seconds_total_viewing_time',
            'total_unique_viewers': 'total_unique_viewers'
        }

        self._countries = countries
        self._country_list = country_list
        self._percentage_viewers = percentage_viewers
        self._percentage_viewing_time = percentage_viewing_time
        self._protocols = protocols
        self._rendition_list = rendition_list
        self._renditions = renditions
        self._seconds_avg_viewing_time = seconds_avg_viewing_time
        self._seconds_total_viewing_time = seconds_total_viewing_time
        self._total_unique_viewers = total_unique_viewers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamTarget7':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_target_7 of this StreamTarget7.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this StreamTarget7.


        :return: The countries of this StreamTarget7.
        :rtype: List[CountryObject]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this StreamTarget7.


        :param countries: The countries of this StreamTarget7.
        :type countries: List[CountryObject]
        """

        self._countries = countries

    @property
    def country_list(self):
        """Gets the country_list of this StreamTarget7.

        A comma-separated list of all viewed country codes shown as strings, for quick reference.

        :return: The country_list of this StreamTarget7.
        :rtype: List[str]
        """
        return self._country_list

    @country_list.setter
    def country_list(self, country_list):
        """Sets the country_list of this StreamTarget7.

        A comma-separated list of all viewed country codes shown as strings, for quick reference.

        :param country_list: The country_list of this StreamTarget7.
        :type country_list: List[str]
        """

        self._country_list = country_list

    @property
    def percentage_viewers(self):
        """Gets the percentage_viewers of this StreamTarget7.

        Total percentage of viewers (<strong>100</strong>).

        :return: The percentage_viewers of this StreamTarget7.
        :rtype: int
        """
        return self._percentage_viewers

    @percentage_viewers.setter
    def percentage_viewers(self, percentage_viewers):
        """Sets the percentage_viewers of this StreamTarget7.

        Total percentage of viewers (<strong>100</strong>).

        :param percentage_viewers: The percentage_viewers of this StreamTarget7.
        :type percentage_viewers: int
        """

        self._percentage_viewers = percentage_viewers

    @property
    def percentage_viewing_time(self):
        """Gets the percentage_viewing_time of this StreamTarget7.

        The percentage of total viewing time that the protocol or rendition was viewed. Always <strong>100</strong> for <em>stream_target</em>.

        :return: The percentage_viewing_time of this StreamTarget7.
        :rtype: int
        """
        return self._percentage_viewing_time

    @percentage_viewing_time.setter
    def percentage_viewing_time(self, percentage_viewing_time):
        """Sets the percentage_viewing_time of this StreamTarget7.

        The percentage of total viewing time that the protocol or rendition was viewed. Always <strong>100</strong> for <em>stream_target</em>.

        :param percentage_viewing_time: The percentage_viewing_time of this StreamTarget7.
        :type percentage_viewing_time: int
        """

        self._percentage_viewing_time = percentage_viewing_time

    @property
    def protocols(self):
        """Gets the protocols of this StreamTarget7.


        :return: The protocols of this StreamTarget7.
        :rtype: List[ProtocolObject]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this StreamTarget7.


        :param protocols: The protocols of this StreamTarget7.
        :type protocols: List[ProtocolObject]
        """

        self._protocols = protocols

    @property
    def rendition_list(self):
        """Gets the rendition_list of this StreamTarget7.

        A comma-separated list of all viewed renditions shown as numbers, for quick reference.

        :return: The rendition_list of this StreamTarget7.
        :rtype: List[str]
        """
        return self._rendition_list

    @rendition_list.setter
    def rendition_list(self, rendition_list):
        """Sets the rendition_list of this StreamTarget7.

        A comma-separated list of all viewed renditions shown as numbers, for quick reference.

        :param rendition_list: The rendition_list of this StreamTarget7.
        :type rendition_list: List[str]
        """

        self._rendition_list = rendition_list

    @property
    def renditions(self):
        """Gets the renditions of this StreamTarget7.


        :return: The renditions of this StreamTarget7.
        :rtype: List[RenditionObject]
        """
        return self._renditions

    @renditions.setter
    def renditions(self, renditions):
        """Sets the renditions of this StreamTarget7.


        :param renditions: The renditions of this StreamTarget7.
        :type renditions: List[RenditionObject]
        """

        self._renditions = renditions

    @property
    def seconds_avg_viewing_time(self):
        """Gets the seconds_avg_viewing_time of this StreamTarget7.

        The average length of time, in seconds, that viewers played the stream at the target.

        :return: The seconds_avg_viewing_time of this StreamTarget7.
        :rtype: int
        """
        return self._seconds_avg_viewing_time

    @seconds_avg_viewing_time.setter
    def seconds_avg_viewing_time(self, seconds_avg_viewing_time):
        """Sets the seconds_avg_viewing_time of this StreamTarget7.

        The average length of time, in seconds, that viewers played the stream at the target.

        :param seconds_avg_viewing_time: The seconds_avg_viewing_time of this StreamTarget7.
        :type seconds_avg_viewing_time: int
        """

        self._seconds_avg_viewing_time = seconds_avg_viewing_time

    @property
    def seconds_total_viewing_time(self):
        """Gets the seconds_total_viewing_time of this StreamTarget7.

        The total length of time, in seconds, that all viewers played the stream at the target. <em>seconds_total_viewing_time</em> may be longer than the duration of the stream.

        :return: The seconds_total_viewing_time of this StreamTarget7.
        :rtype: int
        """
        return self._seconds_total_viewing_time

    @seconds_total_viewing_time.setter
    def seconds_total_viewing_time(self, seconds_total_viewing_time):
        """Sets the seconds_total_viewing_time of this StreamTarget7.

        The total length of time, in seconds, that all viewers played the stream at the target. <em>seconds_total_viewing_time</em> may be longer than the duration of the stream.

        :param seconds_total_viewing_time: The seconds_total_viewing_time of this StreamTarget7.
        :type seconds_total_viewing_time: int
        """

        self._seconds_total_viewing_time = seconds_total_viewing_time

    @property
    def total_unique_viewers(self):
        """Gets the total_unique_viewers of this StreamTarget7.

        The total number of unique viewers that downloaded at least one chunk of the stream at the target (for HTTP streams) or connected to and viewed the stream (for ultra low latency streams). A unique viewer is a single IP address; multiple users that share the same IP address are counted once.

        :return: The total_unique_viewers of this StreamTarget7.
        :rtype: int
        """
        return self._total_unique_viewers

    @total_unique_viewers.setter
    def total_unique_viewers(self, total_unique_viewers):
        """Sets the total_unique_viewers of this StreamTarget7.

        The total number of unique viewers that downloaded at least one chunk of the stream at the target (for HTTP streams) or connected to and viewed the stream (for ultra low latency streams). A unique viewer is a single IP address; multiple users that share the same IP address are counted once.

        :param total_unique_viewers: The total_unique_viewers of this StreamTarget7.
        :type total_unique_viewers: int
        """

        self._total_unique_viewers = total_unique_viewers
