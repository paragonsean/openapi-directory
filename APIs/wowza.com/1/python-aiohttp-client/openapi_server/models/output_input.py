# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output1 import Output1
from openapi_server import util


class OutputInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, output: Output1=None):
        """OutputInput - a model defined in OpenAPI

        :param output: The output of this OutputInput.
        """
        self.openapi_types = {
            'output': Output1
        }

        self.attribute_map = {
            'output': 'output'
        }

        self._output = output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The output_input of this OutputInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output(self):
        """Gets the output of this OutputInput.


        :return: The output of this OutputInput.
        :rtype: Output1
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this OutputInput.


        :param output: The output of this OutputInput.
        :type output: Output1
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output
