# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_stream import LiveStream
from openapi_server import util


class LiveStreams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, live_streams: List[LiveStream]=None):
        """LiveStreams - a model defined in OpenAPI

        :param live_streams: The live_streams of this LiveStreams.
        """
        self.openapi_types = {
            'live_streams': List[LiveStream]
        }

        self.attribute_map = {
            'live_streams': 'live_streams'
        }

        self._live_streams = live_streams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStreams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The live_streams of this LiveStreams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def live_streams(self):
        """Gets the live_streams of this LiveStreams.


        :return: The live_streams of this LiveStreams.
        :rtype: List[LiveStream]
        """
        return self._live_streams

    @live_streams.setter
    def live_streams(self, live_streams):
        """Sets the live_streams of this LiveStreams.


        :param live_streams: The live_streams of this LiveStreams.
        :type live_streams: List[LiveStream]
        """
        if live_streams is None:
            raise ValueError("Invalid value for `live_streams`, must not be `None`")

        self._live_streams = live_streams
