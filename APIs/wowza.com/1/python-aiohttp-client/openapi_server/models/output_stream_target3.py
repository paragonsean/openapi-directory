# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputStreamTarget3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_target_id: str=None, use_stream_target_backup_url: bool=None):
        """OutputStreamTarget3 - a model defined in OpenAPI

        :param stream_target_id: The stream_target_id of this OutputStreamTarget3.
        :param use_stream_target_backup_url: The use_stream_target_backup_url of this OutputStreamTarget3.
        """
        self.openapi_types = {
            'stream_target_id': str,
            'use_stream_target_backup_url': bool
        }

        self.attribute_map = {
            'stream_target_id': 'stream_target_id',
            'use_stream_target_backup_url': 'use_stream_target_backup_url'
        }

        self._stream_target_id = stream_target_id
        self._use_stream_target_backup_url = use_stream_target_backup_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputStreamTarget3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The output_stream_target_3 of this OutputStreamTarget3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_target_id(self):
        """Gets the stream_target_id of this OutputStreamTarget3.

        The unique alphanumeric string that identifies the stream target.

        :return: The stream_target_id of this OutputStreamTarget3.
        :rtype: str
        """
        return self._stream_target_id

    @stream_target_id.setter
    def stream_target_id(self, stream_target_id):
        """Sets the stream_target_id of this OutputStreamTarget3.

        The unique alphanumeric string that identifies the stream target.

        :param stream_target_id: The stream_target_id of this OutputStreamTarget3.
        :type stream_target_id: str
        """
        if stream_target_id is None:
            raise ValueError("Invalid value for `stream_target_id`, must not be `None`")

        self._stream_target_id = stream_target_id

    @property
    def use_stream_target_backup_url(self):
        """Gets the use_stream_target_backup_url of this OutputStreamTarget3.

        Specifies whether to use the stream target's primary or backup URL.

        :return: The use_stream_target_backup_url of this OutputStreamTarget3.
        :rtype: bool
        """
        return self._use_stream_target_backup_url

    @use_stream_target_backup_url.setter
    def use_stream_target_backup_url(self, use_stream_target_backup_url):
        """Sets the use_stream_target_backup_url of this OutputStreamTarget3.

        Specifies whether to use the stream target's primary or backup URL.

        :param use_stream_target_backup_url: The use_stream_target_backup_url of this OutputStreamTarget3.
        :type use_stream_target_backup_url: bool
        """

        self._use_stream_target_backup_url = use_stream_target_backup_url
