# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WowzaStreamTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chunk_size: str=None, location: str=None, name: str=None, provider: str=None, type: str=None, use_cors: bool=None, use_https: bool=None, use_secure_ingest: bool=None):
        """WowzaStreamTarget - a model defined in OpenAPI

        :param chunk_size: The chunk_size of this WowzaStreamTarget.
        :param location: The location of this WowzaStreamTarget.
        :param name: The name of this WowzaStreamTarget.
        :param provider: The provider of this WowzaStreamTarget.
        :param type: The type of this WowzaStreamTarget.
        :param use_cors: The use_cors of this WowzaStreamTarget.
        :param use_https: The use_https of this WowzaStreamTarget.
        :param use_secure_ingest: The use_secure_ingest of this WowzaStreamTarget.
        """
        self.openapi_types = {
            'chunk_size': str,
            'location': str,
            'name': str,
            'provider': str,
            'type': str,
            'use_cors': bool,
            'use_https': bool,
            'use_secure_ingest': bool
        }

        self.attribute_map = {
            'chunk_size': 'chunk_size',
            'location': 'location',
            'name': 'name',
            'provider': 'provider',
            'type': 'type',
            'use_cors': 'use_cors',
            'use_https': 'use_https',
            'use_secure_ingest': 'use_secure_ingest'
        }

        self._chunk_size = chunk_size
        self._location = location
        self._name = name
        self._provider = provider
        self._type = type
        self._use_cors = use_cors
        self._use_https = use_https
        self._use_secure_ingest = use_secure_ingest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WowzaStreamTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The wowza_stream_target of this WowzaStreamTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chunk_size(self):
        """Gets the chunk_size of this WowzaStreamTarget.

        <strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.

        :return: The chunk_size of this WowzaStreamTarget.
        :rtype: str
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this WowzaStreamTarget.

        <strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.

        :param chunk_size: The chunk_size of this WowzaStreamTarget.
        :type chunk_size: str
        """
        allowed_values = ["2", "4", "6", "8", "10"]  # noqa: E501
        if chunk_size not in allowed_values:
            raise ValueError(
                "Invalid value for `chunk_size` ({0}), must be one of {1}"
                .format(chunk_size, allowed_values)
            )

        self._chunk_size = chunk_size

    @property
    def location(self):
        """Gets the location of this WowzaStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.

        :return: The location of this WowzaStreamTarget.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WowzaStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.

        :param location: The location of this WowzaStreamTarget.
        :type location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def name(self):
        """Gets the name of this WowzaStreamTarget.

        A descriptive name for the stream target. Maximum 255 characters.

        :return: The name of this WowzaStreamTarget.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WowzaStreamTarget.

        A descriptive name for the stream target. Maximum 255 characters.

        :param name: The name of this WowzaStreamTarget.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this WowzaStreamTarget.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :return: The provider of this WowzaStreamTarget.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this WowzaStreamTarget.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :param provider: The provider of this WowzaStreamTarget.
        :type provider: str
        """

        self._provider = provider

    @property
    def type(self):
        """Gets the type of this WowzaStreamTarget.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :return: The type of this WowzaStreamTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WowzaStreamTarget.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :param type: The type of this WowzaStreamTarget.
        :type type: str
        """

        self._type = type

    @property
    def use_cors(self):
        """Gets the use_cors of this WowzaStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. CORS, or cross-origin resource sharing, allows streams to be sent to providers such as Peer5, Viblast, and Streamroot, which implement a peer-to-peer grid delivery system.

        :return: The use_cors of this WowzaStreamTarget.
        :rtype: bool
        """
        return self._use_cors

    @use_cors.setter
    def use_cors(self, use_cors):
        """Sets the use_cors of this WowzaStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. CORS, or cross-origin resource sharing, allows streams to be sent to providers such as Peer5, Viblast, and Streamroot, which implement a peer-to-peer grid delivery system.

        :param use_cors: The use_cors of this WowzaStreamTarget.
        :type use_cors: bool
        """

        self._use_cors = use_cors

    @property
    def use_https(self):
        """Gets the use_https of this WowzaStreamTarget.

        <strong>The <em>use_https</em> parameter is deprecated. Use the POST /stream_targets/[<em>stream_target_id</em>]/properties endpoint and the <em>relative_playlists</em> parameter instead.</strong>

        :return: The use_https of this WowzaStreamTarget.
        :rtype: bool
        """
        return self._use_https

    @use_https.setter
    def use_https(self, use_https):
        """Sets the use_https of this WowzaStreamTarget.

        <strong>The <em>use_https</em> parameter is deprecated. Use the POST /stream_targets/[<em>stream_target_id</em>]/properties endpoint and the <em>relative_playlists</em> parameter instead.</strong>

        :param use_https: The use_https of this WowzaStreamTarget.
        :type use_https: bool
        """

        self._use_https = use_https

    @property
    def use_secure_ingest(self):
        """Gets the use_secure_ingest of this WowzaStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. If <strong>true</strong>, generates a <em>secure_ingest_query_param</em> to securely deliver the stream from the transcoder to the provider.

        :return: The use_secure_ingest of this WowzaStreamTarget.
        :rtype: bool
        """
        return self._use_secure_ingest

    @use_secure_ingest.setter
    def use_secure_ingest(self, use_secure_ingest):
        """Sets the use_secure_ingest of this WowzaStreamTarget.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. If <strong>true</strong>, generates a <em>secure_ingest_query_param</em> to securely deliver the stream from the transcoder to the provider.

        :param use_secure_ingest: The use_secure_ingest of this WowzaStreamTarget.
        :type use_secure_ingest: bool
        """

        self._use_secure_ingest = use_secure_ingest
