# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomStreamTarget1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_hls: bool=None, enabled: bool=None, ingest_ip_whitelist: List[str]=None, name: str=None, provider: str=None, region_override: str=None, source_delivery_method: str=None, source_url: str=None, type: str=None):
        """CustomStreamTarget1 - a model defined in OpenAPI

        :param enable_hls: The enable_hls of this CustomStreamTarget1.
        :param enabled: The enabled of this CustomStreamTarget1.
        :param ingest_ip_whitelist: The ingest_ip_whitelist of this CustomStreamTarget1.
        :param name: The name of this CustomStreamTarget1.
        :param provider: The provider of this CustomStreamTarget1.
        :param region_override: The region_override of this CustomStreamTarget1.
        :param source_delivery_method: The source_delivery_method of this CustomStreamTarget1.
        :param source_url: The source_url of this CustomStreamTarget1.
        :param type: The type of this CustomStreamTarget1.
        """
        self.openapi_types = {
            'enable_hls': bool,
            'enabled': bool,
            'ingest_ip_whitelist': List[str],
            'name': str,
            'provider': str,
            'region_override': str,
            'source_delivery_method': str,
            'source_url': str,
            'type': str
        }

        self.attribute_map = {
            'enable_hls': 'enable_hls',
            'enabled': 'enabled',
            'ingest_ip_whitelist': 'ingest_ip_whitelist',
            'name': 'name',
            'provider': 'provider',
            'region_override': 'region_override',
            'source_delivery_method': 'source_delivery_method',
            'source_url': 'source_url',
            'type': 'type'
        }

        self._enable_hls = enable_hls
        self._enabled = enabled
        self._ingest_ip_whitelist = ingest_ip_whitelist
        self._name = name
        self._provider = provider
        self._region_override = region_override
        self._source_delivery_method = source_delivery_method
        self._source_url = source_url
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomStreamTarget1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The custom_stream_target_1 of this CustomStreamTarget1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_hls(self):
        """Gets the enable_hls of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong>, creates an Apple HLS URL for playback on iOS devices (<em>hls_playback_url</em>). The default is <strong>false</strong>.

        :return: The enable_hls of this CustomStreamTarget1.
        :rtype: bool
        """
        return self._enable_hls

    @enable_hls.setter
    def enable_hls(self, enable_hls):
        """Sets the enable_hls of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong>, creates an Apple HLS URL for playback on iOS devices (<em>hls_playback_url</em>). The default is <strong>false</strong>.

        :param enable_hls: The enable_hls of this CustomStreamTarget1.
        :type enable_hls: bool
        """

        self._enable_hls = enable_hls

    @property
    def enabled(self):
        """Gets the enabled of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong> (the default), the source stream is ready to be ingested. If **false**, the source stream won't be ingested by the target's origin server.

        :return: The enabled of this CustomStreamTarget1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong> (the default), the source stream is ready to be ingested. If **false**, the source stream won't be ingested by the target's origin server.

        :param enabled: The enabled of this CustomStreamTarget1.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def ingest_ip_whitelist(self):
        """Gets the ingest_ip_whitelist of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **push**. A list of IP addresses that can be used to connect to the target's origin server.

        :return: The ingest_ip_whitelist of this CustomStreamTarget1.
        :rtype: List[str]
        """
        return self._ingest_ip_whitelist

    @ingest_ip_whitelist.setter
    def ingest_ip_whitelist(self, ingest_ip_whitelist):
        """Sets the ingest_ip_whitelist of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **push**. A list of IP addresses that can be used to connect to the target's origin server.

        :param ingest_ip_whitelist: The ingest_ip_whitelist of this CustomStreamTarget1.
        :type ingest_ip_whitelist: List[str]
        """

        self._ingest_ip_whitelist = ingest_ip_whitelist

    @property
    def name(self):
        """Gets the name of this CustomStreamTarget1.

        A descriptive name for the stream target. Maximum 255 characters.

        :return: The name of this CustomStreamTarget1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomStreamTarget1.

        A descriptive name for the stream target. Maximum 255 characters.

        :param name: The name of this CustomStreamTarget1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this CustomStreamTarget1.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :return: The provider of this CustomStreamTarget1.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CustomStreamTarget1.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :param provider: The provider of this CustomStreamTarget1.
        :type provider: str
        """

        self._provider = provider

    @property
    def region_override(self):
        """Gets the region_override of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The location of the stream target's origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.

        :return: The region_override of this CustomStreamTarget1.
        :rtype: str
        """
        return self._region_override

    @region_override.setter
    def region_override(self, region_override):
        """Sets the region_override of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The location of the stream target's origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.

        :param region_override: The region_override of this CustomStreamTarget1.
        :type region_override: str
        """

        self._region_override = region_override

    @property
    def source_delivery_method(self):
        """Gets the source_delivery_method of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.

        :return: The source_delivery_method of this CustomStreamTarget1.
        :rtype: str
        """
        return self._source_delivery_method

    @source_delivery_method.setter
    def source_delivery_method(self, source_delivery_method):
        """Sets the source_delivery_method of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.

        :param source_delivery_method: The source_delivery_method of this CustomStreamTarget1.
        :type source_delivery_method: str
        """
        if source_delivery_method is None:
            raise ValueError("Invalid value for `source_delivery_method`, must not be `None`")

        self._source_delivery_method = source_delivery_method

    @property
    def source_url(self):
        """Gets the source_url of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The URL of a source IP camera or encoder connecting to the stream target.

        :return: The source_url of this CustomStreamTarget1.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this CustomStreamTarget1.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The URL of a source IP camera or encoder connecting to the stream target.

        :param source_url: The source_url of this CustomStreamTarget1.
        :type source_url: str
        """
        if source_url is None:
            raise ValueError("Invalid value for `source_url`, must not be `None`")

        self._source_url = source_url

    @property
    def type(self):
        """Gets the type of this CustomStreamTarget1.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :return: The type of this CustomStreamTarget1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomStreamTarget1.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :param type: The type of this CustomStreamTarget1.
        :type type: str
        """

        self._type = type
