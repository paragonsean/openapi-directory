# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomStreamTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_url: str=None, hds_playback_url: str=None, hls_playback_url: str=None, name: str=None, password: str=None, primary_url: str=None, provider: str=None, rtmp_playback_url: str=None, stream_name: str=None, type: str=None, username: str=None):
        """CustomStreamTarget - a model defined in OpenAPI

        :param backup_url: The backup_url of this CustomStreamTarget.
        :param hds_playback_url: The hds_playback_url of this CustomStreamTarget.
        :param hls_playback_url: The hls_playback_url of this CustomStreamTarget.
        :param name: The name of this CustomStreamTarget.
        :param password: The password of this CustomStreamTarget.
        :param primary_url: The primary_url of this CustomStreamTarget.
        :param provider: The provider of this CustomStreamTarget.
        :param rtmp_playback_url: The rtmp_playback_url of this CustomStreamTarget.
        :param stream_name: The stream_name of this CustomStreamTarget.
        :param type: The type of this CustomStreamTarget.
        :param username: The username of this CustomStreamTarget.
        """
        self.openapi_types = {
            'backup_url': str,
            'hds_playback_url': str,
            'hls_playback_url': str,
            'name': str,
            'password': str,
            'primary_url': str,
            'provider': str,
            'rtmp_playback_url': str,
            'stream_name': str,
            'type': str,
            'username': str
        }

        self.attribute_map = {
            'backup_url': 'backup_url',
            'hds_playback_url': 'hds_playback_url',
            'hls_playback_url': 'hls_playback_url',
            'name': 'name',
            'password': 'password',
            'primary_url': 'primary_url',
            'provider': 'provider',
            'rtmp_playback_url': 'rtmp_playback_url',
            'stream_name': 'stream_name',
            'type': 'type',
            'username': 'username'
        }

        self._backup_url = backup_url
        self._hds_playback_url = hds_playback_url
        self._hls_playback_url = hls_playback_url
        self._name = name
        self._password = password
        self._primary_url = primary_url
        self._provider = provider
        self._rtmp_playback_url = rtmp_playback_url
        self._stream_name = stream_name
        self._type = type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomStreamTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The custom_stream_target of this CustomStreamTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_url(self):
        """Gets the backup_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The backup RTMP ingest URL of the target, without the preceding protocol and without the trailing slash (/).

        :return: The backup_url of this CustomStreamTarget.
        :rtype: str
        """
        return self._backup_url

    @backup_url.setter
    def backup_url(self, backup_url):
        """Sets the backup_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The backup RTMP ingest URL of the target, without the preceding protocol and without the trailing slash (/).

        :param backup_url: The backup_url of this CustomStreamTarget.
        :type backup_url: str
        """

        self._backup_url = backup_url

    @property
    def hds_playback_url(self):
        """Gets the hds_playback_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. The web address that the target uses to play Adobe HDS streams.

        :return: The hds_playback_url of this CustomStreamTarget.
        :rtype: str
        """
        return self._hds_playback_url

    @hds_playback_url.setter
    def hds_playback_url(self, hds_playback_url):
        """Sets the hds_playback_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. The web address that the target uses to play Adobe HDS streams.

        :param hds_playback_url: The hds_playback_url of this CustomStreamTarget.
        :type hds_playback_url: str
        """

        self._hds_playback_url = hds_playback_url

    @property
    def hls_playback_url(self):
        """Gets the hls_playback_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play Apple HLS streams.

        :return: The hls_playback_url of this CustomStreamTarget.
        :rtype: str
        """
        return self._hls_playback_url

    @hls_playback_url.setter
    def hls_playback_url(self, hls_playback_url):
        """Sets the hls_playback_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play Apple HLS streams.

        :param hls_playback_url: The hls_playback_url of this CustomStreamTarget.
        :type hls_playback_url: str
        """

        self._hls_playback_url = hls_playback_url

    @property
    def name(self):
        """Gets the name of this CustomStreamTarget.

        A descriptive name for the stream target. Maximum 255 characters.

        :return: The name of this CustomStreamTarget.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomStreamTarget.

        A descriptive name for the stream target. Maximum 255 characters.

        :param name: The name of this CustomStreamTarget.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. A <em>username</em> must also be present. The password associated with the target username for RTMP authentication.

        :return: The password of this CustomStreamTarget.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. A <em>username</em> must also be present. The password associated with the target username for RTMP authentication.

        :param password: The password of this CustomStreamTarget.
        :type password: str
        """

        self._password = password

    @property
    def primary_url(self):
        """Gets the primary_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The primary RTMP ingest URL, without the preceding protocol and without the trailing slash (/).

        :return: The primary_url of this CustomStreamTarget.
        :rtype: str
        """
        return self._primary_url

    @primary_url.setter
    def primary_url(self, primary_url):
        """Sets the primary_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The primary RTMP ingest URL, without the preceding protocol and without the trailing slash (/).

        :param primary_url: The primary_url of this CustomStreamTarget.
        :type primary_url: str
        """
        if primary_url is None:
            raise ValueError("Invalid value for `primary_url`, must not be `None`")

        self._primary_url = primary_url

    @property
    def provider(self):
        """Gets the provider of this CustomStreamTarget.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :return: The provider of this CustomStreamTarget.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CustomStreamTarget.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :param provider: The provider of this CustomStreamTarget.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def rtmp_playback_url(self):
        """Gets the rtmp_playback_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.

        :return: The rtmp_playback_url of this CustomStreamTarget.
        :rtype: str
        """
        return self._rtmp_playback_url

    @rtmp_playback_url.setter
    def rtmp_playback_url(self, rtmp_playback_url):
        """Sets the rtmp_playback_url of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.

        :param rtmp_playback_url: The rtmp_playback_url of this CustomStreamTarget.
        :type rtmp_playback_url: str
        """

        self._rtmp_playback_url = rtmp_playback_url

    @property
    def stream_name(self):
        """Gets the stream_name of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The name of the stream as defined in the target's ingestion settings.

        :return: The stream_name of this CustomStreamTarget.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The name of the stream as defined in the target's ingestion settings.

        :param stream_name: The stream_name of this CustomStreamTarget.
        :type stream_name: str
        """
        if stream_name is None:
            raise ValueError("Invalid value for `stream_name`, must not be `None`")

        self._stream_name = stream_name

    @property
    def type(self):
        """Gets the type of this CustomStreamTarget.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :return: The type of this CustomStreamTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomStreamTarget.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :param type: The type of this CustomStreamTarget.
        :type type: str
        """

        self._type = type

    @property
    def username(self):
        """Gets the username of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.

        :return: The username of this CustomStreamTarget.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CustomStreamTarget.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.

        :param username: The username of this CustomStreamTarget.
        :type username: str
        """

        self._username = username
