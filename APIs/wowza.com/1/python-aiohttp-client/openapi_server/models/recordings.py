# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recording import Recording
from openapi_server import util


class Recordings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recordings: List[Recording]=None):
        """Recordings - a model defined in OpenAPI

        :param recordings: The recordings of this Recordings.
        """
        self.openapi_types = {
            'recordings': List[Recording]
        }

        self.attribute_map = {
            'recordings': 'recordings'
        }

        self._recordings = recordings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recordings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The recordings of this Recordings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recordings(self):
        """Gets the recordings of this Recordings.


        :return: The recordings of this Recordings.
        :rtype: List[Recording]
        """
        return self._recordings

    @recordings.setter
    def recordings(self, recordings):
        """Sets the recordings of this Recordings.


        :param recordings: The recordings of this Recordings.
        :type recordings: List[Recording]
        """
        if recordings is None:
            raise ValueError("Invalid value for `recordings`, must not be `None`")

        self._recordings = recordings
