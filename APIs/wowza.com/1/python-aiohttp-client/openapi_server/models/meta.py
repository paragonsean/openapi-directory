# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, links: List[str]=None, message: str=None, status: int=None, title: str=None):
        """Meta - a model defined in OpenAPI

        :param code: The code of this Meta.
        :param description: The description of this Meta.
        :param links: The links of this Meta.
        :param message: The message of this Meta.
        :param status: The status of this Meta.
        :param title: The title of this Meta.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'links': List[str],
            'message': str,
            'status': int,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'links': 'links',
            'message': 'message',
            'status': 'status',
            'title': 'title'
        }

        self._code = code
        self._description = description
        self._links = links
        self._message = message
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The meta of this Meta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Meta.


        :return: The code of this Meta.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Meta.


        :param code: The code of this Meta.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this Meta.


        :return: The description of this Meta.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Meta.


        :param description: The description of this Meta.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this Meta.


        :return: The links of this Meta.
        :rtype: List[str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Meta.


        :param links: The links of this Meta.
        :type links: List[str]
        """

        self._links = links

    @property
    def message(self):
        """Gets the message of this Meta.


        :return: The message of this Meta.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Meta.


        :param message: The message of this Meta.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this Meta.


        :return: The status of this Meta.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Meta.


        :param status: The status of this Meta.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Meta.


        :return: The title of this Meta.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Meta.


        :param title: The title of this Meta.
        :type title: str
        """

        self._title = title
