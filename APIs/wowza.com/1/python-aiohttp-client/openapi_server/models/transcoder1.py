# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_targets1 import StreamTargets1
from openapi_server import util


class Transcoder1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_targets: StreamTargets1=None):
        """Transcoder1 - a model defined in OpenAPI

        :param stream_targets: The stream_targets of this Transcoder1.
        """
        self.openapi_types = {
            'stream_targets': StreamTargets1
        }

        self.attribute_map = {
            'stream_targets': 'stream_targets'
        }

        self._stream_targets = stream_targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transcoder1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transcoder_1 of this Transcoder1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_targets(self):
        """Gets the stream_targets of this Transcoder1.


        :return: The stream_targets of this Transcoder1.
        :rtype: StreamTargets1
        """
        return self._stream_targets

    @stream_targets.setter
    def stream_targets(self, stream_targets):
        """Sets the stream_targets of this Transcoder1.


        :param stream_targets: The stream_targets of this Transcoder1.
        :type stream_targets: StreamTargets1
        """
        if stream_targets is None:
            raise ValueError("Invalid value for `stream_targets`, must not be `None`")

        self._stream_targets = stream_targets
