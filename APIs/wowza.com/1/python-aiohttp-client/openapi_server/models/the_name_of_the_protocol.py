# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TheNameOfTheProtocol(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, percentage_viewers: int=None, percentage_viewing_time: int=None, seconds_avg_viewing_time: int=None, seconds_total_viewing_time: int=None, total_unique_viewers: int=None):
        """TheNameOfTheProtocol - a model defined in OpenAPI

        :param name: The name of this TheNameOfTheProtocol.
        :param percentage_viewers: The percentage_viewers of this TheNameOfTheProtocol.
        :param percentage_viewing_time: The percentage_viewing_time of this TheNameOfTheProtocol.
        :param seconds_avg_viewing_time: The seconds_avg_viewing_time of this TheNameOfTheProtocol.
        :param seconds_total_viewing_time: The seconds_total_viewing_time of this TheNameOfTheProtocol.
        :param total_unique_viewers: The total_unique_viewers of this TheNameOfTheProtocol.
        """
        self.openapi_types = {
            'name': str,
            'percentage_viewers': int,
            'percentage_viewing_time': int,
            'seconds_avg_viewing_time': int,
            'seconds_total_viewing_time': int,
            'total_unique_viewers': int
        }

        self.attribute_map = {
            'name': 'name',
            'percentage_viewers': 'percentage_viewers',
            'percentage_viewing_time': 'percentage_viewing_time',
            'seconds_avg_viewing_time': 'seconds_avg_viewing_time',
            'seconds_total_viewing_time': 'seconds_total_viewing_time',
            'total_unique_viewers': 'total_unique_viewers'
        }

        self._name = name
        self._percentage_viewers = percentage_viewers
        self._percentage_viewing_time = percentage_viewing_time
        self._seconds_avg_viewing_time = seconds_avg_viewing_time
        self._seconds_total_viewing_time = seconds_total_viewing_time
        self._total_unique_viewers = total_unique_viewers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TheNameOfTheProtocol':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The The_name_of_the_protocol of this TheNameOfTheProtocol.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TheNameOfTheProtocol.

        The name of the protocol.

        :return: The name of this TheNameOfTheProtocol.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TheNameOfTheProtocol.

        The name of the protocol.

        :param name: The name of this TheNameOfTheProtocol.
        :type name: str
        """

        self._name = name

    @property
    def percentage_viewers(self):
        """Gets the percentage_viewers of this TheNameOfTheProtocol.

        Total percentage of viewers (<strong>100</strong>).

        :return: The percentage_viewers of this TheNameOfTheProtocol.
        :rtype: int
        """
        return self._percentage_viewers

    @percentage_viewers.setter
    def percentage_viewers(self, percentage_viewers):
        """Sets the percentage_viewers of this TheNameOfTheProtocol.

        Total percentage of viewers (<strong>100</strong>).

        :param percentage_viewers: The percentage_viewers of this TheNameOfTheProtocol.
        :type percentage_viewers: int
        """

        self._percentage_viewers = percentage_viewers

    @property
    def percentage_viewing_time(self):
        """Gets the percentage_viewing_time of this TheNameOfTheProtocol.

        The percentage of total viewing time that the protocol or rendition was viewed. Always <strong>100</strong> for <em>stream_target</em>.

        :return: The percentage_viewing_time of this TheNameOfTheProtocol.
        :rtype: int
        """
        return self._percentage_viewing_time

    @percentage_viewing_time.setter
    def percentage_viewing_time(self, percentage_viewing_time):
        """Sets the percentage_viewing_time of this TheNameOfTheProtocol.

        The percentage of total viewing time that the protocol or rendition was viewed. Always <strong>100</strong> for <em>stream_target</em>.

        :param percentage_viewing_time: The percentage_viewing_time of this TheNameOfTheProtocol.
        :type percentage_viewing_time: int
        """

        self._percentage_viewing_time = percentage_viewing_time

    @property
    def seconds_avg_viewing_time(self):
        """Gets the seconds_avg_viewing_time of this TheNameOfTheProtocol.

        The average length of time, in seconds, that viewers played the stream at the target.

        :return: The seconds_avg_viewing_time of this TheNameOfTheProtocol.
        :rtype: int
        """
        return self._seconds_avg_viewing_time

    @seconds_avg_viewing_time.setter
    def seconds_avg_viewing_time(self, seconds_avg_viewing_time):
        """Sets the seconds_avg_viewing_time of this TheNameOfTheProtocol.

        The average length of time, in seconds, that viewers played the stream at the target.

        :param seconds_avg_viewing_time: The seconds_avg_viewing_time of this TheNameOfTheProtocol.
        :type seconds_avg_viewing_time: int
        """

        self._seconds_avg_viewing_time = seconds_avg_viewing_time

    @property
    def seconds_total_viewing_time(self):
        """Gets the seconds_total_viewing_time of this TheNameOfTheProtocol.

        The total length of time, in seconds, that all viewers played the stream at the target. <em>seconds_total_viewing_time</em> may be longer than the duration of the stream.

        :return: The seconds_total_viewing_time of this TheNameOfTheProtocol.
        :rtype: int
        """
        return self._seconds_total_viewing_time

    @seconds_total_viewing_time.setter
    def seconds_total_viewing_time(self, seconds_total_viewing_time):
        """Sets the seconds_total_viewing_time of this TheNameOfTheProtocol.

        The total length of time, in seconds, that all viewers played the stream at the target. <em>seconds_total_viewing_time</em> may be longer than the duration of the stream.

        :param seconds_total_viewing_time: The seconds_total_viewing_time of this TheNameOfTheProtocol.
        :type seconds_total_viewing_time: int
        """

        self._seconds_total_viewing_time = seconds_total_viewing_time

    @property
    def total_unique_viewers(self):
        """Gets the total_unique_viewers of this TheNameOfTheProtocol.

        The total number of unique viewers that downloaded at least one chunk of the stream at the target (for HTTP streams) or connected to and viewed the stream (for ultra low latency streams). A unique viewer is a single IP address; multiple users that share the same IP address are counted once.

        :return: The total_unique_viewers of this TheNameOfTheProtocol.
        :rtype: int
        """
        return self._total_unique_viewers

    @total_unique_viewers.setter
    def total_unique_viewers(self, total_unique_viewers):
        """Sets the total_unique_viewers of this TheNameOfTheProtocol.

        The total number of unique viewers that downloaded at least one chunk of the stream at the target (for HTTP streams) or connected to and viewed the stream (for ultra low latency streams). A unique viewer is a single IP address; multiple users that share the same IP address are counted once.

        :param total_unique_viewers: The total_unique_viewers of this TheNameOfTheProtocol.
        :type total_unique_viewers: int
        """

        self._total_unique_viewers = total_unique_viewers
