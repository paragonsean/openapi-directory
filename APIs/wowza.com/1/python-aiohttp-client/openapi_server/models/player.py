# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Player(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countdown: bool=None, countdown_at: datetime=None, created_at: datetime=None, embed_code: str=None, hds_playback_url: str=None, hls_playback_url: str=None, hosted_page: bool=None, hosted_page_description: str=None, hosted_page_logo_image_url: str=None, hosted_page_sharing_icons: str=None, hosted_page_title: str=None, hosted_page_url: str=None, id: str=None, logo_image_url: str=None, logo_position: str=None, responsive: bool=None, transcoder_id: str=None, type: str=None, updated_at: datetime=None, video_poster_image_url: str=None, width: int=None):
        """Player - a model defined in OpenAPI

        :param countdown: The countdown of this Player.
        :param countdown_at: The countdown_at of this Player.
        :param created_at: The created_at of this Player.
        :param embed_code: The embed_code of this Player.
        :param hds_playback_url: The hds_playback_url of this Player.
        :param hls_playback_url: The hls_playback_url of this Player.
        :param hosted_page: The hosted_page of this Player.
        :param hosted_page_description: The hosted_page_description of this Player.
        :param hosted_page_logo_image_url: The hosted_page_logo_image_url of this Player.
        :param hosted_page_sharing_icons: The hosted_page_sharing_icons of this Player.
        :param hosted_page_title: The hosted_page_title of this Player.
        :param hosted_page_url: The hosted_page_url of this Player.
        :param id: The id of this Player.
        :param logo_image_url: The logo_image_url of this Player.
        :param logo_position: The logo_position of this Player.
        :param responsive: The responsive of this Player.
        :param transcoder_id: The transcoder_id of this Player.
        :param type: The type of this Player.
        :param updated_at: The updated_at of this Player.
        :param video_poster_image_url: The video_poster_image_url of this Player.
        :param width: The width of this Player.
        """
        self.openapi_types = {
            'countdown': bool,
            'countdown_at': datetime,
            'created_at': datetime,
            'embed_code': str,
            'hds_playback_url': str,
            'hls_playback_url': str,
            'hosted_page': bool,
            'hosted_page_description': str,
            'hosted_page_logo_image_url': str,
            'hosted_page_sharing_icons': str,
            'hosted_page_title': str,
            'hosted_page_url': str,
            'id': str,
            'logo_image_url': str,
            'logo_position': str,
            'responsive': bool,
            'transcoder_id': str,
            'type': str,
            'updated_at': datetime,
            'video_poster_image_url': str,
            'width': int
        }

        self.attribute_map = {
            'countdown': 'countdown',
            'countdown_at': 'countdown_at',
            'created_at': 'created_at',
            'embed_code': 'embed_code',
            'hds_playback_url': 'hds_playback_url',
            'hls_playback_url': 'hls_playback_url',
            'hosted_page': 'hosted_page',
            'hosted_page_description': 'hosted_page_description',
            'hosted_page_logo_image_url': 'hosted_page_logo_image_url',
            'hosted_page_sharing_icons': 'hosted_page_sharing_icons',
            'hosted_page_title': 'hosted_page_title',
            'hosted_page_url': 'hosted_page_url',
            'id': 'id',
            'logo_image_url': 'logo_image_url',
            'logo_position': 'logo_position',
            'responsive': 'responsive',
            'transcoder_id': 'transcoder_id',
            'type': 'type',
            'updated_at': 'updated_at',
            'video_poster_image_url': 'video_poster_image_url',
            'width': 'width'
        }

        self._countdown = countdown
        self._countdown_at = countdown_at
        self._created_at = created_at
        self._embed_code = embed_code
        self._hds_playback_url = hds_playback_url
        self._hls_playback_url = hls_playback_url
        self._hosted_page = hosted_page
        self._hosted_page_description = hosted_page_description
        self._hosted_page_logo_image_url = hosted_page_logo_image_url
        self._hosted_page_sharing_icons = hosted_page_sharing_icons
        self._hosted_page_title = hosted_page_title
        self._hosted_page_url = hosted_page_url
        self._id = id
        self._logo_image_url = logo_image_url
        self._logo_position = logo_position
        self._responsive = responsive
        self._transcoder_id = transcoder_id
        self._type = type
        self._updated_at = updated_at
        self._video_poster_image_url = video_poster_image_url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The player of this Player.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countdown(self):
        """Gets the countdown of this Player.

        A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.

        :return: The countdown of this Player.
        :rtype: bool
        """
        return self._countdown

    @countdown.setter
    def countdown(self, countdown):
        """Sets the countdown of this Player.

        A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.

        :param countdown: The countdown of this Player.
        :type countdown: bool
        """

        self._countdown = countdown

    @property
    def countdown_at(self):
        """Gets the countdown_at of this Player.

        The date and time that the event starts, used by the countdown clock. Enter <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC.

        :return: The countdown_at of this Player.
        :rtype: datetime
        """
        return self._countdown_at

    @countdown_at.setter
    def countdown_at(self, countdown_at):
        """Sets the countdown_at of this Player.

        The date and time that the event starts, used by the countdown clock. Enter <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC.

        :param countdown_at: The countdown_at of this Player.
        :type countdown_at: datetime
        """

        self._countdown_at = countdown_at

    @property
    def created_at(self):
        """Gets the created_at of this Player.

        The date and time that the player was created.

        :return: The created_at of this Player.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Player.

        The date and time that the player was created.

        :param created_at: The created_at of this Player.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def embed_code(self):
        """Gets the embed_code of this Player.

        The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.

        :return: The embed_code of this Player.
        :rtype: str
        """
        return self._embed_code

    @embed_code.setter
    def embed_code(self, embed_code):
        """Sets the embed_code of this Player.

        The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.

        :param embed_code: The embed_code of this Player.
        :type embed_code: str
        """

        self._embed_code = embed_code

    @property
    def hds_playback_url(self):
        """Gets the hds_playback_url of this Player.

        The address that can be used to configure playback of the stream using the Adobe HDS protocol.

        :return: The hds_playback_url of this Player.
        :rtype: str
        """
        return self._hds_playback_url

    @hds_playback_url.setter
    def hds_playback_url(self, hds_playback_url):
        """Sets the hds_playback_url of this Player.

        The address that can be used to configure playback of the stream using the Adobe HDS protocol.

        :param hds_playback_url: The hds_playback_url of this Player.
        :type hds_playback_url: str
        """

        self._hds_playback_url = hds_playback_url

    @property
    def hls_playback_url(self):
        """Gets the hls_playback_url of this Player.

        The address that can be used to configure playback of the stream using the Apple HLS protocol.

        :return: The hls_playback_url of this Player.
        :rtype: str
        """
        return self._hls_playback_url

    @hls_playback_url.setter
    def hls_playback_url(self, hls_playback_url):
        """Sets the hls_playback_url of this Player.

        The address that can be used to configure playback of the stream using the Apple HLS protocol.

        :param hls_playback_url: The hls_playback_url of this Player.
        :type hls_playback_url: str
        """

        self._hls_playback_url = hls_playback_url

    @property
    def hosted_page(self):
        """Gets the hosted_page of this Player.

        A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.

        :return: The hosted_page of this Player.
        :rtype: bool
        """
        return self._hosted_page

    @hosted_page.setter
    def hosted_page(self, hosted_page):
        """Sets the hosted_page of this Player.

        A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.

        :param hosted_page: The hosted_page of this Player.
        :type hosted_page: bool
        """

        self._hosted_page = hosted_page

    @property
    def hosted_page_description(self):
        """Gets the hosted_page_description of this Player.

        A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.

        :return: The hosted_page_description of this Player.
        :rtype: str
        """
        return self._hosted_page_description

    @hosted_page_description.setter
    def hosted_page_description(self, hosted_page_description):
        """Sets the hosted_page_description of this Player.

        A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.

        :param hosted_page_description: The hosted_page_description of this Player.
        :type hosted_page_description: str
        """

        self._hosted_page_description = hosted_page_description

    @property
    def hosted_page_logo_image_url(self):
        """Gets the hosted_page_logo_image_url of this Player.

        The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.

        :return: The hosted_page_logo_image_url of this Player.
        :rtype: str
        """
        return self._hosted_page_logo_image_url

    @hosted_page_logo_image_url.setter
    def hosted_page_logo_image_url(self, hosted_page_logo_image_url):
        """Sets the hosted_page_logo_image_url of this Player.

        The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.

        :param hosted_page_logo_image_url: The hosted_page_logo_image_url of this Player.
        :type hosted_page_logo_image_url: str
        """

        self._hosted_page_logo_image_url = hosted_page_logo_image_url

    @property
    def hosted_page_sharing_icons(self):
        """Gets the hosted_page_sharing_icons of this Player.

        Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.

        :return: The hosted_page_sharing_icons of this Player.
        :rtype: str
        """
        return self._hosted_page_sharing_icons

    @hosted_page_sharing_icons.setter
    def hosted_page_sharing_icons(self, hosted_page_sharing_icons):
        """Sets the hosted_page_sharing_icons of this Player.

        Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.

        :param hosted_page_sharing_icons: The hosted_page_sharing_icons of this Player.
        :type hosted_page_sharing_icons: str
        """

        self._hosted_page_sharing_icons = hosted_page_sharing_icons

    @property
    def hosted_page_title(self):
        """Gets the hosted_page_title of this Player.

        A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.

        :return: The hosted_page_title of this Player.
        :rtype: str
        """
        return self._hosted_page_title

    @hosted_page_title.setter
    def hosted_page_title(self, hosted_page_title):
        """Sets the hosted_page_title of this Player.

        A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.

        :param hosted_page_title: The hosted_page_title of this Player.
        :type hosted_page_title: str
        """

        self._hosted_page_title = hosted_page_title

    @property
    def hosted_page_url(self):
        """Gets the hosted_page_url of this Player.

        The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.

        :return: The hosted_page_url of this Player.
        :rtype: str
        """
        return self._hosted_page_url

    @hosted_page_url.setter
    def hosted_page_url(self, hosted_page_url):
        """Sets the hosted_page_url of this Player.

        The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.

        :param hosted_page_url: The hosted_page_url of this Player.
        :type hosted_page_url: str
        """

        self._hosted_page_url = hosted_page_url

    @property
    def id(self):
        """Gets the id of this Player.

        The unique alphanumeric string that identifies the player.

        :return: The id of this Player.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Player.

        The unique alphanumeric string that identifies the player.

        :param id: The id of this Player.
        :type id: str
        """

        self._id = id

    @property
    def logo_image_url(self):
        """Gets the logo_image_url of this Player.

        The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.

        :return: The logo_image_url of this Player.
        :rtype: str
        """
        return self._logo_image_url

    @logo_image_url.setter
    def logo_image_url(self, logo_image_url):
        """Sets the logo_image_url of this Player.

        The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.

        :param logo_image_url: The logo_image_url of this Player.
        :type logo_image_url: str
        """

        self._logo_image_url = logo_image_url

    @property
    def logo_position(self):
        """Gets the logo_position of this Player.

        The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.

        :return: The logo_position of this Player.
        :rtype: str
        """
        return self._logo_position

    @logo_position.setter
    def logo_position(self, logo_position):
        """Sets the logo_position of this Player.

        The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.

        :param logo_position: The logo_position of this Player.
        :type logo_position: str
        """

        self._logo_position = logo_position

    @property
    def responsive(self):
        """Gets the responsive of this Player.

        A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <strong>width</strong>.

        :return: The responsive of this Player.
        :rtype: bool
        """
        return self._responsive

    @responsive.setter
    def responsive(self, responsive):
        """Sets the responsive of this Player.

        A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <strong>width</strong>.

        :param responsive: The responsive of this Player.
        :type responsive: bool
        """

        self._responsive = responsive

    @property
    def transcoder_id(self):
        """Gets the transcoder_id of this Player.

        The unique alphanumeric string that identifies the transcoder.

        :return: The transcoder_id of this Player.
        :rtype: str
        """
        return self._transcoder_id

    @transcoder_id.setter
    def transcoder_id(self, transcoder_id):
        """Sets the transcoder_id of this Player.

        The unique alphanumeric string that identifies the transcoder.

        :param transcoder_id: The transcoder_id of this Player.
        :type transcoder_id: str
        """

        self._transcoder_id = transcoder_id

    @property
    def type(self):
        """Gets the type of this Player.

        The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <em>target_delivery_protocol</em> be <strong>hls-https</strong> and <em>closed_caption_type</em> be <strong>none</strong>. The default is <strong>original_html5</strong>.

        :return: The type of this Player.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Player.

        The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <em>target_delivery_protocol</em> be <strong>hls-https</strong> and <em>closed_caption_type</em> be <strong>none</strong>. The default is <strong>original_html5</strong>.

        :param type: The type of this Player.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Player.

        The date and time that the player was updated.

        :return: The updated_at of this Player.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Player.

        The date and time that the player was updated.

        :param updated_at: The updated_at of this Player.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def video_poster_image_url(self):
        """Gets the video_poster_image_url of this Player.

        The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.

        :return: The video_poster_image_url of this Player.
        :rtype: str
        """
        return self._video_poster_image_url

    @video_poster_image_url.setter
    def video_poster_image_url(self, video_poster_image_url):
        """Sets the video_poster_image_url of this Player.

        The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.

        :param video_poster_image_url: The video_poster_image_url of this Player.
        :type video_poster_image_url: str
        """

        self._video_poster_image_url = video_poster_image_url

    @property
    def width(self):
        """Gets the width of this Player.

        The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.

        :return: The width of this Player.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Player.

        The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.

        :param width: The width of this Player.
        :type width: int
        """

        self._width = width
