# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.limits import Limits
from openapi_server.models.shm_metrics import ShmMetrics
from openapi_server import util


class ShowUptimeMetricsCurrent200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current: ShmMetrics=None, limits: Limits=None):
        """ShowUptimeMetricsCurrent200Response - a model defined in OpenAPI

        :param current: The current of this ShowUptimeMetricsCurrent200Response.
        :param limits: The limits of this ShowUptimeMetricsCurrent200Response.
        """
        self.openapi_types = {
            'current': ShmMetrics,
            'limits': Limits
        }

        self.attribute_map = {
            'current': 'current',
            'limits': 'limits'
        }

        self._current = current
        self._limits = limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShowUptimeMetricsCurrent200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The showUptimeMetricsCurrent_200_response of this ShowUptimeMetricsCurrent200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self):
        """Gets the current of this ShowUptimeMetricsCurrent200Response.


        :return: The current of this ShowUptimeMetricsCurrent200Response.
        :rtype: ShmMetrics
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this ShowUptimeMetricsCurrent200Response.


        :param current: The current of this ShowUptimeMetricsCurrent200Response.
        :type current: ShmMetrics
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")

        self._current = current

    @property
    def limits(self):
        """Gets the limits of this ShowUptimeMetricsCurrent200Response.


        :return: The limits of this ShowUptimeMetricsCurrent200Response.
        :rtype: Limits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ShowUptimeMetricsCurrent200Response.


        :param limits: The limits of this ShowUptimeMetricsCurrent200Response.
        :type limits: Limits
        """
        if limits is None:
            raise ValueError("Invalid value for `limits`, must not be `None`")

        self._limits = limits
