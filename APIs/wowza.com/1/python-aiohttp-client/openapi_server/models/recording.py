# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, download_url: str=None, duration: int=None, file_name: str=None, file_size: int=None, id: str=None, reason: str=None, starts_at: str=None, state: str=None, transcoder_id: str=None, transcoder_name: str=None, transcoding_uptime_id: datetime=None, updated_at: datetime=None):
        """Recording - a model defined in OpenAPI

        :param created_at: The created_at of this Recording.
        :param download_url: The download_url of this Recording.
        :param duration: The duration of this Recording.
        :param file_name: The file_name of this Recording.
        :param file_size: The file_size of this Recording.
        :param id: The id of this Recording.
        :param reason: The reason of this Recording.
        :param starts_at: The starts_at of this Recording.
        :param state: The state of this Recording.
        :param transcoder_id: The transcoder_id of this Recording.
        :param transcoder_name: The transcoder_name of this Recording.
        :param transcoding_uptime_id: The transcoding_uptime_id of this Recording.
        :param updated_at: The updated_at of this Recording.
        """
        self.openapi_types = {
            'created_at': datetime,
            'download_url': str,
            'duration': int,
            'file_name': str,
            'file_size': int,
            'id': str,
            'reason': str,
            'starts_at': str,
            'state': str,
            'transcoder_id': str,
            'transcoder_name': str,
            'transcoding_uptime_id': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'download_url': 'download_url',
            'duration': 'duration',
            'file_name': 'file_name',
            'file_size': 'file_size',
            'id': 'id',
            'reason': 'reason',
            'starts_at': 'starts_at',
            'state': 'state',
            'transcoder_id': 'transcoder_id',
            'transcoder_name': 'transcoder_name',
            'transcoding_uptime_id': 'transcoding_uptime_id',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._download_url = download_url
        self._duration = duration
        self._file_name = file_name
        self._file_size = file_size
        self._id = id
        self._reason = reason
        self._starts_at = starts_at
        self._state = state
        self._transcoder_id = transcoder_id
        self._transcoder_name = transcoder_name
        self._transcoding_uptime_id = transcoding_uptime_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The recording of this Recording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Recording.

        The date and time that the recording was created.

        :return: The created_at of this Recording.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Recording.

        The date and time that the recording was created.

        :param created_at: The created_at of this Recording.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def download_url(self):
        """Gets the download_url of this Recording.

        The URL that can be used to download the recording.

        :return: The download_url of this Recording.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Recording.

        The URL that can be used to download the recording.

        :param download_url: The download_url of this Recording.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def duration(self):
        """Gets the duration of this Recording.

        The length of the recording, in hours, minutes, and seconds.

        :return: The duration of this Recording.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Recording.

        The length of the recording, in hours, minutes, and seconds.

        :param duration: The duration of this Recording.
        :type duration: int
        """

        self._duration = duration

    @property
    def file_name(self):
        """Gets the file_name of this Recording.

        The file name of the recording.

        :return: The file_name of this Recording.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Recording.

        The file name of the recording.

        :param file_name: The file_name of this Recording.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this Recording.

        The file size of the recording.

        :return: The file_size of this Recording.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Recording.

        The file size of the recording.

        :param file_size: The file_size of this Recording.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def id(self):
        """Gets the id of this Recording.

        The unique alphanumeric string that identifies the recording.

        :return: The id of this Recording.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recording.

        The unique alphanumeric string that identifies the recording.

        :param id: The id of this Recording.
        :type id: str
        """

        self._id = id

    @property
    def reason(self):
        """Gets the reason of this Recording.

        The reason that a recording has the state <strong>failed</strong>.

        :return: The reason of this Recording.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Recording.

        The reason that a recording has the state <strong>failed</strong>.

        :param reason: The reason of this Recording.
        :type reason: str
        """

        self._reason = reason

    @property
    def starts_at(self):
        """Gets the starts_at of this Recording.

        The date and time that the recording started.

        :return: The starts_at of this Recording.
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Recording.

        The date and time that the recording started.

        :param starts_at: The starts_at of this Recording.
        :type starts_at: str
        """

        self._starts_at = starts_at

    @property
    def state(self):
        """Gets the state of this Recording.

        The state of the recording.

        :return: The state of this Recording.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Recording.

        The state of the recording.

        :param state: The state of this Recording.
        :type state: str
        """
        allowed_values = ["uploading", "converting", "removing", "completed", "failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def transcoder_id(self):
        """Gets the transcoder_id of this Recording.

        The unique alphanumeric string that identifies the transcoder that was recorded.

        :return: The transcoder_id of this Recording.
        :rtype: str
        """
        return self._transcoder_id

    @transcoder_id.setter
    def transcoder_id(self, transcoder_id):
        """Sets the transcoder_id of this Recording.

        The unique alphanumeric string that identifies the transcoder that was recorded.

        :param transcoder_id: The transcoder_id of this Recording.
        :type transcoder_id: str
        """

        self._transcoder_id = transcoder_id

    @property
    def transcoder_name(self):
        """Gets the transcoder_name of this Recording.

        The descriptive name of the transcoder that was recorded.

        :return: The transcoder_name of this Recording.
        :rtype: str
        """
        return self._transcoder_name

    @transcoder_name.setter
    def transcoder_name(self, transcoder_name):
        """Sets the transcoder_name of this Recording.

        The descriptive name of the transcoder that was recorded.

        :param transcoder_name: The transcoder_name of this Recording.
        :type transcoder_name: str
        """

        self._transcoder_name = transcoder_name

    @property
    def transcoding_uptime_id(self):
        """Gets the transcoding_uptime_id of this Recording.

        The unique identifier associated with the transcoding uptime for this recording.

        :return: The transcoding_uptime_id of this Recording.
        :rtype: datetime
        """
        return self._transcoding_uptime_id

    @transcoding_uptime_id.setter
    def transcoding_uptime_id(self, transcoding_uptime_id):
        """Sets the transcoding_uptime_id of this Recording.

        The unique identifier associated with the transcoding uptime for this recording.

        :param transcoding_uptime_id: The transcoding_uptime_id of this Recording.
        :type transcoding_uptime_id: datetime
        """

        self._transcoding_uptime_id = transcoding_uptime_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Recording.

        The date and time that the recording was updated.

        :return: The updated_at of this Recording.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Recording.

        The date and time that the recording was updated.

        :param updated_at: The updated_at of this Recording.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
