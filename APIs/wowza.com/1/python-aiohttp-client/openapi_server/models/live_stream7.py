# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveStream7(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio_height: int=None, aspect_ratio_width: int=None, closed_caption_type: str=None, delivery_method: str=None, delivery_protocols: List[str]=None, disable_authentication: bool=None, encoder: str=None, hosted_page_description: str=None, hosted_page_logo_image: str=None, hosted_page_sharing_icons: bool=None, hosted_page_title: str=None, name: str=None, password: str=None, player_countdown: bool=None, player_countdown_at: datetime=None, player_logo_image: str=None, player_logo_position: str=None, player_responsive: bool=None, player_type: str=None, player_video_poster_image: str=None, player_width: int=None, recording: bool=None, remove_hosted_page_logo_image: bool=None, remove_player_logo_image: bool=None, remove_player_video_poster_image: bool=None, source_url: str=None, target_delivery_protocol: str=None, use_stream_source: bool=None, username: str=None, video_fallback: bool=None):
        """LiveStream7 - a model defined in OpenAPI

        :param aspect_ratio_height: The aspect_ratio_height of this LiveStream7.
        :param aspect_ratio_width: The aspect_ratio_width of this LiveStream7.
        :param closed_caption_type: The closed_caption_type of this LiveStream7.
        :param delivery_method: The delivery_method of this LiveStream7.
        :param delivery_protocols: The delivery_protocols of this LiveStream7.
        :param disable_authentication: The disable_authentication of this LiveStream7.
        :param encoder: The encoder of this LiveStream7.
        :param hosted_page_description: The hosted_page_description of this LiveStream7.
        :param hosted_page_logo_image: The hosted_page_logo_image of this LiveStream7.
        :param hosted_page_sharing_icons: The hosted_page_sharing_icons of this LiveStream7.
        :param hosted_page_title: The hosted_page_title of this LiveStream7.
        :param name: The name of this LiveStream7.
        :param password: The password of this LiveStream7.
        :param player_countdown: The player_countdown of this LiveStream7.
        :param player_countdown_at: The player_countdown_at of this LiveStream7.
        :param player_logo_image: The player_logo_image of this LiveStream7.
        :param player_logo_position: The player_logo_position of this LiveStream7.
        :param player_responsive: The player_responsive of this LiveStream7.
        :param player_type: The player_type of this LiveStream7.
        :param player_video_poster_image: The player_video_poster_image of this LiveStream7.
        :param player_width: The player_width of this LiveStream7.
        :param recording: The recording of this LiveStream7.
        :param remove_hosted_page_logo_image: The remove_hosted_page_logo_image of this LiveStream7.
        :param remove_player_logo_image: The remove_player_logo_image of this LiveStream7.
        :param remove_player_video_poster_image: The remove_player_video_poster_image of this LiveStream7.
        :param source_url: The source_url of this LiveStream7.
        :param target_delivery_protocol: The target_delivery_protocol of this LiveStream7.
        :param use_stream_source: The use_stream_source of this LiveStream7.
        :param username: The username of this LiveStream7.
        :param video_fallback: The video_fallback of this LiveStream7.
        """
        self.openapi_types = {
            'aspect_ratio_height': int,
            'aspect_ratio_width': int,
            'closed_caption_type': str,
            'delivery_method': str,
            'delivery_protocols': List[str],
            'disable_authentication': bool,
            'encoder': str,
            'hosted_page_description': str,
            'hosted_page_logo_image': str,
            'hosted_page_sharing_icons': bool,
            'hosted_page_title': str,
            'name': str,
            'password': str,
            'player_countdown': bool,
            'player_countdown_at': datetime,
            'player_logo_image': str,
            'player_logo_position': str,
            'player_responsive': bool,
            'player_type': str,
            'player_video_poster_image': str,
            'player_width': int,
            'recording': bool,
            'remove_hosted_page_logo_image': bool,
            'remove_player_logo_image': bool,
            'remove_player_video_poster_image': bool,
            'source_url': str,
            'target_delivery_protocol': str,
            'use_stream_source': bool,
            'username': str,
            'video_fallback': bool
        }

        self.attribute_map = {
            'aspect_ratio_height': 'aspect_ratio_height',
            'aspect_ratio_width': 'aspect_ratio_width',
            'closed_caption_type': 'closed_caption_type',
            'delivery_method': 'delivery_method',
            'delivery_protocols': 'delivery_protocols',
            'disable_authentication': 'disable_authentication',
            'encoder': 'encoder',
            'hosted_page_description': 'hosted_page_description',
            'hosted_page_logo_image': 'hosted_page_logo_image',
            'hosted_page_sharing_icons': 'hosted_page_sharing_icons',
            'hosted_page_title': 'hosted_page_title',
            'name': 'name',
            'password': 'password',
            'player_countdown': 'player_countdown',
            'player_countdown_at': 'player_countdown_at',
            'player_logo_image': 'player_logo_image',
            'player_logo_position': 'player_logo_position',
            'player_responsive': 'player_responsive',
            'player_type': 'player_type',
            'player_video_poster_image': 'player_video_poster_image',
            'player_width': 'player_width',
            'recording': 'recording',
            'remove_hosted_page_logo_image': 'remove_hosted_page_logo_image',
            'remove_player_logo_image': 'remove_player_logo_image',
            'remove_player_video_poster_image': 'remove_player_video_poster_image',
            'source_url': 'source_url',
            'target_delivery_protocol': 'target_delivery_protocol',
            'use_stream_source': 'use_stream_source',
            'username': 'username',
            'video_fallback': 'video_fallback'
        }

        self._aspect_ratio_height = aspect_ratio_height
        self._aspect_ratio_width = aspect_ratio_width
        self._closed_caption_type = closed_caption_type
        self._delivery_method = delivery_method
        self._delivery_protocols = delivery_protocols
        self._disable_authentication = disable_authentication
        self._encoder = encoder
        self._hosted_page_description = hosted_page_description
        self._hosted_page_logo_image = hosted_page_logo_image
        self._hosted_page_sharing_icons = hosted_page_sharing_icons
        self._hosted_page_title = hosted_page_title
        self._name = name
        self._password = password
        self._player_countdown = player_countdown
        self._player_countdown_at = player_countdown_at
        self._player_logo_image = player_logo_image
        self._player_logo_position = player_logo_position
        self._player_responsive = player_responsive
        self._player_type = player_type
        self._player_video_poster_image = player_video_poster_image
        self._player_width = player_width
        self._recording = recording
        self._remove_hosted_page_logo_image = remove_hosted_page_logo_image
        self._remove_player_logo_image = remove_player_logo_image
        self._remove_player_video_poster_image = remove_player_video_poster_image
        self._source_url = source_url
        self._target_delivery_protocol = target_delivery_protocol
        self._use_stream_source = use_stream_source
        self._username = username
        self._video_fallback = video_fallback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStream7':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The live_stream_7 of this LiveStream7.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio_height(self):
        """Gets the aspect_ratio_height of this LiveStream7.

        The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :return: The aspect_ratio_height of this LiveStream7.
        :rtype: int
        """
        return self._aspect_ratio_height

    @aspect_ratio_height.setter
    def aspect_ratio_height(self, aspect_ratio_height):
        """Sets the aspect_ratio_height of this LiveStream7.

        The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :param aspect_ratio_height: The aspect_ratio_height of this LiveStream7.
        :type aspect_ratio_height: int
        """
        if aspect_ratio_height is None:
            raise ValueError("Invalid value for `aspect_ratio_height`, must not be `None`")

        self._aspect_ratio_height = aspect_ratio_height

    @property
    def aspect_ratio_width(self):
        """Gets the aspect_ratio_width of this LiveStream7.

        The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :return: The aspect_ratio_width of this LiveStream7.
        :rtype: int
        """
        return self._aspect_ratio_width

    @aspect_ratio_width.setter
    def aspect_ratio_width(self, aspect_ratio_width):
        """Sets the aspect_ratio_width of this LiveStream7.

        The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :param aspect_ratio_width: The aspect_ratio_width of this LiveStream7.
        :type aspect_ratio_width: int
        """
        if aspect_ratio_width is None:
            raise ValueError("Invalid value for `aspect_ratio_width`, must not be `None`")

        self._aspect_ratio_width = aspect_ratio_width

    @property
    def closed_caption_type(self):
        """Gets the closed_caption_type of this LiveStream7.

        The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.

        :return: The closed_caption_type of this LiveStream7.
        :rtype: str
        """
        return self._closed_caption_type

    @closed_caption_type.setter
    def closed_caption_type(self, closed_caption_type):
        """Sets the closed_caption_type of this LiveStream7.

        The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.

        :param closed_caption_type: The closed_caption_type of this LiveStream7.
        :type closed_caption_type: str
        """
        allowed_values = ["none", "cea", "on_text", "both"]  # noqa: E501
        if closed_caption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_caption_type` ({0}), must be one of {1}"
                .format(closed_caption_type, allowed_values)
            )

        self._closed_caption_type = closed_caption_type

    @property
    def delivery_method(self):
        """Gets the delivery_method of this LiveStream7.

        The type of connection between the video source and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.

        :return: The delivery_method of this LiveStream7.
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this LiveStream7.

        The type of connection between the video source and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.

        :param delivery_method: The delivery_method of this LiveStream7.
        :type delivery_method: str
        """
        allowed_values = ["pull", "cdn", "push"]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def delivery_protocols(self):
        """Gets the delivery_protocols of this LiveStream7.

        An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.

        :return: The delivery_protocols of this LiveStream7.
        :rtype: List[str]
        """
        return self._delivery_protocols

    @delivery_protocols.setter
    def delivery_protocols(self, delivery_protocols):
        """Sets the delivery_protocols of this LiveStream7.

        An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.

        :param delivery_protocols: The delivery_protocols of this LiveStream7.
        :type delivery_protocols: List[str]
        """

        self._delivery_protocols = delivery_protocols

    @property
    def disable_authentication(self):
        """Gets the disable_authentication of this LiveStream7.

        Authentication is required by default for RTMP and RTSP push connections from a video source to Wowza Streaming Cloud. Specify <strong>true</strong> to disable authentication with the video source.

        :return: The disable_authentication of this LiveStream7.
        :rtype: bool
        """
        return self._disable_authentication

    @disable_authentication.setter
    def disable_authentication(self, disable_authentication):
        """Sets the disable_authentication of this LiveStream7.

        Authentication is required by default for RTMP and RTSP push connections from a video source to Wowza Streaming Cloud. Specify <strong>true</strong> to disable authentication with the video source.

        :param disable_authentication: The disable_authentication of this LiveStream7.
        :type disable_authentication: bool
        """

        self._disable_authentication = disable_authentication

    @property
    def encoder(self):
        """Gets the encoder of this LiveStream7.

        The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.

        :return: The encoder of this LiveStream7.
        :rtype: str
        """
        return self._encoder

    @encoder.setter
    def encoder(self, encoder):
        """Sets the encoder of this LiveStream7.

        The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.

        :param encoder: The encoder of this LiveStream7.
        :type encoder: str
        """
        allowed_values = ["wowza_streaming_engine", "wowza_gocoder", "media_ds", "axis", "epiphan", "hauppauge", "jvc", "live_u", "matrox", "newtek_tricaster", "osprey", "sony", "telestream_wirecast", "teradek_cube", "vmix", "x_split", "ipcamera", "other_rtmp", "other_rtsp"]  # noqa: E501
        if encoder not in allowed_values:
            raise ValueError(
                "Invalid value for `encoder` ({0}), must be one of {1}"
                .format(encoder, allowed_values)
            )

        self._encoder = encoder

    @property
    def hosted_page_description(self):
        """Gets the hosted_page_description of this LiveStream7.

        A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.

        :return: The hosted_page_description of this LiveStream7.
        :rtype: str
        """
        return self._hosted_page_description

    @hosted_page_description.setter
    def hosted_page_description(self, hosted_page_description):
        """Sets the hosted_page_description of this LiveStream7.

        A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.

        :param hosted_page_description: The hosted_page_description of this LiveStream7.
        :type hosted_page_description: str
        """

        self._hosted_page_description = hosted_page_description

    @property
    def hosted_page_logo_image(self):
        """Gets the hosted_page_logo_image of this LiveStream7.

        A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.

        :return: The hosted_page_logo_image of this LiveStream7.
        :rtype: str
        """
        return self._hosted_page_logo_image

    @hosted_page_logo_image.setter
    def hosted_page_logo_image(self, hosted_page_logo_image):
        """Sets the hosted_page_logo_image of this LiveStream7.

        A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.

        :param hosted_page_logo_image: The hosted_page_logo_image of this LiveStream7.
        :type hosted_page_logo_image: str
        """

        self._hosted_page_logo_image = hosted_page_logo_image

    @property
    def hosted_page_sharing_icons(self):
        """Gets the hosted_page_sharing_icons of this LiveStream7.

        Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.

        :return: The hosted_page_sharing_icons of this LiveStream7.
        :rtype: bool
        """
        return self._hosted_page_sharing_icons

    @hosted_page_sharing_icons.setter
    def hosted_page_sharing_icons(self, hosted_page_sharing_icons):
        """Sets the hosted_page_sharing_icons of this LiveStream7.

        Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.

        :param hosted_page_sharing_icons: The hosted_page_sharing_icons of this LiveStream7.
        :type hosted_page_sharing_icons: bool
        """

        self._hosted_page_sharing_icons = hosted_page_sharing_icons

    @property
    def hosted_page_title(self):
        """Gets the hosted_page_title of this LiveStream7.

        A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.

        :return: The hosted_page_title of this LiveStream7.
        :rtype: str
        """
        return self._hosted_page_title

    @hosted_page_title.setter
    def hosted_page_title(self, hosted_page_title):
        """Sets the hosted_page_title of this LiveStream7.

        A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.

        :param hosted_page_title: The hosted_page_title of this LiveStream7.
        :type hosted_page_title: str
        """

        self._hosted_page_title = hosted_page_title

    @property
    def name(self):
        """Gets the name of this LiveStream7.

        A descriptive name for the live stream. Maximum 200 characters.

        :return: The name of this LiveStream7.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveStream7.

        A descriptive name for the live stream. Maximum 200 characters.

        :param name: The name of this LiveStream7.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this LiveStream7.

        A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :return: The password of this LiveStream7.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LiveStream7.

        A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :param password: The password of this LiveStream7.
        :type password: str
        """

        self._password = password

    @property
    def player_countdown(self):
        """Gets the player_countdown of this LiveStream7.

        A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.

        :return: The player_countdown of this LiveStream7.
        :rtype: bool
        """
        return self._player_countdown

    @player_countdown.setter
    def player_countdown(self, player_countdown):
        """Sets the player_countdown of this LiveStream7.

        A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.

        :param player_countdown: The player_countdown of this LiveStream7.
        :type player_countdown: bool
        """

        self._player_countdown = player_countdown

    @property
    def player_countdown_at(self):
        """Gets the player_countdown_at of this LiveStream7.

        The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.

        :return: The player_countdown_at of this LiveStream7.
        :rtype: datetime
        """
        return self._player_countdown_at

    @player_countdown_at.setter
    def player_countdown_at(self, player_countdown_at):
        """Sets the player_countdown_at of this LiveStream7.

        The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.

        :param player_countdown_at: The player_countdown_at of this LiveStream7.
        :type player_countdown_at: datetime
        """

        self._player_countdown_at = player_countdown_at

    @property
    def player_logo_image(self):
        """Gets the player_logo_image of this LiveStream7.

        A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.

        :return: The player_logo_image of this LiveStream7.
        :rtype: str
        """
        return self._player_logo_image

    @player_logo_image.setter
    def player_logo_image(self, player_logo_image):
        """Sets the player_logo_image of this LiveStream7.

        A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.

        :param player_logo_image: The player_logo_image of this LiveStream7.
        :type player_logo_image: str
        """

        self._player_logo_image = player_logo_image

    @property
    def player_logo_position(self):
        """Gets the player_logo_position of this LiveStream7.

        The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.

        :return: The player_logo_position of this LiveStream7.
        :rtype: str
        """
        return self._player_logo_position

    @player_logo_position.setter
    def player_logo_position(self, player_logo_position):
        """Sets the player_logo_position of this LiveStream7.

        The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.

        :param player_logo_position: The player_logo_position of this LiveStream7.
        :type player_logo_position: str
        """
        allowed_values = ["top-left", "top-right", "bottom-left", "bottom-right"]  # noqa: E501
        if player_logo_position not in allowed_values:
            raise ValueError(
                "Invalid value for `player_logo_position` ({0}), must be one of {1}"
                .format(player_logo_position, allowed_values)
            )

        self._player_logo_position = player_logo_position

    @property
    def player_responsive(self):
        """Gets the player_responsive of this LiveStream7.

        A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.

        :return: The player_responsive of this LiveStream7.
        :rtype: bool
        """
        return self._player_responsive

    @player_responsive.setter
    def player_responsive(self, player_responsive):
        """Sets the player_responsive of this LiveStream7.

        A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.

        :param player_responsive: The player_responsive of this LiveStream7.
        :type player_responsive: bool
        """

        self._player_responsive = player_responsive

    @property
    def player_type(self):
        """Gets the player_type of this LiveStream7.

        The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.

        :return: The player_type of this LiveStream7.
        :rtype: str
        """
        return self._player_type

    @player_type.setter
    def player_type(self, player_type):
        """Sets the player_type of this LiveStream7.

        The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.

        :param player_type: The player_type of this LiveStream7.
        :type player_type: str
        """

        self._player_type = player_type

    @property
    def player_video_poster_image(self):
        """Gets the player_video_poster_image of this LiveStream7.

        A Base64-encoded string representation of a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.

        :return: The player_video_poster_image of this LiveStream7.
        :rtype: str
        """
        return self._player_video_poster_image

    @player_video_poster_image.setter
    def player_video_poster_image(self, player_video_poster_image):
        """Sets the player_video_poster_image of this LiveStream7.

        A Base64-encoded string representation of a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.

        :param player_video_poster_image: The player_video_poster_image of this LiveStream7.
        :type player_video_poster_image: str
        """

        self._player_video_poster_image = player_video_poster_image

    @property
    def player_width(self):
        """Gets the player_width of this LiveStream7.

        The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.

        :return: The player_width of this LiveStream7.
        :rtype: int
        """
        return self._player_width

    @player_width.setter
    def player_width(self, player_width):
        """Sets the player_width of this LiveStream7.

        The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.

        :param player_width: The player_width of this LiveStream7.
        :type player_width: int
        """

        self._player_width = player_width

    @property
    def recording(self):
        """Gets the recording of this LiveStream7.

        If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.

        :return: The recording of this LiveStream7.
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this LiveStream7.

        If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.

        :param recording: The recording of this LiveStream7.
        :type recording: bool
        """

        self._recording = recording

    @property
    def remove_hosted_page_logo_image(self):
        """Gets the remove_hosted_page_logo_image of this LiveStream7.

        If <strong>true</strong>, removes the logo file from the hosted page. The default is <strong>false</strong>.

        :return: The remove_hosted_page_logo_image of this LiveStream7.
        :rtype: bool
        """
        return self._remove_hosted_page_logo_image

    @remove_hosted_page_logo_image.setter
    def remove_hosted_page_logo_image(self, remove_hosted_page_logo_image):
        """Sets the remove_hosted_page_logo_image of this LiveStream7.

        If <strong>true</strong>, removes the logo file from the hosted page. The default is <strong>false</strong>.

        :param remove_hosted_page_logo_image: The remove_hosted_page_logo_image of this LiveStream7.
        :type remove_hosted_page_logo_image: bool
        """

        self._remove_hosted_page_logo_image = remove_hosted_page_logo_image

    @property
    def remove_player_logo_image(self):
        """Gets the remove_player_logo_image of this LiveStream7.

        If <strong>true</strong>, removes the logo file from the player. The default is <strong>false</strong>.

        :return: The remove_player_logo_image of this LiveStream7.
        :rtype: bool
        """
        return self._remove_player_logo_image

    @remove_player_logo_image.setter
    def remove_player_logo_image(self, remove_player_logo_image):
        """Sets the remove_player_logo_image of this LiveStream7.

        If <strong>true</strong>, removes the logo file from the player. The default is <strong>false</strong>.

        :param remove_player_logo_image: The remove_player_logo_image of this LiveStream7.
        :type remove_player_logo_image: bool
        """

        self._remove_player_logo_image = remove_player_logo_image

    @property
    def remove_player_video_poster_image(self):
        """Gets the remove_player_video_poster_image of this LiveStream7.

        If <strong>true</strong>, removes the poster image. The default is <strong>false</strong>.

        :return: The remove_player_video_poster_image of this LiveStream7.
        :rtype: bool
        """
        return self._remove_player_video_poster_image

    @remove_player_video_poster_image.setter
    def remove_player_video_poster_image(self, remove_player_video_poster_image):
        """Sets the remove_player_video_poster_image of this LiveStream7.

        If <strong>true</strong>, removes the poster image. The default is <strong>false</strong>.

        :param remove_player_video_poster_image: The remove_player_video_poster_image of this LiveStream7.
        :type remove_player_video_poster_image: bool
        """

        self._remove_player_video_poster_image = remove_player_video_poster_image

    @property
    def source_url(self):
        """Gets the source_url of this LiveStream7.

        The URL of an IP camera or video encoder using an RTMP and RTSP pull connection to Wowza Streaming Cloud. Consult the camera or encoder documentation for the URL syntax.

        :return: The source_url of this LiveStream7.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this LiveStream7.

        The URL of an IP camera or video encoder using an RTMP and RTSP pull connection to Wowza Streaming Cloud. Consult the camera or encoder documentation for the URL syntax.

        :param source_url: The source_url of this LiveStream7.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def target_delivery_protocol(self):
        """Gets the target_delivery_protocol of this LiveStream7.

        The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.

        :return: The target_delivery_protocol of this LiveStream7.
        :rtype: str
        """
        return self._target_delivery_protocol

    @target_delivery_protocol.setter
    def target_delivery_protocol(self, target_delivery_protocol):
        """Sets the target_delivery_protocol of this LiveStream7.

        The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.

        :param target_delivery_protocol: The target_delivery_protocol of this LiveStream7.
        :type target_delivery_protocol: str
        """
        allowed_values = ["hls-https", "hls-hds"]  # noqa: E501
        if target_delivery_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `target_delivery_protocol` ({0}), must be one of {1}"
                .format(target_delivery_protocol, allowed_values)
            )

        self._target_delivery_protocol = target_delivery_protocol

    @property
    def use_stream_source(self):
        """Gets the use_stream_source of this LiveStream7.

        If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.

        :return: The use_stream_source of this LiveStream7.
        :rtype: bool
        """
        return self._use_stream_source

    @use_stream_source.setter
    def use_stream_source(self, use_stream_source):
        """Sets the use_stream_source of this LiveStream7.

        If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.

        :param use_stream_source: The use_stream_source of this LiveStream7.
        :type use_stream_source: bool
        """

        self._use_stream_source = use_stream_source

    @property
    def username(self):
        """Gets the username of this LiveStream7.

        A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :return: The username of this LiveStream7.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LiveStream7.

        A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :param username: The username of this LiveStream7.
        :type username: str
        """

        self._username = username

    @property
    def video_fallback(self):
        """Gets the video_fallback of this LiveStream7.

        If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with HLS stream targets.

        :return: The video_fallback of this LiveStream7.
        :rtype: bool
        """
        return self._video_fallback

    @video_fallback.setter
    def video_fallback(self, video_fallback):
        """Sets the video_fallback of this LiveStream7.

        If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with HLS stream targets.

        :param video_fallback: The video_fallback of this LiveStream7.
        :type video_fallback: bool
        """

        self._video_fallback = video_fallback
