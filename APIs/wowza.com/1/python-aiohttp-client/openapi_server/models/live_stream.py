# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.playback_url import PlaybackUrl
from openapi_server.models.stream_targets2 import StreamTargets2
from openapi_server import util


class LiveStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio_height: int=None, aspect_ratio_width: int=None, billing_mode: str=None, broadcast_location: str=None, closed_caption_type: str=None, connection_code: str=None, connection_code_expires_at: datetime=None, created_at: datetime=None, delivery_method: str=None, delivery_protocol: str=None, delivery_protocols: List[str]=None, delivery_type: str=None, direct_playback_urls: List[PlaybackUrl]=None, encoder: str=None, hosted_page: bool=None, hosted_page_description: str=None, hosted_page_logo_image_url: str=None, hosted_page_sharing_icons: bool=None, hosted_page_title: str=None, hosted_page_url: str=None, id: str=None, low_latency: bool=None, name: str=None, player_countdown: bool=None, player_countdown_at: datetime=None, player_embed_code: str=None, player_hds_playback_url: str=None, player_hls_playback_url: str=None, player_id: str=None, player_logo_image_url: str=None, player_logo_position: str=None, player_responsive: bool=None, player_type: str=None, player_video_poster_image_url: str=None, player_width: int=None, recording: bool=None, source_connection_information: object=None, stream_source_id: str=None, stream_targets: List[StreamTargets2]=None, target_delivery_protocol: str=None, transcoder_type: str=None, updated_at: datetime=None, use_stream_source: bool=None, video_fallback: bool=None):
        """LiveStream - a model defined in OpenAPI

        :param aspect_ratio_height: The aspect_ratio_height of this LiveStream.
        :param aspect_ratio_width: The aspect_ratio_width of this LiveStream.
        :param billing_mode: The billing_mode of this LiveStream.
        :param broadcast_location: The broadcast_location of this LiveStream.
        :param closed_caption_type: The closed_caption_type of this LiveStream.
        :param connection_code: The connection_code of this LiveStream.
        :param connection_code_expires_at: The connection_code_expires_at of this LiveStream.
        :param created_at: The created_at of this LiveStream.
        :param delivery_method: The delivery_method of this LiveStream.
        :param delivery_protocol: The delivery_protocol of this LiveStream.
        :param delivery_protocols: The delivery_protocols of this LiveStream.
        :param delivery_type: The delivery_type of this LiveStream.
        :param direct_playback_urls: The direct_playback_urls of this LiveStream.
        :param encoder: The encoder of this LiveStream.
        :param hosted_page: The hosted_page of this LiveStream.
        :param hosted_page_description: The hosted_page_description of this LiveStream.
        :param hosted_page_logo_image_url: The hosted_page_logo_image_url of this LiveStream.
        :param hosted_page_sharing_icons: The hosted_page_sharing_icons of this LiveStream.
        :param hosted_page_title: The hosted_page_title of this LiveStream.
        :param hosted_page_url: The hosted_page_url of this LiveStream.
        :param id: The id of this LiveStream.
        :param low_latency: The low_latency of this LiveStream.
        :param name: The name of this LiveStream.
        :param player_countdown: The player_countdown of this LiveStream.
        :param player_countdown_at: The player_countdown_at of this LiveStream.
        :param player_embed_code: The player_embed_code of this LiveStream.
        :param player_hds_playback_url: The player_hds_playback_url of this LiveStream.
        :param player_hls_playback_url: The player_hls_playback_url of this LiveStream.
        :param player_id: The player_id of this LiveStream.
        :param player_logo_image_url: The player_logo_image_url of this LiveStream.
        :param player_logo_position: The player_logo_position of this LiveStream.
        :param player_responsive: The player_responsive of this LiveStream.
        :param player_type: The player_type of this LiveStream.
        :param player_video_poster_image_url: The player_video_poster_image_url of this LiveStream.
        :param player_width: The player_width of this LiveStream.
        :param recording: The recording of this LiveStream.
        :param source_connection_information: The source_connection_information of this LiveStream.
        :param stream_source_id: The stream_source_id of this LiveStream.
        :param stream_targets: The stream_targets of this LiveStream.
        :param target_delivery_protocol: The target_delivery_protocol of this LiveStream.
        :param transcoder_type: The transcoder_type of this LiveStream.
        :param updated_at: The updated_at of this LiveStream.
        :param use_stream_source: The use_stream_source of this LiveStream.
        :param video_fallback: The video_fallback of this LiveStream.
        """
        self.openapi_types = {
            'aspect_ratio_height': int,
            'aspect_ratio_width': int,
            'billing_mode': str,
            'broadcast_location': str,
            'closed_caption_type': str,
            'connection_code': str,
            'connection_code_expires_at': datetime,
            'created_at': datetime,
            'delivery_method': str,
            'delivery_protocol': str,
            'delivery_protocols': List[str],
            'delivery_type': str,
            'direct_playback_urls': List[PlaybackUrl],
            'encoder': str,
            'hosted_page': bool,
            'hosted_page_description': str,
            'hosted_page_logo_image_url': str,
            'hosted_page_sharing_icons': bool,
            'hosted_page_title': str,
            'hosted_page_url': str,
            'id': str,
            'low_latency': bool,
            'name': str,
            'player_countdown': bool,
            'player_countdown_at': datetime,
            'player_embed_code': str,
            'player_hds_playback_url': str,
            'player_hls_playback_url': str,
            'player_id': str,
            'player_logo_image_url': str,
            'player_logo_position': str,
            'player_responsive': bool,
            'player_type': str,
            'player_video_poster_image_url': str,
            'player_width': int,
            'recording': bool,
            'source_connection_information': object,
            'stream_source_id': str,
            'stream_targets': List[StreamTargets2],
            'target_delivery_protocol': str,
            'transcoder_type': str,
            'updated_at': datetime,
            'use_stream_source': bool,
            'video_fallback': bool
        }

        self.attribute_map = {
            'aspect_ratio_height': 'aspect_ratio_height',
            'aspect_ratio_width': 'aspect_ratio_width',
            'billing_mode': 'billing_mode',
            'broadcast_location': 'broadcast_location',
            'closed_caption_type': 'closed_caption_type',
            'connection_code': 'connection_code',
            'connection_code_expires_at': 'connection_code_expires_at',
            'created_at': 'created_at',
            'delivery_method': 'delivery_method',
            'delivery_protocol': 'delivery_protocol',
            'delivery_protocols': 'delivery_protocols',
            'delivery_type': 'delivery_type',
            'direct_playback_urls': 'direct_playback_urls',
            'encoder': 'encoder',
            'hosted_page': 'hosted_page',
            'hosted_page_description': 'hosted_page_description',
            'hosted_page_logo_image_url': 'hosted_page_logo_image_url',
            'hosted_page_sharing_icons': 'hosted_page_sharing_icons',
            'hosted_page_title': 'hosted_page_title',
            'hosted_page_url': 'hosted_page_url',
            'id': 'id',
            'low_latency': 'low_latency',
            'name': 'name',
            'player_countdown': 'player_countdown',
            'player_countdown_at': 'player_countdown_at',
            'player_embed_code': 'player_embed_code',
            'player_hds_playback_url': 'player_hds_playback_url',
            'player_hls_playback_url': 'player_hls_playback_url',
            'player_id': 'player_id',
            'player_logo_image_url': 'player_logo_image_url',
            'player_logo_position': 'player_logo_position',
            'player_responsive': 'player_responsive',
            'player_type': 'player_type',
            'player_video_poster_image_url': 'player_video_poster_image_url',
            'player_width': 'player_width',
            'recording': 'recording',
            'source_connection_information': 'source_connection_information',
            'stream_source_id': 'stream_source_id',
            'stream_targets': 'stream_targets',
            'target_delivery_protocol': 'target_delivery_protocol',
            'transcoder_type': 'transcoder_type',
            'updated_at': 'updated_at',
            'use_stream_source': 'use_stream_source',
            'video_fallback': 'video_fallback'
        }

        self._aspect_ratio_height = aspect_ratio_height
        self._aspect_ratio_width = aspect_ratio_width
        self._billing_mode = billing_mode
        self._broadcast_location = broadcast_location
        self._closed_caption_type = closed_caption_type
        self._connection_code = connection_code
        self._connection_code_expires_at = connection_code_expires_at
        self._created_at = created_at
        self._delivery_method = delivery_method
        self._delivery_protocol = delivery_protocol
        self._delivery_protocols = delivery_protocols
        self._delivery_type = delivery_type
        self._direct_playback_urls = direct_playback_urls
        self._encoder = encoder
        self._hosted_page = hosted_page
        self._hosted_page_description = hosted_page_description
        self._hosted_page_logo_image_url = hosted_page_logo_image_url
        self._hosted_page_sharing_icons = hosted_page_sharing_icons
        self._hosted_page_title = hosted_page_title
        self._hosted_page_url = hosted_page_url
        self._id = id
        self._low_latency = low_latency
        self._name = name
        self._player_countdown = player_countdown
        self._player_countdown_at = player_countdown_at
        self._player_embed_code = player_embed_code
        self._player_hds_playback_url = player_hds_playback_url
        self._player_hls_playback_url = player_hls_playback_url
        self._player_id = player_id
        self._player_logo_image_url = player_logo_image_url
        self._player_logo_position = player_logo_position
        self._player_responsive = player_responsive
        self._player_type = player_type
        self._player_video_poster_image_url = player_video_poster_image_url
        self._player_width = player_width
        self._recording = recording
        self._source_connection_information = source_connection_information
        self._stream_source_id = stream_source_id
        self._stream_targets = stream_targets
        self._target_delivery_protocol = target_delivery_protocol
        self._transcoder_type = transcoder_type
        self._updated_at = updated_at
        self._use_stream_source = use_stream_source
        self._video_fallback = video_fallback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The live_stream of this LiveStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio_height(self):
        """Gets the aspect_ratio_height of this LiveStream.

        The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :return: The aspect_ratio_height of this LiveStream.
        :rtype: int
        """
        return self._aspect_ratio_height

    @aspect_ratio_height.setter
    def aspect_ratio_height(self, aspect_ratio_height):
        """Sets the aspect_ratio_height of this LiveStream.

        The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :param aspect_ratio_height: The aspect_ratio_height of this LiveStream.
        :type aspect_ratio_height: int
        """

        self._aspect_ratio_height = aspect_ratio_height

    @property
    def aspect_ratio_width(self):
        """Gets the aspect_ratio_width of this LiveStream.

        The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :return: The aspect_ratio_width of this LiveStream.
        :rtype: int
        """
        return self._aspect_ratio_width

    @aspect_ratio_width.setter
    def aspect_ratio_width(self, aspect_ratio_width):
        """Sets the aspect_ratio_width of this LiveStream.

        The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.

        :param aspect_ratio_width: The aspect_ratio_width of this LiveStream.
        :type aspect_ratio_width: int
        """

        self._aspect_ratio_width = aspect_ratio_width

    @property
    def billing_mode(self):
        """Gets the billing_mode of this LiveStream.

        The billing mode for the stream. The default is <strong>pay_as_you_go</strong>.

        :return: The billing_mode of this LiveStream.
        :rtype: str
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode):
        """Sets the billing_mode of this LiveStream.

        The billing mode for the stream. The default is <strong>pay_as_you_go</strong>.

        :param billing_mode: The billing_mode of this LiveStream.
        :type billing_mode: str
        """
        allowed_values = ["pay_as_you_go", "twentyfour_seven"]  # noqa: E501
        if billing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_mode` ({0}), must be one of {1}"
                .format(billing_mode, allowed_values)
            )

        self._billing_mode = billing_mode

    @property
    def broadcast_location(self):
        """Gets the broadcast_location of this LiveStream.

        The location of your stream. Choose a location as close as possible to your video source.

        :return: The broadcast_location of this LiveStream.
        :rtype: str
        """
        return self._broadcast_location

    @broadcast_location.setter
    def broadcast_location(self, broadcast_location):
        """Sets the broadcast_location of this LiveStream.

        The location of your stream. Choose a location as close as possible to your video source.

        :param broadcast_location: The broadcast_location of this LiveStream.
        :type broadcast_location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if broadcast_location not in allowed_values:
            raise ValueError(
                "Invalid value for `broadcast_location` ({0}), must be one of {1}"
                .format(broadcast_location, allowed_values)
            )

        self._broadcast_location = broadcast_location

    @property
    def closed_caption_type(self):
        """Gets the closed_caption_type of this LiveStream.

        The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.

        :return: The closed_caption_type of this LiveStream.
        :rtype: str
        """
        return self._closed_caption_type

    @closed_caption_type.setter
    def closed_caption_type(self, closed_caption_type):
        """Sets the closed_caption_type of this LiveStream.

        The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.

        :param closed_caption_type: The closed_caption_type of this LiveStream.
        :type closed_caption_type: str
        """
        allowed_values = ["none", "cea", "on_text", "both"]  # noqa: E501
        if closed_caption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_caption_type` ({0}), must be one of {1}"
                .format(closed_caption_type, allowed_values)
            )

        self._closed_caption_type = closed_caption_type

    @property
    def connection_code(self):
        """Gets the connection_code of this LiveStream.

        A six-character, alphanumeric string that allows certain encoders, including Wowza Streaming Engine and the Wowza GoCoder app, to connect with Wowza Streaming Cloud. The code can be used once and expires 24 hours after it's created.

        :return: The connection_code of this LiveStream.
        :rtype: str
        """
        return self._connection_code

    @connection_code.setter
    def connection_code(self, connection_code):
        """Sets the connection_code of this LiveStream.

        A six-character, alphanumeric string that allows certain encoders, including Wowza Streaming Engine and the Wowza GoCoder app, to connect with Wowza Streaming Cloud. The code can be used once and expires 24 hours after it's created.

        :param connection_code: The connection_code of this LiveStream.
        :type connection_code: str
        """

        self._connection_code = connection_code

    @property
    def connection_code_expires_at(self):
        """Gets the connection_code_expires_at of this LiveStream.

        The date and time that the <em>connection_code</em> expires.

        :return: The connection_code_expires_at of this LiveStream.
        :rtype: datetime
        """
        return self._connection_code_expires_at

    @connection_code_expires_at.setter
    def connection_code_expires_at(self, connection_code_expires_at):
        """Sets the connection_code_expires_at of this LiveStream.

        The date and time that the <em>connection_code</em> expires.

        :param connection_code_expires_at: The connection_code_expires_at of this LiveStream.
        :type connection_code_expires_at: datetime
        """

        self._connection_code_expires_at = connection_code_expires_at

    @property
    def created_at(self):
        """Gets the created_at of this LiveStream.

        The date and time that the live stream was created.

        :return: The created_at of this LiveStream.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LiveStream.

        The date and time that the live stream was created.

        :param created_at: The created_at of this LiveStream.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def delivery_method(self):
        """Gets the delivery_method of this LiveStream.

        The type of connection between the video source and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.

        :return: The delivery_method of this LiveStream.
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this LiveStream.

        The type of connection between the video source and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.

        :param delivery_method: The delivery_method of this LiveStream.
        :type delivery_method: str
        """
        allowed_values = ["pull", "cdn", "push"]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def delivery_protocol(self):
        """Gets the delivery_protocol of this LiveStream.

        <strong>The <em>delivery_protocol</em> parameter is deprecated. To set the delivery protocol of a transcoder's target, use <em>target_delivery_protocol</em>.</strong>

        :return: The delivery_protocol of this LiveStream.
        :rtype: str
        """
        return self._delivery_protocol

    @delivery_protocol.setter
    def delivery_protocol(self, delivery_protocol):
        """Sets the delivery_protocol of this LiveStream.

        <strong>The <em>delivery_protocol</em> parameter is deprecated. To set the delivery protocol of a transcoder's target, use <em>target_delivery_protocol</em>.</strong>

        :param delivery_protocol: The delivery_protocol of this LiveStream.
        :type delivery_protocol: str
        """
        allowed_values = ["hls-https", "hls-hds"]  # noqa: E501
        if delivery_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_protocol` ({0}), must be one of {1}"
                .format(delivery_protocol, allowed_values)
            )

        self._delivery_protocol = delivery_protocol

    @property
    def delivery_protocols(self):
        """Gets the delivery_protocols of this LiveStream.

        An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.

        :return: The delivery_protocols of this LiveStream.
        :rtype: List[str]
        """
        return self._delivery_protocols

    @delivery_protocols.setter
    def delivery_protocols(self, delivery_protocols):
        """Sets the delivery_protocols of this LiveStream.

        An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.

        :param delivery_protocols: The delivery_protocols of this LiveStream.
        :type delivery_protocols: List[str]
        """

        self._delivery_protocols = delivery_protocols

    @property
    def delivery_type(self):
        """Gets the delivery_type of this LiveStream.

        For streams whose <em>encoder</em> is <strong>wowza_streaming_engine</strong>. The default is <strong>multi-bitrate</strong>, which means you're sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value <strong>single-bitrate</strong> means you're sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.

        :return: The delivery_type of this LiveStream.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this LiveStream.

        For streams whose <em>encoder</em> is <strong>wowza_streaming_engine</strong>. The default is <strong>multi-bitrate</strong>, which means you're sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value <strong>single-bitrate</strong> means you're sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.

        :param delivery_type: The delivery_type of this LiveStream.
        :type delivery_type: str
        """
        allowed_values = ["single-bitrate", "multi-bitrate"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def direct_playback_urls(self):
        """Gets the direct_playback_urls of this LiveStream.

        An array of direct playback URLs for the live stream's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.

        :return: The direct_playback_urls of this LiveStream.
        :rtype: List[PlaybackUrl]
        """
        return self._direct_playback_urls

    @direct_playback_urls.setter
    def direct_playback_urls(self, direct_playback_urls):
        """Sets the direct_playback_urls of this LiveStream.

        An array of direct playback URLs for the live stream's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.

        :param direct_playback_urls: The direct_playback_urls of this LiveStream.
        :type direct_playback_urls: List[PlaybackUrl]
        """

        self._direct_playback_urls = direct_playback_urls

    @property
    def encoder(self):
        """Gets the encoder of this LiveStream.

        The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.

        :return: The encoder of this LiveStream.
        :rtype: str
        """
        return self._encoder

    @encoder.setter
    def encoder(self, encoder):
        """Sets the encoder of this LiveStream.

        The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.

        :param encoder: The encoder of this LiveStream.
        :type encoder: str
        """
        allowed_values = ["wowza_streaming_engine", "wowza_gocoder", "media_ds", "axis", "epiphan", "hauppauge", "jvc", "live_u", "matrox", "newtek_tricaster", "osprey", "sony", "telestream_wirecast", "teradek_cube", "vmix", "x_split", "ipcamera", "other_rtmp", "other_rtsp"]  # noqa: E501
        if encoder not in allowed_values:
            raise ValueError(
                "Invalid value for `encoder` ({0}), must be one of {1}"
                .format(encoder, allowed_values)
            )

        self._encoder = encoder

    @property
    def hosted_page(self):
        """Gets the hosted_page of this LiveStream.

        A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.

        :return: The hosted_page of this LiveStream.
        :rtype: bool
        """
        return self._hosted_page

    @hosted_page.setter
    def hosted_page(self, hosted_page):
        """Sets the hosted_page of this LiveStream.

        A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.

        :param hosted_page: The hosted_page of this LiveStream.
        :type hosted_page: bool
        """

        self._hosted_page = hosted_page

    @property
    def hosted_page_description(self):
        """Gets the hosted_page_description of this LiveStream.

        A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.

        :return: The hosted_page_description of this LiveStream.
        :rtype: str
        """
        return self._hosted_page_description

    @hosted_page_description.setter
    def hosted_page_description(self, hosted_page_description):
        """Sets the hosted_page_description of this LiveStream.

        A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.

        :param hosted_page_description: The hosted_page_description of this LiveStream.
        :type hosted_page_description: str
        """

        self._hosted_page_description = hosted_page_description

    @property
    def hosted_page_logo_image_url(self):
        """Gets the hosted_page_logo_image_url of this LiveStream.

        The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.

        :return: The hosted_page_logo_image_url of this LiveStream.
        :rtype: str
        """
        return self._hosted_page_logo_image_url

    @hosted_page_logo_image_url.setter
    def hosted_page_logo_image_url(self, hosted_page_logo_image_url):
        """Sets the hosted_page_logo_image_url of this LiveStream.

        The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.

        :param hosted_page_logo_image_url: The hosted_page_logo_image_url of this LiveStream.
        :type hosted_page_logo_image_url: str
        """

        self._hosted_page_logo_image_url = hosted_page_logo_image_url

    @property
    def hosted_page_sharing_icons(self):
        """Gets the hosted_page_sharing_icons of this LiveStream.

        Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.

        :return: The hosted_page_sharing_icons of this LiveStream.
        :rtype: bool
        """
        return self._hosted_page_sharing_icons

    @hosted_page_sharing_icons.setter
    def hosted_page_sharing_icons(self, hosted_page_sharing_icons):
        """Sets the hosted_page_sharing_icons of this LiveStream.

        Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.

        :param hosted_page_sharing_icons: The hosted_page_sharing_icons of this LiveStream.
        :type hosted_page_sharing_icons: bool
        """

        self._hosted_page_sharing_icons = hosted_page_sharing_icons

    @property
    def hosted_page_title(self):
        """Gets the hosted_page_title of this LiveStream.

        A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.

        :return: The hosted_page_title of this LiveStream.
        :rtype: str
        """
        return self._hosted_page_title

    @hosted_page_title.setter
    def hosted_page_title(self, hosted_page_title):
        """Sets the hosted_page_title of this LiveStream.

        A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.

        :param hosted_page_title: The hosted_page_title of this LiveStream.
        :type hosted_page_title: str
        """

        self._hosted_page_title = hosted_page_title

    @property
    def hosted_page_url(self):
        """Gets the hosted_page_url of this LiveStream.

        The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.

        :return: The hosted_page_url of this LiveStream.
        :rtype: str
        """
        return self._hosted_page_url

    @hosted_page_url.setter
    def hosted_page_url(self, hosted_page_url):
        """Sets the hosted_page_url of this LiveStream.

        The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.

        :param hosted_page_url: The hosted_page_url of this LiveStream.
        :type hosted_page_url: str
        """

        self._hosted_page_url = hosted_page_url

    @property
    def id(self):
        """Gets the id of this LiveStream.

        The unique alphanumeric string that identifies the live stream.

        :return: The id of this LiveStream.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiveStream.

        The unique alphanumeric string that identifies the live stream.

        :param id: The id of this LiveStream.
        :type id: str
        """

        self._id = id

    @property
    def low_latency(self):
        """Gets the low_latency of this LiveStream.

        For streams whose <em>target_delivery_protocol</em> is <strong>hls-https</strong>. If <strong>true</strong>, turns off incoming and sort packet buffers and delivers smaller video packets to the player, which can reduce latency as long as networks can handle the increased overhead. The default is <strong>false</strong>. <br /><br />This parameter only affects streams played over a target whose <em>type</em> is <strong>WowzaStreamTarget</strong> and whose <em>provider</em> is <strong>akamai_cupertino</strong>. It does <em>not</em> reduce latency in streams played over a hosted page and is unrelated to Wowza ultra low latency stream targets.

        :return: The low_latency of this LiveStream.
        :rtype: bool
        """
        return self._low_latency

    @low_latency.setter
    def low_latency(self, low_latency):
        """Sets the low_latency of this LiveStream.

        For streams whose <em>target_delivery_protocol</em> is <strong>hls-https</strong>. If <strong>true</strong>, turns off incoming and sort packet buffers and delivers smaller video packets to the player, which can reduce latency as long as networks can handle the increased overhead. The default is <strong>false</strong>. <br /><br />This parameter only affects streams played over a target whose <em>type</em> is <strong>WowzaStreamTarget</strong> and whose <em>provider</em> is <strong>akamai_cupertino</strong>. It does <em>not</em> reduce latency in streams played over a hosted page and is unrelated to Wowza ultra low latency stream targets.

        :param low_latency: The low_latency of this LiveStream.
        :type low_latency: bool
        """

        self._low_latency = low_latency

    @property
    def name(self):
        """Gets the name of this LiveStream.

        A descriptive name for the live stream. Maximum 200 characters.

        :return: The name of this LiveStream.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveStream.

        A descriptive name for the live stream. Maximum 200 characters.

        :param name: The name of this LiveStream.
        :type name: str
        """

        self._name = name

    @property
    def player_countdown(self):
        """Gets the player_countdown of this LiveStream.

        A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.

        :return: The player_countdown of this LiveStream.
        :rtype: bool
        """
        return self._player_countdown

    @player_countdown.setter
    def player_countdown(self, player_countdown):
        """Sets the player_countdown of this LiveStream.

        A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.

        :param player_countdown: The player_countdown of this LiveStream.
        :type player_countdown: bool
        """

        self._player_countdown = player_countdown

    @property
    def player_countdown_at(self):
        """Gets the player_countdown_at of this LiveStream.

        The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.

        :return: The player_countdown_at of this LiveStream.
        :rtype: datetime
        """
        return self._player_countdown_at

    @player_countdown_at.setter
    def player_countdown_at(self, player_countdown_at):
        """Sets the player_countdown_at of this LiveStream.

        The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.

        :param player_countdown_at: The player_countdown_at of this LiveStream.
        :type player_countdown_at: datetime
        """

        self._player_countdown_at = player_countdown_at

    @property
    def player_embed_code(self):
        """Gets the player_embed_code of this LiveStream.

        The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.

        :return: The player_embed_code of this LiveStream.
        :rtype: str
        """
        return self._player_embed_code

    @player_embed_code.setter
    def player_embed_code(self, player_embed_code):
        """Sets the player_embed_code of this LiveStream.

        The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.

        :param player_embed_code: The player_embed_code of this LiveStream.
        :type player_embed_code: str
        """

        self._player_embed_code = player_embed_code

    @property
    def player_hds_playback_url(self):
        """Gets the player_hds_playback_url of this LiveStream.

        The address that can be used to configure playback of the stream using the Adobe HDS protocol.

        :return: The player_hds_playback_url of this LiveStream.
        :rtype: str
        """
        return self._player_hds_playback_url

    @player_hds_playback_url.setter
    def player_hds_playback_url(self, player_hds_playback_url):
        """Sets the player_hds_playback_url of this LiveStream.

        The address that can be used to configure playback of the stream using the Adobe HDS protocol.

        :param player_hds_playback_url: The player_hds_playback_url of this LiveStream.
        :type player_hds_playback_url: str
        """

        self._player_hds_playback_url = player_hds_playback_url

    @property
    def player_hls_playback_url(self):
        """Gets the player_hls_playback_url of this LiveStream.

        The address that can be used to configure playback of the stream using the Apple HLS protocol.

        :return: The player_hls_playback_url of this LiveStream.
        :rtype: str
        """
        return self._player_hls_playback_url

    @player_hls_playback_url.setter
    def player_hls_playback_url(self, player_hls_playback_url):
        """Sets the player_hls_playback_url of this LiveStream.

        The address that can be used to configure playback of the stream using the Apple HLS protocol.

        :param player_hls_playback_url: The player_hls_playback_url of this LiveStream.
        :type player_hls_playback_url: str
        """

        self._player_hls_playback_url = player_hls_playback_url

    @property
    def player_id(self):
        """Gets the player_id of this LiveStream.

        The unique alphanumeric string that identifies the player.

        :return: The player_id of this LiveStream.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this LiveStream.

        The unique alphanumeric string that identifies the player.

        :param player_id: The player_id of this LiveStream.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def player_logo_image_url(self):
        """Gets the player_logo_image_url of this LiveStream.

        The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.

        :return: The player_logo_image_url of this LiveStream.
        :rtype: str
        """
        return self._player_logo_image_url

    @player_logo_image_url.setter
    def player_logo_image_url(self, player_logo_image_url):
        """Sets the player_logo_image_url of this LiveStream.

        The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.

        :param player_logo_image_url: The player_logo_image_url of this LiveStream.
        :type player_logo_image_url: str
        """

        self._player_logo_image_url = player_logo_image_url

    @property
    def player_logo_position(self):
        """Gets the player_logo_position of this LiveStream.

        The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.

        :return: The player_logo_position of this LiveStream.
        :rtype: str
        """
        return self._player_logo_position

    @player_logo_position.setter
    def player_logo_position(self, player_logo_position):
        """Sets the player_logo_position of this LiveStream.

        The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.

        :param player_logo_position: The player_logo_position of this LiveStream.
        :type player_logo_position: str
        """
        allowed_values = ["top-left", "top-right", "bottom-left", "bottom-right"]  # noqa: E501
        if player_logo_position not in allowed_values:
            raise ValueError(
                "Invalid value for `player_logo_position` ({0}), must be one of {1}"
                .format(player_logo_position, allowed_values)
            )

        self._player_logo_position = player_logo_position

    @property
    def player_responsive(self):
        """Gets the player_responsive of this LiveStream.

        A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.

        :return: The player_responsive of this LiveStream.
        :rtype: bool
        """
        return self._player_responsive

    @player_responsive.setter
    def player_responsive(self, player_responsive):
        """Sets the player_responsive of this LiveStream.

        A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.

        :param player_responsive: The player_responsive of this LiveStream.
        :type player_responsive: bool
        """

        self._player_responsive = player_responsive

    @property
    def player_type(self):
        """Gets the player_type of this LiveStream.

        The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.

        :return: The player_type of this LiveStream.
        :rtype: str
        """
        return self._player_type

    @player_type.setter
    def player_type(self, player_type):
        """Sets the player_type of this LiveStream.

        The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.

        :param player_type: The player_type of this LiveStream.
        :type player_type: str
        """

        self._player_type = player_type

    @property
    def player_video_poster_image_url(self):
        """Gets the player_video_poster_image_url of this LiveStream.

        The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.

        :return: The player_video_poster_image_url of this LiveStream.
        :rtype: str
        """
        return self._player_video_poster_image_url

    @player_video_poster_image_url.setter
    def player_video_poster_image_url(self, player_video_poster_image_url):
        """Sets the player_video_poster_image_url of this LiveStream.

        The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.

        :param player_video_poster_image_url: The player_video_poster_image_url of this LiveStream.
        :type player_video_poster_image_url: str
        """

        self._player_video_poster_image_url = player_video_poster_image_url

    @property
    def player_width(self):
        """Gets the player_width of this LiveStream.

        The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.

        :return: The player_width of this LiveStream.
        :rtype: int
        """
        return self._player_width

    @player_width.setter
    def player_width(self, player_width):
        """Sets the player_width of this LiveStream.

        The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.

        :param player_width: The player_width of this LiveStream.
        :type player_width: int
        """

        self._player_width = player_width

    @property
    def recording(self):
        """Gets the recording of this LiveStream.

        If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.

        :return: The recording of this LiveStream.
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this LiveStream.

        If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.

        :param recording: The recording of this LiveStream.
        :type recording: bool
        """

        self._recording = recording

    @property
    def source_connection_information(self):
        """Gets the source_connection_information of this LiveStream.

        Details that you can use to manually configure and connect a video source to the live stream.

        :return: The source_connection_information of this LiveStream.
        :rtype: object
        """
        return self._source_connection_information

    @source_connection_information.setter
    def source_connection_information(self, source_connection_information):
        """Sets the source_connection_information of this LiveStream.

        Details that you can use to manually configure and connect a video source to the live stream.

        :param source_connection_information: The source_connection_information of this LiveStream.
        :type source_connection_information: object
        """

        self._source_connection_information = source_connection_information

    @property
    def stream_source_id(self):
        """Gets the stream_source_id of this LiveStream.

        The unique alphanumeric string that identifies the stream source, if a stream source is used.

        :return: The stream_source_id of this LiveStream.
        :rtype: str
        """
        return self._stream_source_id

    @stream_source_id.setter
    def stream_source_id(self, stream_source_id):
        """Sets the stream_source_id of this LiveStream.

        The unique alphanumeric string that identifies the stream source, if a stream source is used.

        :param stream_source_id: The stream_source_id of this LiveStream.
        :type stream_source_id: str
        """

        self._stream_source_id = stream_source_id

    @property
    def stream_targets(self):
        """Gets the stream_targets of this LiveStream.

        An array of unique alphanumeric strings that identify the stream targets used by the live stream.

        :return: The stream_targets of this LiveStream.
        :rtype: List[StreamTargets2]
        """
        return self._stream_targets

    @stream_targets.setter
    def stream_targets(self, stream_targets):
        """Sets the stream_targets of this LiveStream.

        An array of unique alphanumeric strings that identify the stream targets used by the live stream.

        :param stream_targets: The stream_targets of this LiveStream.
        :type stream_targets: List[StreamTargets2]
        """

        self._stream_targets = stream_targets

    @property
    def target_delivery_protocol(self):
        """Gets the target_delivery_protocol of this LiveStream.

        The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.

        :return: The target_delivery_protocol of this LiveStream.
        :rtype: str
        """
        return self._target_delivery_protocol

    @target_delivery_protocol.setter
    def target_delivery_protocol(self, target_delivery_protocol):
        """Sets the target_delivery_protocol of this LiveStream.

        The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.

        :param target_delivery_protocol: The target_delivery_protocol of this LiveStream.
        :type target_delivery_protocol: str
        """
        allowed_values = ["hls-https", "hls-hds"]  # noqa: E501
        if target_delivery_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `target_delivery_protocol` ({0}), must be one of {1}"
                .format(target_delivery_protocol, allowed_values)
            )

        self._target_delivery_protocol = target_delivery_protocol

    @property
    def transcoder_type(self):
        """Gets the transcoder_type of this LiveStream.

        The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.

        :return: The transcoder_type of this LiveStream.
        :rtype: str
        """
        return self._transcoder_type

    @transcoder_type.setter
    def transcoder_type(self, transcoder_type):
        """Sets the transcoder_type of this LiveStream.

        The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.

        :param transcoder_type: The transcoder_type of this LiveStream.
        :type transcoder_type: str
        """
        allowed_values = ["transcoded", "passthrough"]  # noqa: E501
        if transcoder_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transcoder_type` ({0}), must be one of {1}"
                .format(transcoder_type, allowed_values)
            )

        self._transcoder_type = transcoder_type

    @property
    def updated_at(self):
        """Gets the updated_at of this LiveStream.

        The date and time that the live stream was updated.

        :return: The updated_at of this LiveStream.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LiveStream.

        The date and time that the live stream was updated.

        :param updated_at: The updated_at of this LiveStream.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def use_stream_source(self):
        """Gets the use_stream_source of this LiveStream.

        If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.

        :return: The use_stream_source of this LiveStream.
        :rtype: bool
        """
        return self._use_stream_source

    @use_stream_source.setter
    def use_stream_source(self, use_stream_source):
        """Sets the use_stream_source of this LiveStream.

        If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.

        :param use_stream_source: The use_stream_source of this LiveStream.
        :type use_stream_source: bool
        """

        self._use_stream_source = use_stream_source

    @property
    def video_fallback(self):
        """Gets the video_fallback of this LiveStream.

        If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with HLS stream targets.

        :return: The video_fallback of this LiveStream.
        :rtype: bool
        """
        return self._video_fallback

    @video_fallback.setter
    def video_fallback(self, video_fallback):
        """Sets the video_fallback of this LiveStream.

        If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with HLS stream targets.

        :param video_fallback: The video_fallback of this LiveStream.
        :type video_fallback: bool
        """

        self._video_fallback = video_fallback
