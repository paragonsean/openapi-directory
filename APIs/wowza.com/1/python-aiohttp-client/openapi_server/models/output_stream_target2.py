# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputStreamTarget2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_target_id: str=None):
        """OutputStreamTarget2 - a model defined in OpenAPI

        :param stream_target_id: The stream_target_id of this OutputStreamTarget2.
        """
        self.openapi_types = {
            'stream_target_id': str
        }

        self.attribute_map = {
            'stream_target_id': 'stream_target_id'
        }

        self._stream_target_id = stream_target_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputStreamTarget2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The output_stream_target_2 of this OutputStreamTarget2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_target_id(self):
        """Gets the stream_target_id of this OutputStreamTarget2.

        The unique alphanumeric string that identifies the stream target.

        :return: The stream_target_id of this OutputStreamTarget2.
        :rtype: str
        """
        return self._stream_target_id

    @stream_target_id.setter
    def stream_target_id(self, stream_target_id):
        """Sets the stream_target_id of this OutputStreamTarget2.

        The unique alphanumeric string that identifies the stream target.

        :param stream_target_id: The stream_target_id of this OutputStreamTarget2.
        :type stream_target_id: str
        """
        if stream_target_id is None:
            raise ValueError("Invalid value for `stream_target_id`, must not be `None`")

        self._stream_target_id = stream_target_id
