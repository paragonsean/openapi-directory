# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Spec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_path: str=None, consumes: List[str]=None, definitions: object=None, external_docs: object=None, host: str=None, info: object=None, paths: object=None, produces: List[str]=None, schemes: List[str]=None, security: List[object]=None, security_definitions: object=None, swagger: str=None, tags: List[object]=None, x_tag_groups: List[object]=None):
        """Spec - a model defined in OpenAPI

        :param base_path: The base_path of this Spec.
        :param consumes: The consumes of this Spec.
        :param definitions: The definitions of this Spec.
        :param external_docs: The external_docs of this Spec.
        :param host: The host of this Spec.
        :param info: The info of this Spec.
        :param paths: The paths of this Spec.
        :param produces: The produces of this Spec.
        :param schemes: The schemes of this Spec.
        :param security: The security of this Spec.
        :param security_definitions: The security_definitions of this Spec.
        :param swagger: The swagger of this Spec.
        :param tags: The tags of this Spec.
        :param x_tag_groups: The x_tag_groups of this Spec.
        """
        self.openapi_types = {
            'base_path': str,
            'consumes': List[str],
            'definitions': object,
            'external_docs': object,
            'host': str,
            'info': object,
            'paths': object,
            'produces': List[str],
            'schemes': List[str],
            'security': List[object],
            'security_definitions': object,
            'swagger': str,
            'tags': List[object],
            'x_tag_groups': List[object]
        }

        self.attribute_map = {
            'base_path': 'basePath',
            'consumes': 'consumes',
            'definitions': 'definitions',
            'external_docs': 'externalDocs',
            'host': 'host',
            'info': 'info',
            'paths': 'paths',
            'produces': 'produces',
            'schemes': 'schemes',
            'security': 'security',
            'security_definitions': 'securityDefinitions',
            'swagger': 'swagger',
            'tags': 'tags',
            'x_tag_groups': 'x-tagGroups'
        }

        self._base_path = base_path
        self._consumes = consumes
        self._definitions = definitions
        self._external_docs = external_docs
        self._host = host
        self._info = info
        self._paths = paths
        self._produces = produces
        self._schemes = schemes
        self._security = security
        self._security_definitions = security_definitions
        self._swagger = swagger
        self._tags = tags
        self._x_tag_groups = x_tag_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Spec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Spec of this Spec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_path(self):
        """Gets the base_path of this Spec.

        The base path on which the API is served, relative to the **host**.

        :return: The base_path of this Spec.
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this Spec.

        The base path on which the API is served, relative to the **host**.

        :param base_path: The base_path of this Spec.
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def consumes(self):
        """Gets the consumes of this Spec.

        A list of MIME types that the API can consume.

        :return: The consumes of this Spec.
        :rtype: List[str]
        """
        return self._consumes

    @consumes.setter
    def consumes(self, consumes):
        """Sets the consumes of this Spec.

        A list of MIME types that the API can consume.

        :param consumes: The consumes of this Spec.
        :type consumes: List[str]
        """

        self._consumes = consumes

    @property
    def definitions(self):
        """Gets the definitions of this Spec.

        The data types produced and consumed by operations.

        :return: The definitions of this Spec.
        :rtype: object
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this Spec.

        The data types produced and consumed by operations.

        :param definitions: The definitions of this Spec.
        :type definitions: object
        """

        self._definitions = definitions

    @property
    def external_docs(self):
        """Gets the external_docs of this Spec.

        Links to and descriptions of related external documentation.

        :return: The external_docs of this Spec.
        :rtype: object
        """
        return self._external_docs

    @external_docs.setter
    def external_docs(self, external_docs):
        """Sets the external_docs of this Spec.

        Links to and descriptions of related external documentation.

        :param external_docs: The external_docs of this Spec.
        :type external_docs: object
        """

        self._external_docs = external_docs

    @property
    def host(self):
        """Gets the host of this Spec.

        The host (domain name or IP address) serving the API.

        :return: The host of this Spec.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Spec.

        The host (domain name or IP address) serving the API.

        :param host: The host of this Spec.
        :type host: str
        """

        self._host = host

    @property
    def info(self):
        """Gets the info of this Spec.

        Metadata about the API.

        :return: The info of this Spec.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Spec.

        Metadata about the API.

        :param info: The info of this Spec.
        :type info: object
        """

        self._info = info

    @property
    def paths(self):
        """Gets the paths of this Spec.

        The paths and operations available to the API.

        :return: The paths of this Spec.
        :rtype: object
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this Spec.

        The paths and operations available to the API.

        :param paths: The paths of this Spec.
        :type paths: object
        """

        self._paths = paths

    @property
    def produces(self):
        """Gets the produces of this Spec.

        A list of MIME types that the API can produce.

        :return: The produces of this Spec.
        :rtype: List[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces):
        """Sets the produces of this Spec.

        A list of MIME types that the API can produce.

        :param produces: The produces of this Spec.
        :type produces: List[str]
        """

        self._produces = produces

    @property
    def schemes(self):
        """Gets the schemes of this Spec.

        The transfer protocol being used by the API.

        :return: The schemes of this Spec.
        :rtype: List[str]
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this Spec.

        The transfer protocol being used by the API.

        :param schemes: The schemes of this Spec.
        :type schemes: List[str]
        """

        self._schemes = schemes

    @property
    def security(self):
        """Gets the security of this Spec.

        A list of the security schemes being used by the API.

        :return: The security of this Spec.
        :rtype: List[object]
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this Spec.

        A list of the security schemes being used by the API.

        :param security: The security of this Spec.
        :type security: List[object]
        """

        self._security = security

    @property
    def security_definitions(self):
        """Gets the security_definitions of this Spec.

        The security scheme definitions being used by the API.

        :return: The security_definitions of this Spec.
        :rtype: object
        """
        return self._security_definitions

    @security_definitions.setter
    def security_definitions(self, security_definitions):
        """Sets the security_definitions of this Spec.

        The security scheme definitions being used by the API.

        :param security_definitions: The security_definitions of this Spec.
        :type security_definitions: object
        """

        self._security_definitions = security_definitions

    @property
    def swagger(self):
        """Gets the swagger of this Spec.

        The version of the Swagger specification that's being used.

        :return: The swagger of this Spec.
        :rtype: str
        """
        return self._swagger

    @swagger.setter
    def swagger(self, swagger):
        """Sets the swagger of this Spec.

        The version of the Swagger specification that's being used.

        :param swagger: The swagger of this Spec.
        :type swagger: str
        """

        self._swagger = swagger

    @property
    def tags(self):
        """Gets the tags of this Spec.

        A list of tags used by the specification, with metadata.

        :return: The tags of this Spec.
        :rtype: List[object]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Spec.

        A list of tags used by the specification, with metadata.

        :param tags: The tags of this Spec.
        :type tags: List[object]
        """

        self._tags = tags

    @property
    def x_tag_groups(self):
        """Gets the x_tag_groups of this Spec.

        A list of the groups and tags used in the left column of the Swagger page.

        :return: The x_tag_groups of this Spec.
        :rtype: List[object]
        """
        return self._x_tag_groups

    @x_tag_groups.setter
    def x_tag_groups(self, x_tag_groups):
        """Sets the x_tag_groups of this Spec.

        A list of the groups and tags used in the left column of the Swagger page.

        :param x_tag_groups: The x_tag_groups of this Spec.
        :type x_tag_groups: List[object]
        """

        self._x_tag_groups = x_tag_groups
