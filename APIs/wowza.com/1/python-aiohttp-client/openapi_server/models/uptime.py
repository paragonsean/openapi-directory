# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Uptime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed: bool=None, created_at: datetime=None, ended_at: datetime=None, id: str=None, running: bool=None, started_at: datetime=None, transcoder_id: str=None, updated_at: str=None):
        """Uptime - a model defined in OpenAPI

        :param billed: The billed of this Uptime.
        :param created_at: The created_at of this Uptime.
        :param ended_at: The ended_at of this Uptime.
        :param id: The id of this Uptime.
        :param running: The running of this Uptime.
        :param started_at: The started_at of this Uptime.
        :param transcoder_id: The transcoder_id of this Uptime.
        :param updated_at: The updated_at of this Uptime.
        """
        self.openapi_types = {
            'billed': bool,
            'created_at': datetime,
            'ended_at': datetime,
            'id': str,
            'running': bool,
            'started_at': datetime,
            'transcoder_id': str,
            'updated_at': str
        }

        self.attribute_map = {
            'billed': 'billed',
            'created_at': 'created_at',
            'ended_at': 'ended_at',
            'id': 'id',
            'running': 'running',
            'started_at': 'started_at',
            'transcoder_id': 'transcoder_id',
            'updated_at': 'updated_at'
        }

        self._billed = billed
        self._created_at = created_at
        self._ended_at = ended_at
        self._id = id
        self._running = running
        self._started_at = started_at
        self._transcoder_id = transcoder_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Uptime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The uptime of this Uptime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed(self):
        """Gets the billed of this Uptime.

        A Boolean value that indicates if the usage generated by this uptime has been sent for billing processing.

        :return: The billed of this Uptime.
        :rtype: bool
        """
        return self._billed

    @billed.setter
    def billed(self, billed):
        """Sets the billed of this Uptime.

        A Boolean value that indicates if the usage generated by this uptime has been sent for billing processing.

        :param billed: The billed of this Uptime.
        :type billed: bool
        """

        self._billed = billed

    @property
    def created_at(self):
        """Gets the created_at of this Uptime.

        The date and time that the uptime record was created.

        :return: The created_at of this Uptime.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Uptime.

        The date and time that the uptime record was created.

        :param created_at: The created_at of this Uptime.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Uptime.

        The date and time that the transcoder was stopped for this uptime. If this value is not present, it indicates that the transcoder is currently running.

        :return: The ended_at of this Uptime.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Uptime.

        The date and time that the transcoder was stopped for this uptime. If this value is not present, it indicates that the transcoder is currently running.

        :param ended_at: The ended_at of this Uptime.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def id(self):
        """Gets the id of this Uptime.

        The unique alphanumeric string that identifies the uptime record.

        :return: The id of this Uptime.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Uptime.

        The unique alphanumeric string that identifies the uptime record.

        :param id: The id of this Uptime.
        :type id: str
        """

        self._id = id

    @property
    def running(self):
        """Gets the running of this Uptime.

        A Boolean value that indicates if the transcoder is still running for this uptime.

        :return: The running of this Uptime.
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this Uptime.

        A Boolean value that indicates if the transcoder is still running for this uptime.

        :param running: The running of this Uptime.
        :type running: bool
        """

        self._running = running

    @property
    def started_at(self):
        """Gets the started_at of this Uptime.

        The date and time that the transcoder started for this uptime.

        :return: The started_at of this Uptime.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Uptime.

        The date and time that the transcoder started for this uptime.

        :param started_at: The started_at of this Uptime.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def transcoder_id(self):
        """Gets the transcoder_id of this Uptime.

        The unique alphanumeric string that identifies the transcoder.

        :return: The transcoder_id of this Uptime.
        :rtype: str
        """
        return self._transcoder_id

    @transcoder_id.setter
    def transcoder_id(self, transcoder_id):
        """Sets the transcoder_id of this Uptime.

        The unique alphanumeric string that identifies the transcoder.

        :param transcoder_id: The transcoder_id of this Uptime.
        :type transcoder_id: str
        """

        self._transcoder_id = transcoder_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Uptime.

        The date and time that the uptime record was updated.

        :return: The updated_at of this Uptime.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Uptime.

        The date and time that the uptime record was updated.

        :param updated_at: The updated_at of this Uptime.
        :type updated_at: str
        """

        self._updated_at = updated_at
