# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, enabled: bool=None, stream_target_id: str=None, trusted_shared_secret: str=None, updated_at: datetime=None):
        """TokenAuth - a model defined in OpenAPI

        :param created_at: The created_at of this TokenAuth.
        :param enabled: The enabled of this TokenAuth.
        :param stream_target_id: The stream_target_id of this TokenAuth.
        :param trusted_shared_secret: The trusted_shared_secret of this TokenAuth.
        :param updated_at: The updated_at of this TokenAuth.
        """
        self.openapi_types = {
            'created_at': datetime,
            'enabled': bool,
            'stream_target_id': str,
            'trusted_shared_secret': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'enabled': 'enabled',
            'stream_target_id': 'stream_target_id',
            'trusted_shared_secret': 'trusted_shared_secret',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._enabled = enabled
        self._stream_target_id = stream_target_id
        self._trusted_shared_secret = trusted_shared_secret
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The token_auth of this TokenAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this TokenAuth.

        The date and time that the token authorization was created.

        :return: The created_at of this TokenAuth.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TokenAuth.

        The date and time that the token authorization was created.

        :param created_at: The created_at of this TokenAuth.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def enabled(self):
        """Gets the enabled of this TokenAuth.

        Specify <strong>true</strong> to enable token authorization or <strong>false</strong> to disable.

        :return: The enabled of this TokenAuth.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TokenAuth.

        Specify <strong>true</strong> to enable token authorization or <strong>false</strong> to disable.

        :param enabled: The enabled of this TokenAuth.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def stream_target_id(self):
        """Gets the stream_target_id of this TokenAuth.

        The unique alphanumeric string that identifies the stream target.

        :return: The stream_target_id of this TokenAuth.
        :rtype: str
        """
        return self._stream_target_id

    @stream_target_id.setter
    def stream_target_id(self, stream_target_id):
        """Sets the stream_target_id of this TokenAuth.

        The unique alphanumeric string that identifies the stream target.

        :param stream_target_id: The stream_target_id of this TokenAuth.
        :type stream_target_id: str
        """

        self._stream_target_id = stream_target_id

    @property
    def trusted_shared_secret(self):
        """Gets the trusted_shared_secret of this TokenAuth.

        The trusted shared secret of the token authorization. Must contain only hexadecimal characters and be an even number of total characters not exceeding 32.

        :return: The trusted_shared_secret of this TokenAuth.
        :rtype: str
        """
        return self._trusted_shared_secret

    @trusted_shared_secret.setter
    def trusted_shared_secret(self, trusted_shared_secret):
        """Sets the trusted_shared_secret of this TokenAuth.

        The trusted shared secret of the token authorization. Must contain only hexadecimal characters and be an even number of total characters not exceeding 32.

        :param trusted_shared_secret: The trusted_shared_secret of this TokenAuth.
        :type trusted_shared_secret: str
        """

        self._trusted_shared_secret = trusted_shared_secret

    @property
    def updated_at(self):
        """Gets the updated_at of this TokenAuth.

        The date and time that the token authorization was updated.

        :return: The updated_at of this TokenAuth.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TokenAuth.

        The date and time that the token authorization was updated.

        :param updated_at: The updated_at of this TokenAuth.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
