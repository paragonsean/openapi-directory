# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HashOfZones(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_billed: int=None, bytes_used: int=None):
        """HashOfZones - a model defined in OpenAPI

        :param bytes_billed: The bytes_billed of this HashOfZones.
        :param bytes_used: The bytes_used of this HashOfZones.
        """
        self.openapi_types = {
            'bytes_billed': int,
            'bytes_used': int
        }

        self.attribute_map = {
            'bytes_billed': 'bytes_billed',
            'bytes_used': 'bytes_used'
        }

        self._bytes_billed = bytes_billed
        self._bytes_used = bytes_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HashOfZones':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hash_of_zones of this HashOfZones.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_billed(self):
        """Gets the bytes_billed of this HashOfZones.

        The amount of usage, in bytes, that was billed for the stream target during the selected time frame.

        :return: The bytes_billed of this HashOfZones.
        :rtype: int
        """
        return self._bytes_billed

    @bytes_billed.setter
    def bytes_billed(self, bytes_billed):
        """Sets the bytes_billed of this HashOfZones.

        The amount of usage, in bytes, that was billed for the stream target during the selected time frame.

        :param bytes_billed: The bytes_billed of this HashOfZones.
        :type bytes_billed: int
        """

        self._bytes_billed = bytes_billed

    @property
    def bytes_used(self):
        """Gets the bytes_used of this HashOfZones.

        The amount of content, in bytes, that went through the stream target during the selected time frame.

        :return: The bytes_used of this HashOfZones.
        :rtype: int
        """
        return self._bytes_used

    @bytes_used.setter
    def bytes_used(self, bytes_used):
        """Sets the bytes_used of this HashOfZones.

        The amount of content, in bytes, that went through the stream target during the selected time frame.

        :param bytes_used: The bytes_used of this HashOfZones.
        :type bytes_used: int
        """

        self._bytes_used = bytes_used
