# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transcoder5 import Transcoder5
from openapi_server import util


class StartTranscoder200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transcoder: Transcoder5=None):
        """StartTranscoder200Response - a model defined in OpenAPI

        :param transcoder: The transcoder of this StartTranscoder200Response.
        """
        self.openapi_types = {
            'transcoder': Transcoder5
        }

        self.attribute_map = {
            'transcoder': 'transcoder'
        }

        self._transcoder = transcoder

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTranscoder200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The startTranscoder_200_response of this StartTranscoder200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transcoder(self):
        """Gets the transcoder of this StartTranscoder200Response.


        :return: The transcoder of this StartTranscoder200Response.
        :rtype: Transcoder5
        """
        return self._transcoder

    @transcoder.setter
    def transcoder(self, transcoder):
        """Sets the transcoder of this StartTranscoder200Response.


        :param transcoder: The transcoder of this StartTranscoder200Response.
        :type transcoder: Transcoder5
        """
        if transcoder is None:
            raise ValueError("Invalid value for `transcoder`, must not be `None`")

        self._transcoder = transcoder
