# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recording1 import Recording1
from openapi_server import util


class ShowRecordingState200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recording: Recording1=None):
        """ShowRecordingState200Response - a model defined in OpenAPI

        :param recording: The recording of this ShowRecordingState200Response.
        """
        self.openapi_types = {
            'recording': Recording1
        }

        self.attribute_map = {
            'recording': 'recording'
        }

        self._recording = recording

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShowRecordingState200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The showRecordingState_200_response of this ShowRecordingState200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recording(self):
        """Gets the recording of this ShowRecordingState200Response.


        :return: The recording of this ShowRecordingState200Response.
        :rtype: Recording1
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this ShowRecordingState200Response.


        :param recording: The recording of this ShowRecordingState200Response.
        :type recording: Recording1
        """
        if recording is None:
            raise ValueError("Invalid value for `recording`, must not be `None`")

        self._recording = recording
