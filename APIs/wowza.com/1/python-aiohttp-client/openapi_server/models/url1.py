# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Url1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: int=None, height: int=None, label: str=None, url: str=None, width: int=None):
        """Url1 - a model defined in OpenAPI

        :param bitrate: The bitrate of this Url1.
        :param height: The height of this Url1.
        :param label: The label of this Url1.
        :param url: The url of this Url1.
        :param width: The width of this Url1.
        """
        self.openapi_types = {
            'bitrate': int,
            'height': int,
            'label': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'bitrate': 'bitrate',
            'height': 'height',
            'label': 'label',
            'url': 'url',
            'width': 'width'
        }

        self._bitrate = bitrate
        self._height = height
        self._label = label
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Url1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The url_1 of this Url1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this Url1.

        The video bitrate, in kilobits per second (Kbps), of the output rendition that will be played at the URL. May correspond to the bitrate of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :return: The bitrate of this Url1.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this Url1.

        The video bitrate, in kilobits per second (Kbps), of the output rendition that will be played at the URL. May correspond to the bitrate of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :param bitrate: The bitrate of this Url1.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def height(self):
        """Gets the height of this Url1.

        The height, in pixels, of the output rendition that will be played at the URL. May correspond to the height of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :return: The height of this Url1.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Url1.

        The height, in pixels, of the output rendition that will be played at the URL. May correspond to the height of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :param height: The height of this Url1.
        :type height: int
        """

        self._height = height

    @property
    def label(self):
        """Gets the label of this Url1.

        A descriptive name for the player URL. Maximum 255 characters.

        :return: The label of this Url1.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Url1.

        A descriptive name for the player URL. Maximum 255 characters.

        :param label: The label of this Url1.
        :type label: str
        """

        self._label = label

    @property
    def url(self):
        """Gets the url of this Url1.

        The URL of the player. If using a Wowza CDN target, the URL format is `http://[wowzasubdomain]-f.akamaihd.net/z/[stream_name]_[angle]@[stream_id]/manifest.f4m` for Adobe HDS playback or `http://[wowzasubdomain]-f.akamaihd.net/i/[stream_name]_[angle]@[stream_id]/master.m3u8` for Apple HLS playback.

        :return: The url of this Url1.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Url1.

        The URL of the player. If using a Wowza CDN target, the URL format is `http://[wowzasubdomain]-f.akamaihd.net/z/[stream_name]_[angle]@[stream_id]/manifest.f4m` for Adobe HDS playback or `http://[wowzasubdomain]-f.akamaihd.net/i/[stream_name]_[angle]@[stream_id]/master.m3u8` for Apple HLS playback.

        :param url: The url of this Url1.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this Url1.

        The width, in pixels, of the output rendition that will be played at the URL. May correspond to the width of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :return: The width of this Url1.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Url1.

        The width, in pixels, of the output rendition that will be played at the URL. May correspond to the width of an output rendition being used by the live stream or transcoder. Must be greater than <strong>0</strong>.

        :param width: The width of this Url1.
        :type width: int
        """

        self._width = width
