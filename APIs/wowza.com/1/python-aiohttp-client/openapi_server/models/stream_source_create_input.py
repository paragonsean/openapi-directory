# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_source1 import StreamSource1
from openapi_server import util


class StreamSourceCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_source: StreamSource1=None):
        """StreamSourceCreateInput - a model defined in OpenAPI

        :param stream_source: The stream_source of this StreamSourceCreateInput.
        """
        self.openapi_types = {
            'stream_source': StreamSource1
        }

        self.attribute_map = {
            'stream_source': 'stream_source'
        }

        self._stream_source = stream_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamSourceCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_source_create_input of this StreamSourceCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_source(self):
        """Gets the stream_source of this StreamSourceCreateInput.


        :return: The stream_source of this StreamSourceCreateInput.
        :rtype: StreamSource1
        """
        return self._stream_source

    @stream_source.setter
    def stream_source(self, stream_source):
        """Sets the stream_source of this StreamSourceCreateInput.


        :param stream_source: The stream_source of this StreamSourceCreateInput.
        :type stream_source: StreamSource1
        """
        if stream_source is None:
            raise ValueError("Invalid value for `stream_source`, must not be `None`")

        self._stream_source = stream_source
