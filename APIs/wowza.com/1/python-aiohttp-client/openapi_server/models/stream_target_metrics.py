# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamTargetMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_bytes_in: float=None, average_total_connections: float=None, created_at: datetime=None, dropped_connections: int=None, maximum_total_connections: int=None, minimum_total_connections: int=None, new_connections: int=None):
        """StreamTargetMetrics - a model defined in OpenAPI

        :param average_bytes_in: The average_bytes_in of this StreamTargetMetrics.
        :param average_total_connections: The average_total_connections of this StreamTargetMetrics.
        :param created_at: The created_at of this StreamTargetMetrics.
        :param dropped_connections: The dropped_connections of this StreamTargetMetrics.
        :param maximum_total_connections: The maximum_total_connections of this StreamTargetMetrics.
        :param minimum_total_connections: The minimum_total_connections of this StreamTargetMetrics.
        :param new_connections: The new_connections of this StreamTargetMetrics.
        """
        self.openapi_types = {
            'average_bytes_in': float,
            'average_total_connections': float,
            'created_at': datetime,
            'dropped_connections': int,
            'maximum_total_connections': int,
            'minimum_total_connections': int,
            'new_connections': int
        }

        self.attribute_map = {
            'average_bytes_in': 'average_bytes_in',
            'average_total_connections': 'average_total_connections',
            'created_at': 'created_at',
            'dropped_connections': 'dropped_connections',
            'maximum_total_connections': 'maximum_total_connections',
            'minimum_total_connections': 'minimum_total_connections',
            'new_connections': 'new_connections'
        }

        self._average_bytes_in = average_bytes_in
        self._average_total_connections = average_total_connections
        self._created_at = created_at
        self._dropped_connections = dropped_connections
        self._maximum_total_connections = maximum_total_connections
        self._minimum_total_connections = minimum_total_connections
        self._new_connections = new_connections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamTargetMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_target_metrics of this StreamTargetMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_bytes_in(self):
        """Gets the average_bytes_in of this StreamTargetMetrics.

        The average number of bytes transfered to the origin server by the source.

        :return: The average_bytes_in of this StreamTargetMetrics.
        :rtype: float
        """
        return self._average_bytes_in

    @average_bytes_in.setter
    def average_bytes_in(self, average_bytes_in):
        """Sets the average_bytes_in of this StreamTargetMetrics.

        The average number of bytes transfered to the origin server by the source.

        :param average_bytes_in: The average_bytes_in of this StreamTargetMetrics.
        :type average_bytes_in: float
        """

        self._average_bytes_in = average_bytes_in

    @property
    def average_total_connections(self):
        """Gets the average_total_connections of this StreamTargetMetrics.

        The total number of current connections.

        :return: The average_total_connections of this StreamTargetMetrics.
        :rtype: float
        """
        return self._average_total_connections

    @average_total_connections.setter
    def average_total_connections(self, average_total_connections):
        """Sets the average_total_connections of this StreamTargetMetrics.

        The total number of current connections.

        :param average_total_connections: The average_total_connections of this StreamTargetMetrics.
        :type average_total_connections: float
        """

        self._average_total_connections = average_total_connections

    @property
    def created_at(self):
        """Gets the created_at of this StreamTargetMetrics.

        The date and time, in UTC, that the metrics were recorded.

        :return: The created_at of this StreamTargetMetrics.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StreamTargetMetrics.

        The date and time, in UTC, that the metrics were recorded.

        :param created_at: The created_at of this StreamTargetMetrics.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dropped_connections(self):
        """Gets the dropped_connections of this StreamTargetMetrics.

        The total number of dropped connections since the last interval.

        :return: The dropped_connections of this StreamTargetMetrics.
        :rtype: int
        """
        return self._dropped_connections

    @dropped_connections.setter
    def dropped_connections(self, dropped_connections):
        """Sets the dropped_connections of this StreamTargetMetrics.

        The total number of dropped connections since the last interval.

        :param dropped_connections: The dropped_connections of this StreamTargetMetrics.
        :type dropped_connections: int
        """

        self._dropped_connections = dropped_connections

    @property
    def maximum_total_connections(self):
        """Gets the maximum_total_connections of this StreamTargetMetrics.

        The maximum number of connections during the interval.

        :return: The maximum_total_connections of this StreamTargetMetrics.
        :rtype: int
        """
        return self._maximum_total_connections

    @maximum_total_connections.setter
    def maximum_total_connections(self, maximum_total_connections):
        """Sets the maximum_total_connections of this StreamTargetMetrics.

        The maximum number of connections during the interval.

        :param maximum_total_connections: The maximum_total_connections of this StreamTargetMetrics.
        :type maximum_total_connections: int
        """

        self._maximum_total_connections = maximum_total_connections

    @property
    def minimum_total_connections(self):
        """Gets the minimum_total_connections of this StreamTargetMetrics.

        The minimum number of connections during the interval.

        :return: The minimum_total_connections of this StreamTargetMetrics.
        :rtype: int
        """
        return self._minimum_total_connections

    @minimum_total_connections.setter
    def minimum_total_connections(self, minimum_total_connections):
        """Sets the minimum_total_connections of this StreamTargetMetrics.

        The minimum number of connections during the interval.

        :param minimum_total_connections: The minimum_total_connections of this StreamTargetMetrics.
        :type minimum_total_connections: int
        """

        self._minimum_total_connections = minimum_total_connections

    @property
    def new_connections(self):
        """Gets the new_connections of this StreamTargetMetrics.

        The total number of new connections since the last interval.

        :return: The new_connections of this StreamTargetMetrics.
        :rtype: int
        """
        return self._new_connections

    @new_connections.setter
    def new_connections(self, new_connections):
        """Sets the new_connections of this StreamTargetMetrics.

        The total number of new connections since the last interval.

        :param new_connections: The new_connections of this StreamTargetMetrics.
        :type new_connections: int
        """

        self._new_connections = new_connections
