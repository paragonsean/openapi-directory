# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamSource1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_ip_address: str=None, ip_address: str=None, location: str=None, location_method: str=None, name: str=None):
        """StreamSource1 - a model defined in OpenAPI

        :param backup_ip_address: The backup_ip_address of this StreamSource1.
        :param ip_address: The ip_address of this StreamSource1.
        :param location: The location of this StreamSource1.
        :param location_method: The location_method of this StreamSource1.
        :param name: The name of this StreamSource1.
        """
        self.openapi_types = {
            'backup_ip_address': str,
            'ip_address': str,
            'location': str,
            'location_method': str,
            'name': str
        }

        self.attribute_map = {
            'backup_ip_address': 'backup_ip_address',
            'ip_address': 'ip_address',
            'location': 'location',
            'location_method': 'location_method',
            'name': 'name'
        }

        self._backup_ip_address = backup_ip_address
        self._ip_address = ip_address
        self._location = location
        self._location_method = location_method
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamSource1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_source_1 of this StreamSource1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_ip_address(self):
        """Gets the backup_ip_address of this StreamSource1.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the backup IP address of the source encoder.

        :return: The backup_ip_address of this StreamSource1.
        :rtype: str
        """
        return self._backup_ip_address

    @backup_ip_address.setter
    def backup_ip_address(self, backup_ip_address):
        """Sets the backup_ip_address of this StreamSource1.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the backup IP address of the source encoder.

        :param backup_ip_address: The backup_ip_address of this StreamSource1.
        :type backup_ip_address: str
        """

        self._backup_ip_address = backup_ip_address

    @property
    def ip_address(self):
        """Gets the ip_address of this StreamSource1.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the primary IP address of the source encoder.

        :return: The ip_address of this StreamSource1.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this StreamSource1.

        If <em>location_method</em> is <strong>ip_address</strong>, specify the primary IP address of the source encoder.

        :param ip_address: The ip_address of this StreamSource1.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this StreamSource1.

        If <em>location_method</em> is <strong>region</strong>, specify a location as close as possible to the source encoder.

        :return: The location of this StreamSource1.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StreamSource1.

        If <em>location_method</em> is <strong>region</strong>, specify a location as close as possible to the source encoder.

        :param location: The location of this StreamSource1.
        :type location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def location_method(self):
        """Gets the location_method of this StreamSource1.

        The method used to determine the location of the stream source, either by <strong>region</strong> or based on the source encoder's <strong>ip_address</strong>.

        :return: The location_method of this StreamSource1.
        :rtype: str
        """
        return self._location_method

    @location_method.setter
    def location_method(self, location_method):
        """Sets the location_method of this StreamSource1.

        The method used to determine the location of the stream source, either by <strong>region</strong> or based on the source encoder's <strong>ip_address</strong>.

        :param location_method: The location_method of this StreamSource1.
        :type location_method: str
        """
        allowed_values = ["region", "ip_address"]  # noqa: E501
        if location_method not in allowed_values:
            raise ValueError(
                "Invalid value for `location_method` ({0}), must be one of {1}"
                .format(location_method, allowed_values)
            )

        self._location_method = location_method

    @property
    def name(self):
        """Gets the name of this StreamSource1.

        A descriptive name for the stream source. Maximum 255 characters.

        :return: The name of this StreamSource1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StreamSource1.

        A descriptive name for the stream source. Maximum 255 characters.

        :param name: The name of this StreamSource1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
