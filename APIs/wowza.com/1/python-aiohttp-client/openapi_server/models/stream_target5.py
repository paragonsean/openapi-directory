# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamTarget5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_url: str=None, chunk_size: str=None, enable_hls: bool=None, enabled: bool=None, hds_playback_url: str=None, hls_playback_url: str=None, ingest_ip_whitelist: List[str]=None, location: str=None, name: str=None, password: str=None, primary_url: str=None, provider: str=None, region_override: str=None, rtmp_playback_url: str=None, source_delivery_method: str=None, source_url: str=None, stream_name: str=None, type: str=None, use_cors: bool=None, use_https: bool=None, use_secure_ingest: bool=None, username: str=None):
        """StreamTarget5 - a model defined in OpenAPI

        :param backup_url: The backup_url of this StreamTarget5.
        :param chunk_size: The chunk_size of this StreamTarget5.
        :param enable_hls: The enable_hls of this StreamTarget5.
        :param enabled: The enabled of this StreamTarget5.
        :param hds_playback_url: The hds_playback_url of this StreamTarget5.
        :param hls_playback_url: The hls_playback_url of this StreamTarget5.
        :param ingest_ip_whitelist: The ingest_ip_whitelist of this StreamTarget5.
        :param location: The location of this StreamTarget5.
        :param name: The name of this StreamTarget5.
        :param password: The password of this StreamTarget5.
        :param primary_url: The primary_url of this StreamTarget5.
        :param provider: The provider of this StreamTarget5.
        :param region_override: The region_override of this StreamTarget5.
        :param rtmp_playback_url: The rtmp_playback_url of this StreamTarget5.
        :param source_delivery_method: The source_delivery_method of this StreamTarget5.
        :param source_url: The source_url of this StreamTarget5.
        :param stream_name: The stream_name of this StreamTarget5.
        :param type: The type of this StreamTarget5.
        :param use_cors: The use_cors of this StreamTarget5.
        :param use_https: The use_https of this StreamTarget5.
        :param use_secure_ingest: The use_secure_ingest of this StreamTarget5.
        :param username: The username of this StreamTarget5.
        """
        self.openapi_types = {
            'backup_url': str,
            'chunk_size': str,
            'enable_hls': bool,
            'enabled': bool,
            'hds_playback_url': str,
            'hls_playback_url': str,
            'ingest_ip_whitelist': List[str],
            'location': str,
            'name': str,
            'password': str,
            'primary_url': str,
            'provider': str,
            'region_override': str,
            'rtmp_playback_url': str,
            'source_delivery_method': str,
            'source_url': str,
            'stream_name': str,
            'type': str,
            'use_cors': bool,
            'use_https': bool,
            'use_secure_ingest': bool,
            'username': str
        }

        self.attribute_map = {
            'backup_url': 'backup_url',
            'chunk_size': 'chunk_size',
            'enable_hls': 'enable_hls',
            'enabled': 'enabled',
            'hds_playback_url': 'hds_playback_url',
            'hls_playback_url': 'hls_playback_url',
            'ingest_ip_whitelist': 'ingest_ip_whitelist',
            'location': 'location',
            'name': 'name',
            'password': 'password',
            'primary_url': 'primary_url',
            'provider': 'provider',
            'region_override': 'region_override',
            'rtmp_playback_url': 'rtmp_playback_url',
            'source_delivery_method': 'source_delivery_method',
            'source_url': 'source_url',
            'stream_name': 'stream_name',
            'type': 'type',
            'use_cors': 'use_cors',
            'use_https': 'use_https',
            'use_secure_ingest': 'use_secure_ingest',
            'username': 'username'
        }

        self._backup_url = backup_url
        self._chunk_size = chunk_size
        self._enable_hls = enable_hls
        self._enabled = enabled
        self._hds_playback_url = hds_playback_url
        self._hls_playback_url = hls_playback_url
        self._ingest_ip_whitelist = ingest_ip_whitelist
        self._location = location
        self._name = name
        self._password = password
        self._primary_url = primary_url
        self._provider = provider
        self._region_override = region_override
        self._rtmp_playback_url = rtmp_playback_url
        self._source_delivery_method = source_delivery_method
        self._source_url = source_url
        self._stream_name = stream_name
        self._type = type
        self._use_cors = use_cors
        self._use_https = use_https
        self._use_secure_ingest = use_secure_ingest
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamTarget5':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_target_5 of this StreamTarget5.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_url(self):
        """Gets the backup_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The backup RTMP ingest URL of the target, without the preceding protocol and without the trailing slash (/).

        :return: The backup_url of this StreamTarget5.
        :rtype: str
        """
        return self._backup_url

    @backup_url.setter
    def backup_url(self, backup_url):
        """Sets the backup_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The backup RTMP ingest URL of the target, without the preceding protocol and without the trailing slash (/).

        :param backup_url: The backup_url of this StreamTarget5.
        :type backup_url: str
        """

        self._backup_url = backup_url

    @property
    def chunk_size(self):
        """Gets the chunk_size of this StreamTarget5.

        <strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.

        :return: The chunk_size of this StreamTarget5.
        :rtype: str
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this StreamTarget5.

        <strong>The <em>chunk_size</em> parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.</strong> Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. The segment duration for HLS encoding. The default is <strong>10</strong>.

        :param chunk_size: The chunk_size of this StreamTarget5.
        :type chunk_size: str
        """
        allowed_values = ["2", "4", "6", "8", "10"]  # noqa: E501
        if chunk_size not in allowed_values:
            raise ValueError(
                "Invalid value for `chunk_size` ({0}), must be one of {1}"
                .format(chunk_size, allowed_values)
            )

        self._chunk_size = chunk_size

    @property
    def enable_hls(self):
        """Gets the enable_hls of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong>, creates an Apple HLS URL for playback on iOS devices (<em>hls_playback_url</em>). The default is <strong>false</strong>.

        :return: The enable_hls of this StreamTarget5.
        :rtype: bool
        """
        return self._enable_hls

    @enable_hls.setter
    def enable_hls(self, enable_hls):
        """Sets the enable_hls of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong>, creates an Apple HLS URL for playback on iOS devices (<em>hls_playback_url</em>). The default is <strong>false</strong>.

        :param enable_hls: The enable_hls of this StreamTarget5.
        :type enable_hls: bool
        """

        self._enable_hls = enable_hls

    @property
    def enabled(self):
        """Gets the enabled of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong> (the default), the source stream is ready to be ingested. If **false**, the source stream won't be ingested by the target's origin server.

        :return: The enabled of this StreamTarget5.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. If <strong>true</strong> (the default), the source stream is ready to be ingested. If **false**, the source stream won't be ingested by the target's origin server.

        :param enabled: The enabled of this StreamTarget5.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def hds_playback_url(self):
        """Gets the hds_playback_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. The web address that the target uses to play Adobe HDS streams.

        :return: The hds_playback_url of this StreamTarget5.
        :rtype: str
        """
        return self._hds_playback_url

    @hds_playback_url.setter
    def hds_playback_url(self, hds_playback_url):
        """Sets the hds_playback_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. The web address that the target uses to play Adobe HDS streams.

        :param hds_playback_url: The hds_playback_url of this StreamTarget5.
        :type hds_playback_url: str
        """

        self._hds_playback_url = hds_playback_url

    @property
    def hls_playback_url(self):
        """Gets the hls_playback_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play Apple HLS streams.

        :return: The hls_playback_url of this StreamTarget5.
        :rtype: str
        """
        return self._hls_playback_url

    @hls_playback_url.setter
    def hls_playback_url(self, hls_playback_url):
        """Sets the hls_playback_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play Apple HLS streams.

        :param hls_playback_url: The hls_playback_url of this StreamTarget5.
        :type hls_playback_url: str
        """

        self._hls_playback_url = hls_playback_url

    @property
    def ingest_ip_whitelist(self):
        """Gets the ingest_ip_whitelist of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **push**. A list of IP addresses that can be used to connect to the target's origin server.

        :return: The ingest_ip_whitelist of this StreamTarget5.
        :rtype: List[str]
        """
        return self._ingest_ip_whitelist

    @ingest_ip_whitelist.setter
    def ingest_ip_whitelist(self, ingest_ip_whitelist):
        """Sets the ingest_ip_whitelist of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **push**. A list of IP addresses that can be used to connect to the target's origin server.

        :param ingest_ip_whitelist: The ingest_ip_whitelist of this StreamTarget5.
        :type ingest_ip_whitelist: List[str]
        """

        self._ingest_ip_whitelist = ingest_ip_whitelist

    @property
    def location(self):
        """Gets the location of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.

        :return: The location of this StreamTarget5.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.

        :param location: The location of this StreamTarget5.
        :type location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def name(self):
        """Gets the name of this StreamTarget5.

        A descriptive name for the stream target. Maximum 255 characters.

        :return: The name of this StreamTarget5.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StreamTarget5.

        A descriptive name for the stream target. Maximum 255 characters.

        :param name: The name of this StreamTarget5.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. A <em>username</em> must also be present. The password associated with the target username for RTMP authentication.

        :return: The password of this StreamTarget5.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. A <em>username</em> must also be present. The password associated with the target username for RTMP authentication.

        :param password: The password of this StreamTarget5.
        :type password: str
        """

        self._password = password

    @property
    def primary_url(self):
        """Gets the primary_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The primary RTMP ingest URL, without the preceding protocol and without the trailing slash (/).

        :return: The primary_url of this StreamTarget5.
        :rtype: str
        """
        return self._primary_url

    @primary_url.setter
    def primary_url(self, primary_url):
        """Sets the primary_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The primary RTMP ingest URL, without the preceding protocol and without the trailing slash (/).

        :param primary_url: The primary_url of this StreamTarget5.
        :type primary_url: str
        """
        if primary_url is None:
            raise ValueError("Invalid value for `primary_url`, must not be `None`")

        self._primary_url = primary_url

    @property
    def provider(self):
        """Gets the provider of this StreamTarget5.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :return: The provider of this StreamTarget5.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this StreamTarget5.

        The CDN for the target. <br /><br />Required for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. Valid values for <strong>CustomStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong>, <strong>akamai_rtmp</strong>, <strong>limelight</strong>, <strong>rtmp</strong>, and <strong>ustream</strong>. Values can be appended with **_mock** to use in the sandbox environment. <br /><br />Valid values for <strong>WowzaStreamTarget</strong> are <strong>akamai</strong>, <strong>akamai_cupertino</strong> (default), <strong>akamai_legacy_rtmp</strong>, and <strong>wowza</strong>. <br /><br /><strong>UltraLowLatencyStreamTarget</strong> defaults to and must be <strong>wowza</strong>.

        :param provider: The provider of this StreamTarget5.
        :type provider: str
        """

        self._provider = provider

    @property
    def region_override(self):
        """Gets the region_override of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The location of the stream target's origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.

        :return: The region_override of this StreamTarget5.
        :rtype: str
        """
        return self._region_override

    @region_override.setter
    def region_override(self, region_override):
        """Sets the region_override of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The location of the stream target's origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.

        :param region_override: The region_override of this StreamTarget5.
        :type region_override: str
        """
        allowed_values = ["azure-westus", "azure-eastus2", "azure-northeurope"]  # noqa: E501
        if region_override not in allowed_values:
            raise ValueError(
                "Invalid value for `region_override` ({0}), must be one of {1}"
                .format(region_override, allowed_values)
            )

        self._region_override = region_override

    @property
    def rtmp_playback_url(self):
        """Gets the rtmp_playback_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.

        :return: The rtmp_playback_url of this StreamTarget5.
        :rtype: str
        """
        return self._rtmp_playback_url

    @rtmp_playback_url.setter
    def rtmp_playback_url(self, rtmp_playback_url):
        """Sets the rtmp_playback_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The web address that the target uses to play RTMP streams.

        :param rtmp_playback_url: The rtmp_playback_url of this StreamTarget5.
        :type rtmp_playback_url: str
        """

        self._rtmp_playback_url = rtmp_playback_url

    @property
    def source_delivery_method(self):
        """Gets the source_delivery_method of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.

        :return: The source_delivery_method of this StreamTarget5.
        :rtype: str
        """
        return self._source_delivery_method

    @source_delivery_method.setter
    def source_delivery_method(self, source_delivery_method):
        """Sets the source_delivery_method of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.

        :param source_delivery_method: The source_delivery_method of this StreamTarget5.
        :type source_delivery_method: str
        """
        allowed_values = ["push", "pull"]  # noqa: E501
        if source_delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `source_delivery_method` ({0}), must be one of {1}"
                .format(source_delivery_method, allowed_values)
            )

        self._source_delivery_method = source_delivery_method

    @property
    def source_url(self):
        """Gets the source_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The URL of a source IP camera or encoder connecting to the stream target.

        :return: The source_url of this StreamTarget5.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> and <em>source_delivery_method</em> is **pull**. The URL of a source IP camera or encoder connecting to the stream target.

        :param source_url: The source_url of this StreamTarget5.
        :type source_url: str
        """
        if source_url is None:
            raise ValueError("Invalid value for `source_url`, must not be `None`")

        self._source_url = source_url

    @property
    def stream_name(self):
        """Gets the stream_name of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The name of the stream as defined in the target's ingestion settings.

        :return: The stream_name of this StreamTarget5.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong>. The name of the stream as defined in the target's ingestion settings.

        :param stream_name: The stream_name of this StreamTarget5.
        :type stream_name: str
        """
        if stream_name is None:
            raise ValueError("Invalid value for `stream_name`, must not be `None`")

        self._stream_name = stream_name

    @property
    def type(self):
        """Gets the type of this StreamTarget5.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :return: The type of this StreamTarget5.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StreamTarget5.

        <strong>WowzaStreamTarget</strong> is a Wowza CDN target. <strong>UltraLowLatencyStreamTarget</strong> is an ultra low latency Wowza stream target. <strong>CustomStreamTarget</strong> (the default) is an external, third-party destination. <!--and <strong>FacebookStreamTarget</strong> (a Facebook Live target).-->

        :param type: The type of this StreamTarget5.
        :type type: str
        """
        allowed_values = ["WowzaStreamTarget", "UltraLowLatencyStreamTarget", "CustomStreamTarget"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_cors(self):
        """Gets the use_cors of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. CORS, or cross-origin resource sharing, allows streams to be sent to providers such as Peer5, Viblast, and Streamroot, which implement a peer-to-peer grid delivery system.

        :return: The use_cors of this StreamTarget5.
        :rtype: bool
        """
        return self._use_cors

    @use_cors.setter
    def use_cors(self, use_cors):
        """Sets the use_cors of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. CORS, or cross-origin resource sharing, allows streams to be sent to providers such as Peer5, Viblast, and Streamroot, which implement a peer-to-peer grid delivery system.

        :param use_cors: The use_cors of this StreamTarget5.
        :type use_cors: bool
        """

        self._use_cors = use_cors

    @property
    def use_https(self):
        """Gets the use_https of this StreamTarget5.

        <strong>The <em>use_https</em> parameter is deprecated. Use the POST /stream_targets/[<em>stream_target_id</em>]/properties endpoint and the <em>relative_playlists</em> parameter instead.</strong>

        :return: The use_https of this StreamTarget5.
        :rtype: bool
        """
        return self._use_https

    @use_https.setter
    def use_https(self, use_https):
        """Sets the use_https of this StreamTarget5.

        <strong>The <em>use_https</em> parameter is deprecated. Use the POST /stream_targets/[<em>stream_target_id</em>]/properties endpoint and the <em>relative_playlists</em> parameter instead.</strong>

        :param use_https: The use_https of this StreamTarget5.
        :type use_https: bool
        """

        self._use_https = use_https

    @property
    def use_secure_ingest(self):
        """Gets the use_secure_ingest of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. If <strong>true</strong>, generates a <em>secure_ingest_query_param</em> to securely deliver the stream from the transcoder to the provider.

        :return: The use_secure_ingest of this StreamTarget5.
        :rtype: bool
        """
        return self._use_secure_ingest

    @use_secure_ingest.setter
    def use_secure_ingest(self, use_secure_ingest):
        """Sets the use_secure_ingest of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> and <em>provider</em> is <strong>akamai_cupertino</strong>. If <strong>true</strong>, generates a <em>secure_ingest_query_param</em> to securely deliver the stream from the transcoder to the provider.

        :param use_secure_ingest: The use_secure_ingest of this StreamTarget5.
        :type use_secure_ingest: bool
        """

        self._use_secure_ingest = use_secure_ingest

    @property
    def username(self):
        """Gets the username of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.

        :return: The username of this StreamTarget5.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this StreamTarget5.

        Only for targets whose <em>type</em> is <strong>CustomStreamTarget</strong> and <em>provider</em> is <em>not</em> **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.

        :param username: The username of this StreamTarget5.
        :type username: str
        """

        self._username = username
