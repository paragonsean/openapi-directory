# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.index_stream_target import IndexStreamTarget
from openapi_server import util


class StreamTargets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_targets: List[IndexStreamTarget]=None):
        """StreamTargets - a model defined in OpenAPI

        :param stream_targets: The stream_targets of this StreamTargets.
        """
        self.openapi_types = {
            'stream_targets': List[IndexStreamTarget]
        }

        self.attribute_map = {
            'stream_targets': 'stream_targets'
        }

        self._stream_targets = stream_targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamTargets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stream_targets of this StreamTargets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_targets(self):
        """Gets the stream_targets of this StreamTargets.


        :return: The stream_targets of this StreamTargets.
        :rtype: List[IndexStreamTarget]
        """
        return self._stream_targets

    @stream_targets.setter
    def stream_targets(self, stream_targets):
        """Sets the stream_targets of this StreamTargets.


        :param stream_targets: The stream_targets of this StreamTargets.
        :type stream_targets: List[IndexStreamTarget]
        """
        if stream_targets is None:
            raise ValueError("Invalid value for `stream_targets`, must not be `None`")

        self._stream_targets = stream_targets
