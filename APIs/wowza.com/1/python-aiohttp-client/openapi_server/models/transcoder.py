# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output import Output
from openapi_server.models.playback_url1 import PlaybackUrl1
from openapi_server import util


class Transcoder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, billing_mode: str=None, broadcast_location: str=None, buffer_size: int=None, closed_caption_type: str=None, created_at: datetime=None, delivery_method: str=None, delivery_protocols: List[str]=None, description: str=None, direct_playback_urls: List[PlaybackUrl1]=None, disable_authentication: bool=None, domain_name: str=None, id: str=None, idle_timeout: int=None, low_latency: bool=None, name: str=None, outputs: List[Output]=None, password: str=None, play_maximum_connections: int=None, protocol: str=None, recording: bool=None, source_port: int=None, source_url: str=None, stream_extension: str=None, stream_name: str=None, stream_smoother: bool=None, stream_source_id: str=None, suppress_stream_target_start: bool=None, transcoder_type: str=None, updated_at: datetime=None, username: str=None, video_fallback: bool=None, watermark: bool=None, watermark_height: int=None, watermark_image_url: str=None, watermark_opacity: int=None, watermark_position: str=None, watermark_width: int=None):
        """Transcoder - a model defined in OpenAPI

        :param application_name: The application_name of this Transcoder.
        :param billing_mode: The billing_mode of this Transcoder.
        :param broadcast_location: The broadcast_location of this Transcoder.
        :param buffer_size: The buffer_size of this Transcoder.
        :param closed_caption_type: The closed_caption_type of this Transcoder.
        :param created_at: The created_at of this Transcoder.
        :param delivery_method: The delivery_method of this Transcoder.
        :param delivery_protocols: The delivery_protocols of this Transcoder.
        :param description: The description of this Transcoder.
        :param direct_playback_urls: The direct_playback_urls of this Transcoder.
        :param disable_authentication: The disable_authentication of this Transcoder.
        :param domain_name: The domain_name of this Transcoder.
        :param id: The id of this Transcoder.
        :param idle_timeout: The idle_timeout of this Transcoder.
        :param low_latency: The low_latency of this Transcoder.
        :param name: The name of this Transcoder.
        :param outputs: The outputs of this Transcoder.
        :param password: The password of this Transcoder.
        :param play_maximum_connections: The play_maximum_connections of this Transcoder.
        :param protocol: The protocol of this Transcoder.
        :param recording: The recording of this Transcoder.
        :param source_port: The source_port of this Transcoder.
        :param source_url: The source_url of this Transcoder.
        :param stream_extension: The stream_extension of this Transcoder.
        :param stream_name: The stream_name of this Transcoder.
        :param stream_smoother: The stream_smoother of this Transcoder.
        :param stream_source_id: The stream_source_id of this Transcoder.
        :param suppress_stream_target_start: The suppress_stream_target_start of this Transcoder.
        :param transcoder_type: The transcoder_type of this Transcoder.
        :param updated_at: The updated_at of this Transcoder.
        :param username: The username of this Transcoder.
        :param video_fallback: The video_fallback of this Transcoder.
        :param watermark: The watermark of this Transcoder.
        :param watermark_height: The watermark_height of this Transcoder.
        :param watermark_image_url: The watermark_image_url of this Transcoder.
        :param watermark_opacity: The watermark_opacity of this Transcoder.
        :param watermark_position: The watermark_position of this Transcoder.
        :param watermark_width: The watermark_width of this Transcoder.
        """
        self.openapi_types = {
            'application_name': str,
            'billing_mode': str,
            'broadcast_location': str,
            'buffer_size': int,
            'closed_caption_type': str,
            'created_at': datetime,
            'delivery_method': str,
            'delivery_protocols': List[str],
            'description': str,
            'direct_playback_urls': List[PlaybackUrl1],
            'disable_authentication': bool,
            'domain_name': str,
            'id': str,
            'idle_timeout': int,
            'low_latency': bool,
            'name': str,
            'outputs': List[Output],
            'password': str,
            'play_maximum_connections': int,
            'protocol': str,
            'recording': bool,
            'source_port': int,
            'source_url': str,
            'stream_extension': str,
            'stream_name': str,
            'stream_smoother': bool,
            'stream_source_id': str,
            'suppress_stream_target_start': bool,
            'transcoder_type': str,
            'updated_at': datetime,
            'username': str,
            'video_fallback': bool,
            'watermark': bool,
            'watermark_height': int,
            'watermark_image_url': str,
            'watermark_opacity': int,
            'watermark_position': str,
            'watermark_width': int
        }

        self.attribute_map = {
            'application_name': 'application_name',
            'billing_mode': 'billing_mode',
            'broadcast_location': 'broadcast_location',
            'buffer_size': 'buffer_size',
            'closed_caption_type': 'closed_caption_type',
            'created_at': 'created_at',
            'delivery_method': 'delivery_method',
            'delivery_protocols': 'delivery_protocols',
            'description': 'description',
            'direct_playback_urls': 'direct_playback_urls',
            'disable_authentication': 'disable_authentication',
            'domain_name': 'domain_name',
            'id': 'id',
            'idle_timeout': 'idle_timeout',
            'low_latency': 'low_latency',
            'name': 'name',
            'outputs': 'outputs',
            'password': 'password',
            'play_maximum_connections': 'play_maximum_connections',
            'protocol': 'protocol',
            'recording': 'recording',
            'source_port': 'source_port',
            'source_url': 'source_url',
            'stream_extension': 'stream_extension',
            'stream_name': 'stream_name',
            'stream_smoother': 'stream_smoother',
            'stream_source_id': 'stream_source_id',
            'suppress_stream_target_start': 'suppress_stream_target_start',
            'transcoder_type': 'transcoder_type',
            'updated_at': 'updated_at',
            'username': 'username',
            'video_fallback': 'video_fallback',
            'watermark': 'watermark',
            'watermark_height': 'watermark_height',
            'watermark_image_url': 'watermark_image_url',
            'watermark_opacity': 'watermark_opacity',
            'watermark_position': 'watermark_position',
            'watermark_width': 'watermark_width'
        }

        self._application_name = application_name
        self._billing_mode = billing_mode
        self._broadcast_location = broadcast_location
        self._buffer_size = buffer_size
        self._closed_caption_type = closed_caption_type
        self._created_at = created_at
        self._delivery_method = delivery_method
        self._delivery_protocols = delivery_protocols
        self._description = description
        self._direct_playback_urls = direct_playback_urls
        self._disable_authentication = disable_authentication
        self._domain_name = domain_name
        self._id = id
        self._idle_timeout = idle_timeout
        self._low_latency = low_latency
        self._name = name
        self._outputs = outputs
        self._password = password
        self._play_maximum_connections = play_maximum_connections
        self._protocol = protocol
        self._recording = recording
        self._source_port = source_port
        self._source_url = source_url
        self._stream_extension = stream_extension
        self._stream_name = stream_name
        self._stream_smoother = stream_smoother
        self._stream_source_id = stream_source_id
        self._suppress_stream_target_start = suppress_stream_target_start
        self._transcoder_type = transcoder_type
        self._updated_at = updated_at
        self._username = username
        self._video_fallback = video_fallback
        self._watermark = watermark
        self._watermark_height = watermark_height
        self._watermark_image_url = watermark_image_url
        self._watermark_opacity = watermark_opacity
        self._watermark_position = watermark_position
        self._watermark_width = watermark_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transcoder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transcoder of this Transcoder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this Transcoder.

        The application name from the pull stream source URL.

        :return: The application_name of this Transcoder.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this Transcoder.

        The application name from the pull stream source URL.

        :param application_name: The application_name of this Transcoder.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def billing_mode(self):
        """Gets the billing_mode of this Transcoder.

        The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>.

        :return: The billing_mode of this Transcoder.
        :rtype: str
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode):
        """Sets the billing_mode of this Transcoder.

        The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>.

        :param billing_mode: The billing_mode of this Transcoder.
        :type billing_mode: str
        """
        allowed_values = ["pay_as_you_go", "twentyfour_seven"]  # noqa: E501
        if billing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_mode` ({0}), must be one of {1}"
                .format(billing_mode, allowed_values)
            )

        self._billing_mode = billing_mode

    @property
    def broadcast_location(self):
        """Gets the broadcast_location of this Transcoder.

        The location where Wowza Streaming Cloud transcodes your stream. Choose a location as close as possible to your video source.

        :return: The broadcast_location of this Transcoder.
        :rtype: str
        """
        return self._broadcast_location

    @broadcast_location.setter
    def broadcast_location(self, broadcast_location):
        """Sets the broadcast_location of this Transcoder.

        The location where Wowza Streaming Cloud transcodes your stream. Choose a location as close as possible to your video source.

        :param broadcast_location: The broadcast_location of this Transcoder.
        :type broadcast_location: str
        """
        allowed_values = ["asia_pacific_australia", "asia_pacific_japan", "asia_pacific_singapore", "asia_pacific_taiwan", "eu_belgium", "eu_germany", "eu_ireland", "south_america_brazil", "us_central_iowa", "us_east_s_carolina", "us_east_virginia", "us_west_california", "us_west_oregon"]  # noqa: E501
        if broadcast_location not in allowed_values:
            raise ValueError(
                "Invalid value for `broadcast_location` ({0}), must be one of {1}"
                .format(broadcast_location, allowed_values)
            )

        self._broadcast_location = broadcast_location

    @property
    def buffer_size(self):
        """Gets the buffer_size of this Transcoder.

        The size, in milliseconds, of the incoming buffer. <strong>0</strong> means no buffer. The default is <strong>4000</strong> (4 seconds).

        :return: The buffer_size of this Transcoder.
        :rtype: int
        """
        return self._buffer_size

    @buffer_size.setter
    def buffer_size(self, buffer_size):
        """Sets the buffer_size of this Transcoder.

        The size, in milliseconds, of the incoming buffer. <strong>0</strong> means no buffer. The default is <strong>4000</strong> (4 seconds).

        :param buffer_size: The buffer_size of this Transcoder.
        :type buffer_size: int
        """
        allowed_values = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000]  # noqa: E501
        if buffer_size not in allowed_values:
            raise ValueError(
                "Invalid value for `buffer_size` ({0}), must be one of {1}"
                .format(buffer_size, allowed_values)
            )

        self._buffer_size = buffer_size

    @property
    def closed_caption_type(self):
        """Gets the closed_caption_type of this Transcoder.

        The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.

        :return: The closed_caption_type of this Transcoder.
        :rtype: str
        """
        return self._closed_caption_type

    @closed_caption_type.setter
    def closed_caption_type(self, closed_caption_type):
        """Sets the closed_caption_type of this Transcoder.

        The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.

        :param closed_caption_type: The closed_caption_type of this Transcoder.
        :type closed_caption_type: str
        """
        allowed_values = ["none", "cea", "on_text", "both"]  # noqa: E501
        if closed_caption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_caption_type` ({0}), must be one of {1}"
                .format(closed_caption_type, allowed_values)
            )

        self._closed_caption_type = closed_caption_type

    @property
    def created_at(self):
        """Gets the created_at of this Transcoder.

        The date and time that the transcoder was created.

        :return: The created_at of this Transcoder.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Transcoder.

        The date and time that the transcoder was created.

        :param created_at: The created_at of this Transcoder.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def delivery_method(self):
        """Gets the delivery_method of this Transcoder.

        The type of connection between the source encoder and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.

        :return: The delivery_method of this Transcoder.
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this Transcoder.

        The type of connection between the source encoder and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.

        :param delivery_method: The delivery_method of this Transcoder.
        :type delivery_method: str
        """
        allowed_values = ["pull", "cdn", "push"]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def delivery_protocols(self):
        """Gets the delivery_protocols of this Transcoder.

        An array of playback protocols enabled for this transcoder. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are returned.

        :return: The delivery_protocols of this Transcoder.
        :rtype: List[str]
        """
        return self._delivery_protocols

    @delivery_protocols.setter
    def delivery_protocols(self, delivery_protocols):
        """Sets the delivery_protocols of this Transcoder.

        An array of playback protocols enabled for this transcoder. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are returned.

        :param delivery_protocols: The delivery_protocols of this Transcoder.
        :type delivery_protocols: List[str]
        """

        self._delivery_protocols = delivery_protocols

    @property
    def description(self):
        """Gets the description of this Transcoder.

        An optional description of the transcoder.

        :return: The description of this Transcoder.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transcoder.

        An optional description of the transcoder.

        :param description: The description of this Transcoder.
        :type description: str
        """

        self._description = description

    @property
    def direct_playback_urls(self):
        """Gets the direct_playback_urls of this Transcoder.

        An array of direct playback URLs the transcoder's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.

        :return: The direct_playback_urls of this Transcoder.
        :rtype: List[PlaybackUrl1]
        """
        return self._direct_playback_urls

    @direct_playback_urls.setter
    def direct_playback_urls(self, direct_playback_urls):
        """Sets the direct_playback_urls of this Transcoder.

        An array of direct playback URLs the transcoder's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.

        :param direct_playback_urls: The direct_playback_urls of this Transcoder.
        :type direct_playback_urls: List[PlaybackUrl1]
        """

        self._direct_playback_urls = direct_playback_urls

    @property
    def disable_authentication(self):
        """Gets the disable_authentication of this Transcoder.

        Authentication is required by default for RTMP and RTSP push connections from a video source to the transcoder. Specify <strong>true</strong> to disable authentication with the video source.

        :return: The disable_authentication of this Transcoder.
        :rtype: bool
        """
        return self._disable_authentication

    @disable_authentication.setter
    def disable_authentication(self, disable_authentication):
        """Sets the disable_authentication of this Transcoder.

        Authentication is required by default for RTMP and RTSP push connections from a video source to the transcoder. Specify <strong>true</strong> to disable authentication with the video source.

        :param disable_authentication: The disable_authentication of this Transcoder.
        :type disable_authentication: bool
        """

        self._disable_authentication = disable_authentication

    @property
    def domain_name(self):
        """Gets the domain_name of this Transcoder.

        The domain name from the pull stream source URL.

        :return: The domain_name of this Transcoder.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Transcoder.

        The domain name from the pull stream source URL.

        :param domain_name: The domain_name of this Transcoder.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def id(self):
        """Gets the id of this Transcoder.

        The unique alphanumeric string that identifies the transcoder.

        :return: The id of this Transcoder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transcoder.

        The unique alphanumeric string that identifies the transcoder.

        :param id: The id of this Transcoder.
        :type id: str
        """

        self._id = id

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this Transcoder.

        The amount of idle time, in seconds, before the transcoder automatically shuts down. Valid values are the integers <strong>0</strong> (never shuts down) to <strong>172800</strong> (48 hours). The default is <strong>1200</strong> (20 minutes).

        :return: The idle_timeout of this Transcoder.
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this Transcoder.

        The amount of idle time, in seconds, before the transcoder automatically shuts down. Valid values are the integers <strong>0</strong> (never shuts down) to <strong>172800</strong> (48 hours). The default is <strong>1200</strong> (20 minutes).

        :param idle_timeout: The idle_timeout of this Transcoder.
        :type idle_timeout: int
        """

        self._idle_timeout = idle_timeout

    @property
    def low_latency(self):
        """Gets the low_latency of this Transcoder.

        If <strong>true</strong>, turns off the sort packet buffer and speeds the time it takes to decode and deliver video data to the player. The default is <strong>false</strong>.

        :return: The low_latency of this Transcoder.
        :rtype: bool
        """
        return self._low_latency

    @low_latency.setter
    def low_latency(self, low_latency):
        """Sets the low_latency of this Transcoder.

        If <strong>true</strong>, turns off the sort packet buffer and speeds the time it takes to decode and deliver video data to the player. The default is <strong>false</strong>.

        :param low_latency: The low_latency of this Transcoder.
        :type low_latency: bool
        """

        self._low_latency = low_latency

    @property
    def name(self):
        """Gets the name of this Transcoder.

        A descriptive name for the transcoder. Maximum 200 characters.

        :return: The name of this Transcoder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Transcoder.

        A descriptive name for the transcoder. Maximum 200 characters.

        :param name: The name of this Transcoder.
        :type name: str
        """

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this Transcoder.

        Output renditions associated with the transcoder.

        :return: The outputs of this Transcoder.
        :rtype: List[Output]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Transcoder.

        Output renditions associated with the transcoder.

        :param outputs: The outputs of this Transcoder.
        :type outputs: List[Output]
        """

        self._outputs = outputs

    @property
    def password(self):
        """Gets the password of this Transcoder.

        A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :return: The password of this Transcoder.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Transcoder.

        A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :param password: The password of this Transcoder.
        :type password: str
        """

        self._password = password

    @property
    def play_maximum_connections(self):
        """Gets the play_maximum_connections of this Transcoder.

        The number of users who are allowed to connect directly to the transcoder.

        :return: The play_maximum_connections of this Transcoder.
        :rtype: int
        """
        return self._play_maximum_connections

    @play_maximum_connections.setter
    def play_maximum_connections(self, play_maximum_connections):
        """Sets the play_maximum_connections of this Transcoder.

        The number of users who are allowed to connect directly to the transcoder.

        :param play_maximum_connections: The play_maximum_connections of this Transcoder.
        :type play_maximum_connections: int
        """
        allowed_values = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]  # noqa: E501
        if play_maximum_connections not in allowed_values:
            raise ValueError(
                "Invalid value for `play_maximum_connections` ({0}), must be one of {1}"
                .format(play_maximum_connections, allowed_values)
            )

        self._play_maximum_connections = play_maximum_connections

    @property
    def protocol(self):
        """Gets the protocol of this Transcoder.

        The transport protocol for the source video. The default is <strong>rtmp</strong>.

        :return: The protocol of this Transcoder.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Transcoder.

        The transport protocol for the source video. The default is <strong>rtmp</strong>.

        :param protocol: The protocol of this Transcoder.
        :type protocol: str
        """
        allowed_values = ["rtmp", "rtsp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def recording(self):
        """Gets the recording of this Transcoder.

        If <strong>true</strong>, creates a recording of the transcoded output. The default is <strong>false</strong>.

        :return: The recording of this Transcoder.
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this Transcoder.

        If <strong>true</strong>, creates a recording of the transcoded output. The default is <strong>false</strong>.

        :param recording: The recording of this Transcoder.
        :type recording: bool
        """

        self._recording = recording

    @property
    def source_port(self):
        """Gets the source_port of this Transcoder.

        The port used for RTMP pull connections to Wowza Streaming Cloud.

        :return: The source_port of this Transcoder.
        :rtype: int
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this Transcoder.

        The port used for RTMP pull connections to Wowza Streaming Cloud.

        :param source_port: The source_port of this Transcoder.
        :type source_port: int
        """

        self._source_port = source_port

    @property
    def source_url(self):
        """Gets the source_url of this Transcoder.

        For the <em>delivery_method</em> <strong>pull</strong>. Enter the source's web address without the preceding protocol or the trailing slash (/).

        :return: The source_url of this Transcoder.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Transcoder.

        For the <em>delivery_method</em> <strong>pull</strong>. Enter the source's web address without the preceding protocol or the trailing slash (/).

        :param source_url: The source_url of this Transcoder.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def stream_extension(self):
        """Gets the stream_extension of this Transcoder.

        For the <em>delivery_method</em> <strong>push</strong>. Some encoders append an extension to their stream names. If the device you're using does this, enter the extension.

        :return: The stream_extension of this Transcoder.
        :rtype: str
        """
        return self._stream_extension

    @stream_extension.setter
    def stream_extension(self, stream_extension):
        """Sets the stream_extension of this Transcoder.

        For the <em>delivery_method</em> <strong>push</strong>. Some encoders append an extension to their stream names. If the device you're using does this, enter the extension.

        :param stream_extension: The stream_extension of this Transcoder.
        :type stream_extension: str
        """

        self._stream_extension = stream_extension

    @property
    def stream_name(self):
        """Gets the stream_name of this Transcoder.

        The stream name from the pull stream source URL.

        :return: The stream_name of this Transcoder.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this Transcoder.

        The stream name from the pull stream source URL.

        :param stream_name: The stream_name of this Transcoder.
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def stream_smoother(self):
        """Gets the stream_smoother of this Transcoder.

        A dynamic buffer that helps stabilize streams in rough network conditions, but adds latency. Specify <strong>true</strong> to enable stream smoothing. The default is <strong>false</strong>.

        :return: The stream_smoother of this Transcoder.
        :rtype: bool
        """
        return self._stream_smoother

    @stream_smoother.setter
    def stream_smoother(self, stream_smoother):
        """Sets the stream_smoother of this Transcoder.

        A dynamic buffer that helps stabilize streams in rough network conditions, but adds latency. Specify <strong>true</strong> to enable stream smoothing. The default is <strong>false</strong>.

        :param stream_smoother: The stream_smoother of this Transcoder.
        :type stream_smoother: bool
        """

        self._stream_smoother = stream_smoother

    @property
    def stream_source_id(self):
        """Gets the stream_source_id of this Transcoder.

        For the <em>delivery_method</em> <strong>cdn</strong>. The alphanumeric string that identifies the stream source that you want to use to deliver the stream to the transcoder.

        :return: The stream_source_id of this Transcoder.
        :rtype: str
        """
        return self._stream_source_id

    @stream_source_id.setter
    def stream_source_id(self, stream_source_id):
        """Sets the stream_source_id of this Transcoder.

        For the <em>delivery_method</em> <strong>cdn</strong>. The alphanumeric string that identifies the stream source that you want to use to deliver the stream to the transcoder.

        :param stream_source_id: The stream_source_id of this Transcoder.
        :type stream_source_id: str
        """

        self._stream_source_id = stream_source_id

    @property
    def suppress_stream_target_start(self):
        """Gets the suppress_stream_target_start of this Transcoder.

        If <strong>true</strong>, disables stream targets when the transcoder starts. If <strong>false</strong> (the default), the targets start when the transcoder starts.

        :return: The suppress_stream_target_start of this Transcoder.
        :rtype: bool
        """
        return self._suppress_stream_target_start

    @suppress_stream_target_start.setter
    def suppress_stream_target_start(self, suppress_stream_target_start):
        """Sets the suppress_stream_target_start of this Transcoder.

        If <strong>true</strong>, disables stream targets when the transcoder starts. If <strong>false</strong> (the default), the targets start when the transcoder starts.

        :param suppress_stream_target_start: The suppress_stream_target_start of this Transcoder.
        :type suppress_stream_target_start: bool
        """

        self._suppress_stream_target_start = suppress_stream_target_start

    @property
    def transcoder_type(self):
        """Gets the transcoder_type of this Transcoder.

        The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.

        :return: The transcoder_type of this Transcoder.
        :rtype: str
        """
        return self._transcoder_type

    @transcoder_type.setter
    def transcoder_type(self, transcoder_type):
        """Sets the transcoder_type of this Transcoder.

        The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.

        :param transcoder_type: The transcoder_type of this Transcoder.
        :type transcoder_type: str
        """
        allowed_values = ["transcoded", "passthrough"]  # noqa: E501
        if transcoder_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transcoder_type` ({0}), must be one of {1}"
                .format(transcoder_type, allowed_values)
            )

        self._transcoder_type = transcoder_type

    @property
    def updated_at(self):
        """Gets the updated_at of this Transcoder.

        The date and time that the transcoder was updated.

        :return: The updated_at of this Transcoder.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Transcoder.

        The date and time that the transcoder was updated.

        :param updated_at: The updated_at of this Transcoder.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def username(self):
        """Gets the username of this Transcoder.

        A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :return: The username of this Transcoder.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Transcoder.

        A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.

        :param username: The username of this Transcoder.
        :type username: str
        """

        self._username = username

    @property
    def video_fallback(self):
        """Gets the video_fallback of this Transcoder.

        If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with stream targets whose <em>provider</em> is <strong>akamai_cupertino</strong>.

        :return: The video_fallback of this Transcoder.
        :rtype: bool
        """
        return self._video_fallback

    @video_fallback.setter
    def video_fallback(self, video_fallback):
        """Sets the video_fallback of this Transcoder.

        If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with stream targets whose <em>provider</em> is <strong>akamai_cupertino</strong>.

        :param video_fallback: The video_fallback of this Transcoder.
        :type video_fallback: bool
        """

        self._video_fallback = video_fallback

    @property
    def watermark(self):
        """Gets the watermark of this Transcoder.

        Embeds an image into the transcoded stream for copyright protection. Specify <strong>true</strong> to embed a watermark image.

        :return: The watermark of this Transcoder.
        :rtype: bool
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this Transcoder.

        Embeds an image into the transcoded stream for copyright protection. Specify <strong>true</strong> to embed a watermark image.

        :param watermark: The watermark of this Transcoder.
        :type watermark: bool
        """

        self._watermark = watermark

    @property
    def watermark_height(self):
        """Gets the watermark_height of this Transcoder.

        The height, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image height.

        :return: The watermark_height of this Transcoder.
        :rtype: int
        """
        return self._watermark_height

    @watermark_height.setter
    def watermark_height(self, watermark_height):
        """Sets the watermark_height of this Transcoder.

        The height, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image height.

        :param watermark_height: The watermark_height of this Transcoder.
        :type watermark_height: int
        """

        self._watermark_height = watermark_height

    @property
    def watermark_image_url(self):
        """Gets the watermark_image_url of this Transcoder.

        The path to a GIF, JPEG, or PNG image that is embedded in all bitrate renditions of the stream. Watermark image files must be 2.5 MB or smaller.

        :return: The watermark_image_url of this Transcoder.
        :rtype: str
        """
        return self._watermark_image_url

    @watermark_image_url.setter
    def watermark_image_url(self, watermark_image_url):
        """Sets the watermark_image_url of this Transcoder.

        The path to a GIF, JPEG, or PNG image that is embedded in all bitrate renditions of the stream. Watermark image files must be 2.5 MB or smaller.

        :param watermark_image_url: The watermark_image_url of this Transcoder.
        :type watermark_image_url: str
        """

        self._watermark_image_url = watermark_image_url

    @property
    def watermark_opacity(self):
        """Gets the watermark_opacity of this Transcoder.

        The opacity, or percentage of transparency, of the watermark. <strong>0</strong> is fully transparent; <strong>100</strong> is fully opaque.

        :return: The watermark_opacity of this Transcoder.
        :rtype: int
        """
        return self._watermark_opacity

    @watermark_opacity.setter
    def watermark_opacity(self, watermark_opacity):
        """Sets the watermark_opacity of this Transcoder.

        The opacity, or percentage of transparency, of the watermark. <strong>0</strong> is fully transparent; <strong>100</strong> is fully opaque.

        :param watermark_opacity: The watermark_opacity of this Transcoder.
        :type watermark_opacity: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]  # noqa: E501
        if watermark_opacity not in allowed_values:
            raise ValueError(
                "Invalid value for `watermark_opacity` ({0}), must be one of {1}"
                .format(watermark_opacity, allowed_values)
            )

        self._watermark_opacity = watermark_opacity

    @property
    def watermark_position(self):
        """Gets the watermark_position of this Transcoder.

        The corner of the video frame in which you want the watermark to appear. The default is <strong>top-left</strong>.

        :return: The watermark_position of this Transcoder.
        :rtype: str
        """
        return self._watermark_position

    @watermark_position.setter
    def watermark_position(self, watermark_position):
        """Sets the watermark_position of this Transcoder.

        The corner of the video frame in which you want the watermark to appear. The default is <strong>top-left</strong>.

        :param watermark_position: The watermark_position of this Transcoder.
        :type watermark_position: str
        """
        allowed_values = ["top-left", "top-right", "bottom-left", "bottom-right"]  # noqa: E501
        if watermark_position not in allowed_values:
            raise ValueError(
                "Invalid value for `watermark_position` ({0}), must be one of {1}"
                .format(watermark_position, allowed_values)
            )

        self._watermark_position = watermark_position

    @property
    def watermark_width(self):
        """Gets the watermark_width of this Transcoder.

        The width, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image width.

        :return: The watermark_width of this Transcoder.
        :rtype: int
        """
        return self._watermark_width

    @watermark_width.setter
    def watermark_width(self, watermark_width):
        """Sets the watermark_width of this Transcoder.

        The width, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image width.

        :param watermark_width: The watermark_width of this Transcoder.
        :type watermark_width: int
        """

        self._watermark_width = watermark_width
