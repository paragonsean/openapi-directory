/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITranscodersApi_H
#define OAI_OAITranscodersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddStreamTargetToTranscoderOutput_200_response.h"
#include "OAICreateTranscoderOutput_200_response.h"
#include "OAICreateTranscoderProperty_200_response.h"
#include "OAICreateTranscoder_200_response.h"
#include "OAIDisableAllStreamTargetsTranscoder_200_response.h"
#include "OAIDisableTranscoderOutputOutputStreamTarget_200_response.h"
#include "OAIEnableTranscoderOutputOutputStreamTarget_200_response.h"
#include "OAIError401.h"
#include "OAIError403.h"
#include "OAIError404.h"
#include "OAIError410.h"
#include "OAIError422.h"
#include "OAIListTranscoderRecordings_200_response.h"
#include "OAIListTranscoderSchedules_200_response.h"
#include "OAIOutput_add_stream_target_input.h"
#include "OAIOutput_create_input.h"
#include "OAIOutput_remove_stream_target_input.h"
#include "OAIOutput_stream_target.h"
#include "OAIOutput_stream_target_create_input.h"
#include "OAIOutput_stream_target_update_input.h"
#include "OAIOutput_update_input.h"
#include "OAIOutputs.h"
#include "OAIResetTranscoder_200_response.h"
#include "OAIRestartTranscoderOutputOutputStreamTarget_200_response.h"
#include "OAIShowTranscoderState_200_response.h"
#include "OAIShowTranscoderStats_200_response.h"
#include "OAIShowTranscoderThumbnailUrl_200_response.h"
#include "OAIShowUptimeMetricsCurrent_200_response.h"
#include "OAIShowUptimeMetricsHistoric_200_response.h"
#include "OAIStartTranscoder_200_response.h"
#include "OAITranscoder_create_input.h"
#include "OAITranscoder_properties.h"
#include "OAITranscoder_property_create_input.h"
#include "OAITranscoder_update_input.h"
#include "OAITranscoders.h"
#include "OAIUptime.h"
#include "OAIUptimes.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITranscodersApi : public QObject {
    Q_OBJECT

public:
    OAITranscodersApi(const int timeOut = 0);
    ~OAITranscodersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  output_stream_target OAIOutput_add_stream_target_input [required]
    */
    Q_DECL_DEPRECATED virtual void addStreamTargetToTranscoderOutput(const QString &transcoder_id, const QString &id, const OAIOutput_add_stream_target_input &output_stream_target);

    /**
    * @param[in]  transcoder OAITranscoder_create_input [required]
    */
    virtual void createTranscoder(const OAITranscoder_create_input &transcoder);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output OAIOutput_create_input [required]
    */
    virtual void createTranscoderOutput(const QString &transcoder_id, const OAIOutput_create_input &output);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  output_stream_target OAIOutput_stream_target_create_input [required]
    */
    virtual void createTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const OAIOutput_stream_target_create_input &output_stream_target);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  property OAITranscoder_property_create_input [required]
    */
    virtual void createTranscoderProperty(const QString &transcoder_id, const OAITranscoder_property_create_input &property);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteTranscoder(const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteTranscoderOutput(const QString &transcoder_id, const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  stream_target_id QString [required]
    */
    virtual void deleteTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const QString &stream_target_id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteTranscoderProperty(const QString &transcoder_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableAllStreamTargetsTranscoder(const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  stream_target_id QString [required]
    */
    virtual void disableTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const QString &stream_target_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableAllStreamTargetsTranscoder(const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  stream_target_id QString [required]
    */
    virtual void enableTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const QString &stream_target_id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void indexUptimes(const QString &transcoder_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    */
    virtual void listTranscoderOutputOutputStreamTargets(const QString &transcoder_id, const QString &output_id);

    /**
    * @param[in]  transcoder_id QString [required]
    */
    virtual void listTranscoderOutputs(const QString &transcoder_id);

    /**
    * @param[in]  transcoder_id QString [required]
    */
    virtual void listTranscoderProperties(const QString &transcoder_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void listTranscoderRecordings(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void listTranscoderSchedules(const QString &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listTranscoders(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  output_stream_target OAIOutput_remove_stream_target_input [required]
    */
    Q_DECL_DEPRECATED virtual void removeStreamTargetToTranscoderOutput(const QString &transcoder_id, const QString &id, const OAIOutput_remove_stream_target_input &output_stream_target);

    /**
    * @param[in]  id QString [required]
    */
    virtual void resetTranscoder(const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  stream_target_id QString [required]
    */
    virtual void restartTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const QString &stream_target_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showTranscoder(const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void showTranscoderOutput(const QString &transcoder_id, const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  stream_target_id QString [required]
    */
    virtual void showTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const QString &stream_target_id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void showTranscoderProperty(const QString &transcoder_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showTranscoderState(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showTranscoderStats(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showTranscoderThumbnailUrl(const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void showUptime(const QString &transcoder_id, const QString &id);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void showUptimeMetricsCurrent(const QString &transcoder_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  fields QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void showUptimeMetricsHistoric(const QString &transcoder_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void startTranscoder(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void stopTranscoder(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  transcoder OAITranscoder_update_input [required]
    */
    virtual void updateTranscoder(const QString &id, const OAITranscoder_update_input &transcoder);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  output OAIOutput_update_input [required]
    */
    virtual void updateTranscoderOutput(const QString &transcoder_id, const QString &id, const OAIOutput_update_input &output);

    /**
    * @param[in]  transcoder_id QString [required]
    * @param[in]  output_id QString [required]
    * @param[in]  stream_target_id QString [required]
    * @param[in]  output_stream_target OAIOutput_stream_target_update_input [required]
    */
    virtual void updateTranscoderOutputOutputStreamTarget(const QString &transcoder_id, const QString &output_id, const QString &stream_target_id, const OAIOutput_stream_target_update_input &output_stream_target);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addStreamTargetToTranscoderOutputCallback(OAIHttpRequestWorker *worker);
    void createTranscoderCallback(OAIHttpRequestWorker *worker);
    void createTranscoderOutputCallback(OAIHttpRequestWorker *worker);
    void createTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);
    void createTranscoderPropertyCallback(OAIHttpRequestWorker *worker);
    void deleteTranscoderCallback(OAIHttpRequestWorker *worker);
    void deleteTranscoderOutputCallback(OAIHttpRequestWorker *worker);
    void deleteTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);
    void deleteTranscoderPropertyCallback(OAIHttpRequestWorker *worker);
    void disableAllStreamTargetsTranscoderCallback(OAIHttpRequestWorker *worker);
    void disableTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);
    void enableAllStreamTargetsTranscoderCallback(OAIHttpRequestWorker *worker);
    void enableTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);
    void indexUptimesCallback(OAIHttpRequestWorker *worker);
    void listTranscoderOutputOutputStreamTargetsCallback(OAIHttpRequestWorker *worker);
    void listTranscoderOutputsCallback(OAIHttpRequestWorker *worker);
    void listTranscoderPropertiesCallback(OAIHttpRequestWorker *worker);
    void listTranscoderRecordingsCallback(OAIHttpRequestWorker *worker);
    void listTranscoderSchedulesCallback(OAIHttpRequestWorker *worker);
    void listTranscodersCallback(OAIHttpRequestWorker *worker);
    void removeStreamTargetToTranscoderOutputCallback(OAIHttpRequestWorker *worker);
    void resetTranscoderCallback(OAIHttpRequestWorker *worker);
    void restartTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);
    void showTranscoderCallback(OAIHttpRequestWorker *worker);
    void showTranscoderOutputCallback(OAIHttpRequestWorker *worker);
    void showTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);
    void showTranscoderPropertyCallback(OAIHttpRequestWorker *worker);
    void showTranscoderStateCallback(OAIHttpRequestWorker *worker);
    void showTranscoderStatsCallback(OAIHttpRequestWorker *worker);
    void showTranscoderThumbnailUrlCallback(OAIHttpRequestWorker *worker);
    void showUptimeCallback(OAIHttpRequestWorker *worker);
    void showUptimeMetricsCurrentCallback(OAIHttpRequestWorker *worker);
    void showUptimeMetricsHistoricCallback(OAIHttpRequestWorker *worker);
    void startTranscoderCallback(OAIHttpRequestWorker *worker);
    void stopTranscoderCallback(OAIHttpRequestWorker *worker);
    void updateTranscoderCallback(OAIHttpRequestWorker *worker);
    void updateTranscoderOutputCallback(OAIHttpRequestWorker *worker);
    void updateTranscoderOutputOutputStreamTargetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addStreamTargetToTranscoderOutputSignal(OAIAddStreamTargetToTranscoderOutput_200_response summary);
    void createTranscoderSignal(OAICreateTranscoder_200_response summary);
    void createTranscoderOutputSignal(OAICreateTranscoderOutput_200_response summary);
    void createTranscoderOutputOutputStreamTargetSignal(OAIAddStreamTargetToTranscoderOutput_200_response summary);
    void createTranscoderPropertySignal(OAICreateTranscoderProperty_200_response summary);
    void deleteTranscoderSignal();
    void deleteTranscoderOutputSignal();
    void deleteTranscoderOutputOutputStreamTargetSignal();
    void deleteTranscoderPropertySignal();
    void disableAllStreamTargetsTranscoderSignal(OAIDisableAllStreamTargetsTranscoder_200_response summary);
    void disableTranscoderOutputOutputStreamTargetSignal(OAIDisableTranscoderOutputOutputStreamTarget_200_response summary);
    void enableAllStreamTargetsTranscoderSignal(OAIDisableAllStreamTargetsTranscoder_200_response summary);
    void enableTranscoderOutputOutputStreamTargetSignal(OAIEnableTranscoderOutputOutputStreamTarget_200_response summary);
    void indexUptimesSignal(OAIUptimes summary);
    void listTranscoderOutputOutputStreamTargetsSignal(OAIOutput_stream_target summary);
    void listTranscoderOutputsSignal(OAIOutputs summary);
    void listTranscoderPropertiesSignal(OAITranscoder_properties summary);
    void listTranscoderRecordingsSignal(OAIListTranscoderRecordings_200_response summary);
    void listTranscoderSchedulesSignal(OAIListTranscoderSchedules_200_response summary);
    void listTranscodersSignal(OAITranscoders summary);
    void removeStreamTargetToTranscoderOutputSignal();
    void resetTranscoderSignal(OAIResetTranscoder_200_response summary);
    void restartTranscoderOutputOutputStreamTargetSignal(OAIRestartTranscoderOutputOutputStreamTarget_200_response summary);
    void showTranscoderSignal(OAICreateTranscoder_200_response summary);
    void showTranscoderOutputSignal(OAICreateTranscoderOutput_200_response summary);
    void showTranscoderOutputOutputStreamTargetSignal(OAIAddStreamTargetToTranscoderOutput_200_response summary);
    void showTranscoderPropertySignal(OAICreateTranscoderProperty_200_response summary);
    void showTranscoderStateSignal(OAIShowTranscoderState_200_response summary);
    void showTranscoderStatsSignal(OAIShowTranscoderStats_200_response summary);
    void showTranscoderThumbnailUrlSignal(OAIShowTranscoderThumbnailUrl_200_response summary);
    void showUptimeSignal(OAIUptime summary);
    void showUptimeMetricsCurrentSignal(OAIShowUptimeMetricsCurrent_200_response summary);
    void showUptimeMetricsHistoricSignal(OAIShowUptimeMetricsHistoric_200_response summary);
    void startTranscoderSignal(OAIStartTranscoder_200_response summary);
    void stopTranscoderSignal(OAIStartTranscoder_200_response summary);
    void updateTranscoderSignal(OAICreateTranscoder_200_response summary);
    void updateTranscoderOutputSignal(OAICreateTranscoderOutput_200_response summary);
    void updateTranscoderOutputOutputStreamTargetSignal(OAIAddStreamTargetToTranscoderOutput_200_response summary);


    void addStreamTargetToTranscoderOutputSignalFull(OAIHttpRequestWorker *worker, OAIAddStreamTargetToTranscoderOutput_200_response summary);
    void createTranscoderSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoder_200_response summary);
    void createTranscoderOutputSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoderOutput_200_response summary);
    void createTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker, OAIAddStreamTargetToTranscoderOutput_200_response summary);
    void createTranscoderPropertySignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoderProperty_200_response summary);
    void deleteTranscoderSignalFull(OAIHttpRequestWorker *worker);
    void deleteTranscoderOutputSignalFull(OAIHttpRequestWorker *worker);
    void deleteTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker);
    void deleteTranscoderPropertySignalFull(OAIHttpRequestWorker *worker);
    void disableAllStreamTargetsTranscoderSignalFull(OAIHttpRequestWorker *worker, OAIDisableAllStreamTargetsTranscoder_200_response summary);
    void disableTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker, OAIDisableTranscoderOutputOutputStreamTarget_200_response summary);
    void enableAllStreamTargetsTranscoderSignalFull(OAIHttpRequestWorker *worker, OAIDisableAllStreamTargetsTranscoder_200_response summary);
    void enableTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker, OAIEnableTranscoderOutputOutputStreamTarget_200_response summary);
    void indexUptimesSignalFull(OAIHttpRequestWorker *worker, OAIUptimes summary);
    void listTranscoderOutputOutputStreamTargetsSignalFull(OAIHttpRequestWorker *worker, OAIOutput_stream_target summary);
    void listTranscoderOutputsSignalFull(OAIHttpRequestWorker *worker, OAIOutputs summary);
    void listTranscoderPropertiesSignalFull(OAIHttpRequestWorker *worker, OAITranscoder_properties summary);
    void listTranscoderRecordingsSignalFull(OAIHttpRequestWorker *worker, OAIListTranscoderRecordings_200_response summary);
    void listTranscoderSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIListTranscoderSchedules_200_response summary);
    void listTranscodersSignalFull(OAIHttpRequestWorker *worker, OAITranscoders summary);
    void removeStreamTargetToTranscoderOutputSignalFull(OAIHttpRequestWorker *worker);
    void resetTranscoderSignalFull(OAIHttpRequestWorker *worker, OAIResetTranscoder_200_response summary);
    void restartTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker, OAIRestartTranscoderOutputOutputStreamTarget_200_response summary);
    void showTranscoderSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoder_200_response summary);
    void showTranscoderOutputSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoderOutput_200_response summary);
    void showTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker, OAIAddStreamTargetToTranscoderOutput_200_response summary);
    void showTranscoderPropertySignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoderProperty_200_response summary);
    void showTranscoderStateSignalFull(OAIHttpRequestWorker *worker, OAIShowTranscoderState_200_response summary);
    void showTranscoderStatsSignalFull(OAIHttpRequestWorker *worker, OAIShowTranscoderStats_200_response summary);
    void showTranscoderThumbnailUrlSignalFull(OAIHttpRequestWorker *worker, OAIShowTranscoderThumbnailUrl_200_response summary);
    void showUptimeSignalFull(OAIHttpRequestWorker *worker, OAIUptime summary);
    void showUptimeMetricsCurrentSignalFull(OAIHttpRequestWorker *worker, OAIShowUptimeMetricsCurrent_200_response summary);
    void showUptimeMetricsHistoricSignalFull(OAIHttpRequestWorker *worker, OAIShowUptimeMetricsHistoric_200_response summary);
    void startTranscoderSignalFull(OAIHttpRequestWorker *worker, OAIStartTranscoder_200_response summary);
    void stopTranscoderSignalFull(OAIHttpRequestWorker *worker, OAIStartTranscoder_200_response summary);
    void updateTranscoderSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoder_200_response summary);
    void updateTranscoderOutputSignalFull(OAIHttpRequestWorker *worker, OAICreateTranscoderOutput_200_response summary);
    void updateTranscoderOutputOutputStreamTargetSignalFull(OAIHttpRequestWorker *worker, OAIAddStreamTargetToTranscoderOutput_200_response summary);

    Q_DECL_DEPRECATED_X("Use addStreamTargetToTranscoderOutputSignalError() instead")
    void addStreamTargetToTranscoderOutputSignalE(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addStreamTargetToTranscoderOutputSignalError(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderSignalError() instead")
    void createTranscoderSignalE(OAICreateTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderSignalError(OAICreateTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderOutputSignalError() instead")
    void createTranscoderOutputSignalE(OAICreateTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderOutputSignalError(OAICreateTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderOutputOutputStreamTargetSignalError() instead")
    void createTranscoderOutputOutputStreamTargetSignalE(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderOutputOutputStreamTargetSignalError(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderPropertySignalError() instead")
    void createTranscoderPropertySignalE(OAICreateTranscoderProperty_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderPropertySignalError(OAICreateTranscoderProperty_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderSignalError() instead")
    void deleteTranscoderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderOutputSignalError() instead")
    void deleteTranscoderOutputSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderOutputSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderOutputOutputStreamTargetSignalError() instead")
    void deleteTranscoderOutputOutputStreamTargetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderOutputOutputStreamTargetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderPropertySignalError() instead")
    void deleteTranscoderPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableAllStreamTargetsTranscoderSignalError() instead")
    void disableAllStreamTargetsTranscoderSignalE(OAIDisableAllStreamTargetsTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableAllStreamTargetsTranscoderSignalError(OAIDisableAllStreamTargetsTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableTranscoderOutputOutputStreamTargetSignalError() instead")
    void disableTranscoderOutputOutputStreamTargetSignalE(OAIDisableTranscoderOutputOutputStreamTarget_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableTranscoderOutputOutputStreamTargetSignalError(OAIDisableTranscoderOutputOutputStreamTarget_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAllStreamTargetsTranscoderSignalError() instead")
    void enableAllStreamTargetsTranscoderSignalE(OAIDisableAllStreamTargetsTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAllStreamTargetsTranscoderSignalError(OAIDisableAllStreamTargetsTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableTranscoderOutputOutputStreamTargetSignalError() instead")
    void enableTranscoderOutputOutputStreamTargetSignalE(OAIEnableTranscoderOutputOutputStreamTarget_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableTranscoderOutputOutputStreamTargetSignalError(OAIEnableTranscoderOutputOutputStreamTarget_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use indexUptimesSignalError() instead")
    void indexUptimesSignalE(OAIUptimes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexUptimesSignalError(OAIUptimes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderOutputOutputStreamTargetsSignalError() instead")
    void listTranscoderOutputOutputStreamTargetsSignalE(OAIOutput_stream_target summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderOutputOutputStreamTargetsSignalError(OAIOutput_stream_target summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderOutputsSignalError() instead")
    void listTranscoderOutputsSignalE(OAIOutputs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderOutputsSignalError(OAIOutputs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderPropertiesSignalError() instead")
    void listTranscoderPropertiesSignalE(OAITranscoder_properties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderPropertiesSignalError(OAITranscoder_properties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderRecordingsSignalError() instead")
    void listTranscoderRecordingsSignalE(OAIListTranscoderRecordings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderRecordingsSignalError(OAIListTranscoderRecordings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderSchedulesSignalError() instead")
    void listTranscoderSchedulesSignalE(OAIListTranscoderSchedules_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderSchedulesSignalError(OAIListTranscoderSchedules_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscodersSignalError() instead")
    void listTranscodersSignalE(OAITranscoders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscodersSignalError(OAITranscoders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeStreamTargetToTranscoderOutputSignalError() instead")
    void removeStreamTargetToTranscoderOutputSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeStreamTargetToTranscoderOutputSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTranscoderSignalError() instead")
    void resetTranscoderSignalE(OAIResetTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetTranscoderSignalError(OAIResetTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartTranscoderOutputOutputStreamTargetSignalError() instead")
    void restartTranscoderOutputOutputStreamTargetSignalE(OAIRestartTranscoderOutputOutputStreamTarget_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restartTranscoderOutputOutputStreamTargetSignalError(OAIRestartTranscoderOutputOutputStreamTarget_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderSignalError() instead")
    void showTranscoderSignalE(OAICreateTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderSignalError(OAICreateTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderOutputSignalError() instead")
    void showTranscoderOutputSignalE(OAICreateTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderOutputSignalError(OAICreateTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderOutputOutputStreamTargetSignalError() instead")
    void showTranscoderOutputOutputStreamTargetSignalE(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderOutputOutputStreamTargetSignalError(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderPropertySignalError() instead")
    void showTranscoderPropertySignalE(OAICreateTranscoderProperty_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderPropertySignalError(OAICreateTranscoderProperty_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderStateSignalError() instead")
    void showTranscoderStateSignalE(OAIShowTranscoderState_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderStateSignalError(OAIShowTranscoderState_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderStatsSignalError() instead")
    void showTranscoderStatsSignalE(OAIShowTranscoderStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderStatsSignalError(OAIShowTranscoderStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderThumbnailUrlSignalError() instead")
    void showTranscoderThumbnailUrlSignalE(OAIShowTranscoderThumbnailUrl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderThumbnailUrlSignalError(OAIShowTranscoderThumbnailUrl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showUptimeSignalError() instead")
    void showUptimeSignalE(OAIUptime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showUptimeSignalError(OAIUptime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showUptimeMetricsCurrentSignalError() instead")
    void showUptimeMetricsCurrentSignalE(OAIShowUptimeMetricsCurrent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showUptimeMetricsCurrentSignalError(OAIShowUptimeMetricsCurrent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showUptimeMetricsHistoricSignalError() instead")
    void showUptimeMetricsHistoricSignalE(OAIShowUptimeMetricsHistoric_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showUptimeMetricsHistoricSignalError(OAIShowUptimeMetricsHistoric_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTranscoderSignalError() instead")
    void startTranscoderSignalE(OAIStartTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startTranscoderSignalError(OAIStartTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopTranscoderSignalError() instead")
    void stopTranscoderSignalE(OAIStartTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopTranscoderSignalError(OAIStartTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscoderSignalError() instead")
    void updateTranscoderSignalE(OAICreateTranscoder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscoderSignalError(OAICreateTranscoder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscoderOutputSignalError() instead")
    void updateTranscoderOutputSignalE(OAICreateTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscoderOutputSignalError(OAICreateTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscoderOutputOutputStreamTargetSignalError() instead")
    void updateTranscoderOutputOutputStreamTargetSignalE(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscoderOutputOutputStreamTargetSignalError(OAIAddStreamTargetToTranscoderOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addStreamTargetToTranscoderOutputSignalErrorFull() instead")
    void addStreamTargetToTranscoderOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addStreamTargetToTranscoderOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderSignalErrorFull() instead")
    void createTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderOutputSignalErrorFull() instead")
    void createTranscoderOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void createTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTranscoderPropertySignalErrorFull() instead")
    void createTranscoderPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscoderPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderSignalErrorFull() instead")
    void deleteTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderOutputSignalErrorFull() instead")
    void deleteTranscoderOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void deleteTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscoderPropertySignalErrorFull() instead")
    void deleteTranscoderPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscoderPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableAllStreamTargetsTranscoderSignalErrorFull() instead")
    void disableAllStreamTargetsTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableAllStreamTargetsTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void disableTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAllStreamTargetsTranscoderSignalErrorFull() instead")
    void enableAllStreamTargetsTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAllStreamTargetsTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void enableTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use indexUptimesSignalErrorFull() instead")
    void indexUptimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexUptimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderOutputOutputStreamTargetsSignalErrorFull() instead")
    void listTranscoderOutputOutputStreamTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderOutputOutputStreamTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderOutputsSignalErrorFull() instead")
    void listTranscoderOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderPropertiesSignalErrorFull() instead")
    void listTranscoderPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderRecordingsSignalErrorFull() instead")
    void listTranscoderRecordingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderRecordingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscoderSchedulesSignalErrorFull() instead")
    void listTranscoderSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscoderSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscodersSignalErrorFull() instead")
    void listTranscodersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscodersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeStreamTargetToTranscoderOutputSignalErrorFull() instead")
    void removeStreamTargetToTranscoderOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeStreamTargetToTranscoderOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTranscoderSignalErrorFull() instead")
    void resetTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void restartTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restartTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderSignalErrorFull() instead")
    void showTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderOutputSignalErrorFull() instead")
    void showTranscoderOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void showTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderPropertySignalErrorFull() instead")
    void showTranscoderPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderStateSignalErrorFull() instead")
    void showTranscoderStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderStatsSignalErrorFull() instead")
    void showTranscoderStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showTranscoderThumbnailUrlSignalErrorFull() instead")
    void showTranscoderThumbnailUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showTranscoderThumbnailUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showUptimeSignalErrorFull() instead")
    void showUptimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showUptimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showUptimeMetricsCurrentSignalErrorFull() instead")
    void showUptimeMetricsCurrentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showUptimeMetricsCurrentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showUptimeMetricsHistoricSignalErrorFull() instead")
    void showUptimeMetricsHistoricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showUptimeMetricsHistoricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTranscoderSignalErrorFull() instead")
    void startTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopTranscoderSignalErrorFull() instead")
    void stopTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscoderSignalErrorFull() instead")
    void updateTranscoderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscoderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscoderOutputSignalErrorFull() instead")
    void updateTranscoderOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscoderOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscoderOutputOutputStreamTargetSignalErrorFull() instead")
    void updateTranscoderOutputOutputStreamTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscoderOutputOutputStreamTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
