/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpec.h
 *
 * 
 */

#ifndef OAISpec_H
#define OAISpec_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISpec : public OAIObject {
public:
    OAISpec();
    OAISpec(QString json);
    ~OAISpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBasePath() const;
    void setBasePath(const QString &base_path);
    bool is_base_path_Set() const;
    bool is_base_path_Valid() const;

    QList<QString> getConsumes() const;
    void setConsumes(const QList<QString> &consumes);
    bool is_consumes_Set() const;
    bool is_consumes_Valid() const;

    OAIObject getDefinitions() const;
    void setDefinitions(const OAIObject &definitions);
    bool is_definitions_Set() const;
    bool is_definitions_Valid() const;

    OAIObject getExternalDocs() const;
    void setExternalDocs(const OAIObject &external_docs);
    bool is_external_docs_Set() const;
    bool is_external_docs_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    OAIObject getInfo() const;
    void setInfo(const OAIObject &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    OAIObject getPaths() const;
    void setPaths(const OAIObject &paths);
    bool is_paths_Set() const;
    bool is_paths_Valid() const;

    QList<QString> getProduces() const;
    void setProduces(const QList<QString> &produces);
    bool is_produces_Set() const;
    bool is_produces_Valid() const;

    QList<QString> getSchemes() const;
    void setSchemes(const QList<QString> &schemes);
    bool is_schemes_Set() const;
    bool is_schemes_Valid() const;

    QList<OAIObject> getSecurity() const;
    void setSecurity(const QList<OAIObject> &security);
    bool is_security_Set() const;
    bool is_security_Valid() const;

    OAIObject getSecurityDefinitions() const;
    void setSecurityDefinitions(const OAIObject &security_definitions);
    bool is_security_definitions_Set() const;
    bool is_security_definitions_Valid() const;

    QString getSwagger() const;
    void setSwagger(const QString &swagger);
    bool is_swagger_Set() const;
    bool is_swagger_Valid() const;

    QList<OAIObject> getTags() const;
    void setTags(const QList<OAIObject> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList<OAIObject> getXTagGroups() const;
    void setXTagGroups(const QList<OAIObject> &x_tag_groups);
    bool is_x_tag_groups_Set() const;
    bool is_x_tag_groups_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_base_path;
    bool m_base_path_isSet;
    bool m_base_path_isValid;

    QList<QString> m_consumes;
    bool m_consumes_isSet;
    bool m_consumes_isValid;

    OAIObject m_definitions;
    bool m_definitions_isSet;
    bool m_definitions_isValid;

    OAIObject m_external_docs;
    bool m_external_docs_isSet;
    bool m_external_docs_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    OAIObject m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    OAIObject m_paths;
    bool m_paths_isSet;
    bool m_paths_isValid;

    QList<QString> m_produces;
    bool m_produces_isSet;
    bool m_produces_isValid;

    QList<QString> m_schemes;
    bool m_schemes_isSet;
    bool m_schemes_isValid;

    QList<OAIObject> m_security;
    bool m_security_isSet;
    bool m_security_isValid;

    OAIObject m_security_definitions;
    bool m_security_definitions_isSet;
    bool m_security_definitions_isValid;

    QString m_swagger;
    bool m_swagger_isSet;
    bool m_swagger_isValid;

    QList<OAIObject> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList<OAIObject> m_x_tag_groups;
    bool m_x_tag_groups_isSet;
    bool m_x_tag_groups_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpec)

#endif // OAISpec_H
