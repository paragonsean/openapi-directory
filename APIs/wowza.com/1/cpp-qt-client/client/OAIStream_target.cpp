/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStream_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStream_target::OAIStream_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStream_target::OAIStream_target() {
    this->initializeModel();
}

OAIStream_target::~OAIStream_target() {}

void OAIStream_target::initializeModel() {

    m_backup_url_isSet = false;
    m_backup_url_isValid = false;

    m_chunk_size_isSet = false;
    m_chunk_size_isValid = false;

    m_connection_code_isSet = false;
    m_connection_code_isValid = false;

    m_connection_code_expires_at_isSet = false;
    m_connection_code_expires_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_enable_hls_isSet = false;
    m_enable_hls_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_hds_playback_url_isSet = false;
    m_hds_playback_url_isValid = false;

    m_hls_playback_url_isSet = false;
    m_hls_playback_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ingest_ip_whitelist_isSet = false;
    m_ingest_ip_whitelist_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_playback_urls_isSet = false;
    m_playback_urls_isValid = false;

    m_primary_url_isSet = false;
    m_primary_url_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_region_override_isSet = false;
    m_region_override_isValid = false;

    m_rtmp_playback_url_isSet = false;
    m_rtmp_playback_url_isValid = false;

    m_secure_ingest_query_param_isSet = false;
    m_secure_ingest_query_param_isValid = false;

    m_source_delivery_method_isSet = false;
    m_source_delivery_method_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_use_cors_isSet = false;
    m_use_cors_isValid = false;

    m_use_https_isSet = false;
    m_use_https_isValid = false;

    m_use_secure_ingest_isSet = false;
    m_use_secure_ingest_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIStream_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStream_target::fromJsonObject(QJsonObject json) {

    m_backup_url_isValid = ::OpenAPI::fromJsonValue(m_backup_url, json[QString("backup_url")]);
    m_backup_url_isSet = !json[QString("backup_url")].isNull() && m_backup_url_isValid;

    m_chunk_size_isValid = ::OpenAPI::fromJsonValue(m_chunk_size, json[QString("chunk_size")]);
    m_chunk_size_isSet = !json[QString("chunk_size")].isNull() && m_chunk_size_isValid;

    m_connection_code_isValid = ::OpenAPI::fromJsonValue(m_connection_code, json[QString("connection_code")]);
    m_connection_code_isSet = !json[QString("connection_code")].isNull() && m_connection_code_isValid;

    m_connection_code_expires_at_isValid = ::OpenAPI::fromJsonValue(m_connection_code_expires_at, json[QString("connection_code_expires_at")]);
    m_connection_code_expires_at_isSet = !json[QString("connection_code_expires_at")].isNull() && m_connection_code_expires_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_enable_hls_isValid = ::OpenAPI::fromJsonValue(m_enable_hls, json[QString("enable_hls")]);
    m_enable_hls_isSet = !json[QString("enable_hls")].isNull() && m_enable_hls_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_hds_playback_url_isValid = ::OpenAPI::fromJsonValue(m_hds_playback_url, json[QString("hds_playback_url")]);
    m_hds_playback_url_isSet = !json[QString("hds_playback_url")].isNull() && m_hds_playback_url_isValid;

    m_hls_playback_url_isValid = ::OpenAPI::fromJsonValue(m_hls_playback_url, json[QString("hls_playback_url")]);
    m_hls_playback_url_isSet = !json[QString("hls_playback_url")].isNull() && m_hls_playback_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ingest_ip_whitelist_isValid = ::OpenAPI::fromJsonValue(m_ingest_ip_whitelist, json[QString("ingest_ip_whitelist")]);
    m_ingest_ip_whitelist_isSet = !json[QString("ingest_ip_whitelist")].isNull() && m_ingest_ip_whitelist_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_playback_urls_isValid = ::OpenAPI::fromJsonValue(m_playback_urls, json[QString("playback_urls")]);
    m_playback_urls_isSet = !json[QString("playback_urls")].isNull() && m_playback_urls_isValid;

    m_primary_url_isValid = ::OpenAPI::fromJsonValue(m_primary_url, json[QString("primary_url")]);
    m_primary_url_isSet = !json[QString("primary_url")].isNull() && m_primary_url_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_region_override_isValid = ::OpenAPI::fromJsonValue(m_region_override, json[QString("region_override")]);
    m_region_override_isSet = !json[QString("region_override")].isNull() && m_region_override_isValid;

    m_rtmp_playback_url_isValid = ::OpenAPI::fromJsonValue(m_rtmp_playback_url, json[QString("rtmp_playback_url")]);
    m_rtmp_playback_url_isSet = !json[QString("rtmp_playback_url")].isNull() && m_rtmp_playback_url_isValid;

    m_secure_ingest_query_param_isValid = ::OpenAPI::fromJsonValue(m_secure_ingest_query_param, json[QString("secure_ingest_query_param")]);
    m_secure_ingest_query_param_isSet = !json[QString("secure_ingest_query_param")].isNull() && m_secure_ingest_query_param_isValid;

    m_source_delivery_method_isValid = ::OpenAPI::fromJsonValue(m_source_delivery_method, json[QString("source_delivery_method")]);
    m_source_delivery_method_isSet = !json[QString("source_delivery_method")].isNull() && m_source_delivery_method_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("stream_name")]);
    m_stream_name_isSet = !json[QString("stream_name")].isNull() && m_stream_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_use_cors_isValid = ::OpenAPI::fromJsonValue(m_use_cors, json[QString("use_cors")]);
    m_use_cors_isSet = !json[QString("use_cors")].isNull() && m_use_cors_isValid;

    m_use_https_isValid = ::OpenAPI::fromJsonValue(m_use_https, json[QString("use_https")]);
    m_use_https_isSet = !json[QString("use_https")].isNull() && m_use_https_isValid;

    m_use_secure_ingest_isValid = ::OpenAPI::fromJsonValue(m_use_secure_ingest, json[QString("use_secure_ingest")]);
    m_use_secure_ingest_isSet = !json[QString("use_secure_ingest")].isNull() && m_use_secure_ingest_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIStream_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStream_target::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_url_isSet) {
        obj.insert(QString("backup_url"), ::OpenAPI::toJsonValue(m_backup_url));
    }
    if (m_chunk_size_isSet) {
        obj.insert(QString("chunk_size"), ::OpenAPI::toJsonValue(m_chunk_size));
    }
    if (m_connection_code_isSet) {
        obj.insert(QString("connection_code"), ::OpenAPI::toJsonValue(m_connection_code));
    }
    if (m_connection_code_expires_at_isSet) {
        obj.insert(QString("connection_code_expires_at"), ::OpenAPI::toJsonValue(m_connection_code_expires_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_enable_hls_isSet) {
        obj.insert(QString("enable_hls"), ::OpenAPI::toJsonValue(m_enable_hls));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_hds_playback_url_isSet) {
        obj.insert(QString("hds_playback_url"), ::OpenAPI::toJsonValue(m_hds_playback_url));
    }
    if (m_hls_playback_url_isSet) {
        obj.insert(QString("hls_playback_url"), ::OpenAPI::toJsonValue(m_hls_playback_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ingest_ip_whitelist.size() > 0) {
        obj.insert(QString("ingest_ip_whitelist"), ::OpenAPI::toJsonValue(m_ingest_ip_whitelist));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_playback_urls.isSet()) {
        obj.insert(QString("playback_urls"), ::OpenAPI::toJsonValue(m_playback_urls));
    }
    if (m_primary_url_isSet) {
        obj.insert(QString("primary_url"), ::OpenAPI::toJsonValue(m_primary_url));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_region_override_isSet) {
        obj.insert(QString("region_override"), ::OpenAPI::toJsonValue(m_region_override));
    }
    if (m_rtmp_playback_url_isSet) {
        obj.insert(QString("rtmp_playback_url"), ::OpenAPI::toJsonValue(m_rtmp_playback_url));
    }
    if (m_secure_ingest_query_param_isSet) {
        obj.insert(QString("secure_ingest_query_param"), ::OpenAPI::toJsonValue(m_secure_ingest_query_param));
    }
    if (m_source_delivery_method_isSet) {
        obj.insert(QString("source_delivery_method"), ::OpenAPI::toJsonValue(m_source_delivery_method));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("stream_name"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_use_cors_isSet) {
        obj.insert(QString("use_cors"), ::OpenAPI::toJsonValue(m_use_cors));
    }
    if (m_use_https_isSet) {
        obj.insert(QString("use_https"), ::OpenAPI::toJsonValue(m_use_https));
    }
    if (m_use_secure_ingest_isSet) {
        obj.insert(QString("use_secure_ingest"), ::OpenAPI::toJsonValue(m_use_secure_ingest));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIStream_target::getBackupUrl() const {
    return m_backup_url;
}
void OAIStream_target::setBackupUrl(const QString &backup_url) {
    m_backup_url = backup_url;
    m_backup_url_isSet = true;
}

bool OAIStream_target::is_backup_url_Set() const{
    return m_backup_url_isSet;
}

bool OAIStream_target::is_backup_url_Valid() const{
    return m_backup_url_isValid;
}

QString OAIStream_target::getChunkSize() const {
    return m_chunk_size;
}
void OAIStream_target::setChunkSize(const QString &chunk_size) {
    m_chunk_size = chunk_size;
    m_chunk_size_isSet = true;
}

bool OAIStream_target::is_chunk_size_Set() const{
    return m_chunk_size_isSet;
}

bool OAIStream_target::is_chunk_size_Valid() const{
    return m_chunk_size_isValid;
}

QString OAIStream_target::getConnectionCode() const {
    return m_connection_code;
}
void OAIStream_target::setConnectionCode(const QString &connection_code) {
    m_connection_code = connection_code;
    m_connection_code_isSet = true;
}

bool OAIStream_target::is_connection_code_Set() const{
    return m_connection_code_isSet;
}

bool OAIStream_target::is_connection_code_Valid() const{
    return m_connection_code_isValid;
}

QDateTime OAIStream_target::getConnectionCodeExpiresAt() const {
    return m_connection_code_expires_at;
}
void OAIStream_target::setConnectionCodeExpiresAt(const QDateTime &connection_code_expires_at) {
    m_connection_code_expires_at = connection_code_expires_at;
    m_connection_code_expires_at_isSet = true;
}

bool OAIStream_target::is_connection_code_expires_at_Set() const{
    return m_connection_code_expires_at_isSet;
}

bool OAIStream_target::is_connection_code_expires_at_Valid() const{
    return m_connection_code_expires_at_isValid;
}

QDateTime OAIStream_target::getCreatedAt() const {
    return m_created_at;
}
void OAIStream_target::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStream_target::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStream_target::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIStream_target::isEnableHls() const {
    return m_enable_hls;
}
void OAIStream_target::setEnableHls(const bool &enable_hls) {
    m_enable_hls = enable_hls;
    m_enable_hls_isSet = true;
}

bool OAIStream_target::is_enable_hls_Set() const{
    return m_enable_hls_isSet;
}

bool OAIStream_target::is_enable_hls_Valid() const{
    return m_enable_hls_isValid;
}

bool OAIStream_target::isEnabled() const {
    return m_enabled;
}
void OAIStream_target::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIStream_target::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIStream_target::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIStream_target::getHdsPlaybackUrl() const {
    return m_hds_playback_url;
}
void OAIStream_target::setHdsPlaybackUrl(const QString &hds_playback_url) {
    m_hds_playback_url = hds_playback_url;
    m_hds_playback_url_isSet = true;
}

bool OAIStream_target::is_hds_playback_url_Set() const{
    return m_hds_playback_url_isSet;
}

bool OAIStream_target::is_hds_playback_url_Valid() const{
    return m_hds_playback_url_isValid;
}

QString OAIStream_target::getHlsPlaybackUrl() const {
    return m_hls_playback_url;
}
void OAIStream_target::setHlsPlaybackUrl(const QString &hls_playback_url) {
    m_hls_playback_url = hls_playback_url;
    m_hls_playback_url_isSet = true;
}

bool OAIStream_target::is_hls_playback_url_Set() const{
    return m_hls_playback_url_isSet;
}

bool OAIStream_target::is_hls_playback_url_Valid() const{
    return m_hls_playback_url_isValid;
}

QString OAIStream_target::getId() const {
    return m_id;
}
void OAIStream_target::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStream_target::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStream_target::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIStream_target::getIngestIpWhitelist() const {
    return m_ingest_ip_whitelist;
}
void OAIStream_target::setIngestIpWhitelist(const QList<QString> &ingest_ip_whitelist) {
    m_ingest_ip_whitelist = ingest_ip_whitelist;
    m_ingest_ip_whitelist_isSet = true;
}

bool OAIStream_target::is_ingest_ip_whitelist_Set() const{
    return m_ingest_ip_whitelist_isSet;
}

bool OAIStream_target::is_ingest_ip_whitelist_Valid() const{
    return m_ingest_ip_whitelist_isValid;
}

QString OAIStream_target::getLocation() const {
    return m_location;
}
void OAIStream_target::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIStream_target::is_location_Set() const{
    return m_location_isSet;
}

bool OAIStream_target::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIStream_target::getName() const {
    return m_name;
}
void OAIStream_target::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStream_target::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStream_target::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStream_target::getPassword() const {
    return m_password;
}
void OAIStream_target::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIStream_target::is_password_Set() const{
    return m_password_isSet;
}

bool OAIStream_target::is_password_Valid() const{
    return m_password_isValid;
}

OAIHash_of_playback_URLs OAIStream_target::getPlaybackUrls() const {
    return m_playback_urls;
}
void OAIStream_target::setPlaybackUrls(const OAIHash_of_playback_URLs &playback_urls) {
    m_playback_urls = playback_urls;
    m_playback_urls_isSet = true;
}

bool OAIStream_target::is_playback_urls_Set() const{
    return m_playback_urls_isSet;
}

bool OAIStream_target::is_playback_urls_Valid() const{
    return m_playback_urls_isValid;
}

QString OAIStream_target::getPrimaryUrl() const {
    return m_primary_url;
}
void OAIStream_target::setPrimaryUrl(const QString &primary_url) {
    m_primary_url = primary_url;
    m_primary_url_isSet = true;
}

bool OAIStream_target::is_primary_url_Set() const{
    return m_primary_url_isSet;
}

bool OAIStream_target::is_primary_url_Valid() const{
    return m_primary_url_isValid;
}

QString OAIStream_target::getProvider() const {
    return m_provider;
}
void OAIStream_target::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIStream_target::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIStream_target::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIStream_target::getRegionOverride() const {
    return m_region_override;
}
void OAIStream_target::setRegionOverride(const QString &region_override) {
    m_region_override = region_override;
    m_region_override_isSet = true;
}

bool OAIStream_target::is_region_override_Set() const{
    return m_region_override_isSet;
}

bool OAIStream_target::is_region_override_Valid() const{
    return m_region_override_isValid;
}

QString OAIStream_target::getRtmpPlaybackUrl() const {
    return m_rtmp_playback_url;
}
void OAIStream_target::setRtmpPlaybackUrl(const QString &rtmp_playback_url) {
    m_rtmp_playback_url = rtmp_playback_url;
    m_rtmp_playback_url_isSet = true;
}

bool OAIStream_target::is_rtmp_playback_url_Set() const{
    return m_rtmp_playback_url_isSet;
}

bool OAIStream_target::is_rtmp_playback_url_Valid() const{
    return m_rtmp_playback_url_isValid;
}

QString OAIStream_target::getSecureIngestQueryParam() const {
    return m_secure_ingest_query_param;
}
void OAIStream_target::setSecureIngestQueryParam(const QString &secure_ingest_query_param) {
    m_secure_ingest_query_param = secure_ingest_query_param;
    m_secure_ingest_query_param_isSet = true;
}

bool OAIStream_target::is_secure_ingest_query_param_Set() const{
    return m_secure_ingest_query_param_isSet;
}

bool OAIStream_target::is_secure_ingest_query_param_Valid() const{
    return m_secure_ingest_query_param_isValid;
}

QString OAIStream_target::getSourceDeliveryMethod() const {
    return m_source_delivery_method;
}
void OAIStream_target::setSourceDeliveryMethod(const QString &source_delivery_method) {
    m_source_delivery_method = source_delivery_method;
    m_source_delivery_method_isSet = true;
}

bool OAIStream_target::is_source_delivery_method_Set() const{
    return m_source_delivery_method_isSet;
}

bool OAIStream_target::is_source_delivery_method_Valid() const{
    return m_source_delivery_method_isValid;
}

QString OAIStream_target::getSourceUrl() const {
    return m_source_url;
}
void OAIStream_target::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIStream_target::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIStream_target::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIStream_target::getStreamName() const {
    return m_stream_name;
}
void OAIStream_target::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIStream_target::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIStream_target::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIStream_target::getType() const {
    return m_type;
}
void OAIStream_target::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStream_target::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStream_target::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIStream_target::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStream_target::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStream_target::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStream_target::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIStream_target::isUseCors() const {
    return m_use_cors;
}
void OAIStream_target::setUseCors(const bool &use_cors) {
    m_use_cors = use_cors;
    m_use_cors_isSet = true;
}

bool OAIStream_target::is_use_cors_Set() const{
    return m_use_cors_isSet;
}

bool OAIStream_target::is_use_cors_Valid() const{
    return m_use_cors_isValid;
}

bool OAIStream_target::isUseHttps() const {
    return m_use_https;
}
void OAIStream_target::setUseHttps(const bool &use_https) {
    m_use_https = use_https;
    m_use_https_isSet = true;
}

bool OAIStream_target::is_use_https_Set() const{
    return m_use_https_isSet;
}

bool OAIStream_target::is_use_https_Valid() const{
    return m_use_https_isValid;
}

bool OAIStream_target::isUseSecureIngest() const {
    return m_use_secure_ingest;
}
void OAIStream_target::setUseSecureIngest(const bool &use_secure_ingest) {
    m_use_secure_ingest = use_secure_ingest;
    m_use_secure_ingest_isSet = true;
}

bool OAIStream_target::is_use_secure_ingest_Set() const{
    return m_use_secure_ingest_isSet;
}

bool OAIStream_target::is_use_secure_ingest_Valid() const{
    return m_use_secure_ingest_isValid;
}

QString OAIStream_target::getUsername() const {
    return m_username;
}
void OAIStream_target::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIStream_target::is_username_Set() const{
    return m_username_isSet;
}

bool OAIStream_target::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIStream_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_code_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_hls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hds_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingest_ip_whitelist.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtmp_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_ingest_query_param_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_delivery_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_cors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_secure_ingest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStream_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
