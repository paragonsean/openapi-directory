/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamTargetsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIStreamTargetsApi::OAIStreamTargetsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIStreamTargetsApi::~OAIStreamTargetsApi() {
}

void OAIStreamTargetsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api-sandbox.cloud.wowza.com/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("addStreamTarget", defaultConf);
    _serverIndices.insert("addStreamTarget", 0);
    _serverConfigs.insert("createStreamTarget", defaultConf);
    _serverIndices.insert("createStreamTarget", 0);
    _serverConfigs.insert("createStreamTargetGeoblock", defaultConf);
    _serverIndices.insert("createStreamTargetGeoblock", 0);
    _serverConfigs.insert("createStreamTargetProperty", defaultConf);
    _serverIndices.insert("createStreamTargetProperty", 0);
    _serverConfigs.insert("createStreamTargetTokenAuth", defaultConf);
    _serverIndices.insert("createStreamTargetTokenAuth", 0);
    _serverConfigs.insert("deleteStreamTarget", defaultConf);
    _serverIndices.insert("deleteStreamTarget", 0);
    _serverConfigs.insert("deleteStreamTargetProperty", defaultConf);
    _serverIndices.insert("deleteStreamTargetProperty", 0);
    _serverConfigs.insert("listStreamTargetProperties", defaultConf);
    _serverIndices.insert("listStreamTargetProperties", 0);
    _serverConfigs.insert("listStreamTargets", defaultConf);
    _serverIndices.insert("listStreamTargets", 0);
    _serverConfigs.insert("regenerateConnectionCodeStreamTarget", defaultConf);
    _serverIndices.insert("regenerateConnectionCodeStreamTarget", 0);
    _serverConfigs.insert("showStreamTarget", defaultConf);
    _serverIndices.insert("showStreamTarget", 0);
    _serverConfigs.insert("showStreamTargetGeoblock", defaultConf);
    _serverIndices.insert("showStreamTargetGeoblock", 0);
    _serverConfigs.insert("showStreamTargetMetricsCurrent", defaultConf);
    _serverIndices.insert("showStreamTargetMetricsCurrent", 0);
    _serverConfigs.insert("showStreamTargetMetricsHistoric", defaultConf);
    _serverIndices.insert("showStreamTargetMetricsHistoric", 0);
    _serverConfigs.insert("showStreamTargetProperty", defaultConf);
    _serverIndices.insert("showStreamTargetProperty", 0);
    _serverConfigs.insert("showStreamTargetTokenAuth", defaultConf);
    _serverIndices.insert("showStreamTargetTokenAuth", 0);
    _serverConfigs.insert("updateStreamTarget", defaultConf);
    _serverIndices.insert("updateStreamTarget", 0);
    _serverConfigs.insert("updateStreamTargetGeoblock", defaultConf);
    _serverIndices.insert("updateStreamTargetGeoblock", 0);
    _serverConfigs.insert("updateStreamTargetTokenAuth", defaultConf);
    _serverIndices.insert("updateStreamTargetTokenAuth", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIStreamTargetsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIStreamTargetsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIStreamTargetsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIStreamTargetsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIStreamTargetsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIStreamTargetsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIStreamTargetsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIStreamTargetsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIStreamTargetsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIStreamTargetsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStreamTargetsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStreamTargetsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIStreamTargetsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIStreamTargetsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIStreamTargetsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIStreamTargetsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIStreamTargetsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIStreamTargetsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIStreamTargetsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIStreamTargetsApi::addStreamTarget(const OAIWowza_stream_target_input &stream_target) {
    QString fullPath = QString(_serverConfigs["addStreamTarget"][_serverIndices.value("addStreamTarget")].URL()+"/stream_targets/add");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = stream_target.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::addStreamTargetCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::addStreamTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStreamTarget_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addStreamTargetSignal(output);
        Q_EMIT addStreamTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addStreamTargetSignalE(output, error_type, error_str);
        Q_EMIT addStreamTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addStreamTargetSignalError(output, error_type, error_str);
        Q_EMIT addStreamTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::createStreamTarget(const OAIStream_target_create_input &stream_target) {
    QString fullPath = QString(_serverConfigs["createStreamTarget"][_serverIndices.value("createStreamTarget")].URL()+"/stream_targets");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = stream_target.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::createStreamTargetCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::createStreamTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStreamTarget_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createStreamTargetSignal(output);
        Q_EMIT createStreamTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createStreamTargetSignalE(output, error_type, error_str);
        Q_EMIT createStreamTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createStreamTargetSignalError(output, error_type, error_str);
        Q_EMIT createStreamTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::createStreamTargetGeoblock(const QString &stream_target_id, const OAIGeoblock_create_input &geoblock) {
    QString fullPath = QString(_serverConfigs["createStreamTargetGeoblock"][_serverIndices.value("createStreamTargetGeoblock")].URL()+"/stream_targets/{stream_target_id}/geoblock");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = geoblock.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::createStreamTargetGeoblockCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::createStreamTargetGeoblockCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetGeoblock_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createStreamTargetGeoblockSignal(output);
        Q_EMIT createStreamTargetGeoblockSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createStreamTargetGeoblockSignalE(output, error_type, error_str);
        Q_EMIT createStreamTargetGeoblockSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createStreamTargetGeoblockSignalError(output, error_type, error_str);
        Q_EMIT createStreamTargetGeoblockSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::createStreamTargetProperty(const QString &stream_target_id, const OAIStream_target_property_create_input &property) {
    QString fullPath = QString(_serverConfigs["createStreamTargetProperty"][_serverIndices.value("createStreamTargetProperty")].URL()+"/stream_targets/{stream_target_id}/properties");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = property.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::createStreamTargetPropertyCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::createStreamTargetPropertyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStreamTargetProperty_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createStreamTargetPropertySignal(output);
        Q_EMIT createStreamTargetPropertySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createStreamTargetPropertySignalE(output, error_type, error_str);
        Q_EMIT createStreamTargetPropertySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createStreamTargetPropertySignalError(output, error_type, error_str);
        Q_EMIT createStreamTargetPropertySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::createStreamTargetTokenAuth(const QString &stream_target_id, const OAIToken_auth_create_input &token_auth) {
    QString fullPath = QString(_serverConfigs["createStreamTargetTokenAuth"][_serverIndices.value("createStreamTargetTokenAuth")].URL()+"/stream_targets/{stream_target_id}/token_auth");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = token_auth.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::createStreamTargetTokenAuthCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::createStreamTargetTokenAuthCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetTokenAuth_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createStreamTargetTokenAuthSignal(output);
        Q_EMIT createStreamTargetTokenAuthSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createStreamTargetTokenAuthSignalE(output, error_type, error_str);
        Q_EMIT createStreamTargetTokenAuthSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createStreamTargetTokenAuthSignalError(output, error_type, error_str);
        Q_EMIT createStreamTargetTokenAuthSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::deleteStreamTarget(const QString &id) {
    QString fullPath = QString(_serverConfigs["deleteStreamTarget"][_serverIndices.value("deleteStreamTarget")].URL()+"/stream_targets/{id}");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::deleteStreamTargetCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::deleteStreamTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteStreamTargetSignal();
        Q_EMIT deleteStreamTargetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteStreamTargetSignalE(error_type, error_str);
        Q_EMIT deleteStreamTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteStreamTargetSignalError(error_type, error_str);
        Q_EMIT deleteStreamTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::deleteStreamTargetProperty(const QString &stream_target_id, const QString &id) {
    QString fullPath = QString(_serverConfigs["deleteStreamTargetProperty"][_serverIndices.value("deleteStreamTargetProperty")].URL()+"/stream_targets/{stream_target_id}/properties/{id}");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::deleteStreamTargetPropertyCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::deleteStreamTargetPropertyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteStreamTargetPropertySignal();
        Q_EMIT deleteStreamTargetPropertySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteStreamTargetPropertySignalE(error_type, error_str);
        Q_EMIT deleteStreamTargetPropertySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteStreamTargetPropertySignalError(error_type, error_str);
        Q_EMIT deleteStreamTargetPropertySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::listStreamTargetProperties(const QString &stream_target_id) {
    QString fullPath = QString(_serverConfigs["listStreamTargetProperties"][_serverIndices.value("listStreamTargetProperties")].URL()+"/stream_targets/{stream_target_id}/properties");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::listStreamTargetPropertiesCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::listStreamTargetPropertiesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStream_target_properties output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listStreamTargetPropertiesSignal(output);
        Q_EMIT listStreamTargetPropertiesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listStreamTargetPropertiesSignalE(output, error_type, error_str);
        Q_EMIT listStreamTargetPropertiesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listStreamTargetPropertiesSignalError(output, error_type, error_str);
        Q_EMIT listStreamTargetPropertiesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::listStreamTargets(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &per_page) {
    QString fullPath = QString(_serverConfigs["listStreamTargets"][_serverIndices.value("listStreamTargets")].URL()+"/stream_targets");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::listStreamTargetsCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::listStreamTargetsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStream_targets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listStreamTargetsSignal(output);
        Q_EMIT listStreamTargetsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listStreamTargetsSignalE(output, error_type, error_str);
        Q_EMIT listStreamTargetsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listStreamTargetsSignalError(output, error_type, error_str);
        Q_EMIT listStreamTargetsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::regenerateConnectionCodeStreamTarget(const QString &id) {
    QString fullPath = QString(_serverConfigs["regenerateConnectionCodeStreamTarget"][_serverIndices.value("regenerateConnectionCodeStreamTarget")].URL()+"/stream_targets/{id}/regenerate_connection_code");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::regenerateConnectionCodeStreamTargetCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::regenerateConnectionCodeStreamTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRegenerateConnectionCodeStreamTarget_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT regenerateConnectionCodeStreamTargetSignal(output);
        Q_EMIT regenerateConnectionCodeStreamTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT regenerateConnectionCodeStreamTargetSignalE(output, error_type, error_str);
        Q_EMIT regenerateConnectionCodeStreamTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT regenerateConnectionCodeStreamTargetSignalError(output, error_type, error_str);
        Q_EMIT regenerateConnectionCodeStreamTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::showStreamTarget(const QString &id) {
    QString fullPath = QString(_serverConfigs["showStreamTarget"][_serverIndices.value("showStreamTarget")].URL()+"/stream_targets/{id}");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::showStreamTargetCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::showStreamTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStreamTarget_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStreamTargetSignal(output);
        Q_EMIT showStreamTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStreamTargetSignalE(output, error_type, error_str);
        Q_EMIT showStreamTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStreamTargetSignalError(output, error_type, error_str);
        Q_EMIT showStreamTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::showStreamTargetGeoblock(const QString &stream_target_id) {
    QString fullPath = QString(_serverConfigs["showStreamTargetGeoblock"][_serverIndices.value("showStreamTargetGeoblock")].URL()+"/stream_targets/{stream_target_id}/geoblock");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::showStreamTargetGeoblockCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::showStreamTargetGeoblockCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetGeoblock_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStreamTargetGeoblockSignal(output);
        Q_EMIT showStreamTargetGeoblockSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStreamTargetGeoblockSignalE(output, error_type, error_str);
        Q_EMIT showStreamTargetGeoblockSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStreamTargetGeoblockSignalError(output, error_type, error_str);
        Q_EMIT showStreamTargetGeoblockSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::showStreamTargetMetricsCurrent(const QString &id) {
    QString fullPath = QString(_serverConfigs["showStreamTargetMetricsCurrent"][_serverIndices.value("showStreamTargetMetricsCurrent")].URL()+"/stream_targets/{id}/metrics/current");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::showStreamTargetMetricsCurrentCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::showStreamTargetMetricsCurrentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetMetricsCurrent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStreamTargetMetricsCurrentSignal(output);
        Q_EMIT showStreamTargetMetricsCurrentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStreamTargetMetricsCurrentSignalE(output, error_type, error_str);
        Q_EMIT showStreamTargetMetricsCurrentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStreamTargetMetricsCurrentSignalError(output, error_type, error_str);
        Q_EMIT showStreamTargetMetricsCurrentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::showStreamTargetMetricsHistoric(const QString &id, const ::OpenAPI::OptionalParam<QString> &from, const ::OpenAPI::OptionalParam<QString> &to, const ::OpenAPI::OptionalParam<QString> &interval) {
    QString fullPath = QString(_serverConfigs["showStreamTargetMetricsHistoric"][_serverIndices.value("showStreamTargetMetricsHistoric")].URL()+"/stream_targets/{id}/metrics/historic");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (from.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "from", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("from")).append(querySuffix).append(QUrl::toPercentEncoding(from.stringValue()));
    }
    if (to.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "to", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("to")).append(querySuffix).append(QUrl::toPercentEncoding(to.stringValue()));
    }
    if (interval.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "interval", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("interval")).append(querySuffix).append(QUrl::toPercentEncoding(interval.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::showStreamTargetMetricsHistoricCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::showStreamTargetMetricsHistoricCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetMetricsHistoric_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStreamTargetMetricsHistoricSignal(output);
        Q_EMIT showStreamTargetMetricsHistoricSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStreamTargetMetricsHistoricSignalE(output, error_type, error_str);
        Q_EMIT showStreamTargetMetricsHistoricSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStreamTargetMetricsHistoricSignalError(output, error_type, error_str);
        Q_EMIT showStreamTargetMetricsHistoricSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::showStreamTargetProperty(const QString &stream_target_id, const QString &id) {
    QString fullPath = QString(_serverConfigs["showStreamTargetProperty"][_serverIndices.value("showStreamTargetProperty")].URL()+"/stream_targets/{stream_target_id}/properties/{id}");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::showStreamTargetPropertyCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::showStreamTargetPropertyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStreamTargetProperty_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStreamTargetPropertySignal(output);
        Q_EMIT showStreamTargetPropertySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStreamTargetPropertySignalE(output, error_type, error_str);
        Q_EMIT showStreamTargetPropertySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStreamTargetPropertySignalError(output, error_type, error_str);
        Q_EMIT showStreamTargetPropertySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::showStreamTargetTokenAuth(const QString &stream_target_id) {
    QString fullPath = QString(_serverConfigs["showStreamTargetTokenAuth"][_serverIndices.value("showStreamTargetTokenAuth")].URL()+"/stream_targets/{stream_target_id}/token_auth");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::showStreamTargetTokenAuthCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::showStreamTargetTokenAuthCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetTokenAuth_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStreamTargetTokenAuthSignal(output);
        Q_EMIT showStreamTargetTokenAuthSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStreamTargetTokenAuthSignalE(output, error_type, error_str);
        Q_EMIT showStreamTargetTokenAuthSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStreamTargetTokenAuthSignalError(output, error_type, error_str);
        Q_EMIT showStreamTargetTokenAuthSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::updateStreamTarget(const QString &id, const OAIStream_target_update_input &stream_target) {
    QString fullPath = QString(_serverConfigs["updateStreamTarget"][_serverIndices.value("updateStreamTarget")].URL()+"/stream_targets/{id}");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = stream_target.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::updateStreamTargetCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::updateStreamTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateStreamTarget_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateStreamTargetSignal(output);
        Q_EMIT updateStreamTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateStreamTargetSignalE(output, error_type, error_str);
        Q_EMIT updateStreamTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateStreamTargetSignalError(output, error_type, error_str);
        Q_EMIT updateStreamTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::updateStreamTargetGeoblock(const QString &stream_target_id, const OAIGeoblock_update_input &geoblock) {
    QString fullPath = QString(_serverConfigs["updateStreamTargetGeoblock"][_serverIndices.value("updateStreamTargetGeoblock")].URL()+"/stream_targets/{stream_target_id}/geoblock");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = geoblock.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::updateStreamTargetGeoblockCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::updateStreamTargetGeoblockCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetGeoblock_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateStreamTargetGeoblockSignal(output);
        Q_EMIT updateStreamTargetGeoblockSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateStreamTargetGeoblockSignalE(output, error_type, error_str);
        Q_EMIT updateStreamTargetGeoblockSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateStreamTargetGeoblockSignalError(output, error_type, error_str);
        Q_EMIT updateStreamTargetGeoblockSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::updateStreamTargetTokenAuth(const QString &stream_target_id, const OAIToken_auth_update_input &token_auth) {
    QString fullPath = QString(_serverConfigs["updateStreamTargetTokenAuth"][_serverIndices.value("updateStreamTargetTokenAuth")].URL()+"/stream_targets/{stream_target_id}/token_auth");
    
    if (_apiKeys.contains("wsc-api-key")) {
        addHeaders("wsc-api-key",_apiKeys.find("wsc-api-key").value());
    }
    
    if (_apiKeys.contains("wsc-access-key")) {
        addHeaders("wsc-access-key",_apiKeys.find("wsc-access-key").value());
    }
    
    
    {
        QString stream_target_idPathParam("{");
        stream_target_idPathParam.append("stream_target_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stream_target_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stream_target_id"+pathSuffix : pathPrefix;
        fullPath.replace(stream_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = token_auth.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStreamTargetsApi::updateStreamTargetTokenAuthCallback);
    connect(this, &OAIStreamTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStreamTargetsApi::updateStreamTargetTokenAuthCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIShowStreamTargetTokenAuth_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateStreamTargetTokenAuthSignal(output);
        Q_EMIT updateStreamTargetTokenAuthSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateStreamTargetTokenAuthSignalE(output, error_type, error_str);
        Q_EMIT updateStreamTargetTokenAuthSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateStreamTargetTokenAuthSignalError(output, error_type, error_str);
        Q_EMIT updateStreamTargetTokenAuthSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStreamTargetsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
