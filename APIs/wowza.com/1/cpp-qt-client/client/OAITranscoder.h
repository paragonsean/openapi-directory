/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITranscoder.h
 *
 * 
 */

#ifndef OAITranscoder_H
#define OAITranscoder_H

#include <QJsonObject>

#include "OAIOutput.h"
#include "OAIPlayback_url_1.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlayback_url_1;
class OAIOutput;

class OAITranscoder : public OAIObject {
public:
    OAITranscoder();
    OAITranscoder(QString json);
    ~OAITranscoder() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationName() const;
    void setApplicationName(const QString &application_name);
    bool is_application_name_Set() const;
    bool is_application_name_Valid() const;

    QString getBillingMode() const;
    void setBillingMode(const QString &billing_mode);
    bool is_billing_mode_Set() const;
    bool is_billing_mode_Valid() const;

    QString getBroadcastLocation() const;
    void setBroadcastLocation(const QString &broadcast_location);
    bool is_broadcast_location_Set() const;
    bool is_broadcast_location_Valid() const;

    qint32 getBufferSize() const;
    void setBufferSize(const qint32 &buffer_size);
    bool is_buffer_size_Set() const;
    bool is_buffer_size_Valid() const;

    QString getClosedCaptionType() const;
    void setClosedCaptionType(const QString &closed_caption_type);
    bool is_closed_caption_type_Set() const;
    bool is_closed_caption_type_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDeliveryMethod() const;
    void setDeliveryMethod(const QString &delivery_method);
    bool is_delivery_method_Set() const;
    bool is_delivery_method_Valid() const;

    QList<QString> getDeliveryProtocols() const;
    void setDeliveryProtocols(const QList<QString> &delivery_protocols);
    bool is_delivery_protocols_Set() const;
    bool is_delivery_protocols_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIPlayback_url_1> getDirectPlaybackUrls() const;
    void setDirectPlaybackUrls(const QList<OAIPlayback_url_1> &direct_playback_urls);
    bool is_direct_playback_urls_Set() const;
    bool is_direct_playback_urls_Valid() const;

    bool isDisableAuthentication() const;
    void setDisableAuthentication(const bool &disable_authentication);
    bool is_disable_authentication_Set() const;
    bool is_disable_authentication_Valid() const;

    QString getDomainName() const;
    void setDomainName(const QString &domain_name);
    bool is_domain_name_Set() const;
    bool is_domain_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getIdleTimeout() const;
    void setIdleTimeout(const qint32 &idle_timeout);
    bool is_idle_timeout_Set() const;
    bool is_idle_timeout_Valid() const;

    bool isLowLatency() const;
    void setLowLatency(const bool &low_latency);
    bool is_low_latency_Set() const;
    bool is_low_latency_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIOutput> getOutputs() const;
    void setOutputs(const QList<OAIOutput> &outputs);
    bool is_outputs_Set() const;
    bool is_outputs_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    qint32 getPlayMaximumConnections() const;
    void setPlayMaximumConnections(const qint32 &play_maximum_connections);
    bool is_play_maximum_connections_Set() const;
    bool is_play_maximum_connections_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    bool isRecording() const;
    void setRecording(const bool &recording);
    bool is_recording_Set() const;
    bool is_recording_Valid() const;

    qint32 getSourcePort() const;
    void setSourcePort(const qint32 &source_port);
    bool is_source_port_Set() const;
    bool is_source_port_Valid() const;

    QString getSourceUrl() const;
    void setSourceUrl(const QString &source_url);
    bool is_source_url_Set() const;
    bool is_source_url_Valid() const;

    QString getStreamExtension() const;
    void setStreamExtension(const QString &stream_extension);
    bool is_stream_extension_Set() const;
    bool is_stream_extension_Valid() const;

    QString getStreamName() const;
    void setStreamName(const QString &stream_name);
    bool is_stream_name_Set() const;
    bool is_stream_name_Valid() const;

    bool isStreamSmoother() const;
    void setStreamSmoother(const bool &stream_smoother);
    bool is_stream_smoother_Set() const;
    bool is_stream_smoother_Valid() const;

    QString getStreamSourceId() const;
    void setStreamSourceId(const QString &stream_source_id);
    bool is_stream_source_id_Set() const;
    bool is_stream_source_id_Valid() const;

    bool isSuppressStreamTargetStart() const;
    void setSuppressStreamTargetStart(const bool &suppress_stream_target_start);
    bool is_suppress_stream_target_start_Set() const;
    bool is_suppress_stream_target_start_Valid() const;

    QString getTranscoderType() const;
    void setTranscoderType(const QString &transcoder_type);
    bool is_transcoder_type_Set() const;
    bool is_transcoder_type_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    bool isVideoFallback() const;
    void setVideoFallback(const bool &video_fallback);
    bool is_video_fallback_Set() const;
    bool is_video_fallback_Valid() const;

    bool isWatermark() const;
    void setWatermark(const bool &watermark);
    bool is_watermark_Set() const;
    bool is_watermark_Valid() const;

    qint32 getWatermarkHeight() const;
    void setWatermarkHeight(const qint32 &watermark_height);
    bool is_watermark_height_Set() const;
    bool is_watermark_height_Valid() const;

    QString getWatermarkImageUrl() const;
    void setWatermarkImageUrl(const QString &watermark_image_url);
    bool is_watermark_image_url_Set() const;
    bool is_watermark_image_url_Valid() const;

    qint32 getWatermarkOpacity() const;
    void setWatermarkOpacity(const qint32 &watermark_opacity);
    bool is_watermark_opacity_Set() const;
    bool is_watermark_opacity_Valid() const;

    QString getWatermarkPosition() const;
    void setWatermarkPosition(const QString &watermark_position);
    bool is_watermark_position_Set() const;
    bool is_watermark_position_Valid() const;

    qint32 getWatermarkWidth() const;
    void setWatermarkWidth(const qint32 &watermark_width);
    bool is_watermark_width_Set() const;
    bool is_watermark_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_name;
    bool m_application_name_isSet;
    bool m_application_name_isValid;

    QString m_billing_mode;
    bool m_billing_mode_isSet;
    bool m_billing_mode_isValid;

    QString m_broadcast_location;
    bool m_broadcast_location_isSet;
    bool m_broadcast_location_isValid;

    qint32 m_buffer_size;
    bool m_buffer_size_isSet;
    bool m_buffer_size_isValid;

    QString m_closed_caption_type;
    bool m_closed_caption_type_isSet;
    bool m_closed_caption_type_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_delivery_method;
    bool m_delivery_method_isSet;
    bool m_delivery_method_isValid;

    QList<QString> m_delivery_protocols;
    bool m_delivery_protocols_isSet;
    bool m_delivery_protocols_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIPlayback_url_1> m_direct_playback_urls;
    bool m_direct_playback_urls_isSet;
    bool m_direct_playback_urls_isValid;

    bool m_disable_authentication;
    bool m_disable_authentication_isSet;
    bool m_disable_authentication_isValid;

    QString m_domain_name;
    bool m_domain_name_isSet;
    bool m_domain_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_idle_timeout;
    bool m_idle_timeout_isSet;
    bool m_idle_timeout_isValid;

    bool m_low_latency;
    bool m_low_latency_isSet;
    bool m_low_latency_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIOutput> m_outputs;
    bool m_outputs_isSet;
    bool m_outputs_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    qint32 m_play_maximum_connections;
    bool m_play_maximum_connections_isSet;
    bool m_play_maximum_connections_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    bool m_recording;
    bool m_recording_isSet;
    bool m_recording_isValid;

    qint32 m_source_port;
    bool m_source_port_isSet;
    bool m_source_port_isValid;

    QString m_source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;

    QString m_stream_extension;
    bool m_stream_extension_isSet;
    bool m_stream_extension_isValid;

    QString m_stream_name;
    bool m_stream_name_isSet;
    bool m_stream_name_isValid;

    bool m_stream_smoother;
    bool m_stream_smoother_isSet;
    bool m_stream_smoother_isValid;

    QString m_stream_source_id;
    bool m_stream_source_id_isSet;
    bool m_stream_source_id_isValid;

    bool m_suppress_stream_target_start;
    bool m_suppress_stream_target_start_isSet;
    bool m_suppress_stream_target_start_isValid;

    QString m_transcoder_type;
    bool m_transcoder_type_isSet;
    bool m_transcoder_type_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    bool m_video_fallback;
    bool m_video_fallback_isSet;
    bool m_video_fallback_isValid;

    bool m_watermark;
    bool m_watermark_isSet;
    bool m_watermark_isValid;

    qint32 m_watermark_height;
    bool m_watermark_height_isSet;
    bool m_watermark_height_isValid;

    QString m_watermark_image_url;
    bool m_watermark_image_url_isSet;
    bool m_watermark_image_url_isValid;

    qint32 m_watermark_opacity;
    bool m_watermark_opacity_isSet;
    bool m_watermark_opacity_isValid;

    QString m_watermark_position;
    bool m_watermark_position_isSet;
    bool m_watermark_position_isValid;

    qint32 m_watermark_width;
    bool m_watermark_width_isSet;
    bool m_watermark_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITranscoder)

#endif // OAITranscoder_H
