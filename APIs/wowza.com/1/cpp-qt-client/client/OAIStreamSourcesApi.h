/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStreamSourcesApi_H
#define OAI_OAIStreamSourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateStreamSource_200_response.h"
#include "OAIError401.h"
#include "OAIError403.h"
#include "OAIError404.h"
#include "OAIError410.h"
#include "OAIError422.h"
#include "OAIStream_source_create_input.h"
#include "OAIStream_source_update_input.h"
#include "OAIStream_sources.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStreamSourcesApi : public QObject {
    Q_OBJECT

public:
    OAIStreamSourcesApi(const int timeOut = 0);
    ~OAIStreamSourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  stream_source OAIStream_source_create_input [required]
    */
    Q_DECL_DEPRECATED virtual void addStreamSource(const OAIStream_source_create_input &stream_source);

    /**
    * @param[in]  stream_source OAIStream_source_create_input [required]
    */
    virtual void createStreamSource(const OAIStream_source_create_input &stream_source);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteStreamSource(const QString &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listStreamSources(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void showStreamSource(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  stream_source OAIStream_source_update_input [required]
    */
    virtual void updateStreamSource(const QString &id, const OAIStream_source_update_input &stream_source);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addStreamSourceCallback(OAIHttpRequestWorker *worker);
    void createStreamSourceCallback(OAIHttpRequestWorker *worker);
    void deleteStreamSourceCallback(OAIHttpRequestWorker *worker);
    void listStreamSourcesCallback(OAIHttpRequestWorker *worker);
    void showStreamSourceCallback(OAIHttpRequestWorker *worker);
    void updateStreamSourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addStreamSourceSignal(OAICreateStreamSource_200_response summary);
    void createStreamSourceSignal(OAICreateStreamSource_200_response summary);
    void deleteStreamSourceSignal();
    void listStreamSourcesSignal(OAIStream_sources summary);
    void showStreamSourceSignal(OAICreateStreamSource_200_response summary);
    void updateStreamSourceSignal(OAICreateStreamSource_200_response summary);


    void addStreamSourceSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamSource_200_response summary);
    void createStreamSourceSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamSource_200_response summary);
    void deleteStreamSourceSignalFull(OAIHttpRequestWorker *worker);
    void listStreamSourcesSignalFull(OAIHttpRequestWorker *worker, OAIStream_sources summary);
    void showStreamSourceSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamSource_200_response summary);
    void updateStreamSourceSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamSource_200_response summary);

    Q_DECL_DEPRECATED_X("Use addStreamSourceSignalError() instead")
    void addStreamSourceSignalE(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addStreamSourceSignalError(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamSourceSignalError() instead")
    void createStreamSourceSignalE(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamSourceSignalError(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamSourceSignalError() instead")
    void deleteStreamSourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamSourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamSourcesSignalError() instead")
    void listStreamSourcesSignalE(OAIStream_sources summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamSourcesSignalError(OAIStream_sources summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showStreamSourceSignalError() instead")
    void showStreamSourceSignalE(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showStreamSourceSignalError(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamSourceSignalError() instead")
    void updateStreamSourceSignalE(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamSourceSignalError(OAICreateStreamSource_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addStreamSourceSignalErrorFull() instead")
    void addStreamSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addStreamSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamSourceSignalErrorFull() instead")
    void createStreamSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamSourceSignalErrorFull() instead")
    void deleteStreamSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamSourcesSignalErrorFull() instead")
    void listStreamSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showStreamSourceSignalErrorFull() instead")
    void showStreamSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showStreamSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamSourceSignalErrorFull() instead")
    void updateStreamSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
