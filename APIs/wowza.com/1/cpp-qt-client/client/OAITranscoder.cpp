/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranscoder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranscoder::OAITranscoder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranscoder::OAITranscoder() {
    this->initializeModel();
}

OAITranscoder::~OAITranscoder() {}

void OAITranscoder::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_billing_mode_isSet = false;
    m_billing_mode_isValid = false;

    m_broadcast_location_isSet = false;
    m_broadcast_location_isValid = false;

    m_buffer_size_isSet = false;
    m_buffer_size_isValid = false;

    m_closed_caption_type_isSet = false;
    m_closed_caption_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_delivery_method_isSet = false;
    m_delivery_method_isValid = false;

    m_delivery_protocols_isSet = false;
    m_delivery_protocols_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direct_playback_urls_isSet = false;
    m_direct_playback_urls_isValid = false;

    m_disable_authentication_isSet = false;
    m_disable_authentication_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_low_latency_isSet = false;
    m_low_latency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_play_maximum_connections_isSet = false;
    m_play_maximum_connections_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_recording_isSet = false;
    m_recording_isValid = false;

    m_source_port_isSet = false;
    m_source_port_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_stream_extension_isSet = false;
    m_stream_extension_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_stream_smoother_isSet = false;
    m_stream_smoother_isValid = false;

    m_stream_source_id_isSet = false;
    m_stream_source_id_isValid = false;

    m_suppress_stream_target_start_isSet = false;
    m_suppress_stream_target_start_isValid = false;

    m_transcoder_type_isSet = false;
    m_transcoder_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_video_fallback_isSet = false;
    m_video_fallback_isValid = false;

    m_watermark_isSet = false;
    m_watermark_isValid = false;

    m_watermark_height_isSet = false;
    m_watermark_height_isValid = false;

    m_watermark_image_url_isSet = false;
    m_watermark_image_url_isValid = false;

    m_watermark_opacity_isSet = false;
    m_watermark_opacity_isValid = false;

    m_watermark_position_isSet = false;
    m_watermark_position_isValid = false;

    m_watermark_width_isSet = false;
    m_watermark_width_isValid = false;
}

void OAITranscoder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranscoder::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("application_name")]);
    m_application_name_isSet = !json[QString("application_name")].isNull() && m_application_name_isValid;

    m_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_billing_mode, json[QString("billing_mode")]);
    m_billing_mode_isSet = !json[QString("billing_mode")].isNull() && m_billing_mode_isValid;

    m_broadcast_location_isValid = ::OpenAPI::fromJsonValue(m_broadcast_location, json[QString("broadcast_location")]);
    m_broadcast_location_isSet = !json[QString("broadcast_location")].isNull() && m_broadcast_location_isValid;

    m_buffer_size_isValid = ::OpenAPI::fromJsonValue(m_buffer_size, json[QString("buffer_size")]);
    m_buffer_size_isSet = !json[QString("buffer_size")].isNull() && m_buffer_size_isValid;

    m_closed_caption_type_isValid = ::OpenAPI::fromJsonValue(m_closed_caption_type, json[QString("closed_caption_type")]);
    m_closed_caption_type_isSet = !json[QString("closed_caption_type")].isNull() && m_closed_caption_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_delivery_method_isValid = ::OpenAPI::fromJsonValue(m_delivery_method, json[QString("delivery_method")]);
    m_delivery_method_isSet = !json[QString("delivery_method")].isNull() && m_delivery_method_isValid;

    m_delivery_protocols_isValid = ::OpenAPI::fromJsonValue(m_delivery_protocols, json[QString("delivery_protocols")]);
    m_delivery_protocols_isSet = !json[QString("delivery_protocols")].isNull() && m_delivery_protocols_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direct_playback_urls_isValid = ::OpenAPI::fromJsonValue(m_direct_playback_urls, json[QString("direct_playback_urls")]);
    m_direct_playback_urls_isSet = !json[QString("direct_playback_urls")].isNull() && m_direct_playback_urls_isValid;

    m_disable_authentication_isValid = ::OpenAPI::fromJsonValue(m_disable_authentication, json[QString("disable_authentication")]);
    m_disable_authentication_isSet = !json[QString("disable_authentication")].isNull() && m_disable_authentication_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domain_name")]);
    m_domain_name_isSet = !json[QString("domain_name")].isNull() && m_domain_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("idle_timeout")]);
    m_idle_timeout_isSet = !json[QString("idle_timeout")].isNull() && m_idle_timeout_isValid;

    m_low_latency_isValid = ::OpenAPI::fromJsonValue(m_low_latency, json[QString("low_latency")]);
    m_low_latency_isSet = !json[QString("low_latency")].isNull() && m_low_latency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_play_maximum_connections_isValid = ::OpenAPI::fromJsonValue(m_play_maximum_connections, json[QString("play_maximum_connections")]);
    m_play_maximum_connections_isSet = !json[QString("play_maximum_connections")].isNull() && m_play_maximum_connections_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_recording_isValid = ::OpenAPI::fromJsonValue(m_recording, json[QString("recording")]);
    m_recording_isSet = !json[QString("recording")].isNull() && m_recording_isValid;

    m_source_port_isValid = ::OpenAPI::fromJsonValue(m_source_port, json[QString("source_port")]);
    m_source_port_isSet = !json[QString("source_port")].isNull() && m_source_port_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_stream_extension_isValid = ::OpenAPI::fromJsonValue(m_stream_extension, json[QString("stream_extension")]);
    m_stream_extension_isSet = !json[QString("stream_extension")].isNull() && m_stream_extension_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("stream_name")]);
    m_stream_name_isSet = !json[QString("stream_name")].isNull() && m_stream_name_isValid;

    m_stream_smoother_isValid = ::OpenAPI::fromJsonValue(m_stream_smoother, json[QString("stream_smoother")]);
    m_stream_smoother_isSet = !json[QString("stream_smoother")].isNull() && m_stream_smoother_isValid;

    m_stream_source_id_isValid = ::OpenAPI::fromJsonValue(m_stream_source_id, json[QString("stream_source_id")]);
    m_stream_source_id_isSet = !json[QString("stream_source_id")].isNull() && m_stream_source_id_isValid;

    m_suppress_stream_target_start_isValid = ::OpenAPI::fromJsonValue(m_suppress_stream_target_start, json[QString("suppress_stream_target_start")]);
    m_suppress_stream_target_start_isSet = !json[QString("suppress_stream_target_start")].isNull() && m_suppress_stream_target_start_isValid;

    m_transcoder_type_isValid = ::OpenAPI::fromJsonValue(m_transcoder_type, json[QString("transcoder_type")]);
    m_transcoder_type_isSet = !json[QString("transcoder_type")].isNull() && m_transcoder_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_video_fallback_isValid = ::OpenAPI::fromJsonValue(m_video_fallback, json[QString("video_fallback")]);
    m_video_fallback_isSet = !json[QString("video_fallback")].isNull() && m_video_fallback_isValid;

    m_watermark_isValid = ::OpenAPI::fromJsonValue(m_watermark, json[QString("watermark")]);
    m_watermark_isSet = !json[QString("watermark")].isNull() && m_watermark_isValid;

    m_watermark_height_isValid = ::OpenAPI::fromJsonValue(m_watermark_height, json[QString("watermark_height")]);
    m_watermark_height_isSet = !json[QString("watermark_height")].isNull() && m_watermark_height_isValid;

    m_watermark_image_url_isValid = ::OpenAPI::fromJsonValue(m_watermark_image_url, json[QString("watermark_image_url")]);
    m_watermark_image_url_isSet = !json[QString("watermark_image_url")].isNull() && m_watermark_image_url_isValid;

    m_watermark_opacity_isValid = ::OpenAPI::fromJsonValue(m_watermark_opacity, json[QString("watermark_opacity")]);
    m_watermark_opacity_isSet = !json[QString("watermark_opacity")].isNull() && m_watermark_opacity_isValid;

    m_watermark_position_isValid = ::OpenAPI::fromJsonValue(m_watermark_position, json[QString("watermark_position")]);
    m_watermark_position_isSet = !json[QString("watermark_position")].isNull() && m_watermark_position_isValid;

    m_watermark_width_isValid = ::OpenAPI::fromJsonValue(m_watermark_width, json[QString("watermark_width")]);
    m_watermark_width_isSet = !json[QString("watermark_width")].isNull() && m_watermark_width_isValid;
}

QString OAITranscoder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranscoder::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("application_name"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_billing_mode_isSet) {
        obj.insert(QString("billing_mode"), ::OpenAPI::toJsonValue(m_billing_mode));
    }
    if (m_broadcast_location_isSet) {
        obj.insert(QString("broadcast_location"), ::OpenAPI::toJsonValue(m_broadcast_location));
    }
    if (m_buffer_size_isSet) {
        obj.insert(QString("buffer_size"), ::OpenAPI::toJsonValue(m_buffer_size));
    }
    if (m_closed_caption_type_isSet) {
        obj.insert(QString("closed_caption_type"), ::OpenAPI::toJsonValue(m_closed_caption_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_delivery_method_isSet) {
        obj.insert(QString("delivery_method"), ::OpenAPI::toJsonValue(m_delivery_method));
    }
    if (m_delivery_protocols.size() > 0) {
        obj.insert(QString("delivery_protocols"), ::OpenAPI::toJsonValue(m_delivery_protocols));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direct_playback_urls.size() > 0) {
        obj.insert(QString("direct_playback_urls"), ::OpenAPI::toJsonValue(m_direct_playback_urls));
    }
    if (m_disable_authentication_isSet) {
        obj.insert(QString("disable_authentication"), ::OpenAPI::toJsonValue(m_disable_authentication));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domain_name"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("idle_timeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_low_latency_isSet) {
        obj.insert(QString("low_latency"), ::OpenAPI::toJsonValue(m_low_latency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_play_maximum_connections_isSet) {
        obj.insert(QString("play_maximum_connections"), ::OpenAPI::toJsonValue(m_play_maximum_connections));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_recording_isSet) {
        obj.insert(QString("recording"), ::OpenAPI::toJsonValue(m_recording));
    }
    if (m_source_port_isSet) {
        obj.insert(QString("source_port"), ::OpenAPI::toJsonValue(m_source_port));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_stream_extension_isSet) {
        obj.insert(QString("stream_extension"), ::OpenAPI::toJsonValue(m_stream_extension));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("stream_name"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_stream_smoother_isSet) {
        obj.insert(QString("stream_smoother"), ::OpenAPI::toJsonValue(m_stream_smoother));
    }
    if (m_stream_source_id_isSet) {
        obj.insert(QString("stream_source_id"), ::OpenAPI::toJsonValue(m_stream_source_id));
    }
    if (m_suppress_stream_target_start_isSet) {
        obj.insert(QString("suppress_stream_target_start"), ::OpenAPI::toJsonValue(m_suppress_stream_target_start));
    }
    if (m_transcoder_type_isSet) {
        obj.insert(QString("transcoder_type"), ::OpenAPI::toJsonValue(m_transcoder_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_video_fallback_isSet) {
        obj.insert(QString("video_fallback"), ::OpenAPI::toJsonValue(m_video_fallback));
    }
    if (m_watermark_isSet) {
        obj.insert(QString("watermark"), ::OpenAPI::toJsonValue(m_watermark));
    }
    if (m_watermark_height_isSet) {
        obj.insert(QString("watermark_height"), ::OpenAPI::toJsonValue(m_watermark_height));
    }
    if (m_watermark_image_url_isSet) {
        obj.insert(QString("watermark_image_url"), ::OpenAPI::toJsonValue(m_watermark_image_url));
    }
    if (m_watermark_opacity_isSet) {
        obj.insert(QString("watermark_opacity"), ::OpenAPI::toJsonValue(m_watermark_opacity));
    }
    if (m_watermark_position_isSet) {
        obj.insert(QString("watermark_position"), ::OpenAPI::toJsonValue(m_watermark_position));
    }
    if (m_watermark_width_isSet) {
        obj.insert(QString("watermark_width"), ::OpenAPI::toJsonValue(m_watermark_width));
    }
    return obj;
}

QString OAITranscoder::getApplicationName() const {
    return m_application_name;
}
void OAITranscoder::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAITranscoder::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAITranscoder::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAITranscoder::getBillingMode() const {
    return m_billing_mode;
}
void OAITranscoder::setBillingMode(const QString &billing_mode) {
    m_billing_mode = billing_mode;
    m_billing_mode_isSet = true;
}

bool OAITranscoder::is_billing_mode_Set() const{
    return m_billing_mode_isSet;
}

bool OAITranscoder::is_billing_mode_Valid() const{
    return m_billing_mode_isValid;
}

QString OAITranscoder::getBroadcastLocation() const {
    return m_broadcast_location;
}
void OAITranscoder::setBroadcastLocation(const QString &broadcast_location) {
    m_broadcast_location = broadcast_location;
    m_broadcast_location_isSet = true;
}

bool OAITranscoder::is_broadcast_location_Set() const{
    return m_broadcast_location_isSet;
}

bool OAITranscoder::is_broadcast_location_Valid() const{
    return m_broadcast_location_isValid;
}

qint32 OAITranscoder::getBufferSize() const {
    return m_buffer_size;
}
void OAITranscoder::setBufferSize(const qint32 &buffer_size) {
    m_buffer_size = buffer_size;
    m_buffer_size_isSet = true;
}

bool OAITranscoder::is_buffer_size_Set() const{
    return m_buffer_size_isSet;
}

bool OAITranscoder::is_buffer_size_Valid() const{
    return m_buffer_size_isValid;
}

QString OAITranscoder::getClosedCaptionType() const {
    return m_closed_caption_type;
}
void OAITranscoder::setClosedCaptionType(const QString &closed_caption_type) {
    m_closed_caption_type = closed_caption_type;
    m_closed_caption_type_isSet = true;
}

bool OAITranscoder::is_closed_caption_type_Set() const{
    return m_closed_caption_type_isSet;
}

bool OAITranscoder::is_closed_caption_type_Valid() const{
    return m_closed_caption_type_isValid;
}

QDateTime OAITranscoder::getCreatedAt() const {
    return m_created_at;
}
void OAITranscoder::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITranscoder::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITranscoder::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITranscoder::getDeliveryMethod() const {
    return m_delivery_method;
}
void OAITranscoder::setDeliveryMethod(const QString &delivery_method) {
    m_delivery_method = delivery_method;
    m_delivery_method_isSet = true;
}

bool OAITranscoder::is_delivery_method_Set() const{
    return m_delivery_method_isSet;
}

bool OAITranscoder::is_delivery_method_Valid() const{
    return m_delivery_method_isValid;
}

QList<QString> OAITranscoder::getDeliveryProtocols() const {
    return m_delivery_protocols;
}
void OAITranscoder::setDeliveryProtocols(const QList<QString> &delivery_protocols) {
    m_delivery_protocols = delivery_protocols;
    m_delivery_protocols_isSet = true;
}

bool OAITranscoder::is_delivery_protocols_Set() const{
    return m_delivery_protocols_isSet;
}

bool OAITranscoder::is_delivery_protocols_Valid() const{
    return m_delivery_protocols_isValid;
}

QString OAITranscoder::getDescription() const {
    return m_description;
}
void OAITranscoder::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITranscoder::is_description_Set() const{
    return m_description_isSet;
}

bool OAITranscoder::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPlayback_url_1> OAITranscoder::getDirectPlaybackUrls() const {
    return m_direct_playback_urls;
}
void OAITranscoder::setDirectPlaybackUrls(const QList<OAIPlayback_url_1> &direct_playback_urls) {
    m_direct_playback_urls = direct_playback_urls;
    m_direct_playback_urls_isSet = true;
}

bool OAITranscoder::is_direct_playback_urls_Set() const{
    return m_direct_playback_urls_isSet;
}

bool OAITranscoder::is_direct_playback_urls_Valid() const{
    return m_direct_playback_urls_isValid;
}

bool OAITranscoder::isDisableAuthentication() const {
    return m_disable_authentication;
}
void OAITranscoder::setDisableAuthentication(const bool &disable_authentication) {
    m_disable_authentication = disable_authentication;
    m_disable_authentication_isSet = true;
}

bool OAITranscoder::is_disable_authentication_Set() const{
    return m_disable_authentication_isSet;
}

bool OAITranscoder::is_disable_authentication_Valid() const{
    return m_disable_authentication_isValid;
}

QString OAITranscoder::getDomainName() const {
    return m_domain_name;
}
void OAITranscoder::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAITranscoder::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAITranscoder::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAITranscoder::getId() const {
    return m_id;
}
void OAITranscoder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITranscoder::is_id_Set() const{
    return m_id_isSet;
}

bool OAITranscoder::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITranscoder::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAITranscoder::setIdleTimeout(const qint32 &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAITranscoder::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAITranscoder::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

bool OAITranscoder::isLowLatency() const {
    return m_low_latency;
}
void OAITranscoder::setLowLatency(const bool &low_latency) {
    m_low_latency = low_latency;
    m_low_latency_isSet = true;
}

bool OAITranscoder::is_low_latency_Set() const{
    return m_low_latency_isSet;
}

bool OAITranscoder::is_low_latency_Valid() const{
    return m_low_latency_isValid;
}

QString OAITranscoder::getName() const {
    return m_name;
}
void OAITranscoder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITranscoder::is_name_Set() const{
    return m_name_isSet;
}

bool OAITranscoder::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOutput> OAITranscoder::getOutputs() const {
    return m_outputs;
}
void OAITranscoder::setOutputs(const QList<OAIOutput> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAITranscoder::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAITranscoder::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAITranscoder::getPassword() const {
    return m_password;
}
void OAITranscoder::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAITranscoder::is_password_Set() const{
    return m_password_isSet;
}

bool OAITranscoder::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAITranscoder::getPlayMaximumConnections() const {
    return m_play_maximum_connections;
}
void OAITranscoder::setPlayMaximumConnections(const qint32 &play_maximum_connections) {
    m_play_maximum_connections = play_maximum_connections;
    m_play_maximum_connections_isSet = true;
}

bool OAITranscoder::is_play_maximum_connections_Set() const{
    return m_play_maximum_connections_isSet;
}

bool OAITranscoder::is_play_maximum_connections_Valid() const{
    return m_play_maximum_connections_isValid;
}

QString OAITranscoder::getProtocol() const {
    return m_protocol;
}
void OAITranscoder::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAITranscoder::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAITranscoder::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAITranscoder::isRecording() const {
    return m_recording;
}
void OAITranscoder::setRecording(const bool &recording) {
    m_recording = recording;
    m_recording_isSet = true;
}

bool OAITranscoder::is_recording_Set() const{
    return m_recording_isSet;
}

bool OAITranscoder::is_recording_Valid() const{
    return m_recording_isValid;
}

qint32 OAITranscoder::getSourcePort() const {
    return m_source_port;
}
void OAITranscoder::setSourcePort(const qint32 &source_port) {
    m_source_port = source_port;
    m_source_port_isSet = true;
}

bool OAITranscoder::is_source_port_Set() const{
    return m_source_port_isSet;
}

bool OAITranscoder::is_source_port_Valid() const{
    return m_source_port_isValid;
}

QString OAITranscoder::getSourceUrl() const {
    return m_source_url;
}
void OAITranscoder::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAITranscoder::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAITranscoder::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAITranscoder::getStreamExtension() const {
    return m_stream_extension;
}
void OAITranscoder::setStreamExtension(const QString &stream_extension) {
    m_stream_extension = stream_extension;
    m_stream_extension_isSet = true;
}

bool OAITranscoder::is_stream_extension_Set() const{
    return m_stream_extension_isSet;
}

bool OAITranscoder::is_stream_extension_Valid() const{
    return m_stream_extension_isValid;
}

QString OAITranscoder::getStreamName() const {
    return m_stream_name;
}
void OAITranscoder::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAITranscoder::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAITranscoder::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

bool OAITranscoder::isStreamSmoother() const {
    return m_stream_smoother;
}
void OAITranscoder::setStreamSmoother(const bool &stream_smoother) {
    m_stream_smoother = stream_smoother;
    m_stream_smoother_isSet = true;
}

bool OAITranscoder::is_stream_smoother_Set() const{
    return m_stream_smoother_isSet;
}

bool OAITranscoder::is_stream_smoother_Valid() const{
    return m_stream_smoother_isValid;
}

QString OAITranscoder::getStreamSourceId() const {
    return m_stream_source_id;
}
void OAITranscoder::setStreamSourceId(const QString &stream_source_id) {
    m_stream_source_id = stream_source_id;
    m_stream_source_id_isSet = true;
}

bool OAITranscoder::is_stream_source_id_Set() const{
    return m_stream_source_id_isSet;
}

bool OAITranscoder::is_stream_source_id_Valid() const{
    return m_stream_source_id_isValid;
}

bool OAITranscoder::isSuppressStreamTargetStart() const {
    return m_suppress_stream_target_start;
}
void OAITranscoder::setSuppressStreamTargetStart(const bool &suppress_stream_target_start) {
    m_suppress_stream_target_start = suppress_stream_target_start;
    m_suppress_stream_target_start_isSet = true;
}

bool OAITranscoder::is_suppress_stream_target_start_Set() const{
    return m_suppress_stream_target_start_isSet;
}

bool OAITranscoder::is_suppress_stream_target_start_Valid() const{
    return m_suppress_stream_target_start_isValid;
}

QString OAITranscoder::getTranscoderType() const {
    return m_transcoder_type;
}
void OAITranscoder::setTranscoderType(const QString &transcoder_type) {
    m_transcoder_type = transcoder_type;
    m_transcoder_type_isSet = true;
}

bool OAITranscoder::is_transcoder_type_Set() const{
    return m_transcoder_type_isSet;
}

bool OAITranscoder::is_transcoder_type_Valid() const{
    return m_transcoder_type_isValid;
}

QDateTime OAITranscoder::getUpdatedAt() const {
    return m_updated_at;
}
void OAITranscoder::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITranscoder::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITranscoder::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAITranscoder::getUsername() const {
    return m_username;
}
void OAITranscoder::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAITranscoder::is_username_Set() const{
    return m_username_isSet;
}

bool OAITranscoder::is_username_Valid() const{
    return m_username_isValid;
}

bool OAITranscoder::isVideoFallback() const {
    return m_video_fallback;
}
void OAITranscoder::setVideoFallback(const bool &video_fallback) {
    m_video_fallback = video_fallback;
    m_video_fallback_isSet = true;
}

bool OAITranscoder::is_video_fallback_Set() const{
    return m_video_fallback_isSet;
}

bool OAITranscoder::is_video_fallback_Valid() const{
    return m_video_fallback_isValid;
}

bool OAITranscoder::isWatermark() const {
    return m_watermark;
}
void OAITranscoder::setWatermark(const bool &watermark) {
    m_watermark = watermark;
    m_watermark_isSet = true;
}

bool OAITranscoder::is_watermark_Set() const{
    return m_watermark_isSet;
}

bool OAITranscoder::is_watermark_Valid() const{
    return m_watermark_isValid;
}

qint32 OAITranscoder::getWatermarkHeight() const {
    return m_watermark_height;
}
void OAITranscoder::setWatermarkHeight(const qint32 &watermark_height) {
    m_watermark_height = watermark_height;
    m_watermark_height_isSet = true;
}

bool OAITranscoder::is_watermark_height_Set() const{
    return m_watermark_height_isSet;
}

bool OAITranscoder::is_watermark_height_Valid() const{
    return m_watermark_height_isValid;
}

QString OAITranscoder::getWatermarkImageUrl() const {
    return m_watermark_image_url;
}
void OAITranscoder::setWatermarkImageUrl(const QString &watermark_image_url) {
    m_watermark_image_url = watermark_image_url;
    m_watermark_image_url_isSet = true;
}

bool OAITranscoder::is_watermark_image_url_Set() const{
    return m_watermark_image_url_isSet;
}

bool OAITranscoder::is_watermark_image_url_Valid() const{
    return m_watermark_image_url_isValid;
}

qint32 OAITranscoder::getWatermarkOpacity() const {
    return m_watermark_opacity;
}
void OAITranscoder::setWatermarkOpacity(const qint32 &watermark_opacity) {
    m_watermark_opacity = watermark_opacity;
    m_watermark_opacity_isSet = true;
}

bool OAITranscoder::is_watermark_opacity_Set() const{
    return m_watermark_opacity_isSet;
}

bool OAITranscoder::is_watermark_opacity_Valid() const{
    return m_watermark_opacity_isValid;
}

QString OAITranscoder::getWatermarkPosition() const {
    return m_watermark_position;
}
void OAITranscoder::setWatermarkPosition(const QString &watermark_position) {
    m_watermark_position = watermark_position;
    m_watermark_position_isSet = true;
}

bool OAITranscoder::is_watermark_position_Set() const{
    return m_watermark_position_isSet;
}

bool OAITranscoder::is_watermark_position_Valid() const{
    return m_watermark_position_isValid;
}

qint32 OAITranscoder::getWatermarkWidth() const {
    return m_watermark_width;
}
void OAITranscoder::setWatermarkWidth(const qint32 &watermark_width) {
    m_watermark_width = watermark_width;
    m_watermark_width_isSet = true;
}

bool OAITranscoder::is_watermark_width_Set() const{
    return m_watermark_width_isSet;
}

bool OAITranscoder::is_watermark_width_Valid() const{
    return m_watermark_width_isValid;
}

bool OAITranscoder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcast_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffer_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_caption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_playback_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_maximum_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_smoother_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_stream_target_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranscoder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
