/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlayer_3.h
 *
 * 
 */

#ifndef OAIPlayer_3_H
#define OAIPlayer_3_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlayer_3 : public OAIObject {
public:
    OAIPlayer_3();
    OAIPlayer_3(QString json);
    ~OAIPlayer_3() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCountdown() const;
    void setCountdown(const bool &countdown);
    bool is_countdown_Set() const;
    bool is_countdown_Valid() const;

    QDateTime getCountdownAt() const;
    void setCountdownAt(const QDateTime &countdown_at);
    bool is_countdown_at_Set() const;
    bool is_countdown_at_Valid() const;

    bool isHostedPage() const;
    void setHostedPage(const bool &hosted_page);
    bool is_hosted_page_Set() const;
    bool is_hosted_page_Valid() const;

    QString getHostedPageDescription() const;
    void setHostedPageDescription(const QString &hosted_page_description);
    bool is_hosted_page_description_Set() const;
    bool is_hosted_page_description_Valid() const;

    QString getHostedPageLogoImage() const;
    void setHostedPageLogoImage(const QString &hosted_page_logo_image);
    bool is_hosted_page_logo_image_Set() const;
    bool is_hosted_page_logo_image_Valid() const;

    bool isHostedPageSharingIcons() const;
    void setHostedPageSharingIcons(const bool &hosted_page_sharing_icons);
    bool is_hosted_page_sharing_icons_Set() const;
    bool is_hosted_page_sharing_icons_Valid() const;

    QString getHostedPageTitle() const;
    void setHostedPageTitle(const QString &hosted_page_title);
    bool is_hosted_page_title_Set() const;
    bool is_hosted_page_title_Valid() const;

    QString getLogoImage() const;
    void setLogoImage(const QString &logo_image);
    bool is_logo_image_Set() const;
    bool is_logo_image_Valid() const;

    QString getLogoPosition() const;
    void setLogoPosition(const QString &logo_position);
    bool is_logo_position_Set() const;
    bool is_logo_position_Valid() const;

    bool isRemoveHostedPageLogoImage() const;
    void setRemoveHostedPageLogoImage(const bool &remove_hosted_page_logo_image);
    bool is_remove_hosted_page_logo_image_Set() const;
    bool is_remove_hosted_page_logo_image_Valid() const;

    bool isRemoveLogoImage() const;
    void setRemoveLogoImage(const bool &remove_logo_image);
    bool is_remove_logo_image_Set() const;
    bool is_remove_logo_image_Valid() const;

    bool isRemoveVideoPosterImage() const;
    void setRemoveVideoPosterImage(const bool &remove_video_poster_image);
    bool is_remove_video_poster_image_Set() const;
    bool is_remove_video_poster_image_Valid() const;

    bool isResponsive() const;
    void setResponsive(const bool &responsive);
    bool is_responsive_Set() const;
    bool is_responsive_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVideoPosterImage() const;
    void setVideoPosterImage(const QString &video_poster_image);
    bool is_video_poster_image_Set() const;
    bool is_video_poster_image_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_countdown;
    bool m_countdown_isSet;
    bool m_countdown_isValid;

    QDateTime m_countdown_at;
    bool m_countdown_at_isSet;
    bool m_countdown_at_isValid;

    bool m_hosted_page;
    bool m_hosted_page_isSet;
    bool m_hosted_page_isValid;

    QString m_hosted_page_description;
    bool m_hosted_page_description_isSet;
    bool m_hosted_page_description_isValid;

    QString m_hosted_page_logo_image;
    bool m_hosted_page_logo_image_isSet;
    bool m_hosted_page_logo_image_isValid;

    bool m_hosted_page_sharing_icons;
    bool m_hosted_page_sharing_icons_isSet;
    bool m_hosted_page_sharing_icons_isValid;

    QString m_hosted_page_title;
    bool m_hosted_page_title_isSet;
    bool m_hosted_page_title_isValid;

    QString m_logo_image;
    bool m_logo_image_isSet;
    bool m_logo_image_isValid;

    QString m_logo_position;
    bool m_logo_position_isSet;
    bool m_logo_position_isValid;

    bool m_remove_hosted_page_logo_image;
    bool m_remove_hosted_page_logo_image_isSet;
    bool m_remove_hosted_page_logo_image_isValid;

    bool m_remove_logo_image;
    bool m_remove_logo_image_isSet;
    bool m_remove_logo_image_isValid;

    bool m_remove_video_poster_image;
    bool m_remove_video_poster_image_isSet;
    bool m_remove_video_poster_image_isValid;

    bool m_responsive;
    bool m_responsive_isSet;
    bool m_responsive_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_video_poster_image;
    bool m_video_poster_image_isSet;
    bool m_video_poster_image_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlayer_3)

#endif // OAIPlayer_3_H
