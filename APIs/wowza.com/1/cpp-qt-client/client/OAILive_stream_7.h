/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILive_stream_7.h
 *
 * 
 */

#ifndef OAILive_stream_7_H
#define OAILive_stream_7_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILive_stream_7 : public OAIObject {
public:
    OAILive_stream_7();
    OAILive_stream_7(QString json);
    ~OAILive_stream_7() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAspectRatioHeight() const;
    void setAspectRatioHeight(const qint32 &aspect_ratio_height);
    bool is_aspect_ratio_height_Set() const;
    bool is_aspect_ratio_height_Valid() const;

    qint32 getAspectRatioWidth() const;
    void setAspectRatioWidth(const qint32 &aspect_ratio_width);
    bool is_aspect_ratio_width_Set() const;
    bool is_aspect_ratio_width_Valid() const;

    QString getClosedCaptionType() const;
    void setClosedCaptionType(const QString &closed_caption_type);
    bool is_closed_caption_type_Set() const;
    bool is_closed_caption_type_Valid() const;

    QString getDeliveryMethod() const;
    void setDeliveryMethod(const QString &delivery_method);
    bool is_delivery_method_Set() const;
    bool is_delivery_method_Valid() const;

    QList<QString> getDeliveryProtocols() const;
    void setDeliveryProtocols(const QList<QString> &delivery_protocols);
    bool is_delivery_protocols_Set() const;
    bool is_delivery_protocols_Valid() const;

    bool isDisableAuthentication() const;
    void setDisableAuthentication(const bool &disable_authentication);
    bool is_disable_authentication_Set() const;
    bool is_disable_authentication_Valid() const;

    QString getEncoder() const;
    void setEncoder(const QString &encoder);
    bool is_encoder_Set() const;
    bool is_encoder_Valid() const;

    QString getHostedPageDescription() const;
    void setHostedPageDescription(const QString &hosted_page_description);
    bool is_hosted_page_description_Set() const;
    bool is_hosted_page_description_Valid() const;

    QString getHostedPageLogoImage() const;
    void setHostedPageLogoImage(const QString &hosted_page_logo_image);
    bool is_hosted_page_logo_image_Set() const;
    bool is_hosted_page_logo_image_Valid() const;

    bool isHostedPageSharingIcons() const;
    void setHostedPageSharingIcons(const bool &hosted_page_sharing_icons);
    bool is_hosted_page_sharing_icons_Set() const;
    bool is_hosted_page_sharing_icons_Valid() const;

    QString getHostedPageTitle() const;
    void setHostedPageTitle(const QString &hosted_page_title);
    bool is_hosted_page_title_Set() const;
    bool is_hosted_page_title_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    bool isPlayerCountdown() const;
    void setPlayerCountdown(const bool &player_countdown);
    bool is_player_countdown_Set() const;
    bool is_player_countdown_Valid() const;

    QDateTime getPlayerCountdownAt() const;
    void setPlayerCountdownAt(const QDateTime &player_countdown_at);
    bool is_player_countdown_at_Set() const;
    bool is_player_countdown_at_Valid() const;

    QString getPlayerLogoImage() const;
    void setPlayerLogoImage(const QString &player_logo_image);
    bool is_player_logo_image_Set() const;
    bool is_player_logo_image_Valid() const;

    QString getPlayerLogoPosition() const;
    void setPlayerLogoPosition(const QString &player_logo_position);
    bool is_player_logo_position_Set() const;
    bool is_player_logo_position_Valid() const;

    bool isPlayerResponsive() const;
    void setPlayerResponsive(const bool &player_responsive);
    bool is_player_responsive_Set() const;
    bool is_player_responsive_Valid() const;

    QString getPlayerType() const;
    void setPlayerType(const QString &player_type);
    bool is_player_type_Set() const;
    bool is_player_type_Valid() const;

    QString getPlayerVideoPosterImage() const;
    void setPlayerVideoPosterImage(const QString &player_video_poster_image);
    bool is_player_video_poster_image_Set() const;
    bool is_player_video_poster_image_Valid() const;

    qint32 getPlayerWidth() const;
    void setPlayerWidth(const qint32 &player_width);
    bool is_player_width_Set() const;
    bool is_player_width_Valid() const;

    bool isRecording() const;
    void setRecording(const bool &recording);
    bool is_recording_Set() const;
    bool is_recording_Valid() const;

    bool isRemoveHostedPageLogoImage() const;
    void setRemoveHostedPageLogoImage(const bool &remove_hosted_page_logo_image);
    bool is_remove_hosted_page_logo_image_Set() const;
    bool is_remove_hosted_page_logo_image_Valid() const;

    bool isRemovePlayerLogoImage() const;
    void setRemovePlayerLogoImage(const bool &remove_player_logo_image);
    bool is_remove_player_logo_image_Set() const;
    bool is_remove_player_logo_image_Valid() const;

    bool isRemovePlayerVideoPosterImage() const;
    void setRemovePlayerVideoPosterImage(const bool &remove_player_video_poster_image);
    bool is_remove_player_video_poster_image_Set() const;
    bool is_remove_player_video_poster_image_Valid() const;

    QString getSourceUrl() const;
    void setSourceUrl(const QString &source_url);
    bool is_source_url_Set() const;
    bool is_source_url_Valid() const;

    QString getTargetDeliveryProtocol() const;
    void setTargetDeliveryProtocol(const QString &target_delivery_protocol);
    bool is_target_delivery_protocol_Set() const;
    bool is_target_delivery_protocol_Valid() const;

    bool isUseStreamSource() const;
    void setUseStreamSource(const bool &use_stream_source);
    bool is_use_stream_source_Set() const;
    bool is_use_stream_source_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    bool isVideoFallback() const;
    void setVideoFallback(const bool &video_fallback);
    bool is_video_fallback_Set() const;
    bool is_video_fallback_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_aspect_ratio_height;
    bool m_aspect_ratio_height_isSet;
    bool m_aspect_ratio_height_isValid;

    qint32 m_aspect_ratio_width;
    bool m_aspect_ratio_width_isSet;
    bool m_aspect_ratio_width_isValid;

    QString m_closed_caption_type;
    bool m_closed_caption_type_isSet;
    bool m_closed_caption_type_isValid;

    QString m_delivery_method;
    bool m_delivery_method_isSet;
    bool m_delivery_method_isValid;

    QList<QString> m_delivery_protocols;
    bool m_delivery_protocols_isSet;
    bool m_delivery_protocols_isValid;

    bool m_disable_authentication;
    bool m_disable_authentication_isSet;
    bool m_disable_authentication_isValid;

    QString m_encoder;
    bool m_encoder_isSet;
    bool m_encoder_isValid;

    QString m_hosted_page_description;
    bool m_hosted_page_description_isSet;
    bool m_hosted_page_description_isValid;

    QString m_hosted_page_logo_image;
    bool m_hosted_page_logo_image_isSet;
    bool m_hosted_page_logo_image_isValid;

    bool m_hosted_page_sharing_icons;
    bool m_hosted_page_sharing_icons_isSet;
    bool m_hosted_page_sharing_icons_isValid;

    QString m_hosted_page_title;
    bool m_hosted_page_title_isSet;
    bool m_hosted_page_title_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    bool m_player_countdown;
    bool m_player_countdown_isSet;
    bool m_player_countdown_isValid;

    QDateTime m_player_countdown_at;
    bool m_player_countdown_at_isSet;
    bool m_player_countdown_at_isValid;

    QString m_player_logo_image;
    bool m_player_logo_image_isSet;
    bool m_player_logo_image_isValid;

    QString m_player_logo_position;
    bool m_player_logo_position_isSet;
    bool m_player_logo_position_isValid;

    bool m_player_responsive;
    bool m_player_responsive_isSet;
    bool m_player_responsive_isValid;

    QString m_player_type;
    bool m_player_type_isSet;
    bool m_player_type_isValid;

    QString m_player_video_poster_image;
    bool m_player_video_poster_image_isSet;
    bool m_player_video_poster_image_isValid;

    qint32 m_player_width;
    bool m_player_width_isSet;
    bool m_player_width_isValid;

    bool m_recording;
    bool m_recording_isSet;
    bool m_recording_isValid;

    bool m_remove_hosted_page_logo_image;
    bool m_remove_hosted_page_logo_image_isSet;
    bool m_remove_hosted_page_logo_image_isValid;

    bool m_remove_player_logo_image;
    bool m_remove_player_logo_image_isSet;
    bool m_remove_player_logo_image_isValid;

    bool m_remove_player_video_poster_image;
    bool m_remove_player_video_poster_image_isSet;
    bool m_remove_player_video_poster_image_isValid;

    QString m_source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;

    QString m_target_delivery_protocol;
    bool m_target_delivery_protocol_isSet;
    bool m_target_delivery_protocol_isValid;

    bool m_use_stream_source;
    bool m_use_stream_source_isSet;
    bool m_use_stream_source_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    bool m_video_fallback;
    bool m_video_fallback_isSet;
    bool m_video_fallback_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILive_stream_7)

#endif // OAILive_stream_7_H
