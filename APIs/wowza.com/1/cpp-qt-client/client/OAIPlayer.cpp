/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_countdown_isSet = false;
    m_countdown_isValid = false;

    m_countdown_at_isSet = false;
    m_countdown_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_embed_code_isSet = false;
    m_embed_code_isValid = false;

    m_hds_playback_url_isSet = false;
    m_hds_playback_url_isValid = false;

    m_hls_playback_url_isSet = false;
    m_hls_playback_url_isValid = false;

    m_hosted_page_isSet = false;
    m_hosted_page_isValid = false;

    m_hosted_page_description_isSet = false;
    m_hosted_page_description_isValid = false;

    m_hosted_page_logo_image_url_isSet = false;
    m_hosted_page_logo_image_url_isValid = false;

    m_hosted_page_sharing_icons_isSet = false;
    m_hosted_page_sharing_icons_isValid = false;

    m_hosted_page_title_isSet = false;
    m_hosted_page_title_isValid = false;

    m_hosted_page_url_isSet = false;
    m_hosted_page_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_image_url_isSet = false;
    m_logo_image_url_isValid = false;

    m_logo_position_isSet = false;
    m_logo_position_isValid = false;

    m_responsive_isSet = false;
    m_responsive_isValid = false;

    m_transcoder_id_isSet = false;
    m_transcoder_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_video_poster_image_url_isSet = false;
    m_video_poster_image_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_countdown_isValid = ::OpenAPI::fromJsonValue(m_countdown, json[QString("countdown")]);
    m_countdown_isSet = !json[QString("countdown")].isNull() && m_countdown_isValid;

    m_countdown_at_isValid = ::OpenAPI::fromJsonValue(m_countdown_at, json[QString("countdown_at")]);
    m_countdown_at_isSet = !json[QString("countdown_at")].isNull() && m_countdown_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_embed_code_isValid = ::OpenAPI::fromJsonValue(m_embed_code, json[QString("embed_code")]);
    m_embed_code_isSet = !json[QString("embed_code")].isNull() && m_embed_code_isValid;

    m_hds_playback_url_isValid = ::OpenAPI::fromJsonValue(m_hds_playback_url, json[QString("hds_playback_url")]);
    m_hds_playback_url_isSet = !json[QString("hds_playback_url")].isNull() && m_hds_playback_url_isValid;

    m_hls_playback_url_isValid = ::OpenAPI::fromJsonValue(m_hls_playback_url, json[QString("hls_playback_url")]);
    m_hls_playback_url_isSet = !json[QString("hls_playback_url")].isNull() && m_hls_playback_url_isValid;

    m_hosted_page_isValid = ::OpenAPI::fromJsonValue(m_hosted_page, json[QString("hosted_page")]);
    m_hosted_page_isSet = !json[QString("hosted_page")].isNull() && m_hosted_page_isValid;

    m_hosted_page_description_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_description, json[QString("hosted_page_description")]);
    m_hosted_page_description_isSet = !json[QString("hosted_page_description")].isNull() && m_hosted_page_description_isValid;

    m_hosted_page_logo_image_url_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_logo_image_url, json[QString("hosted_page_logo_image_url")]);
    m_hosted_page_logo_image_url_isSet = !json[QString("hosted_page_logo_image_url")].isNull() && m_hosted_page_logo_image_url_isValid;

    m_hosted_page_sharing_icons_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_sharing_icons, json[QString("hosted_page_sharing_icons")]);
    m_hosted_page_sharing_icons_isSet = !json[QString("hosted_page_sharing_icons")].isNull() && m_hosted_page_sharing_icons_isValid;

    m_hosted_page_title_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_title, json[QString("hosted_page_title")]);
    m_hosted_page_title_isSet = !json[QString("hosted_page_title")].isNull() && m_hosted_page_title_isValid;

    m_hosted_page_url_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_url, json[QString("hosted_page_url")]);
    m_hosted_page_url_isSet = !json[QString("hosted_page_url")].isNull() && m_hosted_page_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_image_url_isValid = ::OpenAPI::fromJsonValue(m_logo_image_url, json[QString("logo_image_url")]);
    m_logo_image_url_isSet = !json[QString("logo_image_url")].isNull() && m_logo_image_url_isValid;

    m_logo_position_isValid = ::OpenAPI::fromJsonValue(m_logo_position, json[QString("logo_position")]);
    m_logo_position_isSet = !json[QString("logo_position")].isNull() && m_logo_position_isValid;

    m_responsive_isValid = ::OpenAPI::fromJsonValue(m_responsive, json[QString("responsive")]);
    m_responsive_isSet = !json[QString("responsive")].isNull() && m_responsive_isValid;

    m_transcoder_id_isValid = ::OpenAPI::fromJsonValue(m_transcoder_id, json[QString("transcoder_id")]);
    m_transcoder_id_isSet = !json[QString("transcoder_id")].isNull() && m_transcoder_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_video_poster_image_url_isValid = ::OpenAPI::fromJsonValue(m_video_poster_image_url, json[QString("video_poster_image_url")]);
    m_video_poster_image_url_isSet = !json[QString("video_poster_image_url")].isNull() && m_video_poster_image_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_countdown_isSet) {
        obj.insert(QString("countdown"), ::OpenAPI::toJsonValue(m_countdown));
    }
    if (m_countdown_at_isSet) {
        obj.insert(QString("countdown_at"), ::OpenAPI::toJsonValue(m_countdown_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_embed_code_isSet) {
        obj.insert(QString("embed_code"), ::OpenAPI::toJsonValue(m_embed_code));
    }
    if (m_hds_playback_url_isSet) {
        obj.insert(QString("hds_playback_url"), ::OpenAPI::toJsonValue(m_hds_playback_url));
    }
    if (m_hls_playback_url_isSet) {
        obj.insert(QString("hls_playback_url"), ::OpenAPI::toJsonValue(m_hls_playback_url));
    }
    if (m_hosted_page_isSet) {
        obj.insert(QString("hosted_page"), ::OpenAPI::toJsonValue(m_hosted_page));
    }
    if (m_hosted_page_description_isSet) {
        obj.insert(QString("hosted_page_description"), ::OpenAPI::toJsonValue(m_hosted_page_description));
    }
    if (m_hosted_page_logo_image_url_isSet) {
        obj.insert(QString("hosted_page_logo_image_url"), ::OpenAPI::toJsonValue(m_hosted_page_logo_image_url));
    }
    if (m_hosted_page_sharing_icons_isSet) {
        obj.insert(QString("hosted_page_sharing_icons"), ::OpenAPI::toJsonValue(m_hosted_page_sharing_icons));
    }
    if (m_hosted_page_title_isSet) {
        obj.insert(QString("hosted_page_title"), ::OpenAPI::toJsonValue(m_hosted_page_title));
    }
    if (m_hosted_page_url_isSet) {
        obj.insert(QString("hosted_page_url"), ::OpenAPI::toJsonValue(m_hosted_page_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_image_url_isSet) {
        obj.insert(QString("logo_image_url"), ::OpenAPI::toJsonValue(m_logo_image_url));
    }
    if (m_logo_position_isSet) {
        obj.insert(QString("logo_position"), ::OpenAPI::toJsonValue(m_logo_position));
    }
    if (m_responsive_isSet) {
        obj.insert(QString("responsive"), ::OpenAPI::toJsonValue(m_responsive));
    }
    if (m_transcoder_id_isSet) {
        obj.insert(QString("transcoder_id"), ::OpenAPI::toJsonValue(m_transcoder_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_video_poster_image_url_isSet) {
        obj.insert(QString("video_poster_image_url"), ::OpenAPI::toJsonValue(m_video_poster_image_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

bool OAIPlayer::isCountdown() const {
    return m_countdown;
}
void OAIPlayer::setCountdown(const bool &countdown) {
    m_countdown = countdown;
    m_countdown_isSet = true;
}

bool OAIPlayer::is_countdown_Set() const{
    return m_countdown_isSet;
}

bool OAIPlayer::is_countdown_Valid() const{
    return m_countdown_isValid;
}

QDateTime OAIPlayer::getCountdownAt() const {
    return m_countdown_at;
}
void OAIPlayer::setCountdownAt(const QDateTime &countdown_at) {
    m_countdown_at = countdown_at;
    m_countdown_at_isSet = true;
}

bool OAIPlayer::is_countdown_at_Set() const{
    return m_countdown_at_isSet;
}

bool OAIPlayer::is_countdown_at_Valid() const{
    return m_countdown_at_isValid;
}

QDateTime OAIPlayer::getCreatedAt() const {
    return m_created_at;
}
void OAIPlayer::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPlayer::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPlayer::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPlayer::getEmbedCode() const {
    return m_embed_code;
}
void OAIPlayer::setEmbedCode(const QString &embed_code) {
    m_embed_code = embed_code;
    m_embed_code_isSet = true;
}

bool OAIPlayer::is_embed_code_Set() const{
    return m_embed_code_isSet;
}

bool OAIPlayer::is_embed_code_Valid() const{
    return m_embed_code_isValid;
}

QString OAIPlayer::getHdsPlaybackUrl() const {
    return m_hds_playback_url;
}
void OAIPlayer::setHdsPlaybackUrl(const QString &hds_playback_url) {
    m_hds_playback_url = hds_playback_url;
    m_hds_playback_url_isSet = true;
}

bool OAIPlayer::is_hds_playback_url_Set() const{
    return m_hds_playback_url_isSet;
}

bool OAIPlayer::is_hds_playback_url_Valid() const{
    return m_hds_playback_url_isValid;
}

QString OAIPlayer::getHlsPlaybackUrl() const {
    return m_hls_playback_url;
}
void OAIPlayer::setHlsPlaybackUrl(const QString &hls_playback_url) {
    m_hls_playback_url = hls_playback_url;
    m_hls_playback_url_isSet = true;
}

bool OAIPlayer::is_hls_playback_url_Set() const{
    return m_hls_playback_url_isSet;
}

bool OAIPlayer::is_hls_playback_url_Valid() const{
    return m_hls_playback_url_isValid;
}

bool OAIPlayer::isHostedPage() const {
    return m_hosted_page;
}
void OAIPlayer::setHostedPage(const bool &hosted_page) {
    m_hosted_page = hosted_page;
    m_hosted_page_isSet = true;
}

bool OAIPlayer::is_hosted_page_Set() const{
    return m_hosted_page_isSet;
}

bool OAIPlayer::is_hosted_page_Valid() const{
    return m_hosted_page_isValid;
}

QString OAIPlayer::getHostedPageDescription() const {
    return m_hosted_page_description;
}
void OAIPlayer::setHostedPageDescription(const QString &hosted_page_description) {
    m_hosted_page_description = hosted_page_description;
    m_hosted_page_description_isSet = true;
}

bool OAIPlayer::is_hosted_page_description_Set() const{
    return m_hosted_page_description_isSet;
}

bool OAIPlayer::is_hosted_page_description_Valid() const{
    return m_hosted_page_description_isValid;
}

QString OAIPlayer::getHostedPageLogoImageUrl() const {
    return m_hosted_page_logo_image_url;
}
void OAIPlayer::setHostedPageLogoImageUrl(const QString &hosted_page_logo_image_url) {
    m_hosted_page_logo_image_url = hosted_page_logo_image_url;
    m_hosted_page_logo_image_url_isSet = true;
}

bool OAIPlayer::is_hosted_page_logo_image_url_Set() const{
    return m_hosted_page_logo_image_url_isSet;
}

bool OAIPlayer::is_hosted_page_logo_image_url_Valid() const{
    return m_hosted_page_logo_image_url_isValid;
}

QString OAIPlayer::getHostedPageSharingIcons() const {
    return m_hosted_page_sharing_icons;
}
void OAIPlayer::setHostedPageSharingIcons(const QString &hosted_page_sharing_icons) {
    m_hosted_page_sharing_icons = hosted_page_sharing_icons;
    m_hosted_page_sharing_icons_isSet = true;
}

bool OAIPlayer::is_hosted_page_sharing_icons_Set() const{
    return m_hosted_page_sharing_icons_isSet;
}

bool OAIPlayer::is_hosted_page_sharing_icons_Valid() const{
    return m_hosted_page_sharing_icons_isValid;
}

QString OAIPlayer::getHostedPageTitle() const {
    return m_hosted_page_title;
}
void OAIPlayer::setHostedPageTitle(const QString &hosted_page_title) {
    m_hosted_page_title = hosted_page_title;
    m_hosted_page_title_isSet = true;
}

bool OAIPlayer::is_hosted_page_title_Set() const{
    return m_hosted_page_title_isSet;
}

bool OAIPlayer::is_hosted_page_title_Valid() const{
    return m_hosted_page_title_isValid;
}

QString OAIPlayer::getHostedPageUrl() const {
    return m_hosted_page_url;
}
void OAIPlayer::setHostedPageUrl(const QString &hosted_page_url) {
    m_hosted_page_url = hosted_page_url;
    m_hosted_page_url_isSet = true;
}

bool OAIPlayer::is_hosted_page_url_Set() const{
    return m_hosted_page_url_isSet;
}

bool OAIPlayer::is_hosted_page_url_Valid() const{
    return m_hosted_page_url_isValid;
}

QString OAIPlayer::getId() const {
    return m_id;
}
void OAIPlayer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlayer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlayer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlayer::getLogoImageUrl() const {
    return m_logo_image_url;
}
void OAIPlayer::setLogoImageUrl(const QString &logo_image_url) {
    m_logo_image_url = logo_image_url;
    m_logo_image_url_isSet = true;
}

bool OAIPlayer::is_logo_image_url_Set() const{
    return m_logo_image_url_isSet;
}

bool OAIPlayer::is_logo_image_url_Valid() const{
    return m_logo_image_url_isValid;
}

QString OAIPlayer::getLogoPosition() const {
    return m_logo_position;
}
void OAIPlayer::setLogoPosition(const QString &logo_position) {
    m_logo_position = logo_position;
    m_logo_position_isSet = true;
}

bool OAIPlayer::is_logo_position_Set() const{
    return m_logo_position_isSet;
}

bool OAIPlayer::is_logo_position_Valid() const{
    return m_logo_position_isValid;
}

bool OAIPlayer::isResponsive() const {
    return m_responsive;
}
void OAIPlayer::setResponsive(const bool &responsive) {
    m_responsive = responsive;
    m_responsive_isSet = true;
}

bool OAIPlayer::is_responsive_Set() const{
    return m_responsive_isSet;
}

bool OAIPlayer::is_responsive_Valid() const{
    return m_responsive_isValid;
}

QString OAIPlayer::getTranscoderId() const {
    return m_transcoder_id;
}
void OAIPlayer::setTranscoderId(const QString &transcoder_id) {
    m_transcoder_id = transcoder_id;
    m_transcoder_id_isSet = true;
}

bool OAIPlayer::is_transcoder_id_Set() const{
    return m_transcoder_id_isSet;
}

bool OAIPlayer::is_transcoder_id_Valid() const{
    return m_transcoder_id_isValid;
}

QString OAIPlayer::getType() const {
    return m_type;
}
void OAIPlayer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlayer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlayer::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPlayer::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPlayer::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPlayer::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPlayer::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPlayer::getVideoPosterImageUrl() const {
    return m_video_poster_image_url;
}
void OAIPlayer::setVideoPosterImageUrl(const QString &video_poster_image_url) {
    m_video_poster_image_url = video_poster_image_url;
    m_video_poster_image_url_isSet = true;
}

bool OAIPlayer::is_video_poster_image_url_Set() const{
    return m_video_poster_image_url_isSet;
}

bool OAIPlayer::is_video_poster_image_url_Valid() const{
    return m_video_poster_image_url_isValid;
}

qint32 OAIPlayer::getWidth() const {
    return m_width;
}
void OAIPlayer::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPlayer::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPlayer::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countdown_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hds_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_logo_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_sharing_icons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_poster_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
