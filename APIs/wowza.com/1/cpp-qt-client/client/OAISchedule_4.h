/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISchedule_4.h
 *
 * 
 */

#ifndef OAISchedule_4_H
#define OAISchedule_4_H

#include <QJsonObject>

#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISchedule_4 : public OAIObject {
public:
    OAISchedule_4();
    OAISchedule_4(QString json);
    ~OAISchedule_4() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionType() const;
    void setActionType(const QString &action_type);
    bool is_action_type_Set() const;
    bool is_action_type_Valid() const;

    QDate getEndRepeat() const;
    void setEndRepeat(const QDate &end_repeat);
    bool is_end_repeat_Set() const;
    bool is_end_repeat_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRecurrenceData() const;
    void setRecurrenceData(const QString &recurrence_data);
    bool is_recurrence_data_Set() const;
    bool is_recurrence_data_Valid() const;

    QDate getStartRepeat() const;
    void setStartRepeat(const QDate &start_repeat);
    bool is_start_repeat_Set() const;
    bool is_start_repeat_Valid() const;

    QDateTime getStartTranscoder() const;
    void setStartTranscoder(const QDateTime &start_transcoder);
    bool is_start_transcoder_Set() const;
    bool is_start_transcoder_Valid() const;

    QDateTime getStopTranscoder() const;
    void setStopTranscoder(const QDateTime &stop_transcoder);
    bool is_stop_transcoder_Set() const;
    bool is_stop_transcoder_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_type;
    bool m_action_type_isSet;
    bool m_action_type_isValid;

    QDate m_end_repeat;
    bool m_end_repeat_isSet;
    bool m_end_repeat_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_recurrence_data;
    bool m_recurrence_data_isSet;
    bool m_recurrence_data_isValid;

    QDate m_start_repeat;
    bool m_start_repeat_isSet;
    bool m_start_repeat_isValid;

    QDateTime m_start_transcoder;
    bool m_start_transcoder_isSet;
    bool m_start_transcoder_isValid;

    QDateTime m_stop_transcoder;
    bool m_stop_transcoder_isSet;
    bool m_stop_transcoder_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISchedule_4)

#endif // OAISchedule_4_H
