/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShm_metrics.h
 *
 * 
 */

#ifndef OAIShm_metrics_H
#define OAIShm_metrics_H

#include <QJsonObject>

#include "OAIAudio_codec_metric.h"
#include "OAIBits_in_rate_metric.h"
#include "OAIBits_out_rate_metric.h"
#include "OAIBytes_in_rate_metric.h"
#include "OAIBytes_out_rate_metric.h"
#include "OAIConfigured_bytes_out_rate_metric.h"
#include "OAIConnected_metric.h"
#include "OAICpu_metric.h"
#include "OAIFrame_rate_metric.h"
#include "OAIFrame_size_metric.h"
#include "OAIGpu_decoder_usage_metric.h"
#include "OAIGpu_driver_version_metric.h"
#include "OAIGpu_encoder_usage_metric.h"
#include "OAIGpu_memory_usage_metric.h"
#include "OAIGpu_usage_metric.h"
#include "OAIHeight_metric.h"
#include "OAIKeyframe_interval_metric.h"
#include "OAIStream_target_status_OUTPUTIDX_STREAMTARGETIDX_metric.h"
#include "OAIUnique_views_metric.h"
#include "OAIVideo_codec_metric.h"
#include "OAIWidth_metric.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudio_codec_metric;
class OAIBits_in_rate_metric;
class OAIBits_out_rate_metric;
class OAIBytes_in_rate_metric;
class OAIBytes_out_rate_metric;
class OAIConfigured_bytes_out_rate_metric;
class OAIConnected_metric;
class OAICpu_metric;
class OAIFrame_rate_metric;
class OAIFrame_size_metric;
class OAIGpu_decoder_usage_metric;
class OAIGpu_driver_version_metric;
class OAIGpu_encoder_usage_metric;
class OAIGpu_memory_usage_metric;
class OAIGpu_usage_metric;
class OAIHeight_metric;
class OAIKeyframe_interval_metric;
class OAIStream_target_status_OUTPUTIDX_STREAMTARGETIDX_metric;
class OAIUnique_views_metric;
class OAIVideo_codec_metric;
class OAIWidth_metric;

class OAIShm_metrics : public OAIObject {
public:
    OAIShm_metrics();
    OAIShm_metrics(QString json);
    ~OAIShm_metrics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudio_codec_metric getAudioCodec() const;
    void setAudioCodec(const OAIAudio_codec_metric &audio_codec);
    bool is_audio_codec_Set() const;
    bool is_audio_codec_Valid() const;

    OAIBits_in_rate_metric getBitsInRate() const;
    void setBitsInRate(const OAIBits_in_rate_metric &bits_in_rate);
    bool is_bits_in_rate_Set() const;
    bool is_bits_in_rate_Valid() const;

    OAIBits_out_rate_metric getBitsOutRate() const;
    void setBitsOutRate(const OAIBits_out_rate_metric &bits_out_rate);
    bool is_bits_out_rate_Set() const;
    bool is_bits_out_rate_Valid() const;

    OAIBytes_in_rate_metric getBytesInRate() const;
    void setBytesInRate(const OAIBytes_in_rate_metric &bytes_in_rate);
    bool is_bytes_in_rate_Set() const;
    bool is_bytes_in_rate_Valid() const;

    OAIBytes_out_rate_metric getBytesOutRate() const;
    void setBytesOutRate(const OAIBytes_out_rate_metric &bytes_out_rate);
    bool is_bytes_out_rate_Set() const;
    bool is_bytes_out_rate_Valid() const;

    OAIConfigured_bytes_out_rate_metric getConfiguredBytesOutRate() const;
    void setConfiguredBytesOutRate(const OAIConfigured_bytes_out_rate_metric &configured_bytes_out_rate);
    bool is_configured_bytes_out_rate_Set() const;
    bool is_configured_bytes_out_rate_Valid() const;

    OAIConnected_metric getConnected() const;
    void setConnected(const OAIConnected_metric &connected);
    bool is_connected_Set() const;
    bool is_connected_Valid() const;

    OAICpu_metric getCpu() const;
    void setCpu(const OAICpu_metric &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    OAIFrame_rate_metric getFrameRate() const;
    void setFrameRate(const OAIFrame_rate_metric &frame_rate);
    bool is_frame_rate_Set() const;
    bool is_frame_rate_Valid() const;

    OAIFrame_size_metric getFrameSize() const;
    void setFrameSize(const OAIFrame_size_metric &frame_size);
    bool is_frame_size_Set() const;
    bool is_frame_size_Valid() const;

    OAIGpu_decoder_usage_metric getGpuDecoderUsage() const;
    void setGpuDecoderUsage(const OAIGpu_decoder_usage_metric &gpu_decoder_usage);
    bool is_gpu_decoder_usage_Set() const;
    bool is_gpu_decoder_usage_Valid() const;

    OAIGpu_driver_version_metric getGpuDriverVersion() const;
    void setGpuDriverVersion(const OAIGpu_driver_version_metric &gpu_driver_version);
    bool is_gpu_driver_version_Set() const;
    bool is_gpu_driver_version_Valid() const;

    OAIGpu_encoder_usage_metric getGpuEncoderUsage() const;
    void setGpuEncoderUsage(const OAIGpu_encoder_usage_metric &gpu_encoder_usage);
    bool is_gpu_encoder_usage_Set() const;
    bool is_gpu_encoder_usage_Valid() const;

    OAIGpu_memory_usage_metric getGpuMemoryUsage() const;
    void setGpuMemoryUsage(const OAIGpu_memory_usage_metric &gpu_memory_usage);
    bool is_gpu_memory_usage_Set() const;
    bool is_gpu_memory_usage_Valid() const;

    OAIGpu_usage_metric getGpuUsage() const;
    void setGpuUsage(const OAIGpu_usage_metric &gpu_usage);
    bool is_gpu_usage_Set() const;
    bool is_gpu_usage_Valid() const;

    OAIHeight_metric getHeight() const;
    void setHeight(const OAIHeight_metric &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    OAIKeyframe_interval_metric getKeyframeInterval() const;
    void setKeyframeInterval(const OAIKeyframe_interval_metric &keyframe_interval);
    bool is_keyframe_interval_Set() const;
    bool is_keyframe_interval_Valid() const;

    OAIStream_target_status_OUTPUTIDX_STREAMTARGETIDX_metric getStreamTargetStatusOutputidxStreamtargetidx() const;
    void setStreamTargetStatusOutputidxStreamtargetidx(const OAIStream_target_status_OUTPUTIDX_STREAMTARGETIDX_metric &stream_target_status_outputidx_streamtargetidx);
    bool is_stream_target_status_outputidx_streamtargetidx_Set() const;
    bool is_stream_target_status_outputidx_streamtargetidx_Valid() const;

    OAIUnique_views_metric getUniqueViews() const;
    void setUniqueViews(const OAIUnique_views_metric &unique_views);
    bool is_unique_views_Set() const;
    bool is_unique_views_Valid() const;

    OAIVideo_codec_metric getVideoCodec() const;
    void setVideoCodec(const OAIVideo_codec_metric &video_codec);
    bool is_video_codec_Set() const;
    bool is_video_codec_Valid() const;

    OAIWidth_metric getWidth() const;
    void setWidth(const OAIWidth_metric &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudio_codec_metric m_audio_codec;
    bool m_audio_codec_isSet;
    bool m_audio_codec_isValid;

    OAIBits_in_rate_metric m_bits_in_rate;
    bool m_bits_in_rate_isSet;
    bool m_bits_in_rate_isValid;

    OAIBits_out_rate_metric m_bits_out_rate;
    bool m_bits_out_rate_isSet;
    bool m_bits_out_rate_isValid;

    OAIBytes_in_rate_metric m_bytes_in_rate;
    bool m_bytes_in_rate_isSet;
    bool m_bytes_in_rate_isValid;

    OAIBytes_out_rate_metric m_bytes_out_rate;
    bool m_bytes_out_rate_isSet;
    bool m_bytes_out_rate_isValid;

    OAIConfigured_bytes_out_rate_metric m_configured_bytes_out_rate;
    bool m_configured_bytes_out_rate_isSet;
    bool m_configured_bytes_out_rate_isValid;

    OAIConnected_metric m_connected;
    bool m_connected_isSet;
    bool m_connected_isValid;

    OAICpu_metric m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    OAIFrame_rate_metric m_frame_rate;
    bool m_frame_rate_isSet;
    bool m_frame_rate_isValid;

    OAIFrame_size_metric m_frame_size;
    bool m_frame_size_isSet;
    bool m_frame_size_isValid;

    OAIGpu_decoder_usage_metric m_gpu_decoder_usage;
    bool m_gpu_decoder_usage_isSet;
    bool m_gpu_decoder_usage_isValid;

    OAIGpu_driver_version_metric m_gpu_driver_version;
    bool m_gpu_driver_version_isSet;
    bool m_gpu_driver_version_isValid;

    OAIGpu_encoder_usage_metric m_gpu_encoder_usage;
    bool m_gpu_encoder_usage_isSet;
    bool m_gpu_encoder_usage_isValid;

    OAIGpu_memory_usage_metric m_gpu_memory_usage;
    bool m_gpu_memory_usage_isSet;
    bool m_gpu_memory_usage_isValid;

    OAIGpu_usage_metric m_gpu_usage;
    bool m_gpu_usage_isSet;
    bool m_gpu_usage_isValid;

    OAIHeight_metric m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    OAIKeyframe_interval_metric m_keyframe_interval;
    bool m_keyframe_interval_isSet;
    bool m_keyframe_interval_isValid;

    OAIStream_target_status_OUTPUTIDX_STREAMTARGETIDX_metric m_stream_target_status_outputidx_streamtargetidx;
    bool m_stream_target_status_outputidx_streamtargetidx_isSet;
    bool m_stream_target_status_outputidx_streamtargetidx_isValid;

    OAIUnique_views_metric m_unique_views;
    bool m_unique_views_isSet;
    bool m_unique_views_isValid;

    OAIVideo_codec_metric m_video_codec;
    bool m_video_codec_isSet;
    bool m_video_codec_isValid;

    OAIWidth_metric m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShm_metrics)

#endif // OAIShm_metrics_H
