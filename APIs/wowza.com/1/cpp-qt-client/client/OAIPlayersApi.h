/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlayersApi_H
#define OAI_OAIPlayersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatePlayerUrl_200_response.h"
#include "OAIError401.h"
#include "OAIError403.h"
#include "OAIError404.h"
#include "OAIError410.h"
#include "OAIError422.h"
#include "OAIPlayer_update_input.h"
#include "OAIPlayers.h"
#include "OAIRequestPlayerRebuild_200_response.h"
#include "OAIShowPlayerState_200_response.h"
#include "OAIShowPlayer_200_response.h"
#include "OAIUrl_create_input.h"
#include "OAIUrl_update_input.h"
#include "OAIUrls.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlayersApi : public QObject {
    Q_OBJECT

public:
    OAIPlayersApi(const int timeOut = 0);
    ~OAIPlayersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  url OAIUrl_create_input [required]
    */
    virtual void createPlayerUrl(const QString &player_id, const OAIUrl_create_input &url);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deletePlayerUrl(const QString &player_id, const QString &id);

    /**
    * @param[in]  player_id QString [required]
    */
    virtual void listPlayerUrls(const QString &player_id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listPlayers(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void requestPlayerRebuild(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showPlayer(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showPlayerState(const QString &id);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void showPlayerUrl(const QString &player_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  player OAIPlayer_update_input [required]
    */
    virtual void updatePlayer(const QString &id, const OAIPlayer_update_input &player);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  url OAIUrl_update_input [required]
    */
    virtual void updatePlayerUrl(const QString &player_id, const QString &id, const OAIUrl_update_input &url);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPlayerUrlCallback(OAIHttpRequestWorker *worker);
    void deletePlayerUrlCallback(OAIHttpRequestWorker *worker);
    void listPlayerUrlsCallback(OAIHttpRequestWorker *worker);
    void listPlayersCallback(OAIHttpRequestWorker *worker);
    void requestPlayerRebuildCallback(OAIHttpRequestWorker *worker);
    void showPlayerCallback(OAIHttpRequestWorker *worker);
    void showPlayerStateCallback(OAIHttpRequestWorker *worker);
    void showPlayerUrlCallback(OAIHttpRequestWorker *worker);
    void updatePlayerCallback(OAIHttpRequestWorker *worker);
    void updatePlayerUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPlayerUrlSignal(OAICreatePlayerUrl_200_response summary);
    void deletePlayerUrlSignal();
    void listPlayerUrlsSignal(OAIUrls summary);
    void listPlayersSignal(OAIPlayers summary);
    void requestPlayerRebuildSignal(OAIRequestPlayerRebuild_200_response summary);
    void showPlayerSignal(OAIShowPlayer_200_response summary);
    void showPlayerStateSignal(OAIShowPlayerState_200_response summary);
    void showPlayerUrlSignal(OAICreatePlayerUrl_200_response summary);
    void updatePlayerSignal(OAIShowPlayer_200_response summary);
    void updatePlayerUrlSignal(OAICreatePlayerUrl_200_response summary);


    void createPlayerUrlSignalFull(OAIHttpRequestWorker *worker, OAICreatePlayerUrl_200_response summary);
    void deletePlayerUrlSignalFull(OAIHttpRequestWorker *worker);
    void listPlayerUrlsSignalFull(OAIHttpRequestWorker *worker, OAIUrls summary);
    void listPlayersSignalFull(OAIHttpRequestWorker *worker, OAIPlayers summary);
    void requestPlayerRebuildSignalFull(OAIHttpRequestWorker *worker, OAIRequestPlayerRebuild_200_response summary);
    void showPlayerSignalFull(OAIHttpRequestWorker *worker, OAIShowPlayer_200_response summary);
    void showPlayerStateSignalFull(OAIHttpRequestWorker *worker, OAIShowPlayerState_200_response summary);
    void showPlayerUrlSignalFull(OAIHttpRequestWorker *worker, OAICreatePlayerUrl_200_response summary);
    void updatePlayerSignalFull(OAIHttpRequestWorker *worker, OAIShowPlayer_200_response summary);
    void updatePlayerUrlSignalFull(OAIHttpRequestWorker *worker, OAICreatePlayerUrl_200_response summary);

    Q_DECL_DEPRECATED_X("Use createPlayerUrlSignalError() instead")
    void createPlayerUrlSignalE(OAICreatePlayerUrl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlayerUrlSignalError(OAICreatePlayerUrl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePlayerUrlSignalError() instead")
    void deletePlayerUrlSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePlayerUrlSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPlayerUrlsSignalError() instead")
    void listPlayerUrlsSignalE(OAIUrls summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPlayerUrlsSignalError(OAIUrls summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPlayersSignalError() instead")
    void listPlayersSignalE(OAIPlayers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPlayersSignalError(OAIPlayers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPlayerRebuildSignalError() instead")
    void requestPlayerRebuildSignalE(OAIRequestPlayerRebuild_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPlayerRebuildSignalError(OAIRequestPlayerRebuild_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showPlayerSignalError() instead")
    void showPlayerSignalE(OAIShowPlayer_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showPlayerSignalError(OAIShowPlayer_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showPlayerStateSignalError() instead")
    void showPlayerStateSignalE(OAIShowPlayerState_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showPlayerStateSignalError(OAIShowPlayerState_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showPlayerUrlSignalError() instead")
    void showPlayerUrlSignalE(OAICreatePlayerUrl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showPlayerUrlSignalError(OAICreatePlayerUrl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePlayerSignalError() instead")
    void updatePlayerSignalE(OAIShowPlayer_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePlayerSignalError(OAIShowPlayer_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePlayerUrlSignalError() instead")
    void updatePlayerUrlSignalE(OAICreatePlayerUrl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePlayerUrlSignalError(OAICreatePlayerUrl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPlayerUrlSignalErrorFull() instead")
    void createPlayerUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlayerUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePlayerUrlSignalErrorFull() instead")
    void deletePlayerUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePlayerUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPlayerUrlsSignalErrorFull() instead")
    void listPlayerUrlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPlayerUrlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPlayersSignalErrorFull() instead")
    void listPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPlayerRebuildSignalErrorFull() instead")
    void requestPlayerRebuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPlayerRebuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showPlayerSignalErrorFull() instead")
    void showPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showPlayerStateSignalErrorFull() instead")
    void showPlayerStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showPlayerStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showPlayerUrlSignalErrorFull() instead")
    void showPlayerUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showPlayerUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePlayerSignalErrorFull() instead")
    void updatePlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePlayerUrlSignalErrorFull() instead")
    void updatePlayerUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePlayerUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
