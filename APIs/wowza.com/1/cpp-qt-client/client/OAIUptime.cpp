/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUptime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUptime::OAIUptime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUptime::OAIUptime() {
    this->initializeModel();
}

OAIUptime::~OAIUptime() {}

void OAIUptime::initializeModel() {

    m_billed_isSet = false;
    m_billed_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_running_isSet = false;
    m_running_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_transcoder_id_isSet = false;
    m_transcoder_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIUptime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUptime::fromJsonObject(QJsonObject json) {

    m_billed_isValid = ::OpenAPI::fromJsonValue(m_billed, json[QString("billed")]);
    m_billed_isSet = !json[QString("billed")].isNull() && m_billed_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_running_isValid = ::OpenAPI::fromJsonValue(m_running, json[QString("running")]);
    m_running_isSet = !json[QString("running")].isNull() && m_running_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_transcoder_id_isValid = ::OpenAPI::fromJsonValue(m_transcoder_id, json[QString("transcoder_id")]);
    m_transcoder_id_isSet = !json[QString("transcoder_id")].isNull() && m_transcoder_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIUptime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUptime::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_isSet) {
        obj.insert(QString("billed"), ::OpenAPI::toJsonValue(m_billed));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_running_isSet) {
        obj.insert(QString("running"), ::OpenAPI::toJsonValue(m_running));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_transcoder_id_isSet) {
        obj.insert(QString("transcoder_id"), ::OpenAPI::toJsonValue(m_transcoder_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIUptime::isBilled() const {
    return m_billed;
}
void OAIUptime::setBilled(const bool &billed) {
    m_billed = billed;
    m_billed_isSet = true;
}

bool OAIUptime::is_billed_Set() const{
    return m_billed_isSet;
}

bool OAIUptime::is_billed_Valid() const{
    return m_billed_isValid;
}

QDateTime OAIUptime::getCreatedAt() const {
    return m_created_at;
}
void OAIUptime::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUptime::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUptime::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUptime::getEndedAt() const {
    return m_ended_at;
}
void OAIUptime::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIUptime::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIUptime::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAIUptime::getId() const {
    return m_id;
}
void OAIUptime::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUptime::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUptime::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUptime::isRunning() const {
    return m_running;
}
void OAIUptime::setRunning(const bool &running) {
    m_running = running;
    m_running_isSet = true;
}

bool OAIUptime::is_running_Set() const{
    return m_running_isSet;
}

bool OAIUptime::is_running_Valid() const{
    return m_running_isValid;
}

QDateTime OAIUptime::getStartedAt() const {
    return m_started_at;
}
void OAIUptime::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIUptime::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIUptime::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIUptime::getTranscoderId() const {
    return m_transcoder_id;
}
void OAIUptime::setTranscoderId(const QString &transcoder_id) {
    m_transcoder_id = transcoder_id;
    m_transcoder_id_isSet = true;
}

bool OAIUptime::is_transcoder_id_Set() const{
    return m_transcoder_id_isSet;
}

bool OAIUptime::is_transcoder_id_Valid() const{
    return m_transcoder_id_isValid;
}

QString OAIUptime::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUptime::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUptime::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUptime::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIUptime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUptime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
