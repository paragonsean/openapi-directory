/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveStreamsApi_H
#define OAI_OAILiveStreamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateLiveStream_200_response.h"
#include "OAIError401.h"
#include "OAIError403.h"
#include "OAIError404.h"
#include "OAIError410.h"
#include "OAIError422.h"
#include "OAILive_stream_create_input.h"
#include "OAILive_stream_update_input.h"
#include "OAILive_streams.h"
#include "OAIRegenerateConnectionCodeLiveStream_200_response.h"
#include "OAIResetLiveStream_200_response.h"
#include "OAIShowLiveStreamState_200_response.h"
#include "OAIShowLiveStreamStats_200_response.h"
#include "OAIShowLiveStreamThumbnailUrl_200_response.h"
#include "OAIStartLiveStream_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiveStreamsApi : public QObject {
    Q_OBJECT

public:
    OAILiveStreamsApi(const int timeOut = 0);
    ~OAILiveStreamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  live_stream OAILive_stream_create_input [required]
    */
    virtual void createLiveStream(const OAILive_stream_create_input &live_stream);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteLiveStream(const QString &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listLiveStreams(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void regenerateConnectionCodeLiveStream(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void resetLiveStream(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showLiveStream(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showLiveStreamState(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showLiveStreamStats(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showLiveStreamThumbnailUrl(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void startLiveStream(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void stopLiveStream(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  live_stream OAILive_stream_update_input [required]
    */
    virtual void updateLiveStream(const QString &id, const OAILive_stream_update_input &live_stream);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLiveStreamCallback(OAIHttpRequestWorker *worker);
    void deleteLiveStreamCallback(OAIHttpRequestWorker *worker);
    void listLiveStreamsCallback(OAIHttpRequestWorker *worker);
    void regenerateConnectionCodeLiveStreamCallback(OAIHttpRequestWorker *worker);
    void resetLiveStreamCallback(OAIHttpRequestWorker *worker);
    void showLiveStreamCallback(OAIHttpRequestWorker *worker);
    void showLiveStreamStateCallback(OAIHttpRequestWorker *worker);
    void showLiveStreamStatsCallback(OAIHttpRequestWorker *worker);
    void showLiveStreamThumbnailUrlCallback(OAIHttpRequestWorker *worker);
    void startLiveStreamCallback(OAIHttpRequestWorker *worker);
    void stopLiveStreamCallback(OAIHttpRequestWorker *worker);
    void updateLiveStreamCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLiveStreamSignal(OAICreateLiveStream_200_response summary);
    void deleteLiveStreamSignal();
    void listLiveStreamsSignal(OAILive_streams summary);
    void regenerateConnectionCodeLiveStreamSignal(OAIRegenerateConnectionCodeLiveStream_200_response summary);
    void resetLiveStreamSignal(OAIResetLiveStream_200_response summary);
    void showLiveStreamSignal(OAICreateLiveStream_200_response summary);
    void showLiveStreamStateSignal(OAIShowLiveStreamState_200_response summary);
    void showLiveStreamStatsSignal(OAIShowLiveStreamStats_200_response summary);
    void showLiveStreamThumbnailUrlSignal(OAIShowLiveStreamThumbnailUrl_200_response summary);
    void startLiveStreamSignal(OAIStartLiveStream_200_response summary);
    void stopLiveStreamSignal(OAIShowLiveStreamState_200_response summary);
    void updateLiveStreamSignal(OAICreateLiveStream_200_response summary);


    void createLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAICreateLiveStream_200_response summary);
    void deleteLiveStreamSignalFull(OAIHttpRequestWorker *worker);
    void listLiveStreamsSignalFull(OAIHttpRequestWorker *worker, OAILive_streams summary);
    void regenerateConnectionCodeLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAIRegenerateConnectionCodeLiveStream_200_response summary);
    void resetLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAIResetLiveStream_200_response summary);
    void showLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAICreateLiveStream_200_response summary);
    void showLiveStreamStateSignalFull(OAIHttpRequestWorker *worker, OAIShowLiveStreamState_200_response summary);
    void showLiveStreamStatsSignalFull(OAIHttpRequestWorker *worker, OAIShowLiveStreamStats_200_response summary);
    void showLiveStreamThumbnailUrlSignalFull(OAIHttpRequestWorker *worker, OAIShowLiveStreamThumbnailUrl_200_response summary);
    void startLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAIStartLiveStream_200_response summary);
    void stopLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAIShowLiveStreamState_200_response summary);
    void updateLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAICreateLiveStream_200_response summary);

    Q_DECL_DEPRECATED_X("Use createLiveStreamSignalError() instead")
    void createLiveStreamSignalE(OAICreateLiveStream_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamSignalError(OAICreateLiveStream_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamSignalError() instead")
    void deleteLiveStreamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLiveStreamsSignalError() instead")
    void listLiveStreamsSignalE(OAILive_streams summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLiveStreamsSignalError(OAILive_streams summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateConnectionCodeLiveStreamSignalError() instead")
    void regenerateConnectionCodeLiveStreamSignalE(OAIRegenerateConnectionCodeLiveStream_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateConnectionCodeLiveStreamSignalError(OAIRegenerateConnectionCodeLiveStream_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetLiveStreamSignalError() instead")
    void resetLiveStreamSignalE(OAIResetLiveStream_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetLiveStreamSignalError(OAIResetLiveStream_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamSignalError() instead")
    void showLiveStreamSignalE(OAICreateLiveStream_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamSignalError(OAICreateLiveStream_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamStateSignalError() instead")
    void showLiveStreamStateSignalE(OAIShowLiveStreamState_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamStateSignalError(OAIShowLiveStreamState_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamStatsSignalError() instead")
    void showLiveStreamStatsSignalE(OAIShowLiveStreamStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamStatsSignalError(OAIShowLiveStreamStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamThumbnailUrlSignalError() instead")
    void showLiveStreamThumbnailUrlSignalE(OAIShowLiveStreamThumbnailUrl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamThumbnailUrlSignalError(OAIShowLiveStreamThumbnailUrl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startLiveStreamSignalError() instead")
    void startLiveStreamSignalE(OAIStartLiveStream_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startLiveStreamSignalError(OAIStartLiveStream_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopLiveStreamSignalError() instead")
    void stopLiveStreamSignalE(OAIShowLiveStreamState_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopLiveStreamSignalError(OAIShowLiveStreamState_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamSignalError() instead")
    void updateLiveStreamSignalE(OAICreateLiveStream_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamSignalError(OAICreateLiveStream_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLiveStreamSignalErrorFull() instead")
    void createLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamSignalErrorFull() instead")
    void deleteLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLiveStreamsSignalErrorFull() instead")
    void listLiveStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLiveStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateConnectionCodeLiveStreamSignalErrorFull() instead")
    void regenerateConnectionCodeLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateConnectionCodeLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetLiveStreamSignalErrorFull() instead")
    void resetLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamSignalErrorFull() instead")
    void showLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamStateSignalErrorFull() instead")
    void showLiveStreamStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamStatsSignalErrorFull() instead")
    void showLiveStreamStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showLiveStreamThumbnailUrlSignalErrorFull() instead")
    void showLiveStreamThumbnailUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showLiveStreamThumbnailUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startLiveStreamSignalErrorFull() instead")
    void startLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopLiveStreamSignalErrorFull() instead")
    void stopLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamSignalErrorFull() instead")
    void updateLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
