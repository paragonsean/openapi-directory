/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILive_stream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILive_stream::OAILive_stream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILive_stream::OAILive_stream() {
    this->initializeModel();
}

OAILive_stream::~OAILive_stream() {}

void OAILive_stream::initializeModel() {

    m_aspect_ratio_height_isSet = false;
    m_aspect_ratio_height_isValid = false;

    m_aspect_ratio_width_isSet = false;
    m_aspect_ratio_width_isValid = false;

    m_billing_mode_isSet = false;
    m_billing_mode_isValid = false;

    m_broadcast_location_isSet = false;
    m_broadcast_location_isValid = false;

    m_closed_caption_type_isSet = false;
    m_closed_caption_type_isValid = false;

    m_connection_code_isSet = false;
    m_connection_code_isValid = false;

    m_connection_code_expires_at_isSet = false;
    m_connection_code_expires_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_delivery_method_isSet = false;
    m_delivery_method_isValid = false;

    m_delivery_protocol_isSet = false;
    m_delivery_protocol_isValid = false;

    m_delivery_protocols_isSet = false;
    m_delivery_protocols_isValid = false;

    m_delivery_type_isSet = false;
    m_delivery_type_isValid = false;

    m_direct_playback_urls_isSet = false;
    m_direct_playback_urls_isValid = false;

    m_encoder_isSet = false;
    m_encoder_isValid = false;

    m_hosted_page_isSet = false;
    m_hosted_page_isValid = false;

    m_hosted_page_description_isSet = false;
    m_hosted_page_description_isValid = false;

    m_hosted_page_logo_image_url_isSet = false;
    m_hosted_page_logo_image_url_isValid = false;

    m_hosted_page_sharing_icons_isSet = false;
    m_hosted_page_sharing_icons_isValid = false;

    m_hosted_page_title_isSet = false;
    m_hosted_page_title_isValid = false;

    m_hosted_page_url_isSet = false;
    m_hosted_page_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_low_latency_isSet = false;
    m_low_latency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_countdown_isSet = false;
    m_player_countdown_isValid = false;

    m_player_countdown_at_isSet = false;
    m_player_countdown_at_isValid = false;

    m_player_embed_code_isSet = false;
    m_player_embed_code_isValid = false;

    m_player_hds_playback_url_isSet = false;
    m_player_hds_playback_url_isValid = false;

    m_player_hls_playback_url_isSet = false;
    m_player_hls_playback_url_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_player_logo_image_url_isSet = false;
    m_player_logo_image_url_isValid = false;

    m_player_logo_position_isSet = false;
    m_player_logo_position_isValid = false;

    m_player_responsive_isSet = false;
    m_player_responsive_isValid = false;

    m_player_type_isSet = false;
    m_player_type_isValid = false;

    m_player_video_poster_image_url_isSet = false;
    m_player_video_poster_image_url_isValid = false;

    m_player_width_isSet = false;
    m_player_width_isValid = false;

    m_recording_isSet = false;
    m_recording_isValid = false;

    m_source_connection_information_isSet = false;
    m_source_connection_information_isValid = false;

    m_stream_source_id_isSet = false;
    m_stream_source_id_isValid = false;

    m_stream_targets_isSet = false;
    m_stream_targets_isValid = false;

    m_target_delivery_protocol_isSet = false;
    m_target_delivery_protocol_isValid = false;

    m_transcoder_type_isSet = false;
    m_transcoder_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_use_stream_source_isSet = false;
    m_use_stream_source_isValid = false;

    m_video_fallback_isSet = false;
    m_video_fallback_isValid = false;
}

void OAILive_stream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILive_stream::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_height_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio_height, json[QString("aspect_ratio_height")]);
    m_aspect_ratio_height_isSet = !json[QString("aspect_ratio_height")].isNull() && m_aspect_ratio_height_isValid;

    m_aspect_ratio_width_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio_width, json[QString("aspect_ratio_width")]);
    m_aspect_ratio_width_isSet = !json[QString("aspect_ratio_width")].isNull() && m_aspect_ratio_width_isValid;

    m_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_billing_mode, json[QString("billing_mode")]);
    m_billing_mode_isSet = !json[QString("billing_mode")].isNull() && m_billing_mode_isValid;

    m_broadcast_location_isValid = ::OpenAPI::fromJsonValue(m_broadcast_location, json[QString("broadcast_location")]);
    m_broadcast_location_isSet = !json[QString("broadcast_location")].isNull() && m_broadcast_location_isValid;

    m_closed_caption_type_isValid = ::OpenAPI::fromJsonValue(m_closed_caption_type, json[QString("closed_caption_type")]);
    m_closed_caption_type_isSet = !json[QString("closed_caption_type")].isNull() && m_closed_caption_type_isValid;

    m_connection_code_isValid = ::OpenAPI::fromJsonValue(m_connection_code, json[QString("connection_code")]);
    m_connection_code_isSet = !json[QString("connection_code")].isNull() && m_connection_code_isValid;

    m_connection_code_expires_at_isValid = ::OpenAPI::fromJsonValue(m_connection_code_expires_at, json[QString("connection_code_expires_at")]);
    m_connection_code_expires_at_isSet = !json[QString("connection_code_expires_at")].isNull() && m_connection_code_expires_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_delivery_method_isValid = ::OpenAPI::fromJsonValue(m_delivery_method, json[QString("delivery_method")]);
    m_delivery_method_isSet = !json[QString("delivery_method")].isNull() && m_delivery_method_isValid;

    m_delivery_protocol_isValid = ::OpenAPI::fromJsonValue(m_delivery_protocol, json[QString("delivery_protocol")]);
    m_delivery_protocol_isSet = !json[QString("delivery_protocol")].isNull() && m_delivery_protocol_isValid;

    m_delivery_protocols_isValid = ::OpenAPI::fromJsonValue(m_delivery_protocols, json[QString("delivery_protocols")]);
    m_delivery_protocols_isSet = !json[QString("delivery_protocols")].isNull() && m_delivery_protocols_isValid;

    m_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_type, json[QString("delivery_type")]);
    m_delivery_type_isSet = !json[QString("delivery_type")].isNull() && m_delivery_type_isValid;

    m_direct_playback_urls_isValid = ::OpenAPI::fromJsonValue(m_direct_playback_urls, json[QString("direct_playback_urls")]);
    m_direct_playback_urls_isSet = !json[QString("direct_playback_urls")].isNull() && m_direct_playback_urls_isValid;

    m_encoder_isValid = ::OpenAPI::fromJsonValue(m_encoder, json[QString("encoder")]);
    m_encoder_isSet = !json[QString("encoder")].isNull() && m_encoder_isValid;

    m_hosted_page_isValid = ::OpenAPI::fromJsonValue(m_hosted_page, json[QString("hosted_page")]);
    m_hosted_page_isSet = !json[QString("hosted_page")].isNull() && m_hosted_page_isValid;

    m_hosted_page_description_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_description, json[QString("hosted_page_description")]);
    m_hosted_page_description_isSet = !json[QString("hosted_page_description")].isNull() && m_hosted_page_description_isValid;

    m_hosted_page_logo_image_url_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_logo_image_url, json[QString("hosted_page_logo_image_url")]);
    m_hosted_page_logo_image_url_isSet = !json[QString("hosted_page_logo_image_url")].isNull() && m_hosted_page_logo_image_url_isValid;

    m_hosted_page_sharing_icons_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_sharing_icons, json[QString("hosted_page_sharing_icons")]);
    m_hosted_page_sharing_icons_isSet = !json[QString("hosted_page_sharing_icons")].isNull() && m_hosted_page_sharing_icons_isValid;

    m_hosted_page_title_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_title, json[QString("hosted_page_title")]);
    m_hosted_page_title_isSet = !json[QString("hosted_page_title")].isNull() && m_hosted_page_title_isValid;

    m_hosted_page_url_isValid = ::OpenAPI::fromJsonValue(m_hosted_page_url, json[QString("hosted_page_url")]);
    m_hosted_page_url_isSet = !json[QString("hosted_page_url")].isNull() && m_hosted_page_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_low_latency_isValid = ::OpenAPI::fromJsonValue(m_low_latency, json[QString("low_latency")]);
    m_low_latency_isSet = !json[QString("low_latency")].isNull() && m_low_latency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_player_countdown_isValid = ::OpenAPI::fromJsonValue(m_player_countdown, json[QString("player_countdown")]);
    m_player_countdown_isSet = !json[QString("player_countdown")].isNull() && m_player_countdown_isValid;

    m_player_countdown_at_isValid = ::OpenAPI::fromJsonValue(m_player_countdown_at, json[QString("player_countdown_at")]);
    m_player_countdown_at_isSet = !json[QString("player_countdown_at")].isNull() && m_player_countdown_at_isValid;

    m_player_embed_code_isValid = ::OpenAPI::fromJsonValue(m_player_embed_code, json[QString("player_embed_code")]);
    m_player_embed_code_isSet = !json[QString("player_embed_code")].isNull() && m_player_embed_code_isValid;

    m_player_hds_playback_url_isValid = ::OpenAPI::fromJsonValue(m_player_hds_playback_url, json[QString("player_hds_playback_url")]);
    m_player_hds_playback_url_isSet = !json[QString("player_hds_playback_url")].isNull() && m_player_hds_playback_url_isValid;

    m_player_hls_playback_url_isValid = ::OpenAPI::fromJsonValue(m_player_hls_playback_url, json[QString("player_hls_playback_url")]);
    m_player_hls_playback_url_isSet = !json[QString("player_hls_playback_url")].isNull() && m_player_hls_playback_url_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("player_id")]);
    m_player_id_isSet = !json[QString("player_id")].isNull() && m_player_id_isValid;

    m_player_logo_image_url_isValid = ::OpenAPI::fromJsonValue(m_player_logo_image_url, json[QString("player_logo_image_url")]);
    m_player_logo_image_url_isSet = !json[QString("player_logo_image_url")].isNull() && m_player_logo_image_url_isValid;

    m_player_logo_position_isValid = ::OpenAPI::fromJsonValue(m_player_logo_position, json[QString("player_logo_position")]);
    m_player_logo_position_isSet = !json[QString("player_logo_position")].isNull() && m_player_logo_position_isValid;

    m_player_responsive_isValid = ::OpenAPI::fromJsonValue(m_player_responsive, json[QString("player_responsive")]);
    m_player_responsive_isSet = !json[QString("player_responsive")].isNull() && m_player_responsive_isValid;

    m_player_type_isValid = ::OpenAPI::fromJsonValue(m_player_type, json[QString("player_type")]);
    m_player_type_isSet = !json[QString("player_type")].isNull() && m_player_type_isValid;

    m_player_video_poster_image_url_isValid = ::OpenAPI::fromJsonValue(m_player_video_poster_image_url, json[QString("player_video_poster_image_url")]);
    m_player_video_poster_image_url_isSet = !json[QString("player_video_poster_image_url")].isNull() && m_player_video_poster_image_url_isValid;

    m_player_width_isValid = ::OpenAPI::fromJsonValue(m_player_width, json[QString("player_width")]);
    m_player_width_isSet = !json[QString("player_width")].isNull() && m_player_width_isValid;

    m_recording_isValid = ::OpenAPI::fromJsonValue(m_recording, json[QString("recording")]);
    m_recording_isSet = !json[QString("recording")].isNull() && m_recording_isValid;

    m_source_connection_information_isValid = ::OpenAPI::fromJsonValue(m_source_connection_information, json[QString("source_connection_information")]);
    m_source_connection_information_isSet = !json[QString("source_connection_information")].isNull() && m_source_connection_information_isValid;

    m_stream_source_id_isValid = ::OpenAPI::fromJsonValue(m_stream_source_id, json[QString("stream_source_id")]);
    m_stream_source_id_isSet = !json[QString("stream_source_id")].isNull() && m_stream_source_id_isValid;

    m_stream_targets_isValid = ::OpenAPI::fromJsonValue(m_stream_targets, json[QString("stream_targets")]);
    m_stream_targets_isSet = !json[QString("stream_targets")].isNull() && m_stream_targets_isValid;

    m_target_delivery_protocol_isValid = ::OpenAPI::fromJsonValue(m_target_delivery_protocol, json[QString("target_delivery_protocol")]);
    m_target_delivery_protocol_isSet = !json[QString("target_delivery_protocol")].isNull() && m_target_delivery_protocol_isValid;

    m_transcoder_type_isValid = ::OpenAPI::fromJsonValue(m_transcoder_type, json[QString("transcoder_type")]);
    m_transcoder_type_isSet = !json[QString("transcoder_type")].isNull() && m_transcoder_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_use_stream_source_isValid = ::OpenAPI::fromJsonValue(m_use_stream_source, json[QString("use_stream_source")]);
    m_use_stream_source_isSet = !json[QString("use_stream_source")].isNull() && m_use_stream_source_isValid;

    m_video_fallback_isValid = ::OpenAPI::fromJsonValue(m_video_fallback, json[QString("video_fallback")]);
    m_video_fallback_isSet = !json[QString("video_fallback")].isNull() && m_video_fallback_isValid;
}

QString OAILive_stream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILive_stream::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_height_isSet) {
        obj.insert(QString("aspect_ratio_height"), ::OpenAPI::toJsonValue(m_aspect_ratio_height));
    }
    if (m_aspect_ratio_width_isSet) {
        obj.insert(QString("aspect_ratio_width"), ::OpenAPI::toJsonValue(m_aspect_ratio_width));
    }
    if (m_billing_mode_isSet) {
        obj.insert(QString("billing_mode"), ::OpenAPI::toJsonValue(m_billing_mode));
    }
    if (m_broadcast_location_isSet) {
        obj.insert(QString("broadcast_location"), ::OpenAPI::toJsonValue(m_broadcast_location));
    }
    if (m_closed_caption_type_isSet) {
        obj.insert(QString("closed_caption_type"), ::OpenAPI::toJsonValue(m_closed_caption_type));
    }
    if (m_connection_code_isSet) {
        obj.insert(QString("connection_code"), ::OpenAPI::toJsonValue(m_connection_code));
    }
    if (m_connection_code_expires_at_isSet) {
        obj.insert(QString("connection_code_expires_at"), ::OpenAPI::toJsonValue(m_connection_code_expires_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_delivery_method_isSet) {
        obj.insert(QString("delivery_method"), ::OpenAPI::toJsonValue(m_delivery_method));
    }
    if (m_delivery_protocol_isSet) {
        obj.insert(QString("delivery_protocol"), ::OpenAPI::toJsonValue(m_delivery_protocol));
    }
    if (m_delivery_protocols.size() > 0) {
        obj.insert(QString("delivery_protocols"), ::OpenAPI::toJsonValue(m_delivery_protocols));
    }
    if (m_delivery_type_isSet) {
        obj.insert(QString("delivery_type"), ::OpenAPI::toJsonValue(m_delivery_type));
    }
    if (m_direct_playback_urls.size() > 0) {
        obj.insert(QString("direct_playback_urls"), ::OpenAPI::toJsonValue(m_direct_playback_urls));
    }
    if (m_encoder_isSet) {
        obj.insert(QString("encoder"), ::OpenAPI::toJsonValue(m_encoder));
    }
    if (m_hosted_page_isSet) {
        obj.insert(QString("hosted_page"), ::OpenAPI::toJsonValue(m_hosted_page));
    }
    if (m_hosted_page_description_isSet) {
        obj.insert(QString("hosted_page_description"), ::OpenAPI::toJsonValue(m_hosted_page_description));
    }
    if (m_hosted_page_logo_image_url_isSet) {
        obj.insert(QString("hosted_page_logo_image_url"), ::OpenAPI::toJsonValue(m_hosted_page_logo_image_url));
    }
    if (m_hosted_page_sharing_icons_isSet) {
        obj.insert(QString("hosted_page_sharing_icons"), ::OpenAPI::toJsonValue(m_hosted_page_sharing_icons));
    }
    if (m_hosted_page_title_isSet) {
        obj.insert(QString("hosted_page_title"), ::OpenAPI::toJsonValue(m_hosted_page_title));
    }
    if (m_hosted_page_url_isSet) {
        obj.insert(QString("hosted_page_url"), ::OpenAPI::toJsonValue(m_hosted_page_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_low_latency_isSet) {
        obj.insert(QString("low_latency"), ::OpenAPI::toJsonValue(m_low_latency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_countdown_isSet) {
        obj.insert(QString("player_countdown"), ::OpenAPI::toJsonValue(m_player_countdown));
    }
    if (m_player_countdown_at_isSet) {
        obj.insert(QString("player_countdown_at"), ::OpenAPI::toJsonValue(m_player_countdown_at));
    }
    if (m_player_embed_code_isSet) {
        obj.insert(QString("player_embed_code"), ::OpenAPI::toJsonValue(m_player_embed_code));
    }
    if (m_player_hds_playback_url_isSet) {
        obj.insert(QString("player_hds_playback_url"), ::OpenAPI::toJsonValue(m_player_hds_playback_url));
    }
    if (m_player_hls_playback_url_isSet) {
        obj.insert(QString("player_hls_playback_url"), ::OpenAPI::toJsonValue(m_player_hls_playback_url));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("player_id"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_player_logo_image_url_isSet) {
        obj.insert(QString("player_logo_image_url"), ::OpenAPI::toJsonValue(m_player_logo_image_url));
    }
    if (m_player_logo_position_isSet) {
        obj.insert(QString("player_logo_position"), ::OpenAPI::toJsonValue(m_player_logo_position));
    }
    if (m_player_responsive_isSet) {
        obj.insert(QString("player_responsive"), ::OpenAPI::toJsonValue(m_player_responsive));
    }
    if (m_player_type_isSet) {
        obj.insert(QString("player_type"), ::OpenAPI::toJsonValue(m_player_type));
    }
    if (m_player_video_poster_image_url_isSet) {
        obj.insert(QString("player_video_poster_image_url"), ::OpenAPI::toJsonValue(m_player_video_poster_image_url));
    }
    if (m_player_width_isSet) {
        obj.insert(QString("player_width"), ::OpenAPI::toJsonValue(m_player_width));
    }
    if (m_recording_isSet) {
        obj.insert(QString("recording"), ::OpenAPI::toJsonValue(m_recording));
    }
    if (m_source_connection_information_isSet) {
        obj.insert(QString("source_connection_information"), ::OpenAPI::toJsonValue(m_source_connection_information));
    }
    if (m_stream_source_id_isSet) {
        obj.insert(QString("stream_source_id"), ::OpenAPI::toJsonValue(m_stream_source_id));
    }
    if (m_stream_targets.size() > 0) {
        obj.insert(QString("stream_targets"), ::OpenAPI::toJsonValue(m_stream_targets));
    }
    if (m_target_delivery_protocol_isSet) {
        obj.insert(QString("target_delivery_protocol"), ::OpenAPI::toJsonValue(m_target_delivery_protocol));
    }
    if (m_transcoder_type_isSet) {
        obj.insert(QString("transcoder_type"), ::OpenAPI::toJsonValue(m_transcoder_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_use_stream_source_isSet) {
        obj.insert(QString("use_stream_source"), ::OpenAPI::toJsonValue(m_use_stream_source));
    }
    if (m_video_fallback_isSet) {
        obj.insert(QString("video_fallback"), ::OpenAPI::toJsonValue(m_video_fallback));
    }
    return obj;
}

qint32 OAILive_stream::getAspectRatioHeight() const {
    return m_aspect_ratio_height;
}
void OAILive_stream::setAspectRatioHeight(const qint32 &aspect_ratio_height) {
    m_aspect_ratio_height = aspect_ratio_height;
    m_aspect_ratio_height_isSet = true;
}

bool OAILive_stream::is_aspect_ratio_height_Set() const{
    return m_aspect_ratio_height_isSet;
}

bool OAILive_stream::is_aspect_ratio_height_Valid() const{
    return m_aspect_ratio_height_isValid;
}

qint32 OAILive_stream::getAspectRatioWidth() const {
    return m_aspect_ratio_width;
}
void OAILive_stream::setAspectRatioWidth(const qint32 &aspect_ratio_width) {
    m_aspect_ratio_width = aspect_ratio_width;
    m_aspect_ratio_width_isSet = true;
}

bool OAILive_stream::is_aspect_ratio_width_Set() const{
    return m_aspect_ratio_width_isSet;
}

bool OAILive_stream::is_aspect_ratio_width_Valid() const{
    return m_aspect_ratio_width_isValid;
}

QString OAILive_stream::getBillingMode() const {
    return m_billing_mode;
}
void OAILive_stream::setBillingMode(const QString &billing_mode) {
    m_billing_mode = billing_mode;
    m_billing_mode_isSet = true;
}

bool OAILive_stream::is_billing_mode_Set() const{
    return m_billing_mode_isSet;
}

bool OAILive_stream::is_billing_mode_Valid() const{
    return m_billing_mode_isValid;
}

QString OAILive_stream::getBroadcastLocation() const {
    return m_broadcast_location;
}
void OAILive_stream::setBroadcastLocation(const QString &broadcast_location) {
    m_broadcast_location = broadcast_location;
    m_broadcast_location_isSet = true;
}

bool OAILive_stream::is_broadcast_location_Set() const{
    return m_broadcast_location_isSet;
}

bool OAILive_stream::is_broadcast_location_Valid() const{
    return m_broadcast_location_isValid;
}

QString OAILive_stream::getClosedCaptionType() const {
    return m_closed_caption_type;
}
void OAILive_stream::setClosedCaptionType(const QString &closed_caption_type) {
    m_closed_caption_type = closed_caption_type;
    m_closed_caption_type_isSet = true;
}

bool OAILive_stream::is_closed_caption_type_Set() const{
    return m_closed_caption_type_isSet;
}

bool OAILive_stream::is_closed_caption_type_Valid() const{
    return m_closed_caption_type_isValid;
}

QString OAILive_stream::getConnectionCode() const {
    return m_connection_code;
}
void OAILive_stream::setConnectionCode(const QString &connection_code) {
    m_connection_code = connection_code;
    m_connection_code_isSet = true;
}

bool OAILive_stream::is_connection_code_Set() const{
    return m_connection_code_isSet;
}

bool OAILive_stream::is_connection_code_Valid() const{
    return m_connection_code_isValid;
}

QDateTime OAILive_stream::getConnectionCodeExpiresAt() const {
    return m_connection_code_expires_at;
}
void OAILive_stream::setConnectionCodeExpiresAt(const QDateTime &connection_code_expires_at) {
    m_connection_code_expires_at = connection_code_expires_at;
    m_connection_code_expires_at_isSet = true;
}

bool OAILive_stream::is_connection_code_expires_at_Set() const{
    return m_connection_code_expires_at_isSet;
}

bool OAILive_stream::is_connection_code_expires_at_Valid() const{
    return m_connection_code_expires_at_isValid;
}

QDateTime OAILive_stream::getCreatedAt() const {
    return m_created_at;
}
void OAILive_stream::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILive_stream::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILive_stream::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAILive_stream::getDeliveryMethod() const {
    return m_delivery_method;
}
void OAILive_stream::setDeliveryMethod(const QString &delivery_method) {
    m_delivery_method = delivery_method;
    m_delivery_method_isSet = true;
}

bool OAILive_stream::is_delivery_method_Set() const{
    return m_delivery_method_isSet;
}

bool OAILive_stream::is_delivery_method_Valid() const{
    return m_delivery_method_isValid;
}

QString OAILive_stream::getDeliveryProtocol() const {
    return m_delivery_protocol;
}
void OAILive_stream::setDeliveryProtocol(const QString &delivery_protocol) {
    m_delivery_protocol = delivery_protocol;
    m_delivery_protocol_isSet = true;
}

bool OAILive_stream::is_delivery_protocol_Set() const{
    return m_delivery_protocol_isSet;
}

bool OAILive_stream::is_delivery_protocol_Valid() const{
    return m_delivery_protocol_isValid;
}

QList<QString> OAILive_stream::getDeliveryProtocols() const {
    return m_delivery_protocols;
}
void OAILive_stream::setDeliveryProtocols(const QList<QString> &delivery_protocols) {
    m_delivery_protocols = delivery_protocols;
    m_delivery_protocols_isSet = true;
}

bool OAILive_stream::is_delivery_protocols_Set() const{
    return m_delivery_protocols_isSet;
}

bool OAILive_stream::is_delivery_protocols_Valid() const{
    return m_delivery_protocols_isValid;
}

QString OAILive_stream::getDeliveryType() const {
    return m_delivery_type;
}
void OAILive_stream::setDeliveryType(const QString &delivery_type) {
    m_delivery_type = delivery_type;
    m_delivery_type_isSet = true;
}

bool OAILive_stream::is_delivery_type_Set() const{
    return m_delivery_type_isSet;
}

bool OAILive_stream::is_delivery_type_Valid() const{
    return m_delivery_type_isValid;
}

QList<OAIPlayback_url> OAILive_stream::getDirectPlaybackUrls() const {
    return m_direct_playback_urls;
}
void OAILive_stream::setDirectPlaybackUrls(const QList<OAIPlayback_url> &direct_playback_urls) {
    m_direct_playback_urls = direct_playback_urls;
    m_direct_playback_urls_isSet = true;
}

bool OAILive_stream::is_direct_playback_urls_Set() const{
    return m_direct_playback_urls_isSet;
}

bool OAILive_stream::is_direct_playback_urls_Valid() const{
    return m_direct_playback_urls_isValid;
}

QString OAILive_stream::getEncoder() const {
    return m_encoder;
}
void OAILive_stream::setEncoder(const QString &encoder) {
    m_encoder = encoder;
    m_encoder_isSet = true;
}

bool OAILive_stream::is_encoder_Set() const{
    return m_encoder_isSet;
}

bool OAILive_stream::is_encoder_Valid() const{
    return m_encoder_isValid;
}

bool OAILive_stream::isHostedPage() const {
    return m_hosted_page;
}
void OAILive_stream::setHostedPage(const bool &hosted_page) {
    m_hosted_page = hosted_page;
    m_hosted_page_isSet = true;
}

bool OAILive_stream::is_hosted_page_Set() const{
    return m_hosted_page_isSet;
}

bool OAILive_stream::is_hosted_page_Valid() const{
    return m_hosted_page_isValid;
}

QString OAILive_stream::getHostedPageDescription() const {
    return m_hosted_page_description;
}
void OAILive_stream::setHostedPageDescription(const QString &hosted_page_description) {
    m_hosted_page_description = hosted_page_description;
    m_hosted_page_description_isSet = true;
}

bool OAILive_stream::is_hosted_page_description_Set() const{
    return m_hosted_page_description_isSet;
}

bool OAILive_stream::is_hosted_page_description_Valid() const{
    return m_hosted_page_description_isValid;
}

QString OAILive_stream::getHostedPageLogoImageUrl() const {
    return m_hosted_page_logo_image_url;
}
void OAILive_stream::setHostedPageLogoImageUrl(const QString &hosted_page_logo_image_url) {
    m_hosted_page_logo_image_url = hosted_page_logo_image_url;
    m_hosted_page_logo_image_url_isSet = true;
}

bool OAILive_stream::is_hosted_page_logo_image_url_Set() const{
    return m_hosted_page_logo_image_url_isSet;
}

bool OAILive_stream::is_hosted_page_logo_image_url_Valid() const{
    return m_hosted_page_logo_image_url_isValid;
}

bool OAILive_stream::isHostedPageSharingIcons() const {
    return m_hosted_page_sharing_icons;
}
void OAILive_stream::setHostedPageSharingIcons(const bool &hosted_page_sharing_icons) {
    m_hosted_page_sharing_icons = hosted_page_sharing_icons;
    m_hosted_page_sharing_icons_isSet = true;
}

bool OAILive_stream::is_hosted_page_sharing_icons_Set() const{
    return m_hosted_page_sharing_icons_isSet;
}

bool OAILive_stream::is_hosted_page_sharing_icons_Valid() const{
    return m_hosted_page_sharing_icons_isValid;
}

QString OAILive_stream::getHostedPageTitle() const {
    return m_hosted_page_title;
}
void OAILive_stream::setHostedPageTitle(const QString &hosted_page_title) {
    m_hosted_page_title = hosted_page_title;
    m_hosted_page_title_isSet = true;
}

bool OAILive_stream::is_hosted_page_title_Set() const{
    return m_hosted_page_title_isSet;
}

bool OAILive_stream::is_hosted_page_title_Valid() const{
    return m_hosted_page_title_isValid;
}

QString OAILive_stream::getHostedPageUrl() const {
    return m_hosted_page_url;
}
void OAILive_stream::setHostedPageUrl(const QString &hosted_page_url) {
    m_hosted_page_url = hosted_page_url;
    m_hosted_page_url_isSet = true;
}

bool OAILive_stream::is_hosted_page_url_Set() const{
    return m_hosted_page_url_isSet;
}

bool OAILive_stream::is_hosted_page_url_Valid() const{
    return m_hosted_page_url_isValid;
}

QString OAILive_stream::getId() const {
    return m_id;
}
void OAILive_stream::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILive_stream::is_id_Set() const{
    return m_id_isSet;
}

bool OAILive_stream::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILive_stream::isLowLatency() const {
    return m_low_latency;
}
void OAILive_stream::setLowLatency(const bool &low_latency) {
    m_low_latency = low_latency;
    m_low_latency_isSet = true;
}

bool OAILive_stream::is_low_latency_Set() const{
    return m_low_latency_isSet;
}

bool OAILive_stream::is_low_latency_Valid() const{
    return m_low_latency_isValid;
}

QString OAILive_stream::getName() const {
    return m_name;
}
void OAILive_stream::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILive_stream::is_name_Set() const{
    return m_name_isSet;
}

bool OAILive_stream::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILive_stream::isPlayerCountdown() const {
    return m_player_countdown;
}
void OAILive_stream::setPlayerCountdown(const bool &player_countdown) {
    m_player_countdown = player_countdown;
    m_player_countdown_isSet = true;
}

bool OAILive_stream::is_player_countdown_Set() const{
    return m_player_countdown_isSet;
}

bool OAILive_stream::is_player_countdown_Valid() const{
    return m_player_countdown_isValid;
}

QDateTime OAILive_stream::getPlayerCountdownAt() const {
    return m_player_countdown_at;
}
void OAILive_stream::setPlayerCountdownAt(const QDateTime &player_countdown_at) {
    m_player_countdown_at = player_countdown_at;
    m_player_countdown_at_isSet = true;
}

bool OAILive_stream::is_player_countdown_at_Set() const{
    return m_player_countdown_at_isSet;
}

bool OAILive_stream::is_player_countdown_at_Valid() const{
    return m_player_countdown_at_isValid;
}

QString OAILive_stream::getPlayerEmbedCode() const {
    return m_player_embed_code;
}
void OAILive_stream::setPlayerEmbedCode(const QString &player_embed_code) {
    m_player_embed_code = player_embed_code;
    m_player_embed_code_isSet = true;
}

bool OAILive_stream::is_player_embed_code_Set() const{
    return m_player_embed_code_isSet;
}

bool OAILive_stream::is_player_embed_code_Valid() const{
    return m_player_embed_code_isValid;
}

QString OAILive_stream::getPlayerHdsPlaybackUrl() const {
    return m_player_hds_playback_url;
}
void OAILive_stream::setPlayerHdsPlaybackUrl(const QString &player_hds_playback_url) {
    m_player_hds_playback_url = player_hds_playback_url;
    m_player_hds_playback_url_isSet = true;
}

bool OAILive_stream::is_player_hds_playback_url_Set() const{
    return m_player_hds_playback_url_isSet;
}

bool OAILive_stream::is_player_hds_playback_url_Valid() const{
    return m_player_hds_playback_url_isValid;
}

QString OAILive_stream::getPlayerHlsPlaybackUrl() const {
    return m_player_hls_playback_url;
}
void OAILive_stream::setPlayerHlsPlaybackUrl(const QString &player_hls_playback_url) {
    m_player_hls_playback_url = player_hls_playback_url;
    m_player_hls_playback_url_isSet = true;
}

bool OAILive_stream::is_player_hls_playback_url_Set() const{
    return m_player_hls_playback_url_isSet;
}

bool OAILive_stream::is_player_hls_playback_url_Valid() const{
    return m_player_hls_playback_url_isValid;
}

QString OAILive_stream::getPlayerId() const {
    return m_player_id;
}
void OAILive_stream::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAILive_stream::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAILive_stream::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAILive_stream::getPlayerLogoImageUrl() const {
    return m_player_logo_image_url;
}
void OAILive_stream::setPlayerLogoImageUrl(const QString &player_logo_image_url) {
    m_player_logo_image_url = player_logo_image_url;
    m_player_logo_image_url_isSet = true;
}

bool OAILive_stream::is_player_logo_image_url_Set() const{
    return m_player_logo_image_url_isSet;
}

bool OAILive_stream::is_player_logo_image_url_Valid() const{
    return m_player_logo_image_url_isValid;
}

QString OAILive_stream::getPlayerLogoPosition() const {
    return m_player_logo_position;
}
void OAILive_stream::setPlayerLogoPosition(const QString &player_logo_position) {
    m_player_logo_position = player_logo_position;
    m_player_logo_position_isSet = true;
}

bool OAILive_stream::is_player_logo_position_Set() const{
    return m_player_logo_position_isSet;
}

bool OAILive_stream::is_player_logo_position_Valid() const{
    return m_player_logo_position_isValid;
}

bool OAILive_stream::isPlayerResponsive() const {
    return m_player_responsive;
}
void OAILive_stream::setPlayerResponsive(const bool &player_responsive) {
    m_player_responsive = player_responsive;
    m_player_responsive_isSet = true;
}

bool OAILive_stream::is_player_responsive_Set() const{
    return m_player_responsive_isSet;
}

bool OAILive_stream::is_player_responsive_Valid() const{
    return m_player_responsive_isValid;
}

QString OAILive_stream::getPlayerType() const {
    return m_player_type;
}
void OAILive_stream::setPlayerType(const QString &player_type) {
    m_player_type = player_type;
    m_player_type_isSet = true;
}

bool OAILive_stream::is_player_type_Set() const{
    return m_player_type_isSet;
}

bool OAILive_stream::is_player_type_Valid() const{
    return m_player_type_isValid;
}

QString OAILive_stream::getPlayerVideoPosterImageUrl() const {
    return m_player_video_poster_image_url;
}
void OAILive_stream::setPlayerVideoPosterImageUrl(const QString &player_video_poster_image_url) {
    m_player_video_poster_image_url = player_video_poster_image_url;
    m_player_video_poster_image_url_isSet = true;
}

bool OAILive_stream::is_player_video_poster_image_url_Set() const{
    return m_player_video_poster_image_url_isSet;
}

bool OAILive_stream::is_player_video_poster_image_url_Valid() const{
    return m_player_video_poster_image_url_isValid;
}

qint32 OAILive_stream::getPlayerWidth() const {
    return m_player_width;
}
void OAILive_stream::setPlayerWidth(const qint32 &player_width) {
    m_player_width = player_width;
    m_player_width_isSet = true;
}

bool OAILive_stream::is_player_width_Set() const{
    return m_player_width_isSet;
}

bool OAILive_stream::is_player_width_Valid() const{
    return m_player_width_isValid;
}

bool OAILive_stream::isRecording() const {
    return m_recording;
}
void OAILive_stream::setRecording(const bool &recording) {
    m_recording = recording;
    m_recording_isSet = true;
}

bool OAILive_stream::is_recording_Set() const{
    return m_recording_isSet;
}

bool OAILive_stream::is_recording_Valid() const{
    return m_recording_isValid;
}

OAIObject OAILive_stream::getSourceConnectionInformation() const {
    return m_source_connection_information;
}
void OAILive_stream::setSourceConnectionInformation(const OAIObject &source_connection_information) {
    m_source_connection_information = source_connection_information;
    m_source_connection_information_isSet = true;
}

bool OAILive_stream::is_source_connection_information_Set() const{
    return m_source_connection_information_isSet;
}

bool OAILive_stream::is_source_connection_information_Valid() const{
    return m_source_connection_information_isValid;
}

QString OAILive_stream::getStreamSourceId() const {
    return m_stream_source_id;
}
void OAILive_stream::setStreamSourceId(const QString &stream_source_id) {
    m_stream_source_id = stream_source_id;
    m_stream_source_id_isSet = true;
}

bool OAILive_stream::is_stream_source_id_Set() const{
    return m_stream_source_id_isSet;
}

bool OAILive_stream::is_stream_source_id_Valid() const{
    return m_stream_source_id_isValid;
}

QList<OAIStream_targets_2> OAILive_stream::getStreamTargets() const {
    return m_stream_targets;
}
void OAILive_stream::setStreamTargets(const QList<OAIStream_targets_2> &stream_targets) {
    m_stream_targets = stream_targets;
    m_stream_targets_isSet = true;
}

bool OAILive_stream::is_stream_targets_Set() const{
    return m_stream_targets_isSet;
}

bool OAILive_stream::is_stream_targets_Valid() const{
    return m_stream_targets_isValid;
}

QString OAILive_stream::getTargetDeliveryProtocol() const {
    return m_target_delivery_protocol;
}
void OAILive_stream::setTargetDeliveryProtocol(const QString &target_delivery_protocol) {
    m_target_delivery_protocol = target_delivery_protocol;
    m_target_delivery_protocol_isSet = true;
}

bool OAILive_stream::is_target_delivery_protocol_Set() const{
    return m_target_delivery_protocol_isSet;
}

bool OAILive_stream::is_target_delivery_protocol_Valid() const{
    return m_target_delivery_protocol_isValid;
}

QString OAILive_stream::getTranscoderType() const {
    return m_transcoder_type;
}
void OAILive_stream::setTranscoderType(const QString &transcoder_type) {
    m_transcoder_type = transcoder_type;
    m_transcoder_type_isSet = true;
}

bool OAILive_stream::is_transcoder_type_Set() const{
    return m_transcoder_type_isSet;
}

bool OAILive_stream::is_transcoder_type_Valid() const{
    return m_transcoder_type_isValid;
}

QDateTime OAILive_stream::getUpdatedAt() const {
    return m_updated_at;
}
void OAILive_stream::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAILive_stream::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAILive_stream::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAILive_stream::isUseStreamSource() const {
    return m_use_stream_source;
}
void OAILive_stream::setUseStreamSource(const bool &use_stream_source) {
    m_use_stream_source = use_stream_source;
    m_use_stream_source_isSet = true;
}

bool OAILive_stream::is_use_stream_source_Set() const{
    return m_use_stream_source_isSet;
}

bool OAILive_stream::is_use_stream_source_Valid() const{
    return m_use_stream_source_isValid;
}

bool OAILive_stream::isVideoFallback() const {
    return m_video_fallback;
}
void OAILive_stream::setVideoFallback(const bool &video_fallback) {
    m_video_fallback = video_fallback;
    m_video_fallback_isSet = true;
}

bool OAILive_stream::is_video_fallback_Set() const{
    return m_video_fallback_isSet;
}

bool OAILive_stream::is_video_fallback_Valid() const{
    return m_video_fallback_isValid;
}

bool OAILive_stream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_ratio_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcast_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_caption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_code_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_playback_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_logo_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_sharing_icons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_countdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_countdown_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_embed_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_hds_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_hls_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_logo_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_logo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_responsive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_video_poster_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connection_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_delivery_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_stream_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILive_stream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
