/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaybackUrl from './PlaybackUrl';
import StreamTargets2 from './StreamTargets2';

/**
 * The LiveStream model module.
 * @module model/LiveStream
 * @version 1
 */
class LiveStream {
    /**
     * Constructs a new <code>LiveStream</code>.
     * @alias module:model/LiveStream
     */
    constructor() { 
        
        LiveStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveStream} obj Optional instance to populate.
     * @return {module:model/LiveStream} The populated <code>LiveStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveStream();

            if (data.hasOwnProperty('aspect_ratio_height')) {
                obj['aspect_ratio_height'] = ApiClient.convertToType(data['aspect_ratio_height'], 'Number');
            }
            if (data.hasOwnProperty('aspect_ratio_width')) {
                obj['aspect_ratio_width'] = ApiClient.convertToType(data['aspect_ratio_width'], 'Number');
            }
            if (data.hasOwnProperty('billing_mode')) {
                obj['billing_mode'] = ApiClient.convertToType(data['billing_mode'], 'String');
            }
            if (data.hasOwnProperty('broadcast_location')) {
                obj['broadcast_location'] = ApiClient.convertToType(data['broadcast_location'], 'String');
            }
            if (data.hasOwnProperty('closed_caption_type')) {
                obj['closed_caption_type'] = ApiClient.convertToType(data['closed_caption_type'], 'String');
            }
            if (data.hasOwnProperty('connection_code')) {
                obj['connection_code'] = ApiClient.convertToType(data['connection_code'], 'String');
            }
            if (data.hasOwnProperty('connection_code_expires_at')) {
                obj['connection_code_expires_at'] = ApiClient.convertToType(data['connection_code_expires_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('delivery_method')) {
                obj['delivery_method'] = ApiClient.convertToType(data['delivery_method'], 'String');
            }
            if (data.hasOwnProperty('delivery_protocol')) {
                obj['delivery_protocol'] = ApiClient.convertToType(data['delivery_protocol'], 'String');
            }
            if (data.hasOwnProperty('delivery_protocols')) {
                obj['delivery_protocols'] = ApiClient.convertToType(data['delivery_protocols'], ['String']);
            }
            if (data.hasOwnProperty('delivery_type')) {
                obj['delivery_type'] = ApiClient.convertToType(data['delivery_type'], 'String');
            }
            if (data.hasOwnProperty('direct_playback_urls')) {
                obj['direct_playback_urls'] = ApiClient.convertToType(data['direct_playback_urls'], [PlaybackUrl]);
            }
            if (data.hasOwnProperty('encoder')) {
                obj['encoder'] = ApiClient.convertToType(data['encoder'], 'String');
            }
            if (data.hasOwnProperty('hosted_page')) {
                obj['hosted_page'] = ApiClient.convertToType(data['hosted_page'], 'Boolean');
            }
            if (data.hasOwnProperty('hosted_page_description')) {
                obj['hosted_page_description'] = ApiClient.convertToType(data['hosted_page_description'], 'String');
            }
            if (data.hasOwnProperty('hosted_page_logo_image_url')) {
                obj['hosted_page_logo_image_url'] = ApiClient.convertToType(data['hosted_page_logo_image_url'], 'String');
            }
            if (data.hasOwnProperty('hosted_page_sharing_icons')) {
                obj['hosted_page_sharing_icons'] = ApiClient.convertToType(data['hosted_page_sharing_icons'], 'Boolean');
            }
            if (data.hasOwnProperty('hosted_page_title')) {
                obj['hosted_page_title'] = ApiClient.convertToType(data['hosted_page_title'], 'String');
            }
            if (data.hasOwnProperty('hosted_page_url')) {
                obj['hosted_page_url'] = ApiClient.convertToType(data['hosted_page_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('low_latency')) {
                obj['low_latency'] = ApiClient.convertToType(data['low_latency'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('player_countdown')) {
                obj['player_countdown'] = ApiClient.convertToType(data['player_countdown'], 'Boolean');
            }
            if (data.hasOwnProperty('player_countdown_at')) {
                obj['player_countdown_at'] = ApiClient.convertToType(data['player_countdown_at'], 'Date');
            }
            if (data.hasOwnProperty('player_embed_code')) {
                obj['player_embed_code'] = ApiClient.convertToType(data['player_embed_code'], 'String');
            }
            if (data.hasOwnProperty('player_hds_playback_url')) {
                obj['player_hds_playback_url'] = ApiClient.convertToType(data['player_hds_playback_url'], 'String');
            }
            if (data.hasOwnProperty('player_hls_playback_url')) {
                obj['player_hls_playback_url'] = ApiClient.convertToType(data['player_hls_playback_url'], 'String');
            }
            if (data.hasOwnProperty('player_id')) {
                obj['player_id'] = ApiClient.convertToType(data['player_id'], 'String');
            }
            if (data.hasOwnProperty('player_logo_image_url')) {
                obj['player_logo_image_url'] = ApiClient.convertToType(data['player_logo_image_url'], 'String');
            }
            if (data.hasOwnProperty('player_logo_position')) {
                obj['player_logo_position'] = ApiClient.convertToType(data['player_logo_position'], 'String');
            }
            if (data.hasOwnProperty('player_responsive')) {
                obj['player_responsive'] = ApiClient.convertToType(data['player_responsive'], 'Boolean');
            }
            if (data.hasOwnProperty('player_type')) {
                obj['player_type'] = ApiClient.convertToType(data['player_type'], 'String');
            }
            if (data.hasOwnProperty('player_video_poster_image_url')) {
                obj['player_video_poster_image_url'] = ApiClient.convertToType(data['player_video_poster_image_url'], 'String');
            }
            if (data.hasOwnProperty('player_width')) {
                obj['player_width'] = ApiClient.convertToType(data['player_width'], 'Number');
            }
            if (data.hasOwnProperty('recording')) {
                obj['recording'] = ApiClient.convertToType(data['recording'], 'Boolean');
            }
            if (data.hasOwnProperty('source_connection_information')) {
                obj['source_connection_information'] = ApiClient.convertToType(data['source_connection_information'], Object);
            }
            if (data.hasOwnProperty('stream_source_id')) {
                obj['stream_source_id'] = ApiClient.convertToType(data['stream_source_id'], 'String');
            }
            if (data.hasOwnProperty('stream_targets')) {
                obj['stream_targets'] = ApiClient.convertToType(data['stream_targets'], [StreamTargets2]);
            }
            if (data.hasOwnProperty('target_delivery_protocol')) {
                obj['target_delivery_protocol'] = ApiClient.convertToType(data['target_delivery_protocol'], 'String');
            }
            if (data.hasOwnProperty('transcoder_type')) {
                obj['transcoder_type'] = ApiClient.convertToType(data['transcoder_type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('use_stream_source')) {
                obj['use_stream_source'] = ApiClient.convertToType(data['use_stream_source'], 'Boolean');
            }
            if (data.hasOwnProperty('video_fallback')) {
                obj['video_fallback'] = ApiClient.convertToType(data['video_fallback'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billing_mode'] && !(typeof data['billing_mode'] === 'string' || data['billing_mode'] instanceof String)) {
            throw new Error("Expected the field `billing_mode` to be a primitive type in the JSON string but got " + data['billing_mode']);
        }
        // ensure the json data is a string
        if (data['broadcast_location'] && !(typeof data['broadcast_location'] === 'string' || data['broadcast_location'] instanceof String)) {
            throw new Error("Expected the field `broadcast_location` to be a primitive type in the JSON string but got " + data['broadcast_location']);
        }
        // ensure the json data is a string
        if (data['closed_caption_type'] && !(typeof data['closed_caption_type'] === 'string' || data['closed_caption_type'] instanceof String)) {
            throw new Error("Expected the field `closed_caption_type` to be a primitive type in the JSON string but got " + data['closed_caption_type']);
        }
        // ensure the json data is a string
        if (data['connection_code'] && !(typeof data['connection_code'] === 'string' || data['connection_code'] instanceof String)) {
            throw new Error("Expected the field `connection_code` to be a primitive type in the JSON string but got " + data['connection_code']);
        }
        // ensure the json data is a string
        if (data['delivery_method'] && !(typeof data['delivery_method'] === 'string' || data['delivery_method'] instanceof String)) {
            throw new Error("Expected the field `delivery_method` to be a primitive type in the JSON string but got " + data['delivery_method']);
        }
        // ensure the json data is a string
        if (data['delivery_protocol'] && !(typeof data['delivery_protocol'] === 'string' || data['delivery_protocol'] instanceof String)) {
            throw new Error("Expected the field `delivery_protocol` to be a primitive type in the JSON string but got " + data['delivery_protocol']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['delivery_protocols'])) {
            throw new Error("Expected the field `delivery_protocols` to be an array in the JSON data but got " + data['delivery_protocols']);
        }
        // ensure the json data is a string
        if (data['delivery_type'] && !(typeof data['delivery_type'] === 'string' || data['delivery_type'] instanceof String)) {
            throw new Error("Expected the field `delivery_type` to be a primitive type in the JSON string but got " + data['delivery_type']);
        }
        if (data['direct_playback_urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['direct_playback_urls'])) {
                throw new Error("Expected the field `direct_playback_urls` to be an array in the JSON data but got " + data['direct_playback_urls']);
            }
            // validate the optional field `direct_playback_urls` (array)
            for (const item of data['direct_playback_urls']) {
                PlaybackUrl.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encoder'] && !(typeof data['encoder'] === 'string' || data['encoder'] instanceof String)) {
            throw new Error("Expected the field `encoder` to be a primitive type in the JSON string but got " + data['encoder']);
        }
        // ensure the json data is a string
        if (data['hosted_page_description'] && !(typeof data['hosted_page_description'] === 'string' || data['hosted_page_description'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_description` to be a primitive type in the JSON string but got " + data['hosted_page_description']);
        }
        // ensure the json data is a string
        if (data['hosted_page_logo_image_url'] && !(typeof data['hosted_page_logo_image_url'] === 'string' || data['hosted_page_logo_image_url'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_logo_image_url` to be a primitive type in the JSON string but got " + data['hosted_page_logo_image_url']);
        }
        // ensure the json data is a string
        if (data['hosted_page_title'] && !(typeof data['hosted_page_title'] === 'string' || data['hosted_page_title'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_title` to be a primitive type in the JSON string but got " + data['hosted_page_title']);
        }
        // ensure the json data is a string
        if (data['hosted_page_url'] && !(typeof data['hosted_page_url'] === 'string' || data['hosted_page_url'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_url` to be a primitive type in the JSON string but got " + data['hosted_page_url']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['player_embed_code'] && !(typeof data['player_embed_code'] === 'string' || data['player_embed_code'] instanceof String)) {
            throw new Error("Expected the field `player_embed_code` to be a primitive type in the JSON string but got " + data['player_embed_code']);
        }
        // ensure the json data is a string
        if (data['player_hds_playback_url'] && !(typeof data['player_hds_playback_url'] === 'string' || data['player_hds_playback_url'] instanceof String)) {
            throw new Error("Expected the field `player_hds_playback_url` to be a primitive type in the JSON string but got " + data['player_hds_playback_url']);
        }
        // ensure the json data is a string
        if (data['player_hls_playback_url'] && !(typeof data['player_hls_playback_url'] === 'string' || data['player_hls_playback_url'] instanceof String)) {
            throw new Error("Expected the field `player_hls_playback_url` to be a primitive type in the JSON string but got " + data['player_hls_playback_url']);
        }
        // ensure the json data is a string
        if (data['player_id'] && !(typeof data['player_id'] === 'string' || data['player_id'] instanceof String)) {
            throw new Error("Expected the field `player_id` to be a primitive type in the JSON string but got " + data['player_id']);
        }
        // ensure the json data is a string
        if (data['player_logo_image_url'] && !(typeof data['player_logo_image_url'] === 'string' || data['player_logo_image_url'] instanceof String)) {
            throw new Error("Expected the field `player_logo_image_url` to be a primitive type in the JSON string but got " + data['player_logo_image_url']);
        }
        // ensure the json data is a string
        if (data['player_logo_position'] && !(typeof data['player_logo_position'] === 'string' || data['player_logo_position'] instanceof String)) {
            throw new Error("Expected the field `player_logo_position` to be a primitive type in the JSON string but got " + data['player_logo_position']);
        }
        // ensure the json data is a string
        if (data['player_type'] && !(typeof data['player_type'] === 'string' || data['player_type'] instanceof String)) {
            throw new Error("Expected the field `player_type` to be a primitive type in the JSON string but got " + data['player_type']);
        }
        // ensure the json data is a string
        if (data['player_video_poster_image_url'] && !(typeof data['player_video_poster_image_url'] === 'string' || data['player_video_poster_image_url'] instanceof String)) {
            throw new Error("Expected the field `player_video_poster_image_url` to be a primitive type in the JSON string but got " + data['player_video_poster_image_url']);
        }
        // ensure the json data is a string
        if (data['stream_source_id'] && !(typeof data['stream_source_id'] === 'string' || data['stream_source_id'] instanceof String)) {
            throw new Error("Expected the field `stream_source_id` to be a primitive type in the JSON string but got " + data['stream_source_id']);
        }
        if (data['stream_targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stream_targets'])) {
                throw new Error("Expected the field `stream_targets` to be an array in the JSON data but got " + data['stream_targets']);
            }
            // validate the optional field `stream_targets` (array)
            for (const item of data['stream_targets']) {
                StreamTargets2.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['target_delivery_protocol'] && !(typeof data['target_delivery_protocol'] === 'string' || data['target_delivery_protocol'] instanceof String)) {
            throw new Error("Expected the field `target_delivery_protocol` to be a primitive type in the JSON string but got " + data['target_delivery_protocol']);
        }
        // ensure the json data is a string
        if (data['transcoder_type'] && !(typeof data['transcoder_type'] === 'string' || data['transcoder_type'] instanceof String)) {
            throw new Error("Expected the field `transcoder_type` to be a primitive type in the JSON string but got " + data['transcoder_type']);
        }

        return true;
    }


}



/**
 * The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
 * @member {Number} aspect_ratio_height
 */
LiveStream.prototype['aspect_ratio_height'] = undefined;

/**
 * The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
 * @member {Number} aspect_ratio_width
 */
LiveStream.prototype['aspect_ratio_width'] = undefined;

/**
 * The billing mode for the stream. The default is <strong>pay_as_you_go</strong>.
 * @member {module:model/LiveStream.BillingModeEnum} billing_mode
 */
LiveStream.prototype['billing_mode'] = undefined;

/**
 * The location of your stream. Choose a location as close as possible to your video source.
 * @member {module:model/LiveStream.BroadcastLocationEnum} broadcast_location
 */
LiveStream.prototype['broadcast_location'] = undefined;

/**
 * The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.
 * @member {module:model/LiveStream.ClosedCaptionTypeEnum} closed_caption_type
 */
LiveStream.prototype['closed_caption_type'] = undefined;

/**
 * A six-character, alphanumeric string that allows certain encoders, including Wowza Streaming Engine and the Wowza GoCoder app, to connect with Wowza Streaming Cloud. The code can be used once and expires 24 hours after it's created.
 * @member {String} connection_code
 */
LiveStream.prototype['connection_code'] = undefined;

/**
 * The date and time that the <em>connection_code</em> expires.
 * @member {Date} connection_code_expires_at
 */
LiveStream.prototype['connection_code_expires_at'] = undefined;

/**
 * The date and time that the live stream was created.
 * @member {Date} created_at
 */
LiveStream.prototype['created_at'] = undefined;

/**
 * The type of connection between the video source and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.
 * @member {module:model/LiveStream.DeliveryMethodEnum} delivery_method
 */
LiveStream.prototype['delivery_method'] = undefined;

/**
 * <strong>The <em>delivery_protocol</em> parameter is deprecated. To set the delivery protocol of a transcoder's target, use <em>target_delivery_protocol</em>.</strong>
 * @member {module:model/LiveStream.DeliveryProtocolEnum} delivery_protocol
 */
LiveStream.prototype['delivery_protocol'] = undefined;

/**
 * An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.
 * @member {Array.<String>} delivery_protocols
 */
LiveStream.prototype['delivery_protocols'] = undefined;

/**
 * For streams whose <em>encoder</em> is <strong>wowza_streaming_engine</strong>. The default is <strong>multi-bitrate</strong>, which means you're sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value <strong>single-bitrate</strong> means you're sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.
 * @member {module:model/LiveStream.DeliveryTypeEnum} delivery_type
 */
LiveStream.prototype['delivery_type'] = undefined;

/**
 * An array of direct playback URLs for the live stream's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.
 * @member {Array.<module:model/PlaybackUrl>} direct_playback_urls
 */
LiveStream.prototype['direct_playback_urls'] = undefined;

/**
 * The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.
 * @member {module:model/LiveStream.EncoderEnum} encoder
 */
LiveStream.prototype['encoder'] = undefined;

/**
 * A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.
 * @member {Boolean} hosted_page
 */
LiveStream.prototype['hosted_page'] = undefined;

/**
 * A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.
 * @member {String} hosted_page_description
 */
LiveStream.prototype['hosted_page_description'] = undefined;

/**
 * The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.
 * @member {String} hosted_page_logo_image_url
 */
LiveStream.prototype['hosted_page_logo_image_url'] = undefined;

/**
 * Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.
 * @member {Boolean} hosted_page_sharing_icons
 */
LiveStream.prototype['hosted_page_sharing_icons'] = undefined;

/**
 * A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.
 * @member {String} hosted_page_title
 */
LiveStream.prototype['hosted_page_title'] = undefined;

/**
 * The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.
 * @member {String} hosted_page_url
 */
LiveStream.prototype['hosted_page_url'] = undefined;

/**
 * The unique alphanumeric string that identifies the live stream.
 * @member {String} id
 */
LiveStream.prototype['id'] = undefined;

/**
 * For streams whose <em>target_delivery_protocol</em> is <strong>hls-https</strong>. If <strong>true</strong>, turns off incoming and sort packet buffers and delivers smaller video packets to the player, which can reduce latency as long as networks can handle the increased overhead. The default is <strong>false</strong>. <br /><br />This parameter only affects streams played over a target whose <em>type</em> is <strong>WowzaStreamTarget</strong> and whose <em>provider</em> is <strong>akamai_cupertino</strong>. It does <em>not</em> reduce latency in streams played over a hosted page and is unrelated to Wowza ultra low latency stream targets.
 * @member {Boolean} low_latency
 */
LiveStream.prototype['low_latency'] = undefined;

/**
 * A descriptive name for the live stream. Maximum 200 characters.
 * @member {String} name
 */
LiveStream.prototype['name'] = undefined;

/**
 * A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.
 * @member {Boolean} player_countdown
 */
LiveStream.prototype['player_countdown'] = undefined;

/**
 * The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.
 * @member {Date} player_countdown_at
 */
LiveStream.prototype['player_countdown_at'] = undefined;

/**
 * The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.
 * @member {String} player_embed_code
 */
LiveStream.prototype['player_embed_code'] = undefined;

/**
 * The address that can be used to configure playback of the stream using the Adobe HDS protocol.
 * @member {String} player_hds_playback_url
 */
LiveStream.prototype['player_hds_playback_url'] = undefined;

/**
 * The address that can be used to configure playback of the stream using the Apple HLS protocol.
 * @member {String} player_hls_playback_url
 */
LiveStream.prototype['player_hls_playback_url'] = undefined;

/**
 * The unique alphanumeric string that identifies the player.
 * @member {String} player_id
 */
LiveStream.prototype['player_id'] = undefined;

/**
 * The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.
 * @member {String} player_logo_image_url
 */
LiveStream.prototype['player_logo_image_url'] = undefined;

/**
 * The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.
 * @member {module:model/LiveStream.PlayerLogoPositionEnum} player_logo_position
 */
LiveStream.prototype['player_logo_position'] = undefined;

/**
 * A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.
 * @member {Boolean} player_responsive
 */
LiveStream.prototype['player_responsive'] = undefined;

/**
 * The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.
 * @member {String} player_type
 */
LiveStream.prototype['player_type'] = undefined;

/**
 * The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.
 * @member {String} player_video_poster_image_url
 */
LiveStream.prototype['player_video_poster_image_url'] = undefined;

/**
 * The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.
 * @member {Number} player_width
 */
LiveStream.prototype['player_width'] = undefined;

/**
 * If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.
 * @member {Boolean} recording
 */
LiveStream.prototype['recording'] = undefined;

/**
 * Details that you can use to manually configure and connect a video source to the live stream.
 * @member {Object} source_connection_information
 */
LiveStream.prototype['source_connection_information'] = undefined;

/**
 * The unique alphanumeric string that identifies the stream source, if a stream source is used.
 * @member {String} stream_source_id
 */
LiveStream.prototype['stream_source_id'] = undefined;

/**
 * An array of unique alphanumeric strings that identify the stream targets used by the live stream.
 * @member {Array.<module:model/StreamTargets2>} stream_targets
 */
LiveStream.prototype['stream_targets'] = undefined;

/**
 * The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.
 * @member {module:model/LiveStream.TargetDeliveryProtocolEnum} target_delivery_protocol
 */
LiveStream.prototype['target_delivery_protocol'] = undefined;

/**
 * The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.
 * @member {module:model/LiveStream.TranscoderTypeEnum} transcoder_type
 */
LiveStream.prototype['transcoder_type'] = undefined;

/**
 * The date and time that the live stream was updated.
 * @member {Date} updated_at
 */
LiveStream.prototype['updated_at'] = undefined;

/**
 * If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.
 * @member {Boolean} use_stream_source
 */
LiveStream.prototype['use_stream_source'] = undefined;

/**
 * If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with HLS stream targets.
 * @member {Boolean} video_fallback
 */
LiveStream.prototype['video_fallback'] = undefined;





/**
 * Allowed values for the <code>billing_mode</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['BillingModeEnum'] = {

    /**
     * value: "pay_as_you_go"
     * @const
     */
    "pay_as_you_go": "pay_as_you_go",

    /**
     * value: "twentyfour_seven"
     * @const
     */
    "twentyfour_seven": "twentyfour_seven"
};


/**
 * Allowed values for the <code>broadcast_location</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['BroadcastLocationEnum'] = {

    /**
     * value: "asia_pacific_australia"
     * @const
     */
    "asia_pacific_australia": "asia_pacific_australia",

    /**
     * value: "asia_pacific_japan"
     * @const
     */
    "asia_pacific_japan": "asia_pacific_japan",

    /**
     * value: "asia_pacific_singapore"
     * @const
     */
    "asia_pacific_singapore": "asia_pacific_singapore",

    /**
     * value: "asia_pacific_taiwan"
     * @const
     */
    "asia_pacific_taiwan": "asia_pacific_taiwan",

    /**
     * value: "eu_belgium"
     * @const
     */
    "eu_belgium": "eu_belgium",

    /**
     * value: "eu_germany"
     * @const
     */
    "eu_germany": "eu_germany",

    /**
     * value: "eu_ireland"
     * @const
     */
    "eu_ireland": "eu_ireland",

    /**
     * value: "south_america_brazil"
     * @const
     */
    "south_america_brazil": "south_america_brazil",

    /**
     * value: "us_central_iowa"
     * @const
     */
    "us_central_iowa": "us_central_iowa",

    /**
     * value: "us_east_s_carolina"
     * @const
     */
    "us_east_s_carolina": "us_east_s_carolina",

    /**
     * value: "us_east_virginia"
     * @const
     */
    "us_east_virginia": "us_east_virginia",

    /**
     * value: "us_west_california"
     * @const
     */
    "us_west_california": "us_west_california",

    /**
     * value: "us_west_oregon"
     * @const
     */
    "us_west_oregon": "us_west_oregon"
};


/**
 * Allowed values for the <code>closed_caption_type</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['ClosedCaptionTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "cea"
     * @const
     */
    "cea": "cea",

    /**
     * value: "on_text"
     * @const
     */
    "on_text": "on_text",

    /**
     * value: "both"
     * @const
     */
    "both": "both"
};


/**
 * Allowed values for the <code>delivery_method</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['DeliveryMethodEnum'] = {

    /**
     * value: "pull"
     * @const
     */
    "pull": "pull",

    /**
     * value: "cdn"
     * @const
     */
    "cdn": "cdn",

    /**
     * value: "push"
     * @const
     */
    "push": "push"
};


/**
 * Allowed values for the <code>delivery_protocol</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['DeliveryProtocolEnum'] = {

    /**
     * value: "hls-https"
     * @const
     */
    "https": "hls-https",

    /**
     * value: "hls-hds"
     * @const
     */
    "hds": "hls-hds"
};


/**
 * Allowed values for the <code>delivery_type</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['DeliveryTypeEnum'] = {

    /**
     * value: "single-bitrate"
     * @const
     */
    "single-bitrate": "single-bitrate",

    /**
     * value: "multi-bitrate"
     * @const
     */
    "multi-bitrate": "multi-bitrate"
};


/**
 * Allowed values for the <code>encoder</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['EncoderEnum'] = {

    /**
     * value: "wowza_streaming_engine"
     * @const
     */
    "wowza_streaming_engine": "wowza_streaming_engine",

    /**
     * value: "wowza_gocoder"
     * @const
     */
    "wowza_gocoder": "wowza_gocoder",

    /**
     * value: "media_ds"
     * @const
     */
    "media_ds": "media_ds",

    /**
     * value: "axis"
     * @const
     */
    "axis": "axis",

    /**
     * value: "epiphan"
     * @const
     */
    "epiphan": "epiphan",

    /**
     * value: "hauppauge"
     * @const
     */
    "hauppauge": "hauppauge",

    /**
     * value: "jvc"
     * @const
     */
    "jvc": "jvc",

    /**
     * value: "live_u"
     * @const
     */
    "live_u": "live_u",

    /**
     * value: "matrox"
     * @const
     */
    "matrox": "matrox",

    /**
     * value: "newtek_tricaster"
     * @const
     */
    "newtek_tricaster": "newtek_tricaster",

    /**
     * value: "osprey"
     * @const
     */
    "osprey": "osprey",

    /**
     * value: "sony"
     * @const
     */
    "sony": "sony",

    /**
     * value: "telestream_wirecast"
     * @const
     */
    "telestream_wirecast": "telestream_wirecast",

    /**
     * value: "teradek_cube"
     * @const
     */
    "teradek_cube": "teradek_cube",

    /**
     * value: "vmix"
     * @const
     */
    "vmix": "vmix",

    /**
     * value: "x_split"
     * @const
     */
    "x_split": "x_split",

    /**
     * value: "ipcamera"
     * @const
     */
    "ipcamera": "ipcamera",

    /**
     * value: "other_rtmp"
     * @const
     */
    "other_rtmp": "other_rtmp",

    /**
     * value: "other_rtsp"
     * @const
     */
    "other_rtsp": "other_rtsp"
};


/**
 * Allowed values for the <code>player_logo_position</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['PlayerLogoPositionEnum'] = {

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right"
};


/**
 * Allowed values for the <code>target_delivery_protocol</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['TargetDeliveryProtocolEnum'] = {

    /**
     * value: "hls-https"
     * @const
     */
    "https": "hls-https",

    /**
     * value: "hls-hds"
     * @const
     */
    "hds": "hls-hds"
};


/**
 * Allowed values for the <code>transcoder_type</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream['TranscoderTypeEnum'] = {

    /**
     * value: "transcoded"
     * @const
     */
    "transcoded": "transcoded",

    /**
     * value: "passthrough"
     * @const
     */
    "passthrough": "passthrough"
};



export default LiveStream;

