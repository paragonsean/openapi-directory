/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Output from './Output';
import PlaybackUrl1 from './PlaybackUrl1';

/**
 * The Transcoder model module.
 * @module model/Transcoder
 * @version 1
 */
class Transcoder {
    /**
     * Constructs a new <code>Transcoder</code>.
     * @alias module:model/Transcoder
     */
    constructor() { 
        
        Transcoder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transcoder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transcoder} obj Optional instance to populate.
     * @return {module:model/Transcoder} The populated <code>Transcoder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transcoder();

            if (data.hasOwnProperty('application_name')) {
                obj['application_name'] = ApiClient.convertToType(data['application_name'], 'String');
            }
            if (data.hasOwnProperty('billing_mode')) {
                obj['billing_mode'] = ApiClient.convertToType(data['billing_mode'], 'String');
            }
            if (data.hasOwnProperty('broadcast_location')) {
                obj['broadcast_location'] = ApiClient.convertToType(data['broadcast_location'], 'String');
            }
            if (data.hasOwnProperty('buffer_size')) {
                obj['buffer_size'] = ApiClient.convertToType(data['buffer_size'], 'Number');
            }
            if (data.hasOwnProperty('closed_caption_type')) {
                obj['closed_caption_type'] = ApiClient.convertToType(data['closed_caption_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('delivery_method')) {
                obj['delivery_method'] = ApiClient.convertToType(data['delivery_method'], 'String');
            }
            if (data.hasOwnProperty('delivery_protocols')) {
                obj['delivery_protocols'] = ApiClient.convertToType(data['delivery_protocols'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('direct_playback_urls')) {
                obj['direct_playback_urls'] = ApiClient.convertToType(data['direct_playback_urls'], [PlaybackUrl1]);
            }
            if (data.hasOwnProperty('disable_authentication')) {
                obj['disable_authentication'] = ApiClient.convertToType(data['disable_authentication'], 'Boolean');
            }
            if (data.hasOwnProperty('domain_name')) {
                obj['domain_name'] = ApiClient.convertToType(data['domain_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idle_timeout')) {
                obj['idle_timeout'] = ApiClient.convertToType(data['idle_timeout'], 'Number');
            }
            if (data.hasOwnProperty('low_latency')) {
                obj['low_latency'] = ApiClient.convertToType(data['low_latency'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [Output]);
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('play_maximum_connections')) {
                obj['play_maximum_connections'] = ApiClient.convertToType(data['play_maximum_connections'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('recording')) {
                obj['recording'] = ApiClient.convertToType(data['recording'], 'Boolean');
            }
            if (data.hasOwnProperty('source_port')) {
                obj['source_port'] = ApiClient.convertToType(data['source_port'], 'Number');
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('stream_extension')) {
                obj['stream_extension'] = ApiClient.convertToType(data['stream_extension'], 'String');
            }
            if (data.hasOwnProperty('stream_name')) {
                obj['stream_name'] = ApiClient.convertToType(data['stream_name'], 'String');
            }
            if (data.hasOwnProperty('stream_smoother')) {
                obj['stream_smoother'] = ApiClient.convertToType(data['stream_smoother'], 'Boolean');
            }
            if (data.hasOwnProperty('stream_source_id')) {
                obj['stream_source_id'] = ApiClient.convertToType(data['stream_source_id'], 'String');
            }
            if (data.hasOwnProperty('suppress_stream_target_start')) {
                obj['suppress_stream_target_start'] = ApiClient.convertToType(data['suppress_stream_target_start'], 'Boolean');
            }
            if (data.hasOwnProperty('transcoder_type')) {
                obj['transcoder_type'] = ApiClient.convertToType(data['transcoder_type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('video_fallback')) {
                obj['video_fallback'] = ApiClient.convertToType(data['video_fallback'], 'Boolean');
            }
            if (data.hasOwnProperty('watermark')) {
                obj['watermark'] = ApiClient.convertToType(data['watermark'], 'Boolean');
            }
            if (data.hasOwnProperty('watermark_height')) {
                obj['watermark_height'] = ApiClient.convertToType(data['watermark_height'], 'Number');
            }
            if (data.hasOwnProperty('watermark_image_url')) {
                obj['watermark_image_url'] = ApiClient.convertToType(data['watermark_image_url'], 'String');
            }
            if (data.hasOwnProperty('watermark_opacity')) {
                obj['watermark_opacity'] = ApiClient.convertToType(data['watermark_opacity'], 'Number');
            }
            if (data.hasOwnProperty('watermark_position')) {
                obj['watermark_position'] = ApiClient.convertToType(data['watermark_position'], 'String');
            }
            if (data.hasOwnProperty('watermark_width')) {
                obj['watermark_width'] = ApiClient.convertToType(data['watermark_width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transcoder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transcoder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['application_name'] && !(typeof data['application_name'] === 'string' || data['application_name'] instanceof String)) {
            throw new Error("Expected the field `application_name` to be a primitive type in the JSON string but got " + data['application_name']);
        }
        // ensure the json data is a string
        if (data['billing_mode'] && !(typeof data['billing_mode'] === 'string' || data['billing_mode'] instanceof String)) {
            throw new Error("Expected the field `billing_mode` to be a primitive type in the JSON string but got " + data['billing_mode']);
        }
        // ensure the json data is a string
        if (data['broadcast_location'] && !(typeof data['broadcast_location'] === 'string' || data['broadcast_location'] instanceof String)) {
            throw new Error("Expected the field `broadcast_location` to be a primitive type in the JSON string but got " + data['broadcast_location']);
        }
        // ensure the json data is a string
        if (data['closed_caption_type'] && !(typeof data['closed_caption_type'] === 'string' || data['closed_caption_type'] instanceof String)) {
            throw new Error("Expected the field `closed_caption_type` to be a primitive type in the JSON string but got " + data['closed_caption_type']);
        }
        // ensure the json data is a string
        if (data['delivery_method'] && !(typeof data['delivery_method'] === 'string' || data['delivery_method'] instanceof String)) {
            throw new Error("Expected the field `delivery_method` to be a primitive type in the JSON string but got " + data['delivery_method']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['delivery_protocols'])) {
            throw new Error("Expected the field `delivery_protocols` to be an array in the JSON data but got " + data['delivery_protocols']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['direct_playback_urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['direct_playback_urls'])) {
                throw new Error("Expected the field `direct_playback_urls` to be an array in the JSON data but got " + data['direct_playback_urls']);
            }
            // validate the optional field `direct_playback_urls` (array)
            for (const item of data['direct_playback_urls']) {
                PlaybackUrl1.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['domain_name'] && !(typeof data['domain_name'] === 'string' || data['domain_name'] instanceof String)) {
            throw new Error("Expected the field `domain_name` to be a primitive type in the JSON string but got " + data['domain_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                Output.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['stream_extension'] && !(typeof data['stream_extension'] === 'string' || data['stream_extension'] instanceof String)) {
            throw new Error("Expected the field `stream_extension` to be a primitive type in the JSON string but got " + data['stream_extension']);
        }
        // ensure the json data is a string
        if (data['stream_name'] && !(typeof data['stream_name'] === 'string' || data['stream_name'] instanceof String)) {
            throw new Error("Expected the field `stream_name` to be a primitive type in the JSON string but got " + data['stream_name']);
        }
        // ensure the json data is a string
        if (data['stream_source_id'] && !(typeof data['stream_source_id'] === 'string' || data['stream_source_id'] instanceof String)) {
            throw new Error("Expected the field `stream_source_id` to be a primitive type in the JSON string but got " + data['stream_source_id']);
        }
        // ensure the json data is a string
        if (data['transcoder_type'] && !(typeof data['transcoder_type'] === 'string' || data['transcoder_type'] instanceof String)) {
            throw new Error("Expected the field `transcoder_type` to be a primitive type in the JSON string but got " + data['transcoder_type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['watermark_image_url'] && !(typeof data['watermark_image_url'] === 'string' || data['watermark_image_url'] instanceof String)) {
            throw new Error("Expected the field `watermark_image_url` to be a primitive type in the JSON string but got " + data['watermark_image_url']);
        }
        // ensure the json data is a string
        if (data['watermark_position'] && !(typeof data['watermark_position'] === 'string' || data['watermark_position'] instanceof String)) {
            throw new Error("Expected the field `watermark_position` to be a primitive type in the JSON string but got " + data['watermark_position']);
        }

        return true;
    }


}



/**
 * The application name from the pull stream source URL.
 * @member {String} application_name
 */
Transcoder.prototype['application_name'] = undefined;

/**
 * The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>.
 * @member {module:model/Transcoder.BillingModeEnum} billing_mode
 */
Transcoder.prototype['billing_mode'] = undefined;

/**
 * The location where Wowza Streaming Cloud transcodes your stream. Choose a location as close as possible to your video source.
 * @member {module:model/Transcoder.BroadcastLocationEnum} broadcast_location
 */
Transcoder.prototype['broadcast_location'] = undefined;

/**
 * The size, in milliseconds, of the incoming buffer. <strong>0</strong> means no buffer. The default is <strong>4000</strong> (4 seconds).
 * @member {module:model/Transcoder.BufferSizeEnum} buffer_size
 */
Transcoder.prototype['buffer_size'] = undefined;

/**
 * The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.
 * @member {module:model/Transcoder.ClosedCaptionTypeEnum} closed_caption_type
 */
Transcoder.prototype['closed_caption_type'] = undefined;

/**
 * The date and time that the transcoder was created.
 * @member {Date} created_at
 */
Transcoder.prototype['created_at'] = undefined;

/**
 * The type of connection between the source encoder and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.
 * @member {module:model/Transcoder.DeliveryMethodEnum} delivery_method
 */
Transcoder.prototype['delivery_method'] = undefined;

/**
 * An array of playback protocols enabled for this transcoder. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are returned.
 * @member {Array.<String>} delivery_protocols
 */
Transcoder.prototype['delivery_protocols'] = undefined;

/**
 * An optional description of the transcoder.
 * @member {String} description
 */
Transcoder.prototype['description'] = undefined;

/**
 * An array of direct playback URLs the transcoder's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.
 * @member {Array.<module:model/PlaybackUrl1>} direct_playback_urls
 */
Transcoder.prototype['direct_playback_urls'] = undefined;

/**
 * Authentication is required by default for RTMP and RTSP push connections from a video source to the transcoder. Specify <strong>true</strong> to disable authentication with the video source.
 * @member {Boolean} disable_authentication
 */
Transcoder.prototype['disable_authentication'] = undefined;

/**
 * The domain name from the pull stream source URL.
 * @member {String} domain_name
 */
Transcoder.prototype['domain_name'] = undefined;

/**
 * The unique alphanumeric string that identifies the transcoder.
 * @member {String} id
 */
Transcoder.prototype['id'] = undefined;

/**
 * The amount of idle time, in seconds, before the transcoder automatically shuts down. Valid values are the integers <strong>0</strong> (never shuts down) to <strong>172800</strong> (48 hours). The default is <strong>1200</strong> (20 minutes).
 * @member {Number} idle_timeout
 */
Transcoder.prototype['idle_timeout'] = undefined;

/**
 * If <strong>true</strong>, turns off the sort packet buffer and speeds the time it takes to decode and deliver video data to the player. The default is <strong>false</strong>.
 * @member {Boolean} low_latency
 */
Transcoder.prototype['low_latency'] = undefined;

/**
 * A descriptive name for the transcoder. Maximum 200 characters.
 * @member {String} name
 */
Transcoder.prototype['name'] = undefined;

/**
 * Output renditions associated with the transcoder.
 * @member {Array.<module:model/Output>} outputs
 */
Transcoder.prototype['outputs'] = undefined;

/**
 * A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
 * @member {String} password
 */
Transcoder.prototype['password'] = undefined;

/**
 * The number of users who are allowed to connect directly to the transcoder.
 * @member {module:model/Transcoder.PlayMaximumConnectionsEnum} play_maximum_connections
 */
Transcoder.prototype['play_maximum_connections'] = undefined;

/**
 * The transport protocol for the source video. The default is <strong>rtmp</strong>.
 * @member {module:model/Transcoder.ProtocolEnum} protocol
 */
Transcoder.prototype['protocol'] = undefined;

/**
 * If <strong>true</strong>, creates a recording of the transcoded output. The default is <strong>false</strong>.
 * @member {Boolean} recording
 */
Transcoder.prototype['recording'] = undefined;

/**
 * The port used for RTMP pull connections to Wowza Streaming Cloud.
 * @member {Number} source_port
 */
Transcoder.prototype['source_port'] = undefined;

/**
 * For the <em>delivery_method</em> <strong>pull</strong>. Enter the source's web address without the preceding protocol or the trailing slash (/).
 * @member {String} source_url
 */
Transcoder.prototype['source_url'] = undefined;

/**
 * For the <em>delivery_method</em> <strong>push</strong>. Some encoders append an extension to their stream names. If the device you're using does this, enter the extension.
 * @member {String} stream_extension
 */
Transcoder.prototype['stream_extension'] = undefined;

/**
 * The stream name from the pull stream source URL.
 * @member {String} stream_name
 */
Transcoder.prototype['stream_name'] = undefined;

/**
 * A dynamic buffer that helps stabilize streams in rough network conditions, but adds latency. Specify <strong>true</strong> to enable stream smoothing. The default is <strong>false</strong>.
 * @member {Boolean} stream_smoother
 */
Transcoder.prototype['stream_smoother'] = undefined;

/**
 * For the <em>delivery_method</em> <strong>cdn</strong>. The alphanumeric string that identifies the stream source that you want to use to deliver the stream to the transcoder.
 * @member {String} stream_source_id
 */
Transcoder.prototype['stream_source_id'] = undefined;

/**
 * If <strong>true</strong>, disables stream targets when the transcoder starts. If <strong>false</strong> (the default), the targets start when the transcoder starts.
 * @member {Boolean} suppress_stream_target_start
 */
Transcoder.prototype['suppress_stream_target_start'] = undefined;

/**
 * The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.
 * @member {module:model/Transcoder.TranscoderTypeEnum} transcoder_type
 */
Transcoder.prototype['transcoder_type'] = undefined;

/**
 * The date and time that the transcoder was updated.
 * @member {Date} updated_at
 */
Transcoder.prototype['updated_at'] = undefined;

/**
 * A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
 * @member {String} username
 */
Transcoder.prototype['username'] = undefined;

/**
 * If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with stream targets whose <em>provider</em> is <strong>akamai_cupertino</strong>.
 * @member {Boolean} video_fallback
 */
Transcoder.prototype['video_fallback'] = undefined;

/**
 * Embeds an image into the transcoded stream for copyright protection. Specify <strong>true</strong> to embed a watermark image.
 * @member {Boolean} watermark
 */
Transcoder.prototype['watermark'] = undefined;

/**
 * The height, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image height.
 * @member {Number} watermark_height
 */
Transcoder.prototype['watermark_height'] = undefined;

/**
 * The path to a GIF, JPEG, or PNG image that is embedded in all bitrate renditions of the stream. Watermark image files must be 2.5 MB or smaller.
 * @member {String} watermark_image_url
 */
Transcoder.prototype['watermark_image_url'] = undefined;

/**
 * The opacity, or percentage of transparency, of the watermark. <strong>0</strong> is fully transparent; <strong>100</strong> is fully opaque.
 * @member {module:model/Transcoder.WatermarkOpacityEnum} watermark_opacity
 */
Transcoder.prototype['watermark_opacity'] = undefined;

/**
 * The corner of the video frame in which you want the watermark to appear. The default is <strong>top-left</strong>.
 * @member {module:model/Transcoder.WatermarkPositionEnum} watermark_position
 */
Transcoder.prototype['watermark_position'] = undefined;

/**
 * The width, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image width.
 * @member {Number} watermark_width
 */
Transcoder.prototype['watermark_width'] = undefined;





/**
 * Allowed values for the <code>billing_mode</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['BillingModeEnum'] = {

    /**
     * value: "pay_as_you_go"
     * @const
     */
    "pay_as_you_go": "pay_as_you_go",

    /**
     * value: "twentyfour_seven"
     * @const
     */
    "twentyfour_seven": "twentyfour_seven"
};


/**
 * Allowed values for the <code>broadcast_location</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['BroadcastLocationEnum'] = {

    /**
     * value: "asia_pacific_australia"
     * @const
     */
    "asia_pacific_australia": "asia_pacific_australia",

    /**
     * value: "asia_pacific_japan"
     * @const
     */
    "asia_pacific_japan": "asia_pacific_japan",

    /**
     * value: "asia_pacific_singapore"
     * @const
     */
    "asia_pacific_singapore": "asia_pacific_singapore",

    /**
     * value: "asia_pacific_taiwan"
     * @const
     */
    "asia_pacific_taiwan": "asia_pacific_taiwan",

    /**
     * value: "eu_belgium"
     * @const
     */
    "eu_belgium": "eu_belgium",

    /**
     * value: "eu_germany"
     * @const
     */
    "eu_germany": "eu_germany",

    /**
     * value: "eu_ireland"
     * @const
     */
    "eu_ireland": "eu_ireland",

    /**
     * value: "south_america_brazil"
     * @const
     */
    "south_america_brazil": "south_america_brazil",

    /**
     * value: "us_central_iowa"
     * @const
     */
    "us_central_iowa": "us_central_iowa",

    /**
     * value: "us_east_s_carolina"
     * @const
     */
    "us_east_s_carolina": "us_east_s_carolina",

    /**
     * value: "us_east_virginia"
     * @const
     */
    "us_east_virginia": "us_east_virginia",

    /**
     * value: "us_west_california"
     * @const
     */
    "us_west_california": "us_west_california",

    /**
     * value: "us_west_oregon"
     * @const
     */
    "us_west_oregon": "us_west_oregon"
};


/**
 * Allowed values for the <code>buffer_size</code> property.
 * @enum {Number}
 * @readonly
 */
Transcoder['BufferSizeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1000
     * @const
     */
    "1000": 1000,

    /**
     * value: 2000
     * @const
     */
    "2000": 2000,

    /**
     * value: 3000
     * @const
     */
    "3000": 3000,

    /**
     * value: 4000
     * @const
     */
    "4000": 4000,

    /**
     * value: 5000
     * @const
     */
    "5000": 5000,

    /**
     * value: 6000
     * @const
     */
    "6000": 6000,

    /**
     * value: 7000
     * @const
     */
    "7000": 7000,

    /**
     * value: 8000
     * @const
     */
    "8000": 8000
};


/**
 * Allowed values for the <code>closed_caption_type</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['ClosedCaptionTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "cea"
     * @const
     */
    "cea": "cea",

    /**
     * value: "on_text"
     * @const
     */
    "on_text": "on_text",

    /**
     * value: "both"
     * @const
     */
    "both": "both"
};


/**
 * Allowed values for the <code>delivery_method</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['DeliveryMethodEnum'] = {

    /**
     * value: "pull"
     * @const
     */
    "pull": "pull",

    /**
     * value: "cdn"
     * @const
     */
    "cdn": "cdn",

    /**
     * value: "push"
     * @const
     */
    "push": "push"
};


/**
 * Allowed values for the <code>play_maximum_connections</code> property.
 * @enum {Number}
 * @readonly
 */
Transcoder['PlayMaximumConnectionsEnum'] = {

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 11
     * @const
     */
    "11": 11,

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 13
     * @const
     */
    "13": 13,

    /**
     * value: 14
     * @const
     */
    "14": 14,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 16
     * @const
     */
    "16": 16,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 18
     * @const
     */
    "18": 18,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 21
     * @const
     */
    "21": 21,

    /**
     * value: 22
     * @const
     */
    "22": 22,

    /**
     * value: 23
     * @const
     */
    "23": 23,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 26
     * @const
     */
    "26": 26,

    /**
     * value: 27
     * @const
     */
    "27": 27,

    /**
     * value: 28
     * @const
     */
    "28": 28,

    /**
     * value: 29
     * @const
     */
    "29": 29,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 31
     * @const
     */
    "31": 31,

    /**
     * value: 32
     * @const
     */
    "32": 32,

    /**
     * value: 33
     * @const
     */
    "33": 33,

    /**
     * value: 34
     * @const
     */
    "34": 34,

    /**
     * value: 35
     * @const
     */
    "35": 35,

    /**
     * value: 36
     * @const
     */
    "36": 36,

    /**
     * value: 37
     * @const
     */
    "37": 37,

    /**
     * value: 38
     * @const
     */
    "38": 38,

    /**
     * value: 39
     * @const
     */
    "39": 39,

    /**
     * value: 40
     * @const
     */
    "40": 40,

    /**
     * value: 41
     * @const
     */
    "41": 41,

    /**
     * value: 42
     * @const
     */
    "42": 42,

    /**
     * value: 43
     * @const
     */
    "43": 43,

    /**
     * value: 44
     * @const
     */
    "44": 44,

    /**
     * value: 45
     * @const
     */
    "45": 45,

    /**
     * value: 46
     * @const
     */
    "46": 46,

    /**
     * value: 47
     * @const
     */
    "47": 47,

    /**
     * value: 48
     * @const
     */
    "48": 48,

    /**
     * value: 49
     * @const
     */
    "49": 49,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 51
     * @const
     */
    "51": 51,

    /**
     * value: 52
     * @const
     */
    "52": 52,

    /**
     * value: 53
     * @const
     */
    "53": 53,

    /**
     * value: 54
     * @const
     */
    "54": 54,

    /**
     * value: 55
     * @const
     */
    "55": 55,

    /**
     * value: 56
     * @const
     */
    "56": 56,

    /**
     * value: 57
     * @const
     */
    "57": 57,

    /**
     * value: 58
     * @const
     */
    "58": 58,

    /**
     * value: 59
     * @const
     */
    "59": 59,

    /**
     * value: 60
     * @const
     */
    "60": 60,

    /**
     * value: 61
     * @const
     */
    "61": 61,

    /**
     * value: 62
     * @const
     */
    "62": 62,

    /**
     * value: 63
     * @const
     */
    "63": 63,

    /**
     * value: 64
     * @const
     */
    "64": 64,

    /**
     * value: 65
     * @const
     */
    "65": 65,

    /**
     * value: 66
     * @const
     */
    "66": 66,

    /**
     * value: 67
     * @const
     */
    "67": 67,

    /**
     * value: 68
     * @const
     */
    "68": 68,

    /**
     * value: 69
     * @const
     */
    "69": 69,

    /**
     * value: 70
     * @const
     */
    "70": 70,

    /**
     * value: 71
     * @const
     */
    "71": 71,

    /**
     * value: 72
     * @const
     */
    "72": 72,

    /**
     * value: 73
     * @const
     */
    "73": 73,

    /**
     * value: 74
     * @const
     */
    "74": 74,

    /**
     * value: 75
     * @const
     */
    "75": 75,

    /**
     * value: 76
     * @const
     */
    "76": 76,

    /**
     * value: 77
     * @const
     */
    "77": 77,

    /**
     * value: 78
     * @const
     */
    "78": 78,

    /**
     * value: 79
     * @const
     */
    "79": 79,

    /**
     * value: 80
     * @const
     */
    "80": 80,

    /**
     * value: 81
     * @const
     */
    "81": 81,

    /**
     * value: 82
     * @const
     */
    "82": 82,

    /**
     * value: 83
     * @const
     */
    "83": 83,

    /**
     * value: 84
     * @const
     */
    "84": 84,

    /**
     * value: 85
     * @const
     */
    "85": 85,

    /**
     * value: 86
     * @const
     */
    "86": 86,

    /**
     * value: 87
     * @const
     */
    "87": 87,

    /**
     * value: 88
     * @const
     */
    "88": 88,

    /**
     * value: 89
     * @const
     */
    "89": 89,

    /**
     * value: 90
     * @const
     */
    "90": 90,

    /**
     * value: 91
     * @const
     */
    "91": 91,

    /**
     * value: 92
     * @const
     */
    "92": 92,

    /**
     * value: 93
     * @const
     */
    "93": 93,

    /**
     * value: 94
     * @const
     */
    "94": 94,

    /**
     * value: 95
     * @const
     */
    "95": 95,

    /**
     * value: 96
     * @const
     */
    "96": 96,

    /**
     * value: 97
     * @const
     */
    "97": 97,

    /**
     * value: 98
     * @const
     */
    "98": 98,

    /**
     * value: 99
     * @const
     */
    "99": 99,

    /**
     * value: 100
     * @const
     */
    "100": 100
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['ProtocolEnum'] = {

    /**
     * value: "rtmp"
     * @const
     */
    "rtmp": "rtmp",

    /**
     * value: "rtsp"
     * @const
     */
    "rtsp": "rtsp"
};


/**
 * Allowed values for the <code>transcoder_type</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['TranscoderTypeEnum'] = {

    /**
     * value: "transcoded"
     * @const
     */
    "transcoded": "transcoded",

    /**
     * value: "passthrough"
     * @const
     */
    "passthrough": "passthrough"
};


/**
 * Allowed values for the <code>watermark_opacity</code> property.
 * @enum {Number}
 * @readonly
 */
Transcoder['WatermarkOpacityEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8,

    /**
     * value: 9
     * @const
     */
    "9": 9,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 11
     * @const
     */
    "11": 11,

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 13
     * @const
     */
    "13": 13,

    /**
     * value: 14
     * @const
     */
    "14": 14,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 16
     * @const
     */
    "16": 16,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 18
     * @const
     */
    "18": 18,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 21
     * @const
     */
    "21": 21,

    /**
     * value: 22
     * @const
     */
    "22": 22,

    /**
     * value: 23
     * @const
     */
    "23": 23,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 26
     * @const
     */
    "26": 26,

    /**
     * value: 27
     * @const
     */
    "27": 27,

    /**
     * value: 28
     * @const
     */
    "28": 28,

    /**
     * value: 29
     * @const
     */
    "29": 29,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 31
     * @const
     */
    "31": 31,

    /**
     * value: 32
     * @const
     */
    "32": 32,

    /**
     * value: 33
     * @const
     */
    "33": 33,

    /**
     * value: 34
     * @const
     */
    "34": 34,

    /**
     * value: 35
     * @const
     */
    "35": 35,

    /**
     * value: 36
     * @const
     */
    "36": 36,

    /**
     * value: 37
     * @const
     */
    "37": 37,

    /**
     * value: 38
     * @const
     */
    "38": 38,

    /**
     * value: 39
     * @const
     */
    "39": 39,

    /**
     * value: 40
     * @const
     */
    "40": 40,

    /**
     * value: 41
     * @const
     */
    "41": 41,

    /**
     * value: 42
     * @const
     */
    "42": 42,

    /**
     * value: 43
     * @const
     */
    "43": 43,

    /**
     * value: 44
     * @const
     */
    "44": 44,

    /**
     * value: 45
     * @const
     */
    "45": 45,

    /**
     * value: 46
     * @const
     */
    "46": 46,

    /**
     * value: 47
     * @const
     */
    "47": 47,

    /**
     * value: 48
     * @const
     */
    "48": 48,

    /**
     * value: 49
     * @const
     */
    "49": 49,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 51
     * @const
     */
    "51": 51,

    /**
     * value: 52
     * @const
     */
    "52": 52,

    /**
     * value: 53
     * @const
     */
    "53": 53,

    /**
     * value: 54
     * @const
     */
    "54": 54,

    /**
     * value: 55
     * @const
     */
    "55": 55,

    /**
     * value: 56
     * @const
     */
    "56": 56,

    /**
     * value: 57
     * @const
     */
    "57": 57,

    /**
     * value: 58
     * @const
     */
    "58": 58,

    /**
     * value: 59
     * @const
     */
    "59": 59,

    /**
     * value: 60
     * @const
     */
    "60": 60,

    /**
     * value: 61
     * @const
     */
    "61": 61,

    /**
     * value: 62
     * @const
     */
    "62": 62,

    /**
     * value: 63
     * @const
     */
    "63": 63,

    /**
     * value: 64
     * @const
     */
    "64": 64,

    /**
     * value: 65
     * @const
     */
    "65": 65,

    /**
     * value: 66
     * @const
     */
    "66": 66,

    /**
     * value: 67
     * @const
     */
    "67": 67,

    /**
     * value: 68
     * @const
     */
    "68": 68,

    /**
     * value: 69
     * @const
     */
    "69": 69,

    /**
     * value: 70
     * @const
     */
    "70": 70,

    /**
     * value: 71
     * @const
     */
    "71": 71,

    /**
     * value: 72
     * @const
     */
    "72": 72,

    /**
     * value: 73
     * @const
     */
    "73": 73,

    /**
     * value: 74
     * @const
     */
    "74": 74,

    /**
     * value: 75
     * @const
     */
    "75": 75,

    /**
     * value: 76
     * @const
     */
    "76": 76,

    /**
     * value: 77
     * @const
     */
    "77": 77,

    /**
     * value: 78
     * @const
     */
    "78": 78,

    /**
     * value: 79
     * @const
     */
    "79": 79,

    /**
     * value: 80
     * @const
     */
    "80": 80,

    /**
     * value: 81
     * @const
     */
    "81": 81,

    /**
     * value: 82
     * @const
     */
    "82": 82,

    /**
     * value: 83
     * @const
     */
    "83": 83,

    /**
     * value: 84
     * @const
     */
    "84": 84,

    /**
     * value: 85
     * @const
     */
    "85": 85,

    /**
     * value: 86
     * @const
     */
    "86": 86,

    /**
     * value: 87
     * @const
     */
    "87": 87,

    /**
     * value: 88
     * @const
     */
    "88": 88,

    /**
     * value: 89
     * @const
     */
    "89": 89,

    /**
     * value: 90
     * @const
     */
    "90": 90,

    /**
     * value: 91
     * @const
     */
    "91": 91,

    /**
     * value: 92
     * @const
     */
    "92": 92,

    /**
     * value: 93
     * @const
     */
    "93": 93,

    /**
     * value: 94
     * @const
     */
    "94": 94,

    /**
     * value: 95
     * @const
     */
    "95": 95,

    /**
     * value: 96
     * @const
     */
    "96": 96,

    /**
     * value: 97
     * @const
     */
    "97": 97,

    /**
     * value: 98
     * @const
     */
    "98": 98,

    /**
     * value: 99
     * @const
     */
    "99": 99,

    /**
     * value: 100
     * @const
     */
    "100": 100
};


/**
 * Allowed values for the <code>watermark_position</code> property.
 * @enum {String}
 * @readonly
 */
Transcoder['WatermarkPositionEnum'] = {

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right"
};



export default Transcoder;

