/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutputStreamTarget from './OutputStreamTarget';

/**
 * The Output model module.
 * @module model/Output
 * @version 1
 */
class Output {
    /**
     * Constructs a new <code>Output</code>.
     * @alias module:model/Output
     */
    constructor() { 
        
        Output.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Output</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Output} obj Optional instance to populate.
     * @return {module:model/Output} The populated <code>Output</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Output();

            if (data.hasOwnProperty('aspect_ratio_height')) {
                obj['aspect_ratio_height'] = ApiClient.convertToType(data['aspect_ratio_height'], 'Number');
            }
            if (data.hasOwnProperty('aspect_ratio_width')) {
                obj['aspect_ratio_width'] = ApiClient.convertToType(data['aspect_ratio_width'], 'Number');
            }
            if (data.hasOwnProperty('bitrate_audio')) {
                obj['bitrate_audio'] = ApiClient.convertToType(data['bitrate_audio'], 'Number');
            }
            if (data.hasOwnProperty('bitrate_video')) {
                obj['bitrate_video'] = ApiClient.convertToType(data['bitrate_video'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('framerate_reduction')) {
                obj['framerate_reduction'] = ApiClient.convertToType(data['framerate_reduction'], 'String');
            }
            if (data.hasOwnProperty('h264_profile')) {
                obj['h264_profile'] = ApiClient.convertToType(data['h264_profile'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('keyframes')) {
                obj['keyframes'] = ApiClient.convertToType(data['keyframes'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('output_stream_targets')) {
                obj['output_stream_targets'] = ApiClient.convertToType(data['output_stream_targets'], [OutputStreamTarget]);
            }
            if (data.hasOwnProperty('passthrough_audio')) {
                obj['passthrough_audio'] = ApiClient.convertToType(data['passthrough_audio'], 'Boolean');
            }
            if (data.hasOwnProperty('passthrough_video')) {
                obj['passthrough_video'] = ApiClient.convertToType(data['passthrough_video'], 'Boolean');
            }
            if (data.hasOwnProperty('stream_format')) {
                obj['stream_format'] = ApiClient.convertToType(data['stream_format'], 'String');
            }
            if (data.hasOwnProperty('transcoder_id')) {
                obj['transcoder_id'] = ApiClient.convertToType(data['transcoder_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Output</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Output</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['framerate_reduction'] && !(typeof data['framerate_reduction'] === 'string' || data['framerate_reduction'] instanceof String)) {
            throw new Error("Expected the field `framerate_reduction` to be a primitive type in the JSON string but got " + data['framerate_reduction']);
        }
        // ensure the json data is a string
        if (data['h264_profile'] && !(typeof data['h264_profile'] === 'string' || data['h264_profile'] instanceof String)) {
            throw new Error("Expected the field `h264_profile` to be a primitive type in the JSON string but got " + data['h264_profile']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['keyframes'] && !(typeof data['keyframes'] === 'string' || data['keyframes'] instanceof String)) {
            throw new Error("Expected the field `keyframes` to be a primitive type in the JSON string but got " + data['keyframes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['output_stream_targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['output_stream_targets'])) {
                throw new Error("Expected the field `output_stream_targets` to be an array in the JSON data but got " + data['output_stream_targets']);
            }
            // validate the optional field `output_stream_targets` (array)
            for (const item of data['output_stream_targets']) {
                OutputStreamTarget.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stream_format'] && !(typeof data['stream_format'] === 'string' || data['stream_format'] instanceof String)) {
            throw new Error("Expected the field `stream_format` to be a primitive type in the JSON string but got " + data['stream_format']);
        }
        // ensure the json data is a string
        if (data['transcoder_id'] && !(typeof data['transcoder_id'] === 'string' || data['transcoder_id'] instanceof String)) {
            throw new Error("Expected the field `transcoder_id` to be a primitive type in the JSON string but got " + data['transcoder_id']);
        }

        return true;
    }


}



/**
 * The height, in pixels, of the output rendition. Should correspond to a widescreen or standard aspect ratio and be divisible by 8. The default is <strong>1080</strong>.
 * @member {Number} aspect_ratio_height
 */
Output.prototype['aspect_ratio_height'] = undefined;

/**
 * The width, in pixels, of the output rendition. Should correspond to a widescreen or standard aspect ratio and be divisible by 8. The default is <strong>1980</strong>.
 * @member {Number} aspect_ratio_width
 */
Output.prototype['aspect_ratio_width'] = undefined;

/**
 * The audio bitrate, in kilobits per second (Kbps). Must be between <strong>0</strong> (for passthrough audio) and <strong>1000</strong>. The default is <strong>128</strong>.
 * @member {Number} bitrate_audio
 */
Output.prototype['bitrate_audio'] = undefined;

/**
 * The video bitrate, in kilobits per second (Kbps). Must be between <strong>0</strong> (for passthrough video) and <strong>10240</strong>. The default is <strong>4000</strong>.
 * @member {Number} bitrate_video
 */
Output.prototype['bitrate_video'] = undefined;

/**
 * The date and time that the output rendition was created.
 * @member {Date} created_at
 */
Output.prototype['created_at'] = undefined;

/**
 * Reduce the frame rate of the transcoded output rendition. The default, <strong>0</strong>, uses the encoded stream's frame rate without reduction.
 * @member {module:model/Output.FramerateReductionEnum} framerate_reduction
 */
Output.prototype['framerate_reduction'] = undefined;

/**
 * The encoding method. Specify <strong>main</strong> for desktop streaming, <strong>baseline</strong> for playback on mobile devices, or <strong>high</strong> for HD playback. The default is <strong>high</strong>.
 * @member {module:model/Output.H264ProfileEnum} h264_profile
 */
Output.prototype['h264_profile'] = undefined;

/**
 * The unique alphanumeric string that identifies the output rendition.
 * @member {String} id
 */
Output.prototype['id'] = undefined;

/**
 * The interval used to define the compression applied to a group of frames. The default, <strong>follow_source</strong>, uses the keyframe interval of the source video.
 * @member {module:model/Output.KeyframesEnum} keyframes
 */
Output.prototype['keyframes'] = undefined;

/**
 * A descriptive name for the output (generated, not writable).
 * @member {String} name
 */
Output.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/OutputStreamTarget>} output_stream_targets
 */
Output.prototype['output_stream_targets'] = undefined;

/**
 * If <strong>true</strong>, sends the audio track to the target without transcoding. The default is <strong>false</strong>.
 * @member {Boolean} passthrough_audio
 */
Output.prototype['passthrough_audio'] = undefined;

/**
 * If <strong>true</strong>, sends the video track to the target without transcoding. The default is <strong>false</strong>.
 * @member {Boolean} passthrough_video
 */
Output.prototype['passthrough_video'] = undefined;

/**
 * The contents of the stream. The default is both audio and video (<strong>audiovideo</strong>).
 * @member {module:model/Output.StreamFormatEnum} stream_format
 */
Output.prototype['stream_format'] = undefined;

/**
 * The unique alphanumeric string that identifies the transcoder.
 * @member {String} transcoder_id
 */
Output.prototype['transcoder_id'] = undefined;

/**
 * The date and time that the output rendition was updated.
 * @member {Date} updated_at
 */
Output.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>framerate_reduction</code> property.
 * @enum {String}
 * @readonly
 */
Output['FramerateReductionEnum'] = {

    /**
     * value: "0"
     * @const
     */
    "0": "0",

    /**
     * value: "1/2"
     * @const
     */
    "1/2": "1/2",

    /**
     * value: "1/4"
     * @const
     */
    "1/4": "1/4",

    /**
     * value: "1/25"
     * @const
     */
    "1/25": "1/25",

    /**
     * value: "1/30"
     * @const
     */
    "1/30": "1/30",

    /**
     * value: "1/50"
     * @const
     */
    "1/50": "1/50",

    /**
     * value: "1/60"
     * @const
     */
    "1/60": "1/60"
};


/**
 * Allowed values for the <code>h264_profile</code> property.
 * @enum {String}
 * @readonly
 */
Output['H264ProfileEnum'] = {

    /**
     * value: "main"
     * @const
     */
    "main": "main",

    /**
     * value: "baseline"
     * @const
     */
    "baseline": "baseline",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};


/**
 * Allowed values for the <code>keyframes</code> property.
 * @enum {String}
 * @readonly
 */
Output['KeyframesEnum'] = {

    /**
     * value: "follow_source"
     * @const
     */
    "follow_source": "follow_source",

    /**
     * value: "25"
     * @const
     */
    "25": "25",

    /**
     * value: "30"
     * @const
     */
    "30": "30",

    /**
     * value: "50"
     * @const
     */
    "50": "50",

    /**
     * value: "60"
     * @const
     */
    "60": "60",

    /**
     * value: "100"
     * @const
     */
    "100": "100",

    /**
     * value: "120"
     * @const
     */
    "120": "120"
};


/**
 * Allowed values for the <code>stream_format</code> property.
 * @enum {String}
 * @readonly
 */
Output['StreamFormatEnum'] = {

    /**
     * value: "audiovideo"
     * @const
     */
    "audiovideo": "audiovideo",

    /**
     * value: "videoonly"
     * @const
     */
    "videoonly": "videoonly",

    /**
     * value: "audioonly"
     * @const
     */
    "audioonly": "audioonly"
};



export default Output;

