/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveStream7 model module.
 * @module model/LiveStream7
 * @version 1
 */
class LiveStream7 {
    /**
     * Constructs a new <code>LiveStream7</code>.
     * @alias module:model/LiveStream7
     * @param aspectRatioHeight {Number} The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
     * @param aspectRatioWidth {Number} The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
     * @param encoder {module:model/LiveStream7.EncoderEnum} The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.
     * @param name {String} A descriptive name for the live stream. Maximum 200 characters.
     */
    constructor(aspectRatioHeight, aspectRatioWidth, encoder, name) { 
        
        LiveStream7.initialize(this, aspectRatioHeight, aspectRatioWidth, encoder, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aspectRatioHeight, aspectRatioWidth, encoder, name) { 
        obj['aspect_ratio_height'] = aspectRatioHeight;
        obj['aspect_ratio_width'] = aspectRatioWidth;
        obj['encoder'] = encoder;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>LiveStream7</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveStream7} obj Optional instance to populate.
     * @return {module:model/LiveStream7} The populated <code>LiveStream7</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveStream7();

            if (data.hasOwnProperty('aspect_ratio_height')) {
                obj['aspect_ratio_height'] = ApiClient.convertToType(data['aspect_ratio_height'], 'Number');
            }
            if (data.hasOwnProperty('aspect_ratio_width')) {
                obj['aspect_ratio_width'] = ApiClient.convertToType(data['aspect_ratio_width'], 'Number');
            }
            if (data.hasOwnProperty('closed_caption_type')) {
                obj['closed_caption_type'] = ApiClient.convertToType(data['closed_caption_type'], 'String');
            }
            if (data.hasOwnProperty('delivery_method')) {
                obj['delivery_method'] = ApiClient.convertToType(data['delivery_method'], 'String');
            }
            if (data.hasOwnProperty('delivery_protocols')) {
                obj['delivery_protocols'] = ApiClient.convertToType(data['delivery_protocols'], ['String']);
            }
            if (data.hasOwnProperty('disable_authentication')) {
                obj['disable_authentication'] = ApiClient.convertToType(data['disable_authentication'], 'Boolean');
            }
            if (data.hasOwnProperty('encoder')) {
                obj['encoder'] = ApiClient.convertToType(data['encoder'], 'String');
            }
            if (data.hasOwnProperty('hosted_page_description')) {
                obj['hosted_page_description'] = ApiClient.convertToType(data['hosted_page_description'], 'String');
            }
            if (data.hasOwnProperty('hosted_page_logo_image')) {
                obj['hosted_page_logo_image'] = ApiClient.convertToType(data['hosted_page_logo_image'], 'String');
            }
            if (data.hasOwnProperty('hosted_page_sharing_icons')) {
                obj['hosted_page_sharing_icons'] = ApiClient.convertToType(data['hosted_page_sharing_icons'], 'Boolean');
            }
            if (data.hasOwnProperty('hosted_page_title')) {
                obj['hosted_page_title'] = ApiClient.convertToType(data['hosted_page_title'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('player_countdown')) {
                obj['player_countdown'] = ApiClient.convertToType(data['player_countdown'], 'Boolean');
            }
            if (data.hasOwnProperty('player_countdown_at')) {
                obj['player_countdown_at'] = ApiClient.convertToType(data['player_countdown_at'], 'Date');
            }
            if (data.hasOwnProperty('player_logo_image')) {
                obj['player_logo_image'] = ApiClient.convertToType(data['player_logo_image'], 'String');
            }
            if (data.hasOwnProperty('player_logo_position')) {
                obj['player_logo_position'] = ApiClient.convertToType(data['player_logo_position'], 'String');
            }
            if (data.hasOwnProperty('player_responsive')) {
                obj['player_responsive'] = ApiClient.convertToType(data['player_responsive'], 'Boolean');
            }
            if (data.hasOwnProperty('player_type')) {
                obj['player_type'] = ApiClient.convertToType(data['player_type'], 'String');
            }
            if (data.hasOwnProperty('player_video_poster_image')) {
                obj['player_video_poster_image'] = ApiClient.convertToType(data['player_video_poster_image'], 'String');
            }
            if (data.hasOwnProperty('player_width')) {
                obj['player_width'] = ApiClient.convertToType(data['player_width'], 'Number');
            }
            if (data.hasOwnProperty('recording')) {
                obj['recording'] = ApiClient.convertToType(data['recording'], 'Boolean');
            }
            if (data.hasOwnProperty('remove_hosted_page_logo_image')) {
                obj['remove_hosted_page_logo_image'] = ApiClient.convertToType(data['remove_hosted_page_logo_image'], 'Boolean');
            }
            if (data.hasOwnProperty('remove_player_logo_image')) {
                obj['remove_player_logo_image'] = ApiClient.convertToType(data['remove_player_logo_image'], 'Boolean');
            }
            if (data.hasOwnProperty('remove_player_video_poster_image')) {
                obj['remove_player_video_poster_image'] = ApiClient.convertToType(data['remove_player_video_poster_image'], 'Boolean');
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('target_delivery_protocol')) {
                obj['target_delivery_protocol'] = ApiClient.convertToType(data['target_delivery_protocol'], 'String');
            }
            if (data.hasOwnProperty('use_stream_source')) {
                obj['use_stream_source'] = ApiClient.convertToType(data['use_stream_source'], 'Boolean');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('video_fallback')) {
                obj['video_fallback'] = ApiClient.convertToType(data['video_fallback'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveStream7</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveStream7</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LiveStream7.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['closed_caption_type'] && !(typeof data['closed_caption_type'] === 'string' || data['closed_caption_type'] instanceof String)) {
            throw new Error("Expected the field `closed_caption_type` to be a primitive type in the JSON string but got " + data['closed_caption_type']);
        }
        // ensure the json data is a string
        if (data['delivery_method'] && !(typeof data['delivery_method'] === 'string' || data['delivery_method'] instanceof String)) {
            throw new Error("Expected the field `delivery_method` to be a primitive type in the JSON string but got " + data['delivery_method']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['delivery_protocols'])) {
            throw new Error("Expected the field `delivery_protocols` to be an array in the JSON data but got " + data['delivery_protocols']);
        }
        // ensure the json data is a string
        if (data['encoder'] && !(typeof data['encoder'] === 'string' || data['encoder'] instanceof String)) {
            throw new Error("Expected the field `encoder` to be a primitive type in the JSON string but got " + data['encoder']);
        }
        // ensure the json data is a string
        if (data['hosted_page_description'] && !(typeof data['hosted_page_description'] === 'string' || data['hosted_page_description'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_description` to be a primitive type in the JSON string but got " + data['hosted_page_description']);
        }
        // ensure the json data is a string
        if (data['hosted_page_logo_image'] && !(typeof data['hosted_page_logo_image'] === 'string' || data['hosted_page_logo_image'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_logo_image` to be a primitive type in the JSON string but got " + data['hosted_page_logo_image']);
        }
        // ensure the json data is a string
        if (data['hosted_page_title'] && !(typeof data['hosted_page_title'] === 'string' || data['hosted_page_title'] instanceof String)) {
            throw new Error("Expected the field `hosted_page_title` to be a primitive type in the JSON string but got " + data['hosted_page_title']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['player_logo_image'] && !(typeof data['player_logo_image'] === 'string' || data['player_logo_image'] instanceof String)) {
            throw new Error("Expected the field `player_logo_image` to be a primitive type in the JSON string but got " + data['player_logo_image']);
        }
        // ensure the json data is a string
        if (data['player_logo_position'] && !(typeof data['player_logo_position'] === 'string' || data['player_logo_position'] instanceof String)) {
            throw new Error("Expected the field `player_logo_position` to be a primitive type in the JSON string but got " + data['player_logo_position']);
        }
        // ensure the json data is a string
        if (data['player_type'] && !(typeof data['player_type'] === 'string' || data['player_type'] instanceof String)) {
            throw new Error("Expected the field `player_type` to be a primitive type in the JSON string but got " + data['player_type']);
        }
        // ensure the json data is a string
        if (data['player_video_poster_image'] && !(typeof data['player_video_poster_image'] === 'string' || data['player_video_poster_image'] instanceof String)) {
            throw new Error("Expected the field `player_video_poster_image` to be a primitive type in the JSON string but got " + data['player_video_poster_image']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['target_delivery_protocol'] && !(typeof data['target_delivery_protocol'] === 'string' || data['target_delivery_protocol'] instanceof String)) {
            throw new Error("Expected the field `target_delivery_protocol` to be a primitive type in the JSON string but got " + data['target_delivery_protocol']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

LiveStream7.RequiredProperties = ["aspect_ratio_height", "aspect_ratio_width", "encoder", "name"];

/**
 * The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
 * @member {Number} aspect_ratio_height
 */
LiveStream7.prototype['aspect_ratio_height'] = undefined;

/**
 * The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
 * @member {Number} aspect_ratio_width
 */
LiveStream7.prototype['aspect_ratio_width'] = undefined;

/**
 * The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioing data streams are being provided.
 * @member {module:model/LiveStream7.ClosedCaptionTypeEnum} closed_caption_type
 */
LiveStream7.prototype['closed_caption_type'] = undefined;

/**
 * The type of connection between the video source and the transcoder. The default, <strong>pull</strong>, instructs the transcoder to pull the video from the source. <strong>push</strong> instructs the source to push the stream to the transcoder. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.
 * @member {module:model/LiveStream7.DeliveryMethodEnum} delivery_method
 */
LiveStream7.prototype['delivery_method'] = undefined;

/**
 * An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.
 * @member {Array.<String>} delivery_protocols
 */
LiveStream7.prototype['delivery_protocols'] = undefined;

/**
 * Authentication is required by default for RTMP and RTSP push connections from a video source to Wowza Streaming Cloud. Specify <strong>true</strong> to disable authentication with the video source.
 * @member {Boolean} disable_authentication
 */
LiveStream7.prototype['disable_authentication'] = undefined;

/**
 * The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.
 * @member {module:model/LiveStream7.EncoderEnum} encoder
 */
LiveStream7.prototype['encoder'] = undefined;

/**
 * A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.
 * @member {String} hosted_page_description
 */
LiveStream7.prototype['hosted_page_description'] = undefined;

/**
 * A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.
 * @member {String} hosted_page_logo_image
 */
LiveStream7.prototype['hosted_page_logo_image'] = undefined;

/**
 * Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.
 * @member {Boolean} hosted_page_sharing_icons
 */
LiveStream7.prototype['hosted_page_sharing_icons'] = undefined;

/**
 * A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.
 * @member {String} hosted_page_title
 */
LiveStream7.prototype['hosted_page_title'] = undefined;

/**
 * A descriptive name for the live stream. Maximum 200 characters.
 * @member {String} name
 */
LiveStream7.prototype['name'] = undefined;

/**
 * A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
 * @member {String} password
 */
LiveStream7.prototype['password'] = undefined;

/**
 * A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.
 * @member {Boolean} player_countdown
 */
LiveStream7.prototype['player_countdown'] = undefined;

/**
 * The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.
 * @member {Date} player_countdown_at
 */
LiveStream7.prototype['player_countdown_at'] = undefined;

/**
 * A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.
 * @member {String} player_logo_image
 */
LiveStream7.prototype['player_logo_image'] = undefined;

/**
 * The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.
 * @member {module:model/LiveStream7.PlayerLogoPositionEnum} player_logo_position
 */
LiveStream7.prototype['player_logo_position'] = undefined;

/**
 * A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.
 * @member {Boolean} player_responsive
 */
LiveStream7.prototype['player_responsive'] = undefined;

/**
 * The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.
 * @member {String} player_type
 */
LiveStream7.prototype['player_type'] = undefined;

/**
 * A Base64-encoded string representation of a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.
 * @member {String} player_video_poster_image
 */
LiveStream7.prototype['player_video_poster_image'] = undefined;

/**
 * The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.
 * @member {Number} player_width
 */
LiveStream7.prototype['player_width'] = undefined;

/**
 * If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.
 * @member {Boolean} recording
 */
LiveStream7.prototype['recording'] = undefined;

/**
 * If <strong>true</strong>, removes the logo file from the hosted page. The default is <strong>false</strong>.
 * @member {Boolean} remove_hosted_page_logo_image
 */
LiveStream7.prototype['remove_hosted_page_logo_image'] = undefined;

/**
 * If <strong>true</strong>, removes the logo file from the player. The default is <strong>false</strong>.
 * @member {Boolean} remove_player_logo_image
 */
LiveStream7.prototype['remove_player_logo_image'] = undefined;

/**
 * If <strong>true</strong>, removes the poster image. The default is <strong>false</strong>.
 * @member {Boolean} remove_player_video_poster_image
 */
LiveStream7.prototype['remove_player_video_poster_image'] = undefined;

/**
 * The URL of an IP camera or video encoder using an RTMP and RTSP pull connection to Wowza Streaming Cloud. Consult the camera or encoder documentation for the URL syntax.
 * @member {String} source_url
 */
LiveStream7.prototype['source_url'] = undefined;

/**
 * The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.
 * @member {module:model/LiveStream7.TargetDeliveryProtocolEnum} target_delivery_protocol
 */
LiveStream7.prototype['target_delivery_protocol'] = undefined;

/**
 * If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.
 * @member {Boolean} use_stream_source
 */
LiveStream7.prototype['use_stream_source'] = undefined;

/**
 * A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
 * @member {String} username
 */
LiveStream7.prototype['username'] = undefined;

/**
 * If <strong>true</strong>, black video plays if the video source disconnects from the transcoder. If <strong>false</strong> (the default), a stream-not-available message appears. Works only with HLS stream targets.
 * @member {Boolean} video_fallback
 */
LiveStream7.prototype['video_fallback'] = undefined;





/**
 * Allowed values for the <code>closed_caption_type</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream7['ClosedCaptionTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "cea"
     * @const
     */
    "cea": "cea",

    /**
     * value: "on_text"
     * @const
     */
    "on_text": "on_text",

    /**
     * value: "both"
     * @const
     */
    "both": "both"
};


/**
 * Allowed values for the <code>delivery_method</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream7['DeliveryMethodEnum'] = {

    /**
     * value: "pull"
     * @const
     */
    "pull": "pull",

    /**
     * value: "cdn"
     * @const
     */
    "cdn": "cdn",

    /**
     * value: "push"
     * @const
     */
    "push": "push"
};


/**
 * Allowed values for the <code>encoder</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream7['EncoderEnum'] = {

    /**
     * value: "wowza_streaming_engine"
     * @const
     */
    "wowza_streaming_engine": "wowza_streaming_engine",

    /**
     * value: "wowza_gocoder"
     * @const
     */
    "wowza_gocoder": "wowza_gocoder",

    /**
     * value: "media_ds"
     * @const
     */
    "media_ds": "media_ds",

    /**
     * value: "axis"
     * @const
     */
    "axis": "axis",

    /**
     * value: "epiphan"
     * @const
     */
    "epiphan": "epiphan",

    /**
     * value: "hauppauge"
     * @const
     */
    "hauppauge": "hauppauge",

    /**
     * value: "jvc"
     * @const
     */
    "jvc": "jvc",

    /**
     * value: "live_u"
     * @const
     */
    "live_u": "live_u",

    /**
     * value: "matrox"
     * @const
     */
    "matrox": "matrox",

    /**
     * value: "newtek_tricaster"
     * @const
     */
    "newtek_tricaster": "newtek_tricaster",

    /**
     * value: "osprey"
     * @const
     */
    "osprey": "osprey",

    /**
     * value: "sony"
     * @const
     */
    "sony": "sony",

    /**
     * value: "telestream_wirecast"
     * @const
     */
    "telestream_wirecast": "telestream_wirecast",

    /**
     * value: "teradek_cube"
     * @const
     */
    "teradek_cube": "teradek_cube",

    /**
     * value: "vmix"
     * @const
     */
    "vmix": "vmix",

    /**
     * value: "x_split"
     * @const
     */
    "x_split": "x_split",

    /**
     * value: "ipcamera"
     * @const
     */
    "ipcamera": "ipcamera",

    /**
     * value: "other_rtmp"
     * @const
     */
    "other_rtmp": "other_rtmp",

    /**
     * value: "other_rtsp"
     * @const
     */
    "other_rtsp": "other_rtsp"
};


/**
 * Allowed values for the <code>player_logo_position</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream7['PlayerLogoPositionEnum'] = {

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right"
};


/**
 * Allowed values for the <code>target_delivery_protocol</code> property.
 * @enum {String}
 * @readonly
 */
LiveStream7['TargetDeliveryProtocolEnum'] = {

    /**
     * value: "hls-https"
     * @const
     */
    "https": "hls-https",

    /**
     * value: "hls-hds"
     * @const
     */
    "hds": "hls-hds"
};



export default LiveStream7;

