/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSchedule200Response from '../model/CreateSchedule200Response';
import DisableSchedule200Response from '../model/DisableSchedule200Response';
import EnableSchedule200Response from '../model/EnableSchedule200Response';
import Error401 from '../model/Error401';
import Error403 from '../model/Error403';
import Error404 from '../model/Error404';
import Error410 from '../model/Error410';
import Error422 from '../model/Error422';
import ScheduleCreateInput from '../model/ScheduleCreateInput';
import ScheduleUpdateInput from '../model/ScheduleUpdateInput';
import Schedules from '../model/Schedules';

/**
* Schedules service.
* @module api/SchedulesApi
* @version 1
*/
export default class SchedulesApi {

    /**
    * Constructs a new SchedulesApi. 
    * @alias module:api/SchedulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSchedule operation.
     * @callback module:api/SchedulesApi~createScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSchedule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a schedule
     * This operation creates a schedule.
     * @param {module:model/ScheduleCreateInput} schedule Provide the details of the schedule to create in the body of the request.
     * @param {module:api/SchedulesApi~createScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSchedule200Response}
     */
    createSchedule(schedule, callback) {
      let postBody = schedule;
      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling createSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSchedule200Response;
      return this.apiClient.callApi(
        '/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSchedule operation.
     * @callback module:api/SchedulesApi~deleteScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schedule
     * This operation deletes a schedule.
     * @param {String} id The unique alphanumeric string that identifies the schedule.
     * @param {module:api/SchedulesApi~deleteScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSchedule(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSchedule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableSchedule operation.
     * @callback module:api/SchedulesApi~disableScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableSchedule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a schedule
     * This operation disables a schedule.
     * @param {String} id The unique alphanumeric string that identifies the schedule.
     * @param {module:api/SchedulesApi~disableScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableSchedule200Response}
     */
    disableSchedule(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableSchedule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisableSchedule200Response;
      return this.apiClient.callApi(
        '/schedules/{id}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableSchedule operation.
     * @callback module:api/SchedulesApi~enableScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableSchedule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a schedule
     * This operation enables a schedule.
     * @param {String} id The unique alphanumeric string that identifies the schedule.
     * @param {module:api/SchedulesApi~enableScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableSchedule200Response}
     */
    enableSchedule(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableSchedule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnableSchedule200Response;
      return this.apiClient.callApi(
        '/schedules/{id}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSchedules operation.
     * @callback module:api/SchedulesApi~listSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all schedules
     * This operation shows the details of all of your schedules.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results.
     * @param {Number} [perPage] For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>.
     * @param {module:api/SchedulesApi~listSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schedules}
     */
    listSchedules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schedules;
      return this.apiClient.callApi(
        '/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showSchedule operation.
     * @callback module:api/SchedulesApi~showScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSchedule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a schedule
     * This operation shows the details of a specific schedule.
     * @param {String} id The unique alphanumeric string that identifies the schedule.
     * @param {module:api/SchedulesApi~showScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSchedule200Response}
     */
    showSchedule(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showSchedule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateSchedule200Response;
      return this.apiClient.callApi(
        '/schedules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showScheduleState operation.
     * @callback module:api/SchedulesApi~showScheduleStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableSchedule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the state of a schedule
     * This operation shows the current state of a schedule.
     * @param {String} id The unique alphanumeric string that identifies the schedule.
     * @param {module:api/SchedulesApi~showScheduleStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableSchedule200Response}
     */
    showScheduleState(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showScheduleState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnableSchedule200Response;
      return this.apiClient.callApi(
        '/schedules/{id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchedule operation.
     * @callback module:api/SchedulesApi~updateScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSchedule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a schedule
     * This operation updates a schedule.
     * @param {String} id The unique alphanumeric string that identifies the schedule.
     * @param {module:model/ScheduleUpdateInput} schedule Provide the details of the schedule to update in the body of the request.
     * @param {module:api/SchedulesApi~updateScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSchedule200Response}
     */
    updateSchedule(id, schedule, callback) {
      let postBody = schedule;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSchedule");
      }
      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling updateSchedule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSchedule200Response;
      return this.apiClient.callApi(
        '/schedules/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
