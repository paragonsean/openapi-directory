/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateStreamTarget200Response from '../model/CreateStreamTarget200Response';
import CreateStreamTargetProperty200Response from '../model/CreateStreamTargetProperty200Response';
import Error401 from '../model/Error401';
import Error403 from '../model/Error403';
import Error404 from '../model/Error404';
import Error410 from '../model/Error410';
import Error422 from '../model/Error422';
import GeoblockCreateInput from '../model/GeoblockCreateInput';
import GeoblockUpdateInput from '../model/GeoblockUpdateInput';
import RegenerateConnectionCodeStreamTarget200Response from '../model/RegenerateConnectionCodeStreamTarget200Response';
import ShowStreamTargetGeoblock200Response from '../model/ShowStreamTargetGeoblock200Response';
import ShowStreamTargetMetricsCurrent200Response from '../model/ShowStreamTargetMetricsCurrent200Response';
import ShowStreamTargetMetricsHistoric200Response from '../model/ShowStreamTargetMetricsHistoric200Response';
import ShowStreamTargetTokenAuth200Response from '../model/ShowStreamTargetTokenAuth200Response';
import StreamTargetCreateInput from '../model/StreamTargetCreateInput';
import StreamTargetProperties from '../model/StreamTargetProperties';
import StreamTargetPropertyCreateInput from '../model/StreamTargetPropertyCreateInput';
import StreamTargetUpdateInput from '../model/StreamTargetUpdateInput';
import StreamTargets from '../model/StreamTargets';
import TokenAuthCreateInput from '../model/TokenAuthCreateInput';
import TokenAuthUpdateInput from '../model/TokenAuthUpdateInput';
import WowzaStreamTargetInput from '../model/WowzaStreamTargetInput';

/**
* StreamTargets service.
* @module api/StreamTargetsApi
* @version 1
*/
export default class StreamTargetsApi {

    /**
    * Constructs a new StreamTargetsApi. 
    * @alias module:api/StreamTargetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStreamTarget operation.
     * @callback module:api/StreamTargetsApi~addStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated operation
     * POST /stream_targets/add/ is deprecated. To add a stream target, use POST /stream_targets instead.
     * @param {module:model/WowzaStreamTargetInput} streamTarget Provide the details of the stream target to add in the body of the request.
     * @param {module:api/StreamTargetsApi~addStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamTarget200Response}
     */
    addStreamTarget(streamTarget, callback) {
      let postBody = streamTarget;
      // verify the required parameter 'streamTarget' is set
      if (streamTarget === undefined || streamTarget === null) {
        throw new Error("Missing the required parameter 'streamTarget' when calling addStreamTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamTarget200Response;
      return this.apiClient.callApi(
        '/stream_targets/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamTarget operation.
     * @callback module:api/StreamTargetsApi~createStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a stream target
     * This operation creates a stream target. There are three types of targets that you can create: <strong>CustomStreamTarget</strong> for an an external, third-party destination; <strong>WowzaStreamTarget</strong> for a Wowza CDN target; or <strong>UltraLowLatencyStreamTarget</strong> for an ultra low latency Wowza CDN target. The availability of many parameters depends on the type of target you create.
     * @param {module:model/StreamTargetCreateInput} streamTarget Provide the details of the stream target to create in the body of the request.
     * @param {module:api/StreamTargetsApi~createStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamTarget200Response}
     */
    createStreamTarget(streamTarget, callback) {
      let postBody = streamTarget;
      // verify the required parameter 'streamTarget' is set
      if (streamTarget === undefined || streamTarget === null) {
        throw new Error("Missing the required parameter 'streamTarget' when calling createStreamTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamTarget200Response;
      return this.apiClient.callApi(
        '/stream_targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamTargetGeoblock operation.
     * @callback module:api/StreamTargetsApi~createStreamTargetGeoblockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetGeoblock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create geo-blocking for a stream target
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only stream targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> can be geo-blocked. For more information see the technical article [How to geo-block stream targets by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api).
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:model/GeoblockCreateInput} geoblock Provide the details of the geo-blocking to create in the body of the request.
     * @param {module:api/StreamTargetsApi~createStreamTargetGeoblockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetGeoblock200Response}
     */
    createStreamTargetGeoblock(streamTargetId, geoblock, callback) {
      let postBody = geoblock;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling createStreamTargetGeoblock");
      }
      // verify the required parameter 'geoblock' is set
      if (geoblock === undefined || geoblock === null) {
        throw new Error("Missing the required parameter 'geoblock' when calling createStreamTargetGeoblock");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetGeoblock200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/geoblock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamTargetProperty operation.
     * @callback module:api/StreamTargetsApi~createStreamTargetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamTargetProperty200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a property for a stream target
     * This operation creates a property for a stream target. Properties can be applied to a <strong>CustomStreamTarget</strong> or <strong>WowzaStreamTarget</strong> whose <em>provider</em> is <strong>akamai_cupertino</strong>. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:model/StreamTargetPropertyCreateInput} property Provide the details of the property to create in the body of the request.
     * @param {module:api/StreamTargetsApi~createStreamTargetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamTargetProperty200Response}
     */
    createStreamTargetProperty(streamTargetId, property, callback) {
      let postBody = property;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling createStreamTargetProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling createStreamTargetProperty");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamTargetProperty200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamTargetTokenAuth operation.
     * @callback module:api/StreamTargetsApi~createStreamTargetTokenAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetTokenAuth200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create token authorization for a stream target
     * This operation creates token authorization for a stream target. Only stream targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> can use token authorization. For more information see the technical article [How to protect stream targets with token authorization by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api).
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:model/TokenAuthCreateInput} tokenAuth Provide the details of the token authorization to create in the body of the request.
     * @param {module:api/StreamTargetsApi~createStreamTargetTokenAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetTokenAuth200Response}
     */
    createStreamTargetTokenAuth(streamTargetId, tokenAuth, callback) {
      let postBody = tokenAuth;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling createStreamTargetTokenAuth");
      }
      // verify the required parameter 'tokenAuth' is set
      if (tokenAuth === undefined || tokenAuth === null) {
        throw new Error("Missing the required parameter 'tokenAuth' when calling createStreamTargetTokenAuth");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetTokenAuth200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/token_auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStreamTarget operation.
     * @callback module:api/StreamTargetsApi~deleteStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stream target
     * This operation deletes a stream target.
     * @param {String} id The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~deleteStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStreamTarget(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStreamTarget");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/stream_targets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStreamTargetProperty operation.
     * @callback module:api/StreamTargetsApi~deleteStreamTargetPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stream target property
     * This operation removes a property from a stream target.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {String} id The unique string that identifies the stream target property. The string contains the <em>section</em> and the <em>key</em>, connected by a dash. For example, <strong>hls-chunkSize</strong>.
     * @param {module:api/StreamTargetsApi~deleteStreamTargetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStreamTargetProperty(streamTargetId, id, callback) {
      let postBody = null;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling deleteStreamTargetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStreamTargetProperty");
      }

      let pathParams = {
        'stream_target_id': streamTargetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/properties/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamTargetProperties operation.
     * @callback module:api/StreamTargetsApi~listStreamTargetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamTargetProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all properties of a stream target
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a <strong>CustomStreamTarget</strong> or <strong>WowzaStreamTarget</strong> whose <em>provider</em> is <strong>akamai_cupertino</strong>.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~listStreamTargetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamTargetProperties}
     */
    listStreamTargetProperties(streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling listStreamTargetProperties");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamTargetProperties;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamTargets operation.
     * @callback module:api/StreamTargetsApi~listStreamTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamTargets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all stream targets
     * This operation lists the details of all of your stream targets.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results.
     * @param {Number} [perPage] For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>.
     * @param {module:api/StreamTargetsApi~listStreamTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamTargets}
     */
    listStreamTargets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamTargets;
      return this.apiClient.callApi(
        '/stream_targets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateConnectionCodeStreamTarget operation.
     * @callback module:api/StreamTargetsApi~regenerateConnectionCodeStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegenerateConnectionCodeStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate the connection code for a stream target
     * This operation regenerates the connection code of a stream target.
     * @param {String} id The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~regenerateConnectionCodeStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegenerateConnectionCodeStreamTarget200Response}
     */
    regenerateConnectionCodeStreamTarget(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling regenerateConnectionCodeStreamTarget");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegenerateConnectionCodeStreamTarget200Response;
      return this.apiClient.callApi(
        '/stream_targets/{id}/regenerate_connection_code', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStreamTarget operation.
     * @callback module:api/StreamTargetsApi~showStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a stream target
     * This operation shows details of a specific stream target.
     * @param {String} id The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~showStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamTarget200Response}
     */
    showStreamTarget(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showStreamTarget");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateStreamTarget200Response;
      return this.apiClient.callApi(
        '/stream_targets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStreamTargetGeoblock operation.
     * @callback module:api/StreamTargetsApi~showStreamTargetGeoblockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetGeoblock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch geo-blocking for a stream target
     * This operation shows the details of geo-blocking applied to a specific stream target. Only stream targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> can be geo-blocked.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~showStreamTargetGeoblockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetGeoblock200Response}
     */
    showStreamTargetGeoblock(streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling showStreamTargetGeoblock");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetGeoblock200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/geoblock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStreamTargetMetricsCurrent operation.
     * @callback module:api/StreamTargetsApi~showStreamTargetMetricsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetMetricsCurrent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch current health metrics for an active Wowza ultra low latency stream target
     * This operation returns a snapshot of the current connection and throughput details for an active target whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>. The interval for current metrics is 30 seconds from the moment of the query.
     * @param {String} id The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~showStreamTargetMetricsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetMetricsCurrent200Response}
     */
    showStreamTargetMetricsCurrent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showStreamTargetMetricsCurrent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetMetricsCurrent200Response;
      return this.apiClient.callApi(
        '/stream_targets/{id}/metrics/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStreamTargetMetricsHistoric operation.
     * @callback module:api/StreamTargetsApi~showStreamTargetMetricsHistoricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetMetricsHistoric200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch historic health metrics for a Wowza ultra low latency stream target
     * This operation shows historic connection and throughput details for target whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong>.
     * @param {String} id The unique alphanumeric string that identifies the stream target.
     * @param {Object} opts Optional parameters
     * @param {String} [from] The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC.
     * @param {String} [to] The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC.
     * @param {module:model/String} [interval] The length of time for a block of metrics. The default is **10m** (10 minutes).
     * @param {module:api/StreamTargetsApi~showStreamTargetMetricsHistoricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetMetricsHistoric200Response}
     */
    showStreamTargetMetricsHistoric(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showStreamTargetMetricsHistoric");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'interval': opts['interval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetMetricsHistoric200Response;
      return this.apiClient.callApi(
        '/stream_targets/{id}/metrics/historic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStreamTargetProperty operation.
     * @callback module:api/StreamTargetsApi~showStreamTargetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamTargetProperty200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a property of a stream target
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a <strong>CustomStreamTarget</strong> or <strong>WowzaStreamTarget</strong> whose <em>provider</em> is <strong>akamai_cupertino</strong>.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {String} id The unique string that identifies the stream target property. The string contains the <em>section</em> and the <em>key</em>, connected by a dash. For example, <strong>hls-chunkSize</strong>.
     * @param {module:api/StreamTargetsApi~showStreamTargetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamTargetProperty200Response}
     */
    showStreamTargetProperty(streamTargetId, id, callback) {
      let postBody = null;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling showStreamTargetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showStreamTargetProperty");
      }

      let pathParams = {
        'stream_target_id': streamTargetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateStreamTargetProperty200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/properties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStreamTargetTokenAuth operation.
     * @callback module:api/StreamTargetsApi~showStreamTargetTokenAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetTokenAuth200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch token authorization for a stream target
     * This operation shows the details of the token authorization applied to a stream target. Only stream targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> can use token authorization.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/StreamTargetsApi~showStreamTargetTokenAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetTokenAuth200Response}
     */
    showStreamTargetTokenAuth(streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling showStreamTargetTokenAuth");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetTokenAuth200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/token_auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamTarget operation.
     * @callback module:api/StreamTargetsApi~updateStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a stream target
     * This operation updates a stream target.
     * @param {String} id The unique alphanumeric string that identifies the stream target.
     * @param {module:model/StreamTargetUpdateInput} streamTarget Provide the details of the stream target to update in the body of the request.
     * @param {module:api/StreamTargetsApi~updateStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamTarget200Response}
     */
    updateStreamTarget(id, streamTarget, callback) {
      let postBody = streamTarget;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStreamTarget");
      }
      // verify the required parameter 'streamTarget' is set
      if (streamTarget === undefined || streamTarget === null) {
        throw new Error("Missing the required parameter 'streamTarget' when calling updateStreamTarget");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamTarget200Response;
      return this.apiClient.callApi(
        '/stream_targets/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamTargetGeoblock operation.
     * @callback module:api/StreamTargetsApi~updateStreamTargetGeoblockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetGeoblock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update geo-blocking for a stream target
     * This operation updates the geo-blocking applied to a stream target. Only stream targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> can be geo-blocked.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:model/GeoblockUpdateInput} geoblock Provide the details of the geo-blocking to update in the body of the request.
     * @param {module:api/StreamTargetsApi~updateStreamTargetGeoblockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetGeoblock200Response}
     */
    updateStreamTargetGeoblock(streamTargetId, geoblock, callback) {
      let postBody = geoblock;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling updateStreamTargetGeoblock");
      }
      // verify the required parameter 'geoblock' is set
      if (geoblock === undefined || geoblock === null) {
        throw new Error("Missing the required parameter 'geoblock' when calling updateStreamTargetGeoblock");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetGeoblock200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/geoblock', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamTargetTokenAuth operation.
     * @callback module:api/StreamTargetsApi~updateStreamTargetTokenAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowStreamTargetTokenAuth200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update token authorization for a stream target
     * This operation updates the token authorization applied to a stream target. Only stream targets whose <em>type</em> is <strong>WowzaStreamTarget</strong> can use token authorization.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:model/TokenAuthUpdateInput} tokenAuth Provide the details of the token authorization to update in the body of the request.
     * @param {module:api/StreamTargetsApi~updateStreamTargetTokenAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowStreamTargetTokenAuth200Response}
     */
    updateStreamTargetTokenAuth(streamTargetId, tokenAuth, callback) {
      let postBody = tokenAuth;
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling updateStreamTargetTokenAuth");
      }
      // verify the required parameter 'tokenAuth' is set
      if (tokenAuth === undefined || tokenAuth === null) {
        throw new Error("Missing the required parameter 'tokenAuth' when calling updateStreamTargetTokenAuth");
      }

      let pathParams = {
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShowStreamTargetTokenAuth200Response;
      return this.apiClient.callApi(
        '/stream_targets/{stream_target_id}/token_auth', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
