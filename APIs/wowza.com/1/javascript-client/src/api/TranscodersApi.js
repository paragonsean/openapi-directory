/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddStreamTargetToTranscoderOutput200Response from '../model/AddStreamTargetToTranscoderOutput200Response';
import CreateTranscoder200Response from '../model/CreateTranscoder200Response';
import CreateTranscoderOutput200Response from '../model/CreateTranscoderOutput200Response';
import CreateTranscoderProperty200Response from '../model/CreateTranscoderProperty200Response';
import DisableAllStreamTargetsTranscoder200Response from '../model/DisableAllStreamTargetsTranscoder200Response';
import DisableTranscoderOutputOutputStreamTarget200Response from '../model/DisableTranscoderOutputOutputStreamTarget200Response';
import EnableTranscoderOutputOutputStreamTarget200Response from '../model/EnableTranscoderOutputOutputStreamTarget200Response';
import Error401 from '../model/Error401';
import Error403 from '../model/Error403';
import Error404 from '../model/Error404';
import Error410 from '../model/Error410';
import Error422 from '../model/Error422';
import ListTranscoderRecordings200Response from '../model/ListTranscoderRecordings200Response';
import ListTranscoderSchedules200Response from '../model/ListTranscoderSchedules200Response';
import OutputAddStreamTargetInput from '../model/OutputAddStreamTargetInput';
import OutputCreateInput from '../model/OutputCreateInput';
import OutputRemoveStreamTargetInput from '../model/OutputRemoveStreamTargetInput';
import OutputStreamTarget from '../model/OutputStreamTarget';
import OutputStreamTargetCreateInput from '../model/OutputStreamTargetCreateInput';
import OutputStreamTargetUpdateInput from '../model/OutputStreamTargetUpdateInput';
import OutputUpdateInput from '../model/OutputUpdateInput';
import Outputs from '../model/Outputs';
import ResetTranscoder200Response from '../model/ResetTranscoder200Response';
import RestartTranscoderOutputOutputStreamTarget200Response from '../model/RestartTranscoderOutputOutputStreamTarget200Response';
import ShowTranscoderState200Response from '../model/ShowTranscoderState200Response';
import ShowTranscoderStats200Response from '../model/ShowTranscoderStats200Response';
import ShowTranscoderThumbnailUrl200Response from '../model/ShowTranscoderThumbnailUrl200Response';
import ShowUptimeMetricsCurrent200Response from '../model/ShowUptimeMetricsCurrent200Response';
import ShowUptimeMetricsHistoric200Response from '../model/ShowUptimeMetricsHistoric200Response';
import StartTranscoder200Response from '../model/StartTranscoder200Response';
import TranscoderCreateInput from '../model/TranscoderCreateInput';
import TranscoderProperties from '../model/TranscoderProperties';
import TranscoderPropertyCreateInput from '../model/TranscoderPropertyCreateInput';
import TranscoderUpdateInput from '../model/TranscoderUpdateInput';
import Transcoders from '../model/Transcoders';
import Uptime from '../model/Uptime';
import Uptimes from '../model/Uptimes';

/**
* Transcoders service.
* @module api/TranscodersApi
* @version 1
*/
export default class TranscodersApi {

    /**
    * Constructs a new TranscodersApi. 
    * @alias module:api/TranscodersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStreamTargetToTranscoderOutput operation.
     * @callback module:api/TranscodersApi~addStreamTargetToTranscoderOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStreamTargetToTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated operation
     * The operation POST /transcoders/{transcoder_id}/outputs/{id}/add_stream_target is deprecated. Use POST /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets to add an existing stream target to an output.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the output rendition.
     * @param {module:model/OutputAddStreamTargetInput} outputStreamTarget Provide the details of the stream target to add in the body of the request.
     * @param {module:api/TranscodersApi~addStreamTargetToTranscoderOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStreamTargetToTranscoderOutput200Response}
     */
    addStreamTargetToTranscoderOutput(transcoderId, id, outputStreamTarget, callback) {
      let postBody = outputStreamTarget;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling addStreamTargetToTranscoderOutput");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addStreamTargetToTranscoderOutput");
      }
      // verify the required parameter 'outputStreamTarget' is set
      if (outputStreamTarget === undefined || outputStreamTarget === null) {
        throw new Error("Missing the required parameter 'outputStreamTarget' when calling addStreamTargetToTranscoderOutput");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddStreamTargetToTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{id}/add_stream_target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscoder operation.
     * @callback module:api/TranscodersApi~createTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transcoder
     * This operation creates a transcoder.
     * @param {module:model/TranscoderCreateInput} transcoder Provide the details of the transcoder to create in the body of the request.
     * @param {module:api/TranscodersApi~createTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoder200Response}
     */
    createTranscoder(transcoder, callback) {
      let postBody = transcoder;
      // verify the required parameter 'transcoder' is set
      if (transcoder === undefined || transcoder === null) {
        throw new Error("Missing the required parameter 'transcoder' when calling createTranscoder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscoderOutput operation.
     * @callback module:api/TranscodersApi~createTranscoderOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an output
     * This operation creates an output rendition for a specific transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {module:model/OutputCreateInput} output Provide the details of the output rendition to create in the body of the request.
     * @param {module:api/TranscodersApi~createTranscoderOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoderOutput200Response}
     */
    createTranscoderOutput(transcoderId, output, callback) {
      let postBody = output;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling createTranscoderOutput");
      }
      // verify the required parameter 'output' is set
      if (output === undefined || output === null) {
        throw new Error("Missing the required parameter 'output' when calling createTranscoderOutput");
      }

      let pathParams = {
        'transcoder_id': transcoderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~createTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStreamTargetToTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an output stream target
     * This operation creates an output stream target. Targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> can't be added to output renditions.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {module:model/OutputStreamTargetCreateInput} outputStreamTarget Provide the details of the output stream target to create in the body of the request. Targets whose <em>type</em> is <strong>UltraLowLatencyStreamTarget</strong> can't be added to output renditions.
     * @param {module:api/TranscodersApi~createTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStreamTargetToTranscoderOutput200Response}
     */
    createTranscoderOutputOutputStreamTarget(transcoderId, outputId, outputStreamTarget, callback) {
      let postBody = outputStreamTarget;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling createTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling createTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputStreamTarget' is set
      if (outputStreamTarget === undefined || outputStreamTarget === null) {
        throw new Error("Missing the required parameter 'outputStreamTarget' when calling createTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddStreamTargetToTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscoderProperty operation.
     * @callback module:api/TranscodersApi~createTranscoderPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoderProperty200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a property for a transcoder
     * This operation creates a property for a transcoder. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {module:model/TranscoderPropertyCreateInput} property Provide the details of the property to create in the body of the request.
     * @param {module:api/TranscodersApi~createTranscoderPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoderProperty200Response}
     */
    createTranscoderProperty(transcoderId, property, callback) {
      let postBody = property;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling createTranscoderProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling createTranscoderProperty");
      }

      let pathParams = {
        'transcoder_id': transcoderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTranscoderProperty200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscoder operation.
     * @callback module:api/TranscodersApi~deleteTranscoderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transcoder
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~deleteTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transcoders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscoderOutput operation.
     * @callback module:api/TranscodersApi~deleteTranscoderOutputCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an output
     * This operation deletes an output, including all of its assigned targets.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the output rendition.
     * @param {module:api/TranscodersApi~deleteTranscoderOutputCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscoderOutput(transcoderId, id, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling deleteTranscoderOutput");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTranscoderOutput");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~deleteTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an output stream target
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/TranscodersApi~deleteTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscoderOutputOutputStreamTarget(transcoderId, outputId, streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling deleteTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling deleteTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling deleteTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId,
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscoderProperty operation.
     * @callback module:api/TranscodersApi~deleteTranscoderPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transcoder's property
     * This operation deletes a specific property from a specific transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset.
     * @param {module:api/TranscodersApi~deleteTranscoderPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscoderProperty(transcoderId, id, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling deleteTranscoderProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTranscoderProperty");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/properties/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableAllStreamTargetsTranscoder operation.
     * @callback module:api/TranscodersApi~disableAllStreamTargetsTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableAllStreamTargetsTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a transcoder's stream targets
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~disableAllStreamTargetsTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableAllStreamTargetsTranscoder200Response}
     */
    disableAllStreamTargetsTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableAllStreamTargetsTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisableAllStreamTargetsTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/disable_all_stream_targets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~disableTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableTranscoderOutputOutputStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable an output stream target
     * This operation disables an output stream target.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/TranscodersApi~disableTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableTranscoderOutputOutputStreamTarget200Response}
     */
    disableTranscoderOutputOutputStreamTarget(transcoderId, outputId, streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling disableTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling disableTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling disableTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId,
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisableTranscoderOutputOutputStreamTarget200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableAllStreamTargetsTranscoder operation.
     * @callback module:api/TranscodersApi~enableAllStreamTargetsTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableAllStreamTargetsTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a transcoder's stream targets
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~enableAllStreamTargetsTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableAllStreamTargetsTranscoder200Response}
     */
    enableAllStreamTargetsTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableAllStreamTargetsTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisableAllStreamTargetsTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/enable_all_stream_targets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~enableTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableTranscoderOutputOutputStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable an output stream target
     * This operation enables an output stream target.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/TranscodersApi~enableTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableTranscoderOutputOutputStreamTarget200Response}
     */
    enableTranscoderOutputOutputStreamTarget(transcoderId, outputId, streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling enableTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling enableTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling enableTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId,
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnableTranscoderOutputOutputStreamTarget200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexUptimes operation.
     * @callback module:api/TranscodersApi~indexUptimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uptimes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all uptime records for a transcoder
     * This operation shows all of the uptime records for a specific transcoder. An <em>uptime record</em> identifies a specific transcoding session.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results.
     * @param {Number} [perPage] For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>.
     * @param {module:api/TranscodersApi~indexUptimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uptimes}
     */
    indexUptimes(transcoderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling indexUptimes");
      }

      let pathParams = {
        'transcoder_id': transcoderId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Uptimes;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/uptimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscoderOutputOutputStreamTargets operation.
     * @callback module:api/TranscodersApi~listTranscoderOutputOutputStreamTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputStreamTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all output stream targets of an output of a transcoder
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {module:api/TranscodersApi~listTranscoderOutputOutputStreamTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputStreamTarget}
     */
    listTranscoderOutputOutputStreamTargets(transcoderId, outputId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling listTranscoderOutputOutputStreamTargets");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling listTranscoderOutputOutputStreamTargets");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutputStreamTarget;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscoderOutputs operation.
     * @callback module:api/TranscodersApi~listTranscoderOutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Outputs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all outputs of a transcoder
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~listTranscoderOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Outputs}
     */
    listTranscoderOutputs(transcoderId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling listTranscoderOutputs");
      }

      let pathParams = {
        'transcoder_id': transcoderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Outputs;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscoderProperties operation.
     * @callback module:api/TranscodersApi~listTranscoderPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranscoderProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a transcoder's properties
     * This operation shows all of the properties of a specific transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~listTranscoderPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranscoderProperties}
     */
    listTranscoderProperties(transcoderId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling listTranscoderProperties");
      }

      let pathParams = {
        'transcoder_id': transcoderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TranscoderProperties;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscoderRecordings operation.
     * @callback module:api/TranscodersApi~listTranscoderRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTranscoderRecordings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a transcoder's recordings
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~listTranscoderRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTranscoderRecordings200Response}
     */
    listTranscoderRecordings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTranscoderRecordings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTranscoderRecordings200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscoderSchedules operation.
     * @callback module:api/TranscodersApi~listTranscoderSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTranscoderSchedules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch transcoder's schedules
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~listTranscoderSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTranscoderSchedules200Response}
     */
    listTranscoderSchedules(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTranscoderSchedules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTranscoderSchedules200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscoders operation.
     * @callback module:api/TranscodersApi~listTranscodersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcoders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all transcoders
     * This operation shows the details of all of your transcoders.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results.
     * @param {Number} [perPage] For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>.
     * @param {module:api/TranscodersApi~listTranscodersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcoders}
     */
    listTranscoders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transcoders;
      return this.apiClient.callApi(
        '/transcoders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeStreamTargetToTranscoderOutput operation.
     * @callback module:api/TranscodersApi~removeStreamTargetToTranscoderOutputCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated operation
     * The operation DELETE /transcoders/{transcoder_id}/outputs/{id}/remove_stream_target is deprecated. Use DELETE /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{id} to remove a stream target from an output.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the output rendition.
     * @param {module:model/OutputRemoveStreamTargetInput} outputStreamTarget Provide the details of the stream target to remove in the body of the request.
     * @param {module:api/TranscodersApi~removeStreamTargetToTranscoderOutputCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeStreamTargetToTranscoderOutput(transcoderId, id, outputStreamTarget, callback) {
      let postBody = outputStreamTarget;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling removeStreamTargetToTranscoderOutput");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeStreamTargetToTranscoderOutput");
      }
      // verify the required parameter 'outputStreamTarget' is set
      if (outputStreamTarget === undefined || outputStreamTarget === null) {
        throw new Error("Missing the required parameter 'outputStreamTarget' when calling removeStreamTargetToTranscoderOutput");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{id}/remove_stream_target', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetTranscoder operation.
     * @callback module:api/TranscodersApi~resetTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a transcoder
     * This operation resets a transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~resetTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetTranscoder200Response}
     */
    resetTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResetTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~restartTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestartTranscoderOutputOutputStreamTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart an output stream target
     * This operation restarts an output stream target.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/TranscodersApi~restartTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestartTranscoderOutputOutputStreamTarget200Response}
     */
    restartTranscoderOutputOutputStreamTarget(transcoderId, outputId, streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling restartTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling restartTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling restartTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId,
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestartTranscoderOutputOutputStreamTarget200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoder operation.
     * @callback module:api/TranscodersApi~showTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a transcoder
     * This operation shows the details of a specific transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~showTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoder200Response}
     */
    showTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoderOutput operation.
     * @callback module:api/TranscodersApi~showTranscoderOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an output
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the output rendition.
     * @param {module:api/TranscodersApi~showTranscoderOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoderOutput200Response}
     */
    showTranscoderOutput(transcoderId, id, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling showTranscoderOutput");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTranscoderOutput");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~showTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStreamTargetToTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an output stream target
     * This operation shows the details of an output stream target.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:api/TranscodersApi~showTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStreamTargetToTranscoderOutput200Response}
     */
    showTranscoderOutputOutputStreamTarget(transcoderId, outputId, streamTargetId, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling showTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling showTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling showTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId,
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddStreamTargetToTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoderProperty operation.
     * @callback module:api/TranscodersApi~showTranscoderPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoderProperty200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a property for a transcoder
     * This operation shows the details of a specific property for a specific transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset.
     * @param {module:api/TranscodersApi~showTranscoderPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoderProperty200Response}
     */
    showTranscoderProperty(transcoderId, id, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling showTranscoderProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTranscoderProperty");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTranscoderProperty200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/properties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoderState operation.
     * @callback module:api/TranscodersApi~showTranscoderStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowTranscoderState200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the state and uptime ID of a transcoder
     * This operation shows the current state and uptime ID of a transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~showTranscoderStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowTranscoderState200Response}
     */
    showTranscoderState(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTranscoderState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowTranscoderState200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoderStats operation.
     * @callback module:api/TranscodersApi~showTranscoderStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowTranscoderStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch statistics for a current transcoder
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a <strong>status</strong>, <strong>text</strong> (description), <strong>units</strong>, and <strong>value</strong>.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~showTranscoderStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowTranscoderStats200Response}
     */
    showTranscoderStats(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTranscoderStats");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowTranscoderStats200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTranscoderThumbnailUrl operation.
     * @callback module:api/TranscodersApi~showTranscoderThumbnailUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowTranscoderThumbnailUrl200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the thumbnail URL of a transcoder
     * This operation shows the thumbnail URL of a started transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~showTranscoderThumbnailUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowTranscoderThumbnailUrl200Response}
     */
    showTranscoderThumbnailUrl(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTranscoderThumbnailUrl");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowTranscoderThumbnailUrl200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/thumbnail_url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showUptime operation.
     * @callback module:api/TranscodersApi~showUptimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uptime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an uptime record
     * This operation shows the details of a specific uptime record for a specific transcoder. An <em>uptime record</em> identifies a transcoding session.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the uptime record.
     * @param {module:api/TranscodersApi~showUptimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uptime}
     */
    showUptime(transcoderId, id, callback) {
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling showUptime");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showUptime");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Uptime;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/uptimes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showUptimeMetricsCurrent operation.
     * @callback module:api/TranscodersApi~showUptimeMetricsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowUptimeMetricsCurrent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch current stream health metrics for an active transcoder
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the uptime record.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] A comma-separated list of fields to return.
     * @param {module:api/TranscodersApi~showUptimeMetricsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowUptimeMetricsCurrent200Response}
     */
    showUptimeMetricsCurrent(transcoderId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling showUptimeMetricsCurrent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showUptimeMetricsCurrent");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowUptimeMetricsCurrent200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/uptimes/{id}/metrics/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showUptimeMetricsHistoric operation.
     * @callback module:api/TranscodersApi~showUptimeMetricsHistoricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowUptimeMetricsHistoric200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch historic stream health metrics for a transcoder
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the uptime record.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] A comma-separated list of fields to return.
     * @param {String} [from] The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC.
     * @param {String} [to] The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC.
     * @param {module:api/TranscodersApi~showUptimeMetricsHistoricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowUptimeMetricsHistoric200Response}
     */
    showUptimeMetricsHistoric(transcoderId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling showUptimeMetricsHistoric");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showUptimeMetricsHistoric");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowUptimeMetricsHistoric200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/uptimes/{id}/metrics/historic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTranscoder operation.
     * @callback module:api/TranscodersApi~startTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a transcoder
     * This operation starts a transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~startTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTranscoder200Response}
     */
    startTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTranscoder operation.
     * @callback module:api/TranscodersApi~stopTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a transcoder
     * This operation stops a transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:api/TranscodersApi~stopTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTranscoder200Response}
     */
    stopTranscoder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTranscoder operation.
     * @callback module:api/TranscodersApi~updateTranscoderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transcoder
     * This operation updates a transcoder.
     * @param {String} id The unique alphanumeric string that identifies the transcoder.
     * @param {module:model/TranscoderUpdateInput} transcoder Provide the details of the transcoder to update in the body of the request.
     * @param {module:api/TranscodersApi~updateTranscoderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoder200Response}
     */
    updateTranscoder(id, transcoder, callback) {
      let postBody = transcoder;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTranscoder");
      }
      // verify the required parameter 'transcoder' is set
      if (transcoder === undefined || transcoder === null) {
        throw new Error("Missing the required parameter 'transcoder' when calling updateTranscoder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTranscoder200Response;
      return this.apiClient.callApi(
        '/transcoders/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTranscoderOutput operation.
     * @callback module:api/TranscodersApi~updateTranscoderOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an output
     * This operation updates an output rendition.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} id The unique alphanumeric string that identifies the output rendition.
     * @param {module:model/OutputUpdateInput} output Provide the details of the output rendition to update in the body of the request.
     * @param {module:api/TranscodersApi~updateTranscoderOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTranscoderOutput200Response}
     */
    updateTranscoderOutput(transcoderId, id, output, callback) {
      let postBody = output;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling updateTranscoderOutput");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTranscoderOutput");
      }
      // verify the required parameter 'output' is set
      if (output === undefined || output === null) {
        throw new Error("Missing the required parameter 'output' when calling updateTranscoderOutput");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTranscoderOutputOutputStreamTarget operation.
     * @callback module:api/TranscodersApi~updateTranscoderOutputOutputStreamTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStreamTargetToTranscoderOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an output stream target
     * This operation updates an output stream target.
     * @param {String} transcoderId The unique alphanumeric string that identifies the transcoder.
     * @param {String} outputId The unique alphanumeric string that identifies the output rendition.
     * @param {String} streamTargetId The unique alphanumeric string that identifies the stream target.
     * @param {module:model/OutputStreamTargetUpdateInput} outputStreamTarget Provide the details of the output stream target to update in the body of the request.
     * @param {module:api/TranscodersApi~updateTranscoderOutputOutputStreamTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStreamTargetToTranscoderOutput200Response}
     */
    updateTranscoderOutputOutputStreamTarget(transcoderId, outputId, streamTargetId, outputStreamTarget, callback) {
      let postBody = outputStreamTarget;
      // verify the required parameter 'transcoderId' is set
      if (transcoderId === undefined || transcoderId === null) {
        throw new Error("Missing the required parameter 'transcoderId' when calling updateTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputId' is set
      if (outputId === undefined || outputId === null) {
        throw new Error("Missing the required parameter 'outputId' when calling updateTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'streamTargetId' is set
      if (streamTargetId === undefined || streamTargetId === null) {
        throw new Error("Missing the required parameter 'streamTargetId' when calling updateTranscoderOutputOutputStreamTarget");
      }
      // verify the required parameter 'outputStreamTarget' is set
      if (outputStreamTarget === undefined || outputStreamTarget === null) {
        throw new Error("Missing the required parameter 'outputStreamTarget' when calling updateTranscoderOutputOutputStreamTarget");
      }

      let pathParams = {
        'transcoder_id': transcoderId,
        'output_id': outputId,
        'stream_target_id': streamTargetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddStreamTargetToTranscoderOutput200Response;
      return this.apiClient.callApi(
        '/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
