/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error401 from '../model/Error401';
import UsageNetworkStreamSources from '../model/UsageNetworkStreamSources';
import UsageNetworkStreamTargets from '../model/UsageNetworkStreamTargets';
import UsageNetworkTranscoders from '../model/UsageNetworkTranscoders';

/**
* Network service.
* @module api/NetworkApi
* @version 1
*/
export default class NetworkApi {

    /**
    * Constructs a new NetworkApi. 
    * @alias module:api/NetworkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usageNetworkStreamSourcesIndex operation.
     * @callback module:api/NetworkApi~usageNetworkStreamSourcesIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageNetworkStreamSources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch network usage for all stream sources
     * This operation shows the amount of network usage for all stream sources in the account. The default time frame is <em>from</em> the last billing date <em>to</em> the end of the current day.
     * @param {Object} opts Optional parameters
     * @param {Date} [from] The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date.
     * @param {Date} [to] The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day.
     * @param {module:api/NetworkApi~usageNetworkStreamSourcesIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageNetworkStreamSources}
     */
    usageNetworkStreamSourcesIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageNetworkStreamSources;
      return this.apiClient.callApi(
        '/usage/network/stream_sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageNetworkStreamTargetsIndex operation.
     * @callback module:api/NetworkApi~usageNetworkStreamTargetsIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageNetworkStreamTargets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch network usage for all stream targets
     * This operation shows the amount of network usage for all stream targets in the account cumulatively and individually. The default time frame is <em>from</em> the last billing date <em>to</em> the end of the current day.
     * @param {Object} opts Optional parameters
     * @param {Date} [from] The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date.
     * @param {Date} [to] The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day.
     * @param {module:api/NetworkApi~usageNetworkStreamTargetsIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageNetworkStreamTargets}
     */
    usageNetworkStreamTargetsIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageNetworkStreamTargets;
      return this.apiClient.callApi(
        '/usage/network/stream_targets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageNetworkTranscodersIndex operation.
     * @callback module:api/NetworkApi~usageNetworkTranscodersIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageNetworkTranscoders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch network usage for all transcoders
     * This operation shows the amount of network usage (egress) for all transcoders in the account. The default time frame is <em>from</em> the last billing date <em>to</em> the end of the current day.
     * @param {Object} opts Optional parameters
     * @param {Date} [from] The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date.
     * @param {Date} [to] The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day.
     * @param {module:model/String} [transcoderType] The type of transcoder. The default is <strong>transcoded</strong>.
     * @param {module:model/String} [billingMode] The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>.
     * @param {module:api/NetworkApi~usageNetworkTranscodersIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageNetworkTranscoders}
     */
    usageNetworkTranscodersIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'transcoder_type': opts['transcoderType'],
        'billing_mode': opts['billingMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['wsc-api-key', 'wsc-access-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageNetworkTranscoders;
      return this.apiClient.callApi(
        '/usage/network/transcoders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
