/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WowzaStreamingCloudRestApiReferenceDocumentation);
  }
}(this, function(expect, WowzaStreamingCloudRestApiReferenceDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WowzaStreamingCloudRestApiReferenceDocumentation.TranscodersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TranscodersApi', function() {
    describe('addStreamTargetToTranscoderOutput', function() {
      it('should call addStreamTargetToTranscoderOutput successfully', function(done) {
        //uncomment below and update the code to test addStreamTargetToTranscoderOutput
        //instance.addStreamTargetToTranscoderOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTranscoder', function() {
      it('should call createTranscoder successfully', function(done) {
        //uncomment below and update the code to test createTranscoder
        //instance.createTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTranscoderOutput', function() {
      it('should call createTranscoderOutput successfully', function(done) {
        //uncomment below and update the code to test createTranscoderOutput
        //instance.createTranscoderOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTranscoderOutputOutputStreamTarget', function() {
      it('should call createTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test createTranscoderOutputOutputStreamTarget
        //instance.createTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTranscoderProperty', function() {
      it('should call createTranscoderProperty successfully', function(done) {
        //uncomment below and update the code to test createTranscoderProperty
        //instance.createTranscoderProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTranscoder', function() {
      it('should call deleteTranscoder successfully', function(done) {
        //uncomment below and update the code to test deleteTranscoder
        //instance.deleteTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTranscoderOutput', function() {
      it('should call deleteTranscoderOutput successfully', function(done) {
        //uncomment below and update the code to test deleteTranscoderOutput
        //instance.deleteTranscoderOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTranscoderOutputOutputStreamTarget', function() {
      it('should call deleteTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test deleteTranscoderOutputOutputStreamTarget
        //instance.deleteTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTranscoderProperty', function() {
      it('should call deleteTranscoderProperty successfully', function(done) {
        //uncomment below and update the code to test deleteTranscoderProperty
        //instance.deleteTranscoderProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableAllStreamTargetsTranscoder', function() {
      it('should call disableAllStreamTargetsTranscoder successfully', function(done) {
        //uncomment below and update the code to test disableAllStreamTargetsTranscoder
        //instance.disableAllStreamTargetsTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableTranscoderOutputOutputStreamTarget', function() {
      it('should call disableTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test disableTranscoderOutputOutputStreamTarget
        //instance.disableTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableAllStreamTargetsTranscoder', function() {
      it('should call enableAllStreamTargetsTranscoder successfully', function(done) {
        //uncomment below and update the code to test enableAllStreamTargetsTranscoder
        //instance.enableAllStreamTargetsTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableTranscoderOutputOutputStreamTarget', function() {
      it('should call enableTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test enableTranscoderOutputOutputStreamTarget
        //instance.enableTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexUptimes', function() {
      it('should call indexUptimes successfully', function(done) {
        //uncomment below and update the code to test indexUptimes
        //instance.indexUptimes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTranscoderOutputOutputStreamTargets', function() {
      it('should call listTranscoderOutputOutputStreamTargets successfully', function(done) {
        //uncomment below and update the code to test listTranscoderOutputOutputStreamTargets
        //instance.listTranscoderOutputOutputStreamTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTranscoderOutputs', function() {
      it('should call listTranscoderOutputs successfully', function(done) {
        //uncomment below and update the code to test listTranscoderOutputs
        //instance.listTranscoderOutputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTranscoderProperties', function() {
      it('should call listTranscoderProperties successfully', function(done) {
        //uncomment below and update the code to test listTranscoderProperties
        //instance.listTranscoderProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTranscoderRecordings', function() {
      it('should call listTranscoderRecordings successfully', function(done) {
        //uncomment below and update the code to test listTranscoderRecordings
        //instance.listTranscoderRecordings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTranscoderSchedules', function() {
      it('should call listTranscoderSchedules successfully', function(done) {
        //uncomment below and update the code to test listTranscoderSchedules
        //instance.listTranscoderSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTranscoders', function() {
      it('should call listTranscoders successfully', function(done) {
        //uncomment below and update the code to test listTranscoders
        //instance.listTranscoders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeStreamTargetToTranscoderOutput', function() {
      it('should call removeStreamTargetToTranscoderOutput successfully', function(done) {
        //uncomment below and update the code to test removeStreamTargetToTranscoderOutput
        //instance.removeStreamTargetToTranscoderOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetTranscoder', function() {
      it('should call resetTranscoder successfully', function(done) {
        //uncomment below and update the code to test resetTranscoder
        //instance.resetTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartTranscoderOutputOutputStreamTarget', function() {
      it('should call restartTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test restartTranscoderOutputOutputStreamTarget
        //instance.restartTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoder', function() {
      it('should call showTranscoder successfully', function(done) {
        //uncomment below and update the code to test showTranscoder
        //instance.showTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoderOutput', function() {
      it('should call showTranscoderOutput successfully', function(done) {
        //uncomment below and update the code to test showTranscoderOutput
        //instance.showTranscoderOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoderOutputOutputStreamTarget', function() {
      it('should call showTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test showTranscoderOutputOutputStreamTarget
        //instance.showTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoderProperty', function() {
      it('should call showTranscoderProperty successfully', function(done) {
        //uncomment below and update the code to test showTranscoderProperty
        //instance.showTranscoderProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoderState', function() {
      it('should call showTranscoderState successfully', function(done) {
        //uncomment below and update the code to test showTranscoderState
        //instance.showTranscoderState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoderStats', function() {
      it('should call showTranscoderStats successfully', function(done) {
        //uncomment below and update the code to test showTranscoderStats
        //instance.showTranscoderStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showTranscoderThumbnailUrl', function() {
      it('should call showTranscoderThumbnailUrl successfully', function(done) {
        //uncomment below and update the code to test showTranscoderThumbnailUrl
        //instance.showTranscoderThumbnailUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showUptime', function() {
      it('should call showUptime successfully', function(done) {
        //uncomment below and update the code to test showUptime
        //instance.showUptime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showUptimeMetricsCurrent', function() {
      it('should call showUptimeMetricsCurrent successfully', function(done) {
        //uncomment below and update the code to test showUptimeMetricsCurrent
        //instance.showUptimeMetricsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showUptimeMetricsHistoric', function() {
      it('should call showUptimeMetricsHistoric successfully', function(done) {
        //uncomment below and update the code to test showUptimeMetricsHistoric
        //instance.showUptimeMetricsHistoric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTranscoder', function() {
      it('should call startTranscoder successfully', function(done) {
        //uncomment below and update the code to test startTranscoder
        //instance.startTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopTranscoder', function() {
      it('should call stopTranscoder successfully', function(done) {
        //uncomment below and update the code to test stopTranscoder
        //instance.stopTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTranscoder', function() {
      it('should call updateTranscoder successfully', function(done) {
        //uncomment below and update the code to test updateTranscoder
        //instance.updateTranscoder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTranscoderOutput', function() {
      it('should call updateTranscoderOutput successfully', function(done) {
        //uncomment below and update the code to test updateTranscoderOutput
        //instance.updateTranscoderOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTranscoderOutputOutputStreamTarget', function() {
      it('should call updateTranscoderOutputOutputStreamTarget successfully', function(done) {
        //uncomment below and update the code to test updateTranscoderOutputOutputStreamTarget
        //instance.updateTranscoderOutputOutputStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
