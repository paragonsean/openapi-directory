/**
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WowzaStreamingCloudRestApiReferenceDocumentation);
  }
}(this, function(expect, WowzaStreamingCloudRestApiReferenceDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WowzaStreamingCloudRestApiReferenceDocumentation.StreamTargetsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StreamTargetsApi', function() {
    describe('addStreamTarget', function() {
      it('should call addStreamTarget successfully', function(done) {
        //uncomment below and update the code to test addStreamTarget
        //instance.addStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStreamTarget', function() {
      it('should call createStreamTarget successfully', function(done) {
        //uncomment below and update the code to test createStreamTarget
        //instance.createStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStreamTargetGeoblock', function() {
      it('should call createStreamTargetGeoblock successfully', function(done) {
        //uncomment below and update the code to test createStreamTargetGeoblock
        //instance.createStreamTargetGeoblock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStreamTargetProperty', function() {
      it('should call createStreamTargetProperty successfully', function(done) {
        //uncomment below and update the code to test createStreamTargetProperty
        //instance.createStreamTargetProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStreamTargetTokenAuth', function() {
      it('should call createStreamTargetTokenAuth successfully', function(done) {
        //uncomment below and update the code to test createStreamTargetTokenAuth
        //instance.createStreamTargetTokenAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStreamTarget', function() {
      it('should call deleteStreamTarget successfully', function(done) {
        //uncomment below and update the code to test deleteStreamTarget
        //instance.deleteStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStreamTargetProperty', function() {
      it('should call deleteStreamTargetProperty successfully', function(done) {
        //uncomment below and update the code to test deleteStreamTargetProperty
        //instance.deleteStreamTargetProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStreamTargetProperties', function() {
      it('should call listStreamTargetProperties successfully', function(done) {
        //uncomment below and update the code to test listStreamTargetProperties
        //instance.listStreamTargetProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStreamTargets', function() {
      it('should call listStreamTargets successfully', function(done) {
        //uncomment below and update the code to test listStreamTargets
        //instance.listStreamTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regenerateConnectionCodeStreamTarget', function() {
      it('should call regenerateConnectionCodeStreamTarget successfully', function(done) {
        //uncomment below and update the code to test regenerateConnectionCodeStreamTarget
        //instance.regenerateConnectionCodeStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showStreamTarget', function() {
      it('should call showStreamTarget successfully', function(done) {
        //uncomment below and update the code to test showStreamTarget
        //instance.showStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showStreamTargetGeoblock', function() {
      it('should call showStreamTargetGeoblock successfully', function(done) {
        //uncomment below and update the code to test showStreamTargetGeoblock
        //instance.showStreamTargetGeoblock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showStreamTargetMetricsCurrent', function() {
      it('should call showStreamTargetMetricsCurrent successfully', function(done) {
        //uncomment below and update the code to test showStreamTargetMetricsCurrent
        //instance.showStreamTargetMetricsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showStreamTargetMetricsHistoric', function() {
      it('should call showStreamTargetMetricsHistoric successfully', function(done) {
        //uncomment below and update the code to test showStreamTargetMetricsHistoric
        //instance.showStreamTargetMetricsHistoric(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showStreamTargetProperty', function() {
      it('should call showStreamTargetProperty successfully', function(done) {
        //uncomment below and update the code to test showStreamTargetProperty
        //instance.showStreamTargetProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showStreamTargetTokenAuth', function() {
      it('should call showStreamTargetTokenAuth successfully', function(done) {
        //uncomment below and update the code to test showStreamTargetTokenAuth
        //instance.showStreamTargetTokenAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStreamTarget', function() {
      it('should call updateStreamTarget successfully', function(done) {
        //uncomment below and update the code to test updateStreamTarget
        //instance.updateStreamTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStreamTargetGeoblock', function() {
      it('should call updateStreamTargetGeoblock successfully', function(done) {
        //uncomment below and update the code to test updateStreamTargetGeoblock
        //instance.updateStreamTargetGeoblock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStreamTargetTokenAuth', function() {
      it('should call updateStreamTargetTokenAuth successfully', function(done) {
        //uncomment below and update the code to test updateStreamTargetTokenAuth
        //instance.updateStreamTargetTokenAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
