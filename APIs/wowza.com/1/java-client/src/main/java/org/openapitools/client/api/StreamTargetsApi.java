/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateStreamTarget200Response;
import org.openapitools.client.model.CreateStreamTargetProperty200Response;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.Error403;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error410;
import org.openapitools.client.model.Error422;
import org.openapitools.client.model.GeoblockCreateInput;
import org.openapitools.client.model.GeoblockUpdateInput;
import org.openapitools.client.model.RegenerateConnectionCodeStreamTarget200Response;
import org.openapitools.client.model.ShowStreamTargetGeoblock200Response;
import org.openapitools.client.model.ShowStreamTargetMetricsCurrent200Response;
import org.openapitools.client.model.ShowStreamTargetMetricsHistoric200Response;
import org.openapitools.client.model.ShowStreamTargetTokenAuth200Response;
import org.openapitools.client.model.StreamTargetCreateInput;
import org.openapitools.client.model.StreamTargetProperties;
import org.openapitools.client.model.StreamTargetPropertyCreateInput;
import org.openapitools.client.model.StreamTargetUpdateInput;
import org.openapitools.client.model.StreamTargets;
import org.openapitools.client.model.TokenAuthCreateInput;
import org.openapitools.client.model.TokenAuthUpdateInput;
import org.openapitools.client.model.WowzaStreamTargetInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamTargetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamTargetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamTargetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addStreamTarget
     * @param streamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call addStreamTargetCall(WowzaStreamTargetInput streamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamTarget;

        // create path and map variables
        String localVarPath = "/stream_targets/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call addStreamTargetValidateBeforeCall(WowzaStreamTargetInput streamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTarget' is set
        if (streamTarget == null) {
            throw new ApiException("Missing the required parameter 'streamTarget' when calling addStreamTarget(Async)");
        }

        return addStreamTargetCall(streamTarget, _callback);

    }

    /**
     * Deprecated operation
     * POST /stream_targets/add/ is deprecated. To add a stream target, use POST /stream_targets instead.
     * @param streamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @return CreateStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateStreamTarget200Response addStreamTarget(WowzaStreamTargetInput streamTarget) throws ApiException {
        ApiResponse<CreateStreamTarget200Response> localVarResp = addStreamTargetWithHttpInfo(streamTarget);
        return localVarResp.getData();
    }

    /**
     * Deprecated operation
     * POST /stream_targets/add/ is deprecated. To add a stream target, use POST /stream_targets instead.
     * @param streamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @return ApiResponse&lt;CreateStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateStreamTarget200Response> addStreamTargetWithHttpInfo(WowzaStreamTargetInput streamTarget) throws ApiException {
        okhttp3.Call localVarCall = addStreamTargetValidateBeforeCall(streamTarget, null);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecated operation (asynchronously)
     * POST /stream_targets/add/ is deprecated. To add a stream target, use POST /stream_targets instead.
     * @param streamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call addStreamTargetAsync(WowzaStreamTargetInput streamTarget, final ApiCallback<CreateStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addStreamTargetValidateBeforeCall(streamTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamTarget
     * @param streamTarget Provide the details of the stream target to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetCall(StreamTargetCreateInput streamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamTarget;

        // create path and map variables
        String localVarPath = "/stream_targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamTargetValidateBeforeCall(StreamTargetCreateInput streamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTarget' is set
        if (streamTarget == null) {
            throw new ApiException("Missing the required parameter 'streamTarget' when calling createStreamTarget(Async)");
        }

        return createStreamTargetCall(streamTarget, _callback);

    }

    /**
     * Create a stream target
     * This operation creates a stream target. There are three types of targets that you can create: &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; for an an external, third-party destination; &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; for a Wowza CDN target; or &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; for an ultra low latency Wowza CDN target. The availability of many parameters depends on the type of target you create.
     * @param streamTarget Provide the details of the stream target to create in the body of the request. (required)
     * @return CreateStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamTarget200Response createStreamTarget(StreamTargetCreateInput streamTarget) throws ApiException {
        ApiResponse<CreateStreamTarget200Response> localVarResp = createStreamTargetWithHttpInfo(streamTarget);
        return localVarResp.getData();
    }

    /**
     * Create a stream target
     * This operation creates a stream target. There are three types of targets that you can create: &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; for an an external, third-party destination; &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; for a Wowza CDN target; or &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; for an ultra low latency Wowza CDN target. The availability of many parameters depends on the type of target you create.
     * @param streamTarget Provide the details of the stream target to create in the body of the request. (required)
     * @return ApiResponse&lt;CreateStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamTarget200Response> createStreamTargetWithHttpInfo(StreamTargetCreateInput streamTarget) throws ApiException {
        okhttp3.Call localVarCall = createStreamTargetValidateBeforeCall(streamTarget, null);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a stream target (asynchronously)
     * This operation creates a stream target. There are three types of targets that you can create: &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; for an an external, third-party destination; &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; for a Wowza CDN target; or &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; for an ultra low latency Wowza CDN target. The availability of many parameters depends on the type of target you create.
     * @param streamTarget Provide the details of the stream target to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetAsync(StreamTargetCreateInput streamTarget, final ApiCallback<CreateStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamTargetValidateBeforeCall(streamTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamTargetGeoblock
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetGeoblockCall(String streamTargetId, GeoblockCreateInput geoblock, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geoblock;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/geoblock"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamTargetGeoblockValidateBeforeCall(String streamTargetId, GeoblockCreateInput geoblock, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling createStreamTargetGeoblock(Async)");
        }

        // verify the required parameter 'geoblock' is set
        if (geoblock == null) {
            throw new ApiException("Missing the required parameter 'geoblock' when calling createStreamTargetGeoblock(Async)");
        }

        return createStreamTargetGeoblockCall(streamTargetId, geoblock, _callback);

    }

    /**
     * Create geo-blocking for a stream target
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked. For more information see the technical article [How to geo-block stream targets by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @return ShowStreamTargetGeoblock200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetGeoblock200Response createStreamTargetGeoblock(String streamTargetId, GeoblockCreateInput geoblock) throws ApiException {
        ApiResponse<ShowStreamTargetGeoblock200Response> localVarResp = createStreamTargetGeoblockWithHttpInfo(streamTargetId, geoblock);
        return localVarResp.getData();
    }

    /**
     * Create geo-blocking for a stream target
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked. For more information see the technical article [How to geo-block stream targets by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @return ApiResponse&lt;ShowStreamTargetGeoblock200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetGeoblock200Response> createStreamTargetGeoblockWithHttpInfo(String streamTargetId, GeoblockCreateInput geoblock) throws ApiException {
        okhttp3.Call localVarCall = createStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetGeoblock200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create geo-blocking for a stream target (asynchronously)
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked. For more information see the technical article [How to geo-block stream targets by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetGeoblockAsync(String streamTargetId, GeoblockCreateInput geoblock, final ApiCallback<ShowStreamTargetGeoblock200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetGeoblock200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamTargetProperty
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetPropertyCall(String streamTargetId, StreamTargetPropertyCreateInput property, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = property;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamTargetPropertyValidateBeforeCall(String streamTargetId, StreamTargetPropertyCreateInput property, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling createStreamTargetProperty(Async)");
        }

        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling createStreamTargetProperty(Async)");
        }

        return createStreamTargetPropertyCall(streamTargetId, property, _callback);

    }

    /**
     * Create a property for a stream target
     * This operation creates a property for a stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @return CreateStreamTargetProperty200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamTargetProperty200Response createStreamTargetProperty(String streamTargetId, StreamTargetPropertyCreateInput property) throws ApiException {
        ApiResponse<CreateStreamTargetProperty200Response> localVarResp = createStreamTargetPropertyWithHttpInfo(streamTargetId, property);
        return localVarResp.getData();
    }

    /**
     * Create a property for a stream target
     * This operation creates a property for a stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @return ApiResponse&lt;CreateStreamTargetProperty200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamTargetProperty200Response> createStreamTargetPropertyWithHttpInfo(String streamTargetId, StreamTargetPropertyCreateInput property) throws ApiException {
        okhttp3.Call localVarCall = createStreamTargetPropertyValidateBeforeCall(streamTargetId, property, null);
        Type localVarReturnType = new TypeToken<CreateStreamTargetProperty200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a property for a stream target (asynchronously)
     * This operation creates a property for a stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetPropertyAsync(String streamTargetId, StreamTargetPropertyCreateInput property, final ApiCallback<CreateStreamTargetProperty200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamTargetPropertyValidateBeforeCall(streamTargetId, property, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamTargetProperty200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamTargetTokenAuth
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetTokenAuthCall(String streamTargetId, TokenAuthCreateInput tokenAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenAuth;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/token_auth"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamTargetTokenAuthValidateBeforeCall(String streamTargetId, TokenAuthCreateInput tokenAuth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling createStreamTargetTokenAuth(Async)");
        }

        // verify the required parameter 'tokenAuth' is set
        if (tokenAuth == null) {
            throw new ApiException("Missing the required parameter 'tokenAuth' when calling createStreamTargetTokenAuth(Async)");
        }

        return createStreamTargetTokenAuthCall(streamTargetId, tokenAuth, _callback);

    }

    /**
     * Create token authorization for a stream target
     * This operation creates token authorization for a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization. For more information see the technical article [How to protect stream targets with token authorization by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @return ShowStreamTargetTokenAuth200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetTokenAuth200Response createStreamTargetTokenAuth(String streamTargetId, TokenAuthCreateInput tokenAuth) throws ApiException {
        ApiResponse<ShowStreamTargetTokenAuth200Response> localVarResp = createStreamTargetTokenAuthWithHttpInfo(streamTargetId, tokenAuth);
        return localVarResp.getData();
    }

    /**
     * Create token authorization for a stream target
     * This operation creates token authorization for a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization. For more information see the technical article [How to protect stream targets with token authorization by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @return ApiResponse&lt;ShowStreamTargetTokenAuth200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetTokenAuth200Response> createStreamTargetTokenAuthWithHttpInfo(String streamTargetId, TokenAuthCreateInput tokenAuth) throws ApiException {
        okhttp3.Call localVarCall = createStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetTokenAuth200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create token authorization for a stream target (asynchronously)
     * This operation creates token authorization for a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization. For more information see the technical article [How to protect stream targets with token authorization by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api).
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamTargetTokenAuthAsync(String streamTargetId, TokenAuthCreateInput tokenAuth, final ApiCallback<ShowStreamTargetTokenAuth200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetTokenAuth200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamTargetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamTargetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamTarget(Async)");
        }

        return deleteStreamTargetCall(id, _callback);

    }

    /**
     * Delete a stream target
     * This operation deletes a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStreamTarget(String id) throws ApiException {
        deleteStreamTargetWithHttpInfo(id);
    }

    /**
     * Delete a stream target
     * This operation deletes a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStreamTargetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamTargetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a stream target (asynchronously)
     * This operation deletes a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamTargetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamTargetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamTargetProperty
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamTargetPropertyCall(String streamTargetId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties/{id}"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamTargetPropertyValidateBeforeCall(String streamTargetId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling deleteStreamTargetProperty(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamTargetProperty(Async)");
        }

        return deleteStreamTargetPropertyCall(streamTargetId, id, _callback);

    }

    /**
     * Delete a stream target property
     * This operation removes a property from a stream target.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStreamTargetProperty(String streamTargetId, String id) throws ApiException {
        deleteStreamTargetPropertyWithHttpInfo(streamTargetId, id);
    }

    /**
     * Delete a stream target property
     * This operation removes a property from a stream target.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStreamTargetPropertyWithHttpInfo(String streamTargetId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamTargetPropertyValidateBeforeCall(streamTargetId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a stream target property (asynchronously)
     * This operation removes a property from a stream target.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamTargetPropertyAsync(String streamTargetId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamTargetPropertyValidateBeforeCall(streamTargetId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStreamTargetProperties
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamTargetPropertiesCall(String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStreamTargetPropertiesValidateBeforeCall(String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling listStreamTargetProperties(Async)");
        }

        return listStreamTargetPropertiesCall(streamTargetId, _callback);

    }

    /**
     * Fetch all properties of a stream target
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public StreamTargetProperties listStreamTargetProperties(String streamTargetId) throws ApiException {
        ApiResponse<StreamTargetProperties> localVarResp = listStreamTargetPropertiesWithHttpInfo(streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Fetch all properties of a stream target
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamTargetProperties> listStreamTargetPropertiesWithHttpInfo(String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = listStreamTargetPropertiesValidateBeforeCall(streamTargetId, null);
        Type localVarReturnType = new TypeToken<StreamTargetProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all properties of a stream target (asynchronously)
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamTargetPropertiesAsync(String streamTargetId, final ApiCallback<StreamTargetProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStreamTargetPropertiesValidateBeforeCall(streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<StreamTargetProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStreamTargets
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamTargetsCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStreamTargetsValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listStreamTargetsCall(page, perPage, _callback);

    }

    /**
     * Fetch all stream targets
     * This operation lists the details of all of your stream targets.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @return StreamTargets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StreamTargets listStreamTargets(Integer page, Integer perPage) throws ApiException {
        ApiResponse<StreamTargets> localVarResp = listStreamTargetsWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Fetch all stream targets
     * This operation lists the details of all of your stream targets.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;StreamTargets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamTargets> listStreamTargetsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listStreamTargetsValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<StreamTargets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all stream targets (asynchronously)
     * This operation lists the details of all of your stream targets.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamTargetsAsync(Integer page, Integer perPage, final ApiCallback<StreamTargets> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStreamTargetsValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<StreamTargets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regenerateConnectionCodeStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateConnectionCodeStreamTargetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}/regenerate_connection_code"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateConnectionCodeStreamTargetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling regenerateConnectionCodeStreamTarget(Async)");
        }

        return regenerateConnectionCodeStreamTargetCall(id, _callback);

    }

    /**
     * Regenerate the connection code for a stream target
     * This operation regenerates the connection code of a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return RegenerateConnectionCodeStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public RegenerateConnectionCodeStreamTarget200Response regenerateConnectionCodeStreamTarget(String id) throws ApiException {
        ApiResponse<RegenerateConnectionCodeStreamTarget200Response> localVarResp = regenerateConnectionCodeStreamTargetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Regenerate the connection code for a stream target
     * This operation regenerates the connection code of a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;RegenerateConnectionCodeStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegenerateConnectionCodeStreamTarget200Response> regenerateConnectionCodeStreamTargetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = regenerateConnectionCodeStreamTargetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RegenerateConnectionCodeStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate the connection code for a stream target (asynchronously)
     * This operation regenerates the connection code of a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateConnectionCodeStreamTargetAsync(String id, final ApiCallback<RegenerateConnectionCodeStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateConnectionCodeStreamTargetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RegenerateConnectionCodeStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStreamTargetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTarget(Async)");
        }

        return showStreamTargetCall(id, _callback);

    }

    /**
     * Fetch a stream target
     * This operation shows details of a specific stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return CreateStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamTarget200Response showStreamTarget(String id) throws ApiException {
        ApiResponse<CreateStreamTarget200Response> localVarResp = showStreamTargetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a stream target
     * This operation shows details of a specific stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;CreateStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamTarget200Response> showStreamTargetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showStreamTargetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a stream target (asynchronously)
     * This operation shows details of a specific stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetAsync(String id, final ApiCallback<CreateStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStreamTargetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStreamTargetGeoblock
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetGeoblockCall(String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/geoblock"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStreamTargetGeoblockValidateBeforeCall(String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showStreamTargetGeoblock(Async)");
        }

        return showStreamTargetGeoblockCall(streamTargetId, _callback);

    }

    /**
     * Fetch geo-blocking for a stream target
     * This operation shows the details of geo-blocking applied to a specific stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ShowStreamTargetGeoblock200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetGeoblock200Response showStreamTargetGeoblock(String streamTargetId) throws ApiException {
        ApiResponse<ShowStreamTargetGeoblock200Response> localVarResp = showStreamTargetGeoblockWithHttpInfo(streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Fetch geo-blocking for a stream target
     * This operation shows the details of geo-blocking applied to a specific stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;ShowStreamTargetGeoblock200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetGeoblock200Response> showStreamTargetGeoblockWithHttpInfo(String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = showStreamTargetGeoblockValidateBeforeCall(streamTargetId, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetGeoblock200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch geo-blocking for a stream target (asynchronously)
     * This operation shows the details of geo-blocking applied to a specific stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetGeoblockAsync(String streamTargetId, final ApiCallback<ShowStreamTargetGeoblock200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStreamTargetGeoblockValidateBeforeCall(streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetGeoblock200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStreamTargetMetricsCurrent
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetMetricsCurrentCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}/metrics/current"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStreamTargetMetricsCurrentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTargetMetricsCurrent(Async)");
        }

        return showStreamTargetMetricsCurrentCall(id, _callback);

    }

    /**
     * Fetch current health metrics for an active Wowza ultra low latency stream target
     * This operation returns a snapshot of the current connection and throughput details for an active target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The interval for current metrics is 30 seconds from the moment of the query.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ShowStreamTargetMetricsCurrent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetMetricsCurrent200Response showStreamTargetMetricsCurrent(String id) throws ApiException {
        ApiResponse<ShowStreamTargetMetricsCurrent200Response> localVarResp = showStreamTargetMetricsCurrentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch current health metrics for an active Wowza ultra low latency stream target
     * This operation returns a snapshot of the current connection and throughput details for an active target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The interval for current metrics is 30 seconds from the moment of the query.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;ShowStreamTargetMetricsCurrent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetMetricsCurrent200Response> showStreamTargetMetricsCurrentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showStreamTargetMetricsCurrentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetMetricsCurrent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch current health metrics for an active Wowza ultra low latency stream target (asynchronously)
     * This operation returns a snapshot of the current connection and throughput details for an active target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The interval for current metrics is 30 seconds from the moment of the query.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetMetricsCurrentAsync(String id, final ApiCallback<ShowStreamTargetMetricsCurrent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStreamTargetMetricsCurrentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetMetricsCurrent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStreamTargetMetricsHistoric
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetMetricsHistoricCall(String id, String from, String to, String interval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}/metrics/historic"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStreamTargetMetricsHistoricValidateBeforeCall(String id, String from, String to, String interval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTargetMetricsHistoric(Async)");
        }

        return showStreamTargetMetricsHistoricCall(id, from, to, interval, _callback);

    }

    /**
     * Fetch historic health metrics for a Wowza ultra low latency stream target
     * This operation shows historic connection and throughput details for target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @return ShowStreamTargetMetricsHistoric200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetMetricsHistoric200Response showStreamTargetMetricsHistoric(String id, String from, String to, String interval) throws ApiException {
        ApiResponse<ShowStreamTargetMetricsHistoric200Response> localVarResp = showStreamTargetMetricsHistoricWithHttpInfo(id, from, to, interval);
        return localVarResp.getData();
    }

    /**
     * Fetch historic health metrics for a Wowza ultra low latency stream target
     * This operation shows historic connection and throughput details for target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @return ApiResponse&lt;ShowStreamTargetMetricsHistoric200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetMetricsHistoric200Response> showStreamTargetMetricsHistoricWithHttpInfo(String id, String from, String to, String interval) throws ApiException {
        okhttp3.Call localVarCall = showStreamTargetMetricsHistoricValidateBeforeCall(id, from, to, interval, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetMetricsHistoric200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch historic health metrics for a Wowza ultra low latency stream target (asynchronously)
     * This operation shows historic connection and throughput details for target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetMetricsHistoricAsync(String id, String from, String to, String interval, final ApiCallback<ShowStreamTargetMetricsHistoric200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStreamTargetMetricsHistoricValidateBeforeCall(id, from, to, interval, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetMetricsHistoric200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStreamTargetProperty
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetPropertyCall(String streamTargetId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties/{id}"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStreamTargetPropertyValidateBeforeCall(String streamTargetId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showStreamTargetProperty(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTargetProperty(Async)");
        }

        return showStreamTargetPropertyCall(streamTargetId, id, _callback);

    }

    /**
     * Fetch a property of a stream target
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return CreateStreamTargetProperty200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamTargetProperty200Response showStreamTargetProperty(String streamTargetId, String id) throws ApiException {
        ApiResponse<CreateStreamTargetProperty200Response> localVarResp = showStreamTargetPropertyWithHttpInfo(streamTargetId, id);
        return localVarResp.getData();
    }

    /**
     * Fetch a property of a stream target
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return ApiResponse&lt;CreateStreamTargetProperty200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamTargetProperty200Response> showStreamTargetPropertyWithHttpInfo(String streamTargetId, String id) throws ApiException {
        okhttp3.Call localVarCall = showStreamTargetPropertyValidateBeforeCall(streamTargetId, id, null);
        Type localVarReturnType = new TypeToken<CreateStreamTargetProperty200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a property of a stream target (asynchronously)
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetPropertyAsync(String streamTargetId, String id, final ApiCallback<CreateStreamTargetProperty200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStreamTargetPropertyValidateBeforeCall(streamTargetId, id, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamTargetProperty200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStreamTargetTokenAuth
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetTokenAuthCall(String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/token_auth"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStreamTargetTokenAuthValidateBeforeCall(String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showStreamTargetTokenAuth(Async)");
        }

        return showStreamTargetTokenAuthCall(streamTargetId, _callback);

    }

    /**
     * Fetch token authorization for a stream target
     * This operation shows the details of the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ShowStreamTargetTokenAuth200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetTokenAuth200Response showStreamTargetTokenAuth(String streamTargetId) throws ApiException {
        ApiResponse<ShowStreamTargetTokenAuth200Response> localVarResp = showStreamTargetTokenAuthWithHttpInfo(streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Fetch token authorization for a stream target
     * This operation shows the details of the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;ShowStreamTargetTokenAuth200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetTokenAuth200Response> showStreamTargetTokenAuthWithHttpInfo(String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = showStreamTargetTokenAuthValidateBeforeCall(streamTargetId, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetTokenAuth200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch token authorization for a stream target (asynchronously)
     * This operation shows the details of the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStreamTargetTokenAuthAsync(String streamTargetId, final ApiCallback<ShowStreamTargetTokenAuth200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStreamTargetTokenAuthValidateBeforeCall(streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetTokenAuth200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamTargetCall(String id, StreamTargetUpdateInput streamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamTarget;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamTargetValidateBeforeCall(String id, StreamTargetUpdateInput streamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStreamTarget(Async)");
        }

        // verify the required parameter 'streamTarget' is set
        if (streamTarget == null) {
            throw new ApiException("Missing the required parameter 'streamTarget' when calling updateStreamTarget(Async)");
        }

        return updateStreamTargetCall(id, streamTarget, _callback);

    }

    /**
     * Update a stream target
     * This operation updates a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @return CreateStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamTarget200Response updateStreamTarget(String id, StreamTargetUpdateInput streamTarget) throws ApiException {
        ApiResponse<CreateStreamTarget200Response> localVarResp = updateStreamTargetWithHttpInfo(id, streamTarget);
        return localVarResp.getData();
    }

    /**
     * Update a stream target
     * This operation updates a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;CreateStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamTarget200Response> updateStreamTargetWithHttpInfo(String id, StreamTargetUpdateInput streamTarget) throws ApiException {
        okhttp3.Call localVarCall = updateStreamTargetValidateBeforeCall(id, streamTarget, null);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a stream target (asynchronously)
     * This operation updates a stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamTargetAsync(String id, StreamTargetUpdateInput streamTarget, final ApiCallback<CreateStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamTargetValidateBeforeCall(id, streamTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamTargetGeoblock
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamTargetGeoblockCall(String streamTargetId, GeoblockUpdateInput geoblock, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geoblock;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/geoblock"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamTargetGeoblockValidateBeforeCall(String streamTargetId, GeoblockUpdateInput geoblock, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling updateStreamTargetGeoblock(Async)");
        }

        // verify the required parameter 'geoblock' is set
        if (geoblock == null) {
            throw new ApiException("Missing the required parameter 'geoblock' when calling updateStreamTargetGeoblock(Async)");
        }

        return updateStreamTargetGeoblockCall(streamTargetId, geoblock, _callback);

    }

    /**
     * Update geo-blocking for a stream target
     * This operation updates the geo-blocking applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @return ShowStreamTargetGeoblock200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetGeoblock200Response updateStreamTargetGeoblock(String streamTargetId, GeoblockUpdateInput geoblock) throws ApiException {
        ApiResponse<ShowStreamTargetGeoblock200Response> localVarResp = updateStreamTargetGeoblockWithHttpInfo(streamTargetId, geoblock);
        return localVarResp.getData();
    }

    /**
     * Update geo-blocking for a stream target
     * This operation updates the geo-blocking applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @return ApiResponse&lt;ShowStreamTargetGeoblock200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetGeoblock200Response> updateStreamTargetGeoblockWithHttpInfo(String streamTargetId, GeoblockUpdateInput geoblock) throws ApiException {
        okhttp3.Call localVarCall = updateStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetGeoblock200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update geo-blocking for a stream target (asynchronously)
     * This operation updates the geo-blocking applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamTargetGeoblockAsync(String streamTargetId, GeoblockUpdateInput geoblock, final ApiCallback<ShowStreamTargetGeoblock200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetGeoblock200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamTargetTokenAuth
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamTargetTokenAuthCall(String streamTargetId, TokenAuthUpdateInput tokenAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenAuth;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/token_auth"
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamTargetTokenAuthValidateBeforeCall(String streamTargetId, TokenAuthUpdateInput tokenAuth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling updateStreamTargetTokenAuth(Async)");
        }

        // verify the required parameter 'tokenAuth' is set
        if (tokenAuth == null) {
            throw new ApiException("Missing the required parameter 'tokenAuth' when calling updateStreamTargetTokenAuth(Async)");
        }

        return updateStreamTargetTokenAuthCall(streamTargetId, tokenAuth, _callback);

    }

    /**
     * Update token authorization for a stream target
     * This operation updates the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @return ShowStreamTargetTokenAuth200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ShowStreamTargetTokenAuth200Response updateStreamTargetTokenAuth(String streamTargetId, TokenAuthUpdateInput tokenAuth) throws ApiException {
        ApiResponse<ShowStreamTargetTokenAuth200Response> localVarResp = updateStreamTargetTokenAuthWithHttpInfo(streamTargetId, tokenAuth);
        return localVarResp.getData();
    }

    /**
     * Update token authorization for a stream target
     * This operation updates the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @return ApiResponse&lt;ShowStreamTargetTokenAuth200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowStreamTargetTokenAuth200Response> updateStreamTargetTokenAuthWithHttpInfo(String streamTargetId, TokenAuthUpdateInput tokenAuth) throws ApiException {
        okhttp3.Call localVarCall = updateStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, null);
        Type localVarReturnType = new TypeToken<ShowStreamTargetTokenAuth200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update token authorization for a stream target (asynchronously)
     * This operation updates the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamTargetTokenAuthAsync(String streamTargetId, TokenAuthUpdateInput tokenAuth, final ApiCallback<ShowStreamTargetTokenAuth200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, _callback);
        Type localVarReturnType = new TypeToken<ShowStreamTargetTokenAuth200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
