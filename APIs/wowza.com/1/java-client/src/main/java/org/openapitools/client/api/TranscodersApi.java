/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddStreamTargetToTranscoderOutput200Response;
import org.openapitools.client.model.CreateTranscoder200Response;
import org.openapitools.client.model.CreateTranscoderOutput200Response;
import org.openapitools.client.model.CreateTranscoderProperty200Response;
import org.openapitools.client.model.DisableAllStreamTargetsTranscoder200Response;
import org.openapitools.client.model.DisableTranscoderOutputOutputStreamTarget200Response;
import org.openapitools.client.model.EnableTranscoderOutputOutputStreamTarget200Response;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.Error403;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error410;
import org.openapitools.client.model.Error422;
import org.openapitools.client.model.ListTranscoderRecordings200Response;
import org.openapitools.client.model.ListTranscoderSchedules200Response;
import org.openapitools.client.model.OutputAddStreamTargetInput;
import org.openapitools.client.model.OutputCreateInput;
import org.openapitools.client.model.OutputRemoveStreamTargetInput;
import org.openapitools.client.model.OutputStreamTarget;
import org.openapitools.client.model.OutputStreamTargetCreateInput;
import org.openapitools.client.model.OutputStreamTargetUpdateInput;
import org.openapitools.client.model.OutputUpdateInput;
import org.openapitools.client.model.Outputs;
import org.openapitools.client.model.ResetTranscoder200Response;
import org.openapitools.client.model.RestartTranscoderOutputOutputStreamTarget200Response;
import org.openapitools.client.model.ShowTranscoderState200Response;
import org.openapitools.client.model.ShowTranscoderStats200Response;
import org.openapitools.client.model.ShowTranscoderThumbnailUrl200Response;
import org.openapitools.client.model.ShowUptimeMetricsCurrent200Response;
import org.openapitools.client.model.ShowUptimeMetricsHistoric200Response;
import org.openapitools.client.model.StartTranscoder200Response;
import org.openapitools.client.model.TranscoderCreateInput;
import org.openapitools.client.model.TranscoderProperties;
import org.openapitools.client.model.TranscoderPropertyCreateInput;
import org.openapitools.client.model.TranscoderUpdateInput;
import org.openapitools.client.model.Transcoders;
import org.openapitools.client.model.Uptime;
import org.openapitools.client.model.Uptimes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranscodersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TranscodersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranscodersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addStreamTargetToTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call addStreamTargetToTranscoderOutputCall(String transcoderId, String id, OutputAddStreamTargetInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outputStreamTarget;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}/add_stream_target"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call addStreamTargetToTranscoderOutputValidateBeforeCall(String transcoderId, String id, OutputAddStreamTargetInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling addStreamTargetToTranscoderOutput(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addStreamTargetToTranscoderOutput(Async)");
        }

        // verify the required parameter 'outputStreamTarget' is set
        if (outputStreamTarget == null) {
            throw new ApiException("Missing the required parameter 'outputStreamTarget' when calling addStreamTargetToTranscoderOutput(Async)");
        }

        return addStreamTargetToTranscoderOutputCall(transcoderId, id, outputStreamTarget, _callback);

    }

    /**
     * Deprecated operation
     * The operation POST /transcoders/{transcoder_id}/outputs/{id}/add_stream_target is deprecated. Use POST /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets to add an existing stream target to an output.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @return AddStreamTargetToTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AddStreamTargetToTranscoderOutput200Response addStreamTargetToTranscoderOutput(String transcoderId, String id, OutputAddStreamTargetInput outputStreamTarget) throws ApiException {
        ApiResponse<AddStreamTargetToTranscoderOutput200Response> localVarResp = addStreamTargetToTranscoderOutputWithHttpInfo(transcoderId, id, outputStreamTarget);
        return localVarResp.getData();
    }

    /**
     * Deprecated operation
     * The operation POST /transcoders/{transcoder_id}/outputs/{id}/add_stream_target is deprecated. Use POST /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets to add an existing stream target to an output.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @return ApiResponse&lt;AddStreamTargetToTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AddStreamTargetToTranscoderOutput200Response> addStreamTargetToTranscoderOutputWithHttpInfo(String transcoderId, String id, OutputAddStreamTargetInput outputStreamTarget) throws ApiException {
        okhttp3.Call localVarCall = addStreamTargetToTranscoderOutputValidateBeforeCall(transcoderId, id, outputStreamTarget, null);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecated operation (asynchronously)
     * The operation POST /transcoders/{transcoder_id}/outputs/{id}/add_stream_target is deprecated. Use POST /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets to add an existing stream target to an output.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to add in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call addStreamTargetToTranscoderOutputAsync(String transcoderId, String id, OutputAddStreamTargetInput outputStreamTarget, final ApiCallback<AddStreamTargetToTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addStreamTargetToTranscoderOutputValidateBeforeCall(transcoderId, id, outputStreamTarget, _callback);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTranscoder
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderCall(TranscoderCreateInput transcoder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transcoder;

        // create path and map variables
        String localVarPath = "/transcoders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTranscoderValidateBeforeCall(TranscoderCreateInput transcoder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoder' is set
        if (transcoder == null) {
            throw new ApiException("Missing the required parameter 'transcoder' when calling createTranscoder(Async)");
        }

        return createTranscoderCall(transcoder, _callback);

    }

    /**
     * Create a transcoder
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @return CreateTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoder200Response createTranscoder(TranscoderCreateInput transcoder) throws ApiException {
        ApiResponse<CreateTranscoder200Response> localVarResp = createTranscoderWithHttpInfo(transcoder);
        return localVarResp.getData();
    }

    /**
     * Create a transcoder
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @return ApiResponse&lt;CreateTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoder200Response> createTranscoderWithHttpInfo(TranscoderCreateInput transcoder) throws ApiException {
        okhttp3.Call localVarCall = createTranscoderValidateBeforeCall(transcoder, null);
        Type localVarReturnType = new TypeToken<CreateTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transcoder (asynchronously)
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderAsync(TranscoderCreateInput transcoder, final ApiCallback<CreateTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTranscoderValidateBeforeCall(transcoder, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderOutputCall(String transcoderId, OutputCreateInput output, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = output;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTranscoderOutputValidateBeforeCall(String transcoderId, OutputCreateInput output, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling createTranscoderOutput(Async)");
        }

        // verify the required parameter 'output' is set
        if (output == null) {
            throw new ApiException("Missing the required parameter 'output' when calling createTranscoderOutput(Async)");
        }

        return createTranscoderOutputCall(transcoderId, output, _callback);

    }

    /**
     * Create an output
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @return CreateTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoderOutput200Response createTranscoderOutput(String transcoderId, OutputCreateInput output) throws ApiException {
        ApiResponse<CreateTranscoderOutput200Response> localVarResp = createTranscoderOutputWithHttpInfo(transcoderId, output);
        return localVarResp.getData();
    }

    /**
     * Create an output
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @return ApiResponse&lt;CreateTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoderOutput200Response> createTranscoderOutputWithHttpInfo(String transcoderId, OutputCreateInput output) throws ApiException {
        okhttp3.Call localVarCall = createTranscoderOutputValidateBeforeCall(transcoderId, output, null);
        Type localVarReturnType = new TypeToken<CreateTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an output (asynchronously)
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderOutputAsync(String transcoderId, OutputCreateInput output, final ApiCallback<CreateTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTranscoderOutputValidateBeforeCall(transcoderId, output, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outputStreamTarget;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling createTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling createTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputStreamTarget' is set
        if (outputStreamTarget == null) {
            throw new ApiException("Missing the required parameter 'outputStreamTarget' when calling createTranscoderOutputOutputStreamTarget(Async)");
        }

        return createTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, outputStreamTarget, _callback);

    }

    /**
     * Create an output stream target
     * This operation creates an output stream target. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions. (required)
     * @return AddStreamTargetToTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public AddStreamTargetToTranscoderOutput200Response createTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget) throws ApiException {
        ApiResponse<AddStreamTargetToTranscoderOutput200Response> localVarResp = createTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, outputStreamTarget);
        return localVarResp.getData();
    }

    /**
     * Create an output stream target
     * This operation creates an output stream target. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions. (required)
     * @return ApiResponse&lt;AddStreamTargetToTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddStreamTargetToTranscoderOutput200Response> createTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget) throws ApiException {
        okhttp3.Call localVarCall = createTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, outputStreamTarget, null);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an output stream target (asynchronously)
     * This operation creates an output stream target. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; can&#39;t be added to output renditions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget, final ApiCallback<AddStreamTargetToTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, outputStreamTarget, _callback);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTranscoderProperty
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderPropertyCall(String transcoderId, TranscoderPropertyCreateInput property, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = property;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTranscoderPropertyValidateBeforeCall(String transcoderId, TranscoderPropertyCreateInput property, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling createTranscoderProperty(Async)");
        }

        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling createTranscoderProperty(Async)");
        }

        return createTranscoderPropertyCall(transcoderId, property, _callback);

    }

    /**
     * Create a property for a transcoder
     * This operation creates a property for a transcoder. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @return CreateTranscoderProperty200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoderProperty200Response createTranscoderProperty(String transcoderId, TranscoderPropertyCreateInput property) throws ApiException {
        ApiResponse<CreateTranscoderProperty200Response> localVarResp = createTranscoderPropertyWithHttpInfo(transcoderId, property);
        return localVarResp.getData();
    }

    /**
     * Create a property for a transcoder
     * This operation creates a property for a transcoder. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @return ApiResponse&lt;CreateTranscoderProperty200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoderProperty200Response> createTranscoderPropertyWithHttpInfo(String transcoderId, TranscoderPropertyCreateInput property) throws ApiException {
        okhttp3.Call localVarCall = createTranscoderPropertyValidateBeforeCall(transcoderId, property, null);
        Type localVarReturnType = new TypeToken<CreateTranscoderProperty200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a property for a transcoder (asynchronously)
     * This operation creates a property for a transcoder. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to create in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscoderPropertyAsync(String transcoderId, TranscoderPropertyCreateInput property, final ApiCallback<CreateTranscoderProperty200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTranscoderPropertyValidateBeforeCall(transcoderId, property, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoderProperty200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTranscoder(Async)");
        }

        return deleteTranscoderCall(id, _callback);

    }

    /**
     * Delete a transcoder
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTranscoder(String id) throws ApiException {
        deleteTranscoderWithHttpInfo(id);
    }

    /**
     * Delete a transcoder
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteTranscoderValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a transcoder (asynchronously)
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTranscoderValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderOutputCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTranscoderOutputValidateBeforeCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling deleteTranscoderOutput(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTranscoderOutput(Async)");
        }

        return deleteTranscoderOutputCall(transcoderId, id, _callback);

    }

    /**
     * Delete an output
     * This operation deletes an output, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTranscoderOutput(String transcoderId, String id) throws ApiException {
        deleteTranscoderOutputWithHttpInfo(transcoderId, id);
    }

    /**
     * Delete an output
     * This operation deletes an output, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTranscoderOutputWithHttpInfo(String transcoderId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteTranscoderOutputValidateBeforeCall(transcoderId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an output (asynchronously)
     * This operation deletes an output, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderOutputAsync(String transcoderId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTranscoderOutputValidateBeforeCall(transcoderId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()))
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling deleteTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling deleteTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling deleteTranscoderOutputOutputStreamTarget(Async)");
        }

        return deleteTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, _callback);

    }

    /**
     * Delete an output stream target
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        deleteTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
    }

    /**
     * Delete an output stream target
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = deleteTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an output stream target (asynchronously)
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTranscoderProperty
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderPropertyCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties/{id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTranscoderPropertyValidateBeforeCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling deleteTranscoderProperty(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTranscoderProperty(Async)");
        }

        return deleteTranscoderPropertyCall(transcoderId, id, _callback);

    }

    /**
     * Delete a transcoder&#39;s property
     * This operation deletes a specific property from a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTranscoderProperty(String transcoderId, String id) throws ApiException {
        deleteTranscoderPropertyWithHttpInfo(transcoderId, id);
    }

    /**
     * Delete a transcoder&#39;s property
     * This operation deletes a specific property from a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTranscoderPropertyWithHttpInfo(String transcoderId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteTranscoderPropertyValidateBeforeCall(transcoderId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a transcoder&#39;s property (asynchronously)
     * This operation deletes a specific property from a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscoderPropertyAsync(String transcoderId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTranscoderPropertyValidateBeforeCall(transcoderId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableAllStreamTargetsTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAllStreamTargetsTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/disable_all_stream_targets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableAllStreamTargetsTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disableAllStreamTargetsTranscoder(Async)");
        }

        return disableAllStreamTargetsTranscoderCall(id, _callback);

    }

    /**
     * Disable a transcoder&#39;s stream targets
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return DisableAllStreamTargetsTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DisableAllStreamTargetsTranscoder200Response disableAllStreamTargetsTranscoder(String id) throws ApiException {
        ApiResponse<DisableAllStreamTargetsTranscoder200Response> localVarResp = disableAllStreamTargetsTranscoderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Disable a transcoder&#39;s stream targets
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;DisableAllStreamTargetsTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableAllStreamTargetsTranscoder200Response> disableAllStreamTargetsTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = disableAllStreamTargetsTranscoderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DisableAllStreamTargetsTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable a transcoder&#39;s stream targets (asynchronously)
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAllStreamTargetsTranscoderAsync(String id, final ApiCallback<DisableAllStreamTargetsTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableAllStreamTargetsTranscoderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DisableAllStreamTargetsTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/disable"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()))
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling disableTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling disableTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling disableTranscoderOutputOutputStreamTarget(Async)");
        }

        return disableTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, _callback);

    }

    /**
     * Disable an output stream target
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return DisableTranscoderOutputOutputStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DisableTranscoderOutputOutputStreamTarget200Response disableTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<DisableTranscoderOutputOutputStreamTarget200Response> localVarResp = disableTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Disable an output stream target
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;DisableTranscoderOutputOutputStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableTranscoderOutputOutputStreamTarget200Response> disableTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = disableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null);
        Type localVarReturnType = new TypeToken<DisableTranscoderOutputOutputStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable an output stream target (asynchronously)
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<DisableTranscoderOutputOutputStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<DisableTranscoderOutputOutputStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableAllStreamTargetsTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableAllStreamTargetsTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/enable_all_stream_targets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableAllStreamTargetsTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enableAllStreamTargetsTranscoder(Async)");
        }

        return enableAllStreamTargetsTranscoderCall(id, _callback);

    }

    /**
     * Enable a transcoder&#39;s stream targets
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return DisableAllStreamTargetsTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DisableAllStreamTargetsTranscoder200Response enableAllStreamTargetsTranscoder(String id) throws ApiException {
        ApiResponse<DisableAllStreamTargetsTranscoder200Response> localVarResp = enableAllStreamTargetsTranscoderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Enable a transcoder&#39;s stream targets
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;DisableAllStreamTargetsTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableAllStreamTargetsTranscoder200Response> enableAllStreamTargetsTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = enableAllStreamTargetsTranscoderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DisableAllStreamTargetsTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable a transcoder&#39;s stream targets (asynchronously)
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableAllStreamTargetsTranscoderAsync(String id, final ApiCallback<DisableAllStreamTargetsTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableAllStreamTargetsTranscoderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DisableAllStreamTargetsTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/enable"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()))
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling enableTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling enableTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling enableTranscoderOutputOutputStreamTarget(Async)");
        }

        return enableTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, _callback);

    }

    /**
     * Enable an output stream target
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return EnableTranscoderOutputOutputStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public EnableTranscoderOutputOutputStreamTarget200Response enableTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<EnableTranscoderOutputOutputStreamTarget200Response> localVarResp = enableTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Enable an output stream target
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;EnableTranscoderOutputOutputStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableTranscoderOutputOutputStreamTarget200Response> enableTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = enableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null);
        Type localVarReturnType = new TypeToken<EnableTranscoderOutputOutputStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable an output stream target (asynchronously)
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<EnableTranscoderOutputOutputStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<EnableTranscoderOutputOutputStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexUptimes
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexUptimesCall(String transcoderId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexUptimesValidateBeforeCall(String transcoderId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling indexUptimes(Async)");
        }

        return indexUptimesCall(transcoderId, page, perPage, _callback);

    }

    /**
     * Fetch all uptime records for a transcoder
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @return Uptimes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public Uptimes indexUptimes(String transcoderId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Uptimes> localVarResp = indexUptimesWithHttpInfo(transcoderId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Fetch all uptime records for a transcoder
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;Uptimes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Uptimes> indexUptimesWithHttpInfo(String transcoderId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = indexUptimesValidateBeforeCall(transcoderId, page, perPage, null);
        Type localVarReturnType = new TypeToken<Uptimes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all uptime records for a transcoder (asynchronously)
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexUptimesAsync(String transcoderId, Integer page, Integer perPage, final ApiCallback<Uptimes> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexUptimesValidateBeforeCall(transcoderId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Uptimes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscoderOutputOutputStreamTargets
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderOutputOutputStreamTargetsCall(String transcoderId, String outputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscoderOutputOutputStreamTargetsValidateBeforeCall(String transcoderId, String outputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling listTranscoderOutputOutputStreamTargets(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling listTranscoderOutputOutputStreamTargets(Async)");
        }

        return listTranscoderOutputOutputStreamTargetsCall(transcoderId, outputId, _callback);

    }

    /**
     * Fetch all output stream targets of an output of a transcoder
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @return OutputStreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public OutputStreamTarget listTranscoderOutputOutputStreamTargets(String transcoderId, String outputId) throws ApiException {
        ApiResponse<OutputStreamTarget> localVarResp = listTranscoderOutputOutputStreamTargetsWithHttpInfo(transcoderId, outputId);
        return localVarResp.getData();
    }

    /**
     * Fetch all output stream targets of an output of a transcoder
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @return ApiResponse&lt;OutputStreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputStreamTarget> listTranscoderOutputOutputStreamTargetsWithHttpInfo(String transcoderId, String outputId) throws ApiException {
        okhttp3.Call localVarCall = listTranscoderOutputOutputStreamTargetsValidateBeforeCall(transcoderId, outputId, null);
        Type localVarReturnType = new TypeToken<OutputStreamTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all output stream targets of an output of a transcoder (asynchronously)
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderOutputOutputStreamTargetsAsync(String transcoderId, String outputId, final ApiCallback<OutputStreamTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscoderOutputOutputStreamTargetsValidateBeforeCall(transcoderId, outputId, _callback);
        Type localVarReturnType = new TypeToken<OutputStreamTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscoderOutputs
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderOutputsCall(String transcoderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscoderOutputsValidateBeforeCall(String transcoderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling listTranscoderOutputs(Async)");
        }

        return listTranscoderOutputsCall(transcoderId, _callback);

    }

    /**
     * Fetch all outputs of a transcoder
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return Outputs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public Outputs listTranscoderOutputs(String transcoderId) throws ApiException {
        ApiResponse<Outputs> localVarResp = listTranscoderOutputsWithHttpInfo(transcoderId);
        return localVarResp.getData();
    }

    /**
     * Fetch all outputs of a transcoder
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;Outputs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Outputs> listTranscoderOutputsWithHttpInfo(String transcoderId) throws ApiException {
        okhttp3.Call localVarCall = listTranscoderOutputsValidateBeforeCall(transcoderId, null);
        Type localVarReturnType = new TypeToken<Outputs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all outputs of a transcoder (asynchronously)
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderOutputsAsync(String transcoderId, final ApiCallback<Outputs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscoderOutputsValidateBeforeCall(transcoderId, _callback);
        Type localVarReturnType = new TypeToken<Outputs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscoderProperties
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderPropertiesCall(String transcoderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscoderPropertiesValidateBeforeCall(String transcoderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling listTranscoderProperties(Async)");
        }

        return listTranscoderPropertiesCall(transcoderId, _callback);

    }

    /**
     * Fetch a transcoder&#39;s properties
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public TranscoderProperties listTranscoderProperties(String transcoderId) throws ApiException {
        ApiResponse<TranscoderProperties> localVarResp = listTranscoderPropertiesWithHttpInfo(transcoderId);
        return localVarResp.getData();
    }

    /**
     * Fetch a transcoder&#39;s properties
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranscoderProperties> listTranscoderPropertiesWithHttpInfo(String transcoderId) throws ApiException {
        okhttp3.Call localVarCall = listTranscoderPropertiesValidateBeforeCall(transcoderId, null);
        Type localVarReturnType = new TypeToken<TranscoderProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a transcoder&#39;s properties (asynchronously)
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderPropertiesAsync(String transcoderId, final ApiCallback<TranscoderProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscoderPropertiesValidateBeforeCall(transcoderId, _callback);
        Type localVarReturnType = new TypeToken<TranscoderProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscoderRecordings
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderRecordingsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/recordings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscoderRecordingsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTranscoderRecordings(Async)");
        }

        return listTranscoderRecordingsCall(id, _callback);

    }

    /**
     * Fetch a transcoder&#39;s recordings
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ListTranscoderRecordings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ListTranscoderRecordings200Response listTranscoderRecordings(String id) throws ApiException {
        ApiResponse<ListTranscoderRecordings200Response> localVarResp = listTranscoderRecordingsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a transcoder&#39;s recordings
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;ListTranscoderRecordings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTranscoderRecordings200Response> listTranscoderRecordingsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listTranscoderRecordingsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ListTranscoderRecordings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a transcoder&#39;s recordings (asynchronously)
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderRecordingsAsync(String id, final ApiCallback<ListTranscoderRecordings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscoderRecordingsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ListTranscoderRecordings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscoderSchedules
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderSchedulesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/schedules"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscoderSchedulesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTranscoderSchedules(Async)");
        }

        return listTranscoderSchedulesCall(id, _callback);

    }

    /**
     * Fetch transcoder&#39;s schedules
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ListTranscoderSchedules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ListTranscoderSchedules200Response listTranscoderSchedules(String id) throws ApiException {
        ApiResponse<ListTranscoderSchedules200Response> localVarResp = listTranscoderSchedulesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch transcoder&#39;s schedules
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;ListTranscoderSchedules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTranscoderSchedules200Response> listTranscoderSchedulesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listTranscoderSchedulesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ListTranscoderSchedules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch transcoder&#39;s schedules (asynchronously)
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscoderSchedulesAsync(String id, final ApiCallback<ListTranscoderSchedules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscoderSchedulesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ListTranscoderSchedules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscoders
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscodersCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscodersValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listTranscodersCall(page, perPage, _callback);

    }

    /**
     * Fetch all transcoders
     * This operation shows the details of all of your transcoders.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @return Transcoders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Transcoders listTranscoders(Integer page, Integer perPage) throws ApiException {
        ApiResponse<Transcoders> localVarResp = listTranscodersWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Fetch all transcoders
     * This operation shows the details of all of your transcoders.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;Transcoders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transcoders> listTranscodersWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listTranscodersValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<Transcoders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all transcoders (asynchronously)
     * This operation shows the details of all of your transcoders.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. &lt;strong&gt;Next&lt;/strong&gt; and &lt;strong&gt;Previous&lt;/strong&gt; links allow you to navigate multiple pages of results. Omit the &lt;em&gt;page&lt;/em&gt; parameter or specify an integer that&#39;s less than or equal to &lt;strong&gt;0&lt;/strong&gt; to view all (unpaginated) results. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is &lt;strong&gt;10&lt;/strong&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscodersAsync(Integer page, Integer perPage, final ApiCallback<Transcoders> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscodersValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Transcoders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeStreamTargetToTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to remove in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call removeStreamTargetToTranscoderOutputCall(String transcoderId, String id, OutputRemoveStreamTargetInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outputStreamTarget;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}/remove_stream_target"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeStreamTargetToTranscoderOutputValidateBeforeCall(String transcoderId, String id, OutputRemoveStreamTargetInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling removeStreamTargetToTranscoderOutput(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeStreamTargetToTranscoderOutput(Async)");
        }

        // verify the required parameter 'outputStreamTarget' is set
        if (outputStreamTarget == null) {
            throw new ApiException("Missing the required parameter 'outputStreamTarget' when calling removeStreamTargetToTranscoderOutput(Async)");
        }

        return removeStreamTargetToTranscoderOutputCall(transcoderId, id, outputStreamTarget, _callback);

    }

    /**
     * Deprecated operation
     * The operation DELETE /transcoders/{transcoder_id}/outputs/{id}/remove_stream_target is deprecated. Use DELETE /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{id} to remove a stream target from an output.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to remove in the body of the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void removeStreamTargetToTranscoderOutput(String transcoderId, String id, OutputRemoveStreamTargetInput outputStreamTarget) throws ApiException {
        removeStreamTargetToTranscoderOutputWithHttpInfo(transcoderId, id, outputStreamTarget);
    }

    /**
     * Deprecated operation
     * The operation DELETE /transcoders/{transcoder_id}/outputs/{id}/remove_stream_target is deprecated. Use DELETE /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{id} to remove a stream target from an output.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to remove in the body of the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> removeStreamTargetToTranscoderOutputWithHttpInfo(String transcoderId, String id, OutputRemoveStreamTargetInput outputStreamTarget) throws ApiException {
        okhttp3.Call localVarCall = removeStreamTargetToTranscoderOutputValidateBeforeCall(transcoderId, id, outputStreamTarget, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deprecated operation (asynchronously)
     * The operation DELETE /transcoders/{transcoder_id}/outputs/{id}/remove_stream_target is deprecated. Use DELETE /transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{id} to remove a stream target from an output.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the stream target to remove in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call removeStreamTargetToTranscoderOutputAsync(String transcoderId, String id, OutputRemoveStreamTargetInput outputStreamTarget, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeStreamTargetToTranscoderOutputValidateBeforeCall(transcoderId, id, outputStreamTarget, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/reset"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetTranscoder(Async)");
        }

        return resetTranscoderCall(id, _callback);

    }

    /**
     * Reset a transcoder
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ResetTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ResetTranscoder200Response resetTranscoder(String id) throws ApiException {
        ApiResponse<ResetTranscoder200Response> localVarResp = resetTranscoderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Reset a transcoder
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;ResetTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResetTranscoder200Response> resetTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = resetTranscoderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResetTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset a transcoder (asynchronously)
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetTranscoderAsync(String id, final ApiCallback<ResetTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetTranscoderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResetTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/restart"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()))
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling restartTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling restartTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling restartTranscoderOutputOutputStreamTarget(Async)");
        }

        return restartTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, _callback);

    }

    /**
     * Restart an output stream target
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return RestartTranscoderOutputOutputStreamTarget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public RestartTranscoderOutputOutputStreamTarget200Response restartTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<RestartTranscoderOutputOutputStreamTarget200Response> localVarResp = restartTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Restart an output stream target
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;RestartTranscoderOutputOutputStreamTarget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestartTranscoderOutputOutputStreamTarget200Response> restartTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = restartTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null);
        Type localVarReturnType = new TypeToken<RestartTranscoderOutputOutputStreamTarget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restart an output stream target (asynchronously)
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<RestartTranscoderOutputOutputStreamTarget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<RestartTranscoderOutputOutputStreamTarget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoder(Async)");
        }

        return showTranscoderCall(id, _callback);

    }

    /**
     * Fetch a transcoder
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return CreateTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoder200Response showTranscoder(String id) throws ApiException {
        ApiResponse<CreateTranscoder200Response> localVarResp = showTranscoderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a transcoder
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;CreateTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoder200Response> showTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreateTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a transcoder (asynchronously)
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderAsync(String id, final ApiCallback<CreateTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderOutputCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderOutputValidateBeforeCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showTranscoderOutput(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderOutput(Async)");
        }

        return showTranscoderOutputCall(transcoderId, id, _callback);

    }

    /**
     * Fetch an output
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return CreateTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoderOutput200Response showTranscoderOutput(String transcoderId, String id) throws ApiException {
        ApiResponse<CreateTranscoderOutput200Response> localVarResp = showTranscoderOutputWithHttpInfo(transcoderId, id);
        return localVarResp.getData();
    }

    /**
     * Fetch an output
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return ApiResponse&lt;CreateTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoderOutput200Response> showTranscoderOutputWithHttpInfo(String transcoderId, String id) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderOutputValidateBeforeCall(transcoderId, id, null);
        Type localVarReturnType = new TypeToken<CreateTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an output (asynchronously)
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderOutputAsync(String transcoderId, String id, final ApiCallback<CreateTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderOutputValidateBeforeCall(transcoderId, id, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()))
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling showTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showTranscoderOutputOutputStreamTarget(Async)");
        }

        return showTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, _callback);

    }

    /**
     * Fetch an output stream target
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return AddStreamTargetToTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public AddStreamTargetToTranscoderOutput200Response showTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<AddStreamTargetToTranscoderOutput200Response> localVarResp = showTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return localVarResp.getData();
    }

    /**
     * Fetch an output stream target
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;AddStreamTargetToTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddStreamTargetToTranscoderOutput200Response> showTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an output stream target (asynchronously)
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<AddStreamTargetToTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, _callback);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoderProperty
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderPropertyCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties/{id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderPropertyValidateBeforeCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showTranscoderProperty(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderProperty(Async)");
        }

        return showTranscoderPropertyCall(transcoderId, id, _callback);

    }

    /**
     * Fetch a property for a transcoder
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return CreateTranscoderProperty200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoderProperty200Response showTranscoderProperty(String transcoderId, String id) throws ApiException {
        ApiResponse<CreateTranscoderProperty200Response> localVarResp = showTranscoderPropertyWithHttpInfo(transcoderId, id);
        return localVarResp.getData();
    }

    /**
     * Fetch a property for a transcoder
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return ApiResponse&lt;CreateTranscoderProperty200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoderProperty200Response> showTranscoderPropertyWithHttpInfo(String transcoderId, String id) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderPropertyValidateBeforeCall(transcoderId, id, null);
        Type localVarReturnType = new TypeToken<CreateTranscoderProperty200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a property for a transcoder (asynchronously)
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderPropertyAsync(String transcoderId, String id, final ApiCallback<CreateTranscoderProperty200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderPropertyValidateBeforeCall(transcoderId, id, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoderProperty200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoderState
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderStateCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/state"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderStateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderState(Async)");
        }

        return showTranscoderStateCall(id, _callback);

    }

    /**
     * Fetch the state and uptime ID of a transcoder
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ShowTranscoderState200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowTranscoderState200Response showTranscoderState(String id) throws ApiException {
        ApiResponse<ShowTranscoderState200Response> localVarResp = showTranscoderStateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch the state and uptime ID of a transcoder
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;ShowTranscoderState200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowTranscoderState200Response> showTranscoderStateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderStateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ShowTranscoderState200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the state and uptime ID of a transcoder (asynchronously)
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderStateAsync(String id, final ApiCallback<ShowTranscoderState200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderStateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ShowTranscoderState200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoderStats
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderStatsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/stats"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderStatsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderStats(Async)");
        }

        return showTranscoderStatsCall(id, _callback);

    }

    /**
     * Fetch statistics for a current transcoder
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ShowTranscoderStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowTranscoderStats200Response showTranscoderStats(String id) throws ApiException {
        ApiResponse<ShowTranscoderStats200Response> localVarResp = showTranscoderStatsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch statistics for a current transcoder
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;ShowTranscoderStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowTranscoderStats200Response> showTranscoderStatsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderStatsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ShowTranscoderStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch statistics for a current transcoder (asynchronously)
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderStatsAsync(String id, final ApiCallback<ShowTranscoderStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderStatsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ShowTranscoderStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTranscoderThumbnailUrl
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderThumbnailUrlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/thumbnail_url"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTranscoderThumbnailUrlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderThumbnailUrl(Async)");
        }

        return showTranscoderThumbnailUrlCall(id, _callback);

    }

    /**
     * Fetch the thumbnail URL of a transcoder
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ShowTranscoderThumbnailUrl200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowTranscoderThumbnailUrl200Response showTranscoderThumbnailUrl(String id) throws ApiException {
        ApiResponse<ShowTranscoderThumbnailUrl200Response> localVarResp = showTranscoderThumbnailUrlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch the thumbnail URL of a transcoder
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;ShowTranscoderThumbnailUrl200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowTranscoderThumbnailUrl200Response> showTranscoderThumbnailUrlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showTranscoderThumbnailUrlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ShowTranscoderThumbnailUrl200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the thumbnail URL of a transcoder (asynchronously)
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTranscoderThumbnailUrlAsync(String id, final ApiCallback<ShowTranscoderThumbnailUrl200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTranscoderThumbnailUrlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ShowTranscoderThumbnailUrl200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showUptime
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUptimeCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes/{id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showUptimeValidateBeforeCall(String transcoderId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showUptime(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUptime(Async)");
        }

        return showUptimeCall(transcoderId, id, _callback);

    }

    /**
     * Fetch an uptime record
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @return Uptime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public Uptime showUptime(String transcoderId, String id) throws ApiException {
        ApiResponse<Uptime> localVarResp = showUptimeWithHttpInfo(transcoderId, id);
        return localVarResp.getData();
    }

    /**
     * Fetch an uptime record
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @return ApiResponse&lt;Uptime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Uptime> showUptimeWithHttpInfo(String transcoderId, String id) throws ApiException {
        okhttp3.Call localVarCall = showUptimeValidateBeforeCall(transcoderId, id, null);
        Type localVarReturnType = new TypeToken<Uptime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an uptime record (asynchronously)
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUptimeAsync(String transcoderId, String id, final ApiCallback<Uptime> _callback) throws ApiException {

        okhttp3.Call localVarCall = showUptimeValidateBeforeCall(transcoderId, id, _callback);
        Type localVarReturnType = new TypeToken<Uptime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showUptimeMetricsCurrent
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUptimeMetricsCurrentCall(String transcoderId, String id, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes/{id}/metrics/current"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showUptimeMetricsCurrentValidateBeforeCall(String transcoderId, String id, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showUptimeMetricsCurrent(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUptimeMetricsCurrent(Async)");
        }

        return showUptimeMetricsCurrentCall(transcoderId, id, fields, _callback);

    }

    /**
     * Fetch current stream health metrics for an active transcoder
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @return ShowUptimeMetricsCurrent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowUptimeMetricsCurrent200Response showUptimeMetricsCurrent(String transcoderId, String id, String fields) throws ApiException {
        ApiResponse<ShowUptimeMetricsCurrent200Response> localVarResp = showUptimeMetricsCurrentWithHttpInfo(transcoderId, id, fields);
        return localVarResp.getData();
    }

    /**
     * Fetch current stream health metrics for an active transcoder
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @return ApiResponse&lt;ShowUptimeMetricsCurrent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowUptimeMetricsCurrent200Response> showUptimeMetricsCurrentWithHttpInfo(String transcoderId, String id, String fields) throws ApiException {
        okhttp3.Call localVarCall = showUptimeMetricsCurrentValidateBeforeCall(transcoderId, id, fields, null);
        Type localVarReturnType = new TypeToken<ShowUptimeMetricsCurrent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch current stream health metrics for an active transcoder (asynchronously)
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUptimeMetricsCurrentAsync(String transcoderId, String id, String fields, final ApiCallback<ShowUptimeMetricsCurrent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showUptimeMetricsCurrentValidateBeforeCall(transcoderId, id, fields, _callback);
        Type localVarReturnType = new TypeToken<ShowUptimeMetricsCurrent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showUptimeMetricsHistoric
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUptimeMetricsHistoricCall(String transcoderId, String id, String fields, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes/{id}/metrics/historic"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showUptimeMetricsHistoricValidateBeforeCall(String transcoderId, String id, String fields, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showUptimeMetricsHistoric(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUptimeMetricsHistoric(Async)");
        }

        return showUptimeMetricsHistoricCall(transcoderId, id, fields, from, to, _callback);

    }

    /**
     * Fetch historic stream health metrics for a transcoder
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @return ShowUptimeMetricsHistoric200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ShowUptimeMetricsHistoric200Response showUptimeMetricsHistoric(String transcoderId, String id, String fields, String from, String to) throws ApiException {
        ApiResponse<ShowUptimeMetricsHistoric200Response> localVarResp = showUptimeMetricsHistoricWithHttpInfo(transcoderId, id, fields, from, to);
        return localVarResp.getData();
    }

    /**
     * Fetch historic stream health metrics for a transcoder
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @return ApiResponse&lt;ShowUptimeMetricsHistoric200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShowUptimeMetricsHistoric200Response> showUptimeMetricsHistoricWithHttpInfo(String transcoderId, String id, String fields, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = showUptimeMetricsHistoricValidateBeforeCall(transcoderId, id, fields, from, to, null);
        Type localVarReturnType = new TypeToken<ShowUptimeMetricsHistoric200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch historic stream health metrics for a transcoder (asynchronously)
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUptimeMetricsHistoricAsync(String transcoderId, String id, String fields, String from, String to, final ApiCallback<ShowUptimeMetricsHistoric200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = showUptimeMetricsHistoricValidateBeforeCall(transcoderId, id, fields, from, to, _callback);
        Type localVarReturnType = new TypeToken<ShowUptimeMetricsHistoric200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/start"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startTranscoder(Async)");
        }

        return startTranscoderCall(id, _callback);

    }

    /**
     * Start a transcoder
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return StartTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public StartTranscoder200Response startTranscoder(String id) throws ApiException {
        ApiResponse<StartTranscoder200Response> localVarResp = startTranscoderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Start a transcoder
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;StartTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartTranscoder200Response> startTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = startTranscoderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<StartTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a transcoder (asynchronously)
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startTranscoderAsync(String id, final ApiCallback<StartTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = startTranscoderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<StartTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopTranscoderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/stop"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopTranscoderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopTranscoder(Async)");
        }

        return stopTranscoderCall(id, _callback);

    }

    /**
     * Stop a transcoder
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return StartTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public StartTranscoder200Response stopTranscoder(String id) throws ApiException {
        ApiResponse<StartTranscoder200Response> localVarResp = stopTranscoderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Stop a transcoder
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;StartTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartTranscoder200Response> stopTranscoderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = stopTranscoderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<StartTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a transcoder (asynchronously)
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopTranscoderAsync(String id, final ApiCallback<StartTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopTranscoderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<StartTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranscoderCall(String id, TranscoderUpdateInput transcoder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transcoder;

        // create path and map variables
        String localVarPath = "/transcoders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTranscoderValidateBeforeCall(String id, TranscoderUpdateInput transcoder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTranscoder(Async)");
        }

        // verify the required parameter 'transcoder' is set
        if (transcoder == null) {
            throw new ApiException("Missing the required parameter 'transcoder' when calling updateTranscoder(Async)");
        }

        return updateTranscoderCall(id, transcoder, _callback);

    }

    /**
     * Update a transcoder
     * This operation updates a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @return CreateTranscoder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoder200Response updateTranscoder(String id, TranscoderUpdateInput transcoder) throws ApiException {
        ApiResponse<CreateTranscoder200Response> localVarResp = updateTranscoderWithHttpInfo(id, transcoder);
        return localVarResp.getData();
    }

    /**
     * Update a transcoder
     * This operation updates a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @return ApiResponse&lt;CreateTranscoder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoder200Response> updateTranscoderWithHttpInfo(String id, TranscoderUpdateInput transcoder) throws ApiException {
        okhttp3.Call localVarCall = updateTranscoderValidateBeforeCall(id, transcoder, null);
        Type localVarReturnType = new TypeToken<CreateTranscoder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a transcoder (asynchronously)
     * This operation updates a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranscoderAsync(String id, TranscoderUpdateInput transcoder, final ApiCallback<CreateTranscoder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTranscoderValidateBeforeCall(id, transcoder, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranscoderOutputCall(String transcoderId, String id, OutputUpdateInput output, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = output;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTranscoderOutputValidateBeforeCall(String transcoderId, String id, OutputUpdateInput output, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling updateTranscoderOutput(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTranscoderOutput(Async)");
        }

        // verify the required parameter 'output' is set
        if (output == null) {
            throw new ApiException("Missing the required parameter 'output' when calling updateTranscoderOutput(Async)");
        }

        return updateTranscoderOutputCall(transcoderId, id, output, _callback);

    }

    /**
     * Update an output
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @return CreateTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CreateTranscoderOutput200Response updateTranscoderOutput(String transcoderId, String id, OutputUpdateInput output) throws ApiException {
        ApiResponse<CreateTranscoderOutput200Response> localVarResp = updateTranscoderOutputWithHttpInfo(transcoderId, id, output);
        return localVarResp.getData();
    }

    /**
     * Update an output
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @return ApiResponse&lt;CreateTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTranscoderOutput200Response> updateTranscoderOutputWithHttpInfo(String transcoderId, String id, OutputUpdateInput output) throws ApiException {
        okhttp3.Call localVarCall = updateTranscoderOutputValidateBeforeCall(transcoderId, id, output, null);
        Type localVarReturnType = new TypeToken<CreateTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an output (asynchronously)
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranscoderOutputAsync(String transcoderId, String id, OutputUpdateInput output, final ApiCallback<CreateTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTranscoderOutputValidateBeforeCall(transcoderId, id, output, _callback);
        Type localVarReturnType = new TypeToken<CreateTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetUpdateInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outputStreamTarget;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}"
            .replace("{" + "transcoder_id" + "}", localVarApiClient.escapeString(transcoderId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()))
            .replace("{" + "stream_target_id" + "}", localVarApiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "wsc-api-key", "wsc-access-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetUpdateInput outputStreamTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }

        // verify the required parameter 'outputStreamTarget' is set
        if (outputStreamTarget == null) {
            throw new ApiException("Missing the required parameter 'outputStreamTarget' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }

        return updateTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, outputStreamTarget, _callback);

    }

    /**
     * Update an output stream target
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @return AddStreamTargetToTranscoderOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public AddStreamTargetToTranscoderOutput200Response updateTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetUpdateInput outputStreamTarget) throws ApiException {
        ApiResponse<AddStreamTargetToTranscoderOutput200Response> localVarResp = updateTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId, outputStreamTarget);
        return localVarResp.getData();
    }

    /**
     * Update an output stream target
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;AddStreamTargetToTranscoderOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddStreamTargetToTranscoderOutput200Response> updateTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetUpdateInput outputStreamTarget) throws ApiException {
        okhttp3.Call localVarCall = updateTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, outputStreamTarget, null);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an output stream target (asynchronously)
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetUpdateInput outputStreamTarget, final ApiCallback<AddStreamTargetToTranscoderOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, outputStreamTarget, _callback);
        Type localVarReturnType = new TypeToken<AddStreamTargetToTranscoderOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
