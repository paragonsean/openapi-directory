/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Output1 {
  public static final String SERIALIZED_NAME_ASPECT_RATIO_HEIGHT = "aspect_ratio_height";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO_HEIGHT)
  private Integer aspectRatioHeight;

  public static final String SERIALIZED_NAME_ASPECT_RATIO_WIDTH = "aspect_ratio_width";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO_WIDTH)
  private Integer aspectRatioWidth;

  public static final String SERIALIZED_NAME_BITRATE_AUDIO = "bitrate_audio";
  @SerializedName(SERIALIZED_NAME_BITRATE_AUDIO)
  private Integer bitrateAudio;

  public static final String SERIALIZED_NAME_BITRATE_VIDEO = "bitrate_video";
  @SerializedName(SERIALIZED_NAME_BITRATE_VIDEO)
  private Integer bitrateVideo;

  /**
   * Reduce the frame rate of the transcoded output rendition. The default, &lt;strong&gt;0&lt;/strong&gt;, uses the encoded stream&#39;s frame rate without reduction.
   */
  @JsonAdapter(FramerateReductionEnum.Adapter.class)
  public enum FramerateReductionEnum {
    _0("0"),
    
    _1_2("1/2"),
    
    _1_4("1/4"),
    
    _1_25("1/25"),
    
    _1_30("1/30"),
    
    _1_50("1/50"),
    
    _1_60("1/60");

    private String value;

    FramerateReductionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FramerateReductionEnum fromValue(String value) {
      for (FramerateReductionEnum b : FramerateReductionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FramerateReductionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FramerateReductionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FramerateReductionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FramerateReductionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FramerateReductionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRAMERATE_REDUCTION = "framerate_reduction";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_REDUCTION)
  private FramerateReductionEnum framerateReduction;

  /**
   * The encoding method. Specify &lt;strong&gt;main&lt;/strong&gt; for desktop streaming, &lt;strong&gt;baseline&lt;/strong&gt; for playback on mobile devices, or &lt;strong&gt;high&lt;/strong&gt; for HD playback. The default is &lt;strong&gt;high&lt;/strong&gt;.
   */
  @JsonAdapter(H264ProfileEnum.Adapter.class)
  public enum H264ProfileEnum {
    MAIN("main"),
    
    BASELINE("baseline"),
    
    HIGH("high");

    private String value;

    H264ProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static H264ProfileEnum fromValue(String value) {
      for (H264ProfileEnum b : H264ProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<H264ProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final H264ProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public H264ProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return H264ProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      H264ProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_H264_PROFILE = "h264_profile";
  @SerializedName(SERIALIZED_NAME_H264_PROFILE)
  private H264ProfileEnum h264Profile;

  /**
   * The interval used to define the compression applied to a group of frames. The default, &lt;strong&gt;follow_source&lt;/strong&gt;, uses the keyframe interval of the source video.
   */
  @JsonAdapter(KeyframesEnum.Adapter.class)
  public enum KeyframesEnum {
    FOLLOW_SOURCE("follow_source"),
    
    _25("25"),
    
    _30("30"),
    
    _50("50"),
    
    _60("60"),
    
    _100("100"),
    
    _120("120");

    private String value;

    KeyframesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyframesEnum fromValue(String value) {
      for (KeyframesEnum b : KeyframesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyframesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyframesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyframesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyframesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyframesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEYFRAMES = "keyframes";
  @SerializedName(SERIALIZED_NAME_KEYFRAMES)
  private KeyframesEnum keyframes;

  public static final String SERIALIZED_NAME_PASSTHROUGH_AUDIO = "passthrough_audio";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH_AUDIO)
  private Boolean passthroughAudio;

  public static final String SERIALIZED_NAME_PASSTHROUGH_VIDEO = "passthrough_video";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH_VIDEO)
  private Boolean passthroughVideo;

  /**
   * The contents of the stream. The default is both audio and video (&lt;strong&gt;audiovideo&lt;/strong&gt;).
   */
  @JsonAdapter(StreamFormatEnum.Adapter.class)
  public enum StreamFormatEnum {
    AUDIOVIDEO("audiovideo"),
    
    VIDEOONLY("videoonly"),
    
    AUDIOONLY("audioonly");

    private String value;

    StreamFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamFormatEnum fromValue(String value) {
      for (StreamFormatEnum b : StreamFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAM_FORMAT = "stream_format";
  @SerializedName(SERIALIZED_NAME_STREAM_FORMAT)
  private StreamFormatEnum streamFormat;

  public Output1() {
  }

  public Output1 aspectRatioHeight(Integer aspectRatioHeight) {
    this.aspectRatioHeight = aspectRatioHeight;
    return this;
  }

  /**
   * The height, in pixels, of the output rendition. Should correspond to a widescreen or standard aspect ratio and be divisible by 8. The default is &lt;strong&gt;1080&lt;/strong&gt;.
   * @return aspectRatioHeight
   */
  @javax.annotation.Nullable
  public Integer getAspectRatioHeight() {
    return aspectRatioHeight;
  }

  public void setAspectRatioHeight(Integer aspectRatioHeight) {
    this.aspectRatioHeight = aspectRatioHeight;
  }


  public Output1 aspectRatioWidth(Integer aspectRatioWidth) {
    this.aspectRatioWidth = aspectRatioWidth;
    return this;
  }

  /**
   * The width, in pixels, of the output rendition. Should correspond to a widescreen or standard aspect ratio and be divisible by 8. The default is &lt;strong&gt;1980&lt;/strong&gt;.
   * @return aspectRatioWidth
   */
  @javax.annotation.Nullable
  public Integer getAspectRatioWidth() {
    return aspectRatioWidth;
  }

  public void setAspectRatioWidth(Integer aspectRatioWidth) {
    this.aspectRatioWidth = aspectRatioWidth;
  }


  public Output1 bitrateAudio(Integer bitrateAudio) {
    this.bitrateAudio = bitrateAudio;
    return this;
  }

  /**
   * The audio bitrate, in kilobits per second (Kbps). Must be between &lt;strong&gt;0&lt;/strong&gt; (for passthrough audio) and &lt;strong&gt;1000&lt;/strong&gt;. The default is &lt;strong&gt;128&lt;/strong&gt;.
   * @return bitrateAudio
   */
  @javax.annotation.Nullable
  public Integer getBitrateAudio() {
    return bitrateAudio;
  }

  public void setBitrateAudio(Integer bitrateAudio) {
    this.bitrateAudio = bitrateAudio;
  }


  public Output1 bitrateVideo(Integer bitrateVideo) {
    this.bitrateVideo = bitrateVideo;
    return this;
  }

  /**
   * The video bitrate, in kilobits per second (Kbps). Must be between &lt;strong&gt;0&lt;/strong&gt; (for passthrough video) and &lt;strong&gt;10240&lt;/strong&gt;. The default is &lt;strong&gt;4000&lt;/strong&gt;.
   * @return bitrateVideo
   */
  @javax.annotation.Nullable
  public Integer getBitrateVideo() {
    return bitrateVideo;
  }

  public void setBitrateVideo(Integer bitrateVideo) {
    this.bitrateVideo = bitrateVideo;
  }


  public Output1 framerateReduction(FramerateReductionEnum framerateReduction) {
    this.framerateReduction = framerateReduction;
    return this;
  }

  /**
   * Reduce the frame rate of the transcoded output rendition. The default, &lt;strong&gt;0&lt;/strong&gt;, uses the encoded stream&#39;s frame rate without reduction.
   * @return framerateReduction
   */
  @javax.annotation.Nullable
  public FramerateReductionEnum getFramerateReduction() {
    return framerateReduction;
  }

  public void setFramerateReduction(FramerateReductionEnum framerateReduction) {
    this.framerateReduction = framerateReduction;
  }


  public Output1 h264Profile(H264ProfileEnum h264Profile) {
    this.h264Profile = h264Profile;
    return this;
  }

  /**
   * The encoding method. Specify &lt;strong&gt;main&lt;/strong&gt; for desktop streaming, &lt;strong&gt;baseline&lt;/strong&gt; for playback on mobile devices, or &lt;strong&gt;high&lt;/strong&gt; for HD playback. The default is &lt;strong&gt;high&lt;/strong&gt;.
   * @return h264Profile
   */
  @javax.annotation.Nullable
  public H264ProfileEnum getH264Profile() {
    return h264Profile;
  }

  public void setH264Profile(H264ProfileEnum h264Profile) {
    this.h264Profile = h264Profile;
  }


  public Output1 keyframes(KeyframesEnum keyframes) {
    this.keyframes = keyframes;
    return this;
  }

  /**
   * The interval used to define the compression applied to a group of frames. The default, &lt;strong&gt;follow_source&lt;/strong&gt;, uses the keyframe interval of the source video.
   * @return keyframes
   */
  @javax.annotation.Nullable
  public KeyframesEnum getKeyframes() {
    return keyframes;
  }

  public void setKeyframes(KeyframesEnum keyframes) {
    this.keyframes = keyframes;
  }


  public Output1 passthroughAudio(Boolean passthroughAudio) {
    this.passthroughAudio = passthroughAudio;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, sends the audio track to the target without transcoding. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return passthroughAudio
   */
  @javax.annotation.Nullable
  public Boolean getPassthroughAudio() {
    return passthroughAudio;
  }

  public void setPassthroughAudio(Boolean passthroughAudio) {
    this.passthroughAudio = passthroughAudio;
  }


  public Output1 passthroughVideo(Boolean passthroughVideo) {
    this.passthroughVideo = passthroughVideo;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, sends the video track to the target without transcoding. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return passthroughVideo
   */
  @javax.annotation.Nullable
  public Boolean getPassthroughVideo() {
    return passthroughVideo;
  }

  public void setPassthroughVideo(Boolean passthroughVideo) {
    this.passthroughVideo = passthroughVideo;
  }


  public Output1 streamFormat(StreamFormatEnum streamFormat) {
    this.streamFormat = streamFormat;
    return this;
  }

  /**
   * The contents of the stream. The default is both audio and video (&lt;strong&gt;audiovideo&lt;/strong&gt;).
   * @return streamFormat
   */
  @javax.annotation.Nonnull
  public StreamFormatEnum getStreamFormat() {
    return streamFormat;
  }

  public void setStreamFormat(StreamFormatEnum streamFormat) {
    this.streamFormat = streamFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Output1 output1 = (Output1) o;
    return Objects.equals(this.aspectRatioHeight, output1.aspectRatioHeight) &&
        Objects.equals(this.aspectRatioWidth, output1.aspectRatioWidth) &&
        Objects.equals(this.bitrateAudio, output1.bitrateAudio) &&
        Objects.equals(this.bitrateVideo, output1.bitrateVideo) &&
        Objects.equals(this.framerateReduction, output1.framerateReduction) &&
        Objects.equals(this.h264Profile, output1.h264Profile) &&
        Objects.equals(this.keyframes, output1.keyframes) &&
        Objects.equals(this.passthroughAudio, output1.passthroughAudio) &&
        Objects.equals(this.passthroughVideo, output1.passthroughVideo) &&
        Objects.equals(this.streamFormat, output1.streamFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatioHeight, aspectRatioWidth, bitrateAudio, bitrateVideo, framerateReduction, h264Profile, keyframes, passthroughAudio, passthroughVideo, streamFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Output1 {\n");
    sb.append("    aspectRatioHeight: ").append(toIndentedString(aspectRatioHeight)).append("\n");
    sb.append("    aspectRatioWidth: ").append(toIndentedString(aspectRatioWidth)).append("\n");
    sb.append("    bitrateAudio: ").append(toIndentedString(bitrateAudio)).append("\n");
    sb.append("    bitrateVideo: ").append(toIndentedString(bitrateVideo)).append("\n");
    sb.append("    framerateReduction: ").append(toIndentedString(framerateReduction)).append("\n");
    sb.append("    h264Profile: ").append(toIndentedString(h264Profile)).append("\n");
    sb.append("    keyframes: ").append(toIndentedString(keyframes)).append("\n");
    sb.append("    passthroughAudio: ").append(toIndentedString(passthroughAudio)).append("\n");
    sb.append("    passthroughVideo: ").append(toIndentedString(passthroughVideo)).append("\n");
    sb.append("    streamFormat: ").append(toIndentedString(streamFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspect_ratio_height");
    openapiFields.add("aspect_ratio_width");
    openapiFields.add("bitrate_audio");
    openapiFields.add("bitrate_video");
    openapiFields.add("framerate_reduction");
    openapiFields.add("h264_profile");
    openapiFields.add("keyframes");
    openapiFields.add("passthrough_audio");
    openapiFields.add("passthrough_video");
    openapiFields.add("stream_format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stream_format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Output1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Output1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Output1 is not found in the empty JSON string", Output1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Output1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Output1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Output1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("framerate_reduction") != null && !jsonObj.get("framerate_reduction").isJsonNull()) && !jsonObj.get("framerate_reduction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `framerate_reduction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("framerate_reduction").toString()));
      }
      // validate the optional field `framerate_reduction`
      if (jsonObj.get("framerate_reduction") != null && !jsonObj.get("framerate_reduction").isJsonNull()) {
        FramerateReductionEnum.validateJsonElement(jsonObj.get("framerate_reduction"));
      }
      if ((jsonObj.get("h264_profile") != null && !jsonObj.get("h264_profile").isJsonNull()) && !jsonObj.get("h264_profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `h264_profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("h264_profile").toString()));
      }
      // validate the optional field `h264_profile`
      if (jsonObj.get("h264_profile") != null && !jsonObj.get("h264_profile").isJsonNull()) {
        H264ProfileEnum.validateJsonElement(jsonObj.get("h264_profile"));
      }
      if ((jsonObj.get("keyframes") != null && !jsonObj.get("keyframes").isJsonNull()) && !jsonObj.get("keyframes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyframes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyframes").toString()));
      }
      // validate the optional field `keyframes`
      if (jsonObj.get("keyframes") != null && !jsonObj.get("keyframes").isJsonNull()) {
        KeyframesEnum.validateJsonElement(jsonObj.get("keyframes"));
      }
      if (!jsonObj.get("stream_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_format").toString()));
      }
      // validate the required field `stream_format`
      StreamFormatEnum.validateJsonElement(jsonObj.get("stream_format"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Output1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Output1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Output1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Output1.class));

       return (TypeAdapter<T>) new TypeAdapter<Output1>() {
           @Override
           public void write(JsonWriter out, Output1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Output1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Output1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Output1
   * @throws IOException if the JSON string is invalid with respect to Output1
   */
  public static Output1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Output1.class);
  }

  /**
   * Convert an instance of Output1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

