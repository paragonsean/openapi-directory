/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveStream6
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStream6 {
  public static final String SERIALIZED_NAME_ASPECT_RATIO_HEIGHT = "aspect_ratio_height";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO_HEIGHT)
  private Integer aspectRatioHeight;

  public static final String SERIALIZED_NAME_ASPECT_RATIO_WIDTH = "aspect_ratio_width";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO_WIDTH)
  private Integer aspectRatioWidth;

  /**
   * The billing mode for the stream. The default is &lt;strong&gt;pay_as_you_go&lt;/strong&gt;.
   */
  @JsonAdapter(BillingModeEnum.Adapter.class)
  public enum BillingModeEnum {
    PAY_AS_YOU_GO("pay_as_you_go"),
    
    TWENTYFOUR_SEVEN("twentyfour_seven");

    private String value;

    BillingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingModeEnum fromValue(String value) {
      for (BillingModeEnum b : BillingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BillingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BILLING_MODE = "billing_mode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  private BillingModeEnum billingMode;

  /**
   * The location of your stream. Choose a location as close as possible to your video source.
   */
  @JsonAdapter(BroadcastLocationEnum.Adapter.class)
  public enum BroadcastLocationEnum {
    ASIA_PACIFIC_AUSTRALIA("asia_pacific_australia"),
    
    ASIA_PACIFIC_JAPAN("asia_pacific_japan"),
    
    ASIA_PACIFIC_SINGAPORE("asia_pacific_singapore"),
    
    ASIA_PACIFIC_TAIWAN("asia_pacific_taiwan"),
    
    EU_BELGIUM("eu_belgium"),
    
    EU_GERMANY("eu_germany"),
    
    EU_IRELAND("eu_ireland"),
    
    SOUTH_AMERICA_BRAZIL("south_america_brazil"),
    
    US_CENTRAL_IOWA("us_central_iowa"),
    
    US_EAST_S_CAROLINA("us_east_s_carolina"),
    
    US_EAST_VIRGINIA("us_east_virginia"),
    
    US_WEST_CALIFORNIA("us_west_california"),
    
    US_WEST_OREGON("us_west_oregon");

    private String value;

    BroadcastLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BroadcastLocationEnum fromValue(String value) {
      for (BroadcastLocationEnum b : BroadcastLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BroadcastLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BroadcastLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BroadcastLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BroadcastLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BroadcastLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BROADCAST_LOCATION = "broadcast_location";
  @SerializedName(SERIALIZED_NAME_BROADCAST_LOCATION)
  private BroadcastLocationEnum broadcastLocation;

  /**
   * The type of closed caption data being passed from the source. The default, &lt;strong&gt;none&lt;/strong&gt;, indicates that no data is being provided. &lt;strong&gt;cea&lt;/strong&gt; indicates that a CEA closed captioning data stream is being provided. &lt;strong&gt;on_text&lt;/strong&gt; indicates that an onTextData closed captioning data stream is being provided. &lt;strong&gt;both&lt;/strong&gt; indicates that both CEA and onTextData closed captioing data streams are being provided.
   */
  @JsonAdapter(ClosedCaptionTypeEnum.Adapter.class)
  public enum ClosedCaptionTypeEnum {
    NONE("none"),
    
    CEA("cea"),
    
    ON_TEXT("on_text"),
    
    BOTH("both");

    private String value;

    ClosedCaptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedCaptionTypeEnum fromValue(String value) {
      for (ClosedCaptionTypeEnum b : ClosedCaptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClosedCaptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedCaptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedCaptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClosedCaptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClosedCaptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSED_CAPTION_TYPE = "closed_caption_type";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTION_TYPE)
  private ClosedCaptionTypeEnum closedCaptionType;

  /**
   * The type of connection between the video source and the transcoder. The default, &lt;strong&gt;pull&lt;/strong&gt;, instructs the transcoder to pull the video from the source. &lt;strong&gt;push&lt;/strong&gt; instructs the source to push the stream to the transcoder. &lt;strong&gt;cdn&lt;/strong&gt; uses a stream source to deliver the stream to the transcoder.
   */
  @JsonAdapter(DeliveryMethodEnum.Adapter.class)
  public enum DeliveryMethodEnum {
    PULL("pull"),
    
    CDN("cdn"),
    
    PUSH("push");

    private String value;

    DeliveryMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryMethodEnum fromValue(String value) {
      for (DeliveryMethodEnum b : DeliveryMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "delivery_method";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private DeliveryMethodEnum deliveryMethod;

  public static final String SERIALIZED_NAME_DELIVERY_PROTOCOLS = "delivery_protocols";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PROTOCOLS)
  private List<String> deliveryProtocols = new ArrayList<>();

  /**
   * For streams whose &lt;em&gt;encoder&lt;/em&gt; is &lt;strong&gt;wowza_streaming_engine&lt;/strong&gt;. The default is &lt;strong&gt;multi-bitrate&lt;/strong&gt;, which means you&#39;re sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value &lt;strong&gt;single-bitrate&lt;/strong&gt; means you&#39;re sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    SINGLE_BITRATE("single-bitrate"),
    
    MULTI_BITRATE("multi-bitrate");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String value) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "delivery_type";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private DeliveryTypeEnum deliveryType;

  public static final String SERIALIZED_NAME_DISABLE_AUTHENTICATION = "disable_authentication";
  @SerializedName(SERIALIZED_NAME_DISABLE_AUTHENTICATION)
  private Boolean disableAuthentication;

  /**
   * The video source for the live stream. Choose the type of camera or encoder you&#39;re using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn&#39;t listed, choose &lt;strong&gt;ipcamera&lt;/strong&gt;, &lt;strong&gt;other_rtmp&lt;/strong&gt;, or &lt;strong&gt;other_rtsp&lt;/strong&gt;.
   */
  @JsonAdapter(EncoderEnum.Adapter.class)
  public enum EncoderEnum {
    WOWZA_STREAMING_ENGINE("wowza_streaming_engine"),
    
    WOWZA_GOCODER("wowza_gocoder"),
    
    MEDIA_DS("media_ds"),
    
    AXIS("axis"),
    
    EPIPHAN("epiphan"),
    
    HAUPPAUGE("hauppauge"),
    
    JVC("jvc"),
    
    LIVE_U("live_u"),
    
    MATROX("matrox"),
    
    NEWTEK_TRICASTER("newtek_tricaster"),
    
    OSPREY("osprey"),
    
    SONY("sony"),
    
    TELESTREAM_WIRECAST("telestream_wirecast"),
    
    TERADEK_CUBE("teradek_cube"),
    
    VMIX("vmix"),
    
    X_SPLIT("x_split"),
    
    IPCAMERA("ipcamera"),
    
    OTHER_RTMP("other_rtmp"),
    
    OTHER_RTSP("other_rtsp");

    private String value;

    EncoderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncoderEnum fromValue(String value) {
      for (EncoderEnum b : EncoderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncoderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncoderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncoderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncoderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncoderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODER = "encoder";
  @SerializedName(SERIALIZED_NAME_ENCODER)
  private EncoderEnum encoder;

  public static final String SERIALIZED_NAME_HOSTED_PAGE = "hosted_page";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE)
  private Boolean hostedPage;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_DESCRIPTION = "hosted_page_description";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_DESCRIPTION)
  private String hostedPageDescription;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_LOGO_IMAGE = "hosted_page_logo_image";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_LOGO_IMAGE)
  private String hostedPageLogoImage;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_SHARING_ICONS = "hosted_page_sharing_icons";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_SHARING_ICONS)
  private Boolean hostedPageSharingIcons;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_TITLE = "hosted_page_title";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_TITLE)
  private String hostedPageTitle;

  public static final String SERIALIZED_NAME_LOW_LATENCY = "low_latency";
  @SerializedName(SERIALIZED_NAME_LOW_LATENCY)
  private Boolean lowLatency;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PLAYER_COUNTDOWN = "player_countdown";
  @SerializedName(SERIALIZED_NAME_PLAYER_COUNTDOWN)
  private Boolean playerCountdown;

  public static final String SERIALIZED_NAME_PLAYER_COUNTDOWN_AT = "player_countdown_at";
  @SerializedName(SERIALIZED_NAME_PLAYER_COUNTDOWN_AT)
  private OffsetDateTime playerCountdownAt;

  public static final String SERIALIZED_NAME_PLAYER_LOGO_IMAGE = "player_logo_image";
  @SerializedName(SERIALIZED_NAME_PLAYER_LOGO_IMAGE)
  private String playerLogoImage;

  /**
   * The corner of the player in which you want the player logo to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   */
  @JsonAdapter(PlayerLogoPositionEnum.Adapter.class)
  public enum PlayerLogoPositionEnum {
    TOP_LEFT("top-left"),
    
    TOP_RIGHT("top-right"),
    
    BOTTOM_LEFT("bottom-left"),
    
    BOTTOM_RIGHT("bottom-right");

    private String value;

    PlayerLogoPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayerLogoPositionEnum fromValue(String value) {
      for (PlayerLogoPositionEnum b : PlayerLogoPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlayerLogoPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayerLogoPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayerLogoPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlayerLogoPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlayerLogoPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAYER_LOGO_POSITION = "player_logo_position";
  @SerializedName(SERIALIZED_NAME_PLAYER_LOGO_POSITION)
  private PlayerLogoPositionEnum playerLogoPosition;

  public static final String SERIALIZED_NAME_PLAYER_RESPONSIVE = "player_responsive";
  @SerializedName(SERIALIZED_NAME_PLAYER_RESPONSIVE)
  private Boolean playerResponsive;

  public static final String SERIALIZED_NAME_PLAYER_TYPE = "player_type";
  @SerializedName(SERIALIZED_NAME_PLAYER_TYPE)
  private String playerType;

  public static final String SERIALIZED_NAME_PLAYER_VIDEO_POSTER_IMAGE = "player_video_poster_image";
  @SerializedName(SERIALIZED_NAME_PLAYER_VIDEO_POSTER_IMAGE)
  private String playerVideoPosterImage;

  public static final String SERIALIZED_NAME_PLAYER_WIDTH = "player_width";
  @SerializedName(SERIALIZED_NAME_PLAYER_WIDTH)
  private Integer playerWidth;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private Boolean recording;

  public static final String SERIALIZED_NAME_REMOVE_HOSTED_PAGE_LOGO_IMAGE = "remove_hosted_page_logo_image";
  @SerializedName(SERIALIZED_NAME_REMOVE_HOSTED_PAGE_LOGO_IMAGE)
  private Boolean removeHostedPageLogoImage;

  public static final String SERIALIZED_NAME_REMOVE_PLAYER_LOGO_IMAGE = "remove_player_logo_image";
  @SerializedName(SERIALIZED_NAME_REMOVE_PLAYER_LOGO_IMAGE)
  private Boolean removePlayerLogoImage;

  public static final String SERIALIZED_NAME_REMOVE_PLAYER_VIDEO_POSTER_IMAGE = "remove_player_video_poster_image";
  @SerializedName(SERIALIZED_NAME_REMOVE_PLAYER_VIDEO_POSTER_IMAGE)
  private Boolean removePlayerVideoPosterImage;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  /**
   * The type of stream being delivered from Wowza Streaming Cloud. The default is &lt;strong&gt;hls-https&lt;/strong&gt;.
   */
  @JsonAdapter(TargetDeliveryProtocolEnum.Adapter.class)
  public enum TargetDeliveryProtocolEnum {
    HTTPS("hls-https"),
    
    HDS("hls-hds");

    private String value;

    TargetDeliveryProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetDeliveryProtocolEnum fromValue(String value) {
      for (TargetDeliveryProtocolEnum b : TargetDeliveryProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetDeliveryProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetDeliveryProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetDeliveryProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetDeliveryProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetDeliveryProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_DELIVERY_PROTOCOL = "target_delivery_protocol";
  @SerializedName(SERIALIZED_NAME_TARGET_DELIVERY_PROTOCOL)
  private TargetDeliveryProtocolEnum targetDeliveryProtocol;

  /**
   * The type of transcoder, either &lt;strong&gt;transcoded&lt;/strong&gt; for streams that are transcoded into adaptive bitrate renditions or &lt;strong&gt;passthrough&lt;/strong&gt; for streams that aren&#39;t processed by the transcoder. The default is &lt;strong&gt;transcoded&lt;/strong&gt;.
   */
  @JsonAdapter(TranscoderTypeEnum.Adapter.class)
  public enum TranscoderTypeEnum {
    TRANSCODED("transcoded"),
    
    PASSTHROUGH("passthrough");

    private String value;

    TranscoderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TranscoderTypeEnum fromValue(String value) {
      for (TranscoderTypeEnum b : TranscoderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TranscoderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TranscoderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TranscoderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TranscoderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TranscoderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSCODER_TYPE = "transcoder_type";
  @SerializedName(SERIALIZED_NAME_TRANSCODER_TYPE)
  private TranscoderTypeEnum transcoderType;

  public static final String SERIALIZED_NAME_USE_STREAM_SOURCE = "use_stream_source";
  @SerializedName(SERIALIZED_NAME_USE_STREAM_SOURCE)
  private Boolean useStreamSource;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VIDEO_FALLBACK = "video_fallback";
  @SerializedName(SERIALIZED_NAME_VIDEO_FALLBACK)
  private Boolean videoFallback;

  public LiveStream6() {
  }

  public LiveStream6 aspectRatioHeight(Integer aspectRatioHeight) {
    this.aspectRatioHeight = aspectRatioHeight;
    return this;
  }

  /**
   * The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
   * @return aspectRatioHeight
   */
  @javax.annotation.Nonnull
  public Integer getAspectRatioHeight() {
    return aspectRatioHeight;
  }

  public void setAspectRatioHeight(Integer aspectRatioHeight) {
    this.aspectRatioHeight = aspectRatioHeight;
  }


  public LiveStream6 aspectRatioWidth(Integer aspectRatioWidth) {
    this.aspectRatioWidth = aspectRatioWidth;
    return this;
  }

  /**
   * The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
   * @return aspectRatioWidth
   */
  @javax.annotation.Nonnull
  public Integer getAspectRatioWidth() {
    return aspectRatioWidth;
  }

  public void setAspectRatioWidth(Integer aspectRatioWidth) {
    this.aspectRatioWidth = aspectRatioWidth;
  }


  public LiveStream6 billingMode(BillingModeEnum billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   * The billing mode for the stream. The default is &lt;strong&gt;pay_as_you_go&lt;/strong&gt;.
   * @return billingMode
   */
  @javax.annotation.Nonnull
  public BillingModeEnum getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(BillingModeEnum billingMode) {
    this.billingMode = billingMode;
  }


  public LiveStream6 broadcastLocation(BroadcastLocationEnum broadcastLocation) {
    this.broadcastLocation = broadcastLocation;
    return this;
  }

  /**
   * The location of your stream. Choose a location as close as possible to your video source.
   * @return broadcastLocation
   */
  @javax.annotation.Nonnull
  public BroadcastLocationEnum getBroadcastLocation() {
    return broadcastLocation;
  }

  public void setBroadcastLocation(BroadcastLocationEnum broadcastLocation) {
    this.broadcastLocation = broadcastLocation;
  }


  public LiveStream6 closedCaptionType(ClosedCaptionTypeEnum closedCaptionType) {
    this.closedCaptionType = closedCaptionType;
    return this;
  }

  /**
   * The type of closed caption data being passed from the source. The default, &lt;strong&gt;none&lt;/strong&gt;, indicates that no data is being provided. &lt;strong&gt;cea&lt;/strong&gt; indicates that a CEA closed captioning data stream is being provided. &lt;strong&gt;on_text&lt;/strong&gt; indicates that an onTextData closed captioning data stream is being provided. &lt;strong&gt;both&lt;/strong&gt; indicates that both CEA and onTextData closed captioing data streams are being provided.
   * @return closedCaptionType
   */
  @javax.annotation.Nullable
  public ClosedCaptionTypeEnum getClosedCaptionType() {
    return closedCaptionType;
  }

  public void setClosedCaptionType(ClosedCaptionTypeEnum closedCaptionType) {
    this.closedCaptionType = closedCaptionType;
  }


  public LiveStream6 deliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * The type of connection between the video source and the transcoder. The default, &lt;strong&gt;pull&lt;/strong&gt;, instructs the transcoder to pull the video from the source. &lt;strong&gt;push&lt;/strong&gt; instructs the source to push the stream to the transcoder. &lt;strong&gt;cdn&lt;/strong&gt; uses a stream source to deliver the stream to the transcoder.
   * @return deliveryMethod
   */
  @javax.annotation.Nullable
  public DeliveryMethodEnum getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public LiveStream6 deliveryProtocols(List<String> deliveryProtocols) {
    this.deliveryProtocols = deliveryProtocols;
    return this;
  }

  public LiveStream6 addDeliveryProtocolsItem(String deliveryProtocolsItem) {
    if (this.deliveryProtocols == null) {
      this.deliveryProtocols = new ArrayList<>();
    }
    this.deliveryProtocols.add(deliveryProtocolsItem);
    return this;
  }

  /**
   * An array of direct delivery protocols enabled for this live stream. By default, &lt;strong&gt;rtmp&lt;/strong&gt;, &lt;strong&gt;rtsp&lt;/strong&gt;, and &lt;strong&gt;wowz&lt;/strong&gt; are enabled.
   * @return deliveryProtocols
   */
  @javax.annotation.Nullable
  public List<String> getDeliveryProtocols() {
    return deliveryProtocols;
  }

  public void setDeliveryProtocols(List<String> deliveryProtocols) {
    this.deliveryProtocols = deliveryProtocols;
  }


  public LiveStream6 deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

  /**
   * For streams whose &lt;em&gt;encoder&lt;/em&gt; is &lt;strong&gt;wowza_streaming_engine&lt;/strong&gt;. The default is &lt;strong&gt;multi-bitrate&lt;/strong&gt;, which means you&#39;re sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value &lt;strong&gt;single-bitrate&lt;/strong&gt; means you&#39;re sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.
   * @return deliveryType
   */
  @javax.annotation.Nullable
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }


  public LiveStream6 disableAuthentication(Boolean disableAuthentication) {
    this.disableAuthentication = disableAuthentication;
    return this;
  }

  /**
   * Authentication is required by default for RTMP and RTSP push connections from a video source to Wowza Streaming Cloud. Specify &lt;strong&gt;true&lt;/strong&gt; to disable authentication with the video source.
   * @return disableAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getDisableAuthentication() {
    return disableAuthentication;
  }

  public void setDisableAuthentication(Boolean disableAuthentication) {
    this.disableAuthentication = disableAuthentication;
  }


  public LiveStream6 encoder(EncoderEnum encoder) {
    this.encoder = encoder;
    return this;
  }

  /**
   * The video source for the live stream. Choose the type of camera or encoder you&#39;re using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn&#39;t listed, choose &lt;strong&gt;ipcamera&lt;/strong&gt;, &lt;strong&gt;other_rtmp&lt;/strong&gt;, or &lt;strong&gt;other_rtsp&lt;/strong&gt;.
   * @return encoder
   */
  @javax.annotation.Nonnull
  public EncoderEnum getEncoder() {
    return encoder;
  }

  public void setEncoder(EncoderEnum encoder) {
    this.encoder = encoder;
  }


  public LiveStream6 hostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
    return this;
  }

  /**
   * A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, &lt;strong&gt;true&lt;/strong&gt;, creates a hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to not create a hosted web page.
   * @return hostedPage
   */
  @javax.annotation.Nullable
  public Boolean getHostedPage() {
    return hostedPage;
  }

  public void setHostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
  }


  public LiveStream6 hostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
    return this;
  }

  /**
   * A description that appears on the hosted page below the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageDescription
   */
  @javax.annotation.Nullable
  public String getHostedPageDescription() {
    return hostedPageDescription;
  }

  public void setHostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
  }


  public LiveStream6 hostedPageLogoImage(String hostedPageLogoImage) {
    this.hostedPageLogoImage = hostedPageLogoImage;
    return this;
  }

  /**
   * A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.
   * @return hostedPageLogoImage
   */
  @javax.annotation.Nullable
  public String getHostedPageLogoImage() {
    return hostedPageLogoImage;
  }

  public void setHostedPageLogoImage(String hostedPageLogoImage) {
    this.hostedPageLogoImage = hostedPageLogoImage;
  }


  public LiveStream6 hostedPageSharingIcons(Boolean hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
    return this;
  }

  /**
   * Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, &lt;strong&gt;true&lt;/strong&gt;, includes sharing icons on the hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to omit sharing icons.
   * @return hostedPageSharingIcons
   */
  @javax.annotation.Nullable
  public Boolean getHostedPageSharingIcons() {
    return hostedPageSharingIcons;
  }

  public void setHostedPageSharingIcons(Boolean hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
  }


  public LiveStream6 hostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
    return this;
  }

  /**
   * A title for the page that appears above the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageTitle
   */
  @javax.annotation.Nullable
  public String getHostedPageTitle() {
    return hostedPageTitle;
  }

  public void setHostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
  }


  public LiveStream6 lowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
    return this;
  }

  /**
   * For streams whose &lt;em&gt;target_delivery_protocol&lt;/em&gt; is &lt;strong&gt;hls-https&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt;, turns off incoming and sort packet buffers and delivers smaller video packets to the player, which can reduce latency as long as networks can handle the increased overhead. The default is &lt;strong&gt;false&lt;/strong&gt;. &lt;br /&gt;&lt;br /&gt;This parameter only affects streams played over a target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. It does &lt;em&gt;not&lt;/em&gt; reduce latency in streams played over a hosted page and is unrelated to Wowza ultra low latency stream targets.
   * @return lowLatency
   */
  @javax.annotation.Nullable
  public Boolean getLowLatency() {
    return lowLatency;
  }

  public void setLowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
  }


  public LiveStream6 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A descriptive name for the live stream. Maximum 200 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LiveStream6 password(String password) {
    this.password = password;
    return this;
  }

  /**
   * A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public LiveStream6 playerCountdown(Boolean playerCountdown) {
    this.playerCountdown = playerCountdown;
    return this;
  }

  /**
   * A clock that appears in the player before the event and counts down to the start of the stream. Specify &lt;strong&gt;true&lt;/strong&gt; to display the countdown clock. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return playerCountdown
   */
  @javax.annotation.Nullable
  public Boolean getPlayerCountdown() {
    return playerCountdown;
  }

  public void setPlayerCountdown(Boolean playerCountdown) {
    this.playerCountdown = playerCountdown;
  }


  public LiveStream6 playerCountdownAt(OffsetDateTime playerCountdownAt) {
    this.playerCountdownAt = playerCountdownAt;
    return this;
  }

  /**
   * The date and time that the event starts, used by the countdown clock. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt;, where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC.
   * @return playerCountdownAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPlayerCountdownAt() {
    return playerCountdownAt;
  }

  public void setPlayerCountdownAt(OffsetDateTime playerCountdownAt) {
    this.playerCountdownAt = playerCountdownAt;
  }


  public LiveStream6 playerLogoImage(String playerLogoImage) {
    this.playerLogoImage = playerLogoImage;
    return this;
  }

  /**
   * A Base64-encoded string representation of a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.
   * @return playerLogoImage
   */
  @javax.annotation.Nullable
  public String getPlayerLogoImage() {
    return playerLogoImage;
  }

  public void setPlayerLogoImage(String playerLogoImage) {
    this.playerLogoImage = playerLogoImage;
  }


  public LiveStream6 playerLogoPosition(PlayerLogoPositionEnum playerLogoPosition) {
    this.playerLogoPosition = playerLogoPosition;
    return this;
  }

  /**
   * The corner of the player in which you want the player logo to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   * @return playerLogoPosition
   */
  @javax.annotation.Nullable
  public PlayerLogoPositionEnum getPlayerLogoPosition() {
    return playerLogoPosition;
  }

  public void setPlayerLogoPosition(PlayerLogoPositionEnum playerLogoPosition) {
    this.playerLogoPosition = playerLogoPosition;
  }


  public LiveStream6 playerResponsive(Boolean playerResponsive) {
    this.playerResponsive = playerResponsive;
    return this;
  }

  /**
   * A player whose size adjusts according to the device on which it&#39;s being viewed. If &lt;strong&gt;true&lt;/strong&gt;, creates a responsive player. If &lt;strong&gt;false&lt;/strong&gt;, specify a &lt;em&gt;player_width&lt;/em&gt;.
   * @return playerResponsive
   */
  @javax.annotation.Nullable
  public Boolean getPlayerResponsive() {
    return playerResponsive;
  }

  public void setPlayerResponsive(Boolean playerResponsive) {
    this.playerResponsive = playerResponsive;
  }


  public LiveStream6 playerType(String playerType) {
    this.playerType = playerType;
    return this;
  }

  /**
   * The player you want to use. Valid values are &lt;strong&gt;original_html5&lt;/strong&gt;, which provides HTML5 playback and falls back to Flash on older browsers, and &lt;strong&gt;wowza_player&lt;/strong&gt;, which provides HTML5 playback over Apple HLS. &lt;strong&gt;wowza_player&lt;/strong&gt; requires that &lt;strong&gt;target_delivery_protocol&lt;/strong&gt; be &lt;strong&gt;hls-https&lt;/strong&gt; and &lt;strong&gt;closed_caption_type&lt;/strong&gt; be &lt;strong&gt;none&lt;/strong&gt;. The default is &lt;strong&gt;original_html5&lt;/strong&gt;.
   * @return playerType
   */
  @javax.annotation.Nullable
  public String getPlayerType() {
    return playerType;
  }

  public void setPlayerType(String playerType) {
    this.playerType = playerType;
  }


  public LiveStream6 playerVideoPosterImage(String playerVideoPosterImage) {
    this.playerVideoPosterImage = playerVideoPosterImage;
    return this;
  }

  /**
   * A Base64-encoded string representation of a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.
   * @return playerVideoPosterImage
   */
  @javax.annotation.Nullable
  public String getPlayerVideoPosterImage() {
    return playerVideoPosterImage;
  }

  public void setPlayerVideoPosterImage(String playerVideoPosterImage) {
    this.playerVideoPosterImage = playerVideoPosterImage;
  }


  public LiveStream6 playerWidth(Integer playerWidth) {
    this.playerWidth = playerWidth;
    return this;
  }

  /**
   * The width, in pixels, of a fixed-size player. The default is &lt;strong&gt;640&lt;/strong&gt;.
   * @return playerWidth
   */
  @javax.annotation.Nullable
  public Integer getPlayerWidth() {
    return playerWidth;
  }

  public void setPlayerWidth(Integer playerWidth) {
    this.playerWidth = playerWidth;
  }


  public LiveStream6 recording(Boolean recording) {
    this.recording = recording;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, creates a recording of the live stream. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return recording
   */
  @javax.annotation.Nullable
  public Boolean getRecording() {
    return recording;
  }

  public void setRecording(Boolean recording) {
    this.recording = recording;
  }


  public LiveStream6 removeHostedPageLogoImage(Boolean removeHostedPageLogoImage) {
    this.removeHostedPageLogoImage = removeHostedPageLogoImage;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, removes the logo file from the hosted page. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return removeHostedPageLogoImage
   */
  @javax.annotation.Nullable
  public Boolean getRemoveHostedPageLogoImage() {
    return removeHostedPageLogoImage;
  }

  public void setRemoveHostedPageLogoImage(Boolean removeHostedPageLogoImage) {
    this.removeHostedPageLogoImage = removeHostedPageLogoImage;
  }


  public LiveStream6 removePlayerLogoImage(Boolean removePlayerLogoImage) {
    this.removePlayerLogoImage = removePlayerLogoImage;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, removes the logo file from the player. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return removePlayerLogoImage
   */
  @javax.annotation.Nullable
  public Boolean getRemovePlayerLogoImage() {
    return removePlayerLogoImage;
  }

  public void setRemovePlayerLogoImage(Boolean removePlayerLogoImage) {
    this.removePlayerLogoImage = removePlayerLogoImage;
  }


  public LiveStream6 removePlayerVideoPosterImage(Boolean removePlayerVideoPosterImage) {
    this.removePlayerVideoPosterImage = removePlayerVideoPosterImage;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, removes the poster image. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return removePlayerVideoPosterImage
   */
  @javax.annotation.Nullable
  public Boolean getRemovePlayerVideoPosterImage() {
    return removePlayerVideoPosterImage;
  }

  public void setRemovePlayerVideoPosterImage(Boolean removePlayerVideoPosterImage) {
    this.removePlayerVideoPosterImage = removePlayerVideoPosterImage;
  }


  public LiveStream6 sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * The URL of an IP camera or video encoder using an RTMP and RTSP pull connection to Wowza Streaming Cloud. Consult the camera or encoder documentation for the URL syntax.
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public LiveStream6 targetDeliveryProtocol(TargetDeliveryProtocolEnum targetDeliveryProtocol) {
    this.targetDeliveryProtocol = targetDeliveryProtocol;
    return this;
  }

  /**
   * The type of stream being delivered from Wowza Streaming Cloud. The default is &lt;strong&gt;hls-https&lt;/strong&gt;.
   * @return targetDeliveryProtocol
   */
  @javax.annotation.Nullable
  public TargetDeliveryProtocolEnum getTargetDeliveryProtocol() {
    return targetDeliveryProtocol;
  }

  public void setTargetDeliveryProtocol(TargetDeliveryProtocolEnum targetDeliveryProtocol) {
    this.targetDeliveryProtocol = targetDeliveryProtocol;
  }


  public LiveStream6 transcoderType(TranscoderTypeEnum transcoderType) {
    this.transcoderType = transcoderType;
    return this;
  }

  /**
   * The type of transcoder, either &lt;strong&gt;transcoded&lt;/strong&gt; for streams that are transcoded into adaptive bitrate renditions or &lt;strong&gt;passthrough&lt;/strong&gt; for streams that aren&#39;t processed by the transcoder. The default is &lt;strong&gt;transcoded&lt;/strong&gt;.
   * @return transcoderType
   */
  @javax.annotation.Nonnull
  public TranscoderTypeEnum getTranscoderType() {
    return transcoderType;
  }

  public void setTranscoderType(TranscoderTypeEnum transcoderType) {
    this.transcoderType = transcoderType;
  }


  public LiveStream6 useStreamSource(Boolean useStreamSource) {
    this.useStreamSource = useStreamSource;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, &lt;strong&gt;false&lt;/strong&gt;, pushes directly to Wowza Streaming Cloud.
   * @return useStreamSource
   */
  @javax.annotation.Nullable
  public Boolean getUseStreamSource() {
    return useStreamSource;
  }

  public void setUseStreamSource(Boolean useStreamSource) {
    this.useStreamSource = useStreamSource;
  }


  public LiveStream6 username(String username) {
    this.username = username;
    return this;
  }

  /**
   * A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public LiveStream6 videoFallback(Boolean videoFallback) {
    this.videoFallback = videoFallback;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, black video plays if the video source disconnects from the transcoder. If &lt;strong&gt;false&lt;/strong&gt; (the default), a stream-not-available message appears. Works only with HLS stream targets.
   * @return videoFallback
   */
  @javax.annotation.Nullable
  public Boolean getVideoFallback() {
    return videoFallback;
  }

  public void setVideoFallback(Boolean videoFallback) {
    this.videoFallback = videoFallback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStream6 liveStream6 = (LiveStream6) o;
    return Objects.equals(this.aspectRatioHeight, liveStream6.aspectRatioHeight) &&
        Objects.equals(this.aspectRatioWidth, liveStream6.aspectRatioWidth) &&
        Objects.equals(this.billingMode, liveStream6.billingMode) &&
        Objects.equals(this.broadcastLocation, liveStream6.broadcastLocation) &&
        Objects.equals(this.closedCaptionType, liveStream6.closedCaptionType) &&
        Objects.equals(this.deliveryMethod, liveStream6.deliveryMethod) &&
        Objects.equals(this.deliveryProtocols, liveStream6.deliveryProtocols) &&
        Objects.equals(this.deliveryType, liveStream6.deliveryType) &&
        Objects.equals(this.disableAuthentication, liveStream6.disableAuthentication) &&
        Objects.equals(this.encoder, liveStream6.encoder) &&
        Objects.equals(this.hostedPage, liveStream6.hostedPage) &&
        Objects.equals(this.hostedPageDescription, liveStream6.hostedPageDescription) &&
        Objects.equals(this.hostedPageLogoImage, liveStream6.hostedPageLogoImage) &&
        Objects.equals(this.hostedPageSharingIcons, liveStream6.hostedPageSharingIcons) &&
        Objects.equals(this.hostedPageTitle, liveStream6.hostedPageTitle) &&
        Objects.equals(this.lowLatency, liveStream6.lowLatency) &&
        Objects.equals(this.name, liveStream6.name) &&
        Objects.equals(this.password, liveStream6.password) &&
        Objects.equals(this.playerCountdown, liveStream6.playerCountdown) &&
        Objects.equals(this.playerCountdownAt, liveStream6.playerCountdownAt) &&
        Objects.equals(this.playerLogoImage, liveStream6.playerLogoImage) &&
        Objects.equals(this.playerLogoPosition, liveStream6.playerLogoPosition) &&
        Objects.equals(this.playerResponsive, liveStream6.playerResponsive) &&
        Objects.equals(this.playerType, liveStream6.playerType) &&
        Objects.equals(this.playerVideoPosterImage, liveStream6.playerVideoPosterImage) &&
        Objects.equals(this.playerWidth, liveStream6.playerWidth) &&
        Objects.equals(this.recording, liveStream6.recording) &&
        Objects.equals(this.removeHostedPageLogoImage, liveStream6.removeHostedPageLogoImage) &&
        Objects.equals(this.removePlayerLogoImage, liveStream6.removePlayerLogoImage) &&
        Objects.equals(this.removePlayerVideoPosterImage, liveStream6.removePlayerVideoPosterImage) &&
        Objects.equals(this.sourceUrl, liveStream6.sourceUrl) &&
        Objects.equals(this.targetDeliveryProtocol, liveStream6.targetDeliveryProtocol) &&
        Objects.equals(this.transcoderType, liveStream6.transcoderType) &&
        Objects.equals(this.useStreamSource, liveStream6.useStreamSource) &&
        Objects.equals(this.username, liveStream6.username) &&
        Objects.equals(this.videoFallback, liveStream6.videoFallback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatioHeight, aspectRatioWidth, billingMode, broadcastLocation, closedCaptionType, deliveryMethod, deliveryProtocols, deliveryType, disableAuthentication, encoder, hostedPage, hostedPageDescription, hostedPageLogoImage, hostedPageSharingIcons, hostedPageTitle, lowLatency, name, password, playerCountdown, playerCountdownAt, playerLogoImage, playerLogoPosition, playerResponsive, playerType, playerVideoPosterImage, playerWidth, recording, removeHostedPageLogoImage, removePlayerLogoImage, removePlayerVideoPosterImage, sourceUrl, targetDeliveryProtocol, transcoderType, useStreamSource, username, videoFallback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStream6 {\n");
    sb.append("    aspectRatioHeight: ").append(toIndentedString(aspectRatioHeight)).append("\n");
    sb.append("    aspectRatioWidth: ").append(toIndentedString(aspectRatioWidth)).append("\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    broadcastLocation: ").append(toIndentedString(broadcastLocation)).append("\n");
    sb.append("    closedCaptionType: ").append(toIndentedString(closedCaptionType)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    deliveryProtocols: ").append(toIndentedString(deliveryProtocols)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    disableAuthentication: ").append(toIndentedString(disableAuthentication)).append("\n");
    sb.append("    encoder: ").append(toIndentedString(encoder)).append("\n");
    sb.append("    hostedPage: ").append(toIndentedString(hostedPage)).append("\n");
    sb.append("    hostedPageDescription: ").append(toIndentedString(hostedPageDescription)).append("\n");
    sb.append("    hostedPageLogoImage: ").append(toIndentedString(hostedPageLogoImage)).append("\n");
    sb.append("    hostedPageSharingIcons: ").append(toIndentedString(hostedPageSharingIcons)).append("\n");
    sb.append("    hostedPageTitle: ").append(toIndentedString(hostedPageTitle)).append("\n");
    sb.append("    lowLatency: ").append(toIndentedString(lowLatency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    playerCountdown: ").append(toIndentedString(playerCountdown)).append("\n");
    sb.append("    playerCountdownAt: ").append(toIndentedString(playerCountdownAt)).append("\n");
    sb.append("    playerLogoImage: ").append(toIndentedString(playerLogoImage)).append("\n");
    sb.append("    playerLogoPosition: ").append(toIndentedString(playerLogoPosition)).append("\n");
    sb.append("    playerResponsive: ").append(toIndentedString(playerResponsive)).append("\n");
    sb.append("    playerType: ").append(toIndentedString(playerType)).append("\n");
    sb.append("    playerVideoPosterImage: ").append(toIndentedString(playerVideoPosterImage)).append("\n");
    sb.append("    playerWidth: ").append(toIndentedString(playerWidth)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    removeHostedPageLogoImage: ").append(toIndentedString(removeHostedPageLogoImage)).append("\n");
    sb.append("    removePlayerLogoImage: ").append(toIndentedString(removePlayerLogoImage)).append("\n");
    sb.append("    removePlayerVideoPosterImage: ").append(toIndentedString(removePlayerVideoPosterImage)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    targetDeliveryProtocol: ").append(toIndentedString(targetDeliveryProtocol)).append("\n");
    sb.append("    transcoderType: ").append(toIndentedString(transcoderType)).append("\n");
    sb.append("    useStreamSource: ").append(toIndentedString(useStreamSource)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    videoFallback: ").append(toIndentedString(videoFallback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspect_ratio_height");
    openapiFields.add("aspect_ratio_width");
    openapiFields.add("billing_mode");
    openapiFields.add("broadcast_location");
    openapiFields.add("closed_caption_type");
    openapiFields.add("delivery_method");
    openapiFields.add("delivery_protocols");
    openapiFields.add("delivery_type");
    openapiFields.add("disable_authentication");
    openapiFields.add("encoder");
    openapiFields.add("hosted_page");
    openapiFields.add("hosted_page_description");
    openapiFields.add("hosted_page_logo_image");
    openapiFields.add("hosted_page_sharing_icons");
    openapiFields.add("hosted_page_title");
    openapiFields.add("low_latency");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("player_countdown");
    openapiFields.add("player_countdown_at");
    openapiFields.add("player_logo_image");
    openapiFields.add("player_logo_position");
    openapiFields.add("player_responsive");
    openapiFields.add("player_type");
    openapiFields.add("player_video_poster_image");
    openapiFields.add("player_width");
    openapiFields.add("recording");
    openapiFields.add("remove_hosted_page_logo_image");
    openapiFields.add("remove_player_logo_image");
    openapiFields.add("remove_player_video_poster_image");
    openapiFields.add("source_url");
    openapiFields.add("target_delivery_protocol");
    openapiFields.add("transcoder_type");
    openapiFields.add("use_stream_source");
    openapiFields.add("username");
    openapiFields.add("video_fallback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aspect_ratio_height");
    openapiRequiredFields.add("aspect_ratio_width");
    openapiRequiredFields.add("billing_mode");
    openapiRequiredFields.add("broadcast_location");
    openapiRequiredFields.add("encoder");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("transcoder_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStream6
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStream6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStream6 is not found in the empty JSON string", LiveStream6.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStream6.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStream6` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveStream6.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("billing_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_mode").toString()));
      }
      // validate the required field `billing_mode`
      BillingModeEnum.validateJsonElement(jsonObj.get("billing_mode"));
      if (!jsonObj.get("broadcast_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `broadcast_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("broadcast_location").toString()));
      }
      // validate the required field `broadcast_location`
      BroadcastLocationEnum.validateJsonElement(jsonObj.get("broadcast_location"));
      if ((jsonObj.get("closed_caption_type") != null && !jsonObj.get("closed_caption_type").isJsonNull()) && !jsonObj.get("closed_caption_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_caption_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_caption_type").toString()));
      }
      // validate the optional field `closed_caption_type`
      if (jsonObj.get("closed_caption_type") != null && !jsonObj.get("closed_caption_type").isJsonNull()) {
        ClosedCaptionTypeEnum.validateJsonElement(jsonObj.get("closed_caption_type"));
      }
      if ((jsonObj.get("delivery_method") != null && !jsonObj.get("delivery_method").isJsonNull()) && !jsonObj.get("delivery_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_method").toString()));
      }
      // validate the optional field `delivery_method`
      if (jsonObj.get("delivery_method") != null && !jsonObj.get("delivery_method").isJsonNull()) {
        DeliveryMethodEnum.validateJsonElement(jsonObj.get("delivery_method"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("delivery_protocols") != null && !jsonObj.get("delivery_protocols").isJsonNull() && !jsonObj.get("delivery_protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_protocols` to be an array in the JSON string but got `%s`", jsonObj.get("delivery_protocols").toString()));
      }
      if ((jsonObj.get("delivery_type") != null && !jsonObj.get("delivery_type").isJsonNull()) && !jsonObj.get("delivery_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_type").toString()));
      }
      // validate the optional field `delivery_type`
      if (jsonObj.get("delivery_type") != null && !jsonObj.get("delivery_type").isJsonNull()) {
        DeliveryTypeEnum.validateJsonElement(jsonObj.get("delivery_type"));
      }
      if (!jsonObj.get("encoder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoder").toString()));
      }
      // validate the required field `encoder`
      EncoderEnum.validateJsonElement(jsonObj.get("encoder"));
      if ((jsonObj.get("hosted_page_description") != null && !jsonObj.get("hosted_page_description").isJsonNull()) && !jsonObj.get("hosted_page_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_description").toString()));
      }
      if ((jsonObj.get("hosted_page_logo_image") != null && !jsonObj.get("hosted_page_logo_image").isJsonNull()) && !jsonObj.get("hosted_page_logo_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_logo_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_logo_image").toString()));
      }
      if ((jsonObj.get("hosted_page_title") != null && !jsonObj.get("hosted_page_title").isJsonNull()) && !jsonObj.get("hosted_page_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_title").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("player_logo_image") != null && !jsonObj.get("player_logo_image").isJsonNull()) && !jsonObj.get("player_logo_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player_logo_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player_logo_image").toString()));
      }
      if ((jsonObj.get("player_logo_position") != null && !jsonObj.get("player_logo_position").isJsonNull()) && !jsonObj.get("player_logo_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player_logo_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player_logo_position").toString()));
      }
      // validate the optional field `player_logo_position`
      if (jsonObj.get("player_logo_position") != null && !jsonObj.get("player_logo_position").isJsonNull()) {
        PlayerLogoPositionEnum.validateJsonElement(jsonObj.get("player_logo_position"));
      }
      if ((jsonObj.get("player_type") != null && !jsonObj.get("player_type").isJsonNull()) && !jsonObj.get("player_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player_type").toString()));
      }
      if ((jsonObj.get("player_video_poster_image") != null && !jsonObj.get("player_video_poster_image").isJsonNull()) && !jsonObj.get("player_video_poster_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player_video_poster_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player_video_poster_image").toString()));
      }
      if ((jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) && !jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if ((jsonObj.get("target_delivery_protocol") != null && !jsonObj.get("target_delivery_protocol").isJsonNull()) && !jsonObj.get("target_delivery_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_delivery_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_delivery_protocol").toString()));
      }
      // validate the optional field `target_delivery_protocol`
      if (jsonObj.get("target_delivery_protocol") != null && !jsonObj.get("target_delivery_protocol").isJsonNull()) {
        TargetDeliveryProtocolEnum.validateJsonElement(jsonObj.get("target_delivery_protocol"));
      }
      if (!jsonObj.get("transcoder_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcoder_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcoder_type").toString()));
      }
      // validate the required field `transcoder_type`
      TranscoderTypeEnum.validateJsonElement(jsonObj.get("transcoder_type"));
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStream6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStream6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStream6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStream6.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStream6>() {
           @Override
           public void write(JsonWriter out, LiveStream6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStream6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStream6 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStream6
   * @throws IOException if the JSON string is invalid with respect to LiveStream6
   */
  public static LiveStream6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStream6.class);
  }

  /**
   * Convert an instance of LiveStream6 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

