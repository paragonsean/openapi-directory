/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamTarget5
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamTarget5 {
  public static final String SERIALIZED_NAME_BACKUP_URL = "backup_url";
  @SerializedName(SERIALIZED_NAME_BACKUP_URL)
  private String backupUrl;

  /**
   * &lt;strong&gt;The &lt;em&gt;chunk_size&lt;/em&gt; parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.&lt;/strong&gt; Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. The segment duration for HLS encoding. The default is &lt;strong&gt;10&lt;/strong&gt;.
   */
  @JsonAdapter(ChunkSizeEnum.Adapter.class)
  public enum ChunkSizeEnum {
    _2("2"),
    
    _4("4"),
    
    _6("6"),
    
    _8("8"),
    
    _10("10");

    private String value;

    ChunkSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChunkSizeEnum fromValue(String value) {
      for (ChunkSizeEnum b : ChunkSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChunkSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChunkSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChunkSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChunkSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChunkSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHUNK_SIZE = "chunk_size";
  @SerializedName(SERIALIZED_NAME_CHUNK_SIZE)
  private ChunkSizeEnum chunkSize;

  public static final String SERIALIZED_NAME_ENABLE_HLS = "enable_hls";
  @SerializedName(SERIALIZED_NAME_ENABLE_HLS)
  private Boolean enableHls;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HDS_PLAYBACK_URL = "hds_playback_url";
  @SerializedName(SERIALIZED_NAME_HDS_PLAYBACK_URL)
  private String hdsPlaybackUrl;

  public static final String SERIALIZED_NAME_HLS_PLAYBACK_URL = "hls_playback_url";
  @SerializedName(SERIALIZED_NAME_HLS_PLAYBACK_URL)
  private String hlsPlaybackUrl;

  public static final String SERIALIZED_NAME_INGEST_IP_WHITELIST = "ingest_ip_whitelist";
  @SerializedName(SERIALIZED_NAME_INGEST_IP_WHITELIST)
  private List<String> ingestIpWhitelist = new ArrayList<>();

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. Choose a location as close as possible to your video source.
   */
  @JsonAdapter(LocationEnum.Adapter.class)
  public enum LocationEnum {
    ASIA_PACIFIC_AUSTRALIA("asia_pacific_australia"),
    
    ASIA_PACIFIC_JAPAN("asia_pacific_japan"),
    
    ASIA_PACIFIC_SINGAPORE("asia_pacific_singapore"),
    
    ASIA_PACIFIC_TAIWAN("asia_pacific_taiwan"),
    
    EU_BELGIUM("eu_belgium"),
    
    EU_GERMANY("eu_germany"),
    
    EU_IRELAND("eu_ireland"),
    
    SOUTH_AMERICA_BRAZIL("south_america_brazil"),
    
    US_CENTRAL_IOWA("us_central_iowa"),
    
    US_EAST_S_CAROLINA("us_east_s_carolina"),
    
    US_EAST_VIRGINIA("us_east_virginia"),
    
    US_WEST_CALIFORNIA("us_west_california"),
    
    US_WEST_OREGON("us_west_oregon");

    private String value;

    LocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationEnum fromValue(String value) {
      for (LocationEnum b : LocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationEnum location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRIMARY_URL = "primary_url";
  @SerializedName(SERIALIZED_NAME_PRIMARY_URL)
  private String primaryUrl;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **pull**. The location of the stream target&#39;s origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.
   */
  @JsonAdapter(RegionOverrideEnum.Adapter.class)
  public enum RegionOverrideEnum {
    WESTUS("azure-westus"),
    
    EASTUS2("azure-eastus2"),
    
    NORTHEUROPE("azure-northeurope");

    private String value;

    RegionOverrideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionOverrideEnum fromValue(String value) {
      for (RegionOverrideEnum b : RegionOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionOverrideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION_OVERRIDE = "region_override";
  @SerializedName(SERIALIZED_NAME_REGION_OVERRIDE)
  private RegionOverrideEnum regionOverride;

  public static final String SERIALIZED_NAME_RTMP_PLAYBACK_URL = "rtmp_playback_url";
  @SerializedName(SERIALIZED_NAME_RTMP_PLAYBACK_URL)
  private String rtmpPlaybackUrl;

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.
   */
  @JsonAdapter(SourceDeliveryMethodEnum.Adapter.class)
  public enum SourceDeliveryMethodEnum {
    PUSH("push"),
    
    PULL("pull");

    private String value;

    SourceDeliveryMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceDeliveryMethodEnum fromValue(String value) {
      for (SourceDeliveryMethodEnum b : SourceDeliveryMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceDeliveryMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceDeliveryMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceDeliveryMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceDeliveryMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceDeliveryMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_DELIVERY_METHOD = "source_delivery_method";
  @SerializedName(SERIALIZED_NAME_SOURCE_DELIVERY_METHOD)
  private SourceDeliveryMethodEnum sourceDeliveryMethod;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_STREAM_NAME = "stream_name";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  /**
   * &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; is a Wowza CDN target. &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; is an ultra low latency Wowza stream target. &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; (the default) is an external, third-party destination. &lt;!--and &lt;strong&gt;FacebookStreamTarget&lt;/strong&gt; (a Facebook Live target).--&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    WOWZA_STREAM_TARGET("WowzaStreamTarget"),
    
    ULTRA_LOW_LATENCY_STREAM_TARGET("UltraLowLatencyStreamTarget"),
    
    CUSTOM_STREAM_TARGET("CustomStreamTarget");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USE_CORS = "use_cors";
  @SerializedName(SERIALIZED_NAME_USE_CORS)
  private Boolean useCors;

  public static final String SERIALIZED_NAME_USE_HTTPS = "use_https";
  @SerializedName(SERIALIZED_NAME_USE_HTTPS)
  private Boolean useHttps;

  public static final String SERIALIZED_NAME_USE_SECURE_INGEST = "use_secure_ingest";
  @SerializedName(SERIALIZED_NAME_USE_SECURE_INGEST)
  private Boolean useSecureIngest;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public StreamTarget5() {
  }

  public StreamTarget5 backupUrl(String backupUrl) {
    this.backupUrl = backupUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. The backup RTMP ingest URL of the target, without the preceding protocol and without the trailing slash (/).
   * @return backupUrl
   */
  @javax.annotation.Nullable
  public String getBackupUrl() {
    return backupUrl;
  }

  public void setBackupUrl(String backupUrl) {
    this.backupUrl = backupUrl;
  }


  public StreamTarget5 chunkSize(ChunkSizeEnum chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }

  /**
   * &lt;strong&gt;The &lt;em&gt;chunk_size&lt;/em&gt; parameter is deprecated. To set the chunk size of a stream target, use the POST /stream_targets/[stream_target_id]/properties endpoint.&lt;/strong&gt; Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. The segment duration for HLS encoding. The default is &lt;strong&gt;10&lt;/strong&gt;.
   * @return chunkSize
   */
  @javax.annotation.Nullable
  public ChunkSizeEnum getChunkSize() {
    return chunkSize;
  }

  public void setChunkSize(ChunkSizeEnum chunkSize) {
    this.chunkSize = chunkSize;
  }


  public StreamTarget5 enableHls(Boolean enableHls) {
    this.enableHls = enableHls;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt;, creates an Apple HLS URL for playback on iOS devices (&lt;em&gt;hls_playback_url&lt;/em&gt;). The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return enableHls
   */
  @javax.annotation.Nullable
  public Boolean getEnableHls() {
    return enableHls;
  }

  public void setEnableHls(Boolean enableHls) {
    this.enableHls = enableHls;
  }


  public StreamTarget5 enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt; (the default), the source stream is ready to be ingested. If **false**, the source stream won&#39;t be ingested by the target&#39;s origin server.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public StreamTarget5 hdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. The web address that the target uses to play Adobe HDS streams.
   * @return hdsPlaybackUrl
   */
  @javax.annotation.Nullable
  public String getHdsPlaybackUrl() {
    return hdsPlaybackUrl;
  }

  public void setHdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
  }


  public StreamTarget5 hlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. The web address that the target uses to play Apple HLS streams.
   * @return hlsPlaybackUrl
   */
  @javax.annotation.Nullable
  public String getHlsPlaybackUrl() {
    return hlsPlaybackUrl;
  }

  public void setHlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
  }


  public StreamTarget5 ingestIpWhitelist(List<String> ingestIpWhitelist) {
    this.ingestIpWhitelist = ingestIpWhitelist;
    return this;
  }

  public StreamTarget5 addIngestIpWhitelistItem(String ingestIpWhitelistItem) {
    if (this.ingestIpWhitelist == null) {
      this.ingestIpWhitelist = new ArrayList<>();
    }
    this.ingestIpWhitelist.add(ingestIpWhitelistItem);
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **push**. A list of IP addresses that can be used to connect to the target&#39;s origin server.
   * @return ingestIpWhitelist
   */
  @javax.annotation.Nullable
  public List<String> getIngestIpWhitelist() {
    return ingestIpWhitelist;
  }

  public void setIngestIpWhitelist(List<String> ingestIpWhitelist) {
    this.ingestIpWhitelist = ingestIpWhitelist;
  }


  public StreamTarget5 location(LocationEnum location) {
    this.location = location;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. Choose a location as close as possible to your video source.
   * @return location
   */
  @javax.annotation.Nonnull
  public LocationEnum getLocation() {
    return location;
  }

  public void setLocation(LocationEnum location) {
    this.location = location;
  }


  public StreamTarget5 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A descriptive name for the stream target. Maximum 255 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StreamTarget5 password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; **akamai_cupertino**. A &lt;em&gt;username&lt;/em&gt; must also be present. The password associated with the target username for RTMP authentication.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public StreamTarget5 primaryUrl(String primaryUrl) {
    this.primaryUrl = primaryUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. The primary RTMP ingest URL, without the preceding protocol and without the trailing slash (/).
   * @return primaryUrl
   */
  @javax.annotation.Nonnull
  public String getPrimaryUrl() {
    return primaryUrl;
  }

  public void setPrimaryUrl(String primaryUrl) {
    this.primaryUrl = primaryUrl;
  }


  public StreamTarget5 provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The CDN for the target. &lt;br /&gt;&lt;br /&gt;Required for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. Valid values for &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; are &lt;strong&gt;akamai&lt;/strong&gt;, &lt;strong&gt;akamai_cupertino&lt;/strong&gt;, &lt;strong&gt;akamai_rtmp&lt;/strong&gt;, &lt;strong&gt;limelight&lt;/strong&gt;, &lt;strong&gt;rtmp&lt;/strong&gt;, and &lt;strong&gt;ustream&lt;/strong&gt;. Values can be appended with **_mock** to use in the sandbox environment. &lt;br /&gt;&lt;br /&gt;Valid values for &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; are &lt;strong&gt;akamai&lt;/strong&gt;, &lt;strong&gt;akamai_cupertino&lt;/strong&gt; (default), &lt;strong&gt;akamai_legacy_rtmp&lt;/strong&gt;, and &lt;strong&gt;wowza&lt;/strong&gt;. &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; defaults to and must be &lt;strong&gt;wowza&lt;/strong&gt;.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public StreamTarget5 regionOverride(RegionOverrideEnum regionOverride) {
    this.regionOverride = regionOverride;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **pull**. The location of the stream target&#39;s origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.
   * @return regionOverride
   */
  @javax.annotation.Nullable
  public RegionOverrideEnum getRegionOverride() {
    return regionOverride;
  }

  public void setRegionOverride(RegionOverrideEnum regionOverride) {
    this.regionOverride = regionOverride;
  }


  public StreamTarget5 rtmpPlaybackUrl(String rtmpPlaybackUrl) {
    this.rtmpPlaybackUrl = rtmpPlaybackUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. The web address that the target uses to play RTMP streams.
   * @return rtmpPlaybackUrl
   */
  @javax.annotation.Nullable
  public String getRtmpPlaybackUrl() {
    return rtmpPlaybackUrl;
  }

  public void setRtmpPlaybackUrl(String rtmpPlaybackUrl) {
    this.rtmpPlaybackUrl = rtmpPlaybackUrl;
  }


  public StreamTarget5 sourceDeliveryMethod(SourceDeliveryMethodEnum sourceDeliveryMethod) {
    this.sourceDeliveryMethod = sourceDeliveryMethod;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.
   * @return sourceDeliveryMethod
   */
  @javax.annotation.Nonnull
  public SourceDeliveryMethodEnum getSourceDeliveryMethod() {
    return sourceDeliveryMethod;
  }

  public void setSourceDeliveryMethod(SourceDeliveryMethodEnum sourceDeliveryMethod) {
    this.sourceDeliveryMethod = sourceDeliveryMethod;
  }


  public StreamTarget5 sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **pull**. The URL of a source IP camera or encoder connecting to the stream target.
   * @return sourceUrl
   */
  @javax.annotation.Nonnull
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public StreamTarget5 streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. The name of the stream as defined in the target&#39;s ingestion settings.
   * @return streamName
   */
  @javax.annotation.Nonnull
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public StreamTarget5 type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; is a Wowza CDN target. &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; is an ultra low latency Wowza stream target. &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; (the default) is an external, third-party destination. &lt;!--and &lt;strong&gt;FacebookStreamTarget&lt;/strong&gt; (a Facebook Live target).--&gt;
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public StreamTarget5 useCors(Boolean useCors) {
    this.useCors = useCors;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. CORS, or cross-origin resource sharing, allows streams to be sent to providers such as Peer5, Viblast, and Streamroot, which implement a peer-to-peer grid delivery system.
   * @return useCors
   */
  @javax.annotation.Nullable
  public Boolean getUseCors() {
    return useCors;
  }

  public void setUseCors(Boolean useCors) {
    this.useCors = useCors;
  }


  public StreamTarget5 useHttps(Boolean useHttps) {
    this.useHttps = useHttps;
    return this;
  }

  /**
   * &lt;strong&gt;The &lt;em&gt;use_https&lt;/em&gt; parameter is deprecated. Use the POST /stream_targets/[&lt;em&gt;stream_target_id&lt;/em&gt;]/properties endpoint and the &lt;em&gt;relative_playlists&lt;/em&gt; parameter instead.&lt;/strong&gt;
   * @return useHttps
   */
  @javax.annotation.Nullable
  public Boolean getUseHttps() {
    return useHttps;
  }

  public void setUseHttps(Boolean useHttps) {
    this.useHttps = useHttps;
  }


  public StreamTarget5 useSecureIngest(Boolean useSecureIngest) {
    this.useSecureIngest = useSecureIngest;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt;, generates a &lt;em&gt;secure_ingest_query_param&lt;/em&gt; to securely deliver the stream from the transcoder to the provider.
   * @return useSecureIngest
   */
  @javax.annotation.Nullable
  public Boolean getUseSecureIngest() {
    return useSecureIngest;
  }

  public void setUseSecureIngest(Boolean useSecureIngest) {
    this.useSecureIngest = useSecureIngest;
  }


  public StreamTarget5 username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; and &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; **akamai_cupertino**. The username or ID that the target uses for RTMP authentication.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTarget5 streamTarget5 = (StreamTarget5) o;
    return Objects.equals(this.backupUrl, streamTarget5.backupUrl) &&
        Objects.equals(this.chunkSize, streamTarget5.chunkSize) &&
        Objects.equals(this.enableHls, streamTarget5.enableHls) &&
        Objects.equals(this.enabled, streamTarget5.enabled) &&
        Objects.equals(this.hdsPlaybackUrl, streamTarget5.hdsPlaybackUrl) &&
        Objects.equals(this.hlsPlaybackUrl, streamTarget5.hlsPlaybackUrl) &&
        Objects.equals(this.ingestIpWhitelist, streamTarget5.ingestIpWhitelist) &&
        Objects.equals(this.location, streamTarget5.location) &&
        Objects.equals(this.name, streamTarget5.name) &&
        Objects.equals(this.password, streamTarget5.password) &&
        Objects.equals(this.primaryUrl, streamTarget5.primaryUrl) &&
        Objects.equals(this.provider, streamTarget5.provider) &&
        Objects.equals(this.regionOverride, streamTarget5.regionOverride) &&
        Objects.equals(this.rtmpPlaybackUrl, streamTarget5.rtmpPlaybackUrl) &&
        Objects.equals(this.sourceDeliveryMethod, streamTarget5.sourceDeliveryMethod) &&
        Objects.equals(this.sourceUrl, streamTarget5.sourceUrl) &&
        Objects.equals(this.streamName, streamTarget5.streamName) &&
        Objects.equals(this.type, streamTarget5.type) &&
        Objects.equals(this.useCors, streamTarget5.useCors) &&
        Objects.equals(this.useHttps, streamTarget5.useHttps) &&
        Objects.equals(this.useSecureIngest, streamTarget5.useSecureIngest) &&
        Objects.equals(this.username, streamTarget5.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupUrl, chunkSize, enableHls, enabled, hdsPlaybackUrl, hlsPlaybackUrl, ingestIpWhitelist, location, name, password, primaryUrl, provider, regionOverride, rtmpPlaybackUrl, sourceDeliveryMethod, sourceUrl, streamName, type, useCors, useHttps, useSecureIngest, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTarget5 {\n");
    sb.append("    backupUrl: ").append(toIndentedString(backupUrl)).append("\n");
    sb.append("    chunkSize: ").append(toIndentedString(chunkSize)).append("\n");
    sb.append("    enableHls: ").append(toIndentedString(enableHls)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    hdsPlaybackUrl: ").append(toIndentedString(hdsPlaybackUrl)).append("\n");
    sb.append("    hlsPlaybackUrl: ").append(toIndentedString(hlsPlaybackUrl)).append("\n");
    sb.append("    ingestIpWhitelist: ").append(toIndentedString(ingestIpWhitelist)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    primaryUrl: ").append(toIndentedString(primaryUrl)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    regionOverride: ").append(toIndentedString(regionOverride)).append("\n");
    sb.append("    rtmpPlaybackUrl: ").append(toIndentedString(rtmpPlaybackUrl)).append("\n");
    sb.append("    sourceDeliveryMethod: ").append(toIndentedString(sourceDeliveryMethod)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useCors: ").append(toIndentedString(useCors)).append("\n");
    sb.append("    useHttps: ").append(toIndentedString(useHttps)).append("\n");
    sb.append("    useSecureIngest: ").append(toIndentedString(useSecureIngest)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backup_url");
    openapiFields.add("chunk_size");
    openapiFields.add("enable_hls");
    openapiFields.add("enabled");
    openapiFields.add("hds_playback_url");
    openapiFields.add("hls_playback_url");
    openapiFields.add("ingest_ip_whitelist");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("primary_url");
    openapiFields.add("provider");
    openapiFields.add("region_override");
    openapiFields.add("rtmp_playback_url");
    openapiFields.add("source_delivery_method");
    openapiFields.add("source_url");
    openapiFields.add("stream_name");
    openapiFields.add("type");
    openapiFields.add("use_cors");
    openapiFields.add("use_https");
    openapiFields.add("use_secure_ingest");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("primary_url");
    openapiRequiredFields.add("source_delivery_method");
    openapiRequiredFields.add("source_url");
    openapiRequiredFields.add("stream_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamTarget5
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamTarget5.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamTarget5 is not found in the empty JSON string", StreamTarget5.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamTarget5.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamTarget5` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamTarget5.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backup_url") != null && !jsonObj.get("backup_url").isJsonNull()) && !jsonObj.get("backup_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup_url").toString()));
      }
      if ((jsonObj.get("chunk_size") != null && !jsonObj.get("chunk_size").isJsonNull()) && !jsonObj.get("chunk_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chunk_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chunk_size").toString()));
      }
      // validate the optional field `chunk_size`
      if (jsonObj.get("chunk_size") != null && !jsonObj.get("chunk_size").isJsonNull()) {
        ChunkSizeEnum.validateJsonElement(jsonObj.get("chunk_size"));
      }
      if ((jsonObj.get("hds_playback_url") != null && !jsonObj.get("hds_playback_url").isJsonNull()) && !jsonObj.get("hds_playback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hds_playback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hds_playback_url").toString()));
      }
      if ((jsonObj.get("hls_playback_url") != null && !jsonObj.get("hls_playback_url").isJsonNull()) && !jsonObj.get("hls_playback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hls_playback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hls_playback_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ingest_ip_whitelist") != null && !jsonObj.get("ingest_ip_whitelist").isJsonNull() && !jsonObj.get("ingest_ip_whitelist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingest_ip_whitelist` to be an array in the JSON string but got `%s`", jsonObj.get("ingest_ip_whitelist").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // validate the required field `location`
      LocationEnum.validateJsonElement(jsonObj.get("location"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("primary_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_url").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("region_override") != null && !jsonObj.get("region_override").isJsonNull()) && !jsonObj.get("region_override").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_override` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_override").toString()));
      }
      // validate the optional field `region_override`
      if (jsonObj.get("region_override") != null && !jsonObj.get("region_override").isJsonNull()) {
        RegionOverrideEnum.validateJsonElement(jsonObj.get("region_override"));
      }
      if ((jsonObj.get("rtmp_playback_url") != null && !jsonObj.get("rtmp_playback_url").isJsonNull()) && !jsonObj.get("rtmp_playback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmp_playback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmp_playback_url").toString()));
      }
      if (!jsonObj.get("source_delivery_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_delivery_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_delivery_method").toString()));
      }
      // validate the required field `source_delivery_method`
      SourceDeliveryMethodEnum.validateJsonElement(jsonObj.get("source_delivery_method"));
      if (!jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if (!jsonObj.get("stream_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamTarget5.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamTarget5' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamTarget5> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamTarget5.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamTarget5>() {
           @Override
           public void write(JsonWriter out, StreamTarget5 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamTarget5 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamTarget5 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamTarget5
   * @throws IOException if the JSON string is invalid with respect to StreamTarget5
   */
  public static StreamTarget5 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamTarget5.class);
  }

  /**
   * Convert an instance of StreamTarget5 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

