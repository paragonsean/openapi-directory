/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomStreamTarget1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomStreamTarget1 {
  public static final String SERIALIZED_NAME_ENABLE_HLS = "enable_hls";
  @SerializedName(SERIALIZED_NAME_ENABLE_HLS)
  private Boolean enableHls;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INGEST_IP_WHITELIST = "ingest_ip_whitelist";
  @SerializedName(SERIALIZED_NAME_INGEST_IP_WHITELIST)
  private List<String> ingestIpWhitelist = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_REGION_OVERRIDE = "region_override";
  @SerializedName(SERIALIZED_NAME_REGION_OVERRIDE)
  private String regionOverride;

  public static final String SERIALIZED_NAME_SOURCE_DELIVERY_METHOD = "source_delivery_method";
  @SerializedName(SERIALIZED_NAME_SOURCE_DELIVERY_METHOD)
  private String sourceDeliveryMethod;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public CustomStreamTarget1() {
  }

  public CustomStreamTarget1 enableHls(Boolean enableHls) {
    this.enableHls = enableHls;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt;, creates an Apple HLS URL for playback on iOS devices (&lt;em&gt;hls_playback_url&lt;/em&gt;). The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return enableHls
   */
  @javax.annotation.Nullable
  public Boolean getEnableHls() {
    return enableHls;
  }

  public void setEnableHls(Boolean enableHls) {
    this.enableHls = enableHls;
  }


  public CustomStreamTarget1 enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt; (the default), the source stream is ready to be ingested. If **false**, the source stream won&#39;t be ingested by the target&#39;s origin server.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CustomStreamTarget1 ingestIpWhitelist(List<String> ingestIpWhitelist) {
    this.ingestIpWhitelist = ingestIpWhitelist;
    return this;
  }

  public CustomStreamTarget1 addIngestIpWhitelistItem(String ingestIpWhitelistItem) {
    if (this.ingestIpWhitelist == null) {
      this.ingestIpWhitelist = new ArrayList<>();
    }
    this.ingestIpWhitelist.add(ingestIpWhitelistItem);
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **push**. A list of IP addresses that can be used to connect to the target&#39;s origin server.
   * @return ingestIpWhitelist
   */
  @javax.annotation.Nullable
  public List<String> getIngestIpWhitelist() {
    return ingestIpWhitelist;
  }

  public void setIngestIpWhitelist(List<String> ingestIpWhitelist) {
    this.ingestIpWhitelist = ingestIpWhitelist;
  }


  public CustomStreamTarget1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A descriptive name for the stream target. Maximum 255 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomStreamTarget1 provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The CDN for the target. &lt;br /&gt;&lt;br /&gt;Required for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;CustomStreamTarget&lt;/strong&gt;. Valid values for &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; are &lt;strong&gt;akamai&lt;/strong&gt;, &lt;strong&gt;akamai_cupertino&lt;/strong&gt;, &lt;strong&gt;akamai_rtmp&lt;/strong&gt;, &lt;strong&gt;limelight&lt;/strong&gt;, &lt;strong&gt;rtmp&lt;/strong&gt;, and &lt;strong&gt;ustream&lt;/strong&gt;. Values can be appended with **_mock** to use in the sandbox environment. &lt;br /&gt;&lt;br /&gt;Valid values for &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; are &lt;strong&gt;akamai&lt;/strong&gt;, &lt;strong&gt;akamai_cupertino&lt;/strong&gt; (default), &lt;strong&gt;akamai_legacy_rtmp&lt;/strong&gt;, and &lt;strong&gt;wowza&lt;/strong&gt;. &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; defaults to and must be &lt;strong&gt;wowza&lt;/strong&gt;.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public CustomStreamTarget1 regionOverride(String regionOverride) {
    this.regionOverride = regionOverride;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **pull**. The location of the stream target&#39;s origin server. If unspecified, Wowza Streaming Cloud determines the optimal region for the origin server.
   * @return regionOverride
   */
  @javax.annotation.Nullable
  public String getRegionOverride() {
    return regionOverride;
  }

  public void setRegionOverride(String regionOverride) {
    this.regionOverride = regionOverride;
  }


  public CustomStreamTarget1 sourceDeliveryMethod(String sourceDeliveryMethod) {
    this.sourceDeliveryMethod = sourceDeliveryMethod;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The type of connection between the stream source and the stream target. **push** instructs the source to push the stream to the stream target. **pull** instructs the stream target to pull the stream from the source.
   * @return sourceDeliveryMethod
   */
  @javax.annotation.Nonnull
  public String getSourceDeliveryMethod() {
    return sourceDeliveryMethod;
  }

  public void setSourceDeliveryMethod(String sourceDeliveryMethod) {
    this.sourceDeliveryMethod = sourceDeliveryMethod;
  }


  public CustomStreamTarget1 sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Only for targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; and &lt;em&gt;source_delivery_method&lt;/em&gt; is **pull**. The URL of a source IP camera or encoder connecting to the stream target.
   * @return sourceUrl
   */
  @javax.annotation.Nonnull
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public CustomStreamTarget1 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; is a Wowza CDN target. &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; is an ultra low latency Wowza stream target. &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; (the default) is an external, third-party destination. &lt;!--and &lt;strong&gt;FacebookStreamTarget&lt;/strong&gt; (a Facebook Live target).--&gt;
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomStreamTarget1 customStreamTarget1 = (CustomStreamTarget1) o;
    return Objects.equals(this.enableHls, customStreamTarget1.enableHls) &&
        Objects.equals(this.enabled, customStreamTarget1.enabled) &&
        Objects.equals(this.ingestIpWhitelist, customStreamTarget1.ingestIpWhitelist) &&
        Objects.equals(this.name, customStreamTarget1.name) &&
        Objects.equals(this.provider, customStreamTarget1.provider) &&
        Objects.equals(this.regionOverride, customStreamTarget1.regionOverride) &&
        Objects.equals(this.sourceDeliveryMethod, customStreamTarget1.sourceDeliveryMethod) &&
        Objects.equals(this.sourceUrl, customStreamTarget1.sourceUrl) &&
        Objects.equals(this.type, customStreamTarget1.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableHls, enabled, ingestIpWhitelist, name, provider, regionOverride, sourceDeliveryMethod, sourceUrl, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomStreamTarget1 {\n");
    sb.append("    enableHls: ").append(toIndentedString(enableHls)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ingestIpWhitelist: ").append(toIndentedString(ingestIpWhitelist)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    regionOverride: ").append(toIndentedString(regionOverride)).append("\n");
    sb.append("    sourceDeliveryMethod: ").append(toIndentedString(sourceDeliveryMethod)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enable_hls");
    openapiFields.add("enabled");
    openapiFields.add("ingest_ip_whitelist");
    openapiFields.add("name");
    openapiFields.add("provider");
    openapiFields.add("region_override");
    openapiFields.add("source_delivery_method");
    openapiFields.add("source_url");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("source_delivery_method");
    openapiRequiredFields.add("source_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomStreamTarget1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomStreamTarget1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomStreamTarget1 is not found in the empty JSON string", CustomStreamTarget1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomStreamTarget1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomStreamTarget1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomStreamTarget1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ingest_ip_whitelist") != null && !jsonObj.get("ingest_ip_whitelist").isJsonNull() && !jsonObj.get("ingest_ip_whitelist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingest_ip_whitelist` to be an array in the JSON string but got `%s`", jsonObj.get("ingest_ip_whitelist").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("region_override") != null && !jsonObj.get("region_override").isJsonNull()) && !jsonObj.get("region_override").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_override` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_override").toString()));
      }
      if (!jsonObj.get("source_delivery_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_delivery_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_delivery_method").toString()));
      }
      if (!jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomStreamTarget1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomStreamTarget1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomStreamTarget1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomStreamTarget1.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomStreamTarget1>() {
           @Override
           public void write(JsonWriter out, CustomStreamTarget1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomStreamTarget1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomStreamTarget1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomStreamTarget1
   * @throws IOException if the JSON string is invalid with respect to CustomStreamTarget1
   */
  public static CustomStreamTarget1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomStreamTarget1.class);
  }

  /**
   * Convert an instance of CustomStreamTarget1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

