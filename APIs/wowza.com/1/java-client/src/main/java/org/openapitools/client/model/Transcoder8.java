/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transcoder8
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transcoder8 {
  /**
   * The billing mode for the transcoder. The default is &lt;strong&gt;pay_as_you_go&lt;/strong&gt;.
   */
  @JsonAdapter(BillingModeEnum.Adapter.class)
  public enum BillingModeEnum {
    PAY_AS_YOU_GO("pay_as_you_go"),
    
    TWENTYFOUR_SEVEN("twentyfour_seven");

    private String value;

    BillingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingModeEnum fromValue(String value) {
      for (BillingModeEnum b : BillingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BillingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BILLING_MODE = "billing_mode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  private BillingModeEnum billingMode;

  /**
   * The location where Wowza Streaming Cloud transcodes your stream. Choose a location as close as possible to your video source.
   */
  @JsonAdapter(BroadcastLocationEnum.Adapter.class)
  public enum BroadcastLocationEnum {
    ASIA_PACIFIC_AUSTRALIA("asia_pacific_australia"),
    
    ASIA_PACIFIC_JAPAN("asia_pacific_japan"),
    
    ASIA_PACIFIC_SINGAPORE("asia_pacific_singapore"),
    
    ASIA_PACIFIC_TAIWAN("asia_pacific_taiwan"),
    
    EU_BELGIUM("eu_belgium"),
    
    EU_GERMANY("eu_germany"),
    
    EU_IRELAND("eu_ireland"),
    
    SOUTH_AMERICA_BRAZIL("south_america_brazil"),
    
    US_CENTRAL_IOWA("us_central_iowa"),
    
    US_EAST_S_CAROLINA("us_east_s_carolina"),
    
    US_EAST_VIRGINIA("us_east_virginia"),
    
    US_WEST_CALIFORNIA("us_west_california"),
    
    US_WEST_OREGON("us_west_oregon");

    private String value;

    BroadcastLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BroadcastLocationEnum fromValue(String value) {
      for (BroadcastLocationEnum b : BroadcastLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BroadcastLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BroadcastLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BroadcastLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BroadcastLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BroadcastLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BROADCAST_LOCATION = "broadcast_location";
  @SerializedName(SERIALIZED_NAME_BROADCAST_LOCATION)
  private BroadcastLocationEnum broadcastLocation;

  /**
   * The size, in milliseconds, of the incoming buffer. &lt;strong&gt;0&lt;/strong&gt; means no buffer. The default is &lt;strong&gt;4000&lt;/strong&gt; (4 seconds).
   */
  @JsonAdapter(BufferSizeEnum.Adapter.class)
  public enum BufferSizeEnum {
    NUMBER_0(0),
    
    NUMBER_1000(1000),
    
    NUMBER_2000(2000),
    
    NUMBER_3000(3000),
    
    NUMBER_4000(4000),
    
    NUMBER_5000(5000),
    
    NUMBER_6000(6000),
    
    NUMBER_7000(7000),
    
    NUMBER_8000(8000);

    private Integer value;

    BufferSizeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BufferSizeEnum fromValue(Integer value) {
      for (BufferSizeEnum b : BufferSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BufferSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BufferSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BufferSizeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return BufferSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      BufferSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUFFER_SIZE = "buffer_size";
  @SerializedName(SERIALIZED_NAME_BUFFER_SIZE)
  private BufferSizeEnum bufferSize;

  /**
   * The type of closed caption data being passed from the source. The default, &lt;strong&gt;none&lt;/strong&gt;, indicates that no data is being provided. &lt;strong&gt;cea&lt;/strong&gt; indicates that a CEA closed captioning data stream is being provided. &lt;strong&gt;on_text&lt;/strong&gt; indicates that an onTextData closed captioning data stream is being provided. &lt;strong&gt;both&lt;/strong&gt; indicates that both CEA and onTextData closed captioing data streams are being provided.
   */
  @JsonAdapter(ClosedCaptionTypeEnum.Adapter.class)
  public enum ClosedCaptionTypeEnum {
    NONE("none"),
    
    CEA("cea"),
    
    ON_TEXT("on_text"),
    
    BOTH("both");

    private String value;

    ClosedCaptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedCaptionTypeEnum fromValue(String value) {
      for (ClosedCaptionTypeEnum b : ClosedCaptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClosedCaptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedCaptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedCaptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClosedCaptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClosedCaptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSED_CAPTION_TYPE = "closed_caption_type";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTION_TYPE)
  private ClosedCaptionTypeEnum closedCaptionType;

  /**
   * The type of connection between the source encoder and the transcoder. The default, &lt;strong&gt;pull&lt;/strong&gt;, instructs the transcoder to pull the video from the source. &lt;strong&gt;push&lt;/strong&gt; instructs the source to push the stream to the transcoder. &lt;strong&gt;cdn&lt;/strong&gt; uses a stream source to deliver the stream to the transcoder.
   */
  @JsonAdapter(DeliveryMethodEnum.Adapter.class)
  public enum DeliveryMethodEnum {
    PULL("pull"),
    
    CDN("cdn"),
    
    PUSH("push");

    private String value;

    DeliveryMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryMethodEnum fromValue(String value) {
      for (DeliveryMethodEnum b : DeliveryMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "delivery_method";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private DeliveryMethodEnum deliveryMethod;

  public static final String SERIALIZED_NAME_DELIVERY_PROTOCOLS = "delivery_protocols";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PROTOCOLS)
  private List<String> deliveryProtocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLE_AUTHENTICATION = "disable_authentication";
  @SerializedName(SERIALIZED_NAME_DISABLE_AUTHENTICATION)
  private Boolean disableAuthentication;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT = "idle_timeout";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT)
  private Integer idleTimeout;

  public static final String SERIALIZED_NAME_LOW_LATENCY = "low_latency";
  @SerializedName(SERIALIZED_NAME_LOW_LATENCY)
  private Boolean lowLatency;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  /**
   * The number of users who are allowed to connect directly to the transcoder.
   */
  @JsonAdapter(PlayMaximumConnectionsEnum.Adapter.class)
  public enum PlayMaximumConnectionsEnum {
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_33(33),
    
    NUMBER_34(34),
    
    NUMBER_35(35),
    
    NUMBER_36(36),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91),
    
    NUMBER_92(92),
    
    NUMBER_93(93),
    
    NUMBER_94(94),
    
    NUMBER_95(95),
    
    NUMBER_96(96),
    
    NUMBER_97(97),
    
    NUMBER_98(98),
    
    NUMBER_99(99),
    
    NUMBER_100(100);

    private Integer value;

    PlayMaximumConnectionsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayMaximumConnectionsEnum fromValue(Integer value) {
      for (PlayMaximumConnectionsEnum b : PlayMaximumConnectionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlayMaximumConnectionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayMaximumConnectionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayMaximumConnectionsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PlayMaximumConnectionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PlayMaximumConnectionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAY_MAXIMUM_CONNECTIONS = "play_maximum_connections";
  @SerializedName(SERIALIZED_NAME_PLAY_MAXIMUM_CONNECTIONS)
  private PlayMaximumConnectionsEnum playMaximumConnections;

  /**
   * The transport protocol for the source video. The default is &lt;strong&gt;rtmp&lt;/strong&gt;.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    RTMP("rtmp"),
    
    RTSP("rtsp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private Boolean recording;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_STREAM_EXTENSION = "stream_extension";
  @SerializedName(SERIALIZED_NAME_STREAM_EXTENSION)
  private String streamExtension;

  public static final String SERIALIZED_NAME_STREAM_SMOOTHER = "stream_smoother";
  @SerializedName(SERIALIZED_NAME_STREAM_SMOOTHER)
  private Boolean streamSmoother;

  public static final String SERIALIZED_NAME_STREAM_SOURCE_ID = "stream_source_id";
  @SerializedName(SERIALIZED_NAME_STREAM_SOURCE_ID)
  private String streamSourceId;

  public static final String SERIALIZED_NAME_SUPPRESS_STREAM_TARGET_START = "suppress_stream_target_start";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_STREAM_TARGET_START)
  private Boolean suppressStreamTargetStart;

  /**
   * The type of transcoder, either &lt;strong&gt;transcoded&lt;/strong&gt; for streams that are transcoded into adaptive bitrate renditions or &lt;strong&gt;passthrough&lt;/strong&gt; for streams that aren&#39;t processed by the transcoder. The default is &lt;strong&gt;transcoded&lt;/strong&gt;.
   */
  @JsonAdapter(TranscoderTypeEnum.Adapter.class)
  public enum TranscoderTypeEnum {
    TRANSCODED("transcoded"),
    
    PASSTHROUGH("passthrough");

    private String value;

    TranscoderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TranscoderTypeEnum fromValue(String value) {
      for (TranscoderTypeEnum b : TranscoderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TranscoderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TranscoderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TranscoderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TranscoderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TranscoderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSCODER_TYPE = "transcoder_type";
  @SerializedName(SERIALIZED_NAME_TRANSCODER_TYPE)
  private TranscoderTypeEnum transcoderType;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VIDEO_FALLBACK = "video_fallback";
  @SerializedName(SERIALIZED_NAME_VIDEO_FALLBACK)
  private Boolean videoFallback;

  public static final String SERIALIZED_NAME_WATERMARK = "watermark";
  @SerializedName(SERIALIZED_NAME_WATERMARK)
  private Boolean watermark;

  public static final String SERIALIZED_NAME_WATERMARK_HEIGHT = "watermark_height";
  @SerializedName(SERIALIZED_NAME_WATERMARK_HEIGHT)
  private Integer watermarkHeight;

  public static final String SERIALIZED_NAME_WATERMARK_IMAGE = "watermark_image";
  @SerializedName(SERIALIZED_NAME_WATERMARK_IMAGE)
  private String watermarkImage;

  /**
   * The opacity, or percentage of transparency, of the watermark. &lt;strong&gt;0&lt;/strong&gt; is fully transparent; &lt;strong&gt;100&lt;/strong&gt; is fully opaque.
   */
  @JsonAdapter(WatermarkOpacityEnum.Adapter.class)
  public enum WatermarkOpacityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_33(33),
    
    NUMBER_34(34),
    
    NUMBER_35(35),
    
    NUMBER_36(36),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91),
    
    NUMBER_92(92),
    
    NUMBER_93(93),
    
    NUMBER_94(94),
    
    NUMBER_95(95),
    
    NUMBER_96(96),
    
    NUMBER_97(97),
    
    NUMBER_98(98),
    
    NUMBER_99(99),
    
    NUMBER_100(100);

    private Integer value;

    WatermarkOpacityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WatermarkOpacityEnum fromValue(Integer value) {
      for (WatermarkOpacityEnum b : WatermarkOpacityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WatermarkOpacityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WatermarkOpacityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WatermarkOpacityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return WatermarkOpacityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      WatermarkOpacityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATERMARK_OPACITY = "watermark_opacity";
  @SerializedName(SERIALIZED_NAME_WATERMARK_OPACITY)
  private WatermarkOpacityEnum watermarkOpacity;

  /**
   * The corner of the video frame in which you want the watermark to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   */
  @JsonAdapter(WatermarkPositionEnum.Adapter.class)
  public enum WatermarkPositionEnum {
    TOP_LEFT("top-left"),
    
    TOP_RIGHT("top-right"),
    
    BOTTOM_LEFT("bottom-left"),
    
    BOTTOM_RIGHT("bottom-right");

    private String value;

    WatermarkPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WatermarkPositionEnum fromValue(String value) {
      for (WatermarkPositionEnum b : WatermarkPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WatermarkPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WatermarkPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WatermarkPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WatermarkPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WatermarkPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATERMARK_POSITION = "watermark_position";
  @SerializedName(SERIALIZED_NAME_WATERMARK_POSITION)
  private WatermarkPositionEnum watermarkPosition;

  public static final String SERIALIZED_NAME_WATERMARK_WIDTH = "watermark_width";
  @SerializedName(SERIALIZED_NAME_WATERMARK_WIDTH)
  private Integer watermarkWidth;

  public Transcoder8() {
  }

  public Transcoder8 billingMode(BillingModeEnum billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   * The billing mode for the transcoder. The default is &lt;strong&gt;pay_as_you_go&lt;/strong&gt;.
   * @return billingMode
   */
  @javax.annotation.Nonnull
  public BillingModeEnum getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(BillingModeEnum billingMode) {
    this.billingMode = billingMode;
  }


  public Transcoder8 broadcastLocation(BroadcastLocationEnum broadcastLocation) {
    this.broadcastLocation = broadcastLocation;
    return this;
  }

  /**
   * The location where Wowza Streaming Cloud transcodes your stream. Choose a location as close as possible to your video source.
   * @return broadcastLocation
   */
  @javax.annotation.Nonnull
  public BroadcastLocationEnum getBroadcastLocation() {
    return broadcastLocation;
  }

  public void setBroadcastLocation(BroadcastLocationEnum broadcastLocation) {
    this.broadcastLocation = broadcastLocation;
  }


  public Transcoder8 bufferSize(BufferSizeEnum bufferSize) {
    this.bufferSize = bufferSize;
    return this;
  }

  /**
   * The size, in milliseconds, of the incoming buffer. &lt;strong&gt;0&lt;/strong&gt; means no buffer. The default is &lt;strong&gt;4000&lt;/strong&gt; (4 seconds).
   * @return bufferSize
   */
  @javax.annotation.Nullable
  public BufferSizeEnum getBufferSize() {
    return bufferSize;
  }

  public void setBufferSize(BufferSizeEnum bufferSize) {
    this.bufferSize = bufferSize;
  }


  public Transcoder8 closedCaptionType(ClosedCaptionTypeEnum closedCaptionType) {
    this.closedCaptionType = closedCaptionType;
    return this;
  }

  /**
   * The type of closed caption data being passed from the source. The default, &lt;strong&gt;none&lt;/strong&gt;, indicates that no data is being provided. &lt;strong&gt;cea&lt;/strong&gt; indicates that a CEA closed captioning data stream is being provided. &lt;strong&gt;on_text&lt;/strong&gt; indicates that an onTextData closed captioning data stream is being provided. &lt;strong&gt;both&lt;/strong&gt; indicates that both CEA and onTextData closed captioing data streams are being provided.
   * @return closedCaptionType
   */
  @javax.annotation.Nullable
  public ClosedCaptionTypeEnum getClosedCaptionType() {
    return closedCaptionType;
  }

  public void setClosedCaptionType(ClosedCaptionTypeEnum closedCaptionType) {
    this.closedCaptionType = closedCaptionType;
  }


  public Transcoder8 deliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * The type of connection between the source encoder and the transcoder. The default, &lt;strong&gt;pull&lt;/strong&gt;, instructs the transcoder to pull the video from the source. &lt;strong&gt;push&lt;/strong&gt; instructs the source to push the stream to the transcoder. &lt;strong&gt;cdn&lt;/strong&gt; uses a stream source to deliver the stream to the transcoder.
   * @return deliveryMethod
   */
  @javax.annotation.Nonnull
  public DeliveryMethodEnum getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public Transcoder8 deliveryProtocols(List<String> deliveryProtocols) {
    this.deliveryProtocols = deliveryProtocols;
    return this;
  }

  public Transcoder8 addDeliveryProtocolsItem(String deliveryProtocolsItem) {
    if (this.deliveryProtocols == null) {
      this.deliveryProtocols = new ArrayList<>();
    }
    this.deliveryProtocols.add(deliveryProtocolsItem);
    return this;
  }

  /**
   * An array of playback protocols enabled for this transcoder. By default, &lt;strong&gt;rtmp&lt;/strong&gt;, &lt;strong&gt;rtsp&lt;/strong&gt;, and &lt;strong&gt;wowz&lt;/strong&gt; are returned.
   * @return deliveryProtocols
   */
  @javax.annotation.Nullable
  public List<String> getDeliveryProtocols() {
    return deliveryProtocols;
  }

  public void setDeliveryProtocols(List<String> deliveryProtocols) {
    this.deliveryProtocols = deliveryProtocols;
  }


  public Transcoder8 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the transcoder.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Transcoder8 disableAuthentication(Boolean disableAuthentication) {
    this.disableAuthentication = disableAuthentication;
    return this;
  }

  /**
   * Authentication is required by default for RTMP and RTSP push connections from a video source to the transcoder. Specify &lt;strong&gt;true&lt;/strong&gt; to disable authentication with the video source.
   * @return disableAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getDisableAuthentication() {
    return disableAuthentication;
  }

  public void setDisableAuthentication(Boolean disableAuthentication) {
    this.disableAuthentication = disableAuthentication;
  }


  public Transcoder8 idleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

  /**
   * The amount of idle time, in seconds, before the transcoder automatically shuts down. Valid values are the integers &lt;strong&gt;0&lt;/strong&gt; (never shuts down) to &lt;strong&gt;172800&lt;/strong&gt; (48 hours). The default is &lt;strong&gt;1200&lt;/strong&gt; (20 minutes).
   * @return idleTimeout
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
  }


  public Transcoder8 lowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, turns off the sort packet buffer and speeds the time it takes to decode and deliver video data to the player. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return lowLatency
   */
  @javax.annotation.Nullable
  public Boolean getLowLatency() {
    return lowLatency;
  }

  public void setLowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
  }


  public Transcoder8 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A descriptive name for the transcoder. Maximum 200 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Transcoder8 password(String password) {
    this.password = password;
    return this;
  }

  /**
   * A password for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public Transcoder8 playMaximumConnections(PlayMaximumConnectionsEnum playMaximumConnections) {
    this.playMaximumConnections = playMaximumConnections;
    return this;
  }

  /**
   * The number of users who are allowed to connect directly to the transcoder.
   * @return playMaximumConnections
   */
  @javax.annotation.Nullable
  public PlayMaximumConnectionsEnum getPlayMaximumConnections() {
    return playMaximumConnections;
  }

  public void setPlayMaximumConnections(PlayMaximumConnectionsEnum playMaximumConnections) {
    this.playMaximumConnections = playMaximumConnections;
  }


  public Transcoder8 protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The transport protocol for the source video. The default is &lt;strong&gt;rtmp&lt;/strong&gt;.
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public Transcoder8 recording(Boolean recording) {
    this.recording = recording;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, creates a recording of the transcoded output. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return recording
   */
  @javax.annotation.Nullable
  public Boolean getRecording() {
    return recording;
  }

  public void setRecording(Boolean recording) {
    this.recording = recording;
  }


  public Transcoder8 sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * For the &lt;em&gt;delivery_method&lt;/em&gt; &lt;strong&gt;pull&lt;/strong&gt;. Enter the source&#39;s web address without the preceding protocol or the trailing slash (/).
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public Transcoder8 streamExtension(String streamExtension) {
    this.streamExtension = streamExtension;
    return this;
  }

  /**
   * For the &lt;em&gt;delivery_method&lt;/em&gt; &lt;strong&gt;push&lt;/strong&gt;. Some encoders append an extension to their stream names. If the device you&#39;re using does this, enter the extension.
   * @return streamExtension
   */
  @javax.annotation.Nullable
  public String getStreamExtension() {
    return streamExtension;
  }

  public void setStreamExtension(String streamExtension) {
    this.streamExtension = streamExtension;
  }


  public Transcoder8 streamSmoother(Boolean streamSmoother) {
    this.streamSmoother = streamSmoother;
    return this;
  }

  /**
   * A dynamic buffer that helps stabilize streams in rough network conditions, but adds latency. Specify &lt;strong&gt;true&lt;/strong&gt; to enable stream smoothing. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return streamSmoother
   */
  @javax.annotation.Nullable
  public Boolean getStreamSmoother() {
    return streamSmoother;
  }

  public void setStreamSmoother(Boolean streamSmoother) {
    this.streamSmoother = streamSmoother;
  }


  public Transcoder8 streamSourceId(String streamSourceId) {
    this.streamSourceId = streamSourceId;
    return this;
  }

  /**
   * For the &lt;em&gt;delivery_method&lt;/em&gt; &lt;strong&gt;cdn&lt;/strong&gt;. The alphanumeric string that identifies the stream source that you want to use to deliver the stream to the transcoder.
   * @return streamSourceId
   */
  @javax.annotation.Nullable
  public String getStreamSourceId() {
    return streamSourceId;
  }

  public void setStreamSourceId(String streamSourceId) {
    this.streamSourceId = streamSourceId;
  }


  public Transcoder8 suppressStreamTargetStart(Boolean suppressStreamTargetStart) {
    this.suppressStreamTargetStart = suppressStreamTargetStart;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, disables stream targets when the transcoder starts. If &lt;strong&gt;false&lt;/strong&gt; (the default), the targets start when the transcoder starts.
   * @return suppressStreamTargetStart
   */
  @javax.annotation.Nullable
  public Boolean getSuppressStreamTargetStart() {
    return suppressStreamTargetStart;
  }

  public void setSuppressStreamTargetStart(Boolean suppressStreamTargetStart) {
    this.suppressStreamTargetStart = suppressStreamTargetStart;
  }


  public Transcoder8 transcoderType(TranscoderTypeEnum transcoderType) {
    this.transcoderType = transcoderType;
    return this;
  }

  /**
   * The type of transcoder, either &lt;strong&gt;transcoded&lt;/strong&gt; for streams that are transcoded into adaptive bitrate renditions or &lt;strong&gt;passthrough&lt;/strong&gt; for streams that aren&#39;t processed by the transcoder. The default is &lt;strong&gt;transcoded&lt;/strong&gt;.
   * @return transcoderType
   */
  @javax.annotation.Nonnull
  public TranscoderTypeEnum getTranscoderType() {
    return transcoderType;
  }

  public void setTranscoderType(TranscoderTypeEnum transcoderType) {
    this.transcoderType = transcoderType;
  }


  public Transcoder8 username(String username) {
    this.username = username;
    return this;
  }

  /**
   * A username for authenticating an RTMP or RTSP push connection. Can contain only uppercase and lowercase letters; numbers; and the period (.), underscore (_), and hyphen (-) characters. No other special characters can be used.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public Transcoder8 videoFallback(Boolean videoFallback) {
    this.videoFallback = videoFallback;
    return this;
  }

  /**
   * If &lt;strong&gt;true&lt;/strong&gt;, black video plays if the video source disconnects from the transcoder. If &lt;strong&gt;false&lt;/strong&gt; (the default), a stream-not-available message appears. Works only with stream targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
   * @return videoFallback
   */
  @javax.annotation.Nullable
  public Boolean getVideoFallback() {
    return videoFallback;
  }

  public void setVideoFallback(Boolean videoFallback) {
    this.videoFallback = videoFallback;
  }


  public Transcoder8 watermark(Boolean watermark) {
    this.watermark = watermark;
    return this;
  }

  /**
   * Embeds an image into the transcoded stream for copyright protection. Specify &lt;strong&gt;true&lt;/strong&gt; to embed a watermark image.
   * @return watermark
   */
  @javax.annotation.Nullable
  public Boolean getWatermark() {
    return watermark;
  }

  public void setWatermark(Boolean watermark) {
    this.watermark = watermark;
  }


  public Transcoder8 watermarkHeight(Integer watermarkHeight) {
    this.watermarkHeight = watermarkHeight;
    return this;
  }

  /**
   * The height, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image height.
   * @return watermarkHeight
   */
  @javax.annotation.Nullable
  public Integer getWatermarkHeight() {
    return watermarkHeight;
  }

  public void setWatermarkHeight(Integer watermarkHeight) {
    this.watermarkHeight = watermarkHeight;
  }


  public Transcoder8 watermarkImage(String watermarkImage) {
    this.watermarkImage = watermarkImage;
    return this;
  }

  /**
   * A Base64-encoded string representation of a GIF, JPEG, or PNG image that is embedded in all bitrate renditions of the stream. Watermark image files must be 2.5 MB or smaller.
   * @return watermarkImage
   */
  @javax.annotation.Nullable
  public String getWatermarkImage() {
    return watermarkImage;
  }

  public void setWatermarkImage(String watermarkImage) {
    this.watermarkImage = watermarkImage;
  }


  public Transcoder8 watermarkOpacity(WatermarkOpacityEnum watermarkOpacity) {
    this.watermarkOpacity = watermarkOpacity;
    return this;
  }

  /**
   * The opacity, or percentage of transparency, of the watermark. &lt;strong&gt;0&lt;/strong&gt; is fully transparent; &lt;strong&gt;100&lt;/strong&gt; is fully opaque.
   * @return watermarkOpacity
   */
  @javax.annotation.Nullable
  public WatermarkOpacityEnum getWatermarkOpacity() {
    return watermarkOpacity;
  }

  public void setWatermarkOpacity(WatermarkOpacityEnum watermarkOpacity) {
    this.watermarkOpacity = watermarkOpacity;
  }


  public Transcoder8 watermarkPosition(WatermarkPositionEnum watermarkPosition) {
    this.watermarkPosition = watermarkPosition;
    return this;
  }

  /**
   * The corner of the video frame in which you want the watermark to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   * @return watermarkPosition
   */
  @javax.annotation.Nullable
  public WatermarkPositionEnum getWatermarkPosition() {
    return watermarkPosition;
  }

  public void setWatermarkPosition(WatermarkPositionEnum watermarkPosition) {
    this.watermarkPosition = watermarkPosition;
  }


  public Transcoder8 watermarkWidth(Integer watermarkWidth) {
    this.watermarkWidth = watermarkWidth;
    return this;
  }

  /**
   * The width, in pixels, of the watermark image. If blank, Wowza Streaming Cloud uses the original image width.
   * @return watermarkWidth
   */
  @javax.annotation.Nullable
  public Integer getWatermarkWidth() {
    return watermarkWidth;
  }

  public void setWatermarkWidth(Integer watermarkWidth) {
    this.watermarkWidth = watermarkWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transcoder8 transcoder8 = (Transcoder8) o;
    return Objects.equals(this.billingMode, transcoder8.billingMode) &&
        Objects.equals(this.broadcastLocation, transcoder8.broadcastLocation) &&
        Objects.equals(this.bufferSize, transcoder8.bufferSize) &&
        Objects.equals(this.closedCaptionType, transcoder8.closedCaptionType) &&
        Objects.equals(this.deliveryMethod, transcoder8.deliveryMethod) &&
        Objects.equals(this.deliveryProtocols, transcoder8.deliveryProtocols) &&
        Objects.equals(this.description, transcoder8.description) &&
        Objects.equals(this.disableAuthentication, transcoder8.disableAuthentication) &&
        Objects.equals(this.idleTimeout, transcoder8.idleTimeout) &&
        Objects.equals(this.lowLatency, transcoder8.lowLatency) &&
        Objects.equals(this.name, transcoder8.name) &&
        Objects.equals(this.password, transcoder8.password) &&
        Objects.equals(this.playMaximumConnections, transcoder8.playMaximumConnections) &&
        Objects.equals(this.protocol, transcoder8.protocol) &&
        Objects.equals(this.recording, transcoder8.recording) &&
        Objects.equals(this.sourceUrl, transcoder8.sourceUrl) &&
        Objects.equals(this.streamExtension, transcoder8.streamExtension) &&
        Objects.equals(this.streamSmoother, transcoder8.streamSmoother) &&
        Objects.equals(this.streamSourceId, transcoder8.streamSourceId) &&
        Objects.equals(this.suppressStreamTargetStart, transcoder8.suppressStreamTargetStart) &&
        Objects.equals(this.transcoderType, transcoder8.transcoderType) &&
        Objects.equals(this.username, transcoder8.username) &&
        Objects.equals(this.videoFallback, transcoder8.videoFallback) &&
        Objects.equals(this.watermark, transcoder8.watermark) &&
        Objects.equals(this.watermarkHeight, transcoder8.watermarkHeight) &&
        Objects.equals(this.watermarkImage, transcoder8.watermarkImage) &&
        Objects.equals(this.watermarkOpacity, transcoder8.watermarkOpacity) &&
        Objects.equals(this.watermarkPosition, transcoder8.watermarkPosition) &&
        Objects.equals(this.watermarkWidth, transcoder8.watermarkWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingMode, broadcastLocation, bufferSize, closedCaptionType, deliveryMethod, deliveryProtocols, description, disableAuthentication, idleTimeout, lowLatency, name, password, playMaximumConnections, protocol, recording, sourceUrl, streamExtension, streamSmoother, streamSourceId, suppressStreamTargetStart, transcoderType, username, videoFallback, watermark, watermarkHeight, watermarkImage, watermarkOpacity, watermarkPosition, watermarkWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transcoder8 {\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    broadcastLocation: ").append(toIndentedString(broadcastLocation)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    closedCaptionType: ").append(toIndentedString(closedCaptionType)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    deliveryProtocols: ").append(toIndentedString(deliveryProtocols)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableAuthentication: ").append(toIndentedString(disableAuthentication)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    lowLatency: ").append(toIndentedString(lowLatency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    playMaximumConnections: ").append(toIndentedString(playMaximumConnections)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    streamExtension: ").append(toIndentedString(streamExtension)).append("\n");
    sb.append("    streamSmoother: ").append(toIndentedString(streamSmoother)).append("\n");
    sb.append("    streamSourceId: ").append(toIndentedString(streamSourceId)).append("\n");
    sb.append("    suppressStreamTargetStart: ").append(toIndentedString(suppressStreamTargetStart)).append("\n");
    sb.append("    transcoderType: ").append(toIndentedString(transcoderType)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    videoFallback: ").append(toIndentedString(videoFallback)).append("\n");
    sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
    sb.append("    watermarkHeight: ").append(toIndentedString(watermarkHeight)).append("\n");
    sb.append("    watermarkImage: ").append(toIndentedString(watermarkImage)).append("\n");
    sb.append("    watermarkOpacity: ").append(toIndentedString(watermarkOpacity)).append("\n");
    sb.append("    watermarkPosition: ").append(toIndentedString(watermarkPosition)).append("\n");
    sb.append("    watermarkWidth: ").append(toIndentedString(watermarkWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_mode");
    openapiFields.add("broadcast_location");
    openapiFields.add("buffer_size");
    openapiFields.add("closed_caption_type");
    openapiFields.add("delivery_method");
    openapiFields.add("delivery_protocols");
    openapiFields.add("description");
    openapiFields.add("disable_authentication");
    openapiFields.add("idle_timeout");
    openapiFields.add("low_latency");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("play_maximum_connections");
    openapiFields.add("protocol");
    openapiFields.add("recording");
    openapiFields.add("source_url");
    openapiFields.add("stream_extension");
    openapiFields.add("stream_smoother");
    openapiFields.add("stream_source_id");
    openapiFields.add("suppress_stream_target_start");
    openapiFields.add("transcoder_type");
    openapiFields.add("username");
    openapiFields.add("video_fallback");
    openapiFields.add("watermark");
    openapiFields.add("watermark_height");
    openapiFields.add("watermark_image");
    openapiFields.add("watermark_opacity");
    openapiFields.add("watermark_position");
    openapiFields.add("watermark_width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billing_mode");
    openapiRequiredFields.add("broadcast_location");
    openapiRequiredFields.add("delivery_method");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("transcoder_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transcoder8
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transcoder8.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transcoder8 is not found in the empty JSON string", Transcoder8.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transcoder8.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transcoder8` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transcoder8.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("billing_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_mode").toString()));
      }
      // validate the required field `billing_mode`
      BillingModeEnum.validateJsonElement(jsonObj.get("billing_mode"));
      if (!jsonObj.get("broadcast_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `broadcast_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("broadcast_location").toString()));
      }
      // validate the required field `broadcast_location`
      BroadcastLocationEnum.validateJsonElement(jsonObj.get("broadcast_location"));
      // validate the optional field `buffer_size`
      if (jsonObj.get("buffer_size") != null && !jsonObj.get("buffer_size").isJsonNull()) {
        BufferSizeEnum.validateJsonElement(jsonObj.get("buffer_size"));
      }
      if ((jsonObj.get("closed_caption_type") != null && !jsonObj.get("closed_caption_type").isJsonNull()) && !jsonObj.get("closed_caption_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_caption_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_caption_type").toString()));
      }
      // validate the optional field `closed_caption_type`
      if (jsonObj.get("closed_caption_type") != null && !jsonObj.get("closed_caption_type").isJsonNull()) {
        ClosedCaptionTypeEnum.validateJsonElement(jsonObj.get("closed_caption_type"));
      }
      if (!jsonObj.get("delivery_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_method").toString()));
      }
      // validate the required field `delivery_method`
      DeliveryMethodEnum.validateJsonElement(jsonObj.get("delivery_method"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("delivery_protocols") != null && !jsonObj.get("delivery_protocols").isJsonNull() && !jsonObj.get("delivery_protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_protocols` to be an array in the JSON string but got `%s`", jsonObj.get("delivery_protocols").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `play_maximum_connections`
      if (jsonObj.get("play_maximum_connections") != null && !jsonObj.get("play_maximum_connections").isJsonNull()) {
        PlayMaximumConnectionsEnum.validateJsonElement(jsonObj.get("play_maximum_connections"));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if ((jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) && !jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if ((jsonObj.get("stream_extension") != null && !jsonObj.get("stream_extension").isJsonNull()) && !jsonObj.get("stream_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_extension").toString()));
      }
      if ((jsonObj.get("stream_source_id") != null && !jsonObj.get("stream_source_id").isJsonNull()) && !jsonObj.get("stream_source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_source_id").toString()));
      }
      if (!jsonObj.get("transcoder_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcoder_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcoder_type").toString()));
      }
      // validate the required field `transcoder_type`
      TranscoderTypeEnum.validateJsonElement(jsonObj.get("transcoder_type"));
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("watermark_image") != null && !jsonObj.get("watermark_image").isJsonNull()) && !jsonObj.get("watermark_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watermark_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watermark_image").toString()));
      }
      // validate the optional field `watermark_opacity`
      if (jsonObj.get("watermark_opacity") != null && !jsonObj.get("watermark_opacity").isJsonNull()) {
        WatermarkOpacityEnum.validateJsonElement(jsonObj.get("watermark_opacity"));
      }
      if ((jsonObj.get("watermark_position") != null && !jsonObj.get("watermark_position").isJsonNull()) && !jsonObj.get("watermark_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watermark_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watermark_position").toString()));
      }
      // validate the optional field `watermark_position`
      if (jsonObj.get("watermark_position") != null && !jsonObj.get("watermark_position").isJsonNull()) {
        WatermarkPositionEnum.validateJsonElement(jsonObj.get("watermark_position"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transcoder8.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transcoder8' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transcoder8> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transcoder8.class));

       return (TypeAdapter<T>) new TypeAdapter<Transcoder8>() {
           @Override
           public void write(JsonWriter out, Transcoder8 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transcoder8 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transcoder8 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transcoder8
   * @throws IOException if the JSON string is invalid with respect to Transcoder8
   */
  public static Transcoder8 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transcoder8.class);
  }

  /**
   * Convert an instance of Transcoder8 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

