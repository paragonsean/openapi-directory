/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Spec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Spec {
  public static final String SERIALIZED_NAME_BASE_PATH = "basePath";
  @SerializedName(SERIALIZED_NAME_BASE_PATH)
  private String basePath;

  public static final String SERIALIZED_NAME_CONSUMES = "consumes";
  @SerializedName(SERIALIZED_NAME_CONSUMES)
  private List<String> consumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private Object definitions;

  public static final String SERIALIZED_NAME_EXTERNAL_DOCS = "externalDocs";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DOCS)
  private Object externalDocs;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private Object info;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private Object paths;

  public static final String SERIALIZED_NAME_PRODUCES = "produces";
  @SerializedName(SERIALIZED_NAME_PRODUCES)
  private List<String> produces = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMES = "schemes";
  @SerializedName(SERIALIZED_NAME_SCHEMES)
  private List<String> schemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private List<Object> security = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_DEFINITIONS = "securityDefinitions";
  @SerializedName(SERIALIZED_NAME_SECURITY_DEFINITIONS)
  private Object securityDefinitions;

  public static final String SERIALIZED_NAME_SWAGGER = "swagger";
  @SerializedName(SERIALIZED_NAME_SWAGGER)
  private String swagger;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_X_TAG_GROUPS = "x-tagGroups";
  @SerializedName(SERIALIZED_NAME_X_TAG_GROUPS)
  private List<Object> xTagGroups = new ArrayList<>();

  public Spec() {
  }

  public Spec basePath(String basePath) {
    this.basePath = basePath;
    return this;
  }

  /**
   * The base path on which the API is served, relative to the **host**.
   * @return basePath
   */
  @javax.annotation.Nullable
  public String getBasePath() {
    return basePath;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }


  public Spec consumes(List<String> consumes) {
    this.consumes = consumes;
    return this;
  }

  public Spec addConsumesItem(String consumesItem) {
    if (this.consumes == null) {
      this.consumes = new ArrayList<>();
    }
    this.consumes.add(consumesItem);
    return this;
  }

  /**
   * A list of MIME types that the API can consume.
   * @return consumes
   */
  @javax.annotation.Nullable
  public List<String> getConsumes() {
    return consumes;
  }

  public void setConsumes(List<String> consumes) {
    this.consumes = consumes;
  }


  public Spec definitions(Object definitions) {
    this.definitions = definitions;
    return this;
  }

  /**
   * The data types produced and consumed by operations.
   * @return definitions
   */
  @javax.annotation.Nullable
  public Object getDefinitions() {
    return definitions;
  }

  public void setDefinitions(Object definitions) {
    this.definitions = definitions;
  }


  public Spec externalDocs(Object externalDocs) {
    this.externalDocs = externalDocs;
    return this;
  }

  /**
   * Links to and descriptions of related external documentation.
   * @return externalDocs
   */
  @javax.annotation.Nullable
  public Object getExternalDocs() {
    return externalDocs;
  }

  public void setExternalDocs(Object externalDocs) {
    this.externalDocs = externalDocs;
  }


  public Spec host(String host) {
    this.host = host;
    return this;
  }

  /**
   * The host (domain name or IP address) serving the API.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public Spec info(Object info) {
    this.info = info;
    return this;
  }

  /**
   * Metadata about the API.
   * @return info
   */
  @javax.annotation.Nullable
  public Object getInfo() {
    return info;
  }

  public void setInfo(Object info) {
    this.info = info;
  }


  public Spec paths(Object paths) {
    this.paths = paths;
    return this;
  }

  /**
   * The paths and operations available to the API.
   * @return paths
   */
  @javax.annotation.Nullable
  public Object getPaths() {
    return paths;
  }

  public void setPaths(Object paths) {
    this.paths = paths;
  }


  public Spec produces(List<String> produces) {
    this.produces = produces;
    return this;
  }

  public Spec addProducesItem(String producesItem) {
    if (this.produces == null) {
      this.produces = new ArrayList<>();
    }
    this.produces.add(producesItem);
    return this;
  }

  /**
   * A list of MIME types that the API can produce.
   * @return produces
   */
  @javax.annotation.Nullable
  public List<String> getProduces() {
    return produces;
  }

  public void setProduces(List<String> produces) {
    this.produces = produces;
  }


  public Spec schemes(List<String> schemes) {
    this.schemes = schemes;
    return this;
  }

  public Spec addSchemesItem(String schemesItem) {
    if (this.schemes == null) {
      this.schemes = new ArrayList<>();
    }
    this.schemes.add(schemesItem);
    return this;
  }

  /**
   * The transfer protocol being used by the API.
   * @return schemes
   */
  @javax.annotation.Nullable
  public List<String> getSchemes() {
    return schemes;
  }

  public void setSchemes(List<String> schemes) {
    this.schemes = schemes;
  }


  public Spec security(List<Object> security) {
    this.security = security;
    return this;
  }

  public Spec addSecurityItem(Object securityItem) {
    if (this.security == null) {
      this.security = new ArrayList<>();
    }
    this.security.add(securityItem);
    return this;
  }

  /**
   * A list of the security schemes being used by the API.
   * @return security
   */
  @javax.annotation.Nullable
  public List<Object> getSecurity() {
    return security;
  }

  public void setSecurity(List<Object> security) {
    this.security = security;
  }


  public Spec securityDefinitions(Object securityDefinitions) {
    this.securityDefinitions = securityDefinitions;
    return this;
  }

  /**
   * The security scheme definitions being used by the API.
   * @return securityDefinitions
   */
  @javax.annotation.Nullable
  public Object getSecurityDefinitions() {
    return securityDefinitions;
  }

  public void setSecurityDefinitions(Object securityDefinitions) {
    this.securityDefinitions = securityDefinitions;
  }


  public Spec swagger(String swagger) {
    this.swagger = swagger;
    return this;
  }

  /**
   * The version of the Swagger specification that&#39;s being used.
   * @return swagger
   */
  @javax.annotation.Nullable
  public String getSwagger() {
    return swagger;
  }

  public void setSwagger(String swagger) {
    this.swagger = swagger;
  }


  public Spec tags(List<Object> tags) {
    this.tags = tags;
    return this;
  }

  public Spec addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags used by the specification, with metadata.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Object> getTags() {
    return tags;
  }

  public void setTags(List<Object> tags) {
    this.tags = tags;
  }


  public Spec xTagGroups(List<Object> xTagGroups) {
    this.xTagGroups = xTagGroups;
    return this;
  }

  public Spec addXTagGroupsItem(Object xTagGroupsItem) {
    if (this.xTagGroups == null) {
      this.xTagGroups = new ArrayList<>();
    }
    this.xTagGroups.add(xTagGroupsItem);
    return this;
  }

  /**
   * A list of the groups and tags used in the left column of the Swagger page.
   * @return xTagGroups
   */
  @javax.annotation.Nullable
  public List<Object> getxTagGroups() {
    return xTagGroups;
  }

  public void setxTagGroups(List<Object> xTagGroups) {
    this.xTagGroups = xTagGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spec spec = (Spec) o;
    return Objects.equals(this.basePath, spec.basePath) &&
        Objects.equals(this.consumes, spec.consumes) &&
        Objects.equals(this.definitions, spec.definitions) &&
        Objects.equals(this.externalDocs, spec.externalDocs) &&
        Objects.equals(this.host, spec.host) &&
        Objects.equals(this.info, spec.info) &&
        Objects.equals(this.paths, spec.paths) &&
        Objects.equals(this.produces, spec.produces) &&
        Objects.equals(this.schemes, spec.schemes) &&
        Objects.equals(this.security, spec.security) &&
        Objects.equals(this.securityDefinitions, spec.securityDefinitions) &&
        Objects.equals(this.swagger, spec.swagger) &&
        Objects.equals(this.tags, spec.tags) &&
        Objects.equals(this.xTagGroups, spec.xTagGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePath, consumes, definitions, externalDocs, host, info, paths, produces, schemes, security, securityDefinitions, swagger, tags, xTagGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spec {\n");
    sb.append("    basePath: ").append(toIndentedString(basePath)).append("\n");
    sb.append("    consumes: ").append(toIndentedString(consumes)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    externalDocs: ").append(toIndentedString(externalDocs)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    produces: ").append(toIndentedString(produces)).append("\n");
    sb.append("    schemes: ").append(toIndentedString(schemes)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    securityDefinitions: ").append(toIndentedString(securityDefinitions)).append("\n");
    sb.append("    swagger: ").append(toIndentedString(swagger)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    xTagGroups: ").append(toIndentedString(xTagGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePath");
    openapiFields.add("consumes");
    openapiFields.add("definitions");
    openapiFields.add("externalDocs");
    openapiFields.add("host");
    openapiFields.add("info");
    openapiFields.add("paths");
    openapiFields.add("produces");
    openapiFields.add("schemes");
    openapiFields.add("security");
    openapiFields.add("securityDefinitions");
    openapiFields.add("swagger");
    openapiFields.add("tags");
    openapiFields.add("x-tagGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Spec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Spec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Spec is not found in the empty JSON string", Spec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Spec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Spec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basePath") != null && !jsonObj.get("basePath").isJsonNull()) && !jsonObj.get("basePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("consumes") != null && !jsonObj.get("consumes").isJsonNull() && !jsonObj.get("consumes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumes` to be an array in the JSON string but got `%s`", jsonObj.get("consumes").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("produces") != null && !jsonObj.get("produces").isJsonNull() && !jsonObj.get("produces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `produces` to be an array in the JSON string but got `%s`", jsonObj.get("produces").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemes") != null && !jsonObj.get("schemes").isJsonNull() && !jsonObj.get("schemes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemes` to be an array in the JSON string but got `%s`", jsonObj.get("schemes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull() && !jsonObj.get("security").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `security` to be an array in the JSON string but got `%s`", jsonObj.get("security").toString()));
      }
      if ((jsonObj.get("swagger") != null && !jsonObj.get("swagger").isJsonNull()) && !jsonObj.get("swagger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swagger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swagger").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("x-tagGroups") != null && !jsonObj.get("x-tagGroups").isJsonNull() && !jsonObj.get("x-tagGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `x-tagGroups` to be an array in the JSON string but got `%s`", jsonObj.get("x-tagGroups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Spec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Spec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Spec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Spec.class));

       return (TypeAdapter<T>) new TypeAdapter<Spec>() {
           @Override
           public void write(JsonWriter out, Spec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Spec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Spec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Spec
   * @throws IOException if the JSON string is invalid with respect to Spec
   */
  public static Spec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Spec.class);
  }

  /**
   * Convert an instance of Spec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

