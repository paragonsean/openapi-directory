/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schedule4
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schedule4 {
  /**
   * The type of action that the schedule should trigger on the transcoder. The default is &lt;strong&gt;start&lt;/strong&gt;.
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    START("start"),
    
    STOP("stop"),
    
    START_STOP("start_stop");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_TYPE = "action_type";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionTypeEnum actionType;

  public static final String SERIALIZED_NAME_END_REPEAT = "end_repeat";
  @SerializedName(SERIALIZED_NAME_END_REPEAT)
  private LocalDate endRepeat;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The day or days of the week that a recurring schedule should run.
   */
  @JsonAdapter(RecurrenceDataEnum.Adapter.class)
  public enum RecurrenceDataEnum {
    SUNDAY("sunday"),
    
    MONDAY("monday"),
    
    TUESDAY("tuesday"),
    
    WEDNESDAY("wednesday"),
    
    THURSDAY("thursday"),
    
    FRIDAY("friday"),
    
    SATURDAY("saturday");

    private String value;

    RecurrenceDataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrenceDataEnum fromValue(String value) {
      for (RecurrenceDataEnum b : RecurrenceDataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurrenceDataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrenceDataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrenceDataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurrenceDataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecurrenceDataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECURRENCE_DATA = "recurrence_data";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_DATA)
  private RecurrenceDataEnum recurrenceData;

  public static final String SERIALIZED_NAME_START_REPEAT = "start_repeat";
  @SerializedName(SERIALIZED_NAME_START_REPEAT)
  private LocalDate startRepeat;

  public static final String SERIALIZED_NAME_START_TRANSCODER = "start_transcoder";
  @SerializedName(SERIALIZED_NAME_START_TRANSCODER)
  private OffsetDateTime startTranscoder;

  public static final String SERIALIZED_NAME_STOP_TRANSCODER = "stop_transcoder";
  @SerializedName(SERIALIZED_NAME_STOP_TRANSCODER)
  private OffsetDateTime stopTranscoder;

  public Schedule4() {
  }

  public Schedule4 actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * The type of action that the schedule should trigger on the transcoder. The default is &lt;strong&gt;start&lt;/strong&gt;.
   * @return actionType
   */
  @javax.annotation.Nonnull
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public Schedule4 endRepeat(LocalDate endRepeat) {
    this.endRepeat = endRepeat;
    return this;
  }

  /**
   * The month, day, and year that a recurring schedule should stop running. Specify &lt;strong&gt;YYYY-MM-DD&lt;/strong&gt;.
   * @return endRepeat
   */
  @javax.annotation.Nullable
  public LocalDate getEndRepeat() {
    return endRepeat;
  }

  public void setEndRepeat(LocalDate endRepeat) {
    this.endRepeat = endRepeat;
  }


  public Schedule4 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A descriptive name for the schedule. Maximum 255 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Schedule4 recurrenceData(RecurrenceDataEnum recurrenceData) {
    this.recurrenceData = recurrenceData;
    return this;
  }

  /**
   * The day or days of the week that a recurring schedule should run.
   * @return recurrenceData
   */
  @javax.annotation.Nullable
  public RecurrenceDataEnum getRecurrenceData() {
    return recurrenceData;
  }

  public void setRecurrenceData(RecurrenceDataEnum recurrenceData) {
    this.recurrenceData = recurrenceData;
  }


  public Schedule4 startRepeat(LocalDate startRepeat) {
    this.startRepeat = startRepeat;
    return this;
  }

  /**
   * The month, day, and year that the recurring schedule should go into effect. Specify &lt;strong&gt;YYYY-MM-DD&lt;/strong&gt;.
   * @return startRepeat
   */
  @javax.annotation.Nullable
  public LocalDate getStartRepeat() {
    return startRepeat;
  }

  public void setStartRepeat(LocalDate startRepeat) {
    this.startRepeat = startRepeat;
  }


  public Schedule4 startTranscoder(OffsetDateTime startTranscoder) {
    this.startTranscoder = startTranscoder;
    return this;
  }

  /**
   * The month, day, year, and time of day that the &lt;em&gt;action_type&lt;/em&gt; &lt;strong&gt;start&lt;/strong&gt; should occur. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC.
   * @return startTranscoder
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTranscoder() {
    return startTranscoder;
  }

  public void setStartTranscoder(OffsetDateTime startTranscoder) {
    this.startTranscoder = startTranscoder;
  }


  public Schedule4 stopTranscoder(OffsetDateTime stopTranscoder) {
    this.stopTranscoder = stopTranscoder;
    return this;
  }

  /**
   * The month, day, year, and time of day that the &lt;em&gt;action_type&lt;/em&gt; &lt;strong&gt;stop&lt;/strong&gt; should occur. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC.
   * @return stopTranscoder
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopTranscoder() {
    return stopTranscoder;
  }

  public void setStopTranscoder(OffsetDateTime stopTranscoder) {
    this.stopTranscoder = stopTranscoder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule4 schedule4 = (Schedule4) o;
    return Objects.equals(this.actionType, schedule4.actionType) &&
        Objects.equals(this.endRepeat, schedule4.endRepeat) &&
        Objects.equals(this.name, schedule4.name) &&
        Objects.equals(this.recurrenceData, schedule4.recurrenceData) &&
        Objects.equals(this.startRepeat, schedule4.startRepeat) &&
        Objects.equals(this.startTranscoder, schedule4.startTranscoder) &&
        Objects.equals(this.stopTranscoder, schedule4.stopTranscoder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, endRepeat, name, recurrenceData, startRepeat, startTranscoder, stopTranscoder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule4 {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    endRepeat: ").append(toIndentedString(endRepeat)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recurrenceData: ").append(toIndentedString(recurrenceData)).append("\n");
    sb.append("    startRepeat: ").append(toIndentedString(startRepeat)).append("\n");
    sb.append("    startTranscoder: ").append(toIndentedString(startTranscoder)).append("\n");
    sb.append("    stopTranscoder: ").append(toIndentedString(stopTranscoder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action_type");
    openapiFields.add("end_repeat");
    openapiFields.add("name");
    openapiFields.add("recurrence_data");
    openapiFields.add("start_repeat");
    openapiFields.add("start_transcoder");
    openapiFields.add("stop_transcoder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action_type");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schedule4
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedule4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedule4 is not found in the empty JSON string", Schedule4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedule4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedule4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Schedule4.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_type").toString()));
      }
      // validate the required field `action_type`
      ActionTypeEnum.validateJsonElement(jsonObj.get("action_type"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("recurrence_data") != null && !jsonObj.get("recurrence_data").isJsonNull()) && !jsonObj.get("recurrence_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrence_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrence_data").toString()));
      }
      // validate the optional field `recurrence_data`
      if (jsonObj.get("recurrence_data") != null && !jsonObj.get("recurrence_data").isJsonNull()) {
        RecurrenceDataEnum.validateJsonElement(jsonObj.get("recurrence_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedule4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedule4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedule4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedule4.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedule4>() {
           @Override
           public void write(JsonWriter out, Schedule4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedule4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schedule4 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schedule4
   * @throws IOException if the JSON string is invalid with respect to Schedule4
   */
  public static Schedule4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedule4.class);
  }

  /**
   * Convert an instance of Schedule4 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

