/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CountryObject;
import org.openapitools.client.model.ProtocolObject;
import org.openapitools.client.model.RenditionObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamTarget7
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamTarget7 {
  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<CountryObject> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY_LIST = "country_list";
  @SerializedName(SERIALIZED_NAME_COUNTRY_LIST)
  private List<String> countryList = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTAGE_VIEWERS = "percentage_viewers";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_VIEWERS)
  private Integer percentageViewers;

  public static final String SERIALIZED_NAME_PERCENTAGE_VIEWING_TIME = "percentage_viewing_time";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_VIEWING_TIME)
  private Integer percentageViewingTime;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<ProtocolObject> protocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENDITION_LIST = "rendition_list";
  @SerializedName(SERIALIZED_NAME_RENDITION_LIST)
  private List<String> renditionList = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENDITIONS = "renditions";
  @SerializedName(SERIALIZED_NAME_RENDITIONS)
  private List<RenditionObject> renditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDS_AVG_VIEWING_TIME = "seconds_avg_viewing_time";
  @SerializedName(SERIALIZED_NAME_SECONDS_AVG_VIEWING_TIME)
  private Integer secondsAvgViewingTime;

  public static final String SERIALIZED_NAME_SECONDS_TOTAL_VIEWING_TIME = "seconds_total_viewing_time";
  @SerializedName(SERIALIZED_NAME_SECONDS_TOTAL_VIEWING_TIME)
  private Integer secondsTotalViewingTime;

  public static final String SERIALIZED_NAME_TOTAL_UNIQUE_VIEWERS = "total_unique_viewers";
  @SerializedName(SERIALIZED_NAME_TOTAL_UNIQUE_VIEWERS)
  private Integer totalUniqueViewers;

  public StreamTarget7() {
  }

  public StreamTarget7 countries(List<CountryObject> countries) {
    this.countries = countries;
    return this;
  }

  public StreamTarget7 addCountriesItem(CountryObject countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * Get countries
   * @return countries
   */
  @javax.annotation.Nullable
  public List<CountryObject> getCountries() {
    return countries;
  }

  public void setCountries(List<CountryObject> countries) {
    this.countries = countries;
  }


  public StreamTarget7 countryList(List<String> countryList) {
    this.countryList = countryList;
    return this;
  }

  public StreamTarget7 addCountryListItem(String countryListItem) {
    if (this.countryList == null) {
      this.countryList = new ArrayList<>();
    }
    this.countryList.add(countryListItem);
    return this;
  }

  /**
   * A comma-separated list of all viewed country codes shown as strings, for quick reference.
   * @return countryList
   */
  @javax.annotation.Nullable
  public List<String> getCountryList() {
    return countryList;
  }

  public void setCountryList(List<String> countryList) {
    this.countryList = countryList;
  }


  public StreamTarget7 percentageViewers(Integer percentageViewers) {
    this.percentageViewers = percentageViewers;
    return this;
  }

  /**
   * Total percentage of viewers (&lt;strong&gt;100&lt;/strong&gt;).
   * @return percentageViewers
   */
  @javax.annotation.Nullable
  public Integer getPercentageViewers() {
    return percentageViewers;
  }

  public void setPercentageViewers(Integer percentageViewers) {
    this.percentageViewers = percentageViewers;
  }


  public StreamTarget7 percentageViewingTime(Integer percentageViewingTime) {
    this.percentageViewingTime = percentageViewingTime;
    return this;
  }

  /**
   * The percentage of total viewing time that the protocol or rendition was viewed. Always &lt;strong&gt;100&lt;/strong&gt; for &lt;em&gt;stream_target&lt;/em&gt;.
   * @return percentageViewingTime
   */
  @javax.annotation.Nullable
  public Integer getPercentageViewingTime() {
    return percentageViewingTime;
  }

  public void setPercentageViewingTime(Integer percentageViewingTime) {
    this.percentageViewingTime = percentageViewingTime;
  }


  public StreamTarget7 protocols(List<ProtocolObject> protocols) {
    this.protocols = protocols;
    return this;
  }

  public StreamTarget7 addProtocolsItem(ProtocolObject protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * Get protocols
   * @return protocols
   */
  @javax.annotation.Nullable
  public List<ProtocolObject> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<ProtocolObject> protocols) {
    this.protocols = protocols;
  }


  public StreamTarget7 renditionList(List<String> renditionList) {
    this.renditionList = renditionList;
    return this;
  }

  public StreamTarget7 addRenditionListItem(String renditionListItem) {
    if (this.renditionList == null) {
      this.renditionList = new ArrayList<>();
    }
    this.renditionList.add(renditionListItem);
    return this;
  }

  /**
   * A comma-separated list of all viewed renditions shown as numbers, for quick reference.
   * @return renditionList
   */
  @javax.annotation.Nullable
  public List<String> getRenditionList() {
    return renditionList;
  }

  public void setRenditionList(List<String> renditionList) {
    this.renditionList = renditionList;
  }


  public StreamTarget7 renditions(List<RenditionObject> renditions) {
    this.renditions = renditions;
    return this;
  }

  public StreamTarget7 addRenditionsItem(RenditionObject renditionsItem) {
    if (this.renditions == null) {
      this.renditions = new ArrayList<>();
    }
    this.renditions.add(renditionsItem);
    return this;
  }

  /**
   * Get renditions
   * @return renditions
   */
  @javax.annotation.Nullable
  public List<RenditionObject> getRenditions() {
    return renditions;
  }

  public void setRenditions(List<RenditionObject> renditions) {
    this.renditions = renditions;
  }


  public StreamTarget7 secondsAvgViewingTime(Integer secondsAvgViewingTime) {
    this.secondsAvgViewingTime = secondsAvgViewingTime;
    return this;
  }

  /**
   * The average length of time, in seconds, that viewers played the stream at the target.
   * @return secondsAvgViewingTime
   */
  @javax.annotation.Nullable
  public Integer getSecondsAvgViewingTime() {
    return secondsAvgViewingTime;
  }

  public void setSecondsAvgViewingTime(Integer secondsAvgViewingTime) {
    this.secondsAvgViewingTime = secondsAvgViewingTime;
  }


  public StreamTarget7 secondsTotalViewingTime(Integer secondsTotalViewingTime) {
    this.secondsTotalViewingTime = secondsTotalViewingTime;
    return this;
  }

  /**
   * The total length of time, in seconds, that all viewers played the stream at the target. &lt;em&gt;seconds_total_viewing_time&lt;/em&gt; may be longer than the duration of the stream.
   * @return secondsTotalViewingTime
   */
  @javax.annotation.Nullable
  public Integer getSecondsTotalViewingTime() {
    return secondsTotalViewingTime;
  }

  public void setSecondsTotalViewingTime(Integer secondsTotalViewingTime) {
    this.secondsTotalViewingTime = secondsTotalViewingTime;
  }


  public StreamTarget7 totalUniqueViewers(Integer totalUniqueViewers) {
    this.totalUniqueViewers = totalUniqueViewers;
    return this;
  }

  /**
   * The total number of unique viewers that downloaded at least one chunk of the stream at the target (for HTTP streams) or connected to and viewed the stream (for ultra low latency streams). A unique viewer is a single IP address; multiple users that share the same IP address are counted once.
   * @return totalUniqueViewers
   */
  @javax.annotation.Nullable
  public Integer getTotalUniqueViewers() {
    return totalUniqueViewers;
  }

  public void setTotalUniqueViewers(Integer totalUniqueViewers) {
    this.totalUniqueViewers = totalUniqueViewers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTarget7 streamTarget7 = (StreamTarget7) o;
    return Objects.equals(this.countries, streamTarget7.countries) &&
        Objects.equals(this.countryList, streamTarget7.countryList) &&
        Objects.equals(this.percentageViewers, streamTarget7.percentageViewers) &&
        Objects.equals(this.percentageViewingTime, streamTarget7.percentageViewingTime) &&
        Objects.equals(this.protocols, streamTarget7.protocols) &&
        Objects.equals(this.renditionList, streamTarget7.renditionList) &&
        Objects.equals(this.renditions, streamTarget7.renditions) &&
        Objects.equals(this.secondsAvgViewingTime, streamTarget7.secondsAvgViewingTime) &&
        Objects.equals(this.secondsTotalViewingTime, streamTarget7.secondsTotalViewingTime) &&
        Objects.equals(this.totalUniqueViewers, streamTarget7.totalUniqueViewers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countries, countryList, percentageViewers, percentageViewingTime, protocols, renditionList, renditions, secondsAvgViewingTime, secondsTotalViewingTime, totalUniqueViewers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTarget7 {\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    countryList: ").append(toIndentedString(countryList)).append("\n");
    sb.append("    percentageViewers: ").append(toIndentedString(percentageViewers)).append("\n");
    sb.append("    percentageViewingTime: ").append(toIndentedString(percentageViewingTime)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    renditionList: ").append(toIndentedString(renditionList)).append("\n");
    sb.append("    renditions: ").append(toIndentedString(renditions)).append("\n");
    sb.append("    secondsAvgViewingTime: ").append(toIndentedString(secondsAvgViewingTime)).append("\n");
    sb.append("    secondsTotalViewingTime: ").append(toIndentedString(secondsTotalViewingTime)).append("\n");
    sb.append("    totalUniqueViewers: ").append(toIndentedString(totalUniqueViewers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countries");
    openapiFields.add("country_list");
    openapiFields.add("percentage_viewers");
    openapiFields.add("percentage_viewing_time");
    openapiFields.add("protocols");
    openapiFields.add("rendition_list");
    openapiFields.add("renditions");
    openapiFields.add("seconds_avg_viewing_time");
    openapiFields.add("seconds_total_viewing_time");
    openapiFields.add("total_unique_viewers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamTarget7
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamTarget7.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamTarget7 is not found in the empty JSON string", StreamTarget7.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamTarget7.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamTarget7` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) {
        JsonArray jsonArraycountries = jsonObj.getAsJsonArray("countries");
        if (jsonArraycountries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("countries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
          }

          // validate the optional field `countries` (array)
          for (int i = 0; i < jsonArraycountries.size(); i++) {
            CountryObject.validateJsonElement(jsonArraycountries.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("country_list") != null && !jsonObj.get("country_list").isJsonNull() && !jsonObj.get("country_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_list` to be an array in the JSON string but got `%s`", jsonObj.get("country_list").toString()));
      }
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull()) {
        JsonArray jsonArrayprotocols = jsonObj.getAsJsonArray("protocols");
        if (jsonArrayprotocols != null) {
          // ensure the json data is an array
          if (!jsonObj.get("protocols").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
          }

          // validate the optional field `protocols` (array)
          for (int i = 0; i < jsonArrayprotocols.size(); i++) {
            ProtocolObject.validateJsonElement(jsonArrayprotocols.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rendition_list") != null && !jsonObj.get("rendition_list").isJsonNull() && !jsonObj.get("rendition_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rendition_list` to be an array in the JSON string but got `%s`", jsonObj.get("rendition_list").toString()));
      }
      if (jsonObj.get("renditions") != null && !jsonObj.get("renditions").isJsonNull()) {
        JsonArray jsonArrayrenditions = jsonObj.getAsJsonArray("renditions");
        if (jsonArrayrenditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("renditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `renditions` to be an array in the JSON string but got `%s`", jsonObj.get("renditions").toString()));
          }

          // validate the optional field `renditions` (array)
          for (int i = 0; i < jsonArrayrenditions.size(); i++) {
            RenditionObject.validateJsonElement(jsonArrayrenditions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamTarget7.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamTarget7' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamTarget7> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamTarget7.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamTarget7>() {
           @Override
           public void write(JsonWriter out, StreamTarget7 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamTarget7 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamTarget7 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamTarget7
   * @throws IOException if the JSON string is invalid with respect to StreamTarget7
   */
  public static StreamTarget7 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamTarget7.class);
  }

  /**
   * Convert an instance of StreamTarget7 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

