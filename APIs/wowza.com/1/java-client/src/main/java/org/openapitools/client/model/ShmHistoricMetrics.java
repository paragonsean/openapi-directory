/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioCodecMetric;
import org.openapitools.client.model.BitsInRateMetric;
import org.openapitools.client.model.BitsOutRateMetric;
import org.openapitools.client.model.CpuIdleMetric;
import org.openapitools.client.model.FrameRateMetric;
import org.openapitools.client.model.HeightMetric;
import org.openapitools.client.model.KeyframeIntervalMetric;
import org.openapitools.client.model.VideoCodecMetric;
import org.openapitools.client.model.WidthMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShmHistoricMetrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShmHistoricMetrics {
  public static final String SERIALIZED_NAME_AUDIO_CODEC = "audio_codec";
  @SerializedName(SERIALIZED_NAME_AUDIO_CODEC)
  private AudioCodecMetric audioCodec;

  public static final String SERIALIZED_NAME_BITS_IN_RATE = "bits_in_rate";
  @SerializedName(SERIALIZED_NAME_BITS_IN_RATE)
  private BitsInRateMetric bitsInRate;

  public static final String SERIALIZED_NAME_BITS_OUT_RATE = "bits_out_rate";
  @SerializedName(SERIALIZED_NAME_BITS_OUT_RATE)
  private BitsOutRateMetric bitsOutRate;

  public static final String SERIALIZED_NAME_CPU_IDLE = "cpu_idle";
  @SerializedName(SERIALIZED_NAME_CPU_IDLE)
  private CpuIdleMetric cpuIdle;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_FRAME_RATE = "frame_rate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  private FrameRateMetric frameRate;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private HeightMetric height;

  public static final String SERIALIZED_NAME_KEYFRAME_INTERVAL = "keyframe_interval";
  @SerializedName(SERIALIZED_NAME_KEYFRAME_INTERVAL)
  private KeyframeIntervalMetric keyframeInterval;

  public static final String SERIALIZED_NAME_VIDEO_CODEC = "video_codec";
  @SerializedName(SERIALIZED_NAME_VIDEO_CODEC)
  private VideoCodecMetric videoCodec;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private WidthMetric width;

  public ShmHistoricMetrics() {
  }

  public ShmHistoricMetrics audioCodec(AudioCodecMetric audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

  /**
   * Get audioCodec
   * @return audioCodec
   */
  @javax.annotation.Nullable
  public AudioCodecMetric getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(AudioCodecMetric audioCodec) {
    this.audioCodec = audioCodec;
  }


  public ShmHistoricMetrics bitsInRate(BitsInRateMetric bitsInRate) {
    this.bitsInRate = bitsInRate;
    return this;
  }

  /**
   * Get bitsInRate
   * @return bitsInRate
   */
  @javax.annotation.Nullable
  public BitsInRateMetric getBitsInRate() {
    return bitsInRate;
  }

  public void setBitsInRate(BitsInRateMetric bitsInRate) {
    this.bitsInRate = bitsInRate;
  }


  public ShmHistoricMetrics bitsOutRate(BitsOutRateMetric bitsOutRate) {
    this.bitsOutRate = bitsOutRate;
    return this;
  }

  /**
   * Get bitsOutRate
   * @return bitsOutRate
   */
  @javax.annotation.Nullable
  public BitsOutRateMetric getBitsOutRate() {
    return bitsOutRate;
  }

  public void setBitsOutRate(BitsOutRateMetric bitsOutRate) {
    this.bitsOutRate = bitsOutRate;
  }


  public ShmHistoricMetrics cpuIdle(CpuIdleMetric cpuIdle) {
    this.cpuIdle = cpuIdle;
    return this;
  }

  /**
   * Get cpuIdle
   * @return cpuIdle
   */
  @javax.annotation.Nullable
  public CpuIdleMetric getCpuIdle() {
    return cpuIdle;
  }

  public void setCpuIdle(CpuIdleMetric cpuIdle) {
    this.cpuIdle = cpuIdle;
  }


  public ShmHistoricMetrics createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time that the stream health record was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ShmHistoricMetrics frameRate(FrameRateMetric frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * Get frameRate
   * @return frameRate
   */
  @javax.annotation.Nullable
  public FrameRateMetric getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(FrameRateMetric frameRate) {
    this.frameRate = frameRate;
  }


  public ShmHistoricMetrics height(HeightMetric height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public HeightMetric getHeight() {
    return height;
  }

  public void setHeight(HeightMetric height) {
    this.height = height;
  }


  public ShmHistoricMetrics keyframeInterval(KeyframeIntervalMetric keyframeInterval) {
    this.keyframeInterval = keyframeInterval;
    return this;
  }

  /**
   * Get keyframeInterval
   * @return keyframeInterval
   */
  @javax.annotation.Nullable
  public KeyframeIntervalMetric getKeyframeInterval() {
    return keyframeInterval;
  }

  public void setKeyframeInterval(KeyframeIntervalMetric keyframeInterval) {
    this.keyframeInterval = keyframeInterval;
  }


  public ShmHistoricMetrics videoCodec(VideoCodecMetric videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

  /**
   * Get videoCodec
   * @return videoCodec
   */
  @javax.annotation.Nullable
  public VideoCodecMetric getVideoCodec() {
    return videoCodec;
  }

  public void setVideoCodec(VideoCodecMetric videoCodec) {
    this.videoCodec = videoCodec;
  }


  public ShmHistoricMetrics width(WidthMetric width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public WidthMetric getWidth() {
    return width;
  }

  public void setWidth(WidthMetric width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShmHistoricMetrics shmHistoricMetrics = (ShmHistoricMetrics) o;
    return Objects.equals(this.audioCodec, shmHistoricMetrics.audioCodec) &&
        Objects.equals(this.bitsInRate, shmHistoricMetrics.bitsInRate) &&
        Objects.equals(this.bitsOutRate, shmHistoricMetrics.bitsOutRate) &&
        Objects.equals(this.cpuIdle, shmHistoricMetrics.cpuIdle) &&
        Objects.equals(this.createdAt, shmHistoricMetrics.createdAt) &&
        Objects.equals(this.frameRate, shmHistoricMetrics.frameRate) &&
        Objects.equals(this.height, shmHistoricMetrics.height) &&
        Objects.equals(this.keyframeInterval, shmHistoricMetrics.keyframeInterval) &&
        Objects.equals(this.videoCodec, shmHistoricMetrics.videoCodec) &&
        Objects.equals(this.width, shmHistoricMetrics.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioCodec, bitsInRate, bitsOutRate, cpuIdle, createdAt, frameRate, height, keyframeInterval, videoCodec, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShmHistoricMetrics {\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    bitsInRate: ").append(toIndentedString(bitsInRate)).append("\n");
    sb.append("    bitsOutRate: ").append(toIndentedString(bitsOutRate)).append("\n");
    sb.append("    cpuIdle: ").append(toIndentedString(cpuIdle)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    keyframeInterval: ").append(toIndentedString(keyframeInterval)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_codec");
    openapiFields.add("bits_in_rate");
    openapiFields.add("bits_out_rate");
    openapiFields.add("cpu_idle");
    openapiFields.add("created_at");
    openapiFields.add("frame_rate");
    openapiFields.add("height");
    openapiFields.add("keyframe_interval");
    openapiFields.add("video_codec");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShmHistoricMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShmHistoricMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShmHistoricMetrics is not found in the empty JSON string", ShmHistoricMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShmHistoricMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShmHistoricMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audio_codec`
      if (jsonObj.get("audio_codec") != null && !jsonObj.get("audio_codec").isJsonNull()) {
        AudioCodecMetric.validateJsonElement(jsonObj.get("audio_codec"));
      }
      // validate the optional field `bits_in_rate`
      if (jsonObj.get("bits_in_rate") != null && !jsonObj.get("bits_in_rate").isJsonNull()) {
        BitsInRateMetric.validateJsonElement(jsonObj.get("bits_in_rate"));
      }
      // validate the optional field `bits_out_rate`
      if (jsonObj.get("bits_out_rate") != null && !jsonObj.get("bits_out_rate").isJsonNull()) {
        BitsOutRateMetric.validateJsonElement(jsonObj.get("bits_out_rate"));
      }
      // validate the optional field `cpu_idle`
      if (jsonObj.get("cpu_idle") != null && !jsonObj.get("cpu_idle").isJsonNull()) {
        CpuIdleMetric.validateJsonElement(jsonObj.get("cpu_idle"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `frame_rate`
      if (jsonObj.get("frame_rate") != null && !jsonObj.get("frame_rate").isJsonNull()) {
        FrameRateMetric.validateJsonElement(jsonObj.get("frame_rate"));
      }
      // validate the optional field `height`
      if (jsonObj.get("height") != null && !jsonObj.get("height").isJsonNull()) {
        HeightMetric.validateJsonElement(jsonObj.get("height"));
      }
      // validate the optional field `keyframe_interval`
      if (jsonObj.get("keyframe_interval") != null && !jsonObj.get("keyframe_interval").isJsonNull()) {
        KeyframeIntervalMetric.validateJsonElement(jsonObj.get("keyframe_interval"));
      }
      // validate the optional field `video_codec`
      if (jsonObj.get("video_codec") != null && !jsonObj.get("video_codec").isJsonNull()) {
        VideoCodecMetric.validateJsonElement(jsonObj.get("video_codec"));
      }
      // validate the optional field `width`
      if (jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) {
        WidthMetric.validateJsonElement(jsonObj.get("width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShmHistoricMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShmHistoricMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShmHistoricMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShmHistoricMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<ShmHistoricMetrics>() {
           @Override
           public void write(JsonWriter out, ShmHistoricMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShmHistoricMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShmHistoricMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShmHistoricMetrics
   * @throws IOException if the JSON string is invalid with respect to ShmHistoricMetrics
   */
  public static ShmHistoricMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShmHistoricMetrics.class);
  }

  /**
   * Convert an instance of ShmHistoricMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

