/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:34.965109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_COUNTDOWN = "countdown";
  @SerializedName(SERIALIZED_NAME_COUNTDOWN)
  private Boolean countdown;

  public static final String SERIALIZED_NAME_COUNTDOWN_AT = "countdown_at";
  @SerializedName(SERIALIZED_NAME_COUNTDOWN_AT)
  private OffsetDateTime countdownAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EMBED_CODE = "embed_code";
  @SerializedName(SERIALIZED_NAME_EMBED_CODE)
  private String embedCode;

  public static final String SERIALIZED_NAME_HDS_PLAYBACK_URL = "hds_playback_url";
  @SerializedName(SERIALIZED_NAME_HDS_PLAYBACK_URL)
  private String hdsPlaybackUrl;

  public static final String SERIALIZED_NAME_HLS_PLAYBACK_URL = "hls_playback_url";
  @SerializedName(SERIALIZED_NAME_HLS_PLAYBACK_URL)
  private String hlsPlaybackUrl;

  public static final String SERIALIZED_NAME_HOSTED_PAGE = "hosted_page";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE)
  private Boolean hostedPage;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_DESCRIPTION = "hosted_page_description";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_DESCRIPTION)
  private String hostedPageDescription;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_LOGO_IMAGE_URL = "hosted_page_logo_image_url";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_LOGO_IMAGE_URL)
  private String hostedPageLogoImageUrl;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_SHARING_ICONS = "hosted_page_sharing_icons";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_SHARING_ICONS)
  private String hostedPageSharingIcons;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_TITLE = "hosted_page_title";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_TITLE)
  private String hostedPageTitle;

  public static final String SERIALIZED_NAME_HOSTED_PAGE_URL = "hosted_page_url";
  @SerializedName(SERIALIZED_NAME_HOSTED_PAGE_URL)
  private String hostedPageUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGO_IMAGE_URL = "logo_image_url";
  @SerializedName(SERIALIZED_NAME_LOGO_IMAGE_URL)
  private String logoImageUrl;

  public static final String SERIALIZED_NAME_LOGO_POSITION = "logo_position";
  @SerializedName(SERIALIZED_NAME_LOGO_POSITION)
  private String logoPosition;

  public static final String SERIALIZED_NAME_RESPONSIVE = "responsive";
  @SerializedName(SERIALIZED_NAME_RESPONSIVE)
  private Boolean responsive;

  public static final String SERIALIZED_NAME_TRANSCODER_ID = "transcoder_id";
  @SerializedName(SERIALIZED_NAME_TRANSCODER_ID)
  private String transcoderId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VIDEO_POSTER_IMAGE_URL = "video_poster_image_url";
  @SerializedName(SERIALIZED_NAME_VIDEO_POSTER_IMAGE_URL)
  private String videoPosterImageUrl;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public Player() {
  }

  public Player countdown(Boolean countdown) {
    this.countdown = countdown;
    return this;
  }

  /**
   * A clock that appears in the player before the event and counts down to the start of the stream. Specify &lt;strong&gt;true&lt;/strong&gt; to display the countdown clock. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return countdown
   */
  @javax.annotation.Nullable
  public Boolean getCountdown() {
    return countdown;
  }

  public void setCountdown(Boolean countdown) {
    this.countdown = countdown;
  }


  public Player countdownAt(OffsetDateTime countdownAt) {
    this.countdownAt = countdownAt;
    return this;
  }

  /**
   * The date and time that the event starts, used by the countdown clock. Enter &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC.
   * @return countdownAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCountdownAt() {
    return countdownAt;
  }

  public void setCountdownAt(OffsetDateTime countdownAt) {
    this.countdownAt = countdownAt;
  }


  public Player createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time that the player was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Player embedCode(String embedCode) {
    this.embedCode = embedCode;
    return this;
  }

  /**
   * The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.
   * @return embedCode
   */
  @javax.annotation.Nullable
  public String getEmbedCode() {
    return embedCode;
  }

  public void setEmbedCode(String embedCode) {
    this.embedCode = embedCode;
  }


  public Player hdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
    return this;
  }

  /**
   * The address that can be used to configure playback of the stream using the Adobe HDS protocol.
   * @return hdsPlaybackUrl
   */
  @javax.annotation.Nullable
  public String getHdsPlaybackUrl() {
    return hdsPlaybackUrl;
  }

  public void setHdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
  }


  public Player hlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
    return this;
  }

  /**
   * The address that can be used to configure playback of the stream using the Apple HLS protocol.
   * @return hlsPlaybackUrl
   */
  @javax.annotation.Nullable
  public String getHlsPlaybackUrl() {
    return hlsPlaybackUrl;
  }

  public void setHlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
  }


  public Player hostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
    return this;
  }

  /**
   * A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, &lt;strong&gt;true&lt;/strong&gt;, creates a hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to not create a hosted web page.
   * @return hostedPage
   */
  @javax.annotation.Nullable
  public Boolean getHostedPage() {
    return hostedPage;
  }

  public void setHostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
  }


  public Player hostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
    return this;
  }

  /**
   * A description that appears on the hosted page below the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageDescription
   */
  @javax.annotation.Nullable
  public String getHostedPageDescription() {
    return hostedPageDescription;
  }

  public void setHostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
  }


  public Player hostedPageLogoImageUrl(String hostedPageLogoImageUrl) {
    this.hostedPageLogoImageUrl = hostedPageLogoImageUrl;
    return this;
  }

  /**
   * The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.
   * @return hostedPageLogoImageUrl
   */
  @javax.annotation.Nullable
  public String getHostedPageLogoImageUrl() {
    return hostedPageLogoImageUrl;
  }

  public void setHostedPageLogoImageUrl(String hostedPageLogoImageUrl) {
    this.hostedPageLogoImageUrl = hostedPageLogoImageUrl;
  }


  public Player hostedPageSharingIcons(String hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
    return this;
  }

  /**
   * Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, &lt;strong&gt;true&lt;/strong&gt;, includes sharing icons on the hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to omit sharing icons.
   * @return hostedPageSharingIcons
   */
  @javax.annotation.Nullable
  public String getHostedPageSharingIcons() {
    return hostedPageSharingIcons;
  }

  public void setHostedPageSharingIcons(String hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
  }


  public Player hostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
    return this;
  }

  /**
   * A title for the page that appears above the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageTitle
   */
  @javax.annotation.Nullable
  public String getHostedPageTitle() {
    return hostedPageTitle;
  }

  public void setHostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
  }


  public Player hostedPageUrl(String hostedPageUrl) {
    this.hostedPageUrl = hostedPageUrl;
    return this;
  }

  /**
   * The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.
   * @return hostedPageUrl
   */
  @javax.annotation.Nullable
  public String getHostedPageUrl() {
    return hostedPageUrl;
  }

  public void setHostedPageUrl(String hostedPageUrl) {
    this.hostedPageUrl = hostedPageUrl;
  }


  public Player id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique alphanumeric string that identifies the player.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Player logoImageUrl(String logoImageUrl) {
    this.logoImageUrl = logoImageUrl;
    return this;
  }

  /**
   * The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.
   * @return logoImageUrl
   */
  @javax.annotation.Nullable
  public String getLogoImageUrl() {
    return logoImageUrl;
  }

  public void setLogoImageUrl(String logoImageUrl) {
    this.logoImageUrl = logoImageUrl;
  }


  public Player logoPosition(String logoPosition) {
    this.logoPosition = logoPosition;
    return this;
  }

  /**
   * The corner of the player in which you want the player logo to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   * @return logoPosition
   */
  @javax.annotation.Nullable
  public String getLogoPosition() {
    return logoPosition;
  }

  public void setLogoPosition(String logoPosition) {
    this.logoPosition = logoPosition;
  }


  public Player responsive(Boolean responsive) {
    this.responsive = responsive;
    return this;
  }

  /**
   * A player whose size adjusts according to the device on which it&#39;s being viewed. If &lt;strong&gt;true&lt;/strong&gt;, creates a responsive player. If &lt;strong&gt;false&lt;/strong&gt;, specify a &lt;strong&gt;width&lt;/strong&gt;.
   * @return responsive
   */
  @javax.annotation.Nullable
  public Boolean getResponsive() {
    return responsive;
  }

  public void setResponsive(Boolean responsive) {
    this.responsive = responsive;
  }


  public Player transcoderId(String transcoderId) {
    this.transcoderId = transcoderId;
    return this;
  }

  /**
   * The unique alphanumeric string that identifies the transcoder.
   * @return transcoderId
   */
  @javax.annotation.Nullable
  public String getTranscoderId() {
    return transcoderId;
  }

  public void setTranscoderId(String transcoderId) {
    this.transcoderId = transcoderId;
  }


  public Player type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The player you want to use. Valid values are &lt;strong&gt;original_html5&lt;/strong&gt;, which provides HTML5 playback and falls back to Flash on older browsers, and &lt;strong&gt;wowza_player&lt;/strong&gt;, which provides HTML5 playback over Apple HLS. &lt;strong&gt;wowza_player&lt;/strong&gt; requires that &lt;em&gt;target_delivery_protocol&lt;/em&gt; be &lt;strong&gt;hls-https&lt;/strong&gt; and &lt;em&gt;closed_caption_type&lt;/em&gt; be &lt;strong&gt;none&lt;/strong&gt;. The default is &lt;strong&gt;original_html5&lt;/strong&gt;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Player updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time that the player was updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Player videoPosterImageUrl(String videoPosterImageUrl) {
    this.videoPosterImageUrl = videoPosterImageUrl;
    return this;
  }

  /**
   * The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.
   * @return videoPosterImageUrl
   */
  @javax.annotation.Nullable
  public String getVideoPosterImageUrl() {
    return videoPosterImageUrl;
  }

  public void setVideoPosterImageUrl(String videoPosterImageUrl) {
    this.videoPosterImageUrl = videoPosterImageUrl;
  }


  public Player width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The width, in pixels, of a fixed-size player. The default is &lt;strong&gt;640&lt;/strong&gt;.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.countdown, player.countdown) &&
        Objects.equals(this.countdownAt, player.countdownAt) &&
        Objects.equals(this.createdAt, player.createdAt) &&
        Objects.equals(this.embedCode, player.embedCode) &&
        Objects.equals(this.hdsPlaybackUrl, player.hdsPlaybackUrl) &&
        Objects.equals(this.hlsPlaybackUrl, player.hlsPlaybackUrl) &&
        Objects.equals(this.hostedPage, player.hostedPage) &&
        Objects.equals(this.hostedPageDescription, player.hostedPageDescription) &&
        Objects.equals(this.hostedPageLogoImageUrl, player.hostedPageLogoImageUrl) &&
        Objects.equals(this.hostedPageSharingIcons, player.hostedPageSharingIcons) &&
        Objects.equals(this.hostedPageTitle, player.hostedPageTitle) &&
        Objects.equals(this.hostedPageUrl, player.hostedPageUrl) &&
        Objects.equals(this.id, player.id) &&
        Objects.equals(this.logoImageUrl, player.logoImageUrl) &&
        Objects.equals(this.logoPosition, player.logoPosition) &&
        Objects.equals(this.responsive, player.responsive) &&
        Objects.equals(this.transcoderId, player.transcoderId) &&
        Objects.equals(this.type, player.type) &&
        Objects.equals(this.updatedAt, player.updatedAt) &&
        Objects.equals(this.videoPosterImageUrl, player.videoPosterImageUrl) &&
        Objects.equals(this.width, player.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countdown, countdownAt, createdAt, embedCode, hdsPlaybackUrl, hlsPlaybackUrl, hostedPage, hostedPageDescription, hostedPageLogoImageUrl, hostedPageSharingIcons, hostedPageTitle, hostedPageUrl, id, logoImageUrl, logoPosition, responsive, transcoderId, type, updatedAt, videoPosterImageUrl, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    countdown: ").append(toIndentedString(countdown)).append("\n");
    sb.append("    countdownAt: ").append(toIndentedString(countdownAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    embedCode: ").append(toIndentedString(embedCode)).append("\n");
    sb.append("    hdsPlaybackUrl: ").append(toIndentedString(hdsPlaybackUrl)).append("\n");
    sb.append("    hlsPlaybackUrl: ").append(toIndentedString(hlsPlaybackUrl)).append("\n");
    sb.append("    hostedPage: ").append(toIndentedString(hostedPage)).append("\n");
    sb.append("    hostedPageDescription: ").append(toIndentedString(hostedPageDescription)).append("\n");
    sb.append("    hostedPageLogoImageUrl: ").append(toIndentedString(hostedPageLogoImageUrl)).append("\n");
    sb.append("    hostedPageSharingIcons: ").append(toIndentedString(hostedPageSharingIcons)).append("\n");
    sb.append("    hostedPageTitle: ").append(toIndentedString(hostedPageTitle)).append("\n");
    sb.append("    hostedPageUrl: ").append(toIndentedString(hostedPageUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logoImageUrl: ").append(toIndentedString(logoImageUrl)).append("\n");
    sb.append("    logoPosition: ").append(toIndentedString(logoPosition)).append("\n");
    sb.append("    responsive: ").append(toIndentedString(responsive)).append("\n");
    sb.append("    transcoderId: ").append(toIndentedString(transcoderId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    videoPosterImageUrl: ").append(toIndentedString(videoPosterImageUrl)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countdown");
    openapiFields.add("countdown_at");
    openapiFields.add("created_at");
    openapiFields.add("embed_code");
    openapiFields.add("hds_playback_url");
    openapiFields.add("hls_playback_url");
    openapiFields.add("hosted_page");
    openapiFields.add("hosted_page_description");
    openapiFields.add("hosted_page_logo_image_url");
    openapiFields.add("hosted_page_sharing_icons");
    openapiFields.add("hosted_page_title");
    openapiFields.add("hosted_page_url");
    openapiFields.add("id");
    openapiFields.add("logo_image_url");
    openapiFields.add("logo_position");
    openapiFields.add("responsive");
    openapiFields.add("transcoder_id");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("video_poster_image_url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("embed_code") != null && !jsonObj.get("embed_code").isJsonNull()) && !jsonObj.get("embed_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embed_code").toString()));
      }
      if ((jsonObj.get("hds_playback_url") != null && !jsonObj.get("hds_playback_url").isJsonNull()) && !jsonObj.get("hds_playback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hds_playback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hds_playback_url").toString()));
      }
      if ((jsonObj.get("hls_playback_url") != null && !jsonObj.get("hls_playback_url").isJsonNull()) && !jsonObj.get("hls_playback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hls_playback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hls_playback_url").toString()));
      }
      if ((jsonObj.get("hosted_page_description") != null && !jsonObj.get("hosted_page_description").isJsonNull()) && !jsonObj.get("hosted_page_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_description").toString()));
      }
      if ((jsonObj.get("hosted_page_logo_image_url") != null && !jsonObj.get("hosted_page_logo_image_url").isJsonNull()) && !jsonObj.get("hosted_page_logo_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_logo_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_logo_image_url").toString()));
      }
      if ((jsonObj.get("hosted_page_sharing_icons") != null && !jsonObj.get("hosted_page_sharing_icons").isJsonNull()) && !jsonObj.get("hosted_page_sharing_icons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_sharing_icons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_sharing_icons").toString()));
      }
      if ((jsonObj.get("hosted_page_title") != null && !jsonObj.get("hosted_page_title").isJsonNull()) && !jsonObj.get("hosted_page_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_title").toString()));
      }
      if ((jsonObj.get("hosted_page_url") != null && !jsonObj.get("hosted_page_url").isJsonNull()) && !jsonObj.get("hosted_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosted_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosted_page_url").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logo_image_url") != null && !jsonObj.get("logo_image_url").isJsonNull()) && !jsonObj.get("logo_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_image_url").toString()));
      }
      if ((jsonObj.get("logo_position") != null && !jsonObj.get("logo_position").isJsonNull()) && !jsonObj.get("logo_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_position").toString()));
      }
      if ((jsonObj.get("transcoder_id") != null && !jsonObj.get("transcoder_id").isJsonNull()) && !jsonObj.get("transcoder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcoder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcoder_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("video_poster_image_url") != null && !jsonObj.get("video_poster_image_url").isJsonNull()) && !jsonObj.get("video_poster_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_poster_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_poster_image_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

