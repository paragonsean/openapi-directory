/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Output;
import org.openapitools.client.model.PlaybackUrl1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Transcoder
 */
public class TranscoderTest {
    private final Transcoder model = new Transcoder();

    /**
     * Model tests for Transcoder
     */
    @Test
    public void testTranscoder() {
        // TODO: test Transcoder
    }

    /**
     * Test the property 'applicationName'
     */
    @Test
    public void applicationNameTest() {
        // TODO: test applicationName
    }

    /**
     * Test the property 'billingMode'
     */
    @Test
    public void billingModeTest() {
        // TODO: test billingMode
    }

    /**
     * Test the property 'broadcastLocation'
     */
    @Test
    public void broadcastLocationTest() {
        // TODO: test broadcastLocation
    }

    /**
     * Test the property 'bufferSize'
     */
    @Test
    public void bufferSizeTest() {
        // TODO: test bufferSize
    }

    /**
     * Test the property 'closedCaptionType'
     */
    @Test
    public void closedCaptionTypeTest() {
        // TODO: test closedCaptionType
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'deliveryMethod'
     */
    @Test
    public void deliveryMethodTest() {
        // TODO: test deliveryMethod
    }

    /**
     * Test the property 'deliveryProtocols'
     */
    @Test
    public void deliveryProtocolsTest() {
        // TODO: test deliveryProtocols
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'directPlaybackUrls'
     */
    @Test
    public void directPlaybackUrlsTest() {
        // TODO: test directPlaybackUrls
    }

    /**
     * Test the property 'disableAuthentication'
     */
    @Test
    public void disableAuthenticationTest() {
        // TODO: test disableAuthentication
    }

    /**
     * Test the property 'domainName'
     */
    @Test
    public void domainNameTest() {
        // TODO: test domainName
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'idleTimeout'
     */
    @Test
    public void idleTimeoutTest() {
        // TODO: test idleTimeout
    }

    /**
     * Test the property 'lowLatency'
     */
    @Test
    public void lowLatencyTest() {
        // TODO: test lowLatency
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'outputs'
     */
    @Test
    public void outputsTest() {
        // TODO: test outputs
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        // TODO: test password
    }

    /**
     * Test the property 'playMaximumConnections'
     */
    @Test
    public void playMaximumConnectionsTest() {
        // TODO: test playMaximumConnections
    }

    /**
     * Test the property 'protocol'
     */
    @Test
    public void protocolTest() {
        // TODO: test protocol
    }

    /**
     * Test the property 'recording'
     */
    @Test
    public void recordingTest() {
        // TODO: test recording
    }

    /**
     * Test the property 'sourcePort'
     */
    @Test
    public void sourcePortTest() {
        // TODO: test sourcePort
    }

    /**
     * Test the property 'sourceUrl'
     */
    @Test
    public void sourceUrlTest() {
        // TODO: test sourceUrl
    }

    /**
     * Test the property 'streamExtension'
     */
    @Test
    public void streamExtensionTest() {
        // TODO: test streamExtension
    }

    /**
     * Test the property 'streamName'
     */
    @Test
    public void streamNameTest() {
        // TODO: test streamName
    }

    /**
     * Test the property 'streamSmoother'
     */
    @Test
    public void streamSmootherTest() {
        // TODO: test streamSmoother
    }

    /**
     * Test the property 'streamSourceId'
     */
    @Test
    public void streamSourceIdTest() {
        // TODO: test streamSourceId
    }

    /**
     * Test the property 'suppressStreamTargetStart'
     */
    @Test
    public void suppressStreamTargetStartTest() {
        // TODO: test suppressStreamTargetStart
    }

    /**
     * Test the property 'transcoderType'
     */
    @Test
    public void transcoderTypeTest() {
        // TODO: test transcoderType
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        // TODO: test username
    }

    /**
     * Test the property 'videoFallback'
     */
    @Test
    public void videoFallbackTest() {
        // TODO: test videoFallback
    }

    /**
     * Test the property 'watermark'
     */
    @Test
    public void watermarkTest() {
        // TODO: test watermark
    }

    /**
     * Test the property 'watermarkHeight'
     */
    @Test
    public void watermarkHeightTest() {
        // TODO: test watermarkHeight
    }

    /**
     * Test the property 'watermarkImageUrl'
     */
    @Test
    public void watermarkImageUrlTest() {
        // TODO: test watermarkImageUrl
    }

    /**
     * Test the property 'watermarkOpacity'
     */
    @Test
    public void watermarkOpacityTest() {
        // TODO: test watermarkOpacity
    }

    /**
     * Test the property 'watermarkPosition'
     */
    @Test
    public void watermarkPositionTest() {
        // TODO: test watermarkPosition
    }

    /**
     * Test the property 'watermarkWidth'
     */
    @Test
    public void watermarkWidthTest() {
        // TODO: test watermarkWidth
    }

}
