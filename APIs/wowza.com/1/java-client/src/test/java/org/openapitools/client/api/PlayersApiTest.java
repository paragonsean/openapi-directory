/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreatePlayerUrl200Response;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.Error403;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error410;
import org.openapitools.client.model.Error422;
import org.openapitools.client.model.PlayerUpdateInput;
import org.openapitools.client.model.Players;
import org.openapitools.client.model.RequestPlayerRebuild200Response;
import org.openapitools.client.model.ShowPlayer200Response;
import org.openapitools.client.model.ShowPlayerState200Response;
import org.openapitools.client.model.UrlCreateInput;
import org.openapitools.client.model.UrlUpdateInput;
import org.openapitools.client.model.Urls;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayersApi
 */
@Disabled
public class PlayersApiTest {

    private final PlayersApi api = new PlayersApi();

    /**
     * Create a player URL
     *
     * This operation creates a new player URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlayerUrlTest() throws ApiException {
        String playerId = null;
        UrlCreateInput url = null;
        CreatePlayerUrl200Response response = api.createPlayerUrl(playerId, url);
        // TODO: test validations
    }

    /**
     * Delete a player URL
     *
     * This operation deletes a player URL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlayerUrlTest() throws ApiException {
        String playerId = null;
        String id = null;
        api.deletePlayerUrl(playerId, id);
        // TODO: test validations
    }

    /**
     * Fetch all player URLs
     *
     * This operation shows the details of all player URLs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlayerUrlsTest() throws ApiException {
        String playerId = null;
        Urls response = api.listPlayerUrls(playerId);
        // TODO: test validations
    }

    /**
     * Fetch all players
     *
     * This operation shows the details of all of your players.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlayersTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Players response = api.listPlayers(page, perPage);
        // TODO: test validations
    }

    /**
     * Rebuild player code
     *
     * This operation rebuilds the player with the current configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPlayerRebuildTest() throws ApiException {
        String id = null;
        RequestPlayerRebuild200Response response = api.requestPlayerRebuild(id);
        // TODO: test validations
    }

    /**
     * Fetch a player
     *
     * This operation shows details of a specific player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showPlayerTest() throws ApiException {
        String id = null;
        ShowPlayer200Response response = api.showPlayer(id);
        // TODO: test validations
    }

    /**
     * Fetch the state of a player
     *
     * This operation shows the current state of a player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showPlayerStateTest() throws ApiException {
        String id = null;
        ShowPlayerState200Response response = api.showPlayerState(id);
        // TODO: test validations
    }

    /**
     * Fetch a player URL
     *
     * This operation shows the details of a player URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showPlayerUrlTest() throws ApiException {
        String playerId = null;
        String id = null;
        CreatePlayerUrl200Response response = api.showPlayerUrl(playerId, id);
        // TODO: test validations
    }

    /**
     * Update a player
     *
     * This operation updates a player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlayerTest() throws ApiException {
        String id = null;
        PlayerUpdateInput player = null;
        ShowPlayer200Response response = api.updatePlayer(id, player);
        // TODO: test validations
    }

    /**
     * Update a player URL
     *
     * This operation updates a player URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlayerUrlTest() throws ApiException {
        String playerId = null;
        String id = null;
        UrlUpdateInput url = null;
        CreatePlayerUrl200Response response = api.updatePlayerUrl(playerId, id, url);
        // TODO: test validations
    }

}
