/*
 * Wowza Streaming Cloud REST API Reference Documentation
 *  # About the REST API  The Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.  The Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS. CORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.  In order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits). # About this documentation This reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/). It allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.  For more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).  # Query requirements The Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.  ## JSON The Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.  Responses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.  ## Authentication Requests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.  Use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):  ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]' ```  <!-- ReDoc-Inject: <security-definitions> -->  ## Version The Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint: ``` https://api.cloud.wowza.com/api/v1/live_streams ``` ## Example query Here is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information: ```bash curl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'   -H 'Content-Type: application/json' -X POST -d '{     \"live_stream\": {       \"name\": \"My live Stream\",       \"...\": \"...\"     }   }' https://api.cloud.wowza.com/api/v1/live_streams ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateStreamTarget200Response;
import org.openapitools.client.model.CreateStreamTargetProperty200Response;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.Error403;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error410;
import org.openapitools.client.model.Error422;
import org.openapitools.client.model.GeoblockCreateInput;
import org.openapitools.client.model.GeoblockUpdateInput;
import org.openapitools.client.model.RegenerateConnectionCodeStreamTarget200Response;
import org.openapitools.client.model.ShowStreamTargetGeoblock200Response;
import org.openapitools.client.model.ShowStreamTargetMetricsCurrent200Response;
import org.openapitools.client.model.ShowStreamTargetMetricsHistoric200Response;
import org.openapitools.client.model.ShowStreamTargetTokenAuth200Response;
import org.openapitools.client.model.StreamTargetCreateInput;
import org.openapitools.client.model.StreamTargetProperties;
import org.openapitools.client.model.StreamTargetPropertyCreateInput;
import org.openapitools.client.model.StreamTargetUpdateInput;
import org.openapitools.client.model.StreamTargets;
import org.openapitools.client.model.TokenAuthCreateInput;
import org.openapitools.client.model.TokenAuthUpdateInput;
import org.openapitools.client.model.WowzaStreamTargetInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamTargetsApi
 */
@Disabled
public class StreamTargetsApiTest {

    private final StreamTargetsApi api = new StreamTargetsApi();

    /**
     * Deprecated operation
     *
     * POST /stream_targets/add/ is deprecated. To add a stream target, use POST /stream_targets instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStreamTargetTest() throws ApiException {
        WowzaStreamTargetInput streamTarget = null;
        CreateStreamTarget200Response response = api.addStreamTarget(streamTarget);
        // TODO: test validations
    }

    /**
     * Create a stream target
     *
     * This operation creates a stream target. There are three types of targets that you can create: &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; for an an external, third-party destination; &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; for a Wowza CDN target; or &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt; for an ultra low latency Wowza CDN target. The availability of many parameters depends on the type of target you create.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamTargetTest() throws ApiException {
        StreamTargetCreateInput streamTarget = null;
        CreateStreamTarget200Response response = api.createStreamTarget(streamTarget);
        // TODO: test validations
    }

    /**
     * Create geo-blocking for a stream target
     *
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked. For more information see the technical article [How to geo-block stream targets by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamTargetGeoblockTest() throws ApiException {
        String streamTargetId = null;
        GeoblockCreateInput geoblock = null;
        ShowStreamTargetGeoblock200Response response = api.createStreamTargetGeoblock(streamTargetId, geoblock);
        // TODO: test validations
    }

    /**
     * Create a property for a stream target
     *
     * This operation creates a property for a stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see the technical article [How to set advanced properties by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamTargetPropertyTest() throws ApiException {
        String streamTargetId = null;
        StreamTargetPropertyCreateInput property = null;
        CreateStreamTargetProperty200Response response = api.createStreamTargetProperty(streamTargetId, property);
        // TODO: test validations
    }

    /**
     * Create token authorization for a stream target
     *
     * This operation creates token authorization for a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization. For more information see the technical article [How to protect stream targets with token authorization by using the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamTargetTokenAuthTest() throws ApiException {
        String streamTargetId = null;
        TokenAuthCreateInput tokenAuth = null;
        ShowStreamTargetTokenAuth200Response response = api.createStreamTargetTokenAuth(streamTargetId, tokenAuth);
        // TODO: test validations
    }

    /**
     * Delete a stream target
     *
     * This operation deletes a stream target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamTargetTest() throws ApiException {
        String id = null;
        api.deleteStreamTarget(id);
        // TODO: test validations
    }

    /**
     * Delete a stream target property
     *
     * This operation removes a property from a stream target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamTargetPropertyTest() throws ApiException {
        String streamTargetId = null;
        String id = null;
        api.deleteStreamTargetProperty(streamTargetId, id);
        // TODO: test validations
    }

    /**
     * Fetch all properties of a stream target
     *
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamTargetPropertiesTest() throws ApiException {
        String streamTargetId = null;
        StreamTargetProperties response = api.listStreamTargetProperties(streamTargetId);
        // TODO: test validations
    }

    /**
     * Fetch all stream targets
     *
     * This operation lists the details of all of your stream targets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamTargetsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        StreamTargets response = api.listStreamTargets(page, perPage);
        // TODO: test validations
    }

    /**
     * Regenerate the connection code for a stream target
     *
     * This operation regenerates the connection code of a stream target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void regenerateConnectionCodeStreamTargetTest() throws ApiException {
        String id = null;
        RegenerateConnectionCodeStreamTarget200Response response = api.regenerateConnectionCodeStreamTarget(id);
        // TODO: test validations
    }

    /**
     * Fetch a stream target
     *
     * This operation shows details of a specific stream target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showStreamTargetTest() throws ApiException {
        String id = null;
        CreateStreamTarget200Response response = api.showStreamTarget(id);
        // TODO: test validations
    }

    /**
     * Fetch geo-blocking for a stream target
     *
     * This operation shows the details of geo-blocking applied to a specific stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showStreamTargetGeoblockTest() throws ApiException {
        String streamTargetId = null;
        ShowStreamTargetGeoblock200Response response = api.showStreamTargetGeoblock(streamTargetId);
        // TODO: test validations
    }

    /**
     * Fetch current health metrics for an active Wowza ultra low latency stream target
     *
     * This operation returns a snapshot of the current connection and throughput details for an active target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;. The interval for current metrics is 30 seconds from the moment of the query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showStreamTargetMetricsCurrentTest() throws ApiException {
        String id = null;
        ShowStreamTargetMetricsCurrent200Response response = api.showStreamTargetMetricsCurrent(id);
        // TODO: test validations
    }

    /**
     * Fetch historic health metrics for a Wowza ultra low latency stream target
     *
     * This operation shows historic connection and throughput details for target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;UltraLowLatencyStreamTarget&lt;/strong&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showStreamTargetMetricsHistoricTest() throws ApiException {
        String id = null;
        String from = null;
        String to = null;
        String interval = null;
        ShowStreamTargetMetricsHistoric200Response response = api.showStreamTargetMetricsHistoric(id, from, to, interval);
        // TODO: test validations
    }

    /**
     * Fetch a property of a stream target
     *
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a &lt;strong&gt;CustomStreamTarget&lt;/strong&gt; or &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showStreamTargetPropertyTest() throws ApiException {
        String streamTargetId = null;
        String id = null;
        CreateStreamTargetProperty200Response response = api.showStreamTargetProperty(streamTargetId, id);
        // TODO: test validations
    }

    /**
     * Fetch token authorization for a stream target
     *
     * This operation shows the details of the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showStreamTargetTokenAuthTest() throws ApiException {
        String streamTargetId = null;
        ShowStreamTargetTokenAuth200Response response = api.showStreamTargetTokenAuth(streamTargetId);
        // TODO: test validations
    }

    /**
     * Update a stream target
     *
     * This operation updates a stream target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamTargetTest() throws ApiException {
        String id = null;
        StreamTargetUpdateInput streamTarget = null;
        CreateStreamTarget200Response response = api.updateStreamTarget(id, streamTarget);
        // TODO: test validations
    }

    /**
     * Update geo-blocking for a stream target
     *
     * This operation updates the geo-blocking applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can be geo-blocked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamTargetGeoblockTest() throws ApiException {
        String streamTargetId = null;
        GeoblockUpdateInput geoblock = null;
        ShowStreamTargetGeoblock200Response response = api.updateStreamTargetGeoblock(streamTargetId, geoblock);
        // TODO: test validations
    }

    /**
     * Update token authorization for a stream target
     *
     * This operation updates the token authorization applied to a stream target. Only stream targets whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; can use token authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamTargetTokenAuthTest() throws ApiException {
        String streamTargetId = null;
        TokenAuthUpdateInput tokenAuth = null;
        ShowStreamTargetTokenAuth200Response response = api.updateStreamTargetTokenAuth(streamTargetId, tokenAuth);
        // TODO: test validations
    }

}
