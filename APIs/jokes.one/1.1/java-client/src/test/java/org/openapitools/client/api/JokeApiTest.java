/*
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.JokeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JokeApi
 */
@Disabled
public class JokeApiTest {

    private final JokeApi api = new JokeApi();

    /**
     * Gets a list of &#x60;Joke&#x60; Categories, based on a query term. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeCategoriesSearchGetTest() throws ApiException {
        String query = null;
        Integer start = null;
        api.jokeCategoriesSearchGet(query, start);
        // TODO: test validations
    }

    /**
     * Delete a joke. The user needs to be the owner of the joke to be able to delete it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeDeleteTest() throws ApiException {
        String id = null;
        api.jokeDelete(id);
        // TODO: test validations
    }

    /**
     * Gets a &#x60;Joke&#x60; with a given &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeGetTest() throws ApiException {
        String id = null;
        JokeResponse response = api.jokeGet(id);
        // TODO: test validations
    }

    /**
     * Get the list of jokes in your private collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeListGetTest() throws ApiException {
        Integer start = null;
        api.jokeListGet(start);
        // TODO: test validations
    }

    /**
     * Update a joke
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokePatchTest() throws ApiException {
        String id = null;
        String title = null;
        String text = null;
        String author = null;
        String tags = null;
        api.jokePatch(id, title, text, author, tags);
        // TODO: test validations
    }

    /**
     * Add a new joke to your private collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokePutTest() throws ApiException {
        String title = null;
        String text = null;
        String author = null;
        String tags = null;
        api.jokePut(title, text, author, tags);
        // TODO: test validations
    }

    /**
     * Gets a &#x60;Random Joke&#x60;. When you are in a hurry this is what you call to get a random famous joke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeRandomGetTest() throws ApiException {
        JokeResponse response = api.jokeRandomGet();
        // TODO: test validations
    }

    /**
     * Search for a &#x60;Joke&#x60; in Jokes One platform. Optional &#x60;category&#x60; , &#x60;author&#x60;, &#x60;minlength&#x60;, &#x60;maxlength&#x60; params determines the filters applied while searching for the joke. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeSearchGetTest() throws ApiException {
        String category = null;
        String query = null;
        Integer minlength = null;
        Integer maxlength = null;
        String author = null;
        Boolean _private = null;
        JokeResponse response = api.jokeSearchGet(category, query, minlength, maxlength, author, _private);
        // TODO: test validations
    }

    /**
     * Add a tag to a given Joke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeTagsAddPostTest() throws ApiException {
        String id = null;
        String tags = null;
        api.jokeTagsAddPost(id, tags);
        // TODO: test validations
    }

    /**
     * Remove a tag from a given joke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jokeTagsRemovePostTest() throws ApiException {
        String id = null;
        String tags = null;
        api.jokeTagsRemovePost(id, tags);
        // TODO: test validations
    }

}
