/*
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Joke;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JokeResponseContents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:14.365132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JokeResponseContents {
  public static final String SERIALIZED_NAME_JOKES = "jokes";
  @SerializedName(SERIALIZED_NAME_JOKES)
  private List<Joke> jokes = new ArrayList<>();

  public JokeResponseContents() {
  }

  public JokeResponseContents jokes(List<Joke> jokes) {
    this.jokes = jokes;
    return this;
  }

  public JokeResponseContents addJokesItem(Joke jokesItem) {
    if (this.jokes == null) {
      this.jokes = new ArrayList<>();
    }
    this.jokes.add(jokesItem);
    return this;
  }

  /**
   * List of jokes
   * @return jokes
   */
  @javax.annotation.Nullable
  public List<Joke> getJokes() {
    return jokes;
  }

  public void setJokes(List<Joke> jokes) {
    this.jokes = jokes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JokeResponseContents jokeResponseContents = (JokeResponseContents) o;
    return Objects.equals(this.jokes, jokeResponseContents.jokes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jokes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JokeResponseContents {\n");
    sb.append("    jokes: ").append(toIndentedString(jokes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jokes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JokeResponseContents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JokeResponseContents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JokeResponseContents is not found in the empty JSON string", JokeResponseContents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JokeResponseContents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JokeResponseContents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("jokes") != null && !jsonObj.get("jokes").isJsonNull()) {
        JsonArray jsonArrayjokes = jsonObj.getAsJsonArray("jokes");
        if (jsonArrayjokes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jokes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jokes` to be an array in the JSON string but got `%s`", jsonObj.get("jokes").toString()));
          }

          // validate the optional field `jokes` (array)
          for (int i = 0; i < jsonArrayjokes.size(); i++) {
            Joke.validateJsonElement(jsonArrayjokes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JokeResponseContents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JokeResponseContents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JokeResponseContents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JokeResponseContents.class));

       return (TypeAdapter<T>) new TypeAdapter<JokeResponseContents>() {
           @Override
           public void write(JsonWriter out, JokeResponseContents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JokeResponseContents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JokeResponseContents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JokeResponseContents
   * @throws IOException if the JSON string is invalid with respect to JokeResponseContents
   */
  public static JokeResponseContents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JokeResponseContents.class);
  }

  /**
   * Convert an instance of JokeResponseContents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

