/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JokeResponse from '../model/JokeResponse';

/**
* Joke service.
* @module api/JokeApi
* @version 1.1
*/
export default class JokeApi {

    /**
    * Constructs a new JokeApi. 
    * @alias module:api/JokeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jokeCategoriesSearchGet operation.
     * @callback module:api/JokeApi~jokeCategoriesSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Joke` Categories, based on a query term. 
     * @param {String} query Search Query
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {module:api/JokeApi~jokeCategoriesSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokeCategoriesSearchGet(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling jokeCategoriesSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-JokesOne-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke/categories/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeDelete operation.
     * @callback module:api/JokeApi~jokeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a joke. The user needs to be the owner of the joke to be able to delete it. 
     * @param {String} id Joke ID
     * @param {module:api/JokeApi~jokeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokeDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jokeDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-JokesOne-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeGet operation.
     * @callback module:api/JokeApi~jokeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JokeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a `Joke` with a given `id`.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Joke ID
     * @param {module:api/JokeApi~jokeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JokeResponse}
     */
    jokeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-JokesOne-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = JokeResponse;
      return this.apiClient.callApi(
        '/joke', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeListGet operation.
     * @callback module:api/JokeApi~jokeListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of jokes in your private collection.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {module:api/JokeApi~jokeListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokeListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokePatch operation.
     * @callback module:api/JokeApi~jokePatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a joke
     * @param {String} id Joke ID
     * @param {Object} opts Optional parameters
     * @param {String} [title] title
     * @param {String} [text] text
     * @param {String} [author] Joke Author
     * @param {String} [tags] Comma Separated tags
     * @param {module:api/JokeApi~jokePatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokePatch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jokePatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'title': opts['title'],
        'text': opts['text'],
        'author': opts['author'],
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokePut operation.
     * @callback module:api/JokeApi~jokePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new joke to your private collection.
     * @param {String} title Joke Title
     * @param {String} text Joke Text
     * @param {Object} opts Optional parameters
     * @param {String} [author] Joke Author
     * @param {String} [tags] Comma Separated tags
     * @param {module:api/JokeApi~jokePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokePut(title, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling jokePut");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling jokePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'title': title,
        'text': text,
        'author': opts['author'],
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeRandomGet operation.
     * @callback module:api/JokeApi~jokeRandomGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JokeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a `Random Joke`. When you are in a hurry this is what you call to get a random famous joke.
     * @param {module:api/JokeApi~jokeRandomGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JokeResponse}
     */
    jokeRandomGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'application/js'];
      let returnType = JokeResponse;
      return this.apiClient.callApi(
        '/joke/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeSearchGet operation.
     * @callback module:api/JokeApi~jokeSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JokeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a `Joke` in Jokes One platform. Optional `category` , `author`, `minlength`, `maxlength` params determines the filters applied while searching for the joke. 
     * @param {Object} opts Optional parameters
     * @param {String} [category] Joke Category
     * @param {String} [query] keyword to search for in the joke
     * @param {Number} [minlength = 100)] Joke minimum Length
     * @param {Number} [maxlength = 300)] Joke maximum Length
     * @param {String} [author] Joke Author
     * @param {Boolean} [_private = false)] Should search private collection? Default searches public collection.
     * @param {module:api/JokeApi~jokeSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JokeResponse}
     */
    jokeSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'query': opts['query'],
        'minlength': opts['minlength'],
        'maxlength': opts['maxlength'],
        'author': opts['author'],
        'private': opts['_private']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-JokesOne-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = JokeResponse;
      return this.apiClient.callApi(
        '/joke/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeTagsAddPost operation.
     * @callback module:api/JokeApi~jokeTagsAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a given Joke.
     * @param {String} id Joke ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/JokeApi~jokeTagsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokeTagsAddPost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jokeTagsAddPost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling jokeTagsAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke/tags/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jokeTagsRemovePost operation.
     * @callback module:api/JokeApi~jokeTagsRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a given joke.
     * @param {String} id Joke ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/JokeApi~jokeTagsRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jokeTagsRemovePost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jokeTagsRemovePost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling jokeTagsRemovePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/joke/tags/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
