/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewJoke model module.
 * @module model/NewJoke
 * @version 1.1
 */
class NewJoke {
    /**
     * Constructs a new <code>NewJoke</code>.
     * @alias module:model/NewJoke
     * @param joke {String} The Joke.
     * @param title {String} Title of the Joke.
     */
    constructor(joke, title) { 
        
        NewJoke.initialize(this, joke, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, joke, title) { 
        obj['joke'] = joke;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>NewJoke</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewJoke} obj Optional instance to populate.
     * @return {module:model/NewJoke} The populated <code>NewJoke</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewJoke();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('joke')) {
                obj['joke'] = ApiClient.convertToType(data['joke'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewJoke</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewJoke</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewJoke.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['joke'] && !(typeof data['joke'] === 'string' || data['joke'] instanceof String)) {
            throw new Error("Expected the field `joke` to be a primitive type in the JSON string but got " + data['joke']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

NewJoke.RequiredProperties = ["joke", "title"];

/**
 * Author name of joke.
 * @member {String} author
 */
NewJoke.prototype['author'] = undefined;

/**
 * The Joke.
 * @member {String} joke
 */
NewJoke.prototype['joke'] = undefined;

/**
 * Array of tags/categories.
 * @member {Array.<String>} tags
 */
NewJoke.prototype['tags'] = undefined;

/**
 * Title of the Joke.
 * @member {String} title
 */
NewJoke.prototype['title'] = undefined;






export default NewJoke;

