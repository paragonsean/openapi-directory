/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JokesOneApi);
  }
}(this, function(expect, JokesOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JokesOneApi.JokeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JokeApi', function() {
    describe('jokeCategoriesSearchGet', function() {
      it('should call jokeCategoriesSearchGet successfully', function(done) {
        //uncomment below and update the code to test jokeCategoriesSearchGet
        //instance.jokeCategoriesSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeDelete', function() {
      it('should call jokeDelete successfully', function(done) {
        //uncomment below and update the code to test jokeDelete
        //instance.jokeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeGet', function() {
      it('should call jokeGet successfully', function(done) {
        //uncomment below and update the code to test jokeGet
        //instance.jokeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeListGet', function() {
      it('should call jokeListGet successfully', function(done) {
        //uncomment below and update the code to test jokeListGet
        //instance.jokeListGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokePatch', function() {
      it('should call jokePatch successfully', function(done) {
        //uncomment below and update the code to test jokePatch
        //instance.jokePatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokePut', function() {
      it('should call jokePut successfully', function(done) {
        //uncomment below and update the code to test jokePut
        //instance.jokePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeRandomGet', function() {
      it('should call jokeRandomGet successfully', function(done) {
        //uncomment below and update the code to test jokeRandomGet
        //instance.jokeRandomGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeSearchGet', function() {
      it('should call jokeSearchGet successfully', function(done) {
        //uncomment below and update the code to test jokeSearchGet
        //instance.jokeSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeTagsAddPost', function() {
      it('should call jokeTagsAddPost successfully', function(done) {
        //uncomment below and update the code to test jokeTagsAddPost
        //instance.jokeTagsAddPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jokeTagsRemovePost', function() {
      it('should call jokeTagsRemovePost successfully', function(done) {
        //uncomment below and update the code to test jokeTagsRemovePost
        //instance.jokeTagsRemovePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
