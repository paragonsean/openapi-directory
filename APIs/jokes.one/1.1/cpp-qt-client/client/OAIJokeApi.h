/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJokeApi_H
#define OAI_OAIJokeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJokeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJokeApi : public QObject {
    Q_OBJECT

public:
    OAIJokeApi(const int timeOut = 0);
    ~OAIJokeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [required]
    * @param[in]  start qint32 [optional]
    */
    virtual void jokeCategoriesSearchGet(const QString &query, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void jokeDelete(const QString &id);

    /**
    * @param[in]  id QString [optional]
    */
    virtual void jokeGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    */
    virtual void jokeListGet(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  title QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  tags QString [optional]
    */
    virtual void jokePatch(const QString &id, const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  title QString [required]
    * @param[in]  text QString [required]
    * @param[in]  author QString [optional]
    * @param[in]  tags QString [optional]
    */
    virtual void jokePut(const QString &title, const QString &text, const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>());


    virtual void jokeRandomGet();

    /**
    * @param[in]  category QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  minlength qint32 [optional]
    * @param[in]  maxlength qint32 [optional]
    * @param[in]  author QString [optional]
    * @param[in]  r_private bool [optional]
    */
    virtual void jokeSearchGet(const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &minlength = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &maxlength = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void jokeTagsAddPost(const QString &id, const QString &tags);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void jokeTagsRemovePost(const QString &id, const QString &tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jokeCategoriesSearchGetCallback(OAIHttpRequestWorker *worker);
    void jokeDeleteCallback(OAIHttpRequestWorker *worker);
    void jokeGetCallback(OAIHttpRequestWorker *worker);
    void jokeListGetCallback(OAIHttpRequestWorker *worker);
    void jokePatchCallback(OAIHttpRequestWorker *worker);
    void jokePutCallback(OAIHttpRequestWorker *worker);
    void jokeRandomGetCallback(OAIHttpRequestWorker *worker);
    void jokeSearchGetCallback(OAIHttpRequestWorker *worker);
    void jokeTagsAddPostCallback(OAIHttpRequestWorker *worker);
    void jokeTagsRemovePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jokeCategoriesSearchGetSignal();
    void jokeDeleteSignal();
    void jokeGetSignal(OAIJokeResponse summary);
    void jokeListGetSignal();
    void jokePatchSignal();
    void jokePutSignal();
    void jokeRandomGetSignal(OAIJokeResponse summary);
    void jokeSearchGetSignal(OAIJokeResponse summary);
    void jokeTagsAddPostSignal();
    void jokeTagsRemovePostSignal();


    void jokeCategoriesSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void jokeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jokeGetSignalFull(OAIHttpRequestWorker *worker, OAIJokeResponse summary);
    void jokeListGetSignalFull(OAIHttpRequestWorker *worker);
    void jokePatchSignalFull(OAIHttpRequestWorker *worker);
    void jokePutSignalFull(OAIHttpRequestWorker *worker);
    void jokeRandomGetSignalFull(OAIHttpRequestWorker *worker, OAIJokeResponse summary);
    void jokeSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIJokeResponse summary);
    void jokeTagsAddPostSignalFull(OAIHttpRequestWorker *worker);
    void jokeTagsRemovePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jokeCategoriesSearchGetSignalError() instead")
    void jokeCategoriesSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokeCategoriesSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeDeleteSignalError() instead")
    void jokeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeGetSignalError() instead")
    void jokeGetSignalE(OAIJokeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeGetSignalError(OAIJokeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeListGetSignalError() instead")
    void jokeListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokeListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokePatchSignalError() instead")
    void jokePatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokePatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokePutSignalError() instead")
    void jokePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeRandomGetSignalError() instead")
    void jokeRandomGetSignalE(OAIJokeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeRandomGetSignalError(OAIJokeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeSearchGetSignalError() instead")
    void jokeSearchGetSignalE(OAIJokeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeSearchGetSignalError(OAIJokeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeTagsAddPostSignalError() instead")
    void jokeTagsAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokeTagsAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeTagsRemovePostSignalError() instead")
    void jokeTagsRemovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jokeTagsRemovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jokeCategoriesSearchGetSignalErrorFull() instead")
    void jokeCategoriesSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeCategoriesSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeDeleteSignalErrorFull() instead")
    void jokeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeGetSignalErrorFull() instead")
    void jokeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeListGetSignalErrorFull() instead")
    void jokeListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokePatchSignalErrorFull() instead")
    void jokePatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokePatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokePutSignalErrorFull() instead")
    void jokePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeRandomGetSignalErrorFull() instead")
    void jokeRandomGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeRandomGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeSearchGetSignalErrorFull() instead")
    void jokeSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeTagsAddPostSignalErrorFull() instead")
    void jokeTagsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeTagsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jokeTagsRemovePostSignalErrorFull() instead")
    void jokeTagsRemovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jokeTagsRemovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
