/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJokeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJokeResponse::OAIJokeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJokeResponse::OAIJokeResponse() {
    this->initializeModel();
}

OAIJokeResponse::~OAIJokeResponse() {}

void OAIJokeResponse::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIJokeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJokeResponse::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIJokeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJokeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contents.isSet()) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

OAIJokeResponse_contents OAIJokeResponse::getContents() const {
    return m_contents;
}
void OAIJokeResponse::setContents(const OAIJokeResponse_contents &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIJokeResponse::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIJokeResponse::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIJokeResponse::getSuccess() const {
    return m_success;
}
void OAIJokeResponse::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIJokeResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAIJokeResponse::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIJokeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJokeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
