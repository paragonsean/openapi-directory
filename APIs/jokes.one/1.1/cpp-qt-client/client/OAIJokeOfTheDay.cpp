/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJokeOfTheDay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJokeOfTheDay::OAIJokeOfTheDay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJokeOfTheDay::OAIJokeOfTheDay() {
    this->initializeModel();
}

OAIJokeOfTheDay::~OAIJokeOfTheDay() {}

void OAIJokeOfTheDay::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_joke_isSet = false;
    m_joke_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;
}

void OAIJokeOfTheDay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJokeOfTheDay::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_joke_isValid = ::OpenAPI::fromJsonValue(m_joke, json[QString("joke")]);
    m_joke_isSet = !json[QString("joke")].isNull() && m_joke_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;
}

QString OAIJokeOfTheDay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJokeOfTheDay::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_joke_isSet) {
        obj.insert(QString("joke"), ::OpenAPI::toJsonValue(m_joke));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    return obj;
}

QString OAIJokeOfTheDay::getAuthor() const {
    return m_author;
}
void OAIJokeOfTheDay::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIJokeOfTheDay::is_author_Set() const{
    return m_author_isSet;
}

bool OAIJokeOfTheDay::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIJokeOfTheDay::getJoke() const {
    return m_joke;
}
void OAIJokeOfTheDay::setJoke(const QString &joke) {
    m_joke = joke;
    m_joke_isSet = true;
}

bool OAIJokeOfTheDay::is_joke_Set() const{
    return m_joke_isSet;
}

bool OAIJokeOfTheDay::is_joke_Valid() const{
    return m_joke_isValid;
}

QList<QString> OAIJokeOfTheDay::getTags() const {
    return m_tags;
}
void OAIJokeOfTheDay::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIJokeOfTheDay::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIJokeOfTheDay::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIJokeOfTheDay::getTitle() const {
    return m_title;
}
void OAIJokeOfTheDay::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIJokeOfTheDay::is_title_Set() const{
    return m_title_isSet;
}

bool OAIJokeOfTheDay::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIJokeOfTheDay::getId() const {
    return m_id;
}
void OAIJokeOfTheDay::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJokeOfTheDay::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJokeOfTheDay::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJokeOfTheDay::getImage() const {
    return m_image;
}
void OAIJokeOfTheDay::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIJokeOfTheDay::is_image_Set() const{
    return m_image_isSet;
}

bool OAIJokeOfTheDay::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIJokeOfTheDay::getLength() const {
    return m_length;
}
void OAIJokeOfTheDay::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIJokeOfTheDay::is_length_Set() const{
    return m_length_isSet;
}

bool OAIJokeOfTheDay::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIJokeOfTheDay::getDate() const {
    return m_date;
}
void OAIJokeOfTheDay::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIJokeOfTheDay::is_date_Set() const{
    return m_date_isSet;
}

bool OAIJokeOfTheDay::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIJokeOfTheDay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJokeOfTheDay::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_joke_isValid && m_title_isValid && m_date_isValid && true;
}

} // namespace OpenAPI
