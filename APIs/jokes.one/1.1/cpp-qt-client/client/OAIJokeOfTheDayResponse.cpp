/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJokeOfTheDayResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJokeOfTheDayResponse::OAIJokeOfTheDayResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJokeOfTheDayResponse::OAIJokeOfTheDayResponse() {
    this->initializeModel();
}

OAIJokeOfTheDayResponse::~OAIJokeOfTheDayResponse() {}

void OAIJokeOfTheDayResponse::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIJokeOfTheDayResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJokeOfTheDayResponse::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIJokeOfTheDayResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJokeOfTheDayResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contents.isSet()) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

OAIJokeOfTheDayResponse_contents OAIJokeOfTheDayResponse::getContents() const {
    return m_contents;
}
void OAIJokeOfTheDayResponse::setContents(const OAIJokeOfTheDayResponse_contents &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIJokeOfTheDayResponse::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIJokeOfTheDayResponse::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIJokeOfTheDayResponse::getSuccess() const {
    return m_success;
}
void OAIJokeOfTheDayResponse::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIJokeOfTheDayResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAIJokeOfTheDayResponse::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIJokeOfTheDayResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJokeOfTheDayResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
