/**
 * Jokes One API
 *  Jokes One API offers a complete feature rich REST API access to its jokes platform.  This is the documentation for the world famous [jokes API](https://jokes.one/api/joke/).  If you are a subscriber and you are trying this from a console add 'X-JokesOne-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://jokes.one/api/joke/.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewJoke.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewJoke::OAINewJoke(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewJoke::OAINewJoke() {
    this->initializeModel();
}

OAINewJoke::~OAINewJoke() {}

void OAINewJoke::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_joke_isSet = false;
    m_joke_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAINewJoke::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewJoke::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_joke_isValid = ::OpenAPI::fromJsonValue(m_joke, json[QString("joke")]);
    m_joke_isSet = !json[QString("joke")].isNull() && m_joke_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAINewJoke::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewJoke::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_joke_isSet) {
        obj.insert(QString("joke"), ::OpenAPI::toJsonValue(m_joke));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAINewJoke::getAuthor() const {
    return m_author;
}
void OAINewJoke::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAINewJoke::is_author_Set() const{
    return m_author_isSet;
}

bool OAINewJoke::is_author_Valid() const{
    return m_author_isValid;
}

QString OAINewJoke::getJoke() const {
    return m_joke;
}
void OAINewJoke::setJoke(const QString &joke) {
    m_joke = joke;
    m_joke_isSet = true;
}

bool OAINewJoke::is_joke_Set() const{
    return m_joke_isSet;
}

bool OAINewJoke::is_joke_Valid() const{
    return m_joke_isValid;
}

QList<QString> OAINewJoke::getTags() const {
    return m_tags;
}
void OAINewJoke::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAINewJoke::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAINewJoke::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAINewJoke::getTitle() const {
    return m_title;
}
void OAINewJoke::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINewJoke::is_title_Set() const{
    return m_title_isSet;
}

bool OAINewJoke::is_title_Valid() const{
    return m_title_isValid;
}

bool OAINewJoke::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewJoke::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_joke_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
