# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Joke(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, joke: str=None, tags: List[str]=None, title: str=None, id: str=None, image: str=None, length: int=None):
        """Joke - a model defined in OpenAPI

        :param author: The author of this Joke.
        :param joke: The joke of this Joke.
        :param tags: The tags of this Joke.
        :param title: The title of this Joke.
        :param id: The id of this Joke.
        :param image: The image of this Joke.
        :param length: The length of this Joke.
        """
        self.openapi_types = {
            'author': str,
            'joke': str,
            'tags': List[str],
            'title': str,
            'id': str,
            'image': str,
            'length': int
        }

        self.attribute_map = {
            'author': 'author',
            'joke': 'joke',
            'tags': 'tags',
            'title': 'title',
            'id': 'id',
            'image': 'image',
            'length': 'length'
        }

        self._author = author
        self._joke = joke
        self._tags = tags
        self._title = title
        self._id = id
        self._image = image
        self._length = length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Joke':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Joke of this Joke.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Joke.

        Author name of joke.

        :return: The author of this Joke.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Joke.

        Author name of joke.

        :param author: The author of this Joke.
        :type author: str
        """

        self._author = author

    @property
    def joke(self):
        """Gets the joke of this Joke.

        The Joke.

        :return: The joke of this Joke.
        :rtype: str
        """
        return self._joke

    @joke.setter
    def joke(self, joke):
        """Sets the joke of this Joke.

        The Joke.

        :param joke: The joke of this Joke.
        :type joke: str
        """
        if joke is None:
            raise ValueError("Invalid value for `joke`, must not be `None`")

        self._joke = joke

    @property
    def tags(self):
        """Gets the tags of this Joke.

        Array of tags/categories.

        :return: The tags of this Joke.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Joke.

        Array of tags/categories.

        :param tags: The tags of this Joke.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Joke.

        Title of the Joke.

        :return: The title of this Joke.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Joke.

        Title of the Joke.

        :param title: The title of this Joke.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def id(self):
        """Gets the id of this Joke.

        Unique identifier representing a specific joke in jokes.one.

        :return: The id of this Joke.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Joke.

        Unique identifier representing a specific joke in jokes.one.

        :param id: The id of this Joke.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Joke.

        Image URL that can be used for background to display this joke.

        :return: The image of this Joke.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Joke.

        Image URL that can be used for background to display this joke.

        :param image: The image of this Joke.
        :type image: str
        """

        self._image = image

    @property
    def length(self):
        """Gets the length of this Joke.

        Length of the joke string.

        :return: The length of this Joke.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Joke.

        Length of the joke string.

        :param length: The length of this Joke.
        :type length: int
        """

        self._length = length
