# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewJoke(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, joke: str=None, tags: List[str]=None, title: str=None):
        """NewJoke - a model defined in OpenAPI

        :param author: The author of this NewJoke.
        :param joke: The joke of this NewJoke.
        :param tags: The tags of this NewJoke.
        :param title: The title of this NewJoke.
        """
        self.openapi_types = {
            'author': str,
            'joke': str,
            'tags': List[str],
            'title': str
        }

        self.attribute_map = {
            'author': 'author',
            'joke': 'joke',
            'tags': 'tags',
            'title': 'title'
        }

        self._author = author
        self._joke = joke
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewJoke':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewJoke of this NewJoke.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this NewJoke.

        Author name of joke.

        :return: The author of this NewJoke.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this NewJoke.

        Author name of joke.

        :param author: The author of this NewJoke.
        :type author: str
        """

        self._author = author

    @property
    def joke(self):
        """Gets the joke of this NewJoke.

        The Joke.

        :return: The joke of this NewJoke.
        :rtype: str
        """
        return self._joke

    @joke.setter
    def joke(self, joke):
        """Sets the joke of this NewJoke.

        The Joke.

        :param joke: The joke of this NewJoke.
        :type joke: str
        """
        if joke is None:
            raise ValueError("Invalid value for `joke`, must not be `None`")

        self._joke = joke

    @property
    def tags(self):
        """Gets the tags of this NewJoke.

        Array of tags/categories.

        :return: The tags of this NewJoke.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NewJoke.

        Array of tags/categories.

        :param tags: The tags of this NewJoke.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this NewJoke.

        Title of the Joke.

        :return: The title of this NewJoke.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewJoke.

        Title of the Joke.

        :param title: The title of this NewJoke.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
