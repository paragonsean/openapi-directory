/**
 * Mtaa API Documentation
 * Mtaa A simple REST API to access Tanzania's location information,With mtaa API you can easily query and integrate all the location in tanzania from region level to streets from your programming language of your your choice
 *
 * The version of the OpenAPI document: 1.0
 * Contact: isaackeinstein@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* NeighborhoodInAStreet service.
* @module api/NeighborhoodInAStreetApi
* @version 1.0
*/
export default class NeighborhoodInAStreetApi {

    /**
    * Constructs a new NeighborhoodInAStreetApi. 
    * @alias module:api/NeighborhoodInAStreetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the neighborhoodInAStreet operation.
     * @callback module:api/NeighborhoodInAStreetApi~neighborhoodInAStreetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all neighborhood in a street
     * Returns all neighborhood in a specified street
     * @param {String} country Country name in lowercase eg( tanzania)
     * @param {String} region Name of the region eg (Mbeya)
     * @param {String} district Name of the District eg (Rungwe)
     * @param {String} ward Name of the Ward eg (Kiwira)
     * @param {String} street Name of the Street eg (Ilundo)
     * @param {module:api/NeighborhoodInAStreetApi~neighborhoodInAStreetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    neighborhoodInAStreet(country, region, district, ward, street, callback) {
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling neighborhoodInAStreet");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling neighborhoodInAStreet");
      }
      // verify the required parameter 'district' is set
      if (district === undefined || district === null) {
        throw new Error("Missing the required parameter 'district' when calling neighborhoodInAStreet");
      }
      // verify the required parameter 'ward' is set
      if (ward === undefined || ward === null) {
        throw new Error("Missing the required parameter 'ward' when calling neighborhoodInAStreet");
      }
      // verify the required parameter 'street' is set
      if (street === undefined || street === null) {
        throw new Error("Missing the required parameter 'street' when calling neighborhoodInAStreet");
      }

      let pathParams = {
        'country': country,
        'region': region,
        'district': district,
        'ward': ward,
        'street': street
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{country}/{region}/{district}/{ward}/{street}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
