/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Reference {
  public static final String SERIALIZED_NAME_CITATION = "citation";
  @SerializedName(SERIALIZED_NAME_CITATION)
  private String citation;

  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_EDITORS = "editors";
  @SerializedName(SERIALIZED_NAME_EDITORS)
  private String editors;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private String issue;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private String pages;

  public static final String SERIALIZED_NAME_PUB_DATE = "pubDate";
  @SerializedName(SERIALIZED_NAME_PUB_DATE)
  private OffsetDateTime pubDate;

  public static final String SERIALIZED_NAME_PUB_STATUS = "pubStatus";
  @SerializedName(SERIALIZED_NAME_PUB_STATUS)
  private String pubStatus;

  public static final String SERIALIZED_NAME_PUBLICATION = "publication";
  @SerializedName(SERIALIZED_NAME_PUBLICATION)
  private String publication;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_PUBLISHER_CITY = "publisherCity";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_CITY)
  private String publisherCity;

  public static final String SERIALIZED_NAME_REF_ABSTRACT = "refAbstract";
  @SerializedName(SERIALIZED_NAME_REF_ABSTRACT)
  private String refAbstract;

  public static final String SERIALIZED_NAME_REFERENCE_TYPE = "referenceType";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TYPE)
  private String referenceType;

  public static final String SERIALIZED_NAME_RGD_ID = "rgdId";
  @SerializedName(SERIALIZED_NAME_RGD_ID)
  private Integer rgdId;

  public static final String SERIALIZED_NAME_SPECIES_TYPE_KEY = "speciesTypeKey";
  @SerializedName(SERIALIZED_NAME_SPECIES_TYPE_KEY)
  private Integer speciesTypeKey;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL_WEB_REFERENCE = "urlWebReference";
  @SerializedName(SERIALIZED_NAME_URL_WEB_REFERENCE)
  private String urlWebReference;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private String volume;

  public Reference() {
  }

  public Reference citation(String citation) {
    this.citation = citation;
    return this;
  }

  /**
   * Get citation
   * @return citation
   */
  @javax.annotation.Nullable
  public String getCitation() {
    return citation;
  }

  public void setCitation(String citation) {
    this.citation = citation;
  }


  public Reference doi(String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * Get doi
   * @return doi
   */
  @javax.annotation.Nullable
  public String getDoi() {
    return doi;
  }

  public void setDoi(String doi) {
    this.doi = doi;
  }


  public Reference editors(String editors) {
    this.editors = editors;
    return this;
  }

  /**
   * Get editors
   * @return editors
   */
  @javax.annotation.Nullable
  public String getEditors() {
    return editors;
  }

  public void setEditors(String editors) {
    this.editors = editors;
  }


  public Reference issue(String issue) {
    this.issue = issue;
    return this;
  }

  /**
   * Get issue
   * @return issue
   */
  @javax.annotation.Nullable
  public String getIssue() {
    return issue;
  }

  public void setIssue(String issue) {
    this.issue = issue;
  }


  public Reference key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public Reference notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Reference pages(String pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public String getPages() {
    return pages;
  }

  public void setPages(String pages) {
    this.pages = pages;
  }


  public Reference pubDate(OffsetDateTime pubDate) {
    this.pubDate = pubDate;
    return this;
  }

  /**
   * Get pubDate
   * @return pubDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPubDate() {
    return pubDate;
  }

  public void setPubDate(OffsetDateTime pubDate) {
    this.pubDate = pubDate;
  }


  public Reference pubStatus(String pubStatus) {
    this.pubStatus = pubStatus;
    return this;
  }

  /**
   * Get pubStatus
   * @return pubStatus
   */
  @javax.annotation.Nullable
  public String getPubStatus() {
    return pubStatus;
  }

  public void setPubStatus(String pubStatus) {
    this.pubStatus = pubStatus;
  }


  public Reference publication(String publication) {
    this.publication = publication;
    return this;
  }

  /**
   * Get publication
   * @return publication
   */
  @javax.annotation.Nullable
  public String getPublication() {
    return publication;
  }

  public void setPublication(String publication) {
    this.publication = publication;
  }


  public Reference publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Get publisher
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public Reference publisherCity(String publisherCity) {
    this.publisherCity = publisherCity;
    return this;
  }

  /**
   * Get publisherCity
   * @return publisherCity
   */
  @javax.annotation.Nullable
  public String getPublisherCity() {
    return publisherCity;
  }

  public void setPublisherCity(String publisherCity) {
    this.publisherCity = publisherCity;
  }


  public Reference refAbstract(String refAbstract) {
    this.refAbstract = refAbstract;
    return this;
  }

  /**
   * Get refAbstract
   * @return refAbstract
   */
  @javax.annotation.Nullable
  public String getRefAbstract() {
    return refAbstract;
  }

  public void setRefAbstract(String refAbstract) {
    this.refAbstract = refAbstract;
  }


  public Reference referenceType(String referenceType) {
    this.referenceType = referenceType;
    return this;
  }

  /**
   * Get referenceType
   * @return referenceType
   */
  @javax.annotation.Nullable
  public String getReferenceType() {
    return referenceType;
  }

  public void setReferenceType(String referenceType) {
    this.referenceType = referenceType;
  }


  public Reference rgdId(Integer rgdId) {
    this.rgdId = rgdId;
    return this;
  }

  /**
   * Get rgdId
   * @return rgdId
   */
  @javax.annotation.Nullable
  public Integer getRgdId() {
    return rgdId;
  }

  public void setRgdId(Integer rgdId) {
    this.rgdId = rgdId;
  }


  public Reference speciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
    return this;
  }

  /**
   * Get speciesTypeKey
   * @return speciesTypeKey
   */
  @javax.annotation.Nullable
  public Integer getSpeciesTypeKey() {
    return speciesTypeKey;
  }

  public void setSpeciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
  }


  public Reference title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Reference urlWebReference(String urlWebReference) {
    this.urlWebReference = urlWebReference;
    return this;
  }

  /**
   * Get urlWebReference
   * @return urlWebReference
   */
  @javax.annotation.Nullable
  public String getUrlWebReference() {
    return urlWebReference;
  }

  public void setUrlWebReference(String urlWebReference) {
    this.urlWebReference = urlWebReference;
  }


  public Reference volume(String volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Get volume
   * @return volume
   */
  @javax.annotation.Nullable
  public String getVolume() {
    return volume;
  }

  public void setVolume(String volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reference reference = (Reference) o;
    return Objects.equals(this.citation, reference.citation) &&
        Objects.equals(this.doi, reference.doi) &&
        Objects.equals(this.editors, reference.editors) &&
        Objects.equals(this.issue, reference.issue) &&
        Objects.equals(this.key, reference.key) &&
        Objects.equals(this.notes, reference.notes) &&
        Objects.equals(this.pages, reference.pages) &&
        Objects.equals(this.pubDate, reference.pubDate) &&
        Objects.equals(this.pubStatus, reference.pubStatus) &&
        Objects.equals(this.publication, reference.publication) &&
        Objects.equals(this.publisher, reference.publisher) &&
        Objects.equals(this.publisherCity, reference.publisherCity) &&
        Objects.equals(this.refAbstract, reference.refAbstract) &&
        Objects.equals(this.referenceType, reference.referenceType) &&
        Objects.equals(this.rgdId, reference.rgdId) &&
        Objects.equals(this.speciesTypeKey, reference.speciesTypeKey) &&
        Objects.equals(this.title, reference.title) &&
        Objects.equals(this.urlWebReference, reference.urlWebReference) &&
        Objects.equals(this.volume, reference.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citation, doi, editors, issue, key, notes, pages, pubDate, pubStatus, publication, publisher, publisherCity, refAbstract, referenceType, rgdId, speciesTypeKey, title, urlWebReference, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reference {\n");
    sb.append("    citation: ").append(toIndentedString(citation)).append("\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    editors: ").append(toIndentedString(editors)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    pubDate: ").append(toIndentedString(pubDate)).append("\n");
    sb.append("    pubStatus: ").append(toIndentedString(pubStatus)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    publisherCity: ").append(toIndentedString(publisherCity)).append("\n");
    sb.append("    refAbstract: ").append(toIndentedString(refAbstract)).append("\n");
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("    rgdId: ").append(toIndentedString(rgdId)).append("\n");
    sb.append("    speciesTypeKey: ").append(toIndentedString(speciesTypeKey)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    urlWebReference: ").append(toIndentedString(urlWebReference)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("citation");
    openapiFields.add("doi");
    openapiFields.add("editors");
    openapiFields.add("issue");
    openapiFields.add("key");
    openapiFields.add("notes");
    openapiFields.add("pages");
    openapiFields.add("pubDate");
    openapiFields.add("pubStatus");
    openapiFields.add("publication");
    openapiFields.add("publisher");
    openapiFields.add("publisherCity");
    openapiFields.add("refAbstract");
    openapiFields.add("referenceType");
    openapiFields.add("rgdId");
    openapiFields.add("speciesTypeKey");
    openapiFields.add("title");
    openapiFields.add("urlWebReference");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Reference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reference is not found in the empty JSON string", Reference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("citation") != null && !jsonObj.get("citation").isJsonNull()) && !jsonObj.get("citation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citation").toString()));
      }
      if ((jsonObj.get("doi") != null && !jsonObj.get("doi").isJsonNull()) && !jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if ((jsonObj.get("editors") != null && !jsonObj.get("editors").isJsonNull()) && !jsonObj.get("editors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editors").toString()));
      }
      if ((jsonObj.get("issue") != null && !jsonObj.get("issue").isJsonNull()) && !jsonObj.get("issue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) && !jsonObj.get("pages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
      if ((jsonObj.get("pubStatus") != null && !jsonObj.get("pubStatus").isJsonNull()) && !jsonObj.get("pubStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubStatus").toString()));
      }
      if ((jsonObj.get("publication") != null && !jsonObj.get("publication").isJsonNull()) && !jsonObj.get("publication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publication").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("publisherCity") != null && !jsonObj.get("publisherCity").isJsonNull()) && !jsonObj.get("publisherCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherCity").toString()));
      }
      if ((jsonObj.get("refAbstract") != null && !jsonObj.get("refAbstract").isJsonNull()) && !jsonObj.get("refAbstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refAbstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refAbstract").toString()));
      }
      if ((jsonObj.get("referenceType") != null && !jsonObj.get("referenceType").isJsonNull()) && !jsonObj.get("referenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceType").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("urlWebReference") != null && !jsonObj.get("urlWebReference").isJsonNull()) && !jsonObj.get("urlWebReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlWebReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlWebReference").toString()));
      }
      if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull()) && !jsonObj.get("volume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volume").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reference.class));

       return (TypeAdapter<T>) new TypeAdapter<Reference>() {
           @Override
           public void write(JsonWriter out, Reference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Reference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Reference
   * @throws IOException if the JSON string is invalid with respect to Reference
   */
  public static Reference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reference.class);
  }

  /**
   * Convert an instance of Reference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

