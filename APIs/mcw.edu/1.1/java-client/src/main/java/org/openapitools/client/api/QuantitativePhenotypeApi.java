/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuantitativePhenotypeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuantitativePhenotypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuantitativePhenotypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getChartInfoUsingGET
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param refRgdId Reference RGD ID for a study (required)
     * @param termString List of term accession IDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartInfoUsingGETCall(Integer speciesTypeKey, Integer refRgdId, String termString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phenotype/phenominer/chart/{speciesTypeKey}/{refRgdId}/{termString}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "refRgdId" + "}", localVarApiClient.escapeString(refRgdId.toString()))
            .replace("{" + "termString" + "}", localVarApiClient.escapeString(termString.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChartInfoUsingGETValidateBeforeCall(Integer speciesTypeKey, Integer refRgdId, String termString, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getChartInfoUsingGET(Async)");
        }

        // verify the required parameter 'refRgdId' is set
        if (refRgdId == null) {
            throw new ApiException("Missing the required parameter 'refRgdId' when calling getChartInfoUsingGET(Async)");
        }

        // verify the required parameter 'termString' is set
        if (termString == null) {
            throw new ApiException("Missing the required parameter 'termString' when calling getChartInfoUsingGET(Async)");
        }

        return getChartInfoUsingGETCall(speciesTypeKey, refRgdId, termString, _callback);

    }

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3&#x3D;rat, 4&#x3D;chinchilla).  Reference RGD ID for a study works like a filter.
     * 
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param refRgdId Reference RGD ID for a study (required)
     * @param termString List of term accession IDs (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> getChartInfoUsingGET(Integer speciesTypeKey, Integer refRgdId, String termString) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = getChartInfoUsingGETWithHttpInfo(speciesTypeKey, refRgdId, termString);
        return localVarResp.getData();
    }

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3&#x3D;rat, 4&#x3D;chinchilla).  Reference RGD ID for a study works like a filter.
     * 
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param refRgdId Reference RGD ID for a study (required)
     * @param termString List of term accession IDs (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> getChartInfoUsingGETWithHttpInfo(Integer speciesTypeKey, Integer refRgdId, String termString) throws ApiException {
        okhttp3.Call localVarCall = getChartInfoUsingGETValidateBeforeCall(speciesTypeKey, refRgdId, termString, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3&#x3D;rat, 4&#x3D;chinchilla).  Reference RGD ID for a study works like a filter. (asynchronously)
     * 
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param refRgdId Reference RGD ID for a study (required)
     * @param termString List of term accession IDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartInfoUsingGETAsync(Integer speciesTypeKey, Integer refRgdId, String termString, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChartInfoUsingGETValidateBeforeCall(speciesTypeKey, refRgdId, termString, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChartInfoUsingGET1
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param termString List of term accession IDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartInfoUsingGET1Call(Integer speciesTypeKey, String termString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phenotype/phenominer/chart/{speciesTypeKey}/{termString}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "termString" + "}", localVarApiClient.escapeString(termString.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChartInfoUsingGET1ValidateBeforeCall(Integer speciesTypeKey, String termString, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getChartInfoUsingGET1(Async)");
        }

        // verify the required parameter 'termString' is set
        if (termString == null) {
            throw new ApiException("Missing the required parameter 'termString' when calling getChartInfoUsingGET1(Async)");
        }

        return getChartInfoUsingGET1Call(speciesTypeKey, termString, _callback);

    }

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3&#x3D;rat, 4&#x3D;chinchilla)
     * 
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param termString List of term accession IDs (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> getChartInfoUsingGET1(Integer speciesTypeKey, String termString) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = getChartInfoUsingGET1WithHttpInfo(speciesTypeKey, termString);
        return localVarResp.getData();
    }

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3&#x3D;rat, 4&#x3D;chinchilla)
     * 
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param termString List of term accession IDs (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> getChartInfoUsingGET1WithHttpInfo(Integer speciesTypeKey, String termString) throws ApiException {
        okhttp3.Call localVarCall = getChartInfoUsingGET1ValidateBeforeCall(speciesTypeKey, termString, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3&#x3D;rat, 4&#x3D;chinchilla) (asynchronously)
     * 
     * @param speciesTypeKey Species Type Key - 3&#x3D;rat 4&#x3D;chinchilla  (required)
     * @param termString List of term accession IDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartInfoUsingGET1Async(Integer speciesTypeKey, String termString, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChartInfoUsingGET1ValidateBeforeCall(speciesTypeKey, termString, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
