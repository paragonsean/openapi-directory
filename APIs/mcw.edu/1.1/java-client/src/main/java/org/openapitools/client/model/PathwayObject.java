/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PathwayObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PathwayObject {
  public static final String SERIALIZED_NAME_ACC_ID = "accId";
  @SerializedName(SERIALIZED_NAME_ACC_ID)
  private String accId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBJ_DESC = "objDesc";
  @SerializedName(SERIALIZED_NAME_OBJ_DESC)
  private String objDesc;

  public static final String SERIALIZED_NAME_OBJ_NAME = "objName";
  @SerializedName(SERIALIZED_NAME_OBJ_NAME)
  private String objName;

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_XDB_KEY = "xdb_key";
  @SerializedName(SERIALIZED_NAME_XDB_KEY)
  private Integer xdbKey;

  public PathwayObject() {
  }

  public PathwayObject accId(String accId) {
    this.accId = accId;
    return this;
  }

  /**
   * Get accId
   * @return accId
   */
  @javax.annotation.Nullable
  public String getAccId() {
    return accId;
  }

  public void setAccId(String accId) {
    this.accId = accId;
  }


  public PathwayObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PathwayObject objDesc(String objDesc) {
    this.objDesc = objDesc;
    return this;
  }

  /**
   * Get objDesc
   * @return objDesc
   */
  @javax.annotation.Nullable
  public String getObjDesc() {
    return objDesc;
  }

  public void setObjDesc(String objDesc) {
    this.objDesc = objDesc;
  }


  public PathwayObject objName(String objName) {
    this.objName = objName;
    return this;
  }

  /**
   * Get objName
   * @return objName
   */
  @javax.annotation.Nullable
  public String getObjName() {
    return objName;
  }

  public void setObjName(String objName) {
    this.objName = objName;
  }


  public PathwayObject typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Get typeId
   * @return typeId
   */
  @javax.annotation.Nullable
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }


  public PathwayObject typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public PathwayObject url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public PathwayObject xdbKey(Integer xdbKey) {
    this.xdbKey = xdbKey;
    return this;
  }

  /**
   * Get xdbKey
   * @return xdbKey
   */
  @javax.annotation.Nullable
  public Integer getXdbKey() {
    return xdbKey;
  }

  public void setXdbKey(Integer xdbKey) {
    this.xdbKey = xdbKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathwayObject pathwayObject = (PathwayObject) o;
    return Objects.equals(this.accId, pathwayObject.accId) &&
        Objects.equals(this.id, pathwayObject.id) &&
        Objects.equals(this.objDesc, pathwayObject.objDesc) &&
        Objects.equals(this.objName, pathwayObject.objName) &&
        Objects.equals(this.typeId, pathwayObject.typeId) &&
        Objects.equals(this.typeName, pathwayObject.typeName) &&
        Objects.equals(this.url, pathwayObject.url) &&
        Objects.equals(this.xdbKey, pathwayObject.xdbKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accId, id, objDesc, objName, typeId, typeName, url, xdbKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathwayObject {\n");
    sb.append("    accId: ").append(toIndentedString(accId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    objDesc: ").append(toIndentedString(objDesc)).append("\n");
    sb.append("    objName: ").append(toIndentedString(objName)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    xdbKey: ").append(toIndentedString(xdbKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accId");
    openapiFields.add("id");
    openapiFields.add("objDesc");
    openapiFields.add("objName");
    openapiFields.add("typeId");
    openapiFields.add("typeName");
    openapiFields.add("url");
    openapiFields.add("xdb_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PathwayObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PathwayObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PathwayObject is not found in the empty JSON string", PathwayObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PathwayObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PathwayObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accId") != null && !jsonObj.get("accId").isJsonNull()) && !jsonObj.get("accId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("objDesc") != null && !jsonObj.get("objDesc").isJsonNull()) && !jsonObj.get("objDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objDesc").toString()));
      }
      if ((jsonObj.get("objName") != null && !jsonObj.get("objName").isJsonNull()) && !jsonObj.get("objName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objName").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PathwayObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PathwayObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PathwayObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PathwayObject.class));

       return (TypeAdapter<T>) new TypeAdapter<PathwayObject>() {
           @Override
           public void write(JsonWriter out, PathwayObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PathwayObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PathwayObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PathwayObject
   * @throws IOException if the JSON string is invalid with respect to PathwayObject
   */
  public static PathwayObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PathwayObject.class);
  }

  /**
   * Convert an instance of PathwayObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

