/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getActiveObjectCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveObjectCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/activeObject/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveObjectCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getActiveObjectCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getActiveObjectCountUsingGET(Async)");
        }

        return getActiveObjectCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of active objects by type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getActiveObjectCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getActiveObjectCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of active objects by type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getActiveObjectCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getActiveObjectCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of active objects by type, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveObjectCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveObjectCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveObjectDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveObjectDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/activeObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveObjectDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getActiveObjectDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getActiveObjectDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getActiveObjectDiffUsingGET(Async)");
        }

        return getActiveObjectDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of active objects, by type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getActiveObjectDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getActiveObjectDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of active objects, by type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getActiveObjectDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getActiveObjectDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of active objects, by type, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveObjectDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveObjectDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneTypeCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneTypeCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/geneType/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneTypeCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGeneTypeCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getGeneTypeCountUsingGET(Async)");
        }

        return getGeneTypeCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of gene types, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getGeneTypeCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getGeneTypeCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of gene types, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getGeneTypeCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getGeneTypeCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of gene types, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneTypeCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneTypeCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneTypeDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneTypeDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/geneType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneTypeDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGeneTypeDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getGeneTypeDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getGeneTypeDiffUsingGET(Async)");
        }

        return getGeneTypeDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of gene types, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getGeneTypeDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getGeneTypeDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of gene types, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getGeneTypeDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getGeneTypeDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of gene types, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneTypeDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneTypeDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectStatusCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectStatusCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/objectStatus/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectStatusCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectStatusCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getObjectStatusCountUsingGET(Async)");
        }

        return getObjectStatusCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of objects with given status, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectStatusCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectStatusCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of objects with given status, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectStatusCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectStatusCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of objects with given status, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectStatusCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectStatusCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectStatusDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectStatusDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/objectStatus/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectStatusDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectStatusDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getObjectStatusDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getObjectStatusDiffUsingGET(Async)");
        }

        return getObjectStatusDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of objects with given status, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectStatusDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectStatusDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of objects with given status, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectStatusDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectStatusDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of objects with given status, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectStatusDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectStatusDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsWithRefSeqCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithRefSeqCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/objectWithRefSeq/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsWithRefSeqCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectsWithRefSeqCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getObjectsWithRefSeqCountUsingGET(Async)");
        }

        return getObjectsWithRefSeqCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of objects with reference sequence(s), by object type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectsWithRefSeqCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectsWithRefSeqCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of objects with reference sequence(s), by object type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectsWithRefSeqCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectsWithRefSeqCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of objects with reference sequence(s), by object type, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithRefSeqCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsWithRefSeqCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsWithRefSeqDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithRefSeqDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/objectWithRefSeq/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsWithRefSeqDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectsWithRefSeqDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getObjectsWithRefSeqDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getObjectsWithRefSeqDiffUsingGET(Async)");
        }

        return getObjectsWithRefSeqDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of objects with reference sequence(s), by object type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectsWithRefSeqDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectsWithRefSeqDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of objects with reference sequence(s), by object type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectsWithRefSeqDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectsWithRefSeqDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of objects with reference sequence(s), by object type, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithRefSeqDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsWithRefSeqDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsWithReferenceCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithReferenceCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/objectWithReference/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsWithReferenceCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectsWithReferenceCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getObjectsWithReferenceCountUsingGET(Async)");
        }

        return getObjectsWithReferenceCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of objects with reference, by object type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectsWithReferenceCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectsWithReferenceCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of objects with reference, by object type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectsWithReferenceCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectsWithReferenceCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of objects with reference, by object type, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithReferenceCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsWithReferenceCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsWithReferenceDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithReferenceDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/objectWithReference/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsWithReferenceDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectsWithReferenceDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getObjectsWithReferenceDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getObjectsWithReferenceDiffUsingGET(Async)");
        }

        return getObjectsWithReferenceDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of objects with reference, by object type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectsWithReferenceDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectsWithReferenceDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of objects with reference, by object type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectsWithReferenceDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectsWithReferenceDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of objects with reference, by object type, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithReferenceDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsWithReferenceDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsWithXDBsCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithXDBsCountUsingGETCall(Integer speciesTypeKey, Integer objectKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "objectKey" + "}", localVarApiClient.escapeString(objectKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsWithXDBsCountUsingGETValidateBeforeCall(Integer speciesTypeKey, Integer objectKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectsWithXDBsCountUsingGET(Async)");
        }

        // verify the required parameter 'objectKey' is set
        if (objectKey == null) {
            throw new ApiException("Missing the required parameter 'objectKey' when calling getObjectsWithXDBsCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getObjectsWithXDBsCountUsingGET(Async)");
        }

        return getObjectsWithXDBsCountUsingGETCall(speciesTypeKey, objectKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of objects with external database ids, by database id, for specified species, object type and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectsWithXDBsCountUsingGET(Integer speciesTypeKey, Integer objectKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectsWithXDBsCountUsingGETWithHttpInfo(speciesTypeKey, objectKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of objects with external database ids, by database id, for specified species, object type and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectsWithXDBsCountUsingGETWithHttpInfo(Integer speciesTypeKey, Integer objectKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectsWithXDBsCountUsingGETValidateBeforeCall(speciesTypeKey, objectKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of objects with external database ids, by database id, for specified species, object type and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithXDBsCountUsingGETAsync(Integer speciesTypeKey, Integer objectKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsWithXDBsCountUsingGETValidateBeforeCall(speciesTypeKey, objectKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectsWithXDBsDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithXDBsDiffUsingGETCall(Integer speciesTypeKey, Integer objectKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "objectKey" + "}", localVarApiClient.escapeString(objectKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsWithXDBsDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, Integer objectKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getObjectsWithXDBsDiffUsingGET(Async)");
        }

        // verify the required parameter 'objectKey' is set
        if (objectKey == null) {
            throw new ApiException("Missing the required parameter 'objectKey' when calling getObjectsWithXDBsDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getObjectsWithXDBsDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getObjectsWithXDBsDiffUsingGET(Async)");
        }

        return getObjectsWithXDBsDiffUsingGETCall(speciesTypeKey, objectKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of objects with external database ids, by database id, for specified species, object type and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getObjectsWithXDBsDiffUsingGET(Integer speciesTypeKey, Integer objectKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getObjectsWithXDBsDiffUsingGETWithHttpInfo(speciesTypeKey, objectKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of objects with external database ids, by database id, for specified species, object type and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getObjectsWithXDBsDiffUsingGETWithHttpInfo(Integer speciesTypeKey, Integer objectKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getObjectsWithXDBsDiffUsingGETValidateBeforeCall(speciesTypeKey, objectKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of objects with external database ids, by database id, for specified species, object type and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param objectKey objectKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsWithXDBsDiffUsingGETAsync(Integer speciesTypeKey, Integer objectKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsWithXDBsDiffUsingGETValidateBeforeCall(speciesTypeKey, objectKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProteinInteractionCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProteinInteractionCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/proteinInteraction/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProteinInteractionCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getProteinInteractionCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getProteinInteractionCountUsingGET(Async)");
        }

        return getProteinInteractionCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of protein interactions, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getProteinInteractionCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getProteinInteractionCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of protein interactions, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getProteinInteractionCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getProteinInteractionCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of protein interactions, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProteinInteractionCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProteinInteractionCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProteinInteractionDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProteinInteractionDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/proteinInteraction/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProteinInteractionDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getProteinInteractionDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getProteinInteractionDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getProteinInteractionDiffUsingGET(Async)");
        }

        return getProteinInteractionDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of protein interactions, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getProteinInteractionDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getProteinInteractionDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of protein interactions, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getProteinInteractionDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getProteinInteractionDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of protein interactions, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProteinInteractionDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProteinInteractionDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQtlInheritanceTypeCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQtlInheritanceTypeCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/qtlInheritanceType/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQtlInheritanceTypeCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getQtlInheritanceTypeCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getQtlInheritanceTypeCountUsingGET(Async)");
        }

        return getQtlInheritanceTypeCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of strains, by qtl inheritance type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getQtlInheritanceTypeCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getQtlInheritanceTypeCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of strains, by qtl inheritance type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getQtlInheritanceTypeCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getQtlInheritanceTypeCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of strains, by qtl inheritance type, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQtlInheritanceTypeCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQtlInheritanceTypeCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQtlInheritanceTypeDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQtlInheritanceTypeDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/qtlInheritanceType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQtlInheritanceTypeDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getQtlInheritanceTypeDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getQtlInheritanceTypeDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getQtlInheritanceTypeDiffUsingGET(Async)");
        }

        return getQtlInheritanceTypeDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of strains, by qtl inheritance type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getQtlInheritanceTypeDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getQtlInheritanceTypeDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of strains, by qtl inheritance type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getQtlInheritanceTypeDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getQtlInheritanceTypeDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of strains, by qtl inheritance type, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQtlInheritanceTypeDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQtlInheritanceTypeDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetiredObjectCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetiredObjectCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/retiredObject/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetiredObjectCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getRetiredObjectCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getRetiredObjectCountUsingGET(Async)");
        }

        return getRetiredObjectCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of retired objects by type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getRetiredObjectCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getRetiredObjectCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of retired objects by type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getRetiredObjectCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getRetiredObjectCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of retired objects by type, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetiredObjectCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetiredObjectCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetiredObjectDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetiredObjectDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/retiredObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetiredObjectDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getRetiredObjectDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getRetiredObjectDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getRetiredObjectDiffUsingGET(Async)");
        }

        return getRetiredObjectDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of retired objects, by type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getRetiredObjectDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getRetiredObjectDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of retired objects, by type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getRetiredObjectDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getRetiredObjectDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of retired objects, by type, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetiredObjectDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetiredObjectDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStrainTypeCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStrainTypeCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/strainType/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStrainTypeCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getStrainTypeCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getStrainTypeCountUsingGET(Async)");
        }

        return getStrainTypeCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of strain types, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getStrainTypeCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getStrainTypeCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of strain types, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getStrainTypeCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getStrainTypeCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of strain types, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStrainTypeCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStrainTypeCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStrainTypeDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStrainTypeDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/strainType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStrainTypeDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getStrainTypeDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getStrainTypeDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getStrainTypeDiffUsingGET(Async)");
        }

        return getStrainTypeDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of strain types, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getStrainTypeDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getStrainTypeDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of strain types, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getStrainTypeDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getStrainTypeDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of strain types, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStrainTypeDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStrainTypeDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTermStatsUsingGET
     * @param accId accId (required)
     * @param filterAccId filterAccId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTermStatsUsingGETCall(String accId, String filterAccId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/term/{accId}/{filterAccId}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "filterAccId" + "}", localVarApiClient.escapeString(filterAccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTermStatsUsingGETValidateBeforeCall(String accId, String filterAccId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getTermStatsUsingGET(Async)");
        }

        // verify the required parameter 'filterAccId' is set
        if (filterAccId == null) {
            throw new ApiException("Missing the required parameter 'filterAccId' when calling getTermStatsUsingGET(Async)");
        }

        return getTermStatsUsingGETCall(accId, filterAccId, _callback);

    }

    /**
     * getTermStats
     * 
     * @param accId accId (required)
     * @param filterAccId filterAccId (required)
     * @return Map&lt;String, Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Integer> getTermStatsUsingGET(String accId, String filterAccId) throws ApiException {
        ApiResponse<Map<String, Integer>> localVarResp = getTermStatsUsingGETWithHttpInfo(accId, filterAccId);
        return localVarResp.getData();
    }

    /**
     * getTermStats
     * 
     * @param accId accId (required)
     * @param filterAccId filterAccId (required)
     * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Integer>> getTermStatsUsingGETWithHttpInfo(String accId, String filterAccId) throws ApiException {
        okhttp3.Call localVarCall = getTermStatsUsingGETValidateBeforeCall(accId, filterAccId, null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getTermStats (asynchronously)
     * 
     * @param accId accId (required)
     * @param filterAccId filterAccId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTermStatsUsingGETAsync(String accId, String filterAccId, final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTermStatsUsingGETValidateBeforeCall(accId, filterAccId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWithdrawnObjectCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWithdrawnObjectCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/withdrawnObject/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWithdrawnObjectCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getWithdrawnObjectCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getWithdrawnObjectCountUsingGET(Async)");
        }

        return getWithdrawnObjectCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of withdrawn objects by type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getWithdrawnObjectCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getWithdrawnObjectCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of withdrawn objects by type, for specified species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getWithdrawnObjectCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getWithdrawnObjectCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of withdrawn objects by type, for specified species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWithdrawnObjectCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWithdrawnObjectCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWithdrawnObjectDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWithdrawnObjectDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/withdrawnObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWithdrawnObjectDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getWithdrawnObjectDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getWithdrawnObjectDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getWithdrawnObjectDiffUsingGET(Async)");
        }

        return getWithdrawnObjectDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of withdrawn objects, by type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getWithdrawnObjectDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getWithdrawnObjectDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of withdrawn objects, by type, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getWithdrawnObjectDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getWithdrawnObjectDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of withdrawn objects, by type, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWithdrawnObjectDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWithdrawnObjectDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getXdbsCountUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXdbsCountUsingGETCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/count/xdb/{speciesTypeKey}/{dateYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateYYYYMMDD" + "}", localVarApiClient.escapeString(dateYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getXdbsCountUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getXdbsCountUsingGET(Async)");
        }

        // verify the required parameter 'dateYYYYMMDD' is set
        if (dateYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateYYYYMMDD' when calling getXdbsCountUsingGET(Async)");
        }

        return getXdbsCountUsingGETCall(speciesTypeKey, dateYYYYMMDD, _callback);

    }

    /**
     * Count of external database ids, for specied species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getXdbsCountUsingGET(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getXdbsCountUsingGETWithHttpInfo(speciesTypeKey, dateYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count of external database ids, for specied species and date
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getXdbsCountUsingGETWithHttpInfo(Integer speciesTypeKey, String dateYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getXdbsCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count of external database ids, for specied species and date (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateYYYYMMDD dateYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXdbsCountUsingGETAsync(Integer speciesTypeKey, String dateYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getXdbsCountUsingGETValidateBeforeCall(speciesTypeKey, dateYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getXdbsDiffUsingGET
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXdbsDiffUsingGETCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/diff/xdb/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "dateFromYYYYMMDD" + "}", localVarApiClient.escapeString(dateFromYYYYMMDD.toString()))
            .replace("{" + "dateToYYYYMMDD" + "}", localVarApiClient.escapeString(dateToYYYYMMDD.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getXdbsDiffUsingGETValidateBeforeCall(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getXdbsDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateFromYYYYMMDD' is set
        if (dateFromYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateFromYYYYMMDD' when calling getXdbsDiffUsingGET(Async)");
        }

        // verify the required parameter 'dateToYYYYMMDD' is set
        if (dateToYYYYMMDD == null) {
            throw new ApiException("Missing the required parameter 'dateToYYYYMMDD' when calling getXdbsDiffUsingGET(Async)");
        }

        return getXdbsDiffUsingGETCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);

    }

    /**
     * Count difference of external database ids, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getXdbsDiffUsingGET(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getXdbsDiffUsingGETWithHttpInfo(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD);
        return localVarResp.getData();
    }

    /**
     * Count difference of external database ids, for specified species and date range
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getXdbsDiffUsingGETWithHttpInfo(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD) throws ApiException {
        okhttp3.Call localVarCall = getXdbsDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count difference of external database ids, for specified species and date range (asynchronously)
     * 
     * @param speciesTypeKey speciesTypeKey (required)
     * @param dateFromYYYYMMDD dateFromYYYYMMDD (required)
     * @param dateToYYYYMMDD dateToYYYYMMDD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXdbsDiffUsingGETAsync(Integer speciesTypeKey, String dateFromYYYYMMDD, String dateToYYYYMMDD, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getXdbsDiffUsingGETValidateBeforeCall(speciesTypeKey, dateFromYYYYMMDD, dateToYYYYMMDD, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
