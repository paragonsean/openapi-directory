/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnnotatedGeneRequest;
import org.openapitools.client.model.Gene;
import org.openapitools.client.model.MappedGene;
import org.openapitools.client.model.MappedGenePosition;
import org.openapitools.client.model.OrthologRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllAnnotatedGenesUsingGET
     * @param accId Accesstion ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAnnotatedGenesUsingGETCall(String accId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/annotation/{accId}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAnnotatedGenesUsingGETValidateBeforeCall(String accId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getAllAnnotatedGenesUsingGET(Async)");
        }

        return getAllAnnotatedGenesUsingGETCall(accId, _callback);

    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param accId Accesstion ID (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getAllAnnotatedGenesUsingGET(String accId) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getAllAnnotatedGenesUsingGETWithHttpInfo(accId);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param accId Accesstion ID (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getAllAnnotatedGenesUsingGETWithHttpInfo(String accId) throws ApiException {
        okhttp3.Call localVarCall = getAllAnnotatedGenesUsingGETValidateBeforeCall(accId, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes annotated to an ontology term (asynchronously)
     * 
     * @param accId Accesstion ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAnnotatedGenesUsingGETAsync(String accId, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAnnotatedGenesUsingGETValidateBeforeCall(accId, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotatedGenesUsingPOST
     * @param annotatedGeneRequest data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotatedGenesUsingPOSTCall(AnnotatedGeneRequest annotatedGeneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotatedGeneRequest;

        // create path and map variables
        String localVarPath = "/genes/annotation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotatedGenesUsingPOSTValidateBeforeCall(AnnotatedGeneRequest annotatedGeneRequest, final ApiCallback _callback) throws ApiException {
        return getAnnotatedGenesUsingPOSTCall(annotatedGeneRequest, _callback);

    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param annotatedGeneRequest data (optional)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getAnnotatedGenesUsingPOST(AnnotatedGeneRequest annotatedGeneRequest) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getAnnotatedGenesUsingPOSTWithHttpInfo(annotatedGeneRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param annotatedGeneRequest data (optional)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getAnnotatedGenesUsingPOSTWithHttpInfo(AnnotatedGeneRequest annotatedGeneRequest) throws ApiException {
        okhttp3.Call localVarCall = getAnnotatedGenesUsingPOSTValidateBeforeCall(annotatedGeneRequest, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes annotated to an ontology term (asynchronously)
     * 
     * @param annotatedGeneRequest data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotatedGenesUsingPOSTAsync(AnnotatedGeneRequest annotatedGeneRequest, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotatedGenesUsingPOSTValidateBeforeCall(annotatedGeneRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneAllelesUsingGET
     * @param rgdId RGD ID of gene (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneAllelesUsingGETCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/allele/{rgdId}"
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneAllelesUsingGETValidateBeforeCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getGeneAllelesUsingGET(Async)");
        }

        return getGeneAllelesUsingGETCall(rgdId, _callback);

    }

    /**
     * Return a list of gene alleles
     * 
     * @param rgdId RGD ID of gene (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGeneAllelesUsingGET(Integer rgdId) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGeneAllelesUsingGETWithHttpInfo(rgdId);
        return localVarResp.getData();
    }

    /**
     * Return a list of gene alleles
     * 
     * @param rgdId RGD ID of gene (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGeneAllelesUsingGETWithHttpInfo(Integer rgdId) throws ApiException {
        okhttp3.Call localVarCall = getGeneAllelesUsingGETValidateBeforeCall(rgdId, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of gene alleles (asynchronously)
     * 
     * @param rgdId RGD ID of gene (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneAllelesUsingGETAsync(Integer rgdId, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneAllelesUsingGETValidateBeforeCall(rgdId, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneByMapKeyUsingGET
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneByMapKeyUsingGETCall(Integer mapKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/map/{mapKey}"
            .replace("{" + "mapKey" + "}", localVarApiClient.escapeString(mapKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneByMapKeyUsingGETValidateBeforeCall(Integer mapKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapKey' is set
        if (mapKey == null) {
            throw new ApiException("Missing the required parameter 'mapKey' when calling getGeneByMapKeyUsingGET(Async)");
        }

        return getGeneByMapKeyUsingGETCall(mapKey, _callback);

    }

    /**
     * Return a list of all genes with position information for an assembly
     * 
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return List&lt;MappedGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<MappedGene> getGeneByMapKeyUsingGET(Integer mapKey) throws ApiException {
        ApiResponse<List<MappedGene>> localVarResp = getGeneByMapKeyUsingGETWithHttpInfo(mapKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of all genes with position information for an assembly
     * 
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;MappedGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MappedGene>> getGeneByMapKeyUsingGETWithHttpInfo(Integer mapKey) throws ApiException {
        okhttp3.Call localVarCall = getGeneByMapKeyUsingGETValidateBeforeCall(mapKey, null);
        Type localVarReturnType = new TypeToken<List<MappedGene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of all genes with position information for an assembly (asynchronously)
     * 
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneByMapKeyUsingGETAsync(Integer mapKey, final ApiCallback<List<MappedGene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneByMapKeyUsingGETValidateBeforeCall(mapKey, _callback);
        Type localVarReturnType = new TypeToken<List<MappedGene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneByRgdIdUsingGET
     * @param rgdId The RGD ID of a Gene in RGD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneByRgdIdUsingGETCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/{rgdId}"
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneByRgdIdUsingGETValidateBeforeCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getGeneByRgdIdUsingGET(Async)");
        }

        return getGeneByRgdIdUsingGETCall(rgdId, _callback);

    }

    /**
     * Get a gene record by RGD ID
     * 
     * @param rgdId The RGD ID of a Gene in RGD (required)
     * @return Gene
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Gene getGeneByRgdIdUsingGET(Integer rgdId) throws ApiException {
        ApiResponse<Gene> localVarResp = getGeneByRgdIdUsingGETWithHttpInfo(rgdId);
        return localVarResp.getData();
    }

    /**
     * Get a gene record by RGD ID
     * 
     * @param rgdId The RGD ID of a Gene in RGD (required)
     * @return ApiResponse&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Gene> getGeneByRgdIdUsingGETWithHttpInfo(Integer rgdId) throws ApiException {
        okhttp3.Call localVarCall = getGeneByRgdIdUsingGETValidateBeforeCall(rgdId, null);
        Type localVarReturnType = new TypeToken<Gene>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a gene record by RGD ID (asynchronously)
     * 
     * @param rgdId The RGD ID of a Gene in RGD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneByRgdIdUsingGETAsync(Integer rgdId, final ApiCallback<Gene> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneByRgdIdUsingGETValidateBeforeCall(rgdId, _callback);
        Type localVarReturnType = new TypeToken<Gene>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneBySymbolUsingGET
     * @param symbol Gene Symbol (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneBySymbolUsingGETCall(String symbol, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/{symbol}/{speciesTypeKey}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneBySymbolUsingGETValidateBeforeCall(String symbol, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getGeneBySymbolUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGeneBySymbolUsingGET(Async)");
        }

        return getGeneBySymbolUsingGETCall(symbol, speciesTypeKey, _callback);

    }

    /**
     * Get a gene record by symbol and species type key
     * 
     * @param symbol Gene Symbol (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @return Gene
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Gene getGeneBySymbolUsingGET(String symbol, Integer speciesTypeKey) throws ApiException {
        ApiResponse<Gene> localVarResp = getGeneBySymbolUsingGETWithHttpInfo(symbol, speciesTypeKey);
        return localVarResp.getData();
    }

    /**
     * Get a gene record by symbol and species type key
     * 
     * @param symbol Gene Symbol (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @return ApiResponse&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Gene> getGeneBySymbolUsingGETWithHttpInfo(String symbol, Integer speciesTypeKey) throws ApiException {
        okhttp3.Call localVarCall = getGeneBySymbolUsingGETValidateBeforeCall(symbol, speciesTypeKey, null);
        Type localVarReturnType = new TypeToken<Gene>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a gene record by symbol and species type key (asynchronously)
     * 
     * @param symbol Gene Symbol (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneBySymbolUsingGETAsync(String symbol, Integer speciesTypeKey, final ApiCallback<Gene> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneBySymbolUsingGETValidateBeforeCall(symbol, speciesTypeKey, _callback);
        Type localVarReturnType = new TypeToken<Gene>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneOrthologsUsingGET
     * @param rgdId RGD ID of a gene (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneOrthologsUsingGETCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/orthologs/{rgdId}"
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneOrthologsUsingGETValidateBeforeCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getGeneOrthologsUsingGET(Async)");
        }

        return getGeneOrthologsUsingGETCall(rgdId, _callback);

    }

    /**
     * Return a list of gene orthologs
     * 
     * @param rgdId RGD ID of a gene (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGeneOrthologsUsingGET(Integer rgdId) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGeneOrthologsUsingGETWithHttpInfo(rgdId);
        return localVarResp.getData();
    }

    /**
     * Return a list of gene orthologs
     * 
     * @param rgdId RGD ID of a gene (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGeneOrthologsUsingGETWithHttpInfo(Integer rgdId) throws ApiException {
        okhttp3.Call localVarCall = getGeneOrthologsUsingGETValidateBeforeCall(rgdId, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of gene orthologs (asynchronously)
     * 
     * @param rgdId RGD ID of a gene (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneOrthologsUsingGETAsync(Integer rgdId, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneOrthologsUsingGETValidateBeforeCall(rgdId, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesAnnotatedUsingGET
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesAnnotatedUsingGETCall(String accId, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/annotation/{accId}/{speciesTypeKey}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesAnnotatedUsingGETValidateBeforeCall(String accId, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getGenesAnnotatedUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGenesAnnotatedUsingGET(Async)");
        }

        return getGenesAnnotatedUsingGETCall(accId, speciesTypeKey, _callback);

    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGenesAnnotatedUsingGET(String accId, Integer speciesTypeKey) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGenesAnnotatedUsingGETWithHttpInfo(accId, speciesTypeKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGenesAnnotatedUsingGETWithHttpInfo(String accId, Integer speciesTypeKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesAnnotatedUsingGETValidateBeforeCall(accId, speciesTypeKey, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes annotated to an ontology term (asynchronously)
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesAnnotatedUsingGETAsync(String accId, Integer speciesTypeKey, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesAnnotatedUsingGETValidateBeforeCall(accId, speciesTypeKey, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesByAffyIdUsingGET
     * @param affyId Affymetrix ID (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByAffyIdUsingGETCall(String affyId, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/affyId/{affyId}/{speciesTypeKey}"
            .replace("{" + "affyId" + "}", localVarApiClient.escapeString(affyId.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesByAffyIdUsingGETValidateBeforeCall(String affyId, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'affyId' is set
        if (affyId == null) {
            throw new ApiException("Missing the required parameter 'affyId' when calling getGenesByAffyIdUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGenesByAffyIdUsingGET(Async)");
        }

        return getGenesByAffyIdUsingGETCall(affyId, speciesTypeKey, _callback);

    }

    /**
     * Return a list of genes for an affymetrix ID
     * 
     * @param affyId Affymetrix ID (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGenesByAffyIdUsingGET(String affyId, Integer speciesTypeKey) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGenesByAffyIdUsingGETWithHttpInfo(affyId, speciesTypeKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes for an affymetrix ID
     * 
     * @param affyId Affymetrix ID (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGenesByAffyIdUsingGETWithHttpInfo(String affyId, Integer speciesTypeKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesByAffyIdUsingGETValidateBeforeCall(affyId, speciesTypeKey, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes for an affymetrix ID (asynchronously)
     * 
     * @param affyId Affymetrix ID (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByAffyIdUsingGETAsync(String affyId, Integer speciesTypeKey, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesByAffyIdUsingGETValidateBeforeCall(affyId, speciesTypeKey, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesByAliasSymbolUsingGET
     * @param aliasSymbol Gene alias symbol (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByAliasSymbolUsingGETCall(String aliasSymbol, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/alias/{aliasSymbol}/{speciesTypeKey}"
            .replace("{" + "aliasSymbol" + "}", localVarApiClient.escapeString(aliasSymbol.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesByAliasSymbolUsingGETValidateBeforeCall(String aliasSymbol, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasSymbol' is set
        if (aliasSymbol == null) {
            throw new ApiException("Missing the required parameter 'aliasSymbol' when calling getGenesByAliasSymbolUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGenesByAliasSymbolUsingGET(Async)");
        }

        return getGenesByAliasSymbolUsingGETCall(aliasSymbol, speciesTypeKey, _callback);

    }

    /**
     * Return a list of genes for an alias and species
     * 
     * @param aliasSymbol Gene alias symbol (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGenesByAliasSymbolUsingGET(String aliasSymbol, Integer speciesTypeKey) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGenesByAliasSymbolUsingGETWithHttpInfo(aliasSymbol, speciesTypeKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes for an alias and species
     * 
     * @param aliasSymbol Gene alias symbol (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGenesByAliasSymbolUsingGETWithHttpInfo(String aliasSymbol, Integer speciesTypeKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesByAliasSymbolUsingGETValidateBeforeCall(aliasSymbol, speciesTypeKey, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes for an alias and species (asynchronously)
     * 
     * @param aliasSymbol Gene alias symbol (required)
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByAliasSymbolUsingGETAsync(String aliasSymbol, Integer speciesTypeKey, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesByAliasSymbolUsingGETValidateBeforeCall(aliasSymbol, speciesTypeKey, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesByKeywordUsingGET
     * @param keyword Search keyword (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByKeywordUsingGETCall(String keyword, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/keyword/{keyword}/{speciesTypeKey}"
            .replace("{" + "keyword" + "}", localVarApiClient.escapeString(keyword.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesByKeywordUsingGETValidateBeforeCall(String keyword, Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling getGenesByKeywordUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGenesByKeywordUsingGET(Async)");
        }

        return getGenesByKeywordUsingGETCall(keyword, speciesTypeKey, _callback);

    }

    /**
     * Return a list of genes by keyword and species type key
     * 
     * @param keyword Search keyword (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGenesByKeywordUsingGET(String keyword, Integer speciesTypeKey) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGenesByKeywordUsingGETWithHttpInfo(keyword, speciesTypeKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes by keyword and species type key
     * 
     * @param keyword Search keyword (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGenesByKeywordUsingGETWithHttpInfo(String keyword, Integer speciesTypeKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesByKeywordUsingGETValidateBeforeCall(keyword, speciesTypeKey, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes by keyword and species type key (asynchronously)
     * 
     * @param keyword Search keyword (required)
     * @param speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByKeywordUsingGETAsync(String keyword, Integer speciesTypeKey, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesByKeywordUsingGETValidateBeforeCall(keyword, speciesTypeKey, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesByPositionUsingGET
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByPositionUsingGETCall(String chr, Long start, Long stop, Integer mapKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/{chr}/{start}/{stop}/{mapKey}"
            .replace("{" + "chr" + "}", localVarApiClient.escapeString(chr.toString()))
            .replace("{" + "start" + "}", localVarApiClient.escapeString(start.toString()))
            .replace("{" + "stop" + "}", localVarApiClient.escapeString(stop.toString()))
            .replace("{" + "mapKey" + "}", localVarApiClient.escapeString(mapKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesByPositionUsingGETValidateBeforeCall(String chr, Long start, Long stop, Integer mapKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chr' is set
        if (chr == null) {
            throw new ApiException("Missing the required parameter 'chr' when calling getGenesByPositionUsingGET(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getGenesByPositionUsingGET(Async)");
        }

        // verify the required parameter 'stop' is set
        if (stop == null) {
            throw new ApiException("Missing the required parameter 'stop' when calling getGenesByPositionUsingGET(Async)");
        }

        // verify the required parameter 'mapKey' is set
        if (mapKey == null) {
            throw new ApiException("Missing the required parameter 'mapKey' when calling getGenesByPositionUsingGET(Async)");
        }

        return getGenesByPositionUsingGETCall(chr, start, stop, mapKey, _callback);

    }

    /**
     * Return a list of genes position and map key
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGenesByPositionUsingGET(String chr, Long start, Long stop, Integer mapKey) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGenesByPositionUsingGETWithHttpInfo(chr, start, stop, mapKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes position and map key
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGenesByPositionUsingGETWithHttpInfo(String chr, Long start, Long stop, Integer mapKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesByPositionUsingGETValidateBeforeCall(chr, start, stop, mapKey, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes position and map key (asynchronously)
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesByPositionUsingGETAsync(String chr, Long start, Long stop, Integer mapKey, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesByPositionUsingGETValidateBeforeCall(chr, start, stop, mapKey, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesBySpeciesUsingGET
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesBySpeciesUsingGETCall(Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/species/{speciesTypeKey}"
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesBySpeciesUsingGETValidateBeforeCall(Integer speciesTypeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getGenesBySpeciesUsingGET(Async)");
        }

        return getGenesBySpeciesUsingGETCall(speciesTypeKey, _callback);

    }

    /**
     * Return a list of all genes for a species in RGD
     * 
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Gene> getGenesBySpeciesUsingGET(Integer speciesTypeKey) throws ApiException {
        ApiResponse<List<Gene>> localVarResp = getGenesBySpeciesUsingGETWithHttpInfo(speciesTypeKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of all genes for a species in RGD
     * 
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Gene>> getGenesBySpeciesUsingGETWithHttpInfo(Integer speciesTypeKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesBySpeciesUsingGETValidateBeforeCall(speciesTypeKey, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of all genes for a species in RGD (asynchronously)
     * 
     * @param speciesTypeKey A list of RGD species type keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesBySpeciesUsingGETAsync(Integer speciesTypeKey, final ApiCallback<List<Gene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesBySpeciesUsingGETValidateBeforeCall(speciesTypeKey, _callback);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenesInRegionUsingGET
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesInRegionUsingGETCall(String chr, Long start, Long stop, Integer mapKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/region/{chr}/{start}/{stop}/{mapKey}"
            .replace("{" + "chr" + "}", localVarApiClient.escapeString(chr.toString()))
            .replace("{" + "start" + "}", localVarApiClient.escapeString(start.toString()))
            .replace("{" + "stop" + "}", localVarApiClient.escapeString(stop.toString()))
            .replace("{" + "mapKey" + "}", localVarApiClient.escapeString(mapKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenesInRegionUsingGETValidateBeforeCall(String chr, Long start, Long stop, Integer mapKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chr' is set
        if (chr == null) {
            throw new ApiException("Missing the required parameter 'chr' when calling getGenesInRegionUsingGET(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getGenesInRegionUsingGET(Async)");
        }

        // verify the required parameter 'stop' is set
        if (stop == null) {
            throw new ApiException("Missing the required parameter 'stop' when calling getGenesInRegionUsingGET(Async)");
        }

        // verify the required parameter 'mapKey' is set
        if (mapKey == null) {
            throw new ApiException("Missing the required parameter 'mapKey' when calling getGenesInRegionUsingGET(Async)");
        }

        return getGenesInRegionUsingGETCall(chr, start, stop, mapKey, _callback);

    }

    /**
     * Return a list of genes in region
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return List&lt;MappedGenePosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<MappedGenePosition> getGenesInRegionUsingGET(String chr, Long start, Long stop, Integer mapKey) throws ApiException {
        ApiResponse<List<MappedGenePosition>> localVarResp = getGenesInRegionUsingGETWithHttpInfo(chr, start, stop, mapKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes in region
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;MappedGenePosition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MappedGenePosition>> getGenesInRegionUsingGETWithHttpInfo(String chr, Long start, Long stop, Integer mapKey) throws ApiException {
        okhttp3.Call localVarCall = getGenesInRegionUsingGETValidateBeforeCall(chr, start, stop, mapKey, null);
        Type localVarReturnType = new TypeToken<List<MappedGenePosition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes in region (asynchronously)
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenesInRegionUsingGETAsync(String chr, Long start, Long stop, Integer mapKey, final ApiCallback<List<MappedGenePosition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenesInRegionUsingGETValidateBeforeCall(chr, start, stop, mapKey, _callback);
        Type localVarReturnType = new TypeToken<List<MappedGenePosition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMappedGenesByPositionUsingGET
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappedGenesByPositionUsingGETCall(String chr, Long start, Long stop, Integer mapKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/mapped/{chr}/{start}/{stop}/{mapKey}"
            .replace("{" + "chr" + "}", localVarApiClient.escapeString(chr.toString()))
            .replace("{" + "start" + "}", localVarApiClient.escapeString(start.toString()))
            .replace("{" + "stop" + "}", localVarApiClient.escapeString(stop.toString()))
            .replace("{" + "mapKey" + "}", localVarApiClient.escapeString(mapKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappedGenesByPositionUsingGETValidateBeforeCall(String chr, Long start, Long stop, Integer mapKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chr' is set
        if (chr == null) {
            throw new ApiException("Missing the required parameter 'chr' when calling getMappedGenesByPositionUsingGET(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getMappedGenesByPositionUsingGET(Async)");
        }

        // verify the required parameter 'stop' is set
        if (stop == null) {
            throw new ApiException("Missing the required parameter 'stop' when calling getMappedGenesByPositionUsingGET(Async)");
        }

        // verify the required parameter 'mapKey' is set
        if (mapKey == null) {
            throw new ApiException("Missing the required parameter 'mapKey' when calling getMappedGenesByPositionUsingGET(Async)");
        }

        return getMappedGenesByPositionUsingGETCall(chr, start, stop, mapKey, _callback);

    }

    /**
     * Return a list of genes position and map key
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return List&lt;MappedGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<MappedGene> getMappedGenesByPositionUsingGET(String chr, Long start, Long stop, Integer mapKey) throws ApiException {
        ApiResponse<List<MappedGene>> localVarResp = getMappedGenesByPositionUsingGETWithHttpInfo(chr, start, stop, mapKey);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes position and map key
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @return ApiResponse&lt;List&lt;MappedGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MappedGene>> getMappedGenesByPositionUsingGETWithHttpInfo(String chr, Long start, Long stop, Integer mapKey) throws ApiException {
        okhttp3.Call localVarCall = getMappedGenesByPositionUsingGETValidateBeforeCall(chr, start, stop, mapKey, null);
        Type localVarReturnType = new TypeToken<List<MappedGene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes position and map key (asynchronously)
     * 
     * @param chr Chromosome (required)
     * @param start Start Position (required)
     * @param stop Stop Position (required)
     * @param mapKey A list of RGD assembly map keys can be found in the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappedGenesByPositionUsingGETAsync(String chr, Long start, Long stop, Integer mapKey, final ApiCallback<List<MappedGene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappedGenesByPositionUsingGETValidateBeforeCall(chr, start, stop, mapKey, _callback);
        Type localVarReturnType = new TypeToken<List<MappedGene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrthologsByListUsingPOST
     * @param orthologRequest orthologRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrthologsByListUsingPOSTCall(OrthologRequest orthologRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orthologRequest;

        // create path and map variables
        String localVarPath = "/genes/orthologs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrthologsByListUsingPOSTValidateBeforeCall(OrthologRequest orthologRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orthologRequest' is set
        if (orthologRequest == null) {
            throw new ApiException("Missing the required parameter 'orthologRequest' when calling getOrthologsByListUsingPOST(Async)");
        }

        return getOrthologsByListUsingPOSTCall(orthologRequest, _callback);

    }

    /**
     * Return a list of gene orthologs
     * 
     * @param orthologRequest orthologRequest (required)
     * @return Map&lt;String, List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Gene>> getOrthologsByListUsingPOST(OrthologRequest orthologRequest) throws ApiException {
        ApiResponse<Map<String, List<Gene>>> localVarResp = getOrthologsByListUsingPOSTWithHttpInfo(orthologRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of gene orthologs
     * 
     * @param orthologRequest orthologRequest (required)
     * @return ApiResponse&lt;Map&lt;String, List&lt;Gene&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Gene>>> getOrthologsByListUsingPOSTWithHttpInfo(OrthologRequest orthologRequest) throws ApiException {
        okhttp3.Call localVarCall = getOrthologsByListUsingPOSTValidateBeforeCall(orthologRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, List<Gene>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of gene orthologs (asynchronously)
     * 
     * @param orthologRequest orthologRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrthologsByListUsingPOSTAsync(OrthologRequest orthologRequest, final ApiCallback<Map<String, List<Gene>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrthologsByListUsingPOSTValidateBeforeCall(orthologRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Gene>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
