/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TermXRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Term
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Term {
  public static final String SERIALIZED_NAME_ACC_ID = "accId";
  @SerializedName(SERIALIZED_NAME_ACC_ID)
  private String accId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  public static final String SERIALIZED_NAME_OBSOLETE = "obsolete";
  @SerializedName(SERIALIZED_NAME_OBSOLETE)
  private Integer obsolete;

  public static final String SERIALIZED_NAME_ONTOLOGY_ID = "ontologyId";
  @SerializedName(SERIALIZED_NAME_ONTOLOGY_ID)
  private String ontologyId;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_XREFS = "xrefs";
  @SerializedName(SERIALIZED_NAME_XREFS)
  private List<TermXRef> xrefs = new ArrayList<>();

  public Term() {
  }

  public Term accId(String accId) {
    this.accId = accId;
    return this;
  }

  /**
   * Get accId
   * @return accId
   */
  @javax.annotation.Nullable
  public String getAccId() {
    return accId;
  }

  public void setAccId(String accId) {
    this.accId = accId;
  }


  public Term comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Term createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Term creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Term definition(String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public Term modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * Get modificationDate
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public Term obsolete(Integer obsolete) {
    this.obsolete = obsolete;
    return this;
  }

  /**
   * Get obsolete
   * @return obsolete
   */
  @javax.annotation.Nullable
  public Integer getObsolete() {
    return obsolete;
  }

  public void setObsolete(Integer obsolete) {
    this.obsolete = obsolete;
  }


  public Term ontologyId(String ontologyId) {
    this.ontologyId = ontologyId;
    return this;
  }

  /**
   * Get ontologyId
   * @return ontologyId
   */
  @javax.annotation.Nullable
  public String getOntologyId() {
    return ontologyId;
  }

  public void setOntologyId(String ontologyId) {
    this.ontologyId = ontologyId;
  }


  public Term term(String term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }


  public Term xrefs(List<TermXRef> xrefs) {
    this.xrefs = xrefs;
    return this;
  }

  public Term addXrefsItem(TermXRef xrefsItem) {
    if (this.xrefs == null) {
      this.xrefs = new ArrayList<>();
    }
    this.xrefs.add(xrefsItem);
    return this;
  }

  /**
   * Get xrefs
   * @return xrefs
   */
  @javax.annotation.Nullable
  public List<TermXRef> getXrefs() {
    return xrefs;
  }

  public void setXrefs(List<TermXRef> xrefs) {
    this.xrefs = xrefs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Term term = (Term) o;
    return Objects.equals(this.accId, term.accId) &&
        Objects.equals(this.comment, term.comment) &&
        Objects.equals(this.createdBy, term.createdBy) &&
        Objects.equals(this.creationDate, term.creationDate) &&
        Objects.equals(this.definition, term.definition) &&
        Objects.equals(this.modificationDate, term.modificationDate) &&
        Objects.equals(this.obsolete, term.obsolete) &&
        Objects.equals(this.ontologyId, term.ontologyId) &&
        Objects.equals(this.term, term.term) &&
        Objects.equals(this.xrefs, term.xrefs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accId, comment, createdBy, creationDate, definition, modificationDate, obsolete, ontologyId, term, xrefs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Term {\n");
    sb.append("    accId: ").append(toIndentedString(accId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    obsolete: ").append(toIndentedString(obsolete)).append("\n");
    sb.append("    ontologyId: ").append(toIndentedString(ontologyId)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    xrefs: ").append(toIndentedString(xrefs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accId");
    openapiFields.add("comment");
    openapiFields.add("createdBy");
    openapiFields.add("creationDate");
    openapiFields.add("definition");
    openapiFields.add("modificationDate");
    openapiFields.add("obsolete");
    openapiFields.add("ontologyId");
    openapiFields.add("term");
    openapiFields.add("xrefs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Term
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Term.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Term is not found in the empty JSON string", Term.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Term.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Term` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accId") != null && !jsonObj.get("accId").isJsonNull()) && !jsonObj.get("accId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accId").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) && !jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      if ((jsonObj.get("ontologyId") != null && !jsonObj.get("ontologyId").isJsonNull()) && !jsonObj.get("ontologyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ontologyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ontologyId").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
      if (jsonObj.get("xrefs") != null && !jsonObj.get("xrefs").isJsonNull()) {
        JsonArray jsonArrayxrefs = jsonObj.getAsJsonArray("xrefs");
        if (jsonArrayxrefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("xrefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `xrefs` to be an array in the JSON string but got `%s`", jsonObj.get("xrefs").toString()));
          }

          // validate the optional field `xrefs` (array)
          for (int i = 0; i < jsonArrayxrefs.size(); i++) {
            TermXRef.validateJsonElement(jsonArrayxrefs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Term.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Term' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Term> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Term.class));

       return (TypeAdapter<T>) new TypeAdapter<Term>() {
           @Override
           public void write(JsonWriter out, Term value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Term read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Term given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Term
   * @throws IOException if the JSON string is invalid with respect to Term
   */
  public static Term fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Term.class);
  }

  /**
   * Convert an instance of Term to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

