/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QTL
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QTL {
  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_FLANK1_RGD_ID = "flank1RgdId";
  @SerializedName(SERIALIZED_NAME_FLANK1_RGD_ID)
  private Integer flank1RgdId;

  public static final String SERIALIZED_NAME_FLANK2_RGD_ID = "flank2RgdId";
  @SerializedName(SERIALIZED_NAME_FLANK2_RGD_ID)
  private Integer flank2RgdId;

  public static final String SERIALIZED_NAME_INHERITANCE_TYPE = "inheritanceType";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_TYPE)
  private String inheritanceType;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_LINKAGE_IMAGE = "linkageImage";
  @SerializedName(SERIALIZED_NAME_LINKAGE_IMAGE)
  private String linkageImage;

  public static final String SERIALIZED_NAME_LOD = "lod";
  @SerializedName(SERIALIZED_NAME_LOD)
  private Double lod;

  public static final String SERIALIZED_NAME_LOD_IMAGE = "lodImage";
  @SerializedName(SERIALIZED_NAME_LOD_IMAGE)
  private String lodImage;

  public static final String SERIALIZED_NAME_MOST_SIGNIFICANT_CMO_TERM = "mostSignificantCmoTerm";
  @SerializedName(SERIALIZED_NAME_MOST_SIGNIFICANT_CMO_TERM)
  private String mostSignificantCmoTerm;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PEAK_OFFSET = "peakOffset";
  @SerializedName(SERIALIZED_NAME_PEAK_OFFSET)
  private Integer peakOffset;

  public static final String SERIALIZED_NAME_PEAK_RGD_ID = "peakRgdId";
  @SerializedName(SERIALIZED_NAME_PEAK_RGD_ID)
  private Integer peakRgdId;

  public static final String SERIALIZED_NAME_PVALUE = "pvalue";
  @SerializedName(SERIALIZED_NAME_PVALUE)
  private Double pvalue;

  public static final String SERIALIZED_NAME_RGD_ID = "rgdId";
  @SerializedName(SERIALIZED_NAME_RGD_ID)
  private Integer rgdId;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_SPECIES_TYPE_KEY = "speciesTypeKey";
  @SerializedName(SERIALIZED_NAME_SPECIES_TYPE_KEY)
  private Integer speciesTypeKey;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_VARIANCE = "variance";
  @SerializedName(SERIALIZED_NAME_VARIANCE)
  private Double variance;

  public QTL() {
  }

  public QTL chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

  /**
   * Get chromosome
   * @return chromosome
   */
  @javax.annotation.Nullable
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public QTL flank1RgdId(Integer flank1RgdId) {
    this.flank1RgdId = flank1RgdId;
    return this;
  }

  /**
   * Get flank1RgdId
   * @return flank1RgdId
   */
  @javax.annotation.Nullable
  public Integer getFlank1RgdId() {
    return flank1RgdId;
  }

  public void setFlank1RgdId(Integer flank1RgdId) {
    this.flank1RgdId = flank1RgdId;
  }


  public QTL flank2RgdId(Integer flank2RgdId) {
    this.flank2RgdId = flank2RgdId;
    return this;
  }

  /**
   * Get flank2RgdId
   * @return flank2RgdId
   */
  @javax.annotation.Nullable
  public Integer getFlank2RgdId() {
    return flank2RgdId;
  }

  public void setFlank2RgdId(Integer flank2RgdId) {
    this.flank2RgdId = flank2RgdId;
  }


  public QTL inheritanceType(String inheritanceType) {
    this.inheritanceType = inheritanceType;
    return this;
  }

  /**
   * Get inheritanceType
   * @return inheritanceType
   */
  @javax.annotation.Nullable
  public String getInheritanceType() {
    return inheritanceType;
  }

  public void setInheritanceType(String inheritanceType) {
    this.inheritanceType = inheritanceType;
  }


  public QTL key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public QTL linkageImage(String linkageImage) {
    this.linkageImage = linkageImage;
    return this;
  }

  /**
   * Get linkageImage
   * @return linkageImage
   */
  @javax.annotation.Nullable
  public String getLinkageImage() {
    return linkageImage;
  }

  public void setLinkageImage(String linkageImage) {
    this.linkageImage = linkageImage;
  }


  public QTL lod(Double lod) {
    this.lod = lod;
    return this;
  }

  /**
   * Get lod
   * @return lod
   */
  @javax.annotation.Nullable
  public Double getLod() {
    return lod;
  }

  public void setLod(Double lod) {
    this.lod = lod;
  }


  public QTL lodImage(String lodImage) {
    this.lodImage = lodImage;
    return this;
  }

  /**
   * Get lodImage
   * @return lodImage
   */
  @javax.annotation.Nullable
  public String getLodImage() {
    return lodImage;
  }

  public void setLodImage(String lodImage) {
    this.lodImage = lodImage;
  }


  public QTL mostSignificantCmoTerm(String mostSignificantCmoTerm) {
    this.mostSignificantCmoTerm = mostSignificantCmoTerm;
    return this;
  }

  /**
   * Get mostSignificantCmoTerm
   * @return mostSignificantCmoTerm
   */
  @javax.annotation.Nullable
  public String getMostSignificantCmoTerm() {
    return mostSignificantCmoTerm;
  }

  public void setMostSignificantCmoTerm(String mostSignificantCmoTerm) {
    this.mostSignificantCmoTerm = mostSignificantCmoTerm;
  }


  public QTL name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public QTL notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public QTL peakOffset(Integer peakOffset) {
    this.peakOffset = peakOffset;
    return this;
  }

  /**
   * Get peakOffset
   * @return peakOffset
   */
  @javax.annotation.Nullable
  public Integer getPeakOffset() {
    return peakOffset;
  }

  public void setPeakOffset(Integer peakOffset) {
    this.peakOffset = peakOffset;
  }


  public QTL peakRgdId(Integer peakRgdId) {
    this.peakRgdId = peakRgdId;
    return this;
  }

  /**
   * Get peakRgdId
   * @return peakRgdId
   */
  @javax.annotation.Nullable
  public Integer getPeakRgdId() {
    return peakRgdId;
  }

  public void setPeakRgdId(Integer peakRgdId) {
    this.peakRgdId = peakRgdId;
  }


  public QTL pvalue(Double pvalue) {
    this.pvalue = pvalue;
    return this;
  }

  /**
   * Get pvalue
   * @return pvalue
   */
  @javax.annotation.Nullable
  public Double getPvalue() {
    return pvalue;
  }

  public void setPvalue(Double pvalue) {
    this.pvalue = pvalue;
  }


  public QTL rgdId(Integer rgdId) {
    this.rgdId = rgdId;
    return this;
  }

  /**
   * Get rgdId
   * @return rgdId
   */
  @javax.annotation.Nullable
  public Integer getRgdId() {
    return rgdId;
  }

  public void setRgdId(Integer rgdId) {
    this.rgdId = rgdId;
  }


  public QTL sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Get sourceUrl
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public QTL speciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
    return this;
  }

  /**
   * Get speciesTypeKey
   * @return speciesTypeKey
   */
  @javax.annotation.Nullable
  public Integer getSpeciesTypeKey() {
    return speciesTypeKey;
  }

  public void setSpeciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
  }


  public QTL symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public QTL variance(Double variance) {
    this.variance = variance;
    return this;
  }

  /**
   * Get variance
   * @return variance
   */
  @javax.annotation.Nullable
  public Double getVariance() {
    return variance;
  }

  public void setVariance(Double variance) {
    this.variance = variance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QTL QTL = (QTL) o;
    return Objects.equals(this.chromosome, QTL.chromosome) &&
        Objects.equals(this.flank1RgdId, QTL.flank1RgdId) &&
        Objects.equals(this.flank2RgdId, QTL.flank2RgdId) &&
        Objects.equals(this.inheritanceType, QTL.inheritanceType) &&
        Objects.equals(this.key, QTL.key) &&
        Objects.equals(this.linkageImage, QTL.linkageImage) &&
        Objects.equals(this.lod, QTL.lod) &&
        Objects.equals(this.lodImage, QTL.lodImage) &&
        Objects.equals(this.mostSignificantCmoTerm, QTL.mostSignificantCmoTerm) &&
        Objects.equals(this.name, QTL.name) &&
        Objects.equals(this.notes, QTL.notes) &&
        Objects.equals(this.peakOffset, QTL.peakOffset) &&
        Objects.equals(this.peakRgdId, QTL.peakRgdId) &&
        Objects.equals(this.pvalue, QTL.pvalue) &&
        Objects.equals(this.rgdId, QTL.rgdId) &&
        Objects.equals(this.sourceUrl, QTL.sourceUrl) &&
        Objects.equals(this.speciesTypeKey, QTL.speciesTypeKey) &&
        Objects.equals(this.symbol, QTL.symbol) &&
        Objects.equals(this.variance, QTL.variance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromosome, flank1RgdId, flank2RgdId, inheritanceType, key, linkageImage, lod, lodImage, mostSignificantCmoTerm, name, notes, peakOffset, peakRgdId, pvalue, rgdId, sourceUrl, speciesTypeKey, symbol, variance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QTL {\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    flank1RgdId: ").append(toIndentedString(flank1RgdId)).append("\n");
    sb.append("    flank2RgdId: ").append(toIndentedString(flank2RgdId)).append("\n");
    sb.append("    inheritanceType: ").append(toIndentedString(inheritanceType)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    linkageImage: ").append(toIndentedString(linkageImage)).append("\n");
    sb.append("    lod: ").append(toIndentedString(lod)).append("\n");
    sb.append("    lodImage: ").append(toIndentedString(lodImage)).append("\n");
    sb.append("    mostSignificantCmoTerm: ").append(toIndentedString(mostSignificantCmoTerm)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    peakOffset: ").append(toIndentedString(peakOffset)).append("\n");
    sb.append("    peakRgdId: ").append(toIndentedString(peakRgdId)).append("\n");
    sb.append("    pvalue: ").append(toIndentedString(pvalue)).append("\n");
    sb.append("    rgdId: ").append(toIndentedString(rgdId)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    speciesTypeKey: ").append(toIndentedString(speciesTypeKey)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    variance: ").append(toIndentedString(variance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromosome");
    openapiFields.add("flank1RgdId");
    openapiFields.add("flank2RgdId");
    openapiFields.add("inheritanceType");
    openapiFields.add("key");
    openapiFields.add("linkageImage");
    openapiFields.add("lod");
    openapiFields.add("lodImage");
    openapiFields.add("mostSignificantCmoTerm");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("peakOffset");
    openapiFields.add("peakRgdId");
    openapiFields.add("pvalue");
    openapiFields.add("rgdId");
    openapiFields.add("sourceUrl");
    openapiFields.add("speciesTypeKey");
    openapiFields.add("symbol");
    openapiFields.add("variance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QTL
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QTL.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QTL is not found in the empty JSON string", QTL.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QTL.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QTL` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chromosome") != null && !jsonObj.get("chromosome").isJsonNull()) && !jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      if ((jsonObj.get("inheritanceType") != null && !jsonObj.get("inheritanceType").isJsonNull()) && !jsonObj.get("inheritanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inheritanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inheritanceType").toString()));
      }
      if ((jsonObj.get("linkageImage") != null && !jsonObj.get("linkageImage").isJsonNull()) && !jsonObj.get("linkageImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkageImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkageImage").toString()));
      }
      if ((jsonObj.get("lodImage") != null && !jsonObj.get("lodImage").isJsonNull()) && !jsonObj.get("lodImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lodImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lodImage").toString()));
      }
      if ((jsonObj.get("mostSignificantCmoTerm") != null && !jsonObj.get("mostSignificantCmoTerm").isJsonNull()) && !jsonObj.get("mostSignificantCmoTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mostSignificantCmoTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mostSignificantCmoTerm").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonNull()) && !jsonObj.get("sourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUrl").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QTL.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QTL' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QTL> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QTL.class));

       return (TypeAdapter<T>) new TypeAdapter<QTL>() {
           @Override
           public void write(JsonWriter out, QTL value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QTL read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QTL given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QTL
   * @throws IOException if the JSON string is invalid with respect to QTL
   */
  public static QTL fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QTL.class);
  }

  /**
   * Convert an instance of QTL to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

