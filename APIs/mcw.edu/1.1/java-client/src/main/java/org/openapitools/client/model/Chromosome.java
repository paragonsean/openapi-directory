/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Chromosome
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Chromosome {
  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_CONTIG_COUNT = "contigCount";
  @SerializedName(SERIALIZED_NAME_CONTIG_COUNT)
  private Integer contigCount;

  public static final String SERIALIZED_NAME_GAP_COUNT = "gapCount";
  @SerializedName(SERIALIZED_NAME_GAP_COUNT)
  private Integer gapCount;

  public static final String SERIALIZED_NAME_GAP_LENGTH = "gapLength";
  @SerializedName(SERIALIZED_NAME_GAP_LENGTH)
  private Integer gapLength;

  public static final String SERIALIZED_NAME_GENBANK_ID = "genbankId";
  @SerializedName(SERIALIZED_NAME_GENBANK_ID)
  private String genbankId;

  public static final String SERIALIZED_NAME_MAP_KEY = "mapKey";
  @SerializedName(SERIALIZED_NAME_MAP_KEY)
  private Integer mapKey;

  public static final String SERIALIZED_NAME_ORDINAL_NUMBER = "ordinalNumber";
  @SerializedName(SERIALIZED_NAME_ORDINAL_NUMBER)
  private Integer ordinalNumber;

  public static final String SERIALIZED_NAME_REFSEQ_ID = "refseqId";
  @SerializedName(SERIALIZED_NAME_REFSEQ_ID)
  private String refseqId;

  public static final String SERIALIZED_NAME_SEQ_LENGTH = "seqLength";
  @SerializedName(SERIALIZED_NAME_SEQ_LENGTH)
  private Integer seqLength;

  public Chromosome() {
  }

  public Chromosome chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

  /**
   * Get chromosome
   * @return chromosome
   */
  @javax.annotation.Nullable
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public Chromosome contigCount(Integer contigCount) {
    this.contigCount = contigCount;
    return this;
  }

  /**
   * Get contigCount
   * @return contigCount
   */
  @javax.annotation.Nullable
  public Integer getContigCount() {
    return contigCount;
  }

  public void setContigCount(Integer contigCount) {
    this.contigCount = contigCount;
  }


  public Chromosome gapCount(Integer gapCount) {
    this.gapCount = gapCount;
    return this;
  }

  /**
   * Get gapCount
   * @return gapCount
   */
  @javax.annotation.Nullable
  public Integer getGapCount() {
    return gapCount;
  }

  public void setGapCount(Integer gapCount) {
    this.gapCount = gapCount;
  }


  public Chromosome gapLength(Integer gapLength) {
    this.gapLength = gapLength;
    return this;
  }

  /**
   * Get gapLength
   * @return gapLength
   */
  @javax.annotation.Nullable
  public Integer getGapLength() {
    return gapLength;
  }

  public void setGapLength(Integer gapLength) {
    this.gapLength = gapLength;
  }


  public Chromosome genbankId(String genbankId) {
    this.genbankId = genbankId;
    return this;
  }

  /**
   * Get genbankId
   * @return genbankId
   */
  @javax.annotation.Nullable
  public String getGenbankId() {
    return genbankId;
  }

  public void setGenbankId(String genbankId) {
    this.genbankId = genbankId;
  }


  public Chromosome mapKey(Integer mapKey) {
    this.mapKey = mapKey;
    return this;
  }

  /**
   * Get mapKey
   * @return mapKey
   */
  @javax.annotation.Nullable
  public Integer getMapKey() {
    return mapKey;
  }

  public void setMapKey(Integer mapKey) {
    this.mapKey = mapKey;
  }


  public Chromosome ordinalNumber(Integer ordinalNumber) {
    this.ordinalNumber = ordinalNumber;
    return this;
  }

  /**
   * Get ordinalNumber
   * @return ordinalNumber
   */
  @javax.annotation.Nullable
  public Integer getOrdinalNumber() {
    return ordinalNumber;
  }

  public void setOrdinalNumber(Integer ordinalNumber) {
    this.ordinalNumber = ordinalNumber;
  }


  public Chromosome refseqId(String refseqId) {
    this.refseqId = refseqId;
    return this;
  }

  /**
   * Get refseqId
   * @return refseqId
   */
  @javax.annotation.Nullable
  public String getRefseqId() {
    return refseqId;
  }

  public void setRefseqId(String refseqId) {
    this.refseqId = refseqId;
  }


  public Chromosome seqLength(Integer seqLength) {
    this.seqLength = seqLength;
    return this;
  }

  /**
   * Get seqLength
   * @return seqLength
   */
  @javax.annotation.Nullable
  public Integer getSeqLength() {
    return seqLength;
  }

  public void setSeqLength(Integer seqLength) {
    this.seqLength = seqLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chromosome chromosome = (Chromosome) o;
    return Objects.equals(this.chromosome, chromosome.chromosome) &&
        Objects.equals(this.contigCount, chromosome.contigCount) &&
        Objects.equals(this.gapCount, chromosome.gapCount) &&
        Objects.equals(this.gapLength, chromosome.gapLength) &&
        Objects.equals(this.genbankId, chromosome.genbankId) &&
        Objects.equals(this.mapKey, chromosome.mapKey) &&
        Objects.equals(this.ordinalNumber, chromosome.ordinalNumber) &&
        Objects.equals(this.refseqId, chromosome.refseqId) &&
        Objects.equals(this.seqLength, chromosome.seqLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromosome, contigCount, gapCount, gapLength, genbankId, mapKey, ordinalNumber, refseqId, seqLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chromosome {\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    contigCount: ").append(toIndentedString(contigCount)).append("\n");
    sb.append("    gapCount: ").append(toIndentedString(gapCount)).append("\n");
    sb.append("    gapLength: ").append(toIndentedString(gapLength)).append("\n");
    sb.append("    genbankId: ").append(toIndentedString(genbankId)).append("\n");
    sb.append("    mapKey: ").append(toIndentedString(mapKey)).append("\n");
    sb.append("    ordinalNumber: ").append(toIndentedString(ordinalNumber)).append("\n");
    sb.append("    refseqId: ").append(toIndentedString(refseqId)).append("\n");
    sb.append("    seqLength: ").append(toIndentedString(seqLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromosome");
    openapiFields.add("contigCount");
    openapiFields.add("gapCount");
    openapiFields.add("gapLength");
    openapiFields.add("genbankId");
    openapiFields.add("mapKey");
    openapiFields.add("ordinalNumber");
    openapiFields.add("refseqId");
    openapiFields.add("seqLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Chromosome
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Chromosome.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Chromosome is not found in the empty JSON string", Chromosome.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Chromosome.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Chromosome` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chromosome") != null && !jsonObj.get("chromosome").isJsonNull()) && !jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      if ((jsonObj.get("genbankId") != null && !jsonObj.get("genbankId").isJsonNull()) && !jsonObj.get("genbankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genbankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genbankId").toString()));
      }
      if ((jsonObj.get("refseqId") != null && !jsonObj.get("refseqId").isJsonNull()) && !jsonObj.get("refseqId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refseqId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refseqId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Chromosome.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Chromosome' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Chromosome> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Chromosome.class));

       return (TypeAdapter<T>) new TypeAdapter<Chromosome>() {
           @Override
           public void write(JsonWriter out, Chromosome value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Chromosome read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Chromosome given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Chromosome
   * @throws IOException if the JSON string is invalid with respect to Chromosome
   */
  public static Chromosome fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Chromosome.class);
  }

  /**
   * Convert an instance of Chromosome to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

