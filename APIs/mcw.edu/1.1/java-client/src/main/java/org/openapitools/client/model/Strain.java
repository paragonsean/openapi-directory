/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Strain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Strain {
  public static final String SERIALIZED_NAME_BACKGROUND_STRAIN_RGD_ID = "backgroundStrainRgdId";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_STRAIN_RGD_ID)
  private Integer backgroundStrainRgdId;

  public static final String SERIALIZED_NAME_CHR_ALTERED = "chrAltered";
  @SerializedName(SERIALIZED_NAME_CHR_ALTERED)
  private String chrAltered;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_GENETIC_STATUS = "geneticStatus";
  @SerializedName(SERIALIZED_NAME_GENETIC_STATUS)
  private String geneticStatus;

  public static final String SERIALIZED_NAME_GENETICS = "genetics";
  @SerializedName(SERIALIZED_NAME_GENETICS)
  private String genetics;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_INBRED_GEN = "inbredGen";
  @SerializedName(SERIALIZED_NAME_INBRED_GEN)
  private String inbredGen;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_LAST_STATUS = "lastStatus";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS)
  private String lastStatus;

  public static final String SERIALIZED_NAME_LAST_STATUS_OBJECT = "lastStatusObject";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_OBJECT)
  private Status lastStatusObject;

  public static final String SERIALIZED_NAME_MODIFICATION_METHOD = "modificationMethod";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_METHOD)
  private String modificationMethod;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_RESEARCH_USE = "researchUse";
  @SerializedName(SERIALIZED_NAME_RESEARCH_USE)
  private String researchUse;

  public static final String SERIALIZED_NAME_RGD_ID = "rgdId";
  @SerializedName(SERIALIZED_NAME_RGD_ID)
  private Integer rgdId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SPECIES_TYPE_KEY = "speciesTypeKey";
  @SerializedName(SERIALIZED_NAME_SPECIES_TYPE_KEY)
  private Integer speciesTypeKey;

  public static final String SERIALIZED_NAME_STATUS_LOG = "statusLog";
  @SerializedName(SERIALIZED_NAME_STATUS_LOG)
  private List<Status> statusLog = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRAIN = "strain";
  @SerializedName(SERIALIZED_NAME_STRAIN)
  private String strain;

  public static final String SERIALIZED_NAME_STRAIN_TYPE_NAME = "strainTypeName";
  @SerializedName(SERIALIZED_NAME_STRAIN_TYPE_NAME)
  private String strainTypeName;

  public static final String SERIALIZED_NAME_SUBSTRAIN = "substrain";
  @SerializedName(SERIALIZED_NAME_SUBSTRAIN)
  private String substrain;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public Strain() {
  }

  public Strain backgroundStrainRgdId(Integer backgroundStrainRgdId) {
    this.backgroundStrainRgdId = backgroundStrainRgdId;
    return this;
  }

  /**
   * Get backgroundStrainRgdId
   * @return backgroundStrainRgdId
   */
  @javax.annotation.Nullable
  public Integer getBackgroundStrainRgdId() {
    return backgroundStrainRgdId;
  }

  public void setBackgroundStrainRgdId(Integer backgroundStrainRgdId) {
    this.backgroundStrainRgdId = backgroundStrainRgdId;
  }


  public Strain chrAltered(String chrAltered) {
    this.chrAltered = chrAltered;
    return this;
  }

  /**
   * Get chrAltered
   * @return chrAltered
   */
  @javax.annotation.Nullable
  public String getChrAltered() {
    return chrAltered;
  }

  public void setChrAltered(String chrAltered) {
    this.chrAltered = chrAltered;
  }


  public Strain color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public Strain geneticStatus(String geneticStatus) {
    this.geneticStatus = geneticStatus;
    return this;
  }

  /**
   * Get geneticStatus
   * @return geneticStatus
   */
  @javax.annotation.Nullable
  public String getGeneticStatus() {
    return geneticStatus;
  }

  public void setGeneticStatus(String geneticStatus) {
    this.geneticStatus = geneticStatus;
  }


  public Strain genetics(String genetics) {
    this.genetics = genetics;
    return this;
  }

  /**
   * Get genetics
   * @return genetics
   */
  @javax.annotation.Nullable
  public String getGenetics() {
    return genetics;
  }

  public void setGenetics(String genetics) {
    this.genetics = genetics;
  }


  public Strain imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Strain inbredGen(String inbredGen) {
    this.inbredGen = inbredGen;
    return this;
  }

  /**
   * Get inbredGen
   * @return inbredGen
   */
  @javax.annotation.Nullable
  public String getInbredGen() {
    return inbredGen;
  }

  public void setInbredGen(String inbredGen) {
    this.inbredGen = inbredGen;
  }


  public Strain key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public Strain lastStatus(String lastStatus) {
    this.lastStatus = lastStatus;
    return this;
  }

  /**
   * Get lastStatus
   * @return lastStatus
   */
  @javax.annotation.Nullable
  public String getLastStatus() {
    return lastStatus;
  }

  public void setLastStatus(String lastStatus) {
    this.lastStatus = lastStatus;
  }


  public Strain lastStatusObject(Status lastStatusObject) {
    this.lastStatusObject = lastStatusObject;
    return this;
  }

  /**
   * Get lastStatusObject
   * @return lastStatusObject
   */
  @javax.annotation.Nullable
  public Status getLastStatusObject() {
    return lastStatusObject;
  }

  public void setLastStatusObject(Status lastStatusObject) {
    this.lastStatusObject = lastStatusObject;
  }


  public Strain modificationMethod(String modificationMethod) {
    this.modificationMethod = modificationMethod;
    return this;
  }

  /**
   * Get modificationMethod
   * @return modificationMethod
   */
  @javax.annotation.Nullable
  public String getModificationMethod() {
    return modificationMethod;
  }

  public void setModificationMethod(String modificationMethod) {
    this.modificationMethod = modificationMethod;
  }


  public Strain name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Strain notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Strain origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public Strain researchUse(String researchUse) {
    this.researchUse = researchUse;
    return this;
  }

  /**
   * Get researchUse
   * @return researchUse
   */
  @javax.annotation.Nullable
  public String getResearchUse() {
    return researchUse;
  }

  public void setResearchUse(String researchUse) {
    this.researchUse = researchUse;
  }


  public Strain rgdId(Integer rgdId) {
    this.rgdId = rgdId;
    return this;
  }

  /**
   * Get rgdId
   * @return rgdId
   */
  @javax.annotation.Nullable
  public Integer getRgdId() {
    return rgdId;
  }

  public void setRgdId(Integer rgdId) {
    this.rgdId = rgdId;
  }


  public Strain source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Strain speciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
    return this;
  }

  /**
   * Get speciesTypeKey
   * @return speciesTypeKey
   */
  @javax.annotation.Nullable
  public Integer getSpeciesTypeKey() {
    return speciesTypeKey;
  }

  public void setSpeciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
  }


  public Strain statusLog(List<Status> statusLog) {
    this.statusLog = statusLog;
    return this;
  }

  public Strain addStatusLogItem(Status statusLogItem) {
    if (this.statusLog == null) {
      this.statusLog = new ArrayList<>();
    }
    this.statusLog.add(statusLogItem);
    return this;
  }

  /**
   * Get statusLog
   * @return statusLog
   */
  @javax.annotation.Nullable
  public List<Status> getStatusLog() {
    return statusLog;
  }

  public void setStatusLog(List<Status> statusLog) {
    this.statusLog = statusLog;
  }


  public Strain strain(String strain) {
    this.strain = strain;
    return this;
  }

  /**
   * Get strain
   * @return strain
   */
  @javax.annotation.Nullable
  public String getStrain() {
    return strain;
  }

  public void setStrain(String strain) {
    this.strain = strain;
  }


  public Strain strainTypeName(String strainTypeName) {
    this.strainTypeName = strainTypeName;
    return this;
  }

  /**
   * Get strainTypeName
   * @return strainTypeName
   */
  @javax.annotation.Nullable
  public String getStrainTypeName() {
    return strainTypeName;
  }

  public void setStrainTypeName(String strainTypeName) {
    this.strainTypeName = strainTypeName;
  }


  public Strain substrain(String substrain) {
    this.substrain = substrain;
    return this;
  }

  /**
   * Get substrain
   * @return substrain
   */
  @javax.annotation.Nullable
  public String getSubstrain() {
    return substrain;
  }

  public void setSubstrain(String substrain) {
    this.substrain = substrain;
  }


  public Strain symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Strain strain = (Strain) o;
    return Objects.equals(this.backgroundStrainRgdId, strain.backgroundStrainRgdId) &&
        Objects.equals(this.chrAltered, strain.chrAltered) &&
        Objects.equals(this.color, strain.color) &&
        Objects.equals(this.geneticStatus, strain.geneticStatus) &&
        Objects.equals(this.genetics, strain.genetics) &&
        Objects.equals(this.imageUrl, strain.imageUrl) &&
        Objects.equals(this.inbredGen, strain.inbredGen) &&
        Objects.equals(this.key, strain.key) &&
        Objects.equals(this.lastStatus, strain.lastStatus) &&
        Objects.equals(this.lastStatusObject, strain.lastStatusObject) &&
        Objects.equals(this.modificationMethod, strain.modificationMethod) &&
        Objects.equals(this.name, strain.name) &&
        Objects.equals(this.notes, strain.notes) &&
        Objects.equals(this.origin, strain.origin) &&
        Objects.equals(this.researchUse, strain.researchUse) &&
        Objects.equals(this.rgdId, strain.rgdId) &&
        Objects.equals(this.source, strain.source) &&
        Objects.equals(this.speciesTypeKey, strain.speciesTypeKey) &&
        Objects.equals(this.statusLog, strain.statusLog) &&
        Objects.equals(this.strain, strain.strain) &&
        Objects.equals(this.strainTypeName, strain.strainTypeName) &&
        Objects.equals(this.substrain, strain.substrain) &&
        Objects.equals(this.symbol, strain.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundStrainRgdId, chrAltered, color, geneticStatus, genetics, imageUrl, inbredGen, key, lastStatus, lastStatusObject, modificationMethod, name, notes, origin, researchUse, rgdId, source, speciesTypeKey, statusLog, strain, strainTypeName, substrain, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Strain {\n");
    sb.append("    backgroundStrainRgdId: ").append(toIndentedString(backgroundStrainRgdId)).append("\n");
    sb.append("    chrAltered: ").append(toIndentedString(chrAltered)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    geneticStatus: ").append(toIndentedString(geneticStatus)).append("\n");
    sb.append("    genetics: ").append(toIndentedString(genetics)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    inbredGen: ").append(toIndentedString(inbredGen)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastStatus: ").append(toIndentedString(lastStatus)).append("\n");
    sb.append("    lastStatusObject: ").append(toIndentedString(lastStatusObject)).append("\n");
    sb.append("    modificationMethod: ").append(toIndentedString(modificationMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    researchUse: ").append(toIndentedString(researchUse)).append("\n");
    sb.append("    rgdId: ").append(toIndentedString(rgdId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    speciesTypeKey: ").append(toIndentedString(speciesTypeKey)).append("\n");
    sb.append("    statusLog: ").append(toIndentedString(statusLog)).append("\n");
    sb.append("    strain: ").append(toIndentedString(strain)).append("\n");
    sb.append("    strainTypeName: ").append(toIndentedString(strainTypeName)).append("\n");
    sb.append("    substrain: ").append(toIndentedString(substrain)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundStrainRgdId");
    openapiFields.add("chrAltered");
    openapiFields.add("color");
    openapiFields.add("geneticStatus");
    openapiFields.add("genetics");
    openapiFields.add("imageUrl");
    openapiFields.add("inbredGen");
    openapiFields.add("key");
    openapiFields.add("lastStatus");
    openapiFields.add("lastStatusObject");
    openapiFields.add("modificationMethod");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("origin");
    openapiFields.add("researchUse");
    openapiFields.add("rgdId");
    openapiFields.add("source");
    openapiFields.add("speciesTypeKey");
    openapiFields.add("statusLog");
    openapiFields.add("strain");
    openapiFields.add("strainTypeName");
    openapiFields.add("substrain");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Strain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Strain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Strain is not found in the empty JSON string", Strain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Strain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Strain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chrAltered") != null && !jsonObj.get("chrAltered").isJsonNull()) && !jsonObj.get("chrAltered").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chrAltered` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chrAltered").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("geneticStatus") != null && !jsonObj.get("geneticStatus").isJsonNull()) && !jsonObj.get("geneticStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geneticStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geneticStatus").toString()));
      }
      if ((jsonObj.get("genetics") != null && !jsonObj.get("genetics").isJsonNull()) && !jsonObj.get("genetics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genetics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genetics").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("inbredGen") != null && !jsonObj.get("inbredGen").isJsonNull()) && !jsonObj.get("inbredGen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inbredGen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inbredGen").toString()));
      }
      if ((jsonObj.get("lastStatus") != null && !jsonObj.get("lastStatus").isJsonNull()) && !jsonObj.get("lastStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastStatus").toString()));
      }
      // validate the optional field `lastStatusObject`
      if (jsonObj.get("lastStatusObject") != null && !jsonObj.get("lastStatusObject").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("lastStatusObject"));
      }
      if ((jsonObj.get("modificationMethod") != null && !jsonObj.get("modificationMethod").isJsonNull()) && !jsonObj.get("modificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationMethod").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("researchUse") != null && !jsonObj.get("researchUse").isJsonNull()) && !jsonObj.get("researchUse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `researchUse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("researchUse").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (jsonObj.get("statusLog") != null && !jsonObj.get("statusLog").isJsonNull()) {
        JsonArray jsonArraystatusLog = jsonObj.getAsJsonArray("statusLog");
        if (jsonArraystatusLog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusLog").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusLog` to be an array in the JSON string but got `%s`", jsonObj.get("statusLog").toString()));
          }

          // validate the optional field `statusLog` (array)
          for (int i = 0; i < jsonArraystatusLog.size(); i++) {
            Status.validateJsonElement(jsonArraystatusLog.get(i));
          };
        }
      }
      if ((jsonObj.get("strain") != null && !jsonObj.get("strain").isJsonNull()) && !jsonObj.get("strain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strain").toString()));
      }
      if ((jsonObj.get("strainTypeName") != null && !jsonObj.get("strainTypeName").isJsonNull()) && !jsonObj.get("strainTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strainTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strainTypeName").toString()));
      }
      if ((jsonObj.get("substrain") != null && !jsonObj.get("substrain").isJsonNull()) && !jsonObj.get("substrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substrain").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Strain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Strain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Strain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Strain.class));

       return (TypeAdapter<T>) new TypeAdapter<Strain>() {
           @Override
           public void write(JsonWriter out, Strain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Strain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Strain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Strain
   * @throws IOException if the JSON string is invalid with respect to Strain
   */
  public static Strain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Strain.class);
  }

  /**
   * Convert an instance of Strain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

