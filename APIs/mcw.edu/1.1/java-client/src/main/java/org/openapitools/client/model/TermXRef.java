/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TermXRef
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TermXRef {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_TERM_ACC = "termAcc";
  @SerializedName(SERIALIZED_NAME_TERM_ACC)
  private String termAcc;

  public static final String SERIALIZED_NAME_XREF_DESCRIPTION = "xrefDescription";
  @SerializedName(SERIALIZED_NAME_XREF_DESCRIPTION)
  private String xrefDescription;

  public static final String SERIALIZED_NAME_XREF_VALUE = "xrefValue";
  @SerializedName(SERIALIZED_NAME_XREF_VALUE)
  private String xrefValue;

  public TermXRef() {
  }

  public TermXRef key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public TermXRef termAcc(String termAcc) {
    this.termAcc = termAcc;
    return this;
  }

  /**
   * Get termAcc
   * @return termAcc
   */
  @javax.annotation.Nullable
  public String getTermAcc() {
    return termAcc;
  }

  public void setTermAcc(String termAcc) {
    this.termAcc = termAcc;
  }


  public TermXRef xrefDescription(String xrefDescription) {
    this.xrefDescription = xrefDescription;
    return this;
  }

  /**
   * Get xrefDescription
   * @return xrefDescription
   */
  @javax.annotation.Nullable
  public String getXrefDescription() {
    return xrefDescription;
  }

  public void setXrefDescription(String xrefDescription) {
    this.xrefDescription = xrefDescription;
  }


  public TermXRef xrefValue(String xrefValue) {
    this.xrefValue = xrefValue;
    return this;
  }

  /**
   * Get xrefValue
   * @return xrefValue
   */
  @javax.annotation.Nullable
  public String getXrefValue() {
    return xrefValue;
  }

  public void setXrefValue(String xrefValue) {
    this.xrefValue = xrefValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TermXRef termXRef = (TermXRef) o;
    return Objects.equals(this.key, termXRef.key) &&
        Objects.equals(this.termAcc, termXRef.termAcc) &&
        Objects.equals(this.xrefDescription, termXRef.xrefDescription) &&
        Objects.equals(this.xrefValue, termXRef.xrefValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, termAcc, xrefDescription, xrefValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TermXRef {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    termAcc: ").append(toIndentedString(termAcc)).append("\n");
    sb.append("    xrefDescription: ").append(toIndentedString(xrefDescription)).append("\n");
    sb.append("    xrefValue: ").append(toIndentedString(xrefValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("termAcc");
    openapiFields.add("xrefDescription");
    openapiFields.add("xrefValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TermXRef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TermXRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TermXRef is not found in the empty JSON string", TermXRef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TermXRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TermXRef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("termAcc") != null && !jsonObj.get("termAcc").isJsonNull()) && !jsonObj.get("termAcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termAcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termAcc").toString()));
      }
      if ((jsonObj.get("xrefDescription") != null && !jsonObj.get("xrefDescription").isJsonNull()) && !jsonObj.get("xrefDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xrefDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xrefDescription").toString()));
      }
      if ((jsonObj.get("xrefValue") != null && !jsonObj.get("xrefValue").isJsonNull()) && !jsonObj.get("xrefValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xrefValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xrefValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TermXRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TermXRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TermXRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TermXRef.class));

       return (TypeAdapter<T>) new TypeAdapter<TermXRef>() {
           @Override
           public void write(JsonWriter out, TermXRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TermXRef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TermXRef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TermXRef
   * @throws IOException if the JSON string is invalid with respect to TermXRef
   */
  public static TermXRef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TermXRef.class);
  }

  /**
   * Convert an instance of TermXRef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

