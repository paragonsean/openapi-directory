/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Status {
  public static final String SERIALIZED_NAME_CRYOPRESERVED_EMBRYO = "cryopreservedEmbryo";
  @SerializedName(SERIALIZED_NAME_CRYOPRESERVED_EMBRYO)
  private Boolean cryopreservedEmbryo;

  public static final String SERIALIZED_NAME_CRYOPRESERVED_SPERM = "cryopreservedSperm";
  @SerializedName(SERIALIZED_NAME_CRYOPRESERVED_SPERM)
  private Boolean cryopreservedSperm;

  public static final String SERIALIZED_NAME_CRYORECOVERY = "cryorecovery";
  @SerializedName(SERIALIZED_NAME_CRYORECOVERY)
  private Boolean cryorecovery;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_LIVE_ANIMALS = "liveAnimals";
  @SerializedName(SERIALIZED_NAME_LIVE_ANIMALS)
  private Boolean liveAnimals;

  public static final String SERIALIZED_NAME_STATUS_DATE = "statusDate";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE)
  private OffsetDateTime statusDate;

  public static final String SERIALIZED_NAME_STRAIN_RGD_ID = "strainRgdId";
  @SerializedName(SERIALIZED_NAME_STRAIN_RGD_ID)
  private Integer strainRgdId;

  public Status() {
  }

  public Status cryopreservedEmbryo(Boolean cryopreservedEmbryo) {
    this.cryopreservedEmbryo = cryopreservedEmbryo;
    return this;
  }

  /**
   * Get cryopreservedEmbryo
   * @return cryopreservedEmbryo
   */
  @javax.annotation.Nullable
  public Boolean getCryopreservedEmbryo() {
    return cryopreservedEmbryo;
  }

  public void setCryopreservedEmbryo(Boolean cryopreservedEmbryo) {
    this.cryopreservedEmbryo = cryopreservedEmbryo;
  }


  public Status cryopreservedSperm(Boolean cryopreservedSperm) {
    this.cryopreservedSperm = cryopreservedSperm;
    return this;
  }

  /**
   * Get cryopreservedSperm
   * @return cryopreservedSperm
   */
  @javax.annotation.Nullable
  public Boolean getCryopreservedSperm() {
    return cryopreservedSperm;
  }

  public void setCryopreservedSperm(Boolean cryopreservedSperm) {
    this.cryopreservedSperm = cryopreservedSperm;
  }


  public Status cryorecovery(Boolean cryorecovery) {
    this.cryorecovery = cryorecovery;
    return this;
  }

  /**
   * Get cryorecovery
   * @return cryorecovery
   */
  @javax.annotation.Nullable
  public Boolean getCryorecovery() {
    return cryorecovery;
  }

  public void setCryorecovery(Boolean cryorecovery) {
    this.cryorecovery = cryorecovery;
  }


  public Status key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public Status liveAnimals(Boolean liveAnimals) {
    this.liveAnimals = liveAnimals;
    return this;
  }

  /**
   * Get liveAnimals
   * @return liveAnimals
   */
  @javax.annotation.Nullable
  public Boolean getLiveAnimals() {
    return liveAnimals;
  }

  public void setLiveAnimals(Boolean liveAnimals) {
    this.liveAnimals = liveAnimals;
  }


  public Status statusDate(OffsetDateTime statusDate) {
    this.statusDate = statusDate;
    return this;
  }

  /**
   * Get statusDate
   * @return statusDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusDate() {
    return statusDate;
  }

  public void setStatusDate(OffsetDateTime statusDate) {
    this.statusDate = statusDate;
  }


  public Status strainRgdId(Integer strainRgdId) {
    this.strainRgdId = strainRgdId;
    return this;
  }

  /**
   * Get strainRgdId
   * @return strainRgdId
   */
  @javax.annotation.Nullable
  public Integer getStrainRgdId() {
    return strainRgdId;
  }

  public void setStrainRgdId(Integer strainRgdId) {
    this.strainRgdId = strainRgdId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Status status = (Status) o;
    return Objects.equals(this.cryopreservedEmbryo, status.cryopreservedEmbryo) &&
        Objects.equals(this.cryopreservedSperm, status.cryopreservedSperm) &&
        Objects.equals(this.cryorecovery, status.cryorecovery) &&
        Objects.equals(this.key, status.key) &&
        Objects.equals(this.liveAnimals, status.liveAnimals) &&
        Objects.equals(this.statusDate, status.statusDate) &&
        Objects.equals(this.strainRgdId, status.strainRgdId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cryopreservedEmbryo, cryopreservedSperm, cryorecovery, key, liveAnimals, statusDate, strainRgdId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Status {\n");
    sb.append("    cryopreservedEmbryo: ").append(toIndentedString(cryopreservedEmbryo)).append("\n");
    sb.append("    cryopreservedSperm: ").append(toIndentedString(cryopreservedSperm)).append("\n");
    sb.append("    cryorecovery: ").append(toIndentedString(cryorecovery)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    liveAnimals: ").append(toIndentedString(liveAnimals)).append("\n");
    sb.append("    statusDate: ").append(toIndentedString(statusDate)).append("\n");
    sb.append("    strainRgdId: ").append(toIndentedString(strainRgdId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cryopreservedEmbryo");
    openapiFields.add("cryopreservedSperm");
    openapiFields.add("cryorecovery");
    openapiFields.add("key");
    openapiFields.add("liveAnimals");
    openapiFields.add("statusDate");
    openapiFields.add("strainRgdId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Status
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Status.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Status is not found in the empty JSON string", Status.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Status.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Status` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Status.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Status' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Status> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Status.class));

       return (TypeAdapter<T>) new TypeAdapter<Status>() {
           @Override
           public void write(JsonWriter out, Status value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Status read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Status given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Status
   * @throws IOException if the JSON string is invalid with respect to Status
   */
  public static Status fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Status.class);
  }

  /**
   * Convert an instance of Status to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

