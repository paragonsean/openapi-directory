/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gene
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gene {
  public static final String SERIALIZED_NAME_AGR_DESCRIPTION = "agrDescription";
  @SerializedName(SERIALIZED_NAME_AGR_DESCRIPTION)
  private String agrDescription;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENSEMBL_FULL_NAME = "ensemblFullName";
  @SerializedName(SERIALIZED_NAME_ENSEMBL_FULL_NAME)
  private String ensemblFullName;

  public static final String SERIALIZED_NAME_ENSEMBL_GENE_SYMBOL = "ensemblGeneSymbol";
  @SerializedName(SERIALIZED_NAME_ENSEMBL_GENE_SYMBOL)
  private String ensemblGeneSymbol;

  public static final String SERIALIZED_NAME_ENSEMBL_GENE_TYPE = "ensemblGeneType";
  @SerializedName(SERIALIZED_NAME_ENSEMBL_GENE_TYPE)
  private String ensemblGeneType;

  public static final String SERIALIZED_NAME_GENE_SOURCE = "geneSource";
  @SerializedName(SERIALIZED_NAME_GENE_SOURCE)
  private String geneSource;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_MERGED_DESCRIPTION = "mergedDescription";
  @SerializedName(SERIALIZED_NAME_MERGED_DESCRIPTION)
  private String mergedDescription;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NCBI_ANNOT_STATUS = "ncbiAnnotStatus";
  @SerializedName(SERIALIZED_NAME_NCBI_ANNOT_STATUS)
  private String ncbiAnnotStatus;

  public static final String SERIALIZED_NAME_NOMEN_REVIEW_DATE = "nomenReviewDate";
  @SerializedName(SERIALIZED_NAME_NOMEN_REVIEW_DATE)
  private OffsetDateTime nomenReviewDate;

  public static final String SERIALIZED_NAME_NOMEN_SOURCE = "nomenSource";
  @SerializedName(SERIALIZED_NAME_NOMEN_SOURCE)
  private String nomenSource;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_REF_SEQ_STATUS = "refSeqStatus";
  @SerializedName(SERIALIZED_NAME_REF_SEQ_STATUS)
  private String refSeqStatus;

  public static final String SERIALIZED_NAME_RGD_ID = "rgdId";
  @SerializedName(SERIALIZED_NAME_RGD_ID)
  private Integer rgdId;

  public static final String SERIALIZED_NAME_SO_ACC_ID = "soAccId";
  @SerializedName(SERIALIZED_NAME_SO_ACC_ID)
  private String soAccId;

  public static final String SERIALIZED_NAME_SPECIES_TYPE_KEY = "speciesTypeKey";
  @SerializedName(SERIALIZED_NAME_SPECIES_TYPE_KEY)
  private Integer speciesTypeKey;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private Boolean variant;

  public Gene() {
  }

  public Gene agrDescription(String agrDescription) {
    this.agrDescription = agrDescription;
    return this;
  }

  /**
   * Get agrDescription
   * @return agrDescription
   */
  @javax.annotation.Nullable
  public String getAgrDescription() {
    return agrDescription;
  }

  public void setAgrDescription(String agrDescription) {
    this.agrDescription = agrDescription;
  }


  public Gene description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Gene ensemblFullName(String ensemblFullName) {
    this.ensemblFullName = ensemblFullName;
    return this;
  }

  /**
   * Get ensemblFullName
   * @return ensemblFullName
   */
  @javax.annotation.Nullable
  public String getEnsemblFullName() {
    return ensemblFullName;
  }

  public void setEnsemblFullName(String ensemblFullName) {
    this.ensemblFullName = ensemblFullName;
  }


  public Gene ensemblGeneSymbol(String ensemblGeneSymbol) {
    this.ensemblGeneSymbol = ensemblGeneSymbol;
    return this;
  }

  /**
   * Get ensemblGeneSymbol
   * @return ensemblGeneSymbol
   */
  @javax.annotation.Nullable
  public String getEnsemblGeneSymbol() {
    return ensemblGeneSymbol;
  }

  public void setEnsemblGeneSymbol(String ensemblGeneSymbol) {
    this.ensemblGeneSymbol = ensemblGeneSymbol;
  }


  public Gene ensemblGeneType(String ensemblGeneType) {
    this.ensemblGeneType = ensemblGeneType;
    return this;
  }

  /**
   * Get ensemblGeneType
   * @return ensemblGeneType
   */
  @javax.annotation.Nullable
  public String getEnsemblGeneType() {
    return ensemblGeneType;
  }

  public void setEnsemblGeneType(String ensemblGeneType) {
    this.ensemblGeneType = ensemblGeneType;
  }


  public Gene geneSource(String geneSource) {
    this.geneSource = geneSource;
    return this;
  }

  /**
   * Get geneSource
   * @return geneSource
   */
  @javax.annotation.Nullable
  public String getGeneSource() {
    return geneSource;
  }

  public void setGeneSource(String geneSource) {
    this.geneSource = geneSource;
  }


  public Gene key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public Gene mergedDescription(String mergedDescription) {
    this.mergedDescription = mergedDescription;
    return this;
  }

  /**
   * Get mergedDescription
   * @return mergedDescription
   */
  @javax.annotation.Nullable
  public String getMergedDescription() {
    return mergedDescription;
  }

  public void setMergedDescription(String mergedDescription) {
    this.mergedDescription = mergedDescription;
  }


  public Gene name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Gene ncbiAnnotStatus(String ncbiAnnotStatus) {
    this.ncbiAnnotStatus = ncbiAnnotStatus;
    return this;
  }

  /**
   * Get ncbiAnnotStatus
   * @return ncbiAnnotStatus
   */
  @javax.annotation.Nullable
  public String getNcbiAnnotStatus() {
    return ncbiAnnotStatus;
  }

  public void setNcbiAnnotStatus(String ncbiAnnotStatus) {
    this.ncbiAnnotStatus = ncbiAnnotStatus;
  }


  public Gene nomenReviewDate(OffsetDateTime nomenReviewDate) {
    this.nomenReviewDate = nomenReviewDate;
    return this;
  }

  /**
   * Get nomenReviewDate
   * @return nomenReviewDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNomenReviewDate() {
    return nomenReviewDate;
  }

  public void setNomenReviewDate(OffsetDateTime nomenReviewDate) {
    this.nomenReviewDate = nomenReviewDate;
  }


  public Gene nomenSource(String nomenSource) {
    this.nomenSource = nomenSource;
    return this;
  }

  /**
   * Get nomenSource
   * @return nomenSource
   */
  @javax.annotation.Nullable
  public String getNomenSource() {
    return nomenSource;
  }

  public void setNomenSource(String nomenSource) {
    this.nomenSource = nomenSource;
  }


  public Gene notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Gene refSeqStatus(String refSeqStatus) {
    this.refSeqStatus = refSeqStatus;
    return this;
  }

  /**
   * Get refSeqStatus
   * @return refSeqStatus
   */
  @javax.annotation.Nullable
  public String getRefSeqStatus() {
    return refSeqStatus;
  }

  public void setRefSeqStatus(String refSeqStatus) {
    this.refSeqStatus = refSeqStatus;
  }


  public Gene rgdId(Integer rgdId) {
    this.rgdId = rgdId;
    return this;
  }

  /**
   * Get rgdId
   * @return rgdId
   */
  @javax.annotation.Nullable
  public Integer getRgdId() {
    return rgdId;
  }

  public void setRgdId(Integer rgdId) {
    this.rgdId = rgdId;
  }


  public Gene soAccId(String soAccId) {
    this.soAccId = soAccId;
    return this;
  }

  /**
   * Get soAccId
   * @return soAccId
   */
  @javax.annotation.Nullable
  public String getSoAccId() {
    return soAccId;
  }

  public void setSoAccId(String soAccId) {
    this.soAccId = soAccId;
  }


  public Gene speciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
    return this;
  }

  /**
   * Get speciesTypeKey
   * @return speciesTypeKey
   */
  @javax.annotation.Nullable
  public Integer getSpeciesTypeKey() {
    return speciesTypeKey;
  }

  public void setSpeciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
  }


  public Gene symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Gene type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Gene variant(Boolean variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nullable
  public Boolean getVariant() {
    return variant;
  }

  public void setVariant(Boolean variant) {
    this.variant = variant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gene gene = (Gene) o;
    return Objects.equals(this.agrDescription, gene.agrDescription) &&
        Objects.equals(this.description, gene.description) &&
        Objects.equals(this.ensemblFullName, gene.ensemblFullName) &&
        Objects.equals(this.ensemblGeneSymbol, gene.ensemblGeneSymbol) &&
        Objects.equals(this.ensemblGeneType, gene.ensemblGeneType) &&
        Objects.equals(this.geneSource, gene.geneSource) &&
        Objects.equals(this.key, gene.key) &&
        Objects.equals(this.mergedDescription, gene.mergedDescription) &&
        Objects.equals(this.name, gene.name) &&
        Objects.equals(this.ncbiAnnotStatus, gene.ncbiAnnotStatus) &&
        Objects.equals(this.nomenReviewDate, gene.nomenReviewDate) &&
        Objects.equals(this.nomenSource, gene.nomenSource) &&
        Objects.equals(this.notes, gene.notes) &&
        Objects.equals(this.refSeqStatus, gene.refSeqStatus) &&
        Objects.equals(this.rgdId, gene.rgdId) &&
        Objects.equals(this.soAccId, gene.soAccId) &&
        Objects.equals(this.speciesTypeKey, gene.speciesTypeKey) &&
        Objects.equals(this.symbol, gene.symbol) &&
        Objects.equals(this.type, gene.type) &&
        Objects.equals(this.variant, gene.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agrDescription, description, ensemblFullName, ensemblGeneSymbol, ensemblGeneType, geneSource, key, mergedDescription, name, ncbiAnnotStatus, nomenReviewDate, nomenSource, notes, refSeqStatus, rgdId, soAccId, speciesTypeKey, symbol, type, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gene {\n");
    sb.append("    agrDescription: ").append(toIndentedString(agrDescription)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ensemblFullName: ").append(toIndentedString(ensemblFullName)).append("\n");
    sb.append("    ensemblGeneSymbol: ").append(toIndentedString(ensemblGeneSymbol)).append("\n");
    sb.append("    ensemblGeneType: ").append(toIndentedString(ensemblGeneType)).append("\n");
    sb.append("    geneSource: ").append(toIndentedString(geneSource)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    mergedDescription: ").append(toIndentedString(mergedDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ncbiAnnotStatus: ").append(toIndentedString(ncbiAnnotStatus)).append("\n");
    sb.append("    nomenReviewDate: ").append(toIndentedString(nomenReviewDate)).append("\n");
    sb.append("    nomenSource: ").append(toIndentedString(nomenSource)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    refSeqStatus: ").append(toIndentedString(refSeqStatus)).append("\n");
    sb.append("    rgdId: ").append(toIndentedString(rgdId)).append("\n");
    sb.append("    soAccId: ").append(toIndentedString(soAccId)).append("\n");
    sb.append("    speciesTypeKey: ").append(toIndentedString(speciesTypeKey)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agrDescription");
    openapiFields.add("description");
    openapiFields.add("ensemblFullName");
    openapiFields.add("ensemblGeneSymbol");
    openapiFields.add("ensemblGeneType");
    openapiFields.add("geneSource");
    openapiFields.add("key");
    openapiFields.add("mergedDescription");
    openapiFields.add("name");
    openapiFields.add("ncbiAnnotStatus");
    openapiFields.add("nomenReviewDate");
    openapiFields.add("nomenSource");
    openapiFields.add("notes");
    openapiFields.add("refSeqStatus");
    openapiFields.add("rgdId");
    openapiFields.add("soAccId");
    openapiFields.add("speciesTypeKey");
    openapiFields.add("symbol");
    openapiFields.add("type");
    openapiFields.add("variant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Gene
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gene.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gene is not found in the empty JSON string", Gene.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gene.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gene` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agrDescription") != null && !jsonObj.get("agrDescription").isJsonNull()) && !jsonObj.get("agrDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agrDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agrDescription").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("ensemblFullName") != null && !jsonObj.get("ensemblFullName").isJsonNull()) && !jsonObj.get("ensemblFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ensemblFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ensemblFullName").toString()));
      }
      if ((jsonObj.get("ensemblGeneSymbol") != null && !jsonObj.get("ensemblGeneSymbol").isJsonNull()) && !jsonObj.get("ensemblGeneSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ensemblGeneSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ensemblGeneSymbol").toString()));
      }
      if ((jsonObj.get("ensemblGeneType") != null && !jsonObj.get("ensemblGeneType").isJsonNull()) && !jsonObj.get("ensemblGeneType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ensemblGeneType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ensemblGeneType").toString()));
      }
      if ((jsonObj.get("geneSource") != null && !jsonObj.get("geneSource").isJsonNull()) && !jsonObj.get("geneSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geneSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geneSource").toString()));
      }
      if ((jsonObj.get("mergedDescription") != null && !jsonObj.get("mergedDescription").isJsonNull()) && !jsonObj.get("mergedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergedDescription").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ncbiAnnotStatus") != null && !jsonObj.get("ncbiAnnotStatus").isJsonNull()) && !jsonObj.get("ncbiAnnotStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncbiAnnotStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ncbiAnnotStatus").toString()));
      }
      if ((jsonObj.get("nomenSource") != null && !jsonObj.get("nomenSource").isJsonNull()) && !jsonObj.get("nomenSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomenSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomenSource").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("refSeqStatus") != null && !jsonObj.get("refSeqStatus").isJsonNull()) && !jsonObj.get("refSeqStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refSeqStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refSeqStatus").toString()));
      }
      if ((jsonObj.get("soAccId") != null && !jsonObj.get("soAccId").isJsonNull()) && !jsonObj.get("soAccId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soAccId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soAccId").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gene.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gene' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gene> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gene.class));

       return (TypeAdapter<T>) new TypeAdapter<Gene>() {
           @Override
           public void write(JsonWriter out, Gene value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gene read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Gene given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Gene
   * @throws IOException if the JSON string is invalid with respect to Gene
   */
  public static Gene fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gene.class);
  }

  /**
   * Convert an instance of Gene to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

