/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.AnnotationRequest;
import org.openapitools.client.model.MapPair;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnnotationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAnnotationCountByAccIdAndObjectTypeUsingGET
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param objectType A list of object types can be found using the lookup service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCountByAccIdAndObjectTypeUsingGETCall(String accId, Integer speciesTypeKey, Boolean includeChildren, Integer objectType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}/{objectType}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "includeChildren" + "}", localVarApiClient.escapeString(includeChildren.toString()))
            .replace("{" + "objectType" + "}", localVarApiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationCountByAccIdAndObjectTypeUsingGETValidateBeforeCall(String accId, Integer speciesTypeKey, Boolean includeChildren, Integer objectType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET(Async)");
        }

        // verify the required parameter 'includeChildren' is set
        if (includeChildren == null) {
            throw new ApiException("Missing the required parameter 'includeChildren' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET(Async)");
        }

        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET(Async)");
        }

        return getAnnotationCountByAccIdAndObjectTypeUsingGETCall(accId, speciesTypeKey, includeChildren, objectType, _callback);

    }

    /**
     * Returns annotation count for ontology accession ID and object type
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param objectType A list of object types can be found using the lookup service (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Integer getAnnotationCountByAccIdAndObjectTypeUsingGET(String accId, Integer speciesTypeKey, Boolean includeChildren, Integer objectType) throws ApiException {
        ApiResponse<Integer> localVarResp = getAnnotationCountByAccIdAndObjectTypeUsingGETWithHttpInfo(accId, speciesTypeKey, includeChildren, objectType);
        return localVarResp.getData();
    }

    /**
     * Returns annotation count for ontology accession ID and object type
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param objectType A list of object types can be found using the lookup service (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getAnnotationCountByAccIdAndObjectTypeUsingGETWithHttpInfo(String accId, Integer speciesTypeKey, Boolean includeChildren, Integer objectType) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationCountByAccIdAndObjectTypeUsingGETValidateBeforeCall(accId, speciesTypeKey, includeChildren, objectType, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns annotation count for ontology accession ID and object type (asynchronously)
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param objectType A list of object types can be found using the lookup service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCountByAccIdAndObjectTypeUsingGETAsync(String accId, Integer speciesTypeKey, Boolean includeChildren, Integer objectType, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationCountByAccIdAndObjectTypeUsingGETValidateBeforeCall(accId, speciesTypeKey, includeChildren, objectType, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationCountByAccIdAndSpeciesUsingGET
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCountByAccIdAndSpeciesUsingGETCall(String accId, Integer speciesTypeKey, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "includeChildren" + "}", localVarApiClient.escapeString(includeChildren.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationCountByAccIdAndSpeciesUsingGETValidateBeforeCall(String accId, Integer speciesTypeKey, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getAnnotationCountByAccIdAndSpeciesUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getAnnotationCountByAccIdAndSpeciesUsingGET(Async)");
        }

        // verify the required parameter 'includeChildren' is set
        if (includeChildren == null) {
            throw new ApiException("Missing the required parameter 'includeChildren' when calling getAnnotationCountByAccIdAndSpeciesUsingGET(Async)");
        }

        return getAnnotationCountByAccIdAndSpeciesUsingGETCall(accId, speciesTypeKey, includeChildren, _callback);

    }

    /**
     * Returns annotation count for ontology accession ID and speicies
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Integer getAnnotationCountByAccIdAndSpeciesUsingGET(String accId, Integer speciesTypeKey, Boolean includeChildren) throws ApiException {
        ApiResponse<Integer> localVarResp = getAnnotationCountByAccIdAndSpeciesUsingGETWithHttpInfo(accId, speciesTypeKey, includeChildren);
        return localVarResp.getData();
    }

    /**
     * Returns annotation count for ontology accession ID and speicies
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getAnnotationCountByAccIdAndSpeciesUsingGETWithHttpInfo(String accId, Integer speciesTypeKey, Boolean includeChildren) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationCountByAccIdAndSpeciesUsingGETValidateBeforeCall(accId, speciesTypeKey, includeChildren, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns annotation count for ontology accession ID and speicies (asynchronously)
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCountByAccIdAndSpeciesUsingGETAsync(String accId, Integer speciesTypeKey, Boolean includeChildren, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationCountByAccIdAndSpeciesUsingGETValidateBeforeCall(accId, speciesTypeKey, includeChildren, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationCountByAccIdUsingGET
     * @param accId Ontology term accession ID (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCountByAccIdUsingGETCall(String accId, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/count/{accId}/{includeChildren}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "includeChildren" + "}", localVarApiClient.escapeString(includeChildren.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationCountByAccIdUsingGETValidateBeforeCall(String accId, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getAnnotationCountByAccIdUsingGET(Async)");
        }

        // verify the required parameter 'includeChildren' is set
        if (includeChildren == null) {
            throw new ApiException("Missing the required parameter 'includeChildren' when calling getAnnotationCountByAccIdUsingGET(Async)");
        }

        return getAnnotationCountByAccIdUsingGETCall(accId, includeChildren, _callback);

    }

    /**
     * Returns annotation count for ontology accession ID
     * 
     * @param accId Ontology term accession ID (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Integer getAnnotationCountByAccIdUsingGET(String accId, Boolean includeChildren) throws ApiException {
        ApiResponse<Integer> localVarResp = getAnnotationCountByAccIdUsingGETWithHttpInfo(accId, includeChildren);
        return localVarResp.getData();
    }

    /**
     * Returns annotation count for ontology accession ID
     * 
     * @param accId Ontology term accession ID (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getAnnotationCountByAccIdUsingGETWithHttpInfo(String accId, Boolean includeChildren) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationCountByAccIdUsingGETValidateBeforeCall(accId, includeChildren, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns annotation count for ontology accession ID (asynchronously)
     * 
     * @param accId Ontology term accession ID (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationCountByAccIdUsingGETAsync(String accId, Boolean includeChildren, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationCountByAccIdUsingGETValidateBeforeCall(accId, includeChildren, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationsByAccIdAndRgdIdUsingGET
     * @param accId Ontology Term Accession ID (required)
     * @param rgdId RGD ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsByAccIdAndRgdIdUsingGETCall(String accId, Integer rgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/{accId}/{rgdId}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationsByAccIdAndRgdIdUsingGETValidateBeforeCall(String accId, Integer rgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getAnnotationsByAccIdAndRgdIdUsingGET(Async)");
        }

        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getAnnotationsByAccIdAndRgdIdUsingGET(Async)");
        }

        return getAnnotationsByAccIdAndRgdIdUsingGETCall(accId, rgdId, _callback);

    }

    /**
     * Returns a list of annotations by RGD ID and ontology term accession ID
     * 
     * @param accId Ontology Term Accession ID (required)
     * @param rgdId RGD ID (required)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotationsByAccIdAndRgdIdUsingGET(String accId, Integer rgdId) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotationsByAccIdAndRgdIdUsingGETWithHttpInfo(accId, rgdId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of annotations by RGD ID and ontology term accession ID
     * 
     * @param accId Ontology Term Accession ID (required)
     * @param rgdId RGD ID (required)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotationsByAccIdAndRgdIdUsingGETWithHttpInfo(String accId, Integer rgdId) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationsByAccIdAndRgdIdUsingGETValidateBeforeCall(accId, rgdId, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of annotations by RGD ID and ontology term accession ID (asynchronously)
     * 
     * @param accId Ontology Term Accession ID (required)
     * @param rgdId RGD ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsByAccIdAndRgdIdUsingGETAsync(String accId, Integer rgdId, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationsByAccIdAndRgdIdUsingGETValidateBeforeCall(accId, rgdId, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationsByRgdIdAndOntologyUsingGET
     * @param rgdId RGD ID (required)
     * @param ontologyPrefix Ontology Prefix.  The prefix can be found left of the semicolon in an ontology term accession ID.  As an example, term accession PW:0000034 has the ontology prefix PW (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsByRgdIdAndOntologyUsingGETCall(Integer rgdId, String ontologyPrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/rgdId/{rgdId}/{ontologyPrefix}"
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()))
            .replace("{" + "ontologyPrefix" + "}", localVarApiClient.escapeString(ontologyPrefix.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationsByRgdIdAndOntologyUsingGETValidateBeforeCall(Integer rgdId, String ontologyPrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getAnnotationsByRgdIdAndOntologyUsingGET(Async)");
        }

        // verify the required parameter 'ontologyPrefix' is set
        if (ontologyPrefix == null) {
            throw new ApiException("Missing the required parameter 'ontologyPrefix' when calling getAnnotationsByRgdIdAndOntologyUsingGET(Async)");
        }

        return getAnnotationsByRgdIdAndOntologyUsingGETCall(rgdId, ontologyPrefix, _callback);

    }

    /**
     * Returns a list of annotations by RGD ID and ontology prefix
     * 
     * @param rgdId RGD ID (required)
     * @param ontologyPrefix Ontology Prefix.  The prefix can be found left of the semicolon in an ontology term accession ID.  As an example, term accession PW:0000034 has the ontology prefix PW (required)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotationsByRgdIdAndOntologyUsingGET(Integer rgdId, String ontologyPrefix) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotationsByRgdIdAndOntologyUsingGETWithHttpInfo(rgdId, ontologyPrefix);
        return localVarResp.getData();
    }

    /**
     * Returns a list of annotations by RGD ID and ontology prefix
     * 
     * @param rgdId RGD ID (required)
     * @param ontologyPrefix Ontology Prefix.  The prefix can be found left of the semicolon in an ontology term accession ID.  As an example, term accession PW:0000034 has the ontology prefix PW (required)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotationsByRgdIdAndOntologyUsingGETWithHttpInfo(Integer rgdId, String ontologyPrefix) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationsByRgdIdAndOntologyUsingGETValidateBeforeCall(rgdId, ontologyPrefix, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of annotations by RGD ID and ontology prefix (asynchronously)
     * 
     * @param rgdId RGD ID (required)
     * @param ontologyPrefix Ontology Prefix.  The prefix can be found left of the semicolon in an ontology term accession ID.  As an example, term accession PW:0000034 has the ontology prefix PW (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsByRgdIdAndOntologyUsingGETAsync(Integer rgdId, String ontologyPrefix, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationsByRgdIdAndOntologyUsingGETValidateBeforeCall(rgdId, ontologyPrefix, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationsByRgdIdUsingGET
     * @param rgdId RGD ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsByRgdIdUsingGETCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/rgdId/{rgdId}"
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationsByRgdIdUsingGETValidateBeforeCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getAnnotationsByRgdIdUsingGET(Async)");
        }

        return getAnnotationsByRgdIdUsingGETCall(rgdId, _callback);

    }

    /**
     * Returns a list of annotations by RGD ID
     * 
     * @param rgdId RGD ID (required)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotationsByRgdIdUsingGET(Integer rgdId) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotationsByRgdIdUsingGETWithHttpInfo(rgdId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of annotations by RGD ID
     * 
     * @param rgdId RGD ID (required)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotationsByRgdIdUsingGETWithHttpInfo(Integer rgdId) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationsByRgdIdUsingGETValidateBeforeCall(rgdId, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of annotations by RGD ID (asynchronously)
     * 
     * @param rgdId RGD ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsByRgdIdUsingGETAsync(Integer rgdId, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationsByRgdIdUsingGETValidateBeforeCall(rgdId, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationsUsingGET
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsUsingGETCall(String accId, Integer speciesTypeKey, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/{accId}/{speciesTypeKey}/{includeChildren}"
            .replace("{" + "accId" + "}", localVarApiClient.escapeString(accId.toString()))
            .replace("{" + "speciesTypeKey" + "}", localVarApiClient.escapeString(speciesTypeKey.toString()))
            .replace("{" + "includeChildren" + "}", localVarApiClient.escapeString(includeChildren.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationsUsingGETValidateBeforeCall(String accId, Integer speciesTypeKey, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accId' is set
        if (accId == null) {
            throw new ApiException("Missing the required parameter 'accId' when calling getAnnotationsUsingGET(Async)");
        }

        // verify the required parameter 'speciesTypeKey' is set
        if (speciesTypeKey == null) {
            throw new ApiException("Missing the required parameter 'speciesTypeKey' when calling getAnnotationsUsingGET(Async)");
        }

        // verify the required parameter 'includeChildren' is set
        if (includeChildren == null) {
            throw new ApiException("Missing the required parameter 'includeChildren' when calling getAnnotationsUsingGET(Async)");
        }

        return getAnnotationsUsingGETCall(accId, speciesTypeKey, includeChildren, _callback);

    }

    /**
     * Returns a list annotations for an ontology term or a term and it&#39;s children
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotationsUsingGET(String accId, Integer speciesTypeKey, Boolean includeChildren) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotationsUsingGETWithHttpInfo(accId, speciesTypeKey, includeChildren);
        return localVarResp.getData();
    }

    /**
     * Returns a list annotations for an ontology term or a term and it&#39;s children
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotationsUsingGETWithHttpInfo(String accId, Integer speciesTypeKey, Boolean includeChildren) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationsUsingGETValidateBeforeCall(accId, speciesTypeKey, includeChildren, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list annotations for an ontology term or a term and it&#39;s children (asynchronously)
     * 
     * @param accId Ontology term accession ID (required)
     * @param speciesTypeKey A list of species type keys can be found using the lookup service (required)
     * @param includeChildren true: return annotations for the term and children, false: return annotations for the term only  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsUsingGETAsync(String accId, Integer speciesTypeKey, Boolean includeChildren, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationsUsingGETValidateBeforeCall(accId, speciesTypeKey, includeChildren, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotationsUsingPOST
     * @param annotationRequest data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsUsingPOSTCall(AnnotationRequest annotationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotationRequest;

        // create path and map variables
        String localVarPath = "/annotations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationsUsingPOSTValidateBeforeCall(AnnotationRequest annotationRequest, final ApiCallback _callback) throws ApiException {
        return getAnnotationsUsingPOSTCall(annotationRequest, _callback);

    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param annotationRequest data (optional)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotationsUsingPOST(AnnotationRequest annotationRequest) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotationsUsingPOSTWithHttpInfo(annotationRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param annotationRequest data (optional)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotationsUsingPOSTWithHttpInfo(AnnotationRequest annotationRequest) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationsUsingPOSTValidateBeforeCall(annotationRequest, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of genes annotated to an ontology term (asynchronously)
     * 
     * @param annotationRequest data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationsUsingPOSTAsync(AnnotationRequest annotationRequest, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationsUsingPOSTValidateBeforeCall(annotationRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotsByRefrerenceUsingGET
     * @param refRgdId Reference RGD ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotsByRefrerenceUsingGETCall(Integer refRgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/reference/{refRgdId}"
            .replace("{" + "refRgdId" + "}", localVarApiClient.escapeString(refRgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotsByRefrerenceUsingGETValidateBeforeCall(Integer refRgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'refRgdId' is set
        if (refRgdId == null) {
            throw new ApiException("Missing the required parameter 'refRgdId' when calling getAnnotsByRefrerenceUsingGET(Async)");
        }

        return getAnnotsByRefrerenceUsingGETCall(refRgdId, _callback);

    }

    /**
     * Returns a list of annotations for a reference
     * 
     * @param refRgdId Reference RGD ID (required)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> getAnnotsByRefrerenceUsingGET(Integer refRgdId) throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = getAnnotsByRefrerenceUsingGETWithHttpInfo(refRgdId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of annotations for a reference
     * 
     * @param refRgdId Reference RGD ID (required)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> getAnnotsByRefrerenceUsingGETWithHttpInfo(Integer refRgdId) throws ApiException {
        okhttp3.Call localVarCall = getAnnotsByRefrerenceUsingGETValidateBeforeCall(refRgdId, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of annotations for a reference (asynchronously)
     * 
     * @param refRgdId Reference RGD ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotsByRefrerenceUsingGETAsync(Integer refRgdId, final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotsByRefrerenceUsingGETValidateBeforeCall(refRgdId, _callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTermAccIdsUsingGET
     * @param rgdId RGD ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTermAccIdsUsingGETCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotations/accId/{rgdId}"
            .replace("{" + "rgdId" + "}", localVarApiClient.escapeString(rgdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTermAccIdsUsingGETValidateBeforeCall(Integer rgdId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rgdId' is set
        if (rgdId == null) {
            throw new ApiException("Missing the required parameter 'rgdId' when calling getTermAccIdsUsingGET(Async)");
        }

        return getTermAccIdsUsingGETCall(rgdId, _callback);

    }

    /**
     * Returns a list ontology term accession IDs annotated to an rgd object
     * 
     * @param rgdId RGD ID (required)
     * @return List&lt;MapPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<MapPair> getTermAccIdsUsingGET(Integer rgdId) throws ApiException {
        ApiResponse<List<MapPair>> localVarResp = getTermAccIdsUsingGETWithHttpInfo(rgdId);
        return localVarResp.getData();
    }

    /**
     * Returns a list ontology term accession IDs annotated to an rgd object
     * 
     * @param rgdId RGD ID (required)
     * @return ApiResponse&lt;List&lt;MapPair&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MapPair>> getTermAccIdsUsingGETWithHttpInfo(Integer rgdId) throws ApiException {
        okhttp3.Call localVarCall = getTermAccIdsUsingGETValidateBeforeCall(rgdId, null);
        Type localVarReturnType = new TypeToken<List<MapPair>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list ontology term accession IDs annotated to an rgd object (asynchronously)
     * 
     * @param rgdId RGD ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTermAccIdsUsingGETAsync(Integer rgdId, final ApiCallback<List<MapPair>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTermAccIdsUsingGETValidateBeforeCall(rgdId, _callback);
        Type localVarReturnType = new TypeToken<List<MapPair>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
