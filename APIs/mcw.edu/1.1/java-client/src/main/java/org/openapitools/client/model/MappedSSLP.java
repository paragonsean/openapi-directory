/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SSLP;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MappedSSLP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappedSSLP {
  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_MAP_KEY = "mapKey";
  @SerializedName(SERIALIZED_NAME_MAP_KEY)
  private Integer mapKey;

  public static final String SERIALIZED_NAME_SSLP = "sslp";
  @SerializedName(SERIALIZED_NAME_SSLP)
  private SSLP sslp;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Long start;

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private Long stop;

  public static final String SERIALIZED_NAME_STRAND = "strand";
  @SerializedName(SERIALIZED_NAME_STRAND)
  private String strand;

  public MappedSSLP() {
  }

  public MappedSSLP chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

  /**
   * Get chromosome
   * @return chromosome
   */
  @javax.annotation.Nullable
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public MappedSSLP mapKey(Integer mapKey) {
    this.mapKey = mapKey;
    return this;
  }

  /**
   * Get mapKey
   * @return mapKey
   */
  @javax.annotation.Nullable
  public Integer getMapKey() {
    return mapKey;
  }

  public void setMapKey(Integer mapKey) {
    this.mapKey = mapKey;
  }


  public MappedSSLP sslp(SSLP sslp) {
    this.sslp = sslp;
    return this;
  }

  /**
   * Get sslp
   * @return sslp
   */
  @javax.annotation.Nullable
  public SSLP getSslp() {
    return sslp;
  }

  public void setSslp(SSLP sslp) {
    this.sslp = sslp;
  }


  public MappedSSLP start(Long start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Long getStart() {
    return start;
  }

  public void setStart(Long start) {
    this.start = start;
  }


  public MappedSSLP stop(Long stop) {
    this.stop = stop;
    return this;
  }

  /**
   * Get stop
   * @return stop
   */
  @javax.annotation.Nullable
  public Long getStop() {
    return stop;
  }

  public void setStop(Long stop) {
    this.stop = stop;
  }


  public MappedSSLP strand(String strand) {
    this.strand = strand;
    return this;
  }

  /**
   * Get strand
   * @return strand
   */
  @javax.annotation.Nullable
  public String getStrand() {
    return strand;
  }

  public void setStrand(String strand) {
    this.strand = strand;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappedSSLP mappedSSLP = (MappedSSLP) o;
    return Objects.equals(this.chromosome, mappedSSLP.chromosome) &&
        Objects.equals(this.mapKey, mappedSSLP.mapKey) &&
        Objects.equals(this.sslp, mappedSSLP.sslp) &&
        Objects.equals(this.start, mappedSSLP.start) &&
        Objects.equals(this.stop, mappedSSLP.stop) &&
        Objects.equals(this.strand, mappedSSLP.strand);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromosome, mapKey, sslp, start, stop, strand);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappedSSLP {\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    mapKey: ").append(toIndentedString(mapKey)).append("\n");
    sb.append("    sslp: ").append(toIndentedString(sslp)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    strand: ").append(toIndentedString(strand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromosome");
    openapiFields.add("mapKey");
    openapiFields.add("sslp");
    openapiFields.add("start");
    openapiFields.add("stop");
    openapiFields.add("strand");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappedSSLP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappedSSLP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappedSSLP is not found in the empty JSON string", MappedSSLP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappedSSLP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappedSSLP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chromosome") != null && !jsonObj.get("chromosome").isJsonNull()) && !jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      // validate the optional field `sslp`
      if (jsonObj.get("sslp") != null && !jsonObj.get("sslp").isJsonNull()) {
        SSLP.validateJsonElement(jsonObj.get("sslp"));
      }
      if ((jsonObj.get("strand") != null && !jsonObj.get("strand").isJsonNull()) && !jsonObj.get("strand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strand").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappedSSLP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappedSSLP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappedSSLP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappedSSLP.class));

       return (TypeAdapter<T>) new TypeAdapter<MappedSSLP>() {
           @Override
           public void write(JsonWriter out, MappedSSLP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappedSSLP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappedSSLP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappedSSLP
   * @throws IOException if the JSON string is invalid with respect to MappedSSLP
   */
  public static MappedSSLP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappedSSLP.class);
  }

  /**
   * Convert an instance of MappedSSLP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

