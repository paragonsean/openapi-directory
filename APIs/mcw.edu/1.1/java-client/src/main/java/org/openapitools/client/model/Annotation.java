/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Annotation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Annotation {
  public static final String SERIALIZED_NAME_ANNOTATED_OBJECT_RGD_ID = "annotatedObjectRgdId";
  @SerializedName(SERIALIZED_NAME_ANNOTATED_OBJECT_RGD_ID)
  private Integer annotatedObjectRgdId;

  public static final String SERIALIZED_NAME_ANNOTATION_EXTENSION = "annotationExtension";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_EXTENSION)
  private String annotationExtension;

  public static final String SERIALIZED_NAME_ASPECT = "aspect";
  @SerializedName(SERIALIZED_NAME_ASPECT)
  private String aspect;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private Integer createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DATA_SRC = "dataSrc";
  @SerializedName(SERIALIZED_NAME_DATA_SRC)
  private String dataSrc;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private String evidence;

  public static final String SERIALIZED_NAME_GENE_PRODUCT_FORM_ID = "geneProductFormId";
  @SerializedName(SERIALIZED_NAME_GENE_PRODUCT_FORM_ID)
  private String geneProductFormId;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private Integer lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private OffsetDateTime lastModifiedDate;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OBJECT_NAME = "objectName";
  @SerializedName(SERIALIZED_NAME_OBJECT_NAME)
  private String objectName;

  public static final String SERIALIZED_NAME_OBJECT_SYMBOL = "objectSymbol";
  @SerializedName(SERIALIZED_NAME_OBJECT_SYMBOL)
  private String objectSymbol;

  public static final String SERIALIZED_NAME_ORIGINAL_CREATED_DATE = "originalCreatedDate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CREATED_DATE)
  private OffsetDateTime originalCreatedDate;

  public static final String SERIALIZED_NAME_QUALIFIER = "qualifier";
  @SerializedName(SERIALIZED_NAME_QUALIFIER)
  private String qualifier;

  public static final String SERIALIZED_NAME_REF_RGD_ID = "refRgdId";
  @SerializedName(SERIALIZED_NAME_REF_RGD_ID)
  private Integer refRgdId;

  public static final String SERIALIZED_NAME_RELATIVE_TO = "relativeTo";
  @SerializedName(SERIALIZED_NAME_RELATIVE_TO)
  private String relativeTo;

  public static final String SERIALIZED_NAME_RGD_OBJECT_KEY = "rgdObjectKey";
  @SerializedName(SERIALIZED_NAME_RGD_OBJECT_KEY)
  private Integer rgdObjectKey;

  public static final String SERIALIZED_NAME_SPECIES_TYPE_KEY = "speciesTypeKey";
  @SerializedName(SERIALIZED_NAME_SPECIES_TYPE_KEY)
  private Integer speciesTypeKey;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_TERM_ACC = "termAcc";
  @SerializedName(SERIALIZED_NAME_TERM_ACC)
  private String termAcc;

  public static final String SERIALIZED_NAME_WITH_INFO = "withInfo";
  @SerializedName(SERIALIZED_NAME_WITH_INFO)
  private String withInfo;

  public static final String SERIALIZED_NAME_XREF_SOURCE = "xrefSource";
  @SerializedName(SERIALIZED_NAME_XREF_SOURCE)
  private String xrefSource;

  public Annotation() {
  }

  public Annotation annotatedObjectRgdId(Integer annotatedObjectRgdId) {
    this.annotatedObjectRgdId = annotatedObjectRgdId;
    return this;
  }

  /**
   * Get annotatedObjectRgdId
   * @return annotatedObjectRgdId
   */
  @javax.annotation.Nullable
  public Integer getAnnotatedObjectRgdId() {
    return annotatedObjectRgdId;
  }

  public void setAnnotatedObjectRgdId(Integer annotatedObjectRgdId) {
    this.annotatedObjectRgdId = annotatedObjectRgdId;
  }


  public Annotation annotationExtension(String annotationExtension) {
    this.annotationExtension = annotationExtension;
    return this;
  }

  /**
   * Get annotationExtension
   * @return annotationExtension
   */
  @javax.annotation.Nullable
  public String getAnnotationExtension() {
    return annotationExtension;
  }

  public void setAnnotationExtension(String annotationExtension) {
    this.annotationExtension = annotationExtension;
  }


  public Annotation aspect(String aspect) {
    this.aspect = aspect;
    return this;
  }

  /**
   * Get aspect
   * @return aspect
   */
  @javax.annotation.Nullable
  public String getAspect() {
    return aspect;
  }

  public void setAspect(String aspect) {
    this.aspect = aspect;
  }


  public Annotation createdBy(Integer createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public Integer getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Integer createdBy) {
    this.createdBy = createdBy;
  }


  public Annotation createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Annotation dataSrc(String dataSrc) {
    this.dataSrc = dataSrc;
    return this;
  }

  /**
   * Get dataSrc
   * @return dataSrc
   */
  @javax.annotation.Nullable
  public String getDataSrc() {
    return dataSrc;
  }

  public void setDataSrc(String dataSrc) {
    this.dataSrc = dataSrc;
  }


  public Annotation evidence(String evidence) {
    this.evidence = evidence;
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public String getEvidence() {
    return evidence;
  }

  public void setEvidence(String evidence) {
    this.evidence = evidence;
  }


  public Annotation geneProductFormId(String geneProductFormId) {
    this.geneProductFormId = geneProductFormId;
    return this;
  }

  /**
   * Get geneProductFormId
   * @return geneProductFormId
   */
  @javax.annotation.Nullable
  public String getGeneProductFormId() {
    return geneProductFormId;
  }

  public void setGeneProductFormId(String geneProductFormId) {
    this.geneProductFormId = geneProductFormId;
  }


  public Annotation key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public Annotation lastModifiedBy(Integer lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public Integer getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(Integer lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public Annotation lastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public Annotation notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Annotation objectName(String objectName) {
    this.objectName = objectName;
    return this;
  }

  /**
   * Get objectName
   * @return objectName
   */
  @javax.annotation.Nullable
  public String getObjectName() {
    return objectName;
  }

  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }


  public Annotation objectSymbol(String objectSymbol) {
    this.objectSymbol = objectSymbol;
    return this;
  }

  /**
   * Get objectSymbol
   * @return objectSymbol
   */
  @javax.annotation.Nullable
  public String getObjectSymbol() {
    return objectSymbol;
  }

  public void setObjectSymbol(String objectSymbol) {
    this.objectSymbol = objectSymbol;
  }


  public Annotation originalCreatedDate(OffsetDateTime originalCreatedDate) {
    this.originalCreatedDate = originalCreatedDate;
    return this;
  }

  /**
   * Get originalCreatedDate
   * @return originalCreatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOriginalCreatedDate() {
    return originalCreatedDate;
  }

  public void setOriginalCreatedDate(OffsetDateTime originalCreatedDate) {
    this.originalCreatedDate = originalCreatedDate;
  }


  public Annotation qualifier(String qualifier) {
    this.qualifier = qualifier;
    return this;
  }

  /**
   * Get qualifier
   * @return qualifier
   */
  @javax.annotation.Nullable
  public String getQualifier() {
    return qualifier;
  }

  public void setQualifier(String qualifier) {
    this.qualifier = qualifier;
  }


  public Annotation refRgdId(Integer refRgdId) {
    this.refRgdId = refRgdId;
    return this;
  }

  /**
   * Get refRgdId
   * @return refRgdId
   */
  @javax.annotation.Nullable
  public Integer getRefRgdId() {
    return refRgdId;
  }

  public void setRefRgdId(Integer refRgdId) {
    this.refRgdId = refRgdId;
  }


  public Annotation relativeTo(String relativeTo) {
    this.relativeTo = relativeTo;
    return this;
  }

  /**
   * Get relativeTo
   * @return relativeTo
   */
  @javax.annotation.Nullable
  public String getRelativeTo() {
    return relativeTo;
  }

  public void setRelativeTo(String relativeTo) {
    this.relativeTo = relativeTo;
  }


  public Annotation rgdObjectKey(Integer rgdObjectKey) {
    this.rgdObjectKey = rgdObjectKey;
    return this;
  }

  /**
   * Get rgdObjectKey
   * @return rgdObjectKey
   */
  @javax.annotation.Nullable
  public Integer getRgdObjectKey() {
    return rgdObjectKey;
  }

  public void setRgdObjectKey(Integer rgdObjectKey) {
    this.rgdObjectKey = rgdObjectKey;
  }


  public Annotation speciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
    return this;
  }

  /**
   * Get speciesTypeKey
   * @return speciesTypeKey
   */
  @javax.annotation.Nullable
  public Integer getSpeciesTypeKey() {
    return speciesTypeKey;
  }

  public void setSpeciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
  }


  public Annotation term(String term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }


  public Annotation termAcc(String termAcc) {
    this.termAcc = termAcc;
    return this;
  }

  /**
   * Get termAcc
   * @return termAcc
   */
  @javax.annotation.Nullable
  public String getTermAcc() {
    return termAcc;
  }

  public void setTermAcc(String termAcc) {
    this.termAcc = termAcc;
  }


  public Annotation withInfo(String withInfo) {
    this.withInfo = withInfo;
    return this;
  }

  /**
   * Get withInfo
   * @return withInfo
   */
  @javax.annotation.Nullable
  public String getWithInfo() {
    return withInfo;
  }

  public void setWithInfo(String withInfo) {
    this.withInfo = withInfo;
  }


  public Annotation xrefSource(String xrefSource) {
    this.xrefSource = xrefSource;
    return this;
  }

  /**
   * Get xrefSource
   * @return xrefSource
   */
  @javax.annotation.Nullable
  public String getXrefSource() {
    return xrefSource;
  }

  public void setXrefSource(String xrefSource) {
    this.xrefSource = xrefSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annotation annotation = (Annotation) o;
    return Objects.equals(this.annotatedObjectRgdId, annotation.annotatedObjectRgdId) &&
        Objects.equals(this.annotationExtension, annotation.annotationExtension) &&
        Objects.equals(this.aspect, annotation.aspect) &&
        Objects.equals(this.createdBy, annotation.createdBy) &&
        Objects.equals(this.createdDate, annotation.createdDate) &&
        Objects.equals(this.dataSrc, annotation.dataSrc) &&
        Objects.equals(this.evidence, annotation.evidence) &&
        Objects.equals(this.geneProductFormId, annotation.geneProductFormId) &&
        Objects.equals(this.key, annotation.key) &&
        Objects.equals(this.lastModifiedBy, annotation.lastModifiedBy) &&
        Objects.equals(this.lastModifiedDate, annotation.lastModifiedDate) &&
        Objects.equals(this.notes, annotation.notes) &&
        Objects.equals(this.objectName, annotation.objectName) &&
        Objects.equals(this.objectSymbol, annotation.objectSymbol) &&
        Objects.equals(this.originalCreatedDate, annotation.originalCreatedDate) &&
        Objects.equals(this.qualifier, annotation.qualifier) &&
        Objects.equals(this.refRgdId, annotation.refRgdId) &&
        Objects.equals(this.relativeTo, annotation.relativeTo) &&
        Objects.equals(this.rgdObjectKey, annotation.rgdObjectKey) &&
        Objects.equals(this.speciesTypeKey, annotation.speciesTypeKey) &&
        Objects.equals(this.term, annotation.term) &&
        Objects.equals(this.termAcc, annotation.termAcc) &&
        Objects.equals(this.withInfo, annotation.withInfo) &&
        Objects.equals(this.xrefSource, annotation.xrefSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotatedObjectRgdId, annotationExtension, aspect, createdBy, createdDate, dataSrc, evidence, geneProductFormId, key, lastModifiedBy, lastModifiedDate, notes, objectName, objectSymbol, originalCreatedDate, qualifier, refRgdId, relativeTo, rgdObjectKey, speciesTypeKey, term, termAcc, withInfo, xrefSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annotation {\n");
    sb.append("    annotatedObjectRgdId: ").append(toIndentedString(annotatedObjectRgdId)).append("\n");
    sb.append("    annotationExtension: ").append(toIndentedString(annotationExtension)).append("\n");
    sb.append("    aspect: ").append(toIndentedString(aspect)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dataSrc: ").append(toIndentedString(dataSrc)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    geneProductFormId: ").append(toIndentedString(geneProductFormId)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("    objectSymbol: ").append(toIndentedString(objectSymbol)).append("\n");
    sb.append("    originalCreatedDate: ").append(toIndentedString(originalCreatedDate)).append("\n");
    sb.append("    qualifier: ").append(toIndentedString(qualifier)).append("\n");
    sb.append("    refRgdId: ").append(toIndentedString(refRgdId)).append("\n");
    sb.append("    relativeTo: ").append(toIndentedString(relativeTo)).append("\n");
    sb.append("    rgdObjectKey: ").append(toIndentedString(rgdObjectKey)).append("\n");
    sb.append("    speciesTypeKey: ").append(toIndentedString(speciesTypeKey)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    termAcc: ").append(toIndentedString(termAcc)).append("\n");
    sb.append("    withInfo: ").append(toIndentedString(withInfo)).append("\n");
    sb.append("    xrefSource: ").append(toIndentedString(xrefSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotatedObjectRgdId");
    openapiFields.add("annotationExtension");
    openapiFields.add("aspect");
    openapiFields.add("createdBy");
    openapiFields.add("createdDate");
    openapiFields.add("dataSrc");
    openapiFields.add("evidence");
    openapiFields.add("geneProductFormId");
    openapiFields.add("key");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("notes");
    openapiFields.add("objectName");
    openapiFields.add("objectSymbol");
    openapiFields.add("originalCreatedDate");
    openapiFields.add("qualifier");
    openapiFields.add("refRgdId");
    openapiFields.add("relativeTo");
    openapiFields.add("rgdObjectKey");
    openapiFields.add("speciesTypeKey");
    openapiFields.add("term");
    openapiFields.add("termAcc");
    openapiFields.add("withInfo");
    openapiFields.add("xrefSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Annotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Annotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Annotation is not found in the empty JSON string", Annotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Annotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Annotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationExtension") != null && !jsonObj.get("annotationExtension").isJsonNull()) && !jsonObj.get("annotationExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationExtension").toString()));
      }
      if ((jsonObj.get("aspect") != null && !jsonObj.get("aspect").isJsonNull()) && !jsonObj.get("aspect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspect").toString()));
      }
      if ((jsonObj.get("dataSrc") != null && !jsonObj.get("dataSrc").isJsonNull()) && !jsonObj.get("dataSrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSrc").toString()));
      }
      if ((jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) && !jsonObj.get("evidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidence").toString()));
      }
      if ((jsonObj.get("geneProductFormId") != null && !jsonObj.get("geneProductFormId").isJsonNull()) && !jsonObj.get("geneProductFormId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geneProductFormId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geneProductFormId").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("objectName") != null && !jsonObj.get("objectName").isJsonNull()) && !jsonObj.get("objectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectName").toString()));
      }
      if ((jsonObj.get("objectSymbol") != null && !jsonObj.get("objectSymbol").isJsonNull()) && !jsonObj.get("objectSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectSymbol").toString()));
      }
      if ((jsonObj.get("qualifier") != null && !jsonObj.get("qualifier").isJsonNull()) && !jsonObj.get("qualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qualifier").toString()));
      }
      if ((jsonObj.get("relativeTo") != null && !jsonObj.get("relativeTo").isJsonNull()) && !jsonObj.get("relativeTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeTo").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
      if ((jsonObj.get("termAcc") != null && !jsonObj.get("termAcc").isJsonNull()) && !jsonObj.get("termAcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termAcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termAcc").toString()));
      }
      if ((jsonObj.get("withInfo") != null && !jsonObj.get("withInfo").isJsonNull()) && !jsonObj.get("withInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `withInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("withInfo").toString()));
      }
      if ((jsonObj.get("xrefSource") != null && !jsonObj.get("xrefSource").isJsonNull()) && !jsonObj.get("xrefSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xrefSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xrefSource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Annotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Annotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Annotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Annotation.class));

       return (TypeAdapter<T>) new TypeAdapter<Annotation>() {
           @Override
           public void write(JsonWriter out, Annotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Annotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Annotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Annotation
   * @throws IOException if the JSON string is invalid with respect to Annotation
   */
  public static Annotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Annotation.class);
  }

  /**
   * Convert an instance of Annotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

