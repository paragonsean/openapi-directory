/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Map
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Map {
  public static final String SERIALIZED_NAME_DBSNP_VERSION = "dbsnpVersion";
  @SerializedName(SERIALIZED_NAME_DBSNP_VERSION)
  private String dbsnpVersion;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_METHOD_KEY = "methodKey";
  @SerializedName(SERIALIZED_NAME_METHOD_KEY)
  private Integer methodKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PRIMARY_REF_ASSEMBLY = "primaryRefAssembly";
  @SerializedName(SERIALIZED_NAME_PRIMARY_REF_ASSEMBLY)
  private Boolean primaryRefAssembly;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_REF_SEQ_ASSEMBLY_ACC = "refSeqAssemblyAcc";
  @SerializedName(SERIALIZED_NAME_REF_SEQ_ASSEMBLY_ACC)
  private String refSeqAssemblyAcc;

  public static final String SERIALIZED_NAME_REF_SEQ_ASSEMBLY_NAME = "refSeqAssemblyName";
  @SerializedName(SERIALIZED_NAME_REF_SEQ_ASSEMBLY_NAME)
  private String refSeqAssemblyName;

  public static final String SERIALIZED_NAME_RGD_ID = "rgdId";
  @SerializedName(SERIALIZED_NAME_RGD_ID)
  private Integer rgdId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SPECIES_TYPE_KEY = "speciesTypeKey";
  @SerializedName(SERIALIZED_NAME_SPECIES_TYPE_KEY)
  private Integer speciesTypeKey;

  public static final String SERIALIZED_NAME_UCSC_ASSEMBLY_ID = "ucscAssemblyId";
  @SerializedName(SERIALIZED_NAME_UCSC_ASSEMBLY_ID)
  private String ucscAssemblyId;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Map() {
  }

  public Map dbsnpVersion(String dbsnpVersion) {
    this.dbsnpVersion = dbsnpVersion;
    return this;
  }

  /**
   * Get dbsnpVersion
   * @return dbsnpVersion
   */
  @javax.annotation.Nullable
  public String getDbsnpVersion() {
    return dbsnpVersion;
  }

  public void setDbsnpVersion(String dbsnpVersion) {
    this.dbsnpVersion = dbsnpVersion;
  }


  public Map description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Map key(Integer key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Integer getKey() {
    return key;
  }

  public void setKey(Integer key) {
    this.key = key;
  }


  public Map methodKey(Integer methodKey) {
    this.methodKey = methodKey;
    return this;
  }

  /**
   * Get methodKey
   * @return methodKey
   */
  @javax.annotation.Nullable
  public Integer getMethodKey() {
    return methodKey;
  }

  public void setMethodKey(Integer methodKey) {
    this.methodKey = methodKey;
  }


  public Map name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Map notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Map primaryRefAssembly(Boolean primaryRefAssembly) {
    this.primaryRefAssembly = primaryRefAssembly;
    return this;
  }

  /**
   * Get primaryRefAssembly
   * @return primaryRefAssembly
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryRefAssembly() {
    return primaryRefAssembly;
  }

  public void setPrimaryRefAssembly(Boolean primaryRefAssembly) {
    this.primaryRefAssembly = primaryRefAssembly;
  }


  public Map rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public Map refSeqAssemblyAcc(String refSeqAssemblyAcc) {
    this.refSeqAssemblyAcc = refSeqAssemblyAcc;
    return this;
  }

  /**
   * Get refSeqAssemblyAcc
   * @return refSeqAssemblyAcc
   */
  @javax.annotation.Nullable
  public String getRefSeqAssemblyAcc() {
    return refSeqAssemblyAcc;
  }

  public void setRefSeqAssemblyAcc(String refSeqAssemblyAcc) {
    this.refSeqAssemblyAcc = refSeqAssemblyAcc;
  }


  public Map refSeqAssemblyName(String refSeqAssemblyName) {
    this.refSeqAssemblyName = refSeqAssemblyName;
    return this;
  }

  /**
   * Get refSeqAssemblyName
   * @return refSeqAssemblyName
   */
  @javax.annotation.Nullable
  public String getRefSeqAssemblyName() {
    return refSeqAssemblyName;
  }

  public void setRefSeqAssemblyName(String refSeqAssemblyName) {
    this.refSeqAssemblyName = refSeqAssemblyName;
  }


  public Map rgdId(Integer rgdId) {
    this.rgdId = rgdId;
    return this;
  }

  /**
   * Get rgdId
   * @return rgdId
   */
  @javax.annotation.Nullable
  public Integer getRgdId() {
    return rgdId;
  }

  public void setRgdId(Integer rgdId) {
    this.rgdId = rgdId;
  }


  public Map source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Map speciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
    return this;
  }

  /**
   * Get speciesTypeKey
   * @return speciesTypeKey
   */
  @javax.annotation.Nullable
  public Integer getSpeciesTypeKey() {
    return speciesTypeKey;
  }

  public void setSpeciesTypeKey(Integer speciesTypeKey) {
    this.speciesTypeKey = speciesTypeKey;
  }


  public Map ucscAssemblyId(String ucscAssemblyId) {
    this.ucscAssemblyId = ucscAssemblyId;
    return this;
  }

  /**
   * Get ucscAssemblyId
   * @return ucscAssemblyId
   */
  @javax.annotation.Nullable
  public String getUcscAssemblyId() {
    return ucscAssemblyId;
  }

  public void setUcscAssemblyId(String ucscAssemblyId) {
    this.ucscAssemblyId = ucscAssemblyId;
  }


  public Map unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public Map version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Map map = (Map) o;
    return Objects.equals(this.dbsnpVersion, map.dbsnpVersion) &&
        Objects.equals(this.description, map.description) &&
        Objects.equals(this.key, map.key) &&
        Objects.equals(this.methodKey, map.methodKey) &&
        Objects.equals(this.name, map.name) &&
        Objects.equals(this.notes, map.notes) &&
        Objects.equals(this.primaryRefAssembly, map.primaryRefAssembly) &&
        Objects.equals(this.rank, map.rank) &&
        Objects.equals(this.refSeqAssemblyAcc, map.refSeqAssemblyAcc) &&
        Objects.equals(this.refSeqAssemblyName, map.refSeqAssemblyName) &&
        Objects.equals(this.rgdId, map.rgdId) &&
        Objects.equals(this.source, map.source) &&
        Objects.equals(this.speciesTypeKey, map.speciesTypeKey) &&
        Objects.equals(this.ucscAssemblyId, map.ucscAssemblyId) &&
        Objects.equals(this.unit, map.unit) &&
        Objects.equals(this.version, map.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbsnpVersion, description, key, methodKey, name, notes, primaryRefAssembly, rank, refSeqAssemblyAcc, refSeqAssemblyName, rgdId, source, speciesTypeKey, ucscAssemblyId, unit, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Map {\n");
    sb.append("    dbsnpVersion: ").append(toIndentedString(dbsnpVersion)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    methodKey: ").append(toIndentedString(methodKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    primaryRefAssembly: ").append(toIndentedString(primaryRefAssembly)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    refSeqAssemblyAcc: ").append(toIndentedString(refSeqAssemblyAcc)).append("\n");
    sb.append("    refSeqAssemblyName: ").append(toIndentedString(refSeqAssemblyName)).append("\n");
    sb.append("    rgdId: ").append(toIndentedString(rgdId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    speciesTypeKey: ").append(toIndentedString(speciesTypeKey)).append("\n");
    sb.append("    ucscAssemblyId: ").append(toIndentedString(ucscAssemblyId)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dbsnpVersion");
    openapiFields.add("description");
    openapiFields.add("key");
    openapiFields.add("methodKey");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("primaryRefAssembly");
    openapiFields.add("rank");
    openapiFields.add("refSeqAssemblyAcc");
    openapiFields.add("refSeqAssemblyName");
    openapiFields.add("rgdId");
    openapiFields.add("source");
    openapiFields.add("speciesTypeKey");
    openapiFields.add("ucscAssemblyId");
    openapiFields.add("unit");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Map
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Map.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Map is not found in the empty JSON string", Map.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Map.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Map` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dbsnpVersion") != null && !jsonObj.get("dbsnpVersion").isJsonNull()) && !jsonObj.get("dbsnpVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbsnpVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbsnpVersion").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("refSeqAssemblyAcc") != null && !jsonObj.get("refSeqAssemblyAcc").isJsonNull()) && !jsonObj.get("refSeqAssemblyAcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refSeqAssemblyAcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refSeqAssemblyAcc").toString()));
      }
      if ((jsonObj.get("refSeqAssemblyName") != null && !jsonObj.get("refSeqAssemblyName").isJsonNull()) && !jsonObj.get("refSeqAssemblyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refSeqAssemblyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refSeqAssemblyName").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("ucscAssemblyId") != null && !jsonObj.get("ucscAssemblyId").isJsonNull()) && !jsonObj.get("ucscAssemblyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ucscAssemblyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ucscAssemblyId").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Map.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Map' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Map> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Map.class));

       return (TypeAdapter<T>) new TypeAdapter<Map>() {
           @Override
           public void write(JsonWriter out, Map value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Map read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Map given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Map
   * @throws IOException if the JSON string is invalid with respect to Map
   */
  public static Map fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Map.class);
  }

  /**
   * Convert an instance of Map to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

