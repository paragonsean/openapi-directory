/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Gene;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MappedGene
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:44.365518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappedGene {
  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_GENE = "gene";
  @SerializedName(SERIALIZED_NAME_GENE)
  private Gene gene;

  public static final String SERIALIZED_NAME_MAP_KEY = "mapKey";
  @SerializedName(SERIALIZED_NAME_MAP_KEY)
  private Integer mapKey;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Long start;

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private Long stop;

  public static final String SERIALIZED_NAME_STRAND = "strand";
  @SerializedName(SERIALIZED_NAME_STRAND)
  private String strand;

  public MappedGene() {
  }

  public MappedGene chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

  /**
   * Get chromosome
   * @return chromosome
   */
  @javax.annotation.Nullable
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public MappedGene gene(Gene gene) {
    this.gene = gene;
    return this;
  }

  /**
   * Get gene
   * @return gene
   */
  @javax.annotation.Nullable
  public Gene getGene() {
    return gene;
  }

  public void setGene(Gene gene) {
    this.gene = gene;
  }


  public MappedGene mapKey(Integer mapKey) {
    this.mapKey = mapKey;
    return this;
  }

  /**
   * Get mapKey
   * @return mapKey
   */
  @javax.annotation.Nullable
  public Integer getMapKey() {
    return mapKey;
  }

  public void setMapKey(Integer mapKey) {
    this.mapKey = mapKey;
  }


  public MappedGene start(Long start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Long getStart() {
    return start;
  }

  public void setStart(Long start) {
    this.start = start;
  }


  public MappedGene stop(Long stop) {
    this.stop = stop;
    return this;
  }

  /**
   * Get stop
   * @return stop
   */
  @javax.annotation.Nullable
  public Long getStop() {
    return stop;
  }

  public void setStop(Long stop) {
    this.stop = stop;
  }


  public MappedGene strand(String strand) {
    this.strand = strand;
    return this;
  }

  /**
   * Get strand
   * @return strand
   */
  @javax.annotation.Nullable
  public String getStrand() {
    return strand;
  }

  public void setStrand(String strand) {
    this.strand = strand;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappedGene mappedGene = (MappedGene) o;
    return Objects.equals(this.chromosome, mappedGene.chromosome) &&
        Objects.equals(this.gene, mappedGene.gene) &&
        Objects.equals(this.mapKey, mappedGene.mapKey) &&
        Objects.equals(this.start, mappedGene.start) &&
        Objects.equals(this.stop, mappedGene.stop) &&
        Objects.equals(this.strand, mappedGene.strand);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromosome, gene, mapKey, start, stop, strand);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappedGene {\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    gene: ").append(toIndentedString(gene)).append("\n");
    sb.append("    mapKey: ").append(toIndentedString(mapKey)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    strand: ").append(toIndentedString(strand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromosome");
    openapiFields.add("gene");
    openapiFields.add("mapKey");
    openapiFields.add("start");
    openapiFields.add("stop");
    openapiFields.add("strand");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappedGene
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappedGene.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappedGene is not found in the empty JSON string", MappedGene.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappedGene.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappedGene` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chromosome") != null && !jsonObj.get("chromosome").isJsonNull()) && !jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      // validate the optional field `gene`
      if (jsonObj.get("gene") != null && !jsonObj.get("gene").isJsonNull()) {
        Gene.validateJsonElement(jsonObj.get("gene"));
      }
      if ((jsonObj.get("strand") != null && !jsonObj.get("strand").isJsonNull()) && !jsonObj.get("strand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strand").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappedGene.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappedGene' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappedGene> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappedGene.class));

       return (TypeAdapter<T>) new TypeAdapter<MappedGene>() {
           @Override
           public void write(JsonWriter out, MappedGene value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappedGene read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappedGene given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappedGene
   * @throws IOException if the JSON string is invalid with respect to MappedGene
   */
  public static MappedGene fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappedGene.class);
  }

  /**
   * Convert an instance of MappedGene to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

