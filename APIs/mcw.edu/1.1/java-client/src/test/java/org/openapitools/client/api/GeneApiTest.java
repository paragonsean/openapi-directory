/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotatedGeneRequest;
import org.openapitools.client.model.Gene;
import org.openapitools.client.model.MappedGene;
import org.openapitools.client.model.MappedGenePosition;
import org.openapitools.client.model.OrthologRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneApi
 */
@Disabled
public class GeneApiTest {

    private final GeneApi api = new GeneApi();

    /**
     * Return a list of genes annotated to an ontology term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAnnotatedGenesUsingGETTest() throws ApiException {
        String accId = null;
        List<Gene> response = api.getAllAnnotatedGenesUsingGET(accId);
        // TODO: test validations
    }

    /**
     * Return a list of genes annotated to an ontology term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotatedGenesUsingPOSTTest() throws ApiException {
        AnnotatedGeneRequest annotatedGeneRequest = null;
        List<Gene> response = api.getAnnotatedGenesUsingPOST(annotatedGeneRequest);
        // TODO: test validations
    }

    /**
     * Return a list of gene alleles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneAllelesUsingGETTest() throws ApiException {
        Integer rgdId = null;
        List<Gene> response = api.getGeneAllelesUsingGET(rgdId);
        // TODO: test validations
    }

    /**
     * Return a list of all genes with position information for an assembly
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneByMapKeyUsingGETTest() throws ApiException {
        Integer mapKey = null;
        List<MappedGene> response = api.getGeneByMapKeyUsingGET(mapKey);
        // TODO: test validations
    }

    /**
     * Get a gene record by RGD ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneByRgdIdUsingGETTest() throws ApiException {
        Integer rgdId = null;
        Gene response = api.getGeneByRgdIdUsingGET(rgdId);
        // TODO: test validations
    }

    /**
     * Get a gene record by symbol and species type key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneBySymbolUsingGETTest() throws ApiException {
        String symbol = null;
        Integer speciesTypeKey = null;
        Gene response = api.getGeneBySymbolUsingGET(symbol, speciesTypeKey);
        // TODO: test validations
    }

    /**
     * Return a list of gene orthologs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneOrthologsUsingGETTest() throws ApiException {
        Integer rgdId = null;
        List<Gene> response = api.getGeneOrthologsUsingGET(rgdId);
        // TODO: test validations
    }

    /**
     * Return a list of genes annotated to an ontology term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesAnnotatedUsingGETTest() throws ApiException {
        String accId = null;
        Integer speciesTypeKey = null;
        List<Gene> response = api.getGenesAnnotatedUsingGET(accId, speciesTypeKey);
        // TODO: test validations
    }

    /**
     * Return a list of genes for an affymetrix ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesByAffyIdUsingGETTest() throws ApiException {
        String affyId = null;
        Integer speciesTypeKey = null;
        List<Gene> response = api.getGenesByAffyIdUsingGET(affyId, speciesTypeKey);
        // TODO: test validations
    }

    /**
     * Return a list of genes for an alias and species
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesByAliasSymbolUsingGETTest() throws ApiException {
        String aliasSymbol = null;
        Integer speciesTypeKey = null;
        List<Gene> response = api.getGenesByAliasSymbolUsingGET(aliasSymbol, speciesTypeKey);
        // TODO: test validations
    }

    /**
     * Return a list of genes by keyword and species type key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesByKeywordUsingGETTest() throws ApiException {
        String keyword = null;
        Integer speciesTypeKey = null;
        List<Gene> response = api.getGenesByKeywordUsingGET(keyword, speciesTypeKey);
        // TODO: test validations
    }

    /**
     * Return a list of genes position and map key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesByPositionUsingGETTest() throws ApiException {
        String chr = null;
        Long start = null;
        Long stop = null;
        Integer mapKey = null;
        List<Gene> response = api.getGenesByPositionUsingGET(chr, start, stop, mapKey);
        // TODO: test validations
    }

    /**
     * Return a list of all genes for a species in RGD
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesBySpeciesUsingGETTest() throws ApiException {
        Integer speciesTypeKey = null;
        List<Gene> response = api.getGenesBySpeciesUsingGET(speciesTypeKey);
        // TODO: test validations
    }

    /**
     * Return a list of genes in region
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenesInRegionUsingGETTest() throws ApiException {
        String chr = null;
        Long start = null;
        Long stop = null;
        Integer mapKey = null;
        List<MappedGenePosition> response = api.getGenesInRegionUsingGET(chr, start, stop, mapKey);
        // TODO: test validations
    }

    /**
     * Return a list of genes position and map key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMappedGenesByPositionUsingGETTest() throws ApiException {
        String chr = null;
        Long start = null;
        Long stop = null;
        Integer mapKey = null;
        List<MappedGene> response = api.getMappedGenesByPositionUsingGET(chr, start, stop, mapKey);
        // TODO: test validations
    }

    /**
     * Return a list of gene orthologs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrthologsByListUsingPOSTTest() throws ApiException {
        OrthologRequest orthologRequest = null;
        Map<String, List<Gene>> response = api.getOrthologsByListUsingPOST(orthologRequest);
        // TODO: test validations
    }

}
