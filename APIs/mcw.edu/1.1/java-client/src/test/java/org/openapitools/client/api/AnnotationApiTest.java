/*
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.AnnotationRequest;
import org.openapitools.client.model.MapPair;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationApi
 */
@Disabled
public class AnnotationApiTest {

    private final AnnotationApi api = new AnnotationApi();

    /**
     * Returns annotation count for ontology accession ID and object type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationCountByAccIdAndObjectTypeUsingGETTest() throws ApiException {
        String accId = null;
        Integer speciesTypeKey = null;
        Boolean includeChildren = null;
        Integer objectType = null;
        Integer response = api.getAnnotationCountByAccIdAndObjectTypeUsingGET(accId, speciesTypeKey, includeChildren, objectType);
        // TODO: test validations
    }

    /**
     * Returns annotation count for ontology accession ID and speicies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationCountByAccIdAndSpeciesUsingGETTest() throws ApiException {
        String accId = null;
        Integer speciesTypeKey = null;
        Boolean includeChildren = null;
        Integer response = api.getAnnotationCountByAccIdAndSpeciesUsingGET(accId, speciesTypeKey, includeChildren);
        // TODO: test validations
    }

    /**
     * Returns annotation count for ontology accession ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationCountByAccIdUsingGETTest() throws ApiException {
        String accId = null;
        Boolean includeChildren = null;
        Integer response = api.getAnnotationCountByAccIdUsingGET(accId, includeChildren);
        // TODO: test validations
    }

    /**
     * Returns a list of annotations by RGD ID and ontology term accession ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsByAccIdAndRgdIdUsingGETTest() throws ApiException {
        String accId = null;
        Integer rgdId = null;
        List<Annotation> response = api.getAnnotationsByAccIdAndRgdIdUsingGET(accId, rgdId);
        // TODO: test validations
    }

    /**
     * Returns a list of annotations by RGD ID and ontology prefix
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsByRgdIdAndOntologyUsingGETTest() throws ApiException {
        Integer rgdId = null;
        String ontologyPrefix = null;
        List<Annotation> response = api.getAnnotationsByRgdIdAndOntologyUsingGET(rgdId, ontologyPrefix);
        // TODO: test validations
    }

    /**
     * Returns a list of annotations by RGD ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsByRgdIdUsingGETTest() throws ApiException {
        Integer rgdId = null;
        List<Annotation> response = api.getAnnotationsByRgdIdUsingGET(rgdId);
        // TODO: test validations
    }

    /**
     * Returns a list annotations for an ontology term or a term and it&#39;s children
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsUsingGETTest() throws ApiException {
        String accId = null;
        Integer speciesTypeKey = null;
        Boolean includeChildren = null;
        List<Annotation> response = api.getAnnotationsUsingGET(accId, speciesTypeKey, includeChildren);
        // TODO: test validations
    }

    /**
     * Return a list of genes annotated to an ontology term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsUsingPOSTTest() throws ApiException {
        AnnotationRequest annotationRequest = null;
        List<Annotation> response = api.getAnnotationsUsingPOST(annotationRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of annotations for a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotsByRefrerenceUsingGETTest() throws ApiException {
        Integer refRgdId = null;
        List<Annotation> response = api.getAnnotsByRefrerenceUsingGET(refRgdId);
        // TODO: test validations
    }

    /**
     * Returns a list ontology term accession IDs annotated to an rgd object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTermAccIdsUsingGETTest() throws ApiException {
        Integer rgdId = null;
        List<MapPair> response = api.getTermAccIdsUsingGET(rgdId);
        // TODO: test validations
    }

}
