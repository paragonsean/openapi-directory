/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Annotation model module.
 * @module model/Annotation
 * @version 1.1
 */
class Annotation {
    /**
     * Constructs a new <code>Annotation</code>.
     * @alias module:model/Annotation
     */
    constructor() { 
        
        Annotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Annotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Annotation} obj Optional instance to populate.
     * @return {module:model/Annotation} The populated <code>Annotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Annotation();

            if (data.hasOwnProperty('annotatedObjectRgdId')) {
                obj['annotatedObjectRgdId'] = ApiClient.convertToType(data['annotatedObjectRgdId'], 'Number');
            }
            if (data.hasOwnProperty('annotationExtension')) {
                obj['annotationExtension'] = ApiClient.convertToType(data['annotationExtension'], 'String');
            }
            if (data.hasOwnProperty('aspect')) {
                obj['aspect'] = ApiClient.convertToType(data['aspect'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'Number');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('dataSrc')) {
                obj['dataSrc'] = ApiClient.convertToType(data['dataSrc'], 'String');
            }
            if (data.hasOwnProperty('evidence')) {
                obj['evidence'] = ApiClient.convertToType(data['evidence'], 'String');
            }
            if (data.hasOwnProperty('geneProductFormId')) {
                obj['geneProductFormId'] = ApiClient.convertToType(data['geneProductFormId'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'Number');
            }
            if (data.hasOwnProperty('lastModifiedDate')) {
                obj['lastModifiedDate'] = ApiClient.convertToType(data['lastModifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('objectName')) {
                obj['objectName'] = ApiClient.convertToType(data['objectName'], 'String');
            }
            if (data.hasOwnProperty('objectSymbol')) {
                obj['objectSymbol'] = ApiClient.convertToType(data['objectSymbol'], 'String');
            }
            if (data.hasOwnProperty('originalCreatedDate')) {
                obj['originalCreatedDate'] = ApiClient.convertToType(data['originalCreatedDate'], 'Date');
            }
            if (data.hasOwnProperty('qualifier')) {
                obj['qualifier'] = ApiClient.convertToType(data['qualifier'], 'String');
            }
            if (data.hasOwnProperty('refRgdId')) {
                obj['refRgdId'] = ApiClient.convertToType(data['refRgdId'], 'Number');
            }
            if (data.hasOwnProperty('relativeTo')) {
                obj['relativeTo'] = ApiClient.convertToType(data['relativeTo'], 'String');
            }
            if (data.hasOwnProperty('rgdObjectKey')) {
                obj['rgdObjectKey'] = ApiClient.convertToType(data['rgdObjectKey'], 'Number');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
            if (data.hasOwnProperty('termAcc')) {
                obj['termAcc'] = ApiClient.convertToType(data['termAcc'], 'String');
            }
            if (data.hasOwnProperty('withInfo')) {
                obj['withInfo'] = ApiClient.convertToType(data['withInfo'], 'String');
            }
            if (data.hasOwnProperty('xrefSource')) {
                obj['xrefSource'] = ApiClient.convertToType(data['xrefSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Annotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Annotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationExtension'] && !(typeof data['annotationExtension'] === 'string' || data['annotationExtension'] instanceof String)) {
            throw new Error("Expected the field `annotationExtension` to be a primitive type in the JSON string but got " + data['annotationExtension']);
        }
        // ensure the json data is a string
        if (data['aspect'] && !(typeof data['aspect'] === 'string' || data['aspect'] instanceof String)) {
            throw new Error("Expected the field `aspect` to be a primitive type in the JSON string but got " + data['aspect']);
        }
        // ensure the json data is a string
        if (data['dataSrc'] && !(typeof data['dataSrc'] === 'string' || data['dataSrc'] instanceof String)) {
            throw new Error("Expected the field `dataSrc` to be a primitive type in the JSON string but got " + data['dataSrc']);
        }
        // ensure the json data is a string
        if (data['evidence'] && !(typeof data['evidence'] === 'string' || data['evidence'] instanceof String)) {
            throw new Error("Expected the field `evidence` to be a primitive type in the JSON string but got " + data['evidence']);
        }
        // ensure the json data is a string
        if (data['geneProductFormId'] && !(typeof data['geneProductFormId'] === 'string' || data['geneProductFormId'] instanceof String)) {
            throw new Error("Expected the field `geneProductFormId` to be a primitive type in the JSON string but got " + data['geneProductFormId']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['objectName'] && !(typeof data['objectName'] === 'string' || data['objectName'] instanceof String)) {
            throw new Error("Expected the field `objectName` to be a primitive type in the JSON string but got " + data['objectName']);
        }
        // ensure the json data is a string
        if (data['objectSymbol'] && !(typeof data['objectSymbol'] === 'string' || data['objectSymbol'] instanceof String)) {
            throw new Error("Expected the field `objectSymbol` to be a primitive type in the JSON string but got " + data['objectSymbol']);
        }
        // ensure the json data is a string
        if (data['qualifier'] && !(typeof data['qualifier'] === 'string' || data['qualifier'] instanceof String)) {
            throw new Error("Expected the field `qualifier` to be a primitive type in the JSON string but got " + data['qualifier']);
        }
        // ensure the json data is a string
        if (data['relativeTo'] && !(typeof data['relativeTo'] === 'string' || data['relativeTo'] instanceof String)) {
            throw new Error("Expected the field `relativeTo` to be a primitive type in the JSON string but got " + data['relativeTo']);
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }
        // ensure the json data is a string
        if (data['termAcc'] && !(typeof data['termAcc'] === 'string' || data['termAcc'] instanceof String)) {
            throw new Error("Expected the field `termAcc` to be a primitive type in the JSON string but got " + data['termAcc']);
        }
        // ensure the json data is a string
        if (data['withInfo'] && !(typeof data['withInfo'] === 'string' || data['withInfo'] instanceof String)) {
            throw new Error("Expected the field `withInfo` to be a primitive type in the JSON string but got " + data['withInfo']);
        }
        // ensure the json data is a string
        if (data['xrefSource'] && !(typeof data['xrefSource'] === 'string' || data['xrefSource'] instanceof String)) {
            throw new Error("Expected the field `xrefSource` to be a primitive type in the JSON string but got " + data['xrefSource']);
        }

        return true;
    }


}



/**
 * @member {Number} annotatedObjectRgdId
 */
Annotation.prototype['annotatedObjectRgdId'] = undefined;

/**
 * @member {String} annotationExtension
 */
Annotation.prototype['annotationExtension'] = undefined;

/**
 * @member {String} aspect
 */
Annotation.prototype['aspect'] = undefined;

/**
 * @member {Number} createdBy
 */
Annotation.prototype['createdBy'] = undefined;

/**
 * @member {Date} createdDate
 */
Annotation.prototype['createdDate'] = undefined;

/**
 * @member {String} dataSrc
 */
Annotation.prototype['dataSrc'] = undefined;

/**
 * @member {String} evidence
 */
Annotation.prototype['evidence'] = undefined;

/**
 * @member {String} geneProductFormId
 */
Annotation.prototype['geneProductFormId'] = undefined;

/**
 * @member {Number} key
 */
Annotation.prototype['key'] = undefined;

/**
 * @member {Number} lastModifiedBy
 */
Annotation.prototype['lastModifiedBy'] = undefined;

/**
 * @member {Date} lastModifiedDate
 */
Annotation.prototype['lastModifiedDate'] = undefined;

/**
 * @member {String} notes
 */
Annotation.prototype['notes'] = undefined;

/**
 * @member {String} objectName
 */
Annotation.prototype['objectName'] = undefined;

/**
 * @member {String} objectSymbol
 */
Annotation.prototype['objectSymbol'] = undefined;

/**
 * @member {Date} originalCreatedDate
 */
Annotation.prototype['originalCreatedDate'] = undefined;

/**
 * @member {String} qualifier
 */
Annotation.prototype['qualifier'] = undefined;

/**
 * @member {Number} refRgdId
 */
Annotation.prototype['refRgdId'] = undefined;

/**
 * @member {String} relativeTo
 */
Annotation.prototype['relativeTo'] = undefined;

/**
 * @member {Number} rgdObjectKey
 */
Annotation.prototype['rgdObjectKey'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
Annotation.prototype['speciesTypeKey'] = undefined;

/**
 * @member {String} term
 */
Annotation.prototype['term'] = undefined;

/**
 * @member {String} termAcc
 */
Annotation.prototype['termAcc'] = undefined;

/**
 * @member {String} withInfo
 */
Annotation.prototype['withInfo'] = undefined;

/**
 * @member {String} xrefSource
 */
Annotation.prototype['xrefSource'] = undefined;






export default Annotation;

