/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The Strain model module.
 * @module model/Strain
 * @version 1.1
 */
class Strain {
    /**
     * Constructs a new <code>Strain</code>.
     * @alias module:model/Strain
     */
    constructor() { 
        
        Strain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Strain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Strain} obj Optional instance to populate.
     * @return {module:model/Strain} The populated <code>Strain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Strain();

            if (data.hasOwnProperty('backgroundStrainRgdId')) {
                obj['backgroundStrainRgdId'] = ApiClient.convertToType(data['backgroundStrainRgdId'], 'Number');
            }
            if (data.hasOwnProperty('chrAltered')) {
                obj['chrAltered'] = ApiClient.convertToType(data['chrAltered'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('geneticStatus')) {
                obj['geneticStatus'] = ApiClient.convertToType(data['geneticStatus'], 'String');
            }
            if (data.hasOwnProperty('genetics')) {
                obj['genetics'] = ApiClient.convertToType(data['genetics'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('inbredGen')) {
                obj['inbredGen'] = ApiClient.convertToType(data['inbredGen'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('lastStatus')) {
                obj['lastStatus'] = ApiClient.convertToType(data['lastStatus'], 'String');
            }
            if (data.hasOwnProperty('lastStatusObject')) {
                obj['lastStatusObject'] = Status.constructFromObject(data['lastStatusObject']);
            }
            if (data.hasOwnProperty('modificationMethod')) {
                obj['modificationMethod'] = ApiClient.convertToType(data['modificationMethod'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('researchUse')) {
                obj['researchUse'] = ApiClient.convertToType(data['researchUse'], 'String');
            }
            if (data.hasOwnProperty('rgdId')) {
                obj['rgdId'] = ApiClient.convertToType(data['rgdId'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('statusLog')) {
                obj['statusLog'] = ApiClient.convertToType(data['statusLog'], [Status]);
            }
            if (data.hasOwnProperty('strain')) {
                obj['strain'] = ApiClient.convertToType(data['strain'], 'String');
            }
            if (data.hasOwnProperty('strainTypeName')) {
                obj['strainTypeName'] = ApiClient.convertToType(data['strainTypeName'], 'String');
            }
            if (data.hasOwnProperty('substrain')) {
                obj['substrain'] = ApiClient.convertToType(data['substrain'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Strain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Strain</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chrAltered'] && !(typeof data['chrAltered'] === 'string' || data['chrAltered'] instanceof String)) {
            throw new Error("Expected the field `chrAltered` to be a primitive type in the JSON string but got " + data['chrAltered']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['geneticStatus'] && !(typeof data['geneticStatus'] === 'string' || data['geneticStatus'] instanceof String)) {
            throw new Error("Expected the field `geneticStatus` to be a primitive type in the JSON string but got " + data['geneticStatus']);
        }
        // ensure the json data is a string
        if (data['genetics'] && !(typeof data['genetics'] === 'string' || data['genetics'] instanceof String)) {
            throw new Error("Expected the field `genetics` to be a primitive type in the JSON string but got " + data['genetics']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['inbredGen'] && !(typeof data['inbredGen'] === 'string' || data['inbredGen'] instanceof String)) {
            throw new Error("Expected the field `inbredGen` to be a primitive type in the JSON string but got " + data['inbredGen']);
        }
        // ensure the json data is a string
        if (data['lastStatus'] && !(typeof data['lastStatus'] === 'string' || data['lastStatus'] instanceof String)) {
            throw new Error("Expected the field `lastStatus` to be a primitive type in the JSON string but got " + data['lastStatus']);
        }
        // validate the optional field `lastStatusObject`
        if (data['lastStatusObject']) { // data not null
          Status.validateJSON(data['lastStatusObject']);
        }
        // ensure the json data is a string
        if (data['modificationMethod'] && !(typeof data['modificationMethod'] === 'string' || data['modificationMethod'] instanceof String)) {
            throw new Error("Expected the field `modificationMethod` to be a primitive type in the JSON string but got " + data['modificationMethod']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['researchUse'] && !(typeof data['researchUse'] === 'string' || data['researchUse'] instanceof String)) {
            throw new Error("Expected the field `researchUse` to be a primitive type in the JSON string but got " + data['researchUse']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        if (data['statusLog']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statusLog'])) {
                throw new Error("Expected the field `statusLog` to be an array in the JSON data but got " + data['statusLog']);
            }
            // validate the optional field `statusLog` (array)
            for (const item of data['statusLog']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['strain'] && !(typeof data['strain'] === 'string' || data['strain'] instanceof String)) {
            throw new Error("Expected the field `strain` to be a primitive type in the JSON string but got " + data['strain']);
        }
        // ensure the json data is a string
        if (data['strainTypeName'] && !(typeof data['strainTypeName'] === 'string' || data['strainTypeName'] instanceof String)) {
            throw new Error("Expected the field `strainTypeName` to be a primitive type in the JSON string but got " + data['strainTypeName']);
        }
        // ensure the json data is a string
        if (data['substrain'] && !(typeof data['substrain'] === 'string' || data['substrain'] instanceof String)) {
            throw new Error("Expected the field `substrain` to be a primitive type in the JSON string but got " + data['substrain']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}



/**
 * @member {Number} backgroundStrainRgdId
 */
Strain.prototype['backgroundStrainRgdId'] = undefined;

/**
 * @member {String} chrAltered
 */
Strain.prototype['chrAltered'] = undefined;

/**
 * @member {String} color
 */
Strain.prototype['color'] = undefined;

/**
 * @member {String} geneticStatus
 */
Strain.prototype['geneticStatus'] = undefined;

/**
 * @member {String} genetics
 */
Strain.prototype['genetics'] = undefined;

/**
 * @member {String} imageUrl
 */
Strain.prototype['imageUrl'] = undefined;

/**
 * @member {String} inbredGen
 */
Strain.prototype['inbredGen'] = undefined;

/**
 * @member {Number} key
 */
Strain.prototype['key'] = undefined;

/**
 * @member {String} lastStatus
 */
Strain.prototype['lastStatus'] = undefined;

/**
 * @member {module:model/Status} lastStatusObject
 */
Strain.prototype['lastStatusObject'] = undefined;

/**
 * @member {String} modificationMethod
 */
Strain.prototype['modificationMethod'] = undefined;

/**
 * @member {String} name
 */
Strain.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
Strain.prototype['notes'] = undefined;

/**
 * @member {String} origin
 */
Strain.prototype['origin'] = undefined;

/**
 * @member {String} researchUse
 */
Strain.prototype['researchUse'] = undefined;

/**
 * @member {Number} rgdId
 */
Strain.prototype['rgdId'] = undefined;

/**
 * @member {String} source
 */
Strain.prototype['source'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
Strain.prototype['speciesTypeKey'] = undefined;

/**
 * @member {Array.<module:model/Status>} statusLog
 */
Strain.prototype['statusLog'] = undefined;

/**
 * @member {String} strain
 */
Strain.prototype['strain'] = undefined;

/**
 * @member {String} strainTypeName
 */
Strain.prototype['strainTypeName'] = undefined;

/**
 * @member {String} substrain
 */
Strain.prototype['substrain'] = undefined;

/**
 * @member {String} symbol
 */
Strain.prototype['symbol'] = undefined;






export default Strain;

