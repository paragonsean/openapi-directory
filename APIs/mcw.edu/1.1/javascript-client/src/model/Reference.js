/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Reference model module.
 * @module model/Reference
 * @version 1.1
 */
class Reference {
    /**
     * Constructs a new <code>Reference</code>.
     * @alias module:model/Reference
     */
    constructor() { 
        
        Reference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Reference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reference} obj Optional instance to populate.
     * @return {module:model/Reference} The populated <code>Reference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reference();

            if (data.hasOwnProperty('citation')) {
                obj['citation'] = ApiClient.convertToType(data['citation'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('editors')) {
                obj['editors'] = ApiClient.convertToType(data['editors'], 'String');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = ApiClient.convertToType(data['issue'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'String');
            }
            if (data.hasOwnProperty('pubDate')) {
                obj['pubDate'] = ApiClient.convertToType(data['pubDate'], 'Date');
            }
            if (data.hasOwnProperty('pubStatus')) {
                obj['pubStatus'] = ApiClient.convertToType(data['pubStatus'], 'String');
            }
            if (data.hasOwnProperty('publication')) {
                obj['publication'] = ApiClient.convertToType(data['publication'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('publisherCity')) {
                obj['publisherCity'] = ApiClient.convertToType(data['publisherCity'], 'String');
            }
            if (data.hasOwnProperty('refAbstract')) {
                obj['refAbstract'] = ApiClient.convertToType(data['refAbstract'], 'String');
            }
            if (data.hasOwnProperty('referenceType')) {
                obj['referenceType'] = ApiClient.convertToType(data['referenceType'], 'String');
            }
            if (data.hasOwnProperty('rgdId')) {
                obj['rgdId'] = ApiClient.convertToType(data['rgdId'], 'Number');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('urlWebReference')) {
                obj['urlWebReference'] = ApiClient.convertToType(data['urlWebReference'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['citation'] && !(typeof data['citation'] === 'string' || data['citation'] instanceof String)) {
            throw new Error("Expected the field `citation` to be a primitive type in the JSON string but got " + data['citation']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['editors'] && !(typeof data['editors'] === 'string' || data['editors'] instanceof String)) {
            throw new Error("Expected the field `editors` to be a primitive type in the JSON string but got " + data['editors']);
        }
        // ensure the json data is a string
        if (data['issue'] && !(typeof data['issue'] === 'string' || data['issue'] instanceof String)) {
            throw new Error("Expected the field `issue` to be a primitive type in the JSON string but got " + data['issue']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['pages'] && !(typeof data['pages'] === 'string' || data['pages'] instanceof String)) {
            throw new Error("Expected the field `pages` to be a primitive type in the JSON string but got " + data['pages']);
        }
        // ensure the json data is a string
        if (data['pubStatus'] && !(typeof data['pubStatus'] === 'string' || data['pubStatus'] instanceof String)) {
            throw new Error("Expected the field `pubStatus` to be a primitive type in the JSON string but got " + data['pubStatus']);
        }
        // ensure the json data is a string
        if (data['publication'] && !(typeof data['publication'] === 'string' || data['publication'] instanceof String)) {
            throw new Error("Expected the field `publication` to be a primitive type in the JSON string but got " + data['publication']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['publisherCity'] && !(typeof data['publisherCity'] === 'string' || data['publisherCity'] instanceof String)) {
            throw new Error("Expected the field `publisherCity` to be a primitive type in the JSON string but got " + data['publisherCity']);
        }
        // ensure the json data is a string
        if (data['refAbstract'] && !(typeof data['refAbstract'] === 'string' || data['refAbstract'] instanceof String)) {
            throw new Error("Expected the field `refAbstract` to be a primitive type in the JSON string but got " + data['refAbstract']);
        }
        // ensure the json data is a string
        if (data['referenceType'] && !(typeof data['referenceType'] === 'string' || data['referenceType'] instanceof String)) {
            throw new Error("Expected the field `referenceType` to be a primitive type in the JSON string but got " + data['referenceType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['urlWebReference'] && !(typeof data['urlWebReference'] === 'string' || data['urlWebReference'] instanceof String)) {
            throw new Error("Expected the field `urlWebReference` to be a primitive type in the JSON string but got " + data['urlWebReference']);
        }
        // ensure the json data is a string
        if (data['volume'] && !(typeof data['volume'] === 'string' || data['volume'] instanceof String)) {
            throw new Error("Expected the field `volume` to be a primitive type in the JSON string but got " + data['volume']);
        }

        return true;
    }


}



/**
 * @member {String} citation
 */
Reference.prototype['citation'] = undefined;

/**
 * @member {String} doi
 */
Reference.prototype['doi'] = undefined;

/**
 * @member {String} editors
 */
Reference.prototype['editors'] = undefined;

/**
 * @member {String} issue
 */
Reference.prototype['issue'] = undefined;

/**
 * @member {Number} key
 */
Reference.prototype['key'] = undefined;

/**
 * @member {String} notes
 */
Reference.prototype['notes'] = undefined;

/**
 * @member {String} pages
 */
Reference.prototype['pages'] = undefined;

/**
 * @member {Date} pubDate
 */
Reference.prototype['pubDate'] = undefined;

/**
 * @member {String} pubStatus
 */
Reference.prototype['pubStatus'] = undefined;

/**
 * @member {String} publication
 */
Reference.prototype['publication'] = undefined;

/**
 * @member {String} publisher
 */
Reference.prototype['publisher'] = undefined;

/**
 * @member {String} publisherCity
 */
Reference.prototype['publisherCity'] = undefined;

/**
 * @member {String} refAbstract
 */
Reference.prototype['refAbstract'] = undefined;

/**
 * @member {String} referenceType
 */
Reference.prototype['referenceType'] = undefined;

/**
 * @member {Number} rgdId
 */
Reference.prototype['rgdId'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
Reference.prototype['speciesTypeKey'] = undefined;

/**
 * @member {String} title
 */
Reference.prototype['title'] = undefined;

/**
 * @member {String} urlWebReference
 */
Reference.prototype['urlWebReference'] = undefined;

/**
 * @member {String} volume
 */
Reference.prototype['volume'] = undefined;






export default Reference;

