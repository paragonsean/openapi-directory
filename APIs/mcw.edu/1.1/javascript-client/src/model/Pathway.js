/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathwayObject from './PathwayObject';
import Reference from './Reference';

/**
 * The Pathway model module.
 * @module model/Pathway
 * @version 1.1
 */
class Pathway {
    /**
     * Constructs a new <code>Pathway</code>.
     * @alias module:model/Pathway
     */
    constructor() { 
        
        Pathway.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pathway</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pathway} obj Optional instance to populate.
     * @return {module:model/Pathway} The populated <code>Pathway</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pathway();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hasAlteredPath')) {
                obj['hasAlteredPath'] = ApiClient.convertToType(data['hasAlteredPath'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('objectList')) {
                obj['objectList'] = ApiClient.convertToType(data['objectList'], [PathwayObject]);
            }
            if (data.hasOwnProperty('pathwayCategories')) {
                obj['pathwayCategories'] = ApiClient.convertToType(data['pathwayCategories'], ['String']);
            }
            if (data.hasOwnProperty('referenceList')) {
                obj['referenceList'] = ApiClient.convertToType(data['referenceList'], [Reference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pathway</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pathway</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['hasAlteredPath'] && !(typeof data['hasAlteredPath'] === 'string' || data['hasAlteredPath'] instanceof String)) {
            throw new Error("Expected the field `hasAlteredPath` to be a primitive type in the JSON string but got " + data['hasAlteredPath']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['objectList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['objectList'])) {
                throw new Error("Expected the field `objectList` to be an array in the JSON data but got " + data['objectList']);
            }
            // validate the optional field `objectList` (array)
            for (const item of data['objectList']) {
                PathwayObject.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pathwayCategories'])) {
            throw new Error("Expected the field `pathwayCategories` to be an array in the JSON data but got " + data['pathwayCategories']);
        }
        if (data['referenceList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referenceList'])) {
                throw new Error("Expected the field `referenceList` to be an array in the JSON data but got " + data['referenceList']);
            }
            // validate the optional field `referenceList` (array)
            for (const item of data['referenceList']) {
                Reference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} description
 */
Pathway.prototype['description'] = undefined;

/**
 * @member {String} hasAlteredPath
 */
Pathway.prototype['hasAlteredPath'] = undefined;

/**
 * @member {String} id
 */
Pathway.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Pathway.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/PathwayObject>} objectList
 */
Pathway.prototype['objectList'] = undefined;

/**
 * @member {Array.<String>} pathwayCategories
 */
Pathway.prototype['pathwayCategories'] = undefined;

/**
 * @member {Array.<module:model/Reference>} referenceList
 */
Pathway.prototype['referenceList'] = undefined;






export default Pathway;

