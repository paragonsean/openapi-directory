/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TermXRef from './TermXRef';

/**
 * The Term model module.
 * @module model/Term
 * @version 1.1
 */
class Term {
    /**
     * Constructs a new <code>Term</code>.
     * @alias module:model/Term
     */
    constructor() { 
        
        Term.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Term</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Term} obj Optional instance to populate.
     * @return {module:model/Term} The populated <code>Term</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Term();

            if (data.hasOwnProperty('accId')) {
                obj['accId'] = ApiClient.convertToType(data['accId'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
            }
            if (data.hasOwnProperty('modificationDate')) {
                obj['modificationDate'] = ApiClient.convertToType(data['modificationDate'], 'Date');
            }
            if (data.hasOwnProperty('obsolete')) {
                obj['obsolete'] = ApiClient.convertToType(data['obsolete'], 'Number');
            }
            if (data.hasOwnProperty('ontologyId')) {
                obj['ontologyId'] = ApiClient.convertToType(data['ontologyId'], 'String');
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
            if (data.hasOwnProperty('xrefs')) {
                obj['xrefs'] = ApiClient.convertToType(data['xrefs'], [TermXRef]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Term</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Term</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accId'] && !(typeof data['accId'] === 'string' || data['accId'] instanceof String)) {
            throw new Error("Expected the field `accId` to be a primitive type in the JSON string but got " + data['accId']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['definition'] && !(typeof data['definition'] === 'string' || data['definition'] instanceof String)) {
            throw new Error("Expected the field `definition` to be a primitive type in the JSON string but got " + data['definition']);
        }
        // ensure the json data is a string
        if (data['ontologyId'] && !(typeof data['ontologyId'] === 'string' || data['ontologyId'] instanceof String)) {
            throw new Error("Expected the field `ontologyId` to be a primitive type in the JSON string but got " + data['ontologyId']);
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }
        if (data['xrefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['xrefs'])) {
                throw new Error("Expected the field `xrefs` to be an array in the JSON data but got " + data['xrefs']);
            }
            // validate the optional field `xrefs` (array)
            for (const item of data['xrefs']) {
                TermXRef.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} accId
 */
Term.prototype['accId'] = undefined;

/**
 * @member {String} comment
 */
Term.prototype['comment'] = undefined;

/**
 * @member {String} createdBy
 */
Term.prototype['createdBy'] = undefined;

/**
 * @member {Date} creationDate
 */
Term.prototype['creationDate'] = undefined;

/**
 * @member {String} definition
 */
Term.prototype['definition'] = undefined;

/**
 * @member {Date} modificationDate
 */
Term.prototype['modificationDate'] = undefined;

/**
 * @member {Number} obsolete
 */
Term.prototype['obsolete'] = undefined;

/**
 * @member {String} ontologyId
 */
Term.prototype['ontologyId'] = undefined;

/**
 * @member {String} term
 */
Term.prototype['term'] = undefined;

/**
 * @member {Array.<module:model/TermXRef>} xrefs
 */
Term.prototype['xrefs'] = undefined;






export default Term;

