/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SSLP model module.
 * @module model/SSLP
 * @version 1.1
 */
class SSLP {
    /**
     * Constructs a new <code>SSLP</code>.
     * @alias module:model/SSLP
     */
    constructor() { 
        
        SSLP.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SSLP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SSLP} obj Optional instance to populate.
     * @return {module:model/SSLP} The populated <code>SSLP</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SSLP();

            if (data.hasOwnProperty('expectedSize')) {
                obj['expectedSize'] = ApiClient.convertToType(data['expectedSize'], 'Number');
            }
            if (data.hasOwnProperty('forwardSeq')) {
                obj['forwardSeq'] = ApiClient.convertToType(data['forwardSeq'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('reverseSeq')) {
                obj['reverseSeq'] = ApiClient.convertToType(data['reverseSeq'], 'String');
            }
            if (data.hasOwnProperty('rgdId')) {
                obj['rgdId'] = ApiClient.convertToType(data['rgdId'], 'Number');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('sslpType')) {
                obj['sslpType'] = ApiClient.convertToType(data['sslpType'], 'String');
            }
            if (data.hasOwnProperty('templateSeq')) {
                obj['templateSeq'] = ApiClient.convertToType(data['templateSeq'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SSLP</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SSLP</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['forwardSeq'] && !(typeof data['forwardSeq'] === 'string' || data['forwardSeq'] instanceof String)) {
            throw new Error("Expected the field `forwardSeq` to be a primitive type in the JSON string but got " + data['forwardSeq']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['reverseSeq'] && !(typeof data['reverseSeq'] === 'string' || data['reverseSeq'] instanceof String)) {
            throw new Error("Expected the field `reverseSeq` to be a primitive type in the JSON string but got " + data['reverseSeq']);
        }
        // ensure the json data is a string
        if (data['sslpType'] && !(typeof data['sslpType'] === 'string' || data['sslpType'] instanceof String)) {
            throw new Error("Expected the field `sslpType` to be a primitive type in the JSON string but got " + data['sslpType']);
        }
        // ensure the json data is a string
        if (data['templateSeq'] && !(typeof data['templateSeq'] === 'string' || data['templateSeq'] instanceof String)) {
            throw new Error("Expected the field `templateSeq` to be a primitive type in the JSON string but got " + data['templateSeq']);
        }

        return true;
    }


}



/**
 * @member {Number} expectedSize
 */
SSLP.prototype['expectedSize'] = undefined;

/**
 * @member {String} forwardSeq
 */
SSLP.prototype['forwardSeq'] = undefined;

/**
 * @member {Number} key
 */
SSLP.prototype['key'] = undefined;

/**
 * @member {String} name
 */
SSLP.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
SSLP.prototype['notes'] = undefined;

/**
 * @member {String} reverseSeq
 */
SSLP.prototype['reverseSeq'] = undefined;

/**
 * @member {Number} rgdId
 */
SSLP.prototype['rgdId'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
SSLP.prototype['speciesTypeKey'] = undefined;

/**
 * @member {String} sslpType
 */
SSLP.prototype['sslpType'] = undefined;

/**
 * @member {String} templateSeq
 */
SSLP.prototype['templateSeq'] = undefined;






export default SSLP;

