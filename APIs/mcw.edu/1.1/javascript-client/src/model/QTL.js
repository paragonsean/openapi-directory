/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QTL model module.
 * @module model/QTL
 * @version 1.1
 */
class QTL {
    /**
     * Constructs a new <code>QTL</code>.
     * @alias module:model/QTL
     */
    constructor() { 
        
        QTL.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QTL</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QTL} obj Optional instance to populate.
     * @return {module:model/QTL} The populated <code>QTL</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QTL();

            if (data.hasOwnProperty('chromosome')) {
                obj['chromosome'] = ApiClient.convertToType(data['chromosome'], 'String');
            }
            if (data.hasOwnProperty('flank1RgdId')) {
                obj['flank1RgdId'] = ApiClient.convertToType(data['flank1RgdId'], 'Number');
            }
            if (data.hasOwnProperty('flank2RgdId')) {
                obj['flank2RgdId'] = ApiClient.convertToType(data['flank2RgdId'], 'Number');
            }
            if (data.hasOwnProperty('inheritanceType')) {
                obj['inheritanceType'] = ApiClient.convertToType(data['inheritanceType'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('linkageImage')) {
                obj['linkageImage'] = ApiClient.convertToType(data['linkageImage'], 'String');
            }
            if (data.hasOwnProperty('lod')) {
                obj['lod'] = ApiClient.convertToType(data['lod'], 'Number');
            }
            if (data.hasOwnProperty('lodImage')) {
                obj['lodImage'] = ApiClient.convertToType(data['lodImage'], 'String');
            }
            if (data.hasOwnProperty('mostSignificantCmoTerm')) {
                obj['mostSignificantCmoTerm'] = ApiClient.convertToType(data['mostSignificantCmoTerm'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('peakOffset')) {
                obj['peakOffset'] = ApiClient.convertToType(data['peakOffset'], 'Number');
            }
            if (data.hasOwnProperty('peakRgdId')) {
                obj['peakRgdId'] = ApiClient.convertToType(data['peakRgdId'], 'Number');
            }
            if (data.hasOwnProperty('pvalue')) {
                obj['pvalue'] = ApiClient.convertToType(data['pvalue'], 'Number');
            }
            if (data.hasOwnProperty('rgdId')) {
                obj['rgdId'] = ApiClient.convertToType(data['rgdId'], 'Number');
            }
            if (data.hasOwnProperty('sourceUrl')) {
                obj['sourceUrl'] = ApiClient.convertToType(data['sourceUrl'], 'String');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('variance')) {
                obj['variance'] = ApiClient.convertToType(data['variance'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QTL</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QTL</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chromosome'] && !(typeof data['chromosome'] === 'string' || data['chromosome'] instanceof String)) {
            throw new Error("Expected the field `chromosome` to be a primitive type in the JSON string but got " + data['chromosome']);
        }
        // ensure the json data is a string
        if (data['inheritanceType'] && !(typeof data['inheritanceType'] === 'string' || data['inheritanceType'] instanceof String)) {
            throw new Error("Expected the field `inheritanceType` to be a primitive type in the JSON string but got " + data['inheritanceType']);
        }
        // ensure the json data is a string
        if (data['linkageImage'] && !(typeof data['linkageImage'] === 'string' || data['linkageImage'] instanceof String)) {
            throw new Error("Expected the field `linkageImage` to be a primitive type in the JSON string but got " + data['linkageImage']);
        }
        // ensure the json data is a string
        if (data['lodImage'] && !(typeof data['lodImage'] === 'string' || data['lodImage'] instanceof String)) {
            throw new Error("Expected the field `lodImage` to be a primitive type in the JSON string but got " + data['lodImage']);
        }
        // ensure the json data is a string
        if (data['mostSignificantCmoTerm'] && !(typeof data['mostSignificantCmoTerm'] === 'string' || data['mostSignificantCmoTerm'] instanceof String)) {
            throw new Error("Expected the field `mostSignificantCmoTerm` to be a primitive type in the JSON string but got " + data['mostSignificantCmoTerm']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['sourceUrl'] && !(typeof data['sourceUrl'] === 'string' || data['sourceUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceUrl` to be a primitive type in the JSON string but got " + data['sourceUrl']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}



/**
 * @member {String} chromosome
 */
QTL.prototype['chromosome'] = undefined;

/**
 * @member {Number} flank1RgdId
 */
QTL.prototype['flank1RgdId'] = undefined;

/**
 * @member {Number} flank2RgdId
 */
QTL.prototype['flank2RgdId'] = undefined;

/**
 * @member {String} inheritanceType
 */
QTL.prototype['inheritanceType'] = undefined;

/**
 * @member {Number} key
 */
QTL.prototype['key'] = undefined;

/**
 * @member {String} linkageImage
 */
QTL.prototype['linkageImage'] = undefined;

/**
 * @member {Number} lod
 */
QTL.prototype['lod'] = undefined;

/**
 * @member {String} lodImage
 */
QTL.prototype['lodImage'] = undefined;

/**
 * @member {String} mostSignificantCmoTerm
 */
QTL.prototype['mostSignificantCmoTerm'] = undefined;

/**
 * @member {String} name
 */
QTL.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
QTL.prototype['notes'] = undefined;

/**
 * @member {Number} peakOffset
 */
QTL.prototype['peakOffset'] = undefined;

/**
 * @member {Number} peakRgdId
 */
QTL.prototype['peakRgdId'] = undefined;

/**
 * @member {Number} pvalue
 */
QTL.prototype['pvalue'] = undefined;

/**
 * @member {Number} rgdId
 */
QTL.prototype['rgdId'] = undefined;

/**
 * @member {String} sourceUrl
 */
QTL.prototype['sourceUrl'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
QTL.prototype['speciesTypeKey'] = undefined;

/**
 * @member {String} symbol
 */
QTL.prototype['symbol'] = undefined;

/**
 * @member {Number} variance
 */
QTL.prototype['variance'] = undefined;






export default QTL;

