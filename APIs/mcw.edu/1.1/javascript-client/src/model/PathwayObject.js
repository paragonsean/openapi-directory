/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PathwayObject model module.
 * @module model/PathwayObject
 * @version 1.1
 */
class PathwayObject {
    /**
     * Constructs a new <code>PathwayObject</code>.
     * @alias module:model/PathwayObject
     */
    constructor() { 
        
        PathwayObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathwayObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathwayObject} obj Optional instance to populate.
     * @return {module:model/PathwayObject} The populated <code>PathwayObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathwayObject();

            if (data.hasOwnProperty('accId')) {
                obj['accId'] = ApiClient.convertToType(data['accId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('objDesc')) {
                obj['objDesc'] = ApiClient.convertToType(data['objDesc'], 'String');
            }
            if (data.hasOwnProperty('objName')) {
                obj['objName'] = ApiClient.convertToType(data['objName'], 'String');
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
            }
            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('xdb_key')) {
                obj['xdb_key'] = ApiClient.convertToType(data['xdb_key'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathwayObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathwayObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accId'] && !(typeof data['accId'] === 'string' || data['accId'] instanceof String)) {
            throw new Error("Expected the field `accId` to be a primitive type in the JSON string but got " + data['accId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['objDesc'] && !(typeof data['objDesc'] === 'string' || data['objDesc'] instanceof String)) {
            throw new Error("Expected the field `objDesc` to be a primitive type in the JSON string but got " + data['objDesc']);
        }
        // ensure the json data is a string
        if (data['objName'] && !(typeof data['objName'] === 'string' || data['objName'] instanceof String)) {
            throw new Error("Expected the field `objName` to be a primitive type in the JSON string but got " + data['objName']);
        }
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} accId
 */
PathwayObject.prototype['accId'] = undefined;

/**
 * @member {String} id
 */
PathwayObject.prototype['id'] = undefined;

/**
 * @member {String} objDesc
 */
PathwayObject.prototype['objDesc'] = undefined;

/**
 * @member {String} objName
 */
PathwayObject.prototype['objName'] = undefined;

/**
 * @member {Number} typeId
 */
PathwayObject.prototype['typeId'] = undefined;

/**
 * @member {String} typeName
 */
PathwayObject.prototype['typeName'] = undefined;

/**
 * @member {String} url
 */
PathwayObject.prototype['url'] = undefined;

/**
 * @member {Number} xdb_key
 */
PathwayObject.prototype['xdb_key'] = undefined;






export default PathwayObject;

