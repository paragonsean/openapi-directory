/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Gene model module.
 * @module model/Gene
 * @version 1.1
 */
class Gene {
    /**
     * Constructs a new <code>Gene</code>.
     * @alias module:model/Gene
     */
    constructor() { 
        
        Gene.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Gene</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Gene} obj Optional instance to populate.
     * @return {module:model/Gene} The populated <code>Gene</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Gene();

            if (data.hasOwnProperty('agrDescription')) {
                obj['agrDescription'] = ApiClient.convertToType(data['agrDescription'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ensemblFullName')) {
                obj['ensemblFullName'] = ApiClient.convertToType(data['ensemblFullName'], 'String');
            }
            if (data.hasOwnProperty('ensemblGeneSymbol')) {
                obj['ensemblGeneSymbol'] = ApiClient.convertToType(data['ensemblGeneSymbol'], 'String');
            }
            if (data.hasOwnProperty('ensemblGeneType')) {
                obj['ensemblGeneType'] = ApiClient.convertToType(data['ensemblGeneType'], 'String');
            }
            if (data.hasOwnProperty('geneSource')) {
                obj['geneSource'] = ApiClient.convertToType(data['geneSource'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('mergedDescription')) {
                obj['mergedDescription'] = ApiClient.convertToType(data['mergedDescription'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ncbiAnnotStatus')) {
                obj['ncbiAnnotStatus'] = ApiClient.convertToType(data['ncbiAnnotStatus'], 'String');
            }
            if (data.hasOwnProperty('nomenReviewDate')) {
                obj['nomenReviewDate'] = ApiClient.convertToType(data['nomenReviewDate'], 'Date');
            }
            if (data.hasOwnProperty('nomenSource')) {
                obj['nomenSource'] = ApiClient.convertToType(data['nomenSource'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('refSeqStatus')) {
                obj['refSeqStatus'] = ApiClient.convertToType(data['refSeqStatus'], 'String');
            }
            if (data.hasOwnProperty('rgdId')) {
                obj['rgdId'] = ApiClient.convertToType(data['rgdId'], 'Number');
            }
            if (data.hasOwnProperty('soAccId')) {
                obj['soAccId'] = ApiClient.convertToType(data['soAccId'], 'String');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Gene</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Gene</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agrDescription'] && !(typeof data['agrDescription'] === 'string' || data['agrDescription'] instanceof String)) {
            throw new Error("Expected the field `agrDescription` to be a primitive type in the JSON string but got " + data['agrDescription']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['ensemblFullName'] && !(typeof data['ensemblFullName'] === 'string' || data['ensemblFullName'] instanceof String)) {
            throw new Error("Expected the field `ensemblFullName` to be a primitive type in the JSON string but got " + data['ensemblFullName']);
        }
        // ensure the json data is a string
        if (data['ensemblGeneSymbol'] && !(typeof data['ensemblGeneSymbol'] === 'string' || data['ensemblGeneSymbol'] instanceof String)) {
            throw new Error("Expected the field `ensemblGeneSymbol` to be a primitive type in the JSON string but got " + data['ensemblGeneSymbol']);
        }
        // ensure the json data is a string
        if (data['ensemblGeneType'] && !(typeof data['ensemblGeneType'] === 'string' || data['ensemblGeneType'] instanceof String)) {
            throw new Error("Expected the field `ensemblGeneType` to be a primitive type in the JSON string but got " + data['ensemblGeneType']);
        }
        // ensure the json data is a string
        if (data['geneSource'] && !(typeof data['geneSource'] === 'string' || data['geneSource'] instanceof String)) {
            throw new Error("Expected the field `geneSource` to be a primitive type in the JSON string but got " + data['geneSource']);
        }
        // ensure the json data is a string
        if (data['mergedDescription'] && !(typeof data['mergedDescription'] === 'string' || data['mergedDescription'] instanceof String)) {
            throw new Error("Expected the field `mergedDescription` to be a primitive type in the JSON string but got " + data['mergedDescription']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ncbiAnnotStatus'] && !(typeof data['ncbiAnnotStatus'] === 'string' || data['ncbiAnnotStatus'] instanceof String)) {
            throw new Error("Expected the field `ncbiAnnotStatus` to be a primitive type in the JSON string but got " + data['ncbiAnnotStatus']);
        }
        // ensure the json data is a string
        if (data['nomenSource'] && !(typeof data['nomenSource'] === 'string' || data['nomenSource'] instanceof String)) {
            throw new Error("Expected the field `nomenSource` to be a primitive type in the JSON string but got " + data['nomenSource']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['refSeqStatus'] && !(typeof data['refSeqStatus'] === 'string' || data['refSeqStatus'] instanceof String)) {
            throw new Error("Expected the field `refSeqStatus` to be a primitive type in the JSON string but got " + data['refSeqStatus']);
        }
        // ensure the json data is a string
        if (data['soAccId'] && !(typeof data['soAccId'] === 'string' || data['soAccId'] instanceof String)) {
            throw new Error("Expected the field `soAccId` to be a primitive type in the JSON string but got " + data['soAccId']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} agrDescription
 */
Gene.prototype['agrDescription'] = undefined;

/**
 * @member {String} description
 */
Gene.prototype['description'] = undefined;

/**
 * @member {String} ensemblFullName
 */
Gene.prototype['ensemblFullName'] = undefined;

/**
 * @member {String} ensemblGeneSymbol
 */
Gene.prototype['ensemblGeneSymbol'] = undefined;

/**
 * @member {String} ensemblGeneType
 */
Gene.prototype['ensemblGeneType'] = undefined;

/**
 * @member {String} geneSource
 */
Gene.prototype['geneSource'] = undefined;

/**
 * @member {Number} key
 */
Gene.prototype['key'] = undefined;

/**
 * @member {String} mergedDescription
 */
Gene.prototype['mergedDescription'] = undefined;

/**
 * @member {String} name
 */
Gene.prototype['name'] = undefined;

/**
 * @member {String} ncbiAnnotStatus
 */
Gene.prototype['ncbiAnnotStatus'] = undefined;

/**
 * @member {Date} nomenReviewDate
 */
Gene.prototype['nomenReviewDate'] = undefined;

/**
 * @member {String} nomenSource
 */
Gene.prototype['nomenSource'] = undefined;

/**
 * @member {String} notes
 */
Gene.prototype['notes'] = undefined;

/**
 * @member {String} refSeqStatus
 */
Gene.prototype['refSeqStatus'] = undefined;

/**
 * @member {Number} rgdId
 */
Gene.prototype['rgdId'] = undefined;

/**
 * @member {String} soAccId
 */
Gene.prototype['soAccId'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
Gene.prototype['speciesTypeKey'] = undefined;

/**
 * @member {String} symbol
 */
Gene.prototype['symbol'] = undefined;

/**
 * @member {String} type
 */
Gene.prototype['type'] = undefined;

/**
 * @member {Boolean} variant
 */
Gene.prototype['variant'] = undefined;






export default Gene;

