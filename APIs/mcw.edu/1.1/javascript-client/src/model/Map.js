/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Map model module.
 * @module model/Map
 * @version 1.1
 */
class Map {
    /**
     * Constructs a new <code>Map</code>.
     * @alias module:model/Map
     */
    constructor() { 
        
        Map.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Map</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Map} obj Optional instance to populate.
     * @return {module:model/Map} The populated <code>Map</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Map();

            if (data.hasOwnProperty('dbsnpVersion')) {
                obj['dbsnpVersion'] = ApiClient.convertToType(data['dbsnpVersion'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('methodKey')) {
                obj['methodKey'] = ApiClient.convertToType(data['methodKey'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('primaryRefAssembly')) {
                obj['primaryRefAssembly'] = ApiClient.convertToType(data['primaryRefAssembly'], 'Boolean');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
            }
            if (data.hasOwnProperty('refSeqAssemblyAcc')) {
                obj['refSeqAssemblyAcc'] = ApiClient.convertToType(data['refSeqAssemblyAcc'], 'String');
            }
            if (data.hasOwnProperty('refSeqAssemblyName')) {
                obj['refSeqAssemblyName'] = ApiClient.convertToType(data['refSeqAssemblyName'], 'String');
            }
            if (data.hasOwnProperty('rgdId')) {
                obj['rgdId'] = ApiClient.convertToType(data['rgdId'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('speciesTypeKey')) {
                obj['speciesTypeKey'] = ApiClient.convertToType(data['speciesTypeKey'], 'Number');
            }
            if (data.hasOwnProperty('ucscAssemblyId')) {
                obj['ucscAssemblyId'] = ApiClient.convertToType(data['ucscAssemblyId'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Map</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Map</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dbsnpVersion'] && !(typeof data['dbsnpVersion'] === 'string' || data['dbsnpVersion'] instanceof String)) {
            throw new Error("Expected the field `dbsnpVersion` to be a primitive type in the JSON string but got " + data['dbsnpVersion']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['refSeqAssemblyAcc'] && !(typeof data['refSeqAssemblyAcc'] === 'string' || data['refSeqAssemblyAcc'] instanceof String)) {
            throw new Error("Expected the field `refSeqAssemblyAcc` to be a primitive type in the JSON string but got " + data['refSeqAssemblyAcc']);
        }
        // ensure the json data is a string
        if (data['refSeqAssemblyName'] && !(typeof data['refSeqAssemblyName'] === 'string' || data['refSeqAssemblyName'] instanceof String)) {
            throw new Error("Expected the field `refSeqAssemblyName` to be a primitive type in the JSON string but got " + data['refSeqAssemblyName']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['ucscAssemblyId'] && !(typeof data['ucscAssemblyId'] === 'string' || data['ucscAssemblyId'] instanceof String)) {
            throw new Error("Expected the field `ucscAssemblyId` to be a primitive type in the JSON string but got " + data['ucscAssemblyId']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {String} dbsnpVersion
 */
Map.prototype['dbsnpVersion'] = undefined;

/**
 * @member {String} description
 */
Map.prototype['description'] = undefined;

/**
 * @member {Number} key
 */
Map.prototype['key'] = undefined;

/**
 * @member {Number} methodKey
 */
Map.prototype['methodKey'] = undefined;

/**
 * @member {String} name
 */
Map.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
Map.prototype['notes'] = undefined;

/**
 * @member {Boolean} primaryRefAssembly
 */
Map.prototype['primaryRefAssembly'] = undefined;

/**
 * @member {Number} rank
 */
Map.prototype['rank'] = undefined;

/**
 * @member {String} refSeqAssemblyAcc
 */
Map.prototype['refSeqAssemblyAcc'] = undefined;

/**
 * @member {String} refSeqAssemblyName
 */
Map.prototype['refSeqAssemblyName'] = undefined;

/**
 * @member {Number} rgdId
 */
Map.prototype['rgdId'] = undefined;

/**
 * @member {String} source
 */
Map.prototype['source'] = undefined;

/**
 * @member {Number} speciesTypeKey
 */
Map.prototype['speciesTypeKey'] = undefined;

/**
 * @member {String} ucscAssemblyId
 */
Map.prototype['ucscAssemblyId'] = undefined;

/**
 * @member {String} unit
 */
Map.prototype['unit'] = undefined;

/**
 * @member {String} version
 */
Map.prototype['version'] = undefined;






export default Map;

