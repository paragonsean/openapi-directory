/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TermXRef model module.
 * @module model/TermXRef
 * @version 1.1
 */
class TermXRef {
    /**
     * Constructs a new <code>TermXRef</code>.
     * @alias module:model/TermXRef
     */
    constructor() { 
        
        TermXRef.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TermXRef</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TermXRef} obj Optional instance to populate.
     * @return {module:model/TermXRef} The populated <code>TermXRef</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TermXRef();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('termAcc')) {
                obj['termAcc'] = ApiClient.convertToType(data['termAcc'], 'String');
            }
            if (data.hasOwnProperty('xrefDescription')) {
                obj['xrefDescription'] = ApiClient.convertToType(data['xrefDescription'], 'String');
            }
            if (data.hasOwnProperty('xrefValue')) {
                obj['xrefValue'] = ApiClient.convertToType(data['xrefValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TermXRef</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TermXRef</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['termAcc'] && !(typeof data['termAcc'] === 'string' || data['termAcc'] instanceof String)) {
            throw new Error("Expected the field `termAcc` to be a primitive type in the JSON string but got " + data['termAcc']);
        }
        // ensure the json data is a string
        if (data['xrefDescription'] && !(typeof data['xrefDescription'] === 'string' || data['xrefDescription'] instanceof String)) {
            throw new Error("Expected the field `xrefDescription` to be a primitive type in the JSON string but got " + data['xrefDescription']);
        }
        // ensure the json data is a string
        if (data['xrefValue'] && !(typeof data['xrefValue'] === 'string' || data['xrefValue'] instanceof String)) {
            throw new Error("Expected the field `xrefValue` to be a primitive type in the JSON string but got " + data['xrefValue']);
        }

        return true;
    }


}



/**
 * @member {Number} key
 */
TermXRef.prototype['key'] = undefined;

/**
 * @member {String} termAcc
 */
TermXRef.prototype['termAcc'] = undefined;

/**
 * @member {String} xrefDescription
 */
TermXRef.prototype['xrefDescription'] = undefined;

/**
 * @member {String} xrefValue
 */
TermXRef.prototype['xrefValue'] = undefined;






export default TermXRef;

