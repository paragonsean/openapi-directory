/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* AGR service.
* @module api/AGRApi
* @version 1.1
*/
export default class AGRApi {

    /**
    * Constructs a new AGRApi. 
    * @alias module:api/AGRApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAffectedGenomicModelsUsingGET operation.
     * @callback module:api/AGRApi~getAffectedGenomicModelsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get affected genomic models (rat strains with gene alleles) submitted by RGD to AGR by taxonId
     * @param {String} taxonId The taxon ID for species
     * @param {module:api/AGRApi~getAffectedGenomicModelsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getAffectedGenomicModelsUsingGET(taxonId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonId' is set
      if (taxonId === undefined || taxonId === null) {
        throw new Error("Missing the required parameter 'taxonId' when calling getAffectedGenomicModelsUsingGET");
      }

      let pathParams = {
        'taxonId': taxonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/agr/affectedGenomicModels/{taxonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllelesForTaxonUsingGET operation.
     * @callback module:api/AGRApi~getAllelesForTaxonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gene allele records submitted by RGD to AGR by taxonId
     * @param {String} taxonId The taxon ID for species
     * @param {module:api/AGRApi~getAllelesForTaxonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getAllelesForTaxonUsingGET(taxonId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonId' is set
      if (taxonId === undefined || taxonId === null) {
        throw new Error("Missing the required parameter 'taxonId' when calling getAllelesForTaxonUsingGET");
      }

      let pathParams = {
        'taxonId': taxonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/agr/alleles/{taxonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpressionForTaxonUsingGET operation.
     * @callback module:api/AGRApi~getExpressionForTaxonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get expression annotations submitted by RGD to AGR by taxonId
     * @param {String} taxonId The taxon ID for species
     * @param {module:api/AGRApi~getExpressionForTaxonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getExpressionForTaxonUsingGET(taxonId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonId' is set
      if (taxonId === undefined || taxonId === null) {
        throw new Error("Missing the required parameter 'taxonId' when calling getExpressionForTaxonUsingGET");
      }

      let pathParams = {
        'taxonId': taxonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/agr/expression/{taxonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesForLatestAssemblyUsingGET operation.
     * @callback module:api/AGRApi~getGenesForLatestAssemblyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gene records submitted by RGD to AGR by taxonId
     * @param {String} taxonId The taxon ID for species
     * @param {module:api/AGRApi~getGenesForLatestAssemblyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getGenesForLatestAssemblyUsingGET(taxonId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonId' is set
      if (taxonId === undefined || taxonId === null) {
        throw new Error("Missing the required parameter 'taxonId' when calling getGenesForLatestAssemblyUsingGET");
      }

      let pathParams = {
        'taxonId': taxonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/agr/{taxonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypesForTaxonUsingGET operation.
     * @callback module:api/AGRApi~getPhenotypesForTaxonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get phenotype annotations submitted by RGD to AGR by taxonId
     * @param {String} taxonId The taxon ID for species
     * @param {module:api/AGRApi~getPhenotypesForTaxonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getPhenotypesForTaxonUsingGET(taxonId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonId' is set
      if (taxonId === undefined || taxonId === null) {
        throw new Error("Missing the required parameter 'taxonId' when calling getPhenotypesForTaxonUsingGET");
      }

      let pathParams = {
        'taxonId': taxonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/agr/phenotypes/{taxonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantsForTaxonUsingGET operation.
     * @callback module:api/AGRApi~getVariantsForTaxonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get basic variant records submitted by RGD to AGR by taxonId
     * @param {String} taxonId The taxon ID for species
     * @param {module:api/AGRApi~getVariantsForTaxonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getVariantsForTaxonUsingGET(taxonId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonId' is set
      if (taxonId === undefined || taxonId === null) {
        throw new Error("Missing the required parameter 'taxonId' when calling getVariantsForTaxonUsingGET");
      }

      let pathParams = {
        'taxonId': taxonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/agr/variants/{taxonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
