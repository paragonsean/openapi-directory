/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Pathway from '../model/Pathway';

/**
* Pathway service.
* @module api/PathwayApi
* @version 1.1
*/
export default class PathwayApi {

    /**
    * Constructs a new PathwayApi. 
    * @alias module:api/PathwayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPathwaysWithDiagramsForCategoryUsingGET operation.
     * @callback module:api/PathwayApi~getPathwaysWithDiagramsForCategoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Pathway>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of pathways based on category provided
     * @param {String} category Pathway Category
     * @param {module:api/PathwayApi~getPathwaysWithDiagramsForCategoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Pathway>}
     */
    getPathwaysWithDiagramsForCategoryUsingGET(category, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getPathwaysWithDiagramsForCategoryUsingGET");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Pathway];
      return this.apiClient.callApi(
        '/pathways/diagramsForCategory/{category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPathwaysUsingGET operation.
     * @callback module:api/PathwayApi~searchPathwaysUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Pathway>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of pathways based on search term
     * @param {String} searchString Free text search string
     * @param {module:api/PathwayApi~searchPathwaysUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Pathway>}
     */
    searchPathwaysUsingGET(searchString, callback) {
      let postBody = null;
      // verify the required parameter 'searchString' is set
      if (searchString === undefined || searchString === null) {
        throw new Error("Missing the required parameter 'searchString' when calling searchPathwaysUsingGET");
      }

      let pathParams = {
        'searchString': searchString
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Pathway];
      return this.apiClient.callApi(
        '/pathways/diagrams/search/{searchString}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
