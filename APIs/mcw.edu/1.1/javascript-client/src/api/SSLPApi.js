/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MappedSSLP from '../model/MappedSSLP';

/**
* SSLP service.
* @module api/SSLPApi
* @version 1.1
*/
export default class SSLPApi {

    /**
    * Constructs a new SSLPApi. 
    * @alias module:api/SSLPApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMappedSSLPByPositionUsingGET operation.
     * @callback module:api/SSLPApi~getMappedSSLPByPositionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MappedSSLP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list SSLP for given position and assembly map
     * @param {String} chr Chromosome
     * @param {Number} start Start Position
     * @param {Number} stop Stop Position
     * @param {Number} mapKey A list of assembly map keys can be found using the lookup service
     * @param {module:api/SSLPApi~getMappedSSLPByPositionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MappedSSLP>}
     */
    getMappedSSLPByPositionUsingGET(chr, start, stop, mapKey, callback) {
      let postBody = null;
      // verify the required parameter 'chr' is set
      if (chr === undefined || chr === null) {
        throw new Error("Missing the required parameter 'chr' when calling getMappedSSLPByPositionUsingGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling getMappedSSLPByPositionUsingGET");
      }
      // verify the required parameter 'stop' is set
      if (stop === undefined || stop === null) {
        throw new Error("Missing the required parameter 'stop' when calling getMappedSSLPByPositionUsingGET");
      }
      // verify the required parameter 'mapKey' is set
      if (mapKey === undefined || mapKey === null) {
        throw new Error("Missing the required parameter 'mapKey' when calling getMappedSSLPByPositionUsingGET");
      }

      let pathParams = {
        'chr': chr,
        'start': start,
        'stop': stop,
        'mapKey': mapKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MappedSSLP];
      return this.apiClient.callApi(
        '/sslps/mapped/{chr}/{start}/{stop}/{mapKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
