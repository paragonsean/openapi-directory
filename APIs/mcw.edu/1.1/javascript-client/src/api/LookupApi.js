/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Map from '../model/Map';
import RGDIDListRequest from '../model/RGDIDListRequest';

/**
* Lookup service.
* @module api/LookupApi
* @version 1.1
*/
export default class LookupApi {

    /**
    * Constructs a new LookupApi. 
    * @alias module:api/LookupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEnsemblGeneMappingUsingGET operation.
     * @callback module:api/LookupApi~getEnsemblGeneMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an Ensembl Gene  ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getEnsemblGeneMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEnsemblGeneMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getEnsemblGeneMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/EnsemblGene/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnsemblGeneMappingUsingPOST operation.
     * @callback module:api/LookupApi~getEnsemblGeneMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to Ensembl Gene IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getEnsemblGeneMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEnsemblGeneMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/EnsemblGene', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnsemblProteinMappingUsingGET operation.
     * @callback module:api/LookupApi~getEnsemblProteinMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an Ensembl Protein ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getEnsemblProteinMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEnsemblProteinMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getEnsemblProteinMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/EnsemblProtein/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnsemblProteinMappingUsingPOST operation.
     * @callback module:api/LookupApi~getEnsemblProteinMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to Ensembl Protein IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getEnsemblProteinMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEnsemblProteinMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/EnsemblProtein', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnsemblTranscriptMappingUsingGET operation.
     * @callback module:api/LookupApi~getEnsemblTranscriptMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an Ensembl Transcript ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getEnsemblTranscriptMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEnsemblTranscriptMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getEnsemblTranscriptMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/EnsemblTranscript/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnsemblTranscriptMappingUsingPOST operation.
     * @callback module:api/LookupApi~getEnsemblTranscriptMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to Ensembl Transcript IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getEnsemblTranscriptMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEnsemblTranscriptMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/EnsemblTranscript', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGTEXMappingUsingGET operation.
     * @callback module:api/LookupApi~getGTEXMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an GTEx ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getGTEXMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGTEXMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getGTEXMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/GTEx/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGTEXMappingUsingPOST operation.
     * @callback module:api/LookupApi~getGTEXMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to GTEx IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getGTEXMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGTEXMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/GTEx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenBankNucleotideMappingUsingGET operation.
     * @callback module:api/LookupApi~getGenBankNucleotideMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to a GenBank Nucleotide ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getGenBankNucleotideMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGenBankNucleotideMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getGenBankNucleotideMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/GenBankNucleotide/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenBankNucleotideMappingUsingPOST operation.
     * @callback module:api/LookupApi~getGenBankNucleotideMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to GenBank Nucleotide IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getGenBankNucleotideMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGenBankNucleotideMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/GenBankNucleotide', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenBankProteinMappingUsingGET operation.
     * @callback module:api/LookupApi~getGenBankProteinMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to a GenBank Protein ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getGenBankProteinMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGenBankProteinMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getGenBankProteinMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/GenBankProtein/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenBankProteinMappingUsingPOST operation.
     * @callback module:api/LookupApi~getGenBankProteinMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to GenBank Protein IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getGenBankProteinMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGenBankProteinMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/GenBankProtein', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneTypesUsingGET operation.
     * @callback module:api/LookupApi~getGeneTypesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of gene types avialable in RGD
     * @param {module:api/LookupApi~getGeneTypesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getGeneTypesUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/lookup/geneTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHGNCMappingUsingGET operation.
     * @callback module:api/LookupApi~getHGNCMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an HGNC ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getHGNCMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getHGNCMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getHGNCMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/HGNC/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHGNCMappingUsingPOST operation.
     * @callback module:api/LookupApi~getHGNCMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to HGNC IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getHGNCMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getHGNCMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/HGNC', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMGIMappingUsingGET operation.
     * @callback module:api/LookupApi~getMGIMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an MGI ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getMGIMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getMGIMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getMGIMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/MGI/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMGIMappingUsingPOST operation.
     * @callback module:api/LookupApi~getMGIMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to MGI IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getMGIMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getMGIMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/MGI', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapsUsingGET operation.
     * @callback module:api/LookupApi~getMapsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Map>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list assembly maps for a species
     * @param {Number} speciesTypeKey RGD species type key. A full list of keys is available throught the lookup service.  1=human, 2=mouse, 3=rat,ect
     * @param {module:api/LookupApi~getMapsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Map>}
     */
    getMapsUsingGET(speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getMapsUsingGET");
      }

      let pathParams = {
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Map];
      return this.apiClient.callApi(
        '/lookup/maps/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapsUsingGET1 operation.
     * @callback module:api/LookupApi~getMapsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a standardUnit for an ontology if it exists
     * @param {String} accId RGD term acc
     * @param {module:api/LookupApi~getMapsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getMapsUsingGET1(accId, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getMapsUsingGET1");
      }

      let pathParams = {
        'accId': accId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/lookup/standardUnit/{accId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNCBIGeneMappingUsingGET operation.
     * @callback module:api/LookupApi~getNCBIGeneMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to an NCBI Gene ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getNCBIGeneMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getNCBIGeneMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getNCBIGeneMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/NCBIGene/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNCBIGeneMappingUsingPOST operation.
     * @callback module:api/LookupApi~getNCBIGeneMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to NCBI Gene IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getNCBIGeneMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getNCBIGeneMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/NCBIGene', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpeciesTypesUsingGET operation.
     * @callback module:api/LookupApi~getSpeciesTypesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Map of species type keys available in RGD
     * @param {module:api/LookupApi~getSpeciesTypesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSpeciesTypesUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/lookup/speciesTypeKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniProtMappingUsingGET operation.
     * @callback module:api/LookupApi~getUniProtMappingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate an RGD ID to a UniProt ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/LookupApi~getUniProtMappingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getUniProtMappingUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getUniProtMappingUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/UniProt/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniProtMappingUsingPOST operation.
     * @callback module:api/LookupApi~getUniProtMappingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate RGD IDs to UniProt IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/RGDIDListRequest} [rGDIDListRequest] data
     * @param {module:api/LookupApi~getUniProtMappingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getUniProtMappingUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['rGDIDListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/lookup/id/map/UniProt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
