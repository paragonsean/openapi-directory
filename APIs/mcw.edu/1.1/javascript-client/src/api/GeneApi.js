/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotatedGeneRequest from '../model/AnnotatedGeneRequest';
import Gene from '../model/Gene';
import MappedGene from '../model/MappedGene';
import MappedGenePosition from '../model/MappedGenePosition';
import OrthologRequest from '../model/OrthologRequest';

/**
* Gene service.
* @module api/GeneApi
* @version 1.1
*/
export default class GeneApi {

    /**
    * Constructs a new GeneApi. 
    * @alias module:api/GeneApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllAnnotatedGenesUsingGET operation.
     * @callback module:api/GeneApi~getAllAnnotatedGenesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes annotated to an ontology term
     * @param {String} accId Accesstion ID
     * @param {module:api/GeneApi~getAllAnnotatedGenesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getAllAnnotatedGenesUsingGET(accId, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getAllAnnotatedGenesUsingGET");
      }

      let pathParams = {
        'accId': accId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/annotation/{accId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotatedGenesUsingPOST operation.
     * @callback module:api/GeneApi~getAnnotatedGenesUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes annotated to an ontology term
     * @param {Object} opts Optional parameters
     * @param {module:model/AnnotatedGeneRequest} [annotatedGeneRequest] data
     * @param {module:api/GeneApi~getAnnotatedGenesUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getAnnotatedGenesUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['annotatedGeneRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/annotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneAllelesUsingGET operation.
     * @callback module:api/GeneApi~getGeneAllelesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of gene alleles
     * @param {Number} rgdId RGD ID of gene
     * @param {module:api/GeneApi~getGeneAllelesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGeneAllelesUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getGeneAllelesUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/allele/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneByMapKeyUsingGET operation.
     * @callback module:api/GeneApi~getGeneByMapKeyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MappedGene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of all genes with position information for an assembly
     * @param {Number} mapKey A list of RGD assembly map keys can be found in the lookup service
     * @param {module:api/GeneApi~getGeneByMapKeyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MappedGene>}
     */
    getGeneByMapKeyUsingGET(mapKey, callback) {
      let postBody = null;
      // verify the required parameter 'mapKey' is set
      if (mapKey === undefined || mapKey === null) {
        throw new Error("Missing the required parameter 'mapKey' when calling getGeneByMapKeyUsingGET");
      }

      let pathParams = {
        'mapKey': mapKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MappedGene];
      return this.apiClient.callApi(
        '/genes/map/{mapKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneByRgdIdUsingGET operation.
     * @callback module:api/GeneApi~getGeneByRgdIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Gene} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a gene record by RGD ID
     * @param {Number} rgdId The RGD ID of a Gene in RGD
     * @param {module:api/GeneApi~getGeneByRgdIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Gene}
     */
    getGeneByRgdIdUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getGeneByRgdIdUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Gene;
      return this.apiClient.callApi(
        '/genes/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneBySymbolUsingGET operation.
     * @callback module:api/GeneApi~getGeneBySymbolUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Gene} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a gene record by symbol and species type key
     * @param {String} symbol Gene Symbol
     * @param {Number} speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service
     * @param {module:api/GeneApi~getGeneBySymbolUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Gene}
     */
    getGeneBySymbolUsingGET(symbol, speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getGeneBySymbolUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getGeneBySymbolUsingGET");
      }

      let pathParams = {
        'symbol': symbol,
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Gene;
      return this.apiClient.callApi(
        '/genes/{symbol}/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneOrthologsUsingGET operation.
     * @callback module:api/GeneApi~getGeneOrthologsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of gene orthologs
     * @param {Number} rgdId RGD ID of a gene
     * @param {module:api/GeneApi~getGeneOrthologsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGeneOrthologsUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getGeneOrthologsUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/orthologs/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesAnnotatedUsingGET operation.
     * @callback module:api/GeneApi~getGenesAnnotatedUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes annotated to an ontology term
     * @param {String} accId Ontology term accession ID
     * @param {Number} speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesAnnotatedUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGenesAnnotatedUsingGET(accId, speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getGenesAnnotatedUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getGenesAnnotatedUsingGET");
      }

      let pathParams = {
        'accId': accId,
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/annotation/{accId}/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesByAffyIdUsingGET operation.
     * @callback module:api/GeneApi~getGenesByAffyIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes for an affymetrix ID
     * @param {String} affyId Affymetrix ID
     * @param {Number} speciesTypeKey A list of RGD species type keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesByAffyIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGenesByAffyIdUsingGET(affyId, speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'affyId' is set
      if (affyId === undefined || affyId === null) {
        throw new Error("Missing the required parameter 'affyId' when calling getGenesByAffyIdUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getGenesByAffyIdUsingGET");
      }

      let pathParams = {
        'affyId': affyId,
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/affyId/{affyId}/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesByAliasSymbolUsingGET operation.
     * @callback module:api/GeneApi~getGenesByAliasSymbolUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes for an alias and species
     * @param {String} aliasSymbol Gene alias symbol
     * @param {Number} speciesTypeKey A list of RGD species type keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesByAliasSymbolUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGenesByAliasSymbolUsingGET(aliasSymbol, speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'aliasSymbol' is set
      if (aliasSymbol === undefined || aliasSymbol === null) {
        throw new Error("Missing the required parameter 'aliasSymbol' when calling getGenesByAliasSymbolUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getGenesByAliasSymbolUsingGET");
      }

      let pathParams = {
        'aliasSymbol': aliasSymbol,
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/alias/{aliasSymbol}/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesByKeywordUsingGET operation.
     * @callback module:api/GeneApi~getGenesByKeywordUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes by keyword and species type key
     * @param {String} keyword Search keyword
     * @param {Number} speciesTypeKey Species type key.  A list of species type keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesByKeywordUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGenesByKeywordUsingGET(keyword, speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling getGenesByKeywordUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getGenesByKeywordUsingGET");
      }

      let pathParams = {
        'keyword': keyword,
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/keyword/{keyword}/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesByPositionUsingGET operation.
     * @callback module:api/GeneApi~getGenesByPositionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes position and map key
     * @param {String} chr Chromosome
     * @param {Number} start Start Position
     * @param {Number} stop Stop Position
     * @param {Number} mapKey A list of RGD assembly map keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesByPositionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGenesByPositionUsingGET(chr, start, stop, mapKey, callback) {
      let postBody = null;
      // verify the required parameter 'chr' is set
      if (chr === undefined || chr === null) {
        throw new Error("Missing the required parameter 'chr' when calling getGenesByPositionUsingGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling getGenesByPositionUsingGET");
      }
      // verify the required parameter 'stop' is set
      if (stop === undefined || stop === null) {
        throw new Error("Missing the required parameter 'stop' when calling getGenesByPositionUsingGET");
      }
      // verify the required parameter 'mapKey' is set
      if (mapKey === undefined || mapKey === null) {
        throw new Error("Missing the required parameter 'mapKey' when calling getGenesByPositionUsingGET");
      }

      let pathParams = {
        'chr': chr,
        'start': start,
        'stop': stop,
        'mapKey': mapKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/{chr}/{start}/{stop}/{mapKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesBySpeciesUsingGET operation.
     * @callback module:api/GeneApi~getGenesBySpeciesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of all genes for a species in RGD
     * @param {Number} speciesTypeKey A list of RGD species type keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesBySpeciesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gene>}
     */
    getGenesBySpeciesUsingGET(speciesTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getGenesBySpeciesUsingGET");
      }

      let pathParams = {
        'speciesTypeKey': speciesTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Gene];
      return this.apiClient.callApi(
        '/genes/species/{speciesTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenesInRegionUsingGET operation.
     * @callback module:api/GeneApi~getGenesInRegionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MappedGenePosition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes in region
     * @param {String} chr Chromosome
     * @param {Number} start Start Position
     * @param {Number} stop Stop Position
     * @param {Number} mapKey A list of RGD assembly map keys can be found in the lookup service
     * @param {module:api/GeneApi~getGenesInRegionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MappedGenePosition>}
     */
    getGenesInRegionUsingGET(chr, start, stop, mapKey, callback) {
      let postBody = null;
      // verify the required parameter 'chr' is set
      if (chr === undefined || chr === null) {
        throw new Error("Missing the required parameter 'chr' when calling getGenesInRegionUsingGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling getGenesInRegionUsingGET");
      }
      // verify the required parameter 'stop' is set
      if (stop === undefined || stop === null) {
        throw new Error("Missing the required parameter 'stop' when calling getGenesInRegionUsingGET");
      }
      // verify the required parameter 'mapKey' is set
      if (mapKey === undefined || mapKey === null) {
        throw new Error("Missing the required parameter 'mapKey' when calling getGenesInRegionUsingGET");
      }

      let pathParams = {
        'chr': chr,
        'start': start,
        'stop': stop,
        'mapKey': mapKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MappedGenePosition];
      return this.apiClient.callApi(
        '/genes/region/{chr}/{start}/{stop}/{mapKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMappedGenesByPositionUsingGET operation.
     * @callback module:api/GeneApi~getMappedGenesByPositionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MappedGene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes position and map key
     * @param {String} chr Chromosome
     * @param {Number} start Start Position
     * @param {Number} stop Stop Position
     * @param {Number} mapKey A list of RGD assembly map keys can be found in the lookup service
     * @param {module:api/GeneApi~getMappedGenesByPositionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MappedGene>}
     */
    getMappedGenesByPositionUsingGET(chr, start, stop, mapKey, callback) {
      let postBody = null;
      // verify the required parameter 'chr' is set
      if (chr === undefined || chr === null) {
        throw new Error("Missing the required parameter 'chr' when calling getMappedGenesByPositionUsingGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling getMappedGenesByPositionUsingGET");
      }
      // verify the required parameter 'stop' is set
      if (stop === undefined || stop === null) {
        throw new Error("Missing the required parameter 'stop' when calling getMappedGenesByPositionUsingGET");
      }
      // verify the required parameter 'mapKey' is set
      if (mapKey === undefined || mapKey === null) {
        throw new Error("Missing the required parameter 'mapKey' when calling getMappedGenesByPositionUsingGET");
      }

      let pathParams = {
        'chr': chr,
        'start': start,
        'stop': stop,
        'mapKey': mapKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MappedGene];
      return this.apiClient.callApi(
        '/genes/mapped/{chr}/{start}/{stop}/{mapKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrthologsByListUsingPOST operation.
     * @callback module:api/GeneApi~getOrthologsByListUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [Gene]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of gene orthologs
     * @param {module:model/OrthologRequest} orthologRequest orthologRequest
     * @param {module:api/GeneApi~getOrthologsByListUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [Gene]}>}
     */
    getOrthologsByListUsingPOST(orthologRequest, callback) {
      let postBody = orthologRequest;
      // verify the required parameter 'orthologRequest' is set
      if (orthologRequest === undefined || orthologRequest === null) {
        throw new Error("Missing the required parameter 'orthologRequest' when calling getOrthologsByListUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': [Gene]};
      return this.apiClient.callApi(
        '/genes/orthologs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
