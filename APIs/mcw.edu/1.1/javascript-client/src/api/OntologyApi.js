/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Term from '../model/Term';

/**
* Ontology service.
* @module api/OntologyApi
* @version 1.1
*/
export default class OntologyApi {

    /**
    * Constructs a new OntologyApi. 
    * @alias module:api/OntologyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOntDagsUsingGET operation.
     * @callback module:api/OntologyApi~getOntDagsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns child and parent terms for Accession ID
     * @param {String} accId Accession ID
     * @param {module:api/OntologyApi~getOntDagsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [String]}>}
     */
    getOntDagsUsingGET(accId, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getOntDagsUsingGET");
      }

      let pathParams = {
        'accId': accId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/ontology/ont/{accId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTermUsingGET operation.
     * @callback module:api/OntologyApi~getTermUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Term} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns term for Accession ID
     * @param {String} accId Term Accession ID
     * @param {module:api/OntologyApi~getTermUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Term}
     */
    getTermUsingGET(accId, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getTermUsingGET");
      }

      let pathParams = {
        'accId': accId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Term;
      return this.apiClient.callApi(
        '/ontology/term/{accId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isDescendantOfUsingGET operation.
     * @callback module:api/OntologyApi~isDescendantOfUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns true or false for terms
     * @param {String} accId1 Child Term Accession ID
     * @param {String} accId2 Parent Term Accession ID
     * @param {module:api/OntologyApi~isDescendantOfUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    isDescendantOfUsingGET(accId1, accId2, callback) {
      let postBody = null;
      // verify the required parameter 'accId1' is set
      if (accId1 === undefined || accId1 === null) {
        throw new Error("Missing the required parameter 'accId1' when calling isDescendantOfUsingGET");
      }
      // verify the required parameter 'accId2' is set
      if (accId2 === undefined || accId2 === null) {
        throw new Error("Missing the required parameter 'accId2' when calling isDescendantOfUsingGET");
      }

      let pathParams = {
        'accId1': accId1,
        'accId2': accId2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/ontology/term/{accId1}/{accId2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
