/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* QuantitativePhenotype service.
* @module api/QuantitativePhenotypeApi
* @version 1.1
*/
export default class QuantitativePhenotypeApi {

    /**
    * Constructs a new QuantitativePhenotypeApi. 
    * @alias module:api/QuantitativePhenotypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChartInfoUsingGET operation.
     * @callback module:api/QuantitativePhenotypeApi~getChartInfoUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3=rat, 4=chinchilla).  Reference RGD ID for a study works like a filter.
     * @param {Number} speciesTypeKey Species Type Key - 3=rat 4=chinchilla 
     * @param {Number} refRgdId Reference RGD ID for a study
     * @param {String} termString List of term accession IDs
     * @param {module:api/QuantitativePhenotypeApi~getChartInfoUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getChartInfoUsingGET(speciesTypeKey, refRgdId, termString, callback) {
      let postBody = null;
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getChartInfoUsingGET");
      }
      // verify the required parameter 'refRgdId' is set
      if (refRgdId === undefined || refRgdId === null) {
        throw new Error("Missing the required parameter 'refRgdId' when calling getChartInfoUsingGET");
      }
      // verify the required parameter 'termString' is set
      if (termString === undefined || termString === null) {
        throw new Error("Missing the required parameter 'termString' when calling getChartInfoUsingGET");
      }

      let pathParams = {
        'speciesTypeKey': speciesTypeKey,
        'refRgdId': refRgdId,
        'termString': termString
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/phenotype/phenominer/chart/{speciesTypeKey}/{refRgdId}/{termString}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChartInfoUsingGET1 operation.
     * @callback module:api/QuantitativePhenotypeApi~getChartInfoUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3=rat, 4=chinchilla)
     * @param {Number} speciesTypeKey Species Type Key - 3=rat 4=chinchilla 
     * @param {String} termString List of term accession IDs
     * @param {module:api/QuantitativePhenotypeApi~getChartInfoUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getChartInfoUsingGET1(speciesTypeKey, termString, callback) {
      let postBody = null;
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getChartInfoUsingGET1");
      }
      // verify the required parameter 'termString' is set
      if (termString === undefined || termString === null) {
        throw new Error("Missing the required parameter 'termString' when calling getChartInfoUsingGET1");
      }

      let pathParams = {
        'speciesTypeKey': speciesTypeKey,
        'termString': termString
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/phenotype/phenominer/chart/{speciesTypeKey}/{termString}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
