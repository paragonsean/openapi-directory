/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EnrichmentGeneRequest from '../model/EnrichmentGeneRequest';
import EnrichmentRequest from '../model/EnrichmentRequest';

/**
* EnrichmentWebService service.
* @module api/EnrichmentWebServiceApi
* @version 1.1
*/
export default class EnrichmentWebServiceApi {

    /**
    * Constructs a new EnrichmentWebServiceApi. 
    * @alias module:api/EnrichmentWebServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEnrichmentDataUsingPOST operation.
     * @callback module:api/EnrichmentWebServiceApi~getEnrichmentDataUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes annotated to the term.Genes are rgdids separated by comma.Species type is an integer value.term is the ontology
     * @param {module:model/EnrichmentGeneRequest} enrichmentGeneRequest geneRequest
     * @param {module:api/EnrichmentWebServiceApi~getEnrichmentDataUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getEnrichmentDataUsingPOST(enrichmentGeneRequest, callback) {
      let postBody = enrichmentGeneRequest;
      // verify the required parameter 'enrichmentGeneRequest' is set
      if (enrichmentGeneRequest === undefined || enrichmentGeneRequest === null) {
        throw new Error("Missing the required parameter 'enrichmentGeneRequest' when calling getEnrichmentDataUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/enrichment/annotatedGenes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnrichmentDataUsingPOST1 operation.
     * @callback module:api/EnrichmentWebServiceApi~getEnrichmentDataUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a chart of ontology terms annotated to the genes.Genes are rgdids separated by comma.Species type is an integer value.Aspect is the Ontology group
     * @param {module:model/EnrichmentRequest} enrichmentRequest enrichmentRequest
     * @param {module:api/EnrichmentWebServiceApi~getEnrichmentDataUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getEnrichmentDataUsingPOST1(enrichmentRequest, callback) {
      let postBody = enrichmentRequest;
      // verify the required parameter 'enrichmentRequest' is set
      if (enrichmentRequest === undefined || enrichmentRequest === null) {
        throw new Error("Missing the required parameter 'enrichmentRequest' when calling getEnrichmentDataUsingPOST1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/enrichment/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
