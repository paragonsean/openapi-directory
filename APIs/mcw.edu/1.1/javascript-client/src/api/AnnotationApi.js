/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Annotation from '../model/Annotation';
import AnnotationRequest from '../model/AnnotationRequest';
import MapPair from '../model/MapPair';

/**
* Annotation service.
* @module api/AnnotationApi
* @version 1.1
*/
export default class AnnotationApi {

    /**
    * Constructs a new AnnotationApi. 
    * @alias module:api/AnnotationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAnnotationCountByAccIdAndObjectTypeUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationCountByAccIdAndObjectTypeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns annotation count for ontology accession ID and object type
     * @param {String} accId Ontology term accession ID
     * @param {Number} speciesTypeKey A list of species type keys can be found using the lookup service
     * @param {Boolean} includeChildren true: return annotations for the term and children, false: return annotations for the term only 
     * @param {Number} objectType A list of object types can be found using the lookup service
     * @param {module:api/AnnotationApi~getAnnotationCountByAccIdAndObjectTypeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAnnotationCountByAccIdAndObjectTypeUsingGET(accId, speciesTypeKey, includeChildren, objectType, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET");
      }
      // verify the required parameter 'includeChildren' is set
      if (includeChildren === undefined || includeChildren === null) {
        throw new Error("Missing the required parameter 'includeChildren' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET");
      }
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getAnnotationCountByAccIdAndObjectTypeUsingGET");
      }

      let pathParams = {
        'accId': accId,
        'speciesTypeKey': speciesTypeKey,
        'includeChildren': includeChildren,
        'objectType': objectType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}/{objectType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationCountByAccIdAndSpeciesUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationCountByAccIdAndSpeciesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns annotation count for ontology accession ID and speicies
     * @param {String} accId Ontology term accession ID
     * @param {Number} speciesTypeKey A list of species type keys can be found using the lookup service
     * @param {Boolean} includeChildren true: return annotations for the term and children, false: return annotations for the term only 
     * @param {module:api/AnnotationApi~getAnnotationCountByAccIdAndSpeciesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAnnotationCountByAccIdAndSpeciesUsingGET(accId, speciesTypeKey, includeChildren, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getAnnotationCountByAccIdAndSpeciesUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getAnnotationCountByAccIdAndSpeciesUsingGET");
      }
      // verify the required parameter 'includeChildren' is set
      if (includeChildren === undefined || includeChildren === null) {
        throw new Error("Missing the required parameter 'includeChildren' when calling getAnnotationCountByAccIdAndSpeciesUsingGET");
      }

      let pathParams = {
        'accId': accId,
        'speciesTypeKey': speciesTypeKey,
        'includeChildren': includeChildren
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationCountByAccIdUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationCountByAccIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns annotation count for ontology accession ID
     * @param {String} accId Ontology term accession ID
     * @param {Boolean} includeChildren true: return annotations for the term and children, false: return annotations for the term only 
     * @param {module:api/AnnotationApi~getAnnotationCountByAccIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAnnotationCountByAccIdUsingGET(accId, includeChildren, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getAnnotationCountByAccIdUsingGET");
      }
      // verify the required parameter 'includeChildren' is set
      if (includeChildren === undefined || includeChildren === null) {
        throw new Error("Missing the required parameter 'includeChildren' when calling getAnnotationCountByAccIdUsingGET");
      }

      let pathParams = {
        'accId': accId,
        'includeChildren': includeChildren
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/annotations/count/{accId}/{includeChildren}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationsByAccIdAndRgdIdUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationsByAccIdAndRgdIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of annotations by RGD ID and ontology term accession ID
     * @param {String} accId Ontology Term Accession ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/AnnotationApi~getAnnotationsByAccIdAndRgdIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    getAnnotationsByAccIdAndRgdIdUsingGET(accId, rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getAnnotationsByAccIdAndRgdIdUsingGET");
      }
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getAnnotationsByAccIdAndRgdIdUsingGET");
      }

      let pathParams = {
        'accId': accId,
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotations/{accId}/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationsByRgdIdAndOntologyUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationsByRgdIdAndOntologyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of annotations by RGD ID and ontology prefix
     * @param {Number} rgdId RGD ID
     * @param {String} ontologyPrefix Ontology Prefix.  The prefix can be found left of the semicolon in an ontology term accession ID.  As an example, term accession PW:0000034 has the ontology prefix PW
     * @param {module:api/AnnotationApi~getAnnotationsByRgdIdAndOntologyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    getAnnotationsByRgdIdAndOntologyUsingGET(rgdId, ontologyPrefix, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getAnnotationsByRgdIdAndOntologyUsingGET");
      }
      // verify the required parameter 'ontologyPrefix' is set
      if (ontologyPrefix === undefined || ontologyPrefix === null) {
        throw new Error("Missing the required parameter 'ontologyPrefix' when calling getAnnotationsByRgdIdAndOntologyUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId,
        'ontologyPrefix': ontologyPrefix
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotations/rgdId/{rgdId}/{ontologyPrefix}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationsByRgdIdUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationsByRgdIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of annotations by RGD ID
     * @param {Number} rgdId RGD ID
     * @param {module:api/AnnotationApi~getAnnotationsByRgdIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    getAnnotationsByRgdIdUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getAnnotationsByRgdIdUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotations/rgdId/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationsUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotationsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list annotations for an ontology term or a term and it's children
     * @param {String} accId Ontology term accession ID
     * @param {Number} speciesTypeKey A list of species type keys can be found using the lookup service
     * @param {Boolean} includeChildren true: return annotations for the term and children, false: return annotations for the term only 
     * @param {module:api/AnnotationApi~getAnnotationsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    getAnnotationsUsingGET(accId, speciesTypeKey, includeChildren, callback) {
      let postBody = null;
      // verify the required parameter 'accId' is set
      if (accId === undefined || accId === null) {
        throw new Error("Missing the required parameter 'accId' when calling getAnnotationsUsingGET");
      }
      // verify the required parameter 'speciesTypeKey' is set
      if (speciesTypeKey === undefined || speciesTypeKey === null) {
        throw new Error("Missing the required parameter 'speciesTypeKey' when calling getAnnotationsUsingGET");
      }
      // verify the required parameter 'includeChildren' is set
      if (includeChildren === undefined || includeChildren === null) {
        throw new Error("Missing the required parameter 'includeChildren' when calling getAnnotationsUsingGET");
      }

      let pathParams = {
        'accId': accId,
        'speciesTypeKey': speciesTypeKey,
        'includeChildren': includeChildren
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotations/{accId}/{speciesTypeKey}/{includeChildren}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationsUsingPOST operation.
     * @callback module:api/AnnotationApi~getAnnotationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of genes annotated to an ontology term
     * @param {Object} opts Optional parameters
     * @param {module:model/AnnotationRequest} [annotationRequest] data
     * @param {module:api/AnnotationApi~getAnnotationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    getAnnotationsUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = opts['annotationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotsByRefrerenceUsingGET operation.
     * @callback module:api/AnnotationApi~getAnnotsByRefrerenceUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of annotations for a reference
     * @param {Number} refRgdId Reference RGD ID
     * @param {module:api/AnnotationApi~getAnnotsByRefrerenceUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    getAnnotsByRefrerenceUsingGET(refRgdId, callback) {
      let postBody = null;
      // verify the required parameter 'refRgdId' is set
      if (refRgdId === undefined || refRgdId === null) {
        throw new Error("Missing the required parameter 'refRgdId' when calling getAnnotsByRefrerenceUsingGET");
      }

      let pathParams = {
        'refRgdId': refRgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotations/reference/{refRgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTermAccIdsUsingGET operation.
     * @callback module:api/AnnotationApi~getTermAccIdsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MapPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list ontology term accession IDs annotated to an rgd object
     * @param {Number} rgdId RGD ID
     * @param {module:api/AnnotationApi~getTermAccIdsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MapPair>}
     */
    getTermAccIdsUsingGET(rgdId, callback) {
      let postBody = null;
      // verify the required parameter 'rgdId' is set
      if (rgdId === undefined || rgdId === null) {
        throw new Error("Missing the required parameter 'rgdId' when calling getTermAccIdsUsingGET");
      }

      let pathParams = {
        'rgdId': rgdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MapPair];
      return this.apiClient.callApi(
        '/annotations/accId/{rgdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
