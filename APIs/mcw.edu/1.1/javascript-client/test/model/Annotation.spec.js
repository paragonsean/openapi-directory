/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RatGenomeDatabaseRestApi);
  }
}(this, function(expect, RatGenomeDatabaseRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RatGenomeDatabaseRestApi.Annotation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Annotation', function() {
    it('should create an instance of Annotation', function() {
      // uncomment below and update the code to test Annotation
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be.a(RatGenomeDatabaseRestApi.Annotation);
    });

    it('should have the property annotatedObjectRgdId (base name: "annotatedObjectRgdId")', function() {
      // uncomment below and update the code to test the property annotatedObjectRgdId
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property annotationExtension (base name: "annotationExtension")', function() {
      // uncomment below and update the code to test the property annotationExtension
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property aspect (base name: "aspect")', function() {
      // uncomment below and update the code to test the property aspect
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property dataSrc (base name: "dataSrc")', function() {
      // uncomment below and update the code to test the property dataSrc
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property evidence (base name: "evidence")', function() {
      // uncomment below and update the code to test the property evidence
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property geneProductFormId (base name: "geneProductFormId")', function() {
      // uncomment below and update the code to test the property geneProductFormId
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedBy (base name: "lastModifiedBy")', function() {
      // uncomment below and update the code to test the property lastModifiedBy
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedDate (base name: "lastModifiedDate")', function() {
      // uncomment below and update the code to test the property lastModifiedDate
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property objectName (base name: "objectName")', function() {
      // uncomment below and update the code to test the property objectName
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property objectSymbol (base name: "objectSymbol")', function() {
      // uncomment below and update the code to test the property objectSymbol
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property originalCreatedDate (base name: "originalCreatedDate")', function() {
      // uncomment below and update the code to test the property originalCreatedDate
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property qualifier (base name: "qualifier")', function() {
      // uncomment below and update the code to test the property qualifier
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property refRgdId (base name: "refRgdId")', function() {
      // uncomment below and update the code to test the property refRgdId
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property relativeTo (base name: "relativeTo")', function() {
      // uncomment below and update the code to test the property relativeTo
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property rgdObjectKey (base name: "rgdObjectKey")', function() {
      // uncomment below and update the code to test the property rgdObjectKey
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property speciesTypeKey (base name: "speciesTypeKey")', function() {
      // uncomment below and update the code to test the property speciesTypeKey
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property term (base name: "term")', function() {
      // uncomment below and update the code to test the property term
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property termAcc (base name: "termAcc")', function() {
      // uncomment below and update the code to test the property termAcc
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property withInfo (base name: "withInfo")', function() {
      // uncomment below and update the code to test the property withInfo
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

    it('should have the property xrefSource (base name: "xrefSource")', function() {
      // uncomment below and update the code to test the property xrefSource
      //var instance = new RatGenomeDatabaseRestApi.Annotation();
      //expect(instance).to.be();
    });

  });

}));
