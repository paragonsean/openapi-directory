/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RatGenomeDatabaseRestApi);
  }
}(this, function(expect, RatGenomeDatabaseRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RatGenomeDatabaseRestApi.Gene();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Gene', function() {
    it('should create an instance of Gene', function() {
      // uncomment below and update the code to test Gene
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be.a(RatGenomeDatabaseRestApi.Gene);
    });

    it('should have the property agrDescription (base name: "agrDescription")', function() {
      // uncomment below and update the code to test the property agrDescription
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property ensemblFullName (base name: "ensemblFullName")', function() {
      // uncomment below and update the code to test the property ensemblFullName
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property ensemblGeneSymbol (base name: "ensemblGeneSymbol")', function() {
      // uncomment below and update the code to test the property ensemblGeneSymbol
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property ensemblGeneType (base name: "ensemblGeneType")', function() {
      // uncomment below and update the code to test the property ensemblGeneType
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property geneSource (base name: "geneSource")', function() {
      // uncomment below and update the code to test the property geneSource
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property mergedDescription (base name: "mergedDescription")', function() {
      // uncomment below and update the code to test the property mergedDescription
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property ncbiAnnotStatus (base name: "ncbiAnnotStatus")', function() {
      // uncomment below and update the code to test the property ncbiAnnotStatus
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property nomenReviewDate (base name: "nomenReviewDate")', function() {
      // uncomment below and update the code to test the property nomenReviewDate
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property nomenSource (base name: "nomenSource")', function() {
      // uncomment below and update the code to test the property nomenSource
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property refSeqStatus (base name: "refSeqStatus")', function() {
      // uncomment below and update the code to test the property refSeqStatus
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property rgdId (base name: "rgdId")', function() {
      // uncomment below and update the code to test the property rgdId
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property soAccId (base name: "soAccId")', function() {
      // uncomment below and update the code to test the property soAccId
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property speciesTypeKey (base name: "speciesTypeKey")', function() {
      // uncomment below and update the code to test the property speciesTypeKey
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property symbol (base name: "symbol")', function() {
      // uncomment below and update the code to test the property symbol
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

    it('should have the property variant (base name: "variant")', function() {
      // uncomment below and update the code to test the property variant
      //var instance = new RatGenomeDatabaseRestApi.Gene();
      //expect(instance).to.be();
    });

  });

}));
