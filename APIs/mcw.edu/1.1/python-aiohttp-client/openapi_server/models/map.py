# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Map(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dbsnp_version: str=None, description: str=None, key: int=None, method_key: int=None, name: str=None, notes: str=None, primary_ref_assembly: bool=None, rank: int=None, ref_seq_assembly_acc: str=None, ref_seq_assembly_name: str=None, rgd_id: int=None, source: str=None, species_type_key: int=None, ucsc_assembly_id: str=None, unit: str=None, version: str=None):
        """Map - a model defined in OpenAPI

        :param dbsnp_version: The dbsnp_version of this Map.
        :param description: The description of this Map.
        :param key: The key of this Map.
        :param method_key: The method_key of this Map.
        :param name: The name of this Map.
        :param notes: The notes of this Map.
        :param primary_ref_assembly: The primary_ref_assembly of this Map.
        :param rank: The rank of this Map.
        :param ref_seq_assembly_acc: The ref_seq_assembly_acc of this Map.
        :param ref_seq_assembly_name: The ref_seq_assembly_name of this Map.
        :param rgd_id: The rgd_id of this Map.
        :param source: The source of this Map.
        :param species_type_key: The species_type_key of this Map.
        :param ucsc_assembly_id: The ucsc_assembly_id of this Map.
        :param unit: The unit of this Map.
        :param version: The version of this Map.
        """
        self.openapi_types = {
            'dbsnp_version': str,
            'description': str,
            'key': int,
            'method_key': int,
            'name': str,
            'notes': str,
            'primary_ref_assembly': bool,
            'rank': int,
            'ref_seq_assembly_acc': str,
            'ref_seq_assembly_name': str,
            'rgd_id': int,
            'source': str,
            'species_type_key': int,
            'ucsc_assembly_id': str,
            'unit': str,
            'version': str
        }

        self.attribute_map = {
            'dbsnp_version': 'dbsnpVersion',
            'description': 'description',
            'key': 'key',
            'method_key': 'methodKey',
            'name': 'name',
            'notes': 'notes',
            'primary_ref_assembly': 'primaryRefAssembly',
            'rank': 'rank',
            'ref_seq_assembly_acc': 'refSeqAssemblyAcc',
            'ref_seq_assembly_name': 'refSeqAssemblyName',
            'rgd_id': 'rgdId',
            'source': 'source',
            'species_type_key': 'speciesTypeKey',
            'ucsc_assembly_id': 'ucscAssemblyId',
            'unit': 'unit',
            'version': 'version'
        }

        self._dbsnp_version = dbsnp_version
        self._description = description
        self._key = key
        self._method_key = method_key
        self._name = name
        self._notes = notes
        self._primary_ref_assembly = primary_ref_assembly
        self._rank = rank
        self._ref_seq_assembly_acc = ref_seq_assembly_acc
        self._ref_seq_assembly_name = ref_seq_assembly_name
        self._rgd_id = rgd_id
        self._source = source
        self._species_type_key = species_type_key
        self._ucsc_assembly_id = ucsc_assembly_id
        self._unit = unit
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Map':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Map of this Map.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dbsnp_version(self):
        """Gets the dbsnp_version of this Map.


        :return: The dbsnp_version of this Map.
        :rtype: str
        """
        return self._dbsnp_version

    @dbsnp_version.setter
    def dbsnp_version(self, dbsnp_version):
        """Sets the dbsnp_version of this Map.


        :param dbsnp_version: The dbsnp_version of this Map.
        :type dbsnp_version: str
        """

        self._dbsnp_version = dbsnp_version

    @property
    def description(self):
        """Gets the description of this Map.


        :return: The description of this Map.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Map.


        :param description: The description of this Map.
        :type description: str
        """

        self._description = description

    @property
    def key(self):
        """Gets the key of this Map.


        :return: The key of this Map.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Map.


        :param key: The key of this Map.
        :type key: int
        """

        self._key = key

    @property
    def method_key(self):
        """Gets the method_key of this Map.


        :return: The method_key of this Map.
        :rtype: int
        """
        return self._method_key

    @method_key.setter
    def method_key(self, method_key):
        """Sets the method_key of this Map.


        :param method_key: The method_key of this Map.
        :type method_key: int
        """

        self._method_key = method_key

    @property
    def name(self):
        """Gets the name of this Map.


        :return: The name of this Map.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Map.


        :param name: The name of this Map.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Map.


        :return: The notes of this Map.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Map.


        :param notes: The notes of this Map.
        :type notes: str
        """

        self._notes = notes

    @property
    def primary_ref_assembly(self):
        """Gets the primary_ref_assembly of this Map.


        :return: The primary_ref_assembly of this Map.
        :rtype: bool
        """
        return self._primary_ref_assembly

    @primary_ref_assembly.setter
    def primary_ref_assembly(self, primary_ref_assembly):
        """Sets the primary_ref_assembly of this Map.


        :param primary_ref_assembly: The primary_ref_assembly of this Map.
        :type primary_ref_assembly: bool
        """

        self._primary_ref_assembly = primary_ref_assembly

    @property
    def rank(self):
        """Gets the rank of this Map.


        :return: The rank of this Map.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Map.


        :param rank: The rank of this Map.
        :type rank: int
        """

        self._rank = rank

    @property
    def ref_seq_assembly_acc(self):
        """Gets the ref_seq_assembly_acc of this Map.


        :return: The ref_seq_assembly_acc of this Map.
        :rtype: str
        """
        return self._ref_seq_assembly_acc

    @ref_seq_assembly_acc.setter
    def ref_seq_assembly_acc(self, ref_seq_assembly_acc):
        """Sets the ref_seq_assembly_acc of this Map.


        :param ref_seq_assembly_acc: The ref_seq_assembly_acc of this Map.
        :type ref_seq_assembly_acc: str
        """

        self._ref_seq_assembly_acc = ref_seq_assembly_acc

    @property
    def ref_seq_assembly_name(self):
        """Gets the ref_seq_assembly_name of this Map.


        :return: The ref_seq_assembly_name of this Map.
        :rtype: str
        """
        return self._ref_seq_assembly_name

    @ref_seq_assembly_name.setter
    def ref_seq_assembly_name(self, ref_seq_assembly_name):
        """Sets the ref_seq_assembly_name of this Map.


        :param ref_seq_assembly_name: The ref_seq_assembly_name of this Map.
        :type ref_seq_assembly_name: str
        """

        self._ref_seq_assembly_name = ref_seq_assembly_name

    @property
    def rgd_id(self):
        """Gets the rgd_id of this Map.


        :return: The rgd_id of this Map.
        :rtype: int
        """
        return self._rgd_id

    @rgd_id.setter
    def rgd_id(self, rgd_id):
        """Sets the rgd_id of this Map.


        :param rgd_id: The rgd_id of this Map.
        :type rgd_id: int
        """

        self._rgd_id = rgd_id

    @property
    def source(self):
        """Gets the source of this Map.


        :return: The source of this Map.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Map.


        :param source: The source of this Map.
        :type source: str
        """

        self._source = source

    @property
    def species_type_key(self):
        """Gets the species_type_key of this Map.


        :return: The species_type_key of this Map.
        :rtype: int
        """
        return self._species_type_key

    @species_type_key.setter
    def species_type_key(self, species_type_key):
        """Sets the species_type_key of this Map.


        :param species_type_key: The species_type_key of this Map.
        :type species_type_key: int
        """

        self._species_type_key = species_type_key

    @property
    def ucsc_assembly_id(self):
        """Gets the ucsc_assembly_id of this Map.


        :return: The ucsc_assembly_id of this Map.
        :rtype: str
        """
        return self._ucsc_assembly_id

    @ucsc_assembly_id.setter
    def ucsc_assembly_id(self, ucsc_assembly_id):
        """Sets the ucsc_assembly_id of this Map.


        :param ucsc_assembly_id: The ucsc_assembly_id of this Map.
        :type ucsc_assembly_id: str
        """

        self._ucsc_assembly_id = ucsc_assembly_id

    @property
    def unit(self):
        """Gets the unit of this Map.


        :return: The unit of this Map.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Map.


        :param unit: The unit of this Map.
        :type unit: str
        """

        self._unit = unit

    @property
    def version(self):
        """Gets the version of this Map.


        :return: The version of this Map.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Map.


        :param version: The version of this Map.
        :type version: str
        """

        self._version = version
