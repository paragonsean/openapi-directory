# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Chromosome(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chromosome: str=None, contig_count: int=None, gap_count: int=None, gap_length: int=None, genbank_id: str=None, map_key: int=None, ordinal_number: int=None, refseq_id: str=None, seq_length: int=None):
        """Chromosome - a model defined in OpenAPI

        :param chromosome: The chromosome of this Chromosome.
        :param contig_count: The contig_count of this Chromosome.
        :param gap_count: The gap_count of this Chromosome.
        :param gap_length: The gap_length of this Chromosome.
        :param genbank_id: The genbank_id of this Chromosome.
        :param map_key: The map_key of this Chromosome.
        :param ordinal_number: The ordinal_number of this Chromosome.
        :param refseq_id: The refseq_id of this Chromosome.
        :param seq_length: The seq_length of this Chromosome.
        """
        self.openapi_types = {
            'chromosome': str,
            'contig_count': int,
            'gap_count': int,
            'gap_length': int,
            'genbank_id': str,
            'map_key': int,
            'ordinal_number': int,
            'refseq_id': str,
            'seq_length': int
        }

        self.attribute_map = {
            'chromosome': 'chromosome',
            'contig_count': 'contigCount',
            'gap_count': 'gapCount',
            'gap_length': 'gapLength',
            'genbank_id': 'genbankId',
            'map_key': 'mapKey',
            'ordinal_number': 'ordinalNumber',
            'refseq_id': 'refseqId',
            'seq_length': 'seqLength'
        }

        self._chromosome = chromosome
        self._contig_count = contig_count
        self._gap_count = gap_count
        self._gap_length = gap_length
        self._genbank_id = genbank_id
        self._map_key = map_key
        self._ordinal_number = ordinal_number
        self._refseq_id = refseq_id
        self._seq_length = seq_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Chromosome':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chromosome of this Chromosome.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chromosome(self):
        """Gets the chromosome of this Chromosome.


        :return: The chromosome of this Chromosome.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this Chromosome.


        :param chromosome: The chromosome of this Chromosome.
        :type chromosome: str
        """

        self._chromosome = chromosome

    @property
    def contig_count(self):
        """Gets the contig_count of this Chromosome.


        :return: The contig_count of this Chromosome.
        :rtype: int
        """
        return self._contig_count

    @contig_count.setter
    def contig_count(self, contig_count):
        """Sets the contig_count of this Chromosome.


        :param contig_count: The contig_count of this Chromosome.
        :type contig_count: int
        """

        self._contig_count = contig_count

    @property
    def gap_count(self):
        """Gets the gap_count of this Chromosome.


        :return: The gap_count of this Chromosome.
        :rtype: int
        """
        return self._gap_count

    @gap_count.setter
    def gap_count(self, gap_count):
        """Sets the gap_count of this Chromosome.


        :param gap_count: The gap_count of this Chromosome.
        :type gap_count: int
        """

        self._gap_count = gap_count

    @property
    def gap_length(self):
        """Gets the gap_length of this Chromosome.


        :return: The gap_length of this Chromosome.
        :rtype: int
        """
        return self._gap_length

    @gap_length.setter
    def gap_length(self, gap_length):
        """Sets the gap_length of this Chromosome.


        :param gap_length: The gap_length of this Chromosome.
        :type gap_length: int
        """

        self._gap_length = gap_length

    @property
    def genbank_id(self):
        """Gets the genbank_id of this Chromosome.


        :return: The genbank_id of this Chromosome.
        :rtype: str
        """
        return self._genbank_id

    @genbank_id.setter
    def genbank_id(self, genbank_id):
        """Sets the genbank_id of this Chromosome.


        :param genbank_id: The genbank_id of this Chromosome.
        :type genbank_id: str
        """

        self._genbank_id = genbank_id

    @property
    def map_key(self):
        """Gets the map_key of this Chromosome.


        :return: The map_key of this Chromosome.
        :rtype: int
        """
        return self._map_key

    @map_key.setter
    def map_key(self, map_key):
        """Sets the map_key of this Chromosome.


        :param map_key: The map_key of this Chromosome.
        :type map_key: int
        """

        self._map_key = map_key

    @property
    def ordinal_number(self):
        """Gets the ordinal_number of this Chromosome.


        :return: The ordinal_number of this Chromosome.
        :rtype: int
        """
        return self._ordinal_number

    @ordinal_number.setter
    def ordinal_number(self, ordinal_number):
        """Sets the ordinal_number of this Chromosome.


        :param ordinal_number: The ordinal_number of this Chromosome.
        :type ordinal_number: int
        """

        self._ordinal_number = ordinal_number

    @property
    def refseq_id(self):
        """Gets the refseq_id of this Chromosome.


        :return: The refseq_id of this Chromosome.
        :rtype: str
        """
        return self._refseq_id

    @refseq_id.setter
    def refseq_id(self, refseq_id):
        """Sets the refseq_id of this Chromosome.


        :param refseq_id: The refseq_id of this Chromosome.
        :type refseq_id: str
        """

        self._refseq_id = refseq_id

    @property
    def seq_length(self):
        """Gets the seq_length of this Chromosome.


        :return: The seq_length of this Chromosome.
        :rtype: int
        """
        return self._seq_length

    @seq_length.setter
    def seq_length(self, seq_length):
        """Sets the seq_length of this Chromosome.


        :param seq_length: The seq_length of this Chromosome.
        :type seq_length: int
        """

        self._seq_length = seq_length
