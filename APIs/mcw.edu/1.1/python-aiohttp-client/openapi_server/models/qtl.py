# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QTL(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chromosome: str=None, flank1_rgd_id: int=None, flank2_rgd_id: int=None, inheritance_type: str=None, key: int=None, linkage_image: str=None, lod: float=None, lod_image: str=None, most_significant_cmo_term: str=None, name: str=None, notes: str=None, peak_offset: int=None, peak_rgd_id: int=None, pvalue: float=None, rgd_id: int=None, source_url: str=None, species_type_key: int=None, symbol: str=None, variance: float=None):
        """QTL - a model defined in OpenAPI

        :param chromosome: The chromosome of this QTL.
        :param flank1_rgd_id: The flank1_rgd_id of this QTL.
        :param flank2_rgd_id: The flank2_rgd_id of this QTL.
        :param inheritance_type: The inheritance_type of this QTL.
        :param key: The key of this QTL.
        :param linkage_image: The linkage_image of this QTL.
        :param lod: The lod of this QTL.
        :param lod_image: The lod_image of this QTL.
        :param most_significant_cmo_term: The most_significant_cmo_term of this QTL.
        :param name: The name of this QTL.
        :param notes: The notes of this QTL.
        :param peak_offset: The peak_offset of this QTL.
        :param peak_rgd_id: The peak_rgd_id of this QTL.
        :param pvalue: The pvalue of this QTL.
        :param rgd_id: The rgd_id of this QTL.
        :param source_url: The source_url of this QTL.
        :param species_type_key: The species_type_key of this QTL.
        :param symbol: The symbol of this QTL.
        :param variance: The variance of this QTL.
        """
        self.openapi_types = {
            'chromosome': str,
            'flank1_rgd_id': int,
            'flank2_rgd_id': int,
            'inheritance_type': str,
            'key': int,
            'linkage_image': str,
            'lod': float,
            'lod_image': str,
            'most_significant_cmo_term': str,
            'name': str,
            'notes': str,
            'peak_offset': int,
            'peak_rgd_id': int,
            'pvalue': float,
            'rgd_id': int,
            'source_url': str,
            'species_type_key': int,
            'symbol': str,
            'variance': float
        }

        self.attribute_map = {
            'chromosome': 'chromosome',
            'flank1_rgd_id': 'flank1RgdId',
            'flank2_rgd_id': 'flank2RgdId',
            'inheritance_type': 'inheritanceType',
            'key': 'key',
            'linkage_image': 'linkageImage',
            'lod': 'lod',
            'lod_image': 'lodImage',
            'most_significant_cmo_term': 'mostSignificantCmoTerm',
            'name': 'name',
            'notes': 'notes',
            'peak_offset': 'peakOffset',
            'peak_rgd_id': 'peakRgdId',
            'pvalue': 'pvalue',
            'rgd_id': 'rgdId',
            'source_url': 'sourceUrl',
            'species_type_key': 'speciesTypeKey',
            'symbol': 'symbol',
            'variance': 'variance'
        }

        self._chromosome = chromosome
        self._flank1_rgd_id = flank1_rgd_id
        self._flank2_rgd_id = flank2_rgd_id
        self._inheritance_type = inheritance_type
        self._key = key
        self._linkage_image = linkage_image
        self._lod = lod
        self._lod_image = lod_image
        self._most_significant_cmo_term = most_significant_cmo_term
        self._name = name
        self._notes = notes
        self._peak_offset = peak_offset
        self._peak_rgd_id = peak_rgd_id
        self._pvalue = pvalue
        self._rgd_id = rgd_id
        self._source_url = source_url
        self._species_type_key = species_type_key
        self._symbol = symbol
        self._variance = variance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QTL':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QTL of this QTL.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chromosome(self):
        """Gets the chromosome of this QTL.


        :return: The chromosome of this QTL.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this QTL.


        :param chromosome: The chromosome of this QTL.
        :type chromosome: str
        """

        self._chromosome = chromosome

    @property
    def flank1_rgd_id(self):
        """Gets the flank1_rgd_id of this QTL.


        :return: The flank1_rgd_id of this QTL.
        :rtype: int
        """
        return self._flank1_rgd_id

    @flank1_rgd_id.setter
    def flank1_rgd_id(self, flank1_rgd_id):
        """Sets the flank1_rgd_id of this QTL.


        :param flank1_rgd_id: The flank1_rgd_id of this QTL.
        :type flank1_rgd_id: int
        """

        self._flank1_rgd_id = flank1_rgd_id

    @property
    def flank2_rgd_id(self):
        """Gets the flank2_rgd_id of this QTL.


        :return: The flank2_rgd_id of this QTL.
        :rtype: int
        """
        return self._flank2_rgd_id

    @flank2_rgd_id.setter
    def flank2_rgd_id(self, flank2_rgd_id):
        """Sets the flank2_rgd_id of this QTL.


        :param flank2_rgd_id: The flank2_rgd_id of this QTL.
        :type flank2_rgd_id: int
        """

        self._flank2_rgd_id = flank2_rgd_id

    @property
    def inheritance_type(self):
        """Gets the inheritance_type of this QTL.


        :return: The inheritance_type of this QTL.
        :rtype: str
        """
        return self._inheritance_type

    @inheritance_type.setter
    def inheritance_type(self, inheritance_type):
        """Sets the inheritance_type of this QTL.


        :param inheritance_type: The inheritance_type of this QTL.
        :type inheritance_type: str
        """

        self._inheritance_type = inheritance_type

    @property
    def key(self):
        """Gets the key of this QTL.


        :return: The key of this QTL.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this QTL.


        :param key: The key of this QTL.
        :type key: int
        """

        self._key = key

    @property
    def linkage_image(self):
        """Gets the linkage_image of this QTL.


        :return: The linkage_image of this QTL.
        :rtype: str
        """
        return self._linkage_image

    @linkage_image.setter
    def linkage_image(self, linkage_image):
        """Sets the linkage_image of this QTL.


        :param linkage_image: The linkage_image of this QTL.
        :type linkage_image: str
        """

        self._linkage_image = linkage_image

    @property
    def lod(self):
        """Gets the lod of this QTL.


        :return: The lod of this QTL.
        :rtype: float
        """
        return self._lod

    @lod.setter
    def lod(self, lod):
        """Sets the lod of this QTL.


        :param lod: The lod of this QTL.
        :type lod: float
        """

        self._lod = lod

    @property
    def lod_image(self):
        """Gets the lod_image of this QTL.


        :return: The lod_image of this QTL.
        :rtype: str
        """
        return self._lod_image

    @lod_image.setter
    def lod_image(self, lod_image):
        """Sets the lod_image of this QTL.


        :param lod_image: The lod_image of this QTL.
        :type lod_image: str
        """

        self._lod_image = lod_image

    @property
    def most_significant_cmo_term(self):
        """Gets the most_significant_cmo_term of this QTL.


        :return: The most_significant_cmo_term of this QTL.
        :rtype: str
        """
        return self._most_significant_cmo_term

    @most_significant_cmo_term.setter
    def most_significant_cmo_term(self, most_significant_cmo_term):
        """Sets the most_significant_cmo_term of this QTL.


        :param most_significant_cmo_term: The most_significant_cmo_term of this QTL.
        :type most_significant_cmo_term: str
        """

        self._most_significant_cmo_term = most_significant_cmo_term

    @property
    def name(self):
        """Gets the name of this QTL.


        :return: The name of this QTL.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QTL.


        :param name: The name of this QTL.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this QTL.


        :return: The notes of this QTL.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this QTL.


        :param notes: The notes of this QTL.
        :type notes: str
        """

        self._notes = notes

    @property
    def peak_offset(self):
        """Gets the peak_offset of this QTL.


        :return: The peak_offset of this QTL.
        :rtype: int
        """
        return self._peak_offset

    @peak_offset.setter
    def peak_offset(self, peak_offset):
        """Sets the peak_offset of this QTL.


        :param peak_offset: The peak_offset of this QTL.
        :type peak_offset: int
        """

        self._peak_offset = peak_offset

    @property
    def peak_rgd_id(self):
        """Gets the peak_rgd_id of this QTL.


        :return: The peak_rgd_id of this QTL.
        :rtype: int
        """
        return self._peak_rgd_id

    @peak_rgd_id.setter
    def peak_rgd_id(self, peak_rgd_id):
        """Sets the peak_rgd_id of this QTL.


        :param peak_rgd_id: The peak_rgd_id of this QTL.
        :type peak_rgd_id: int
        """

        self._peak_rgd_id = peak_rgd_id

    @property
    def pvalue(self):
        """Gets the pvalue of this QTL.


        :return: The pvalue of this QTL.
        :rtype: float
        """
        return self._pvalue

    @pvalue.setter
    def pvalue(self, pvalue):
        """Sets the pvalue of this QTL.


        :param pvalue: The pvalue of this QTL.
        :type pvalue: float
        """

        self._pvalue = pvalue

    @property
    def rgd_id(self):
        """Gets the rgd_id of this QTL.


        :return: The rgd_id of this QTL.
        :rtype: int
        """
        return self._rgd_id

    @rgd_id.setter
    def rgd_id(self, rgd_id):
        """Sets the rgd_id of this QTL.


        :param rgd_id: The rgd_id of this QTL.
        :type rgd_id: int
        """

        self._rgd_id = rgd_id

    @property
    def source_url(self):
        """Gets the source_url of this QTL.


        :return: The source_url of this QTL.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this QTL.


        :param source_url: The source_url of this QTL.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def species_type_key(self):
        """Gets the species_type_key of this QTL.


        :return: The species_type_key of this QTL.
        :rtype: int
        """
        return self._species_type_key

    @species_type_key.setter
    def species_type_key(self, species_type_key):
        """Sets the species_type_key of this QTL.


        :param species_type_key: The species_type_key of this QTL.
        :type species_type_key: int
        """

        self._species_type_key = species_type_key

    @property
    def symbol(self):
        """Gets the symbol of this QTL.


        :return: The symbol of this QTL.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this QTL.


        :param symbol: The symbol of this QTL.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def variance(self):
        """Gets the variance of this QTL.


        :return: The variance of this QTL.
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this QTL.


        :param variance: The variance of this QTL.
        :type variance: float
        """

        self._variance = variance
