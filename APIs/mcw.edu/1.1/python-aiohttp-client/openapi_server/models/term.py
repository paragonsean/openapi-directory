# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.term_x_ref import TermXRef
from openapi_server import util


class Term(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acc_id: str=None, comment: str=None, created_by: str=None, creation_date: datetime=None, definition: str=None, modification_date: datetime=None, obsolete: int=None, ontology_id: str=None, term: str=None, xrefs: List[TermXRef]=None):
        """Term - a model defined in OpenAPI

        :param acc_id: The acc_id of this Term.
        :param comment: The comment of this Term.
        :param created_by: The created_by of this Term.
        :param creation_date: The creation_date of this Term.
        :param definition: The definition of this Term.
        :param modification_date: The modification_date of this Term.
        :param obsolete: The obsolete of this Term.
        :param ontology_id: The ontology_id of this Term.
        :param term: The term of this Term.
        :param xrefs: The xrefs of this Term.
        """
        self.openapi_types = {
            'acc_id': str,
            'comment': str,
            'created_by': str,
            'creation_date': datetime,
            'definition': str,
            'modification_date': datetime,
            'obsolete': int,
            'ontology_id': str,
            'term': str,
            'xrefs': List[TermXRef]
        }

        self.attribute_map = {
            'acc_id': 'accId',
            'comment': 'comment',
            'created_by': 'createdBy',
            'creation_date': 'creationDate',
            'definition': 'definition',
            'modification_date': 'modificationDate',
            'obsolete': 'obsolete',
            'ontology_id': 'ontologyId',
            'term': 'term',
            'xrefs': 'xrefs'
        }

        self._acc_id = acc_id
        self._comment = comment
        self._created_by = created_by
        self._creation_date = creation_date
        self._definition = definition
        self._modification_date = modification_date
        self._obsolete = obsolete
        self._ontology_id = ontology_id
        self._term = term
        self._xrefs = xrefs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Term':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Term of this Term.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acc_id(self):
        """Gets the acc_id of this Term.


        :return: The acc_id of this Term.
        :rtype: str
        """
        return self._acc_id

    @acc_id.setter
    def acc_id(self, acc_id):
        """Sets the acc_id of this Term.


        :param acc_id: The acc_id of this Term.
        :type acc_id: str
        """

        self._acc_id = acc_id

    @property
    def comment(self):
        """Gets the comment of this Term.


        :return: The comment of this Term.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Term.


        :param comment: The comment of this Term.
        :type comment: str
        """

        self._comment = comment

    @property
    def created_by(self):
        """Gets the created_by of this Term.


        :return: The created_by of this Term.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Term.


        :param created_by: The created_by of this Term.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this Term.


        :return: The creation_date of this Term.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Term.


        :param creation_date: The creation_date of this Term.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def definition(self):
        """Gets the definition of this Term.


        :return: The definition of this Term.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this Term.


        :param definition: The definition of this Term.
        :type definition: str
        """

        self._definition = definition

    @property
    def modification_date(self):
        """Gets the modification_date of this Term.


        :return: The modification_date of this Term.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this Term.


        :param modification_date: The modification_date of this Term.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def obsolete(self):
        """Gets the obsolete of this Term.


        :return: The obsolete of this Term.
        :rtype: int
        """
        return self._obsolete

    @obsolete.setter
    def obsolete(self, obsolete):
        """Sets the obsolete of this Term.


        :param obsolete: The obsolete of this Term.
        :type obsolete: int
        """

        self._obsolete = obsolete

    @property
    def ontology_id(self):
        """Gets the ontology_id of this Term.


        :return: The ontology_id of this Term.
        :rtype: str
        """
        return self._ontology_id

    @ontology_id.setter
    def ontology_id(self, ontology_id):
        """Sets the ontology_id of this Term.


        :param ontology_id: The ontology_id of this Term.
        :type ontology_id: str
        """

        self._ontology_id = ontology_id

    @property
    def term(self):
        """Gets the term of this Term.


        :return: The term of this Term.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Term.


        :param term: The term of this Term.
        :type term: str
        """

        self._term = term

    @property
    def xrefs(self):
        """Gets the xrefs of this Term.


        :return: The xrefs of this Term.
        :rtype: List[TermXRef]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this Term.


        :param xrefs: The xrefs of this Term.
        :type xrefs: List[TermXRef]
        """

        self._xrefs = xrefs
