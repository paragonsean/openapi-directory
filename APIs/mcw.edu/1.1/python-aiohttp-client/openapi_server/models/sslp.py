# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SSLP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_size: int=None, forward_seq: str=None, key: int=None, name: str=None, notes: str=None, reverse_seq: str=None, rgd_id: int=None, species_type_key: int=None, sslp_type: str=None, template_seq: str=None):
        """SSLP - a model defined in OpenAPI

        :param expected_size: The expected_size of this SSLP.
        :param forward_seq: The forward_seq of this SSLP.
        :param key: The key of this SSLP.
        :param name: The name of this SSLP.
        :param notes: The notes of this SSLP.
        :param reverse_seq: The reverse_seq of this SSLP.
        :param rgd_id: The rgd_id of this SSLP.
        :param species_type_key: The species_type_key of this SSLP.
        :param sslp_type: The sslp_type of this SSLP.
        :param template_seq: The template_seq of this SSLP.
        """
        self.openapi_types = {
            'expected_size': int,
            'forward_seq': str,
            'key': int,
            'name': str,
            'notes': str,
            'reverse_seq': str,
            'rgd_id': int,
            'species_type_key': int,
            'sslp_type': str,
            'template_seq': str
        }

        self.attribute_map = {
            'expected_size': 'expectedSize',
            'forward_seq': 'forwardSeq',
            'key': 'key',
            'name': 'name',
            'notes': 'notes',
            'reverse_seq': 'reverseSeq',
            'rgd_id': 'rgdId',
            'species_type_key': 'speciesTypeKey',
            'sslp_type': 'sslpType',
            'template_seq': 'templateSeq'
        }

        self._expected_size = expected_size
        self._forward_seq = forward_seq
        self._key = key
        self._name = name
        self._notes = notes
        self._reverse_seq = reverse_seq
        self._rgd_id = rgd_id
        self._species_type_key = species_type_key
        self._sslp_type = sslp_type
        self._template_seq = template_seq

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SSLP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SSLP of this SSLP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_size(self):
        """Gets the expected_size of this SSLP.


        :return: The expected_size of this SSLP.
        :rtype: int
        """
        return self._expected_size

    @expected_size.setter
    def expected_size(self, expected_size):
        """Sets the expected_size of this SSLP.


        :param expected_size: The expected_size of this SSLP.
        :type expected_size: int
        """

        self._expected_size = expected_size

    @property
    def forward_seq(self):
        """Gets the forward_seq of this SSLP.


        :return: The forward_seq of this SSLP.
        :rtype: str
        """
        return self._forward_seq

    @forward_seq.setter
    def forward_seq(self, forward_seq):
        """Sets the forward_seq of this SSLP.


        :param forward_seq: The forward_seq of this SSLP.
        :type forward_seq: str
        """

        self._forward_seq = forward_seq

    @property
    def key(self):
        """Gets the key of this SSLP.


        :return: The key of this SSLP.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SSLP.


        :param key: The key of this SSLP.
        :type key: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this SSLP.


        :return: The name of this SSLP.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SSLP.


        :param name: The name of this SSLP.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this SSLP.


        :return: The notes of this SSLP.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SSLP.


        :param notes: The notes of this SSLP.
        :type notes: str
        """

        self._notes = notes

    @property
    def reverse_seq(self):
        """Gets the reverse_seq of this SSLP.


        :return: The reverse_seq of this SSLP.
        :rtype: str
        """
        return self._reverse_seq

    @reverse_seq.setter
    def reverse_seq(self, reverse_seq):
        """Sets the reverse_seq of this SSLP.


        :param reverse_seq: The reverse_seq of this SSLP.
        :type reverse_seq: str
        """

        self._reverse_seq = reverse_seq

    @property
    def rgd_id(self):
        """Gets the rgd_id of this SSLP.


        :return: The rgd_id of this SSLP.
        :rtype: int
        """
        return self._rgd_id

    @rgd_id.setter
    def rgd_id(self, rgd_id):
        """Sets the rgd_id of this SSLP.


        :param rgd_id: The rgd_id of this SSLP.
        :type rgd_id: int
        """

        self._rgd_id = rgd_id

    @property
    def species_type_key(self):
        """Gets the species_type_key of this SSLP.


        :return: The species_type_key of this SSLP.
        :rtype: int
        """
        return self._species_type_key

    @species_type_key.setter
    def species_type_key(self, species_type_key):
        """Sets the species_type_key of this SSLP.


        :param species_type_key: The species_type_key of this SSLP.
        :type species_type_key: int
        """

        self._species_type_key = species_type_key

    @property
    def sslp_type(self):
        """Gets the sslp_type of this SSLP.


        :return: The sslp_type of this SSLP.
        :rtype: str
        """
        return self._sslp_type

    @sslp_type.setter
    def sslp_type(self, sslp_type):
        """Sets the sslp_type of this SSLP.


        :param sslp_type: The sslp_type of this SSLP.
        :type sslp_type: str
        """

        self._sslp_type = sslp_type

    @property
    def template_seq(self):
        """Gets the template_seq of this SSLP.


        :return: The template_seq of this SSLP.
        :rtype: str
        """
        return self._template_seq

    @template_seq.setter
    def template_seq(self, template_seq):
        """Sets the template_seq of this SSLP.


        :param template_seq: The template_seq of this SSLP.
        :type template_seq: str
        """

        self._template_seq = template_seq
