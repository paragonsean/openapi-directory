# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Reference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, citation: str=None, doi: str=None, editors: str=None, issue: str=None, key: int=None, notes: str=None, pages: str=None, pub_date: datetime=None, pub_status: str=None, publication: str=None, publisher: str=None, publisher_city: str=None, ref_abstract: str=None, reference_type: str=None, rgd_id: int=None, species_type_key: int=None, title: str=None, url_web_reference: str=None, volume: str=None):
        """Reference - a model defined in OpenAPI

        :param citation: The citation of this Reference.
        :param doi: The doi of this Reference.
        :param editors: The editors of this Reference.
        :param issue: The issue of this Reference.
        :param key: The key of this Reference.
        :param notes: The notes of this Reference.
        :param pages: The pages of this Reference.
        :param pub_date: The pub_date of this Reference.
        :param pub_status: The pub_status of this Reference.
        :param publication: The publication of this Reference.
        :param publisher: The publisher of this Reference.
        :param publisher_city: The publisher_city of this Reference.
        :param ref_abstract: The ref_abstract of this Reference.
        :param reference_type: The reference_type of this Reference.
        :param rgd_id: The rgd_id of this Reference.
        :param species_type_key: The species_type_key of this Reference.
        :param title: The title of this Reference.
        :param url_web_reference: The url_web_reference of this Reference.
        :param volume: The volume of this Reference.
        """
        self.openapi_types = {
            'citation': str,
            'doi': str,
            'editors': str,
            'issue': str,
            'key': int,
            'notes': str,
            'pages': str,
            'pub_date': datetime,
            'pub_status': str,
            'publication': str,
            'publisher': str,
            'publisher_city': str,
            'ref_abstract': str,
            'reference_type': str,
            'rgd_id': int,
            'species_type_key': int,
            'title': str,
            'url_web_reference': str,
            'volume': str
        }

        self.attribute_map = {
            'citation': 'citation',
            'doi': 'doi',
            'editors': 'editors',
            'issue': 'issue',
            'key': 'key',
            'notes': 'notes',
            'pages': 'pages',
            'pub_date': 'pubDate',
            'pub_status': 'pubStatus',
            'publication': 'publication',
            'publisher': 'publisher',
            'publisher_city': 'publisherCity',
            'ref_abstract': 'refAbstract',
            'reference_type': 'referenceType',
            'rgd_id': 'rgdId',
            'species_type_key': 'speciesTypeKey',
            'title': 'title',
            'url_web_reference': 'urlWebReference',
            'volume': 'volume'
        }

        self._citation = citation
        self._doi = doi
        self._editors = editors
        self._issue = issue
        self._key = key
        self._notes = notes
        self._pages = pages
        self._pub_date = pub_date
        self._pub_status = pub_status
        self._publication = publication
        self._publisher = publisher
        self._publisher_city = publisher_city
        self._ref_abstract = ref_abstract
        self._reference_type = reference_type
        self._rgd_id = rgd_id
        self._species_type_key = species_type_key
        self._title = title
        self._url_web_reference = url_web_reference
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reference of this Reference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def citation(self):
        """Gets the citation of this Reference.


        :return: The citation of this Reference.
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this Reference.


        :param citation: The citation of this Reference.
        :type citation: str
        """

        self._citation = citation

    @property
    def doi(self):
        """Gets the doi of this Reference.


        :return: The doi of this Reference.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Reference.


        :param doi: The doi of this Reference.
        :type doi: str
        """

        self._doi = doi

    @property
    def editors(self):
        """Gets the editors of this Reference.


        :return: The editors of this Reference.
        :rtype: str
        """
        return self._editors

    @editors.setter
    def editors(self, editors):
        """Sets the editors of this Reference.


        :param editors: The editors of this Reference.
        :type editors: str
        """

        self._editors = editors

    @property
    def issue(self):
        """Gets the issue of this Reference.


        :return: The issue of this Reference.
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Reference.


        :param issue: The issue of this Reference.
        :type issue: str
        """

        self._issue = issue

    @property
    def key(self):
        """Gets the key of this Reference.


        :return: The key of this Reference.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Reference.


        :param key: The key of this Reference.
        :type key: int
        """

        self._key = key

    @property
    def notes(self):
        """Gets the notes of this Reference.


        :return: The notes of this Reference.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Reference.


        :param notes: The notes of this Reference.
        :type notes: str
        """

        self._notes = notes

    @property
    def pages(self):
        """Gets the pages of this Reference.


        :return: The pages of this Reference.
        :rtype: str
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Reference.


        :param pages: The pages of this Reference.
        :type pages: str
        """

        self._pages = pages

    @property
    def pub_date(self):
        """Gets the pub_date of this Reference.


        :return: The pub_date of this Reference.
        :rtype: datetime
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """Sets the pub_date of this Reference.


        :param pub_date: The pub_date of this Reference.
        :type pub_date: datetime
        """

        self._pub_date = pub_date

    @property
    def pub_status(self):
        """Gets the pub_status of this Reference.


        :return: The pub_status of this Reference.
        :rtype: str
        """
        return self._pub_status

    @pub_status.setter
    def pub_status(self, pub_status):
        """Sets the pub_status of this Reference.


        :param pub_status: The pub_status of this Reference.
        :type pub_status: str
        """

        self._pub_status = pub_status

    @property
    def publication(self):
        """Gets the publication of this Reference.


        :return: The publication of this Reference.
        :rtype: str
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this Reference.


        :param publication: The publication of this Reference.
        :type publication: str
        """

        self._publication = publication

    @property
    def publisher(self):
        """Gets the publisher of this Reference.


        :return: The publisher of this Reference.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Reference.


        :param publisher: The publisher of this Reference.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def publisher_city(self):
        """Gets the publisher_city of this Reference.


        :return: The publisher_city of this Reference.
        :rtype: str
        """
        return self._publisher_city

    @publisher_city.setter
    def publisher_city(self, publisher_city):
        """Sets the publisher_city of this Reference.


        :param publisher_city: The publisher_city of this Reference.
        :type publisher_city: str
        """

        self._publisher_city = publisher_city

    @property
    def ref_abstract(self):
        """Gets the ref_abstract of this Reference.


        :return: The ref_abstract of this Reference.
        :rtype: str
        """
        return self._ref_abstract

    @ref_abstract.setter
    def ref_abstract(self, ref_abstract):
        """Sets the ref_abstract of this Reference.


        :param ref_abstract: The ref_abstract of this Reference.
        :type ref_abstract: str
        """

        self._ref_abstract = ref_abstract

    @property
    def reference_type(self):
        """Gets the reference_type of this Reference.


        :return: The reference_type of this Reference.
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this Reference.


        :param reference_type: The reference_type of this Reference.
        :type reference_type: str
        """

        self._reference_type = reference_type

    @property
    def rgd_id(self):
        """Gets the rgd_id of this Reference.


        :return: The rgd_id of this Reference.
        :rtype: int
        """
        return self._rgd_id

    @rgd_id.setter
    def rgd_id(self, rgd_id):
        """Sets the rgd_id of this Reference.


        :param rgd_id: The rgd_id of this Reference.
        :type rgd_id: int
        """

        self._rgd_id = rgd_id

    @property
    def species_type_key(self):
        """Gets the species_type_key of this Reference.


        :return: The species_type_key of this Reference.
        :rtype: int
        """
        return self._species_type_key

    @species_type_key.setter
    def species_type_key(self, species_type_key):
        """Sets the species_type_key of this Reference.


        :param species_type_key: The species_type_key of this Reference.
        :type species_type_key: int
        """

        self._species_type_key = species_type_key

    @property
    def title(self):
        """Gets the title of this Reference.


        :return: The title of this Reference.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Reference.


        :param title: The title of this Reference.
        :type title: str
        """

        self._title = title

    @property
    def url_web_reference(self):
        """Gets the url_web_reference of this Reference.


        :return: The url_web_reference of this Reference.
        :rtype: str
        """
        return self._url_web_reference

    @url_web_reference.setter
    def url_web_reference(self, url_web_reference):
        """Sets the url_web_reference of this Reference.


        :param url_web_reference: The url_web_reference of this Reference.
        :type url_web_reference: str
        """

        self._url_web_reference = url_web_reference

    @property
    def volume(self):
        """Gets the volume of this Reference.


        :return: The volume of this Reference.
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Reference.


        :param volume: The volume of this Reference.
        :type volume: str
        """

        self._volume = volume
