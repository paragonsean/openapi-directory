# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cryopreserved_embryo: bool=None, cryopreserved_sperm: bool=None, cryorecovery: bool=None, key: int=None, live_animals: bool=None, status_date: datetime=None, strain_rgd_id: int=None):
        """Status - a model defined in OpenAPI

        :param cryopreserved_embryo: The cryopreserved_embryo of this Status.
        :param cryopreserved_sperm: The cryopreserved_sperm of this Status.
        :param cryorecovery: The cryorecovery of this Status.
        :param key: The key of this Status.
        :param live_animals: The live_animals of this Status.
        :param status_date: The status_date of this Status.
        :param strain_rgd_id: The strain_rgd_id of this Status.
        """
        self.openapi_types = {
            'cryopreserved_embryo': bool,
            'cryopreserved_sperm': bool,
            'cryorecovery': bool,
            'key': int,
            'live_animals': bool,
            'status_date': datetime,
            'strain_rgd_id': int
        }

        self.attribute_map = {
            'cryopreserved_embryo': 'cryopreservedEmbryo',
            'cryopreserved_sperm': 'cryopreservedSperm',
            'cryorecovery': 'cryorecovery',
            'key': 'key',
            'live_animals': 'liveAnimals',
            'status_date': 'statusDate',
            'strain_rgd_id': 'strainRgdId'
        }

        self._cryopreserved_embryo = cryopreserved_embryo
        self._cryopreserved_sperm = cryopreserved_sperm
        self._cryorecovery = cryorecovery
        self._key = key
        self._live_animals = live_animals
        self._status_date = status_date
        self._strain_rgd_id = strain_rgd_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cryopreserved_embryo(self):
        """Gets the cryopreserved_embryo of this Status.


        :return: The cryopreserved_embryo of this Status.
        :rtype: bool
        """
        return self._cryopreserved_embryo

    @cryopreserved_embryo.setter
    def cryopreserved_embryo(self, cryopreserved_embryo):
        """Sets the cryopreserved_embryo of this Status.


        :param cryopreserved_embryo: The cryopreserved_embryo of this Status.
        :type cryopreserved_embryo: bool
        """

        self._cryopreserved_embryo = cryopreserved_embryo

    @property
    def cryopreserved_sperm(self):
        """Gets the cryopreserved_sperm of this Status.


        :return: The cryopreserved_sperm of this Status.
        :rtype: bool
        """
        return self._cryopreserved_sperm

    @cryopreserved_sperm.setter
    def cryopreserved_sperm(self, cryopreserved_sperm):
        """Sets the cryopreserved_sperm of this Status.


        :param cryopreserved_sperm: The cryopreserved_sperm of this Status.
        :type cryopreserved_sperm: bool
        """

        self._cryopreserved_sperm = cryopreserved_sperm

    @property
    def cryorecovery(self):
        """Gets the cryorecovery of this Status.


        :return: The cryorecovery of this Status.
        :rtype: bool
        """
        return self._cryorecovery

    @cryorecovery.setter
    def cryorecovery(self, cryorecovery):
        """Sets the cryorecovery of this Status.


        :param cryorecovery: The cryorecovery of this Status.
        :type cryorecovery: bool
        """

        self._cryorecovery = cryorecovery

    @property
    def key(self):
        """Gets the key of this Status.


        :return: The key of this Status.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Status.


        :param key: The key of this Status.
        :type key: int
        """

        self._key = key

    @property
    def live_animals(self):
        """Gets the live_animals of this Status.


        :return: The live_animals of this Status.
        :rtype: bool
        """
        return self._live_animals

    @live_animals.setter
    def live_animals(self, live_animals):
        """Sets the live_animals of this Status.


        :param live_animals: The live_animals of this Status.
        :type live_animals: bool
        """

        self._live_animals = live_animals

    @property
    def status_date(self):
        """Gets the status_date of this Status.


        :return: The status_date of this Status.
        :rtype: datetime
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this Status.


        :param status_date: The status_date of this Status.
        :type status_date: datetime
        """

        self._status_date = status_date

    @property
    def strain_rgd_id(self):
        """Gets the strain_rgd_id of this Status.


        :return: The strain_rgd_id of this Status.
        :rtype: int
        """
        return self._strain_rgd_id

    @strain_rgd_id.setter
    def strain_rgd_id(self, strain_rgd_id):
        """Sets the strain_rgd_id of this Status.


        :param strain_rgd_id: The strain_rgd_id of this Status.
        :type strain_rgd_id: int
        """

        self._strain_rgd_id = strain_rgd_id
