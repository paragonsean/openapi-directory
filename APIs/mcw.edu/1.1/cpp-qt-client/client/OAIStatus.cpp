/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_cryopreserved_embryo_isSet = false;
    m_cryopreserved_embryo_isValid = false;

    m_cryopreserved_sperm_isSet = false;
    m_cryopreserved_sperm_isValid = false;

    m_cryorecovery_isSet = false;
    m_cryorecovery_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_live_animals_isSet = false;
    m_live_animals_isValid = false;

    m_status_date_isSet = false;
    m_status_date_isValid = false;

    m_strain_rgd_id_isSet = false;
    m_strain_rgd_id_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_cryopreserved_embryo_isValid = ::OpenAPI::fromJsonValue(m_cryopreserved_embryo, json[QString("cryopreservedEmbryo")]);
    m_cryopreserved_embryo_isSet = !json[QString("cryopreservedEmbryo")].isNull() && m_cryopreserved_embryo_isValid;

    m_cryopreserved_sperm_isValid = ::OpenAPI::fromJsonValue(m_cryopreserved_sperm, json[QString("cryopreservedSperm")]);
    m_cryopreserved_sperm_isSet = !json[QString("cryopreservedSperm")].isNull() && m_cryopreserved_sperm_isValid;

    m_cryorecovery_isValid = ::OpenAPI::fromJsonValue(m_cryorecovery, json[QString("cryorecovery")]);
    m_cryorecovery_isSet = !json[QString("cryorecovery")].isNull() && m_cryorecovery_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_live_animals_isValid = ::OpenAPI::fromJsonValue(m_live_animals, json[QString("liveAnimals")]);
    m_live_animals_isSet = !json[QString("liveAnimals")].isNull() && m_live_animals_isValid;

    m_status_date_isValid = ::OpenAPI::fromJsonValue(m_status_date, json[QString("statusDate")]);
    m_status_date_isSet = !json[QString("statusDate")].isNull() && m_status_date_isValid;

    m_strain_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_strain_rgd_id, json[QString("strainRgdId")]);
    m_strain_rgd_id_isSet = !json[QString("strainRgdId")].isNull() && m_strain_rgd_id_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_cryopreserved_embryo_isSet) {
        obj.insert(QString("cryopreservedEmbryo"), ::OpenAPI::toJsonValue(m_cryopreserved_embryo));
    }
    if (m_cryopreserved_sperm_isSet) {
        obj.insert(QString("cryopreservedSperm"), ::OpenAPI::toJsonValue(m_cryopreserved_sperm));
    }
    if (m_cryorecovery_isSet) {
        obj.insert(QString("cryorecovery"), ::OpenAPI::toJsonValue(m_cryorecovery));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_live_animals_isSet) {
        obj.insert(QString("liveAnimals"), ::OpenAPI::toJsonValue(m_live_animals));
    }
    if (m_status_date_isSet) {
        obj.insert(QString("statusDate"), ::OpenAPI::toJsonValue(m_status_date));
    }
    if (m_strain_rgd_id_isSet) {
        obj.insert(QString("strainRgdId"), ::OpenAPI::toJsonValue(m_strain_rgd_id));
    }
    return obj;
}

bool OAIStatus::isCryopreservedEmbryo() const {
    return m_cryopreserved_embryo;
}
void OAIStatus::setCryopreservedEmbryo(const bool &cryopreserved_embryo) {
    m_cryopreserved_embryo = cryopreserved_embryo;
    m_cryopreserved_embryo_isSet = true;
}

bool OAIStatus::is_cryopreserved_embryo_Set() const{
    return m_cryopreserved_embryo_isSet;
}

bool OAIStatus::is_cryopreserved_embryo_Valid() const{
    return m_cryopreserved_embryo_isValid;
}

bool OAIStatus::isCryopreservedSperm() const {
    return m_cryopreserved_sperm;
}
void OAIStatus::setCryopreservedSperm(const bool &cryopreserved_sperm) {
    m_cryopreserved_sperm = cryopreserved_sperm;
    m_cryopreserved_sperm_isSet = true;
}

bool OAIStatus::is_cryopreserved_sperm_Set() const{
    return m_cryopreserved_sperm_isSet;
}

bool OAIStatus::is_cryopreserved_sperm_Valid() const{
    return m_cryopreserved_sperm_isValid;
}

bool OAIStatus::isCryorecovery() const {
    return m_cryorecovery;
}
void OAIStatus::setCryorecovery(const bool &cryorecovery) {
    m_cryorecovery = cryorecovery;
    m_cryorecovery_isSet = true;
}

bool OAIStatus::is_cryorecovery_Set() const{
    return m_cryorecovery_isSet;
}

bool OAIStatus::is_cryorecovery_Valid() const{
    return m_cryorecovery_isValid;
}

qint32 OAIStatus::getKey() const {
    return m_key;
}
void OAIStatus::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIStatus::is_key_Set() const{
    return m_key_isSet;
}

bool OAIStatus::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIStatus::isLiveAnimals() const {
    return m_live_animals;
}
void OAIStatus::setLiveAnimals(const bool &live_animals) {
    m_live_animals = live_animals;
    m_live_animals_isSet = true;
}

bool OAIStatus::is_live_animals_Set() const{
    return m_live_animals_isSet;
}

bool OAIStatus::is_live_animals_Valid() const{
    return m_live_animals_isValid;
}

QDateTime OAIStatus::getStatusDate() const {
    return m_status_date;
}
void OAIStatus::setStatusDate(const QDateTime &status_date) {
    m_status_date = status_date;
    m_status_date_isSet = true;
}

bool OAIStatus::is_status_date_Set() const{
    return m_status_date_isSet;
}

bool OAIStatus::is_status_date_Valid() const{
    return m_status_date_isValid;
}

qint32 OAIStatus::getStrainRgdId() const {
    return m_strain_rgd_id;
}
void OAIStatus::setStrainRgdId(const qint32 &strain_rgd_id) {
    m_strain_rgd_id = strain_rgd_id;
    m_strain_rgd_id_isSet = true;
}

bool OAIStatus::is_strain_rgd_id_Set() const{
    return m_strain_rgd_id_isSet;
}

bool OAIStatus::is_strain_rgd_id_Valid() const{
    return m_strain_rgd_id_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cryopreserved_embryo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cryopreserved_sperm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cryorecovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_animals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strain_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
