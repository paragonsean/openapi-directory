/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnrichmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnrichmentRequest::OAIEnrichmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnrichmentRequest::OAIEnrichmentRequest() {
    this->initializeModel();
}

OAIEnrichmentRequest::~OAIEnrichmentRequest() {}

void OAIEnrichmentRequest::initializeModel() {

    m_aspect_isSet = false;
    m_aspect_isValid = false;

    m_genes_isSet = false;
    m_genes_isValid = false;

    m_species_isSet = false;
    m_species_isValid = false;
}

void OAIEnrichmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnrichmentRequest::fromJsonObject(QJsonObject json) {

    m_aspect_isValid = ::OpenAPI::fromJsonValue(m_aspect, json[QString("aspect")]);
    m_aspect_isSet = !json[QString("aspect")].isNull() && m_aspect_isValid;

    m_genes_isValid = ::OpenAPI::fromJsonValue(m_genes, json[QString("genes")]);
    m_genes_isSet = !json[QString("genes")].isNull() && m_genes_isValid;

    m_species_isValid = ::OpenAPI::fromJsonValue(m_species, json[QString("species")]);
    m_species_isSet = !json[QString("species")].isNull() && m_species_isValid;
}

QString OAIEnrichmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnrichmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_isSet) {
        obj.insert(QString("aspect"), ::OpenAPI::toJsonValue(m_aspect));
    }
    if (m_genes.size() > 0) {
        obj.insert(QString("genes"), ::OpenAPI::toJsonValue(m_genes));
    }
    if (m_species_isSet) {
        obj.insert(QString("species"), ::OpenAPI::toJsonValue(m_species));
    }
    return obj;
}

QString OAIEnrichmentRequest::getAspect() const {
    return m_aspect;
}
void OAIEnrichmentRequest::setAspect(const QString &aspect) {
    m_aspect = aspect;
    m_aspect_isSet = true;
}

bool OAIEnrichmentRequest::is_aspect_Set() const{
    return m_aspect_isSet;
}

bool OAIEnrichmentRequest::is_aspect_Valid() const{
    return m_aspect_isValid;
}

QList<QString> OAIEnrichmentRequest::getGenes() const {
    return m_genes;
}
void OAIEnrichmentRequest::setGenes(const QList<QString> &genes) {
    m_genes = genes;
    m_genes_isSet = true;
}

bool OAIEnrichmentRequest::is_genes_Set() const{
    return m_genes_isSet;
}

bool OAIEnrichmentRequest::is_genes_Valid() const{
    return m_genes_isValid;
}

QString OAIEnrichmentRequest::getSpecies() const {
    return m_species;
}
void OAIEnrichmentRequest::setSpecies(const QString &species) {
    m_species = species;
    m_species_isSet = true;
}

bool OAIEnrichmentRequest::is_species_Set() const{
    return m_species_isSet;
}

bool OAIEnrichmentRequest::is_species_Valid() const{
    return m_species_isValid;
}

bool OAIEnrichmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnrichmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
