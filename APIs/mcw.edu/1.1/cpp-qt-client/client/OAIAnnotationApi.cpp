/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAnnotationApi::OAIAnnotationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAnnotationApi::~OAIAnnotationApi() {
}

void OAIAnnotationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//rest.rgd.mcw.edu/rgdws"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getAnnotationCountByAccIdAndObjectTypeUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationCountByAccIdAndObjectTypeUsingGET", 0);
    _serverConfigs.insert("getAnnotationCountByAccIdAndSpeciesUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationCountByAccIdAndSpeciesUsingGET", 0);
    _serverConfigs.insert("getAnnotationCountByAccIdUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationCountByAccIdUsingGET", 0);
    _serverConfigs.insert("getAnnotationsByAccIdAndRgdIdUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationsByAccIdAndRgdIdUsingGET", 0);
    _serverConfigs.insert("getAnnotationsByRgdIdAndOntologyUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationsByRgdIdAndOntologyUsingGET", 0);
    _serverConfigs.insert("getAnnotationsByRgdIdUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationsByRgdIdUsingGET", 0);
    _serverConfigs.insert("getAnnotationsUsingGET", defaultConf);
    _serverIndices.insert("getAnnotationsUsingGET", 0);
    _serverConfigs.insert("getAnnotationsUsingPOST", defaultConf);
    _serverIndices.insert("getAnnotationsUsingPOST", 0);
    _serverConfigs.insert("getAnnotsByRefrerenceUsingGET", defaultConf);
    _serverIndices.insert("getAnnotsByRefrerenceUsingGET", 0);
    _serverConfigs.insert("getTermAccIdsUsingGET", defaultConf);
    _serverIndices.insert("getTermAccIdsUsingGET", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAnnotationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAnnotationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAnnotationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAnnotationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAnnotationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAnnotationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAnnotationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAnnotationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAnnotationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAnnotationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAnnotationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAnnotationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAnnotationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAnnotationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAnnotationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAnnotationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAnnotationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAnnotationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAnnotationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAnnotationApi::getAnnotationCountByAccIdAndObjectTypeUsingGET(const QString &acc_id, const qint32 &species_type_key, const bool &include_children, const qint32 &object_type) {
    QString fullPath = QString(_serverConfigs["getAnnotationCountByAccIdAndObjectTypeUsingGET"][_serverIndices.value("getAnnotationCountByAccIdAndObjectTypeUsingGET")].URL()+"/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}/{objectType}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString include_childrenPathParam("{");
        include_childrenPathParam.append("includeChildren").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "includeChildren", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"includeChildren"+pathSuffix : pathPrefix;
        fullPath.replace(include_childrenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_children)));
    }
    
    {
        QString object_typePathParam("{");
        object_typePathParam.append("objectType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectType"+pathSuffix : pathPrefix;
        fullPath.replace(object_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationCountByAccIdAndObjectTypeUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationCountByAccIdAndObjectTypeUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationCountByAccIdAndObjectTypeUsingGETSignal(output);
        Q_EMIT getAnnotationCountByAccIdAndObjectTypeUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationCountByAccIdAndObjectTypeUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationCountByAccIdAndObjectTypeUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationCountByAccIdAndObjectTypeUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationCountByAccIdAndObjectTypeUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationCountByAccIdAndSpeciesUsingGET(const QString &acc_id, const qint32 &species_type_key, const bool &include_children) {
    QString fullPath = QString(_serverConfigs["getAnnotationCountByAccIdAndSpeciesUsingGET"][_serverIndices.value("getAnnotationCountByAccIdAndSpeciesUsingGET")].URL()+"/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString include_childrenPathParam("{");
        include_childrenPathParam.append("includeChildren").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "includeChildren", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"includeChildren"+pathSuffix : pathPrefix;
        fullPath.replace(include_childrenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_children)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationCountByAccIdAndSpeciesUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationCountByAccIdAndSpeciesUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationCountByAccIdAndSpeciesUsingGETSignal(output);
        Q_EMIT getAnnotationCountByAccIdAndSpeciesUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationCountByAccIdAndSpeciesUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationCountByAccIdAndSpeciesUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationCountByAccIdAndSpeciesUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationCountByAccIdAndSpeciesUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationCountByAccIdUsingGET(const QString &acc_id, const bool &include_children) {
    QString fullPath = QString(_serverConfigs["getAnnotationCountByAccIdUsingGET"][_serverIndices.value("getAnnotationCountByAccIdUsingGET")].URL()+"/annotations/count/{accId}/{includeChildren}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString include_childrenPathParam("{");
        include_childrenPathParam.append("includeChildren").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "includeChildren", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"includeChildren"+pathSuffix : pathPrefix;
        fullPath.replace(include_childrenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_children)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationCountByAccIdUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationCountByAccIdUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationCountByAccIdUsingGETSignal(output);
        Q_EMIT getAnnotationCountByAccIdUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationCountByAccIdUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationCountByAccIdUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationCountByAccIdUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationCountByAccIdUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationsByAccIdAndRgdIdUsingGET(const QString &acc_id, const qint32 &rgd_id) {
    QString fullPath = QString(_serverConfigs["getAnnotationsByAccIdAndRgdIdUsingGET"][_serverIndices.value("getAnnotationsByAccIdAndRgdIdUsingGET")].URL()+"/annotations/{accId}/{rgdId}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationsByAccIdAndRgdIdUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationsByAccIdAndRgdIdUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAnnotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAnnotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationsByAccIdAndRgdIdUsingGETSignal(output);
        Q_EMIT getAnnotationsByAccIdAndRgdIdUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationsByAccIdAndRgdIdUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationsByAccIdAndRgdIdUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationsByAccIdAndRgdIdUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationsByAccIdAndRgdIdUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationsByRgdIdAndOntologyUsingGET(const qint32 &rgd_id, const QString &ontology_prefix) {
    QString fullPath = QString(_serverConfigs["getAnnotationsByRgdIdAndOntologyUsingGET"][_serverIndices.value("getAnnotationsByRgdIdAndOntologyUsingGET")].URL()+"/annotations/rgdId/{rgdId}/{ontologyPrefix}");
    
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    
    {
        QString ontology_prefixPathParam("{");
        ontology_prefixPathParam.append("ontologyPrefix").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ontologyPrefix", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ontologyPrefix"+pathSuffix : pathPrefix;
        fullPath.replace(ontology_prefixPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ontology_prefix)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationsByRgdIdAndOntologyUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationsByRgdIdAndOntologyUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAnnotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAnnotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationsByRgdIdAndOntologyUsingGETSignal(output);
        Q_EMIT getAnnotationsByRgdIdAndOntologyUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationsByRgdIdAndOntologyUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationsByRgdIdAndOntologyUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationsByRgdIdAndOntologyUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationsByRgdIdAndOntologyUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationsByRgdIdUsingGET(const qint32 &rgd_id) {
    QString fullPath = QString(_serverConfigs["getAnnotationsByRgdIdUsingGET"][_serverIndices.value("getAnnotationsByRgdIdUsingGET")].URL()+"/annotations/rgdId/{rgdId}");
    
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationsByRgdIdUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationsByRgdIdUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAnnotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAnnotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationsByRgdIdUsingGETSignal(output);
        Q_EMIT getAnnotationsByRgdIdUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationsByRgdIdUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationsByRgdIdUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationsByRgdIdUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationsByRgdIdUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationsUsingGET(const QString &acc_id, const qint32 &species_type_key, const bool &include_children) {
    QString fullPath = QString(_serverConfigs["getAnnotationsUsingGET"][_serverIndices.value("getAnnotationsUsingGET")].URL()+"/annotations/{accId}/{speciesTypeKey}/{includeChildren}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString include_childrenPathParam("{");
        include_childrenPathParam.append("includeChildren").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "includeChildren", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"includeChildren"+pathSuffix : pathPrefix;
        fullPath.replace(include_childrenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_children)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationsUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationsUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAnnotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAnnotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationsUsingGETSignal(output);
        Q_EMIT getAnnotationsUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationsUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationsUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationsUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationsUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotationsUsingPOST(const ::OpenAPI::OptionalParam<OAIAnnotationRequest> &oai_annotation_request) {
    QString fullPath = QString(_serverConfigs["getAnnotationsUsingPOST"][_serverIndices.value("getAnnotationsUsingPOST")].URL()+"/annotations/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_annotation_request.hasValue()){

        
        QByteArray output = oai_annotation_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotationsUsingPOSTCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotationsUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAnnotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAnnotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationsUsingPOSTSignal(output);
        Q_EMIT getAnnotationsUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationsUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationsUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationsUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationsUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getAnnotsByRefrerenceUsingGET(const qint32 &ref_rgd_id) {
    QString fullPath = QString(_serverConfigs["getAnnotsByRefrerenceUsingGET"][_serverIndices.value("getAnnotsByRefrerenceUsingGET")].URL()+"/annotations/reference/{refRgdId}");
    
    
    {
        QString ref_rgd_idPathParam("{");
        ref_rgd_idPathParam.append("refRgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "refRgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"refRgdId"+pathSuffix : pathPrefix;
        fullPath.replace(ref_rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ref_rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getAnnotsByRefrerenceUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getAnnotsByRefrerenceUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAnnotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAnnotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotsByRefrerenceUsingGETSignal(output);
        Q_EMIT getAnnotsByRefrerenceUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotsByRefrerenceUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAnnotsByRefrerenceUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotsByRefrerenceUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAnnotsByRefrerenceUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::getTermAccIdsUsingGET(const qint32 &rgd_id) {
    QString fullPath = QString(_serverConfigs["getTermAccIdsUsingGET"][_serverIndices.value("getTermAccIdsUsingGET")].URL()+"/annotations/accId/{rgdId}");
    
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnnotationApi::getTermAccIdsUsingGETCallback);
    connect(this, &OAIAnnotationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnnotationApi::getTermAccIdsUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMapPair> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMapPair val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTermAccIdsUsingGETSignal(output);
        Q_EMIT getTermAccIdsUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTermAccIdsUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getTermAccIdsUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTermAccIdsUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getTermAccIdsUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnnotationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
