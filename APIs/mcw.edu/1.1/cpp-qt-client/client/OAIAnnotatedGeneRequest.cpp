/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotatedGeneRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotatedGeneRequest::OAIAnnotatedGeneRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotatedGeneRequest::OAIAnnotatedGeneRequest() {
    this->initializeModel();
}

OAIAnnotatedGeneRequest::~OAIAnnotatedGeneRequest() {}

void OAIAnnotatedGeneRequest::initializeModel() {

    m_acc_id_isSet = false;
    m_acc_id_isValid = false;

    m_evidence_codes_isSet = false;
    m_evidence_codes_isValid = false;

    m_species_type_keys_isSet = false;
    m_species_type_keys_isValid = false;
}

void OAIAnnotatedGeneRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotatedGeneRequest::fromJsonObject(QJsonObject json) {

    m_acc_id_isValid = ::OpenAPI::fromJsonValue(m_acc_id, json[QString("accId")]);
    m_acc_id_isSet = !json[QString("accId")].isNull() && m_acc_id_isValid;

    m_evidence_codes_isValid = ::OpenAPI::fromJsonValue(m_evidence_codes, json[QString("evidenceCodes")]);
    m_evidence_codes_isSet = !json[QString("evidenceCodes")].isNull() && m_evidence_codes_isValid;

    m_species_type_keys_isValid = ::OpenAPI::fromJsonValue(m_species_type_keys, json[QString("speciesTypeKeys")]);
    m_species_type_keys_isSet = !json[QString("speciesTypeKeys")].isNull() && m_species_type_keys_isValid;
}

QString OAIAnnotatedGeneRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotatedGeneRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_acc_id_isSet) {
        obj.insert(QString("accId"), ::OpenAPI::toJsonValue(m_acc_id));
    }
    if (m_evidence_codes.size() > 0) {
        obj.insert(QString("evidenceCodes"), ::OpenAPI::toJsonValue(m_evidence_codes));
    }
    if (m_species_type_keys.size() > 0) {
        obj.insert(QString("speciesTypeKeys"), ::OpenAPI::toJsonValue(m_species_type_keys));
    }
    return obj;
}

QString OAIAnnotatedGeneRequest::getAccId() const {
    return m_acc_id;
}
void OAIAnnotatedGeneRequest::setAccId(const QString &acc_id) {
    m_acc_id = acc_id;
    m_acc_id_isSet = true;
}

bool OAIAnnotatedGeneRequest::is_acc_id_Set() const{
    return m_acc_id_isSet;
}

bool OAIAnnotatedGeneRequest::is_acc_id_Valid() const{
    return m_acc_id_isValid;
}

QList<QString> OAIAnnotatedGeneRequest::getEvidenceCodes() const {
    return m_evidence_codes;
}
void OAIAnnotatedGeneRequest::setEvidenceCodes(const QList<QString> &evidence_codes) {
    m_evidence_codes = evidence_codes;
    m_evidence_codes_isSet = true;
}

bool OAIAnnotatedGeneRequest::is_evidence_codes_Set() const{
    return m_evidence_codes_isSet;
}

bool OAIAnnotatedGeneRequest::is_evidence_codes_Valid() const{
    return m_evidence_codes_isValid;
}

QList<qint32> OAIAnnotatedGeneRequest::getSpeciesTypeKeys() const {
    return m_species_type_keys;
}
void OAIAnnotatedGeneRequest::setSpeciesTypeKeys(const QList<qint32> &species_type_keys) {
    m_species_type_keys = species_type_keys;
    m_species_type_keys_isSet = true;
}

bool OAIAnnotatedGeneRequest::is_species_type_keys_Set() const{
    return m_species_type_keys_isSet;
}

bool OAIAnnotatedGeneRequest::is_species_type_keys_Valid() const{
    return m_species_type_keys_isValid;
}

bool OAIAnnotatedGeneRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotatedGeneRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
