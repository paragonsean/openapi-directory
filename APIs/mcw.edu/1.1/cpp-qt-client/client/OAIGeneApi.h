/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneApi_H
#define OAI_OAIGeneApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnnotatedGeneRequest.h"
#include "OAIGene.h"
#include "OAIMappedGene.h"
#include "OAIMappedGenePosition.h"
#include "OAIOrthologRequest.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneApi : public QObject {
    Q_OBJECT

public:
    OAIGeneApi(const int timeOut = 0);
    ~OAIGeneApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  acc_id QString [required]
    */
    virtual void getAllAnnotatedGenesUsingGET(const QString &acc_id);

    /**
    * @param[in]  oai_annotated_gene_request OAIAnnotatedGeneRequest [optional]
    */
    virtual void getAnnotatedGenesUsingPOST(const ::OpenAPI::OptionalParam<OAIAnnotatedGeneRequest> &oai_annotated_gene_request = ::OpenAPI::OptionalParam<OAIAnnotatedGeneRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getGeneAllelesUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  map_key qint32 [required]
    */
    virtual void getGeneByMapKeyUsingGET(const qint32 &map_key);

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getGeneByRgdIdUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  symbol QString [required]
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getGeneBySymbolUsingGET(const QString &symbol, const qint32 &species_type_key);

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getGeneOrthologsUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  acc_id QString [required]
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getGenesAnnotatedUsingGET(const QString &acc_id, const qint32 &species_type_key);

    /**
    * @param[in]  affy_id QString [required]
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getGenesByAffyIdUsingGET(const QString &affy_id, const qint32 &species_type_key);

    /**
    * @param[in]  alias_symbol QString [required]
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getGenesByAliasSymbolUsingGET(const QString &alias_symbol, const qint32 &species_type_key);

    /**
    * @param[in]  keyword QString [required]
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getGenesByKeywordUsingGET(const QString &keyword, const qint32 &species_type_key);

    /**
    * @param[in]  chr QString [required]
    * @param[in]  start qint64 [required]
    * @param[in]  stop qint64 [required]
    * @param[in]  map_key qint32 [required]
    */
    virtual void getGenesByPositionUsingGET(const QString &chr, const qint64 &start, const qint64 &stop, const qint32 &map_key);

    /**
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getGenesBySpeciesUsingGET(const qint32 &species_type_key);

    /**
    * @param[in]  chr QString [required]
    * @param[in]  start qint64 [required]
    * @param[in]  stop qint64 [required]
    * @param[in]  map_key qint32 [required]
    */
    virtual void getGenesInRegionUsingGET(const QString &chr, const qint64 &start, const qint64 &stop, const qint32 &map_key);

    /**
    * @param[in]  chr QString [required]
    * @param[in]  start qint64 [required]
    * @param[in]  stop qint64 [required]
    * @param[in]  map_key qint32 [required]
    */
    virtual void getMappedGenesByPositionUsingGET(const QString &chr, const qint64 &start, const qint64 &stop, const qint32 &map_key);

    /**
    * @param[in]  oai_ortholog_request OAIOrthologRequest [required]
    */
    virtual void getOrthologsByListUsingPOST(const OAIOrthologRequest &oai_ortholog_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllAnnotatedGenesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotatedGenesUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getGeneAllelesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGeneByMapKeyUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGeneByRgdIdUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGeneBySymbolUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGeneOrthologsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesAnnotatedUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesByAffyIdUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesByAliasSymbolUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesByKeywordUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesByPositionUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesBySpeciesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesInRegionUsingGETCallback(OAIHttpRequestWorker *worker);
    void getMappedGenesByPositionUsingGETCallback(OAIHttpRequestWorker *worker);
    void getOrthologsByListUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllAnnotatedGenesUsingGETSignal(QList<OAIGene> summary);
    void getAnnotatedGenesUsingPOSTSignal(QList<OAIGene> summary);
    void getGeneAllelesUsingGETSignal(QList<OAIGene> summary);
    void getGeneByMapKeyUsingGETSignal(QList<OAIMappedGene> summary);
    void getGeneByRgdIdUsingGETSignal(OAIGene summary);
    void getGeneBySymbolUsingGETSignal(OAIGene summary);
    void getGeneOrthologsUsingGETSignal(QList<OAIGene> summary);
    void getGenesAnnotatedUsingGETSignal(QList<OAIGene> summary);
    void getGenesByAffyIdUsingGETSignal(QList<OAIGene> summary);
    void getGenesByAliasSymbolUsingGETSignal(QList<OAIGene> summary);
    void getGenesByKeywordUsingGETSignal(QList<OAIGene> summary);
    void getGenesByPositionUsingGETSignal(QList<OAIGene> summary);
    void getGenesBySpeciesUsingGETSignal(QList<OAIGene> summary);
    void getGenesInRegionUsingGETSignal(QList<OAIMappedGenePosition> summary);
    void getMappedGenesByPositionUsingGETSignal(QList<OAIMappedGene> summary);
    void getOrthologsByListUsingPOSTSignal(QMap<QString, QList<OAIGene>> summary);


    void getAllAnnotatedGenesUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getAnnotatedGenesUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGeneAllelesUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGeneByMapKeyUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIMappedGene> summary);
    void getGeneByRgdIdUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGene summary);
    void getGeneBySymbolUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGene summary);
    void getGeneOrthologsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesAnnotatedUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesByAffyIdUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesByAliasSymbolUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesByKeywordUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesByPositionUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesBySpeciesUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIGene> summary);
    void getGenesInRegionUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIMappedGenePosition> summary);
    void getMappedGenesByPositionUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIMappedGene> summary);
    void getOrthologsByListUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<OAIGene>> summary);

    Q_DECL_DEPRECATED_X("Use getAllAnnotatedGenesUsingGETSignalError() instead")
    void getAllAnnotatedGenesUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAnnotatedGenesUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotatedGenesUsingPOSTSignalError() instead")
    void getAnnotatedGenesUsingPOSTSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotatedGenesUsingPOSTSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneAllelesUsingGETSignalError() instead")
    void getGeneAllelesUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneAllelesUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneByMapKeyUsingGETSignalError() instead")
    void getGeneByMapKeyUsingGETSignalE(QList<OAIMappedGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneByMapKeyUsingGETSignalError(QList<OAIMappedGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneByRgdIdUsingGETSignalError() instead")
    void getGeneByRgdIdUsingGETSignalE(OAIGene summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneByRgdIdUsingGETSignalError(OAIGene summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneBySymbolUsingGETSignalError() instead")
    void getGeneBySymbolUsingGETSignalE(OAIGene summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneBySymbolUsingGETSignalError(OAIGene summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneOrthologsUsingGETSignalError() instead")
    void getGeneOrthologsUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneOrthologsUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesAnnotatedUsingGETSignalError() instead")
    void getGenesAnnotatedUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesAnnotatedUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByAffyIdUsingGETSignalError() instead")
    void getGenesByAffyIdUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByAffyIdUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByAliasSymbolUsingGETSignalError() instead")
    void getGenesByAliasSymbolUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByAliasSymbolUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByKeywordUsingGETSignalError() instead")
    void getGenesByKeywordUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByKeywordUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByPositionUsingGETSignalError() instead")
    void getGenesByPositionUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByPositionUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesBySpeciesUsingGETSignalError() instead")
    void getGenesBySpeciesUsingGETSignalE(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesBySpeciesUsingGETSignalError(QList<OAIGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesInRegionUsingGETSignalError() instead")
    void getGenesInRegionUsingGETSignalE(QList<OAIMappedGenePosition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesInRegionUsingGETSignalError(QList<OAIMappedGenePosition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMappedGenesByPositionUsingGETSignalError() instead")
    void getMappedGenesByPositionUsingGETSignalE(QList<OAIMappedGene> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMappedGenesByPositionUsingGETSignalError(QList<OAIMappedGene> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrthologsByListUsingPOSTSignalError() instead")
    void getOrthologsByListUsingPOSTSignalE(QMap<QString, QList<OAIGene>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrthologsByListUsingPOSTSignalError(QMap<QString, QList<OAIGene>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllAnnotatedGenesUsingGETSignalErrorFull() instead")
    void getAllAnnotatedGenesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAnnotatedGenesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotatedGenesUsingPOSTSignalErrorFull() instead")
    void getAnnotatedGenesUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotatedGenesUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneAllelesUsingGETSignalErrorFull() instead")
    void getGeneAllelesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneAllelesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneByMapKeyUsingGETSignalErrorFull() instead")
    void getGeneByMapKeyUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneByMapKeyUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneByRgdIdUsingGETSignalErrorFull() instead")
    void getGeneByRgdIdUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneByRgdIdUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneBySymbolUsingGETSignalErrorFull() instead")
    void getGeneBySymbolUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneBySymbolUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneOrthologsUsingGETSignalErrorFull() instead")
    void getGeneOrthologsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneOrthologsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesAnnotatedUsingGETSignalErrorFull() instead")
    void getGenesAnnotatedUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesAnnotatedUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByAffyIdUsingGETSignalErrorFull() instead")
    void getGenesByAffyIdUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByAffyIdUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByAliasSymbolUsingGETSignalErrorFull() instead")
    void getGenesByAliasSymbolUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByAliasSymbolUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByKeywordUsingGETSignalErrorFull() instead")
    void getGenesByKeywordUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByKeywordUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesByPositionUsingGETSignalErrorFull() instead")
    void getGenesByPositionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesByPositionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesBySpeciesUsingGETSignalErrorFull() instead")
    void getGenesBySpeciesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesBySpeciesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesInRegionUsingGETSignalErrorFull() instead")
    void getGenesInRegionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesInRegionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMappedGenesByPositionUsingGETSignalErrorFull() instead")
    void getMappedGenesByPositionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMappedGenesByPositionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrthologsByListUsingPOSTSignalErrorFull() instead")
    void getOrthologsByListUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrthologsByListUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
