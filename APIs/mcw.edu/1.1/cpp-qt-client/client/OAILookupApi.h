/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILookupApi_H
#define OAI_OAILookupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMap.h"
#include "OAIObject.h"
#include "OAIRGDIDListRequest.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILookupApi : public QObject {
    Q_OBJECT

public:
    OAILookupApi(const int timeOut = 0);
    ~OAILookupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getEnsemblGeneMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getEnsemblGeneMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getEnsemblProteinMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getEnsemblProteinMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getEnsemblTranscriptMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getEnsemblTranscriptMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getGTEXMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getGTEXMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getGenBankNucleotideMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getGenBankNucleotideMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getGenBankProteinMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getGenBankProteinMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());


    virtual void getGeneTypesUsingGET();

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getHGNCMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getHGNCMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getMGIMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getMGIMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());

    /**
    * @param[in]  species_type_key qint32 [required]
    */
    virtual void getMapsUsingGET(const qint32 &species_type_key);

    /**
    * @param[in]  acc_id QString [required]
    */
    virtual void getMapsUsingGET1(const QString &acc_id);

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getNCBIGeneMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getNCBIGeneMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());


    virtual void getSpeciesTypesUsingGET();

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getUniProtMappingUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  oairgdid_list_request OAIRGDIDListRequest [optional]
    */
    virtual void getUniProtMappingUsingPOST(const ::OpenAPI::OptionalParam<OAIRGDIDListRequest> &oairgdid_list_request = ::OpenAPI::OptionalParam<OAIRGDIDListRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEnsemblGeneMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getEnsemblGeneMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getEnsemblProteinMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getEnsemblProteinMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getEnsemblTranscriptMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getEnsemblTranscriptMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getGTEXMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGTEXMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getGenBankNucleotideMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenBankNucleotideMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getGenBankProteinMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenBankProteinMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getGeneTypesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getHGNCMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getHGNCMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getMGIMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getMGIMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getMapsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getMapsUsingGET1Callback(OAIHttpRequestWorker *worker);
    void getNCBIGeneMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getNCBIGeneMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getSpeciesTypesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getUniProtMappingUsingGETCallback(OAIHttpRequestWorker *worker);
    void getUniProtMappingUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEnsemblGeneMappingUsingGETSignal(QMap<QString, QString> summary);
    void getEnsemblGeneMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getEnsemblProteinMappingUsingGETSignal(QMap<QString, QString> summary);
    void getEnsemblProteinMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getEnsemblTranscriptMappingUsingGETSignal(QMap<QString, QString> summary);
    void getEnsemblTranscriptMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getGTEXMappingUsingGETSignal(QMap<QString, QString> summary);
    void getGTEXMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getGenBankNucleotideMappingUsingGETSignal(QMap<QString, QString> summary);
    void getGenBankNucleotideMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getGenBankProteinMappingUsingGETSignal(QMap<QString, QString> summary);
    void getGenBankProteinMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getGeneTypesUsingGETSignal(QList<QString> summary);
    void getHGNCMappingUsingGETSignal(QMap<QString, QString> summary);
    void getHGNCMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getMGIMappingUsingGETSignal(QMap<QString, QString> summary);
    void getMGIMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getMapsUsingGETSignal(QList<OAIMap> summary);
    void getMapsUsingGET1Signal(QString summary);
    void getNCBIGeneMappingUsingGETSignal(QMap<QString, QString> summary);
    void getNCBIGeneMappingUsingPOSTSignal(QMap<QString, QString> summary);
    void getSpeciesTypesUsingGETSignal(OAIObject summary);
    void getUniProtMappingUsingGETSignal(QMap<QString, QString> summary);
    void getUniProtMappingUsingPOSTSignal(QMap<QString, QString> summary);


    void getEnsemblGeneMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getEnsemblGeneMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getEnsemblProteinMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getEnsemblProteinMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getEnsemblTranscriptMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getEnsemblTranscriptMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGTEXMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGTEXMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGenBankNucleotideMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGenBankNucleotideMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGenBankProteinMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGenBankProteinMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGeneTypesUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getHGNCMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getHGNCMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getMGIMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getMGIMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getMapsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIMap> summary);
    void getMapsUsingGET1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getNCBIGeneMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getNCBIGeneMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getSpeciesTypesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getUniProtMappingUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getUniProtMappingUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);

    Q_DECL_DEPRECATED_X("Use getEnsemblGeneMappingUsingGETSignalError() instead")
    void getEnsemblGeneMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblGeneMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblGeneMappingUsingPOSTSignalError() instead")
    void getEnsemblGeneMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblGeneMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblProteinMappingUsingGETSignalError() instead")
    void getEnsemblProteinMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblProteinMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblProteinMappingUsingPOSTSignalError() instead")
    void getEnsemblProteinMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblProteinMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblTranscriptMappingUsingGETSignalError() instead")
    void getEnsemblTranscriptMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblTranscriptMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblTranscriptMappingUsingPOSTSignalError() instead")
    void getEnsemblTranscriptMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblTranscriptMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGTEXMappingUsingGETSignalError() instead")
    void getGTEXMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGTEXMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGTEXMappingUsingPOSTSignalError() instead")
    void getGTEXMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGTEXMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankNucleotideMappingUsingGETSignalError() instead")
    void getGenBankNucleotideMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankNucleotideMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankNucleotideMappingUsingPOSTSignalError() instead")
    void getGenBankNucleotideMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankNucleotideMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankProteinMappingUsingGETSignalError() instead")
    void getGenBankProteinMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankProteinMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankProteinMappingUsingPOSTSignalError() instead")
    void getGenBankProteinMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankProteinMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneTypesUsingGETSignalError() instead")
    void getGeneTypesUsingGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneTypesUsingGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHGNCMappingUsingGETSignalError() instead")
    void getHGNCMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHGNCMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHGNCMappingUsingPOSTSignalError() instead")
    void getHGNCMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHGNCMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMGIMappingUsingGETSignalError() instead")
    void getMGIMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMGIMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMGIMappingUsingPOSTSignalError() instead")
    void getMGIMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMGIMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMapsUsingGETSignalError() instead")
    void getMapsUsingGETSignalE(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMapsUsingGETSignalError(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMapsUsingGET1SignalError() instead")
    void getMapsUsingGET1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMapsUsingGET1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNCBIGeneMappingUsingGETSignalError() instead")
    void getNCBIGeneMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNCBIGeneMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNCBIGeneMappingUsingPOSTSignalError() instead")
    void getNCBIGeneMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNCBIGeneMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpeciesTypesUsingGETSignalError() instead")
    void getSpeciesTypesUsingGETSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpeciesTypesUsingGETSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniProtMappingUsingGETSignalError() instead")
    void getUniProtMappingUsingGETSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniProtMappingUsingGETSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniProtMappingUsingPOSTSignalError() instead")
    void getUniProtMappingUsingPOSTSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniProtMappingUsingPOSTSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEnsemblGeneMappingUsingGETSignalErrorFull() instead")
    void getEnsemblGeneMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblGeneMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblGeneMappingUsingPOSTSignalErrorFull() instead")
    void getEnsemblGeneMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblGeneMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblProteinMappingUsingGETSignalErrorFull() instead")
    void getEnsemblProteinMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblProteinMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblProteinMappingUsingPOSTSignalErrorFull() instead")
    void getEnsemblProteinMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblProteinMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblTranscriptMappingUsingGETSignalErrorFull() instead")
    void getEnsemblTranscriptMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblTranscriptMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnsemblTranscriptMappingUsingPOSTSignalErrorFull() instead")
    void getEnsemblTranscriptMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnsemblTranscriptMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGTEXMappingUsingGETSignalErrorFull() instead")
    void getGTEXMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGTEXMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGTEXMappingUsingPOSTSignalErrorFull() instead")
    void getGTEXMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGTEXMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankNucleotideMappingUsingGETSignalErrorFull() instead")
    void getGenBankNucleotideMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankNucleotideMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankNucleotideMappingUsingPOSTSignalErrorFull() instead")
    void getGenBankNucleotideMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankNucleotideMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankProteinMappingUsingGETSignalErrorFull() instead")
    void getGenBankProteinMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankProteinMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenBankProteinMappingUsingPOSTSignalErrorFull() instead")
    void getGenBankProteinMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenBankProteinMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneTypesUsingGETSignalErrorFull() instead")
    void getGeneTypesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneTypesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHGNCMappingUsingGETSignalErrorFull() instead")
    void getHGNCMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHGNCMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHGNCMappingUsingPOSTSignalErrorFull() instead")
    void getHGNCMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHGNCMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMGIMappingUsingGETSignalErrorFull() instead")
    void getMGIMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMGIMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMGIMappingUsingPOSTSignalErrorFull() instead")
    void getMGIMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMGIMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMapsUsingGETSignalErrorFull() instead")
    void getMapsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMapsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMapsUsingGET1SignalErrorFull() instead")
    void getMapsUsingGET1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMapsUsingGET1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNCBIGeneMappingUsingGETSignalErrorFull() instead")
    void getNCBIGeneMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNCBIGeneMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNCBIGeneMappingUsingPOSTSignalErrorFull() instead")
    void getNCBIGeneMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNCBIGeneMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpeciesTypesUsingGETSignalErrorFull() instead")
    void getSpeciesTypesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpeciesTypesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniProtMappingUsingGETSignalErrorFull() instead")
    void getUniProtMappingUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniProtMappingUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniProtMappingUsingPOSTSignalErrorFull() instead")
    void getUniProtMappingUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniProtMappingUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
