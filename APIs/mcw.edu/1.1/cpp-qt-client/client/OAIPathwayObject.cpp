/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathwayObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathwayObject::OAIPathwayObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathwayObject::OAIPathwayObject() {
    this->initializeModel();
}

OAIPathwayObject::~OAIPathwayObject() {}

void OAIPathwayObject::initializeModel() {

    m_acc_id_isSet = false;
    m_acc_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_obj_desc_isSet = false;
    m_obj_desc_isValid = false;

    m_obj_name_isSet = false;
    m_obj_name_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_xdb_key_isSet = false;
    m_xdb_key_isValid = false;
}

void OAIPathwayObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathwayObject::fromJsonObject(QJsonObject json) {

    m_acc_id_isValid = ::OpenAPI::fromJsonValue(m_acc_id, json[QString("accId")]);
    m_acc_id_isSet = !json[QString("accId")].isNull() && m_acc_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_obj_desc_isValid = ::OpenAPI::fromJsonValue(m_obj_desc, json[QString("objDesc")]);
    m_obj_desc_isSet = !json[QString("objDesc")].isNull() && m_obj_desc_isValid;

    m_obj_name_isValid = ::OpenAPI::fromJsonValue(m_obj_name, json[QString("objName")]);
    m_obj_name_isSet = !json[QString("objName")].isNull() && m_obj_name_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_xdb_key_isValid = ::OpenAPI::fromJsonValue(m_xdb_key, json[QString("xdb_key")]);
    m_xdb_key_isSet = !json[QString("xdb_key")].isNull() && m_xdb_key_isValid;
}

QString OAIPathwayObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathwayObject::asJsonObject() const {
    QJsonObject obj;
    if (m_acc_id_isSet) {
        obj.insert(QString("accId"), ::OpenAPI::toJsonValue(m_acc_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_obj_desc_isSet) {
        obj.insert(QString("objDesc"), ::OpenAPI::toJsonValue(m_obj_desc));
    }
    if (m_obj_name_isSet) {
        obj.insert(QString("objName"), ::OpenAPI::toJsonValue(m_obj_name));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_xdb_key_isSet) {
        obj.insert(QString("xdb_key"), ::OpenAPI::toJsonValue(m_xdb_key));
    }
    return obj;
}

QString OAIPathwayObject::getAccId() const {
    return m_acc_id;
}
void OAIPathwayObject::setAccId(const QString &acc_id) {
    m_acc_id = acc_id;
    m_acc_id_isSet = true;
}

bool OAIPathwayObject::is_acc_id_Set() const{
    return m_acc_id_isSet;
}

bool OAIPathwayObject::is_acc_id_Valid() const{
    return m_acc_id_isValid;
}

QString OAIPathwayObject::getId() const {
    return m_id;
}
void OAIPathwayObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPathwayObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPathwayObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPathwayObject::getObjDesc() const {
    return m_obj_desc;
}
void OAIPathwayObject::setObjDesc(const QString &obj_desc) {
    m_obj_desc = obj_desc;
    m_obj_desc_isSet = true;
}

bool OAIPathwayObject::is_obj_desc_Set() const{
    return m_obj_desc_isSet;
}

bool OAIPathwayObject::is_obj_desc_Valid() const{
    return m_obj_desc_isValid;
}

QString OAIPathwayObject::getObjName() const {
    return m_obj_name;
}
void OAIPathwayObject::setObjName(const QString &obj_name) {
    m_obj_name = obj_name;
    m_obj_name_isSet = true;
}

bool OAIPathwayObject::is_obj_name_Set() const{
    return m_obj_name_isSet;
}

bool OAIPathwayObject::is_obj_name_Valid() const{
    return m_obj_name_isValid;
}

qint32 OAIPathwayObject::getTypeId() const {
    return m_type_id;
}
void OAIPathwayObject::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIPathwayObject::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIPathwayObject::is_type_id_Valid() const{
    return m_type_id_isValid;
}

QString OAIPathwayObject::getTypeName() const {
    return m_type_name;
}
void OAIPathwayObject::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIPathwayObject::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIPathwayObject::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIPathwayObject::getUrl() const {
    return m_url;
}
void OAIPathwayObject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPathwayObject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPathwayObject::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIPathwayObject::getXdbKey() const {
    return m_xdb_key;
}
void OAIPathwayObject::setXdbKey(const qint32 &xdb_key) {
    m_xdb_key = xdb_key;
    m_xdb_key_isSet = true;
}

bool OAIPathwayObject::is_xdb_key_Set() const{
    return m_xdb_key_isSet;
}

bool OAIPathwayObject::is_xdb_key_Valid() const{
    return m_xdb_key_isValid;
}

bool OAIPathwayObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xdb_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathwayObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
