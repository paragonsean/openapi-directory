/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMap.h
 *
 * 
 */

#ifndef OAIMap_H
#define OAIMap_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMap : public OAIObject {
public:
    OAIMap();
    OAIMap(QString json);
    ~OAIMap() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbsnpVersion() const;
    void setDbsnpVersion(const QString &dbsnp_version);
    bool is_dbsnp_version_Set() const;
    bool is_dbsnp_version_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getKey() const;
    void setKey(const qint32 &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    qint32 getMethodKey() const;
    void setMethodKey(const qint32 &method_key);
    bool is_method_key_Set() const;
    bool is_method_key_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    bool isPrimaryRefAssembly() const;
    void setPrimaryRefAssembly(const bool &primary_ref_assembly);
    bool is_primary_ref_assembly_Set() const;
    bool is_primary_ref_assembly_Valid() const;

    qint32 getRank() const;
    void setRank(const qint32 &rank);
    bool is_rank_Set() const;
    bool is_rank_Valid() const;

    QString getRefSeqAssemblyAcc() const;
    void setRefSeqAssemblyAcc(const QString &ref_seq_assembly_acc);
    bool is_ref_seq_assembly_acc_Set() const;
    bool is_ref_seq_assembly_acc_Valid() const;

    QString getRefSeqAssemblyName() const;
    void setRefSeqAssemblyName(const QString &ref_seq_assembly_name);
    bool is_ref_seq_assembly_name_Set() const;
    bool is_ref_seq_assembly_name_Valid() const;

    qint32 getRgdId() const;
    void setRgdId(const qint32 &rgd_id);
    bool is_rgd_id_Set() const;
    bool is_rgd_id_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    qint32 getSpeciesTypeKey() const;
    void setSpeciesTypeKey(const qint32 &species_type_key);
    bool is_species_type_key_Set() const;
    bool is_species_type_key_Valid() const;

    QString getUcscAssemblyId() const;
    void setUcscAssemblyId(const QString &ucsc_assembly_id);
    bool is_ucsc_assembly_id_Set() const;
    bool is_ucsc_assembly_id_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dbsnp_version;
    bool m_dbsnp_version_isSet;
    bool m_dbsnp_version_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    qint32 m_method_key;
    bool m_method_key_isSet;
    bool m_method_key_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    bool m_primary_ref_assembly;
    bool m_primary_ref_assembly_isSet;
    bool m_primary_ref_assembly_isValid;

    qint32 m_rank;
    bool m_rank_isSet;
    bool m_rank_isValid;

    QString m_ref_seq_assembly_acc;
    bool m_ref_seq_assembly_acc_isSet;
    bool m_ref_seq_assembly_acc_isValid;

    QString m_ref_seq_assembly_name;
    bool m_ref_seq_assembly_name_isSet;
    bool m_ref_seq_assembly_name_isValid;

    qint32 m_rgd_id;
    bool m_rgd_id_isSet;
    bool m_rgd_id_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    qint32 m_species_type_key;
    bool m_species_type_key_isSet;
    bool m_species_type_key_isValid;

    QString m_ucsc_assembly_id;
    bool m_ucsc_assembly_id_isSet;
    bool m_ucsc_assembly_id_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMap)

#endif // OAIMap_H
