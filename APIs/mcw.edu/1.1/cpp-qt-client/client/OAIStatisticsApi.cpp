/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatisticsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIStatisticsApi::OAIStatisticsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIStatisticsApi::~OAIStatisticsApi() {
}

void OAIStatisticsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//rest.rgd.mcw.edu/rgdws"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getActiveObjectCountUsingGET", defaultConf);
    _serverIndices.insert("getActiveObjectCountUsingGET", 0);
    _serverConfigs.insert("getActiveObjectDiffUsingGET", defaultConf);
    _serverIndices.insert("getActiveObjectDiffUsingGET", 0);
    _serverConfigs.insert("getGeneTypeCountUsingGET", defaultConf);
    _serverIndices.insert("getGeneTypeCountUsingGET", 0);
    _serverConfigs.insert("getGeneTypeDiffUsingGET", defaultConf);
    _serverIndices.insert("getGeneTypeDiffUsingGET", 0);
    _serverConfigs.insert("getObjectStatusCountUsingGET", defaultConf);
    _serverIndices.insert("getObjectStatusCountUsingGET", 0);
    _serverConfigs.insert("getObjectStatusDiffUsingGET", defaultConf);
    _serverIndices.insert("getObjectStatusDiffUsingGET", 0);
    _serverConfigs.insert("getObjectsWithRefSeqCountUsingGET", defaultConf);
    _serverIndices.insert("getObjectsWithRefSeqCountUsingGET", 0);
    _serverConfigs.insert("getObjectsWithRefSeqDiffUsingGET", defaultConf);
    _serverIndices.insert("getObjectsWithRefSeqDiffUsingGET", 0);
    _serverConfigs.insert("getObjectsWithReferenceCountUsingGET", defaultConf);
    _serverIndices.insert("getObjectsWithReferenceCountUsingGET", 0);
    _serverConfigs.insert("getObjectsWithReferenceDiffUsingGET", defaultConf);
    _serverIndices.insert("getObjectsWithReferenceDiffUsingGET", 0);
    _serverConfigs.insert("getObjectsWithXDBsCountUsingGET", defaultConf);
    _serverIndices.insert("getObjectsWithXDBsCountUsingGET", 0);
    _serverConfigs.insert("getObjectsWithXDBsDiffUsingGET", defaultConf);
    _serverIndices.insert("getObjectsWithXDBsDiffUsingGET", 0);
    _serverConfigs.insert("getProteinInteractionCountUsingGET", defaultConf);
    _serverIndices.insert("getProteinInteractionCountUsingGET", 0);
    _serverConfigs.insert("getProteinInteractionDiffUsingGET", defaultConf);
    _serverIndices.insert("getProteinInteractionDiffUsingGET", 0);
    _serverConfigs.insert("getQtlInheritanceTypeCountUsingGET", defaultConf);
    _serverIndices.insert("getQtlInheritanceTypeCountUsingGET", 0);
    _serverConfigs.insert("getQtlInheritanceTypeDiffUsingGET", defaultConf);
    _serverIndices.insert("getQtlInheritanceTypeDiffUsingGET", 0);
    _serverConfigs.insert("getRetiredObjectCountUsingGET", defaultConf);
    _serverIndices.insert("getRetiredObjectCountUsingGET", 0);
    _serverConfigs.insert("getRetiredObjectDiffUsingGET", defaultConf);
    _serverIndices.insert("getRetiredObjectDiffUsingGET", 0);
    _serverConfigs.insert("getStrainTypeCountUsingGET", defaultConf);
    _serverIndices.insert("getStrainTypeCountUsingGET", 0);
    _serverConfigs.insert("getStrainTypeDiffUsingGET", defaultConf);
    _serverIndices.insert("getStrainTypeDiffUsingGET", 0);
    _serverConfigs.insert("getTermStatsUsingGET", defaultConf);
    _serverIndices.insert("getTermStatsUsingGET", 0);
    _serverConfigs.insert("getWithdrawnObjectCountUsingGET", defaultConf);
    _serverIndices.insert("getWithdrawnObjectCountUsingGET", 0);
    _serverConfigs.insert("getWithdrawnObjectDiffUsingGET", defaultConf);
    _serverIndices.insert("getWithdrawnObjectDiffUsingGET", 0);
    _serverConfigs.insert("getXdbsCountUsingGET", defaultConf);
    _serverIndices.insert("getXdbsCountUsingGET", 0);
    _serverConfigs.insert("getXdbsDiffUsingGET", defaultConf);
    _serverIndices.insert("getXdbsDiffUsingGET", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIStatisticsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIStatisticsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIStatisticsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIStatisticsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIStatisticsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIStatisticsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIStatisticsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIStatisticsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIStatisticsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIStatisticsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStatisticsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStatisticsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIStatisticsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIStatisticsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIStatisticsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIStatisticsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIStatisticsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIStatisticsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIStatisticsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIStatisticsApi::getActiveObjectCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getActiveObjectCountUsingGET"][_serverIndices.value("getActiveObjectCountUsingGET")].URL()+"/stats/count/activeObject/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getActiveObjectCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getActiveObjectCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getActiveObjectCountUsingGETSignal(output);
        Q_EMIT getActiveObjectCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getActiveObjectCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getActiveObjectCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getActiveObjectCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getActiveObjectCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getActiveObjectDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getActiveObjectDiffUsingGET"][_serverIndices.value("getActiveObjectDiffUsingGET")].URL()+"/stats/diff/activeObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getActiveObjectDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getActiveObjectDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getActiveObjectDiffUsingGETSignal(output);
        Q_EMIT getActiveObjectDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getActiveObjectDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getActiveObjectDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getActiveObjectDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getActiveObjectDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getGeneTypeCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getGeneTypeCountUsingGET"][_serverIndices.value("getGeneTypeCountUsingGET")].URL()+"/stats/count/geneType/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getGeneTypeCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getGeneTypeCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneTypeCountUsingGETSignal(output);
        Q_EMIT getGeneTypeCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneTypeCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneTypeCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneTypeCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneTypeCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getGeneTypeDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getGeneTypeDiffUsingGET"][_serverIndices.value("getGeneTypeDiffUsingGET")].URL()+"/stats/diff/geneType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getGeneTypeDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getGeneTypeDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneTypeDiffUsingGETSignal(output);
        Q_EMIT getGeneTypeDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneTypeDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneTypeDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneTypeDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneTypeDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectStatusCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectStatusCountUsingGET"][_serverIndices.value("getObjectStatusCountUsingGET")].URL()+"/stats/count/objectStatus/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectStatusCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectStatusCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectStatusCountUsingGETSignal(output);
        Q_EMIT getObjectStatusCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectStatusCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectStatusCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectStatusCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectStatusCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectStatusDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectStatusDiffUsingGET"][_serverIndices.value("getObjectStatusDiffUsingGET")].URL()+"/stats/diff/objectStatus/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectStatusDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectStatusDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectStatusDiffUsingGETSignal(output);
        Q_EMIT getObjectStatusDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectStatusDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectStatusDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectStatusDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectStatusDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectsWithRefSeqCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectsWithRefSeqCountUsingGET"][_serverIndices.value("getObjectsWithRefSeqCountUsingGET")].URL()+"/stats/count/objectWithRefSeq/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectsWithRefSeqCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectsWithRefSeqCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectsWithRefSeqCountUsingGETSignal(output);
        Q_EMIT getObjectsWithRefSeqCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectsWithRefSeqCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectsWithRefSeqCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectsWithRefSeqCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectsWithRefSeqCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectsWithRefSeqDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectsWithRefSeqDiffUsingGET"][_serverIndices.value("getObjectsWithRefSeqDiffUsingGET")].URL()+"/stats/diff/objectWithRefSeq/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectsWithRefSeqDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectsWithRefSeqDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectsWithRefSeqDiffUsingGETSignal(output);
        Q_EMIT getObjectsWithRefSeqDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectsWithRefSeqDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectsWithRefSeqDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectsWithRefSeqDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectsWithRefSeqDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectsWithReferenceCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectsWithReferenceCountUsingGET"][_serverIndices.value("getObjectsWithReferenceCountUsingGET")].URL()+"/stats/count/objectWithReference/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectsWithReferenceCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectsWithReferenceCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectsWithReferenceCountUsingGETSignal(output);
        Q_EMIT getObjectsWithReferenceCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectsWithReferenceCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectsWithReferenceCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectsWithReferenceCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectsWithReferenceCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectsWithReferenceDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectsWithReferenceDiffUsingGET"][_serverIndices.value("getObjectsWithReferenceDiffUsingGET")].URL()+"/stats/diff/objectWithReference/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectsWithReferenceDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectsWithReferenceDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectsWithReferenceDiffUsingGETSignal(output);
        Q_EMIT getObjectsWithReferenceDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectsWithReferenceDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectsWithReferenceDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectsWithReferenceDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectsWithReferenceDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectsWithXDBsCountUsingGET(const qint32 &species_type_key, const qint32 &object_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectsWithXDBsCountUsingGET"][_serverIndices.value("getObjectsWithXDBsCountUsingGET")].URL()+"/stats/count/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString object_keyPathParam("{");
        object_keyPathParam.append("objectKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectKey"+pathSuffix : pathPrefix;
        fullPath.replace(object_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectsWithXDBsCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectsWithXDBsCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectsWithXDBsCountUsingGETSignal(output);
        Q_EMIT getObjectsWithXDBsCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectsWithXDBsCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectsWithXDBsCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectsWithXDBsCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectsWithXDBsCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getObjectsWithXDBsDiffUsingGET(const qint32 &species_type_key, const qint32 &object_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getObjectsWithXDBsDiffUsingGET"][_serverIndices.value("getObjectsWithXDBsDiffUsingGET")].URL()+"/stats/diff/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString object_keyPathParam("{");
        object_keyPathParam.append("objectKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectKey"+pathSuffix : pathPrefix;
        fullPath.replace(object_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getObjectsWithXDBsDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getObjectsWithXDBsDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectsWithXDBsDiffUsingGETSignal(output);
        Q_EMIT getObjectsWithXDBsDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectsWithXDBsDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getObjectsWithXDBsDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectsWithXDBsDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getObjectsWithXDBsDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getProteinInteractionCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getProteinInteractionCountUsingGET"][_serverIndices.value("getProteinInteractionCountUsingGET")].URL()+"/stats/count/proteinInteraction/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getProteinInteractionCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getProteinInteractionCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProteinInteractionCountUsingGETSignal(output);
        Q_EMIT getProteinInteractionCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProteinInteractionCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getProteinInteractionCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProteinInteractionCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getProteinInteractionCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getProteinInteractionDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getProteinInteractionDiffUsingGET"][_serverIndices.value("getProteinInteractionDiffUsingGET")].URL()+"/stats/diff/proteinInteraction/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getProteinInteractionDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getProteinInteractionDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProteinInteractionDiffUsingGETSignal(output);
        Q_EMIT getProteinInteractionDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProteinInteractionDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getProteinInteractionDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProteinInteractionDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getProteinInteractionDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getQtlInheritanceTypeCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getQtlInheritanceTypeCountUsingGET"][_serverIndices.value("getQtlInheritanceTypeCountUsingGET")].URL()+"/stats/count/qtlInheritanceType/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getQtlInheritanceTypeCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getQtlInheritanceTypeCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQtlInheritanceTypeCountUsingGETSignal(output);
        Q_EMIT getQtlInheritanceTypeCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQtlInheritanceTypeCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getQtlInheritanceTypeCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQtlInheritanceTypeCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getQtlInheritanceTypeCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getQtlInheritanceTypeDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getQtlInheritanceTypeDiffUsingGET"][_serverIndices.value("getQtlInheritanceTypeDiffUsingGET")].URL()+"/stats/diff/qtlInheritanceType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getQtlInheritanceTypeDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getQtlInheritanceTypeDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQtlInheritanceTypeDiffUsingGETSignal(output);
        Q_EMIT getQtlInheritanceTypeDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQtlInheritanceTypeDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getQtlInheritanceTypeDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQtlInheritanceTypeDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getQtlInheritanceTypeDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getRetiredObjectCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getRetiredObjectCountUsingGET"][_serverIndices.value("getRetiredObjectCountUsingGET")].URL()+"/stats/count/retiredObject/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getRetiredObjectCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getRetiredObjectCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRetiredObjectCountUsingGETSignal(output);
        Q_EMIT getRetiredObjectCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRetiredObjectCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getRetiredObjectCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRetiredObjectCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getRetiredObjectCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getRetiredObjectDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getRetiredObjectDiffUsingGET"][_serverIndices.value("getRetiredObjectDiffUsingGET")].URL()+"/stats/diff/retiredObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getRetiredObjectDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getRetiredObjectDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRetiredObjectDiffUsingGETSignal(output);
        Q_EMIT getRetiredObjectDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRetiredObjectDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getRetiredObjectDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRetiredObjectDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getRetiredObjectDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getStrainTypeCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getStrainTypeCountUsingGET"][_serverIndices.value("getStrainTypeCountUsingGET")].URL()+"/stats/count/strainType/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getStrainTypeCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getStrainTypeCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getStrainTypeCountUsingGETSignal(output);
        Q_EMIT getStrainTypeCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getStrainTypeCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getStrainTypeCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getStrainTypeCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getStrainTypeCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getStrainTypeDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getStrainTypeDiffUsingGET"][_serverIndices.value("getStrainTypeDiffUsingGET")].URL()+"/stats/diff/strainType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getStrainTypeDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getStrainTypeDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getStrainTypeDiffUsingGETSignal(output);
        Q_EMIT getStrainTypeDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getStrainTypeDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getStrainTypeDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getStrainTypeDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getStrainTypeDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getTermStatsUsingGET(const QString &acc_id, const QString &filter_acc_id) {
    QString fullPath = QString(_serverConfigs["getTermStatsUsingGET"][_serverIndices.value("getTermStatsUsingGET")].URL()+"/stats/term/{accId}/{filterAccId}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString filter_acc_idPathParam("{");
        filter_acc_idPathParam.append("filterAccId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filterAccId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filterAccId"+pathSuffix : pathPrefix;
        fullPath.replace(filter_acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter_acc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getTermStatsUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getTermStatsUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTermStatsUsingGETSignal(output);
        Q_EMIT getTermStatsUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTermStatsUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getTermStatsUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTermStatsUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getTermStatsUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getWithdrawnObjectCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getWithdrawnObjectCountUsingGET"][_serverIndices.value("getWithdrawnObjectCountUsingGET")].URL()+"/stats/count/withdrawnObject/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getWithdrawnObjectCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getWithdrawnObjectCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWithdrawnObjectCountUsingGETSignal(output);
        Q_EMIT getWithdrawnObjectCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWithdrawnObjectCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getWithdrawnObjectCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWithdrawnObjectCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getWithdrawnObjectCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getWithdrawnObjectDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getWithdrawnObjectDiffUsingGET"][_serverIndices.value("getWithdrawnObjectDiffUsingGET")].URL()+"/stats/diff/withdrawnObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getWithdrawnObjectDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getWithdrawnObjectDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWithdrawnObjectDiffUsingGETSignal(output);
        Q_EMIT getWithdrawnObjectDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWithdrawnObjectDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getWithdrawnObjectDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWithdrawnObjectDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getWithdrawnObjectDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getXdbsCountUsingGET(const qint32 &species_type_key, const QString &date_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getXdbsCountUsingGET"][_serverIndices.value("getXdbsCountUsingGET")].URL()+"/stats/count/xdb/{speciesTypeKey}/{dateYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_yyyymmddPathParam("{");
        date_yyyymmddPathParam.append("dateYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getXdbsCountUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getXdbsCountUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getXdbsCountUsingGETSignal(output);
        Q_EMIT getXdbsCountUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getXdbsCountUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getXdbsCountUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getXdbsCountUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getXdbsCountUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::getXdbsDiffUsingGET(const qint32 &species_type_key, const QString &date_from_yyyymmdd, const QString &date_to_yyyymmdd) {
    QString fullPath = QString(_serverConfigs["getXdbsDiffUsingGET"][_serverIndices.value("getXdbsDiffUsingGET")].URL()+"/stats/diff/xdb/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    
    {
        QString date_from_yyyymmddPathParam("{");
        date_from_yyyymmddPathParam.append("dateFromYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateFromYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateFromYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_from_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_from_yyyymmdd)));
    }
    
    {
        QString date_to_yyyymmddPathParam("{");
        date_to_yyyymmddPathParam.append("dateToYYYYMMDD").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateToYYYYMMDD", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateToYYYYMMDD"+pathSuffix : pathPrefix;
        fullPath.replace(date_to_yyyymmddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_to_yyyymmdd)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStatisticsApi::getXdbsDiffUsingGETCallback);
    connect(this, &OAIStatisticsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStatisticsApi::getXdbsDiffUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getXdbsDiffUsingGETSignal(output);
        Q_EMIT getXdbsDiffUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getXdbsDiffUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getXdbsDiffUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getXdbsDiffUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getXdbsDiffUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStatisticsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
