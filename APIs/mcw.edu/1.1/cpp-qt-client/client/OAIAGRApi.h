/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAGRApi_H
#define OAI_OAIAGRApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAGRApi : public QObject {
    Q_OBJECT

public:
    OAIAGRApi(const int timeOut = 0);
    ~OAIAGRApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  taxon_id QString [required]
    */
    virtual void getAffectedGenomicModelsUsingGET(const QString &taxon_id);

    /**
    * @param[in]  taxon_id QString [required]
    */
    virtual void getAllelesForTaxonUsingGET(const QString &taxon_id);

    /**
    * @param[in]  taxon_id QString [required]
    */
    virtual void getExpressionForTaxonUsingGET(const QString &taxon_id);

    /**
    * @param[in]  taxon_id QString [required]
    */
    virtual void getGenesForLatestAssemblyUsingGET(const QString &taxon_id);

    /**
    * @param[in]  taxon_id QString [required]
    */
    virtual void getPhenotypesForTaxonUsingGET(const QString &taxon_id);

    /**
    * @param[in]  taxon_id QString [required]
    */
    virtual void getVariantsForTaxonUsingGET(const QString &taxon_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAffectedGenomicModelsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAllelesForTaxonUsingGETCallback(OAIHttpRequestWorker *worker);
    void getExpressionForTaxonUsingGETCallback(OAIHttpRequestWorker *worker);
    void getGenesForLatestAssemblyUsingGETCallback(OAIHttpRequestWorker *worker);
    void getPhenotypesForTaxonUsingGETCallback(OAIHttpRequestWorker *worker);
    void getVariantsForTaxonUsingGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAffectedGenomicModelsUsingGETSignal(QMap<QString, OAIObject> summary);
    void getAllelesForTaxonUsingGETSignal(QMap<QString, OAIObject> summary);
    void getExpressionForTaxonUsingGETSignal(QMap<QString, OAIObject> summary);
    void getGenesForLatestAssemblyUsingGETSignal(QMap<QString, OAIObject> summary);
    void getPhenotypesForTaxonUsingGETSignal(QMap<QString, OAIObject> summary);
    void getVariantsForTaxonUsingGETSignal(QMap<QString, OAIObject> summary);


    void getAffectedGenomicModelsUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void getAllelesForTaxonUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void getExpressionForTaxonUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void getGenesForLatestAssemblyUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void getPhenotypesForTaxonUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void getVariantsForTaxonUsingGETSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);

    Q_DECL_DEPRECATED_X("Use getAffectedGenomicModelsUsingGETSignalError() instead")
    void getAffectedGenomicModelsUsingGETSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAffectedGenomicModelsUsingGETSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllelesForTaxonUsingGETSignalError() instead")
    void getAllelesForTaxonUsingGETSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllelesForTaxonUsingGETSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpressionForTaxonUsingGETSignalError() instead")
    void getExpressionForTaxonUsingGETSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpressionForTaxonUsingGETSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesForLatestAssemblyUsingGETSignalError() instead")
    void getGenesForLatestAssemblyUsingGETSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesForLatestAssemblyUsingGETSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypesForTaxonUsingGETSignalError() instead")
    void getPhenotypesForTaxonUsingGETSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypesForTaxonUsingGETSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantsForTaxonUsingGETSignalError() instead")
    void getVariantsForTaxonUsingGETSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantsForTaxonUsingGETSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAffectedGenomicModelsUsingGETSignalErrorFull() instead")
    void getAffectedGenomicModelsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAffectedGenomicModelsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllelesForTaxonUsingGETSignalErrorFull() instead")
    void getAllelesForTaxonUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllelesForTaxonUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpressionForTaxonUsingGETSignalErrorFull() instead")
    void getExpressionForTaxonUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpressionForTaxonUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenesForLatestAssemblyUsingGETSignalErrorFull() instead")
    void getGenesForLatestAssemblyUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenesForLatestAssemblyUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypesForTaxonUsingGETSignalErrorFull() instead")
    void getPhenotypesForTaxonUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypesForTaxonUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantsForTaxonUsingGETSignalErrorFull() instead")
    void getVariantsForTaxonUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantsForTaxonUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
