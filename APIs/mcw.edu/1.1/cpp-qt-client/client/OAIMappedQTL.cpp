/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappedQTL.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappedQTL::OAIMappedQTL(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappedQTL::OAIMappedQTL() {
    this->initializeModel();
}

OAIMappedQTL::~OAIMappedQTL() {}

void OAIMappedQTL::initializeModel() {

    m_chromosome_isSet = false;
    m_chromosome_isValid = false;

    m_map_key_isSet = false;
    m_map_key_isValid = false;

    m_qtl_isSet = false;
    m_qtl_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;

    m_strand_isSet = false;
    m_strand_isValid = false;
}

void OAIMappedQTL::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappedQTL::fromJsonObject(QJsonObject json) {

    m_chromosome_isValid = ::OpenAPI::fromJsonValue(m_chromosome, json[QString("chromosome")]);
    m_chromosome_isSet = !json[QString("chromosome")].isNull() && m_chromosome_isValid;

    m_map_key_isValid = ::OpenAPI::fromJsonValue(m_map_key, json[QString("mapKey")]);
    m_map_key_isSet = !json[QString("mapKey")].isNull() && m_map_key_isValid;

    m_qtl_isValid = ::OpenAPI::fromJsonValue(m_qtl, json[QString("qtl")]);
    m_qtl_isSet = !json[QString("qtl")].isNull() && m_qtl_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;

    m_strand_isValid = ::OpenAPI::fromJsonValue(m_strand, json[QString("strand")]);
    m_strand_isSet = !json[QString("strand")].isNull() && m_strand_isValid;
}

QString OAIMappedQTL::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappedQTL::asJsonObject() const {
    QJsonObject obj;
    if (m_chromosome_isSet) {
        obj.insert(QString("chromosome"), ::OpenAPI::toJsonValue(m_chromosome));
    }
    if (m_map_key_isSet) {
        obj.insert(QString("mapKey"), ::OpenAPI::toJsonValue(m_map_key));
    }
    if (m_qtl.isSet()) {
        obj.insert(QString("qtl"), ::OpenAPI::toJsonValue(m_qtl));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_stop_isSet) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    if (m_strand_isSet) {
        obj.insert(QString("strand"), ::OpenAPI::toJsonValue(m_strand));
    }
    return obj;
}

QString OAIMappedQTL::getChromosome() const {
    return m_chromosome;
}
void OAIMappedQTL::setChromosome(const QString &chromosome) {
    m_chromosome = chromosome;
    m_chromosome_isSet = true;
}

bool OAIMappedQTL::is_chromosome_Set() const{
    return m_chromosome_isSet;
}

bool OAIMappedQTL::is_chromosome_Valid() const{
    return m_chromosome_isValid;
}

qint32 OAIMappedQTL::getMapKey() const {
    return m_map_key;
}
void OAIMappedQTL::setMapKey(const qint32 &map_key) {
    m_map_key = map_key;
    m_map_key_isSet = true;
}

bool OAIMappedQTL::is_map_key_Set() const{
    return m_map_key_isSet;
}

bool OAIMappedQTL::is_map_key_Valid() const{
    return m_map_key_isValid;
}

OAIQTL OAIMappedQTL::getQtl() const {
    return m_qtl;
}
void OAIMappedQTL::setQtl(const OAIQTL &qtl) {
    m_qtl = qtl;
    m_qtl_isSet = true;
}

bool OAIMappedQTL::is_qtl_Set() const{
    return m_qtl_isSet;
}

bool OAIMappedQTL::is_qtl_Valid() const{
    return m_qtl_isValid;
}

qint64 OAIMappedQTL::getStart() const {
    return m_start;
}
void OAIMappedQTL::setStart(const qint64 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIMappedQTL::is_start_Set() const{
    return m_start_isSet;
}

bool OAIMappedQTL::is_start_Valid() const{
    return m_start_isValid;
}

qint64 OAIMappedQTL::getStop() const {
    return m_stop;
}
void OAIMappedQTL::setStop(const qint64 &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIMappedQTL::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIMappedQTL::is_stop_Valid() const{
    return m_stop_isValid;
}

QString OAIMappedQTL::getStrand() const {
    return m_strand;
}
void OAIMappedQTL::setStrand(const QString &strand) {
    m_strand = strand;
    m_strand_isSet = true;
}

bool OAIMappedQTL::is_strand_Set() const{
    return m_strand_isSet;
}

bool OAIMappedQTL::is_strand_Valid() const{
    return m_strand_isValid;
}

bool OAIMappedQTL::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chromosome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strand_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappedQTL::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
