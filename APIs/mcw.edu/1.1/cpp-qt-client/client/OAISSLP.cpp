/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSLP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSLP::OAISSLP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSLP::OAISSLP() {
    this->initializeModel();
}

OAISSLP::~OAISSLP() {}

void OAISSLP::initializeModel() {

    m_expected_size_isSet = false;
    m_expected_size_isValid = false;

    m_forward_seq_isSet = false;
    m_forward_seq_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_reverse_seq_isSet = false;
    m_reverse_seq_isValid = false;

    m_rgd_id_isSet = false;
    m_rgd_id_isValid = false;

    m_species_type_key_isSet = false;
    m_species_type_key_isValid = false;

    m_sslp_type_isSet = false;
    m_sslp_type_isValid = false;

    m_template_seq_isSet = false;
    m_template_seq_isValid = false;
}

void OAISSLP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSLP::fromJsonObject(QJsonObject json) {

    m_expected_size_isValid = ::OpenAPI::fromJsonValue(m_expected_size, json[QString("expectedSize")]);
    m_expected_size_isSet = !json[QString("expectedSize")].isNull() && m_expected_size_isValid;

    m_forward_seq_isValid = ::OpenAPI::fromJsonValue(m_forward_seq, json[QString("forwardSeq")]);
    m_forward_seq_isSet = !json[QString("forwardSeq")].isNull() && m_forward_seq_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_reverse_seq_isValid = ::OpenAPI::fromJsonValue(m_reverse_seq, json[QString("reverseSeq")]);
    m_reverse_seq_isSet = !json[QString("reverseSeq")].isNull() && m_reverse_seq_isValid;

    m_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_rgd_id, json[QString("rgdId")]);
    m_rgd_id_isSet = !json[QString("rgdId")].isNull() && m_rgd_id_isValid;

    m_species_type_key_isValid = ::OpenAPI::fromJsonValue(m_species_type_key, json[QString("speciesTypeKey")]);
    m_species_type_key_isSet = !json[QString("speciesTypeKey")].isNull() && m_species_type_key_isValid;

    m_sslp_type_isValid = ::OpenAPI::fromJsonValue(m_sslp_type, json[QString("sslpType")]);
    m_sslp_type_isSet = !json[QString("sslpType")].isNull() && m_sslp_type_isValid;

    m_template_seq_isValid = ::OpenAPI::fromJsonValue(m_template_seq, json[QString("templateSeq")]);
    m_template_seq_isSet = !json[QString("templateSeq")].isNull() && m_template_seq_isValid;
}

QString OAISSLP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSLP::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_size_isSet) {
        obj.insert(QString("expectedSize"), ::OpenAPI::toJsonValue(m_expected_size));
    }
    if (m_forward_seq_isSet) {
        obj.insert(QString("forwardSeq"), ::OpenAPI::toJsonValue(m_forward_seq));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_reverse_seq_isSet) {
        obj.insert(QString("reverseSeq"), ::OpenAPI::toJsonValue(m_reverse_seq));
    }
    if (m_rgd_id_isSet) {
        obj.insert(QString("rgdId"), ::OpenAPI::toJsonValue(m_rgd_id));
    }
    if (m_species_type_key_isSet) {
        obj.insert(QString("speciesTypeKey"), ::OpenAPI::toJsonValue(m_species_type_key));
    }
    if (m_sslp_type_isSet) {
        obj.insert(QString("sslpType"), ::OpenAPI::toJsonValue(m_sslp_type));
    }
    if (m_template_seq_isSet) {
        obj.insert(QString("templateSeq"), ::OpenAPI::toJsonValue(m_template_seq));
    }
    return obj;
}

qint32 OAISSLP::getExpectedSize() const {
    return m_expected_size;
}
void OAISSLP::setExpectedSize(const qint32 &expected_size) {
    m_expected_size = expected_size;
    m_expected_size_isSet = true;
}

bool OAISSLP::is_expected_size_Set() const{
    return m_expected_size_isSet;
}

bool OAISSLP::is_expected_size_Valid() const{
    return m_expected_size_isValid;
}

QString OAISSLP::getForwardSeq() const {
    return m_forward_seq;
}
void OAISSLP::setForwardSeq(const QString &forward_seq) {
    m_forward_seq = forward_seq;
    m_forward_seq_isSet = true;
}

bool OAISSLP::is_forward_seq_Set() const{
    return m_forward_seq_isSet;
}

bool OAISSLP::is_forward_seq_Valid() const{
    return m_forward_seq_isValid;
}

qint32 OAISSLP::getKey() const {
    return m_key;
}
void OAISSLP::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISSLP::is_key_Set() const{
    return m_key_isSet;
}

bool OAISSLP::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISSLP::getName() const {
    return m_name;
}
void OAISSLP::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISSLP::is_name_Set() const{
    return m_name_isSet;
}

bool OAISSLP::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISSLP::getNotes() const {
    return m_notes;
}
void OAISSLP::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAISSLP::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAISSLP::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAISSLP::getReverseSeq() const {
    return m_reverse_seq;
}
void OAISSLP::setReverseSeq(const QString &reverse_seq) {
    m_reverse_seq = reverse_seq;
    m_reverse_seq_isSet = true;
}

bool OAISSLP::is_reverse_seq_Set() const{
    return m_reverse_seq_isSet;
}

bool OAISSLP::is_reverse_seq_Valid() const{
    return m_reverse_seq_isValid;
}

qint32 OAISSLP::getRgdId() const {
    return m_rgd_id;
}
void OAISSLP::setRgdId(const qint32 &rgd_id) {
    m_rgd_id = rgd_id;
    m_rgd_id_isSet = true;
}

bool OAISSLP::is_rgd_id_Set() const{
    return m_rgd_id_isSet;
}

bool OAISSLP::is_rgd_id_Valid() const{
    return m_rgd_id_isValid;
}

qint32 OAISSLP::getSpeciesTypeKey() const {
    return m_species_type_key;
}
void OAISSLP::setSpeciesTypeKey(const qint32 &species_type_key) {
    m_species_type_key = species_type_key;
    m_species_type_key_isSet = true;
}

bool OAISSLP::is_species_type_key_Set() const{
    return m_species_type_key_isSet;
}

bool OAISSLP::is_species_type_key_Valid() const{
    return m_species_type_key_isValid;
}

QString OAISSLP::getSslpType() const {
    return m_sslp_type;
}
void OAISSLP::setSslpType(const QString &sslp_type) {
    m_sslp_type = sslp_type;
    m_sslp_type_isSet = true;
}

bool OAISSLP::is_sslp_type_Set() const{
    return m_sslp_type_isSet;
}

bool OAISSLP::is_sslp_type_Valid() const{
    return m_sslp_type_isValid;
}

QString OAISSLP::getTemplateSeq() const {
    return m_template_seq;
}
void OAISSLP::setTemplateSeq(const QString &template_seq) {
    m_template_seq = template_seq;
    m_template_seq_isSet = true;
}

bool OAISSLP::is_template_seq_Set() const{
    return m_template_seq_isSet;
}

bool OAISSLP::is_template_seq_Valid() const{
    return m_template_seq_isValid;
}

bool OAISSLP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sslp_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_seq_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSLP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
