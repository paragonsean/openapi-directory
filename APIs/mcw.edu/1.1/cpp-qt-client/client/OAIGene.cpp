/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGene.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGene::OAIGene(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGene::OAIGene() {
    this->initializeModel();
}

OAIGene::~OAIGene() {}

void OAIGene::initializeModel() {

    m_agr_description_isSet = false;
    m_agr_description_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ensembl_full_name_isSet = false;
    m_ensembl_full_name_isValid = false;

    m_ensembl_gene_symbol_isSet = false;
    m_ensembl_gene_symbol_isValid = false;

    m_ensembl_gene_type_isSet = false;
    m_ensembl_gene_type_isValid = false;

    m_gene_source_isSet = false;
    m_gene_source_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_merged_description_isSet = false;
    m_merged_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ncbi_annot_status_isSet = false;
    m_ncbi_annot_status_isValid = false;

    m_nomen_review_date_isSet = false;
    m_nomen_review_date_isValid = false;

    m_nomen_source_isSet = false;
    m_nomen_source_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_ref_seq_status_isSet = false;
    m_ref_seq_status_isValid = false;

    m_rgd_id_isSet = false;
    m_rgd_id_isValid = false;

    m_so_acc_id_isSet = false;
    m_so_acc_id_isValid = false;

    m_species_type_key_isSet = false;
    m_species_type_key_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAIGene::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGene::fromJsonObject(QJsonObject json) {

    m_agr_description_isValid = ::OpenAPI::fromJsonValue(m_agr_description, json[QString("agrDescription")]);
    m_agr_description_isSet = !json[QString("agrDescription")].isNull() && m_agr_description_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ensembl_full_name_isValid = ::OpenAPI::fromJsonValue(m_ensembl_full_name, json[QString("ensemblFullName")]);
    m_ensembl_full_name_isSet = !json[QString("ensemblFullName")].isNull() && m_ensembl_full_name_isValid;

    m_ensembl_gene_symbol_isValid = ::OpenAPI::fromJsonValue(m_ensembl_gene_symbol, json[QString("ensemblGeneSymbol")]);
    m_ensembl_gene_symbol_isSet = !json[QString("ensemblGeneSymbol")].isNull() && m_ensembl_gene_symbol_isValid;

    m_ensembl_gene_type_isValid = ::OpenAPI::fromJsonValue(m_ensembl_gene_type, json[QString("ensemblGeneType")]);
    m_ensembl_gene_type_isSet = !json[QString("ensemblGeneType")].isNull() && m_ensembl_gene_type_isValid;

    m_gene_source_isValid = ::OpenAPI::fromJsonValue(m_gene_source, json[QString("geneSource")]);
    m_gene_source_isSet = !json[QString("geneSource")].isNull() && m_gene_source_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_merged_description_isValid = ::OpenAPI::fromJsonValue(m_merged_description, json[QString("mergedDescription")]);
    m_merged_description_isSet = !json[QString("mergedDescription")].isNull() && m_merged_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ncbi_annot_status_isValid = ::OpenAPI::fromJsonValue(m_ncbi_annot_status, json[QString("ncbiAnnotStatus")]);
    m_ncbi_annot_status_isSet = !json[QString("ncbiAnnotStatus")].isNull() && m_ncbi_annot_status_isValid;

    m_nomen_review_date_isValid = ::OpenAPI::fromJsonValue(m_nomen_review_date, json[QString("nomenReviewDate")]);
    m_nomen_review_date_isSet = !json[QString("nomenReviewDate")].isNull() && m_nomen_review_date_isValid;

    m_nomen_source_isValid = ::OpenAPI::fromJsonValue(m_nomen_source, json[QString("nomenSource")]);
    m_nomen_source_isSet = !json[QString("nomenSource")].isNull() && m_nomen_source_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_ref_seq_status_isValid = ::OpenAPI::fromJsonValue(m_ref_seq_status, json[QString("refSeqStatus")]);
    m_ref_seq_status_isSet = !json[QString("refSeqStatus")].isNull() && m_ref_seq_status_isValid;

    m_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_rgd_id, json[QString("rgdId")]);
    m_rgd_id_isSet = !json[QString("rgdId")].isNull() && m_rgd_id_isValid;

    m_so_acc_id_isValid = ::OpenAPI::fromJsonValue(m_so_acc_id, json[QString("soAccId")]);
    m_so_acc_id_isSet = !json[QString("soAccId")].isNull() && m_so_acc_id_isValid;

    m_species_type_key_isValid = ::OpenAPI::fromJsonValue(m_species_type_key, json[QString("speciesTypeKey")]);
    m_species_type_key_isSet = !json[QString("speciesTypeKey")].isNull() && m_species_type_key_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAIGene::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGene::asJsonObject() const {
    QJsonObject obj;
    if (m_agr_description_isSet) {
        obj.insert(QString("agrDescription"), ::OpenAPI::toJsonValue(m_agr_description));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ensembl_full_name_isSet) {
        obj.insert(QString("ensemblFullName"), ::OpenAPI::toJsonValue(m_ensembl_full_name));
    }
    if (m_ensembl_gene_symbol_isSet) {
        obj.insert(QString("ensemblGeneSymbol"), ::OpenAPI::toJsonValue(m_ensembl_gene_symbol));
    }
    if (m_ensembl_gene_type_isSet) {
        obj.insert(QString("ensemblGeneType"), ::OpenAPI::toJsonValue(m_ensembl_gene_type));
    }
    if (m_gene_source_isSet) {
        obj.insert(QString("geneSource"), ::OpenAPI::toJsonValue(m_gene_source));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_merged_description_isSet) {
        obj.insert(QString("mergedDescription"), ::OpenAPI::toJsonValue(m_merged_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ncbi_annot_status_isSet) {
        obj.insert(QString("ncbiAnnotStatus"), ::OpenAPI::toJsonValue(m_ncbi_annot_status));
    }
    if (m_nomen_review_date_isSet) {
        obj.insert(QString("nomenReviewDate"), ::OpenAPI::toJsonValue(m_nomen_review_date));
    }
    if (m_nomen_source_isSet) {
        obj.insert(QString("nomenSource"), ::OpenAPI::toJsonValue(m_nomen_source));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_ref_seq_status_isSet) {
        obj.insert(QString("refSeqStatus"), ::OpenAPI::toJsonValue(m_ref_seq_status));
    }
    if (m_rgd_id_isSet) {
        obj.insert(QString("rgdId"), ::OpenAPI::toJsonValue(m_rgd_id));
    }
    if (m_so_acc_id_isSet) {
        obj.insert(QString("soAccId"), ::OpenAPI::toJsonValue(m_so_acc_id));
    }
    if (m_species_type_key_isSet) {
        obj.insert(QString("speciesTypeKey"), ::OpenAPI::toJsonValue(m_species_type_key));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QString OAIGene::getAgrDescription() const {
    return m_agr_description;
}
void OAIGene::setAgrDescription(const QString &agr_description) {
    m_agr_description = agr_description;
    m_agr_description_isSet = true;
}

bool OAIGene::is_agr_description_Set() const{
    return m_agr_description_isSet;
}

bool OAIGene::is_agr_description_Valid() const{
    return m_agr_description_isValid;
}

QString OAIGene::getDescription() const {
    return m_description;
}
void OAIGene::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGene::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGene::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGene::getEnsemblFullName() const {
    return m_ensembl_full_name;
}
void OAIGene::setEnsemblFullName(const QString &ensembl_full_name) {
    m_ensembl_full_name = ensembl_full_name;
    m_ensembl_full_name_isSet = true;
}

bool OAIGene::is_ensembl_full_name_Set() const{
    return m_ensembl_full_name_isSet;
}

bool OAIGene::is_ensembl_full_name_Valid() const{
    return m_ensembl_full_name_isValid;
}

QString OAIGene::getEnsemblGeneSymbol() const {
    return m_ensembl_gene_symbol;
}
void OAIGene::setEnsemblGeneSymbol(const QString &ensembl_gene_symbol) {
    m_ensembl_gene_symbol = ensembl_gene_symbol;
    m_ensembl_gene_symbol_isSet = true;
}

bool OAIGene::is_ensembl_gene_symbol_Set() const{
    return m_ensembl_gene_symbol_isSet;
}

bool OAIGene::is_ensembl_gene_symbol_Valid() const{
    return m_ensembl_gene_symbol_isValid;
}

QString OAIGene::getEnsemblGeneType() const {
    return m_ensembl_gene_type;
}
void OAIGene::setEnsemblGeneType(const QString &ensembl_gene_type) {
    m_ensembl_gene_type = ensembl_gene_type;
    m_ensembl_gene_type_isSet = true;
}

bool OAIGene::is_ensembl_gene_type_Set() const{
    return m_ensembl_gene_type_isSet;
}

bool OAIGene::is_ensembl_gene_type_Valid() const{
    return m_ensembl_gene_type_isValid;
}

QString OAIGene::getGeneSource() const {
    return m_gene_source;
}
void OAIGene::setGeneSource(const QString &gene_source) {
    m_gene_source = gene_source;
    m_gene_source_isSet = true;
}

bool OAIGene::is_gene_source_Set() const{
    return m_gene_source_isSet;
}

bool OAIGene::is_gene_source_Valid() const{
    return m_gene_source_isValid;
}

qint32 OAIGene::getKey() const {
    return m_key;
}
void OAIGene::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGene::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGene::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIGene::getMergedDescription() const {
    return m_merged_description;
}
void OAIGene::setMergedDescription(const QString &merged_description) {
    m_merged_description = merged_description;
    m_merged_description_isSet = true;
}

bool OAIGene::is_merged_description_Set() const{
    return m_merged_description_isSet;
}

bool OAIGene::is_merged_description_Valid() const{
    return m_merged_description_isValid;
}

QString OAIGene::getName() const {
    return m_name;
}
void OAIGene::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGene::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGene::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGene::getNcbiAnnotStatus() const {
    return m_ncbi_annot_status;
}
void OAIGene::setNcbiAnnotStatus(const QString &ncbi_annot_status) {
    m_ncbi_annot_status = ncbi_annot_status;
    m_ncbi_annot_status_isSet = true;
}

bool OAIGene::is_ncbi_annot_status_Set() const{
    return m_ncbi_annot_status_isSet;
}

bool OAIGene::is_ncbi_annot_status_Valid() const{
    return m_ncbi_annot_status_isValid;
}

QDateTime OAIGene::getNomenReviewDate() const {
    return m_nomen_review_date;
}
void OAIGene::setNomenReviewDate(const QDateTime &nomen_review_date) {
    m_nomen_review_date = nomen_review_date;
    m_nomen_review_date_isSet = true;
}

bool OAIGene::is_nomen_review_date_Set() const{
    return m_nomen_review_date_isSet;
}

bool OAIGene::is_nomen_review_date_Valid() const{
    return m_nomen_review_date_isValid;
}

QString OAIGene::getNomenSource() const {
    return m_nomen_source;
}
void OAIGene::setNomenSource(const QString &nomen_source) {
    m_nomen_source = nomen_source;
    m_nomen_source_isSet = true;
}

bool OAIGene::is_nomen_source_Set() const{
    return m_nomen_source_isSet;
}

bool OAIGene::is_nomen_source_Valid() const{
    return m_nomen_source_isValid;
}

QString OAIGene::getNotes() const {
    return m_notes;
}
void OAIGene::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGene::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGene::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIGene::getRefSeqStatus() const {
    return m_ref_seq_status;
}
void OAIGene::setRefSeqStatus(const QString &ref_seq_status) {
    m_ref_seq_status = ref_seq_status;
    m_ref_seq_status_isSet = true;
}

bool OAIGene::is_ref_seq_status_Set() const{
    return m_ref_seq_status_isSet;
}

bool OAIGene::is_ref_seq_status_Valid() const{
    return m_ref_seq_status_isValid;
}

qint32 OAIGene::getRgdId() const {
    return m_rgd_id;
}
void OAIGene::setRgdId(const qint32 &rgd_id) {
    m_rgd_id = rgd_id;
    m_rgd_id_isSet = true;
}

bool OAIGene::is_rgd_id_Set() const{
    return m_rgd_id_isSet;
}

bool OAIGene::is_rgd_id_Valid() const{
    return m_rgd_id_isValid;
}

QString OAIGene::getSoAccId() const {
    return m_so_acc_id;
}
void OAIGene::setSoAccId(const QString &so_acc_id) {
    m_so_acc_id = so_acc_id;
    m_so_acc_id_isSet = true;
}

bool OAIGene::is_so_acc_id_Set() const{
    return m_so_acc_id_isSet;
}

bool OAIGene::is_so_acc_id_Valid() const{
    return m_so_acc_id_isValid;
}

qint32 OAIGene::getSpeciesTypeKey() const {
    return m_species_type_key;
}
void OAIGene::setSpeciesTypeKey(const qint32 &species_type_key) {
    m_species_type_key = species_type_key;
    m_species_type_key_isSet = true;
}

bool OAIGene::is_species_type_key_Set() const{
    return m_species_type_key_isSet;
}

bool OAIGene::is_species_type_key_Valid() const{
    return m_species_type_key_isValid;
}

QString OAIGene::getSymbol() const {
    return m_symbol;
}
void OAIGene::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIGene::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIGene::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAIGene::getType() const {
    return m_type;
}
void OAIGene::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGene::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGene::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGene::isVariant() const {
    return m_variant;
}
void OAIGene::setVariant(const bool &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIGene::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIGene::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAIGene::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agr_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ensembl_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ensembl_gene_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ensembl_gene_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gene_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ncbi_annot_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nomen_review_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nomen_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_seq_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_acc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGene::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
