/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerm::OAITerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerm::OAITerm() {
    this->initializeModel();
}

OAITerm::~OAITerm() {}

void OAITerm::initializeModel() {

    m_acc_id_isSet = false;
    m_acc_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_obsolete_isSet = false;
    m_obsolete_isValid = false;

    m_ontology_id_isSet = false;
    m_ontology_id_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_xrefs_isSet = false;
    m_xrefs_isValid = false;
}

void OAITerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerm::fromJsonObject(QJsonObject json) {

    m_acc_id_isValid = ::OpenAPI::fromJsonValue(m_acc_id, json[QString("accId")]);
    m_acc_id_isSet = !json[QString("accId")].isNull() && m_acc_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_obsolete_isValid = ::OpenAPI::fromJsonValue(m_obsolete, json[QString("obsolete")]);
    m_obsolete_isSet = !json[QString("obsolete")].isNull() && m_obsolete_isValid;

    m_ontology_id_isValid = ::OpenAPI::fromJsonValue(m_ontology_id, json[QString("ontologyId")]);
    m_ontology_id_isSet = !json[QString("ontologyId")].isNull() && m_ontology_id_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_xrefs_isValid = ::OpenAPI::fromJsonValue(m_xrefs, json[QString("xrefs")]);
    m_xrefs_isSet = !json[QString("xrefs")].isNull() && m_xrefs_isValid;
}

QString OAITerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerm::asJsonObject() const {
    QJsonObject obj;
    if (m_acc_id_isSet) {
        obj.insert(QString("accId"), ::OpenAPI::toJsonValue(m_acc_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_obsolete_isSet) {
        obj.insert(QString("obsolete"), ::OpenAPI::toJsonValue(m_obsolete));
    }
    if (m_ontology_id_isSet) {
        obj.insert(QString("ontologyId"), ::OpenAPI::toJsonValue(m_ontology_id));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_xrefs.size() > 0) {
        obj.insert(QString("xrefs"), ::OpenAPI::toJsonValue(m_xrefs));
    }
    return obj;
}

QString OAITerm::getAccId() const {
    return m_acc_id;
}
void OAITerm::setAccId(const QString &acc_id) {
    m_acc_id = acc_id;
    m_acc_id_isSet = true;
}

bool OAITerm::is_acc_id_Set() const{
    return m_acc_id_isSet;
}

bool OAITerm::is_acc_id_Valid() const{
    return m_acc_id_isValid;
}

QString OAITerm::getComment() const {
    return m_comment;
}
void OAITerm::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAITerm::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAITerm::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAITerm::getCreatedBy() const {
    return m_created_by;
}
void OAITerm::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITerm::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITerm::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAITerm::getCreationDate() const {
    return m_creation_date;
}
void OAITerm::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITerm::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITerm::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITerm::getDefinition() const {
    return m_definition;
}
void OAITerm::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAITerm::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAITerm::is_definition_Valid() const{
    return m_definition_isValid;
}

QDateTime OAITerm::getModificationDate() const {
    return m_modification_date;
}
void OAITerm::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAITerm::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAITerm::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

qint32 OAITerm::getObsolete() const {
    return m_obsolete;
}
void OAITerm::setObsolete(const qint32 &obsolete) {
    m_obsolete = obsolete;
    m_obsolete_isSet = true;
}

bool OAITerm::is_obsolete_Set() const{
    return m_obsolete_isSet;
}

bool OAITerm::is_obsolete_Valid() const{
    return m_obsolete_isValid;
}

QString OAITerm::getOntologyId() const {
    return m_ontology_id;
}
void OAITerm::setOntologyId(const QString &ontology_id) {
    m_ontology_id = ontology_id;
    m_ontology_id_isSet = true;
}

bool OAITerm::is_ontology_id_Set() const{
    return m_ontology_id_isSet;
}

bool OAITerm::is_ontology_id_Valid() const{
    return m_ontology_id_isValid;
}

QString OAITerm::getTerm() const {
    return m_term;
}
void OAITerm::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAITerm::is_term_Set() const{
    return m_term_isSet;
}

bool OAITerm::is_term_Valid() const{
    return m_term_isValid;
}

QList<OAITermXRef> OAITerm::getXrefs() const {
    return m_xrefs;
}
void OAITerm::setXrefs(const QList<OAITermXRef> &xrefs) {
    m_xrefs = xrefs;
    m_xrefs_isSet = true;
}

bool OAITerm::is_xrefs_Set() const{
    return m_xrefs_isSet;
}

bool OAITerm::is_xrefs_Valid() const{
    return m_xrefs_isValid;
}

bool OAITerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obsolete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ontology_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xrefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
