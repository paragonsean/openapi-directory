/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIGeneApi::OAIGeneApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIGeneApi::~OAIGeneApi() {
}

void OAIGeneApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//rest.rgd.mcw.edu/rgdws"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getAllAnnotatedGenesUsingGET", defaultConf);
    _serverIndices.insert("getAllAnnotatedGenesUsingGET", 0);
    _serverConfigs.insert("getAnnotatedGenesUsingPOST", defaultConf);
    _serverIndices.insert("getAnnotatedGenesUsingPOST", 0);
    _serverConfigs.insert("getGeneAllelesUsingGET", defaultConf);
    _serverIndices.insert("getGeneAllelesUsingGET", 0);
    _serverConfigs.insert("getGeneByMapKeyUsingGET", defaultConf);
    _serverIndices.insert("getGeneByMapKeyUsingGET", 0);
    _serverConfigs.insert("getGeneByRgdIdUsingGET", defaultConf);
    _serverIndices.insert("getGeneByRgdIdUsingGET", 0);
    _serverConfigs.insert("getGeneBySymbolUsingGET", defaultConf);
    _serverIndices.insert("getGeneBySymbolUsingGET", 0);
    _serverConfigs.insert("getGeneOrthologsUsingGET", defaultConf);
    _serverIndices.insert("getGeneOrthologsUsingGET", 0);
    _serverConfigs.insert("getGenesAnnotatedUsingGET", defaultConf);
    _serverIndices.insert("getGenesAnnotatedUsingGET", 0);
    _serverConfigs.insert("getGenesByAffyIdUsingGET", defaultConf);
    _serverIndices.insert("getGenesByAffyIdUsingGET", 0);
    _serverConfigs.insert("getGenesByAliasSymbolUsingGET", defaultConf);
    _serverIndices.insert("getGenesByAliasSymbolUsingGET", 0);
    _serverConfigs.insert("getGenesByKeywordUsingGET", defaultConf);
    _serverIndices.insert("getGenesByKeywordUsingGET", 0);
    _serverConfigs.insert("getGenesByPositionUsingGET", defaultConf);
    _serverIndices.insert("getGenesByPositionUsingGET", 0);
    _serverConfigs.insert("getGenesBySpeciesUsingGET", defaultConf);
    _serverIndices.insert("getGenesBySpeciesUsingGET", 0);
    _serverConfigs.insert("getGenesInRegionUsingGET", defaultConf);
    _serverIndices.insert("getGenesInRegionUsingGET", 0);
    _serverConfigs.insert("getMappedGenesByPositionUsingGET", defaultConf);
    _serverIndices.insert("getMappedGenesByPositionUsingGET", 0);
    _serverConfigs.insert("getOrthologsByListUsingPOST", defaultConf);
    _serverIndices.insert("getOrthologsByListUsingPOST", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIGeneApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIGeneApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIGeneApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIGeneApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIGeneApi::setUsername(const QString &username) {
    _username = username;
}

void OAIGeneApi::setPassword(const QString &password) {
    _password = password;
}


void OAIGeneApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIGeneApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIGeneApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIGeneApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIGeneApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIGeneApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIGeneApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIGeneApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIGeneApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIGeneApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIGeneApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIGeneApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIGeneApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIGeneApi::getAllAnnotatedGenesUsingGET(const QString &acc_id) {
    QString fullPath = QString(_serverConfigs["getAllAnnotatedGenesUsingGET"][_serverIndices.value("getAllAnnotatedGenesUsingGET")].URL()+"/genes/annotation/{accId}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getAllAnnotatedGenesUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getAllAnnotatedGenesUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllAnnotatedGenesUsingGETSignal(output);
        Q_EMIT getAllAnnotatedGenesUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllAnnotatedGenesUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAllAnnotatedGenesUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllAnnotatedGenesUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAllAnnotatedGenesUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getAnnotatedGenesUsingPOST(const ::OpenAPI::OptionalParam<OAIAnnotatedGeneRequest> &oai_annotated_gene_request) {
    QString fullPath = QString(_serverConfigs["getAnnotatedGenesUsingPOST"][_serverIndices.value("getAnnotatedGenesUsingPOST")].URL()+"/genes/annotation");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_annotated_gene_request.hasValue()){

        
        QByteArray output = oai_annotated_gene_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getAnnotatedGenesUsingPOSTCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getAnnotatedGenesUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotatedGenesUsingPOSTSignal(output);
        Q_EMIT getAnnotatedGenesUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotatedGenesUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT getAnnotatedGenesUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotatedGenesUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT getAnnotatedGenesUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGeneAllelesUsingGET(const qint32 &rgd_id) {
    QString fullPath = QString(_serverConfigs["getGeneAllelesUsingGET"][_serverIndices.value("getGeneAllelesUsingGET")].URL()+"/genes/allele/{rgdId}");
    
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGeneAllelesUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGeneAllelesUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneAllelesUsingGETSignal(output);
        Q_EMIT getGeneAllelesUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneAllelesUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneAllelesUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneAllelesUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneAllelesUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGeneByMapKeyUsingGET(const qint32 &map_key) {
    QString fullPath = QString(_serverConfigs["getGeneByMapKeyUsingGET"][_serverIndices.value("getGeneByMapKeyUsingGET")].URL()+"/genes/map/{mapKey}");
    
    
    {
        QString map_keyPathParam("{");
        map_keyPathParam.append("mapKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mapKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mapKey"+pathSuffix : pathPrefix;
        fullPath.replace(map_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(map_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGeneByMapKeyUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGeneByMapKeyUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMappedGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMappedGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneByMapKeyUsingGETSignal(output);
        Q_EMIT getGeneByMapKeyUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneByMapKeyUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneByMapKeyUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneByMapKeyUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneByMapKeyUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGeneByRgdIdUsingGET(const qint32 &rgd_id) {
    QString fullPath = QString(_serverConfigs["getGeneByRgdIdUsingGET"][_serverIndices.value("getGeneByRgdIdUsingGET")].URL()+"/genes/{rgdId}");
    
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGeneByRgdIdUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGeneByRgdIdUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGene output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneByRgdIdUsingGETSignal(output);
        Q_EMIT getGeneByRgdIdUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneByRgdIdUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneByRgdIdUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneByRgdIdUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneByRgdIdUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGeneBySymbolUsingGET(const QString &symbol, const qint32 &species_type_key) {
    QString fullPath = QString(_serverConfigs["getGeneBySymbolUsingGET"][_serverIndices.value("getGeneBySymbolUsingGET")].URL()+"/genes/{symbol}/{speciesTypeKey}");
    
    
    {
        QString symbolPathParam("{");
        symbolPathParam.append("symbol").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol"+pathSuffix : pathPrefix;
        fullPath.replace(symbolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGeneBySymbolUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGeneBySymbolUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGene output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneBySymbolUsingGETSignal(output);
        Q_EMIT getGeneBySymbolUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneBySymbolUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneBySymbolUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneBySymbolUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneBySymbolUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGeneOrthologsUsingGET(const qint32 &rgd_id) {
    QString fullPath = QString(_serverConfigs["getGeneOrthologsUsingGET"][_serverIndices.value("getGeneOrthologsUsingGET")].URL()+"/genes/orthologs/{rgdId}");
    
    
    {
        QString rgd_idPathParam("{");
        rgd_idPathParam.append("rgdId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rgdId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rgdId"+pathSuffix : pathPrefix;
        fullPath.replace(rgd_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgd_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGeneOrthologsUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGeneOrthologsUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGeneOrthologsUsingGETSignal(output);
        Q_EMIT getGeneOrthologsUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGeneOrthologsUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGeneOrthologsUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGeneOrthologsUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGeneOrthologsUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesAnnotatedUsingGET(const QString &acc_id, const qint32 &species_type_key) {
    QString fullPath = QString(_serverConfigs["getGenesAnnotatedUsingGET"][_serverIndices.value("getGenesAnnotatedUsingGET")].URL()+"/genes/annotation/{accId}/{speciesTypeKey}");
    
    
    {
        QString acc_idPathParam("{");
        acc_idPathParam.append("accId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accId"+pathSuffix : pathPrefix;
        fullPath.replace(acc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(acc_id)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesAnnotatedUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesAnnotatedUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesAnnotatedUsingGETSignal(output);
        Q_EMIT getGenesAnnotatedUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesAnnotatedUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesAnnotatedUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesAnnotatedUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesAnnotatedUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesByAffyIdUsingGET(const QString &affy_id, const qint32 &species_type_key) {
    QString fullPath = QString(_serverConfigs["getGenesByAffyIdUsingGET"][_serverIndices.value("getGenesByAffyIdUsingGET")].URL()+"/genes/affyId/{affyId}/{speciesTypeKey}");
    
    
    {
        QString affy_idPathParam("{");
        affy_idPathParam.append("affyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "affyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"affyId"+pathSuffix : pathPrefix;
        fullPath.replace(affy_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(affy_id)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesByAffyIdUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesByAffyIdUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesByAffyIdUsingGETSignal(output);
        Q_EMIT getGenesByAffyIdUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesByAffyIdUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesByAffyIdUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesByAffyIdUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesByAffyIdUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesByAliasSymbolUsingGET(const QString &alias_symbol, const qint32 &species_type_key) {
    QString fullPath = QString(_serverConfigs["getGenesByAliasSymbolUsingGET"][_serverIndices.value("getGenesByAliasSymbolUsingGET")].URL()+"/genes/alias/{aliasSymbol}/{speciesTypeKey}");
    
    
    {
        QString alias_symbolPathParam("{");
        alias_symbolPathParam.append("aliasSymbol").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "aliasSymbol", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"aliasSymbol"+pathSuffix : pathPrefix;
        fullPath.replace(alias_symbolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(alias_symbol)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesByAliasSymbolUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesByAliasSymbolUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesByAliasSymbolUsingGETSignal(output);
        Q_EMIT getGenesByAliasSymbolUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesByAliasSymbolUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesByAliasSymbolUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesByAliasSymbolUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesByAliasSymbolUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesByKeywordUsingGET(const QString &keyword, const qint32 &species_type_key) {
    QString fullPath = QString(_serverConfigs["getGenesByKeywordUsingGET"][_serverIndices.value("getGenesByKeywordUsingGET")].URL()+"/genes/keyword/{keyword}/{speciesTypeKey}");
    
    
    {
        QString keywordPathParam("{");
        keywordPathParam.append("keyword").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "keyword", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"keyword"+pathSuffix : pathPrefix;
        fullPath.replace(keywordPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(keyword)));
    }
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesByKeywordUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesByKeywordUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesByKeywordUsingGETSignal(output);
        Q_EMIT getGenesByKeywordUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesByKeywordUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesByKeywordUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesByKeywordUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesByKeywordUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesByPositionUsingGET(const QString &chr, const qint64 &start, const qint64 &stop, const qint32 &map_key) {
    QString fullPath = QString(_serverConfigs["getGenesByPositionUsingGET"][_serverIndices.value("getGenesByPositionUsingGET")].URL()+"/genes/{chr}/{start}/{stop}/{mapKey}");
    
    
    {
        QString chrPathParam("{");
        chrPathParam.append("chr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chr"+pathSuffix : pathPrefix;
        fullPath.replace(chrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chr)));
    }
    
    {
        QString startPathParam("{");
        startPathParam.append("start").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "start", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"start"+pathSuffix : pathPrefix;
        fullPath.replace(startPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start)));
    }
    
    {
        QString stopPathParam("{");
        stopPathParam.append("stop").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stop", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stop"+pathSuffix : pathPrefix;
        fullPath.replace(stopPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stop)));
    }
    
    {
        QString map_keyPathParam("{");
        map_keyPathParam.append("mapKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mapKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mapKey"+pathSuffix : pathPrefix;
        fullPath.replace(map_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(map_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesByPositionUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesByPositionUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesByPositionUsingGETSignal(output);
        Q_EMIT getGenesByPositionUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesByPositionUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesByPositionUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesByPositionUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesByPositionUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesBySpeciesUsingGET(const qint32 &species_type_key) {
    QString fullPath = QString(_serverConfigs["getGenesBySpeciesUsingGET"][_serverIndices.value("getGenesBySpeciesUsingGET")].URL()+"/genes/species/{speciesTypeKey}");
    
    
    {
        QString species_type_keyPathParam("{");
        species_type_keyPathParam.append("speciesTypeKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "speciesTypeKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"speciesTypeKey"+pathSuffix : pathPrefix;
        fullPath.replace(species_type_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(species_type_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesBySpeciesUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesBySpeciesUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesBySpeciesUsingGETSignal(output);
        Q_EMIT getGenesBySpeciesUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesBySpeciesUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesBySpeciesUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesBySpeciesUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesBySpeciesUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getGenesInRegionUsingGET(const QString &chr, const qint64 &start, const qint64 &stop, const qint32 &map_key) {
    QString fullPath = QString(_serverConfigs["getGenesInRegionUsingGET"][_serverIndices.value("getGenesInRegionUsingGET")].URL()+"/genes/region/{chr}/{start}/{stop}/{mapKey}");
    
    
    {
        QString chrPathParam("{");
        chrPathParam.append("chr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chr"+pathSuffix : pathPrefix;
        fullPath.replace(chrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chr)));
    }
    
    {
        QString startPathParam("{");
        startPathParam.append("start").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "start", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"start"+pathSuffix : pathPrefix;
        fullPath.replace(startPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start)));
    }
    
    {
        QString stopPathParam("{");
        stopPathParam.append("stop").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stop", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stop"+pathSuffix : pathPrefix;
        fullPath.replace(stopPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stop)));
    }
    
    {
        QString map_keyPathParam("{");
        map_keyPathParam.append("mapKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mapKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mapKey"+pathSuffix : pathPrefix;
        fullPath.replace(map_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(map_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getGenesInRegionUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getGenesInRegionUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMappedGenePosition> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMappedGenePosition val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGenesInRegionUsingGETSignal(output);
        Q_EMIT getGenesInRegionUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGenesInRegionUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getGenesInRegionUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGenesInRegionUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getGenesInRegionUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getMappedGenesByPositionUsingGET(const QString &chr, const qint64 &start, const qint64 &stop, const qint32 &map_key) {
    QString fullPath = QString(_serverConfigs["getMappedGenesByPositionUsingGET"][_serverIndices.value("getMappedGenesByPositionUsingGET")].URL()+"/genes/mapped/{chr}/{start}/{stop}/{mapKey}");
    
    
    {
        QString chrPathParam("{");
        chrPathParam.append("chr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chr"+pathSuffix : pathPrefix;
        fullPath.replace(chrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chr)));
    }
    
    {
        QString startPathParam("{");
        startPathParam.append("start").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "start", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"start"+pathSuffix : pathPrefix;
        fullPath.replace(startPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start)));
    }
    
    {
        QString stopPathParam("{");
        stopPathParam.append("stop").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stop", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stop"+pathSuffix : pathPrefix;
        fullPath.replace(stopPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stop)));
    }
    
    {
        QString map_keyPathParam("{");
        map_keyPathParam.append("mapKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mapKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mapKey"+pathSuffix : pathPrefix;
        fullPath.replace(map_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(map_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getMappedGenesByPositionUsingGETCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getMappedGenesByPositionUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMappedGene> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMappedGene val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMappedGenesByPositionUsingGETSignal(output);
        Q_EMIT getMappedGenesByPositionUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMappedGenesByPositionUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getMappedGenesByPositionUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMappedGenesByPositionUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getMappedGenesByPositionUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::getOrthologsByListUsingPOST(const OAIOrthologRequest &oai_ortholog_request) {
    QString fullPath = QString(_serverConfigs["getOrthologsByListUsingPOST"][_serverIndices.value("getOrthologsByListUsingPOST")].URL()+"/genes/orthologs");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_ortholog_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGeneApi::getOrthologsByListUsingPOSTCallback);
    connect(this, &OAIGeneApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGeneApi::getOrthologsByListUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QList<OAIGene>> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QList val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOrthologsByListUsingPOSTSignal(output);
        Q_EMIT getOrthologsByListUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOrthologsByListUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT getOrthologsByListUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOrthologsByListUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT getOrthologsByListUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGeneApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
