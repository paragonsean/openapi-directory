/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQTL.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQTL::OAIQTL(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQTL::OAIQTL() {
    this->initializeModel();
}

OAIQTL::~OAIQTL() {}

void OAIQTL::initializeModel() {

    m_chromosome_isSet = false;
    m_chromosome_isValid = false;

    m_flank1_rgd_id_isSet = false;
    m_flank1_rgd_id_isValid = false;

    m_flank2_rgd_id_isSet = false;
    m_flank2_rgd_id_isValid = false;

    m_inheritance_type_isSet = false;
    m_inheritance_type_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_linkage_image_isSet = false;
    m_linkage_image_isValid = false;

    m_lod_isSet = false;
    m_lod_isValid = false;

    m_lod_image_isSet = false;
    m_lod_image_isValid = false;

    m_most_significant_cmo_term_isSet = false;
    m_most_significant_cmo_term_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_peak_offset_isSet = false;
    m_peak_offset_isValid = false;

    m_peak_rgd_id_isSet = false;
    m_peak_rgd_id_isValid = false;

    m_pvalue_isSet = false;
    m_pvalue_isValid = false;

    m_rgd_id_isSet = false;
    m_rgd_id_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_species_type_key_isSet = false;
    m_species_type_key_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_variance_isSet = false;
    m_variance_isValid = false;
}

void OAIQTL::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQTL::fromJsonObject(QJsonObject json) {

    m_chromosome_isValid = ::OpenAPI::fromJsonValue(m_chromosome, json[QString("chromosome")]);
    m_chromosome_isSet = !json[QString("chromosome")].isNull() && m_chromosome_isValid;

    m_flank1_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_flank1_rgd_id, json[QString("flank1RgdId")]);
    m_flank1_rgd_id_isSet = !json[QString("flank1RgdId")].isNull() && m_flank1_rgd_id_isValid;

    m_flank2_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_flank2_rgd_id, json[QString("flank2RgdId")]);
    m_flank2_rgd_id_isSet = !json[QString("flank2RgdId")].isNull() && m_flank2_rgd_id_isValid;

    m_inheritance_type_isValid = ::OpenAPI::fromJsonValue(m_inheritance_type, json[QString("inheritanceType")]);
    m_inheritance_type_isSet = !json[QString("inheritanceType")].isNull() && m_inheritance_type_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_linkage_image_isValid = ::OpenAPI::fromJsonValue(m_linkage_image, json[QString("linkageImage")]);
    m_linkage_image_isSet = !json[QString("linkageImage")].isNull() && m_linkage_image_isValid;

    m_lod_isValid = ::OpenAPI::fromJsonValue(m_lod, json[QString("lod")]);
    m_lod_isSet = !json[QString("lod")].isNull() && m_lod_isValid;

    m_lod_image_isValid = ::OpenAPI::fromJsonValue(m_lod_image, json[QString("lodImage")]);
    m_lod_image_isSet = !json[QString("lodImage")].isNull() && m_lod_image_isValid;

    m_most_significant_cmo_term_isValid = ::OpenAPI::fromJsonValue(m_most_significant_cmo_term, json[QString("mostSignificantCmoTerm")]);
    m_most_significant_cmo_term_isSet = !json[QString("mostSignificantCmoTerm")].isNull() && m_most_significant_cmo_term_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_peak_offset_isValid = ::OpenAPI::fromJsonValue(m_peak_offset, json[QString("peakOffset")]);
    m_peak_offset_isSet = !json[QString("peakOffset")].isNull() && m_peak_offset_isValid;

    m_peak_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_peak_rgd_id, json[QString("peakRgdId")]);
    m_peak_rgd_id_isSet = !json[QString("peakRgdId")].isNull() && m_peak_rgd_id_isValid;

    m_pvalue_isValid = ::OpenAPI::fromJsonValue(m_pvalue, json[QString("pvalue")]);
    m_pvalue_isSet = !json[QString("pvalue")].isNull() && m_pvalue_isValid;

    m_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_rgd_id, json[QString("rgdId")]);
    m_rgd_id_isSet = !json[QString("rgdId")].isNull() && m_rgd_id_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_species_type_key_isValid = ::OpenAPI::fromJsonValue(m_species_type_key, json[QString("speciesTypeKey")]);
    m_species_type_key_isSet = !json[QString("speciesTypeKey")].isNull() && m_species_type_key_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_variance_isValid = ::OpenAPI::fromJsonValue(m_variance, json[QString("variance")]);
    m_variance_isSet = !json[QString("variance")].isNull() && m_variance_isValid;
}

QString OAIQTL::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQTL::asJsonObject() const {
    QJsonObject obj;
    if (m_chromosome_isSet) {
        obj.insert(QString("chromosome"), ::OpenAPI::toJsonValue(m_chromosome));
    }
    if (m_flank1_rgd_id_isSet) {
        obj.insert(QString("flank1RgdId"), ::OpenAPI::toJsonValue(m_flank1_rgd_id));
    }
    if (m_flank2_rgd_id_isSet) {
        obj.insert(QString("flank2RgdId"), ::OpenAPI::toJsonValue(m_flank2_rgd_id));
    }
    if (m_inheritance_type_isSet) {
        obj.insert(QString("inheritanceType"), ::OpenAPI::toJsonValue(m_inheritance_type));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_linkage_image_isSet) {
        obj.insert(QString("linkageImage"), ::OpenAPI::toJsonValue(m_linkage_image));
    }
    if (m_lod_isSet) {
        obj.insert(QString("lod"), ::OpenAPI::toJsonValue(m_lod));
    }
    if (m_lod_image_isSet) {
        obj.insert(QString("lodImage"), ::OpenAPI::toJsonValue(m_lod_image));
    }
    if (m_most_significant_cmo_term_isSet) {
        obj.insert(QString("mostSignificantCmoTerm"), ::OpenAPI::toJsonValue(m_most_significant_cmo_term));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_peak_offset_isSet) {
        obj.insert(QString("peakOffset"), ::OpenAPI::toJsonValue(m_peak_offset));
    }
    if (m_peak_rgd_id_isSet) {
        obj.insert(QString("peakRgdId"), ::OpenAPI::toJsonValue(m_peak_rgd_id));
    }
    if (m_pvalue_isSet) {
        obj.insert(QString("pvalue"), ::OpenAPI::toJsonValue(m_pvalue));
    }
    if (m_rgd_id_isSet) {
        obj.insert(QString("rgdId"), ::OpenAPI::toJsonValue(m_rgd_id));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_species_type_key_isSet) {
        obj.insert(QString("speciesTypeKey"), ::OpenAPI::toJsonValue(m_species_type_key));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_variance_isSet) {
        obj.insert(QString("variance"), ::OpenAPI::toJsonValue(m_variance));
    }
    return obj;
}

QString OAIQTL::getChromosome() const {
    return m_chromosome;
}
void OAIQTL::setChromosome(const QString &chromosome) {
    m_chromosome = chromosome;
    m_chromosome_isSet = true;
}

bool OAIQTL::is_chromosome_Set() const{
    return m_chromosome_isSet;
}

bool OAIQTL::is_chromosome_Valid() const{
    return m_chromosome_isValid;
}

qint32 OAIQTL::getFlank1RgdId() const {
    return m_flank1_rgd_id;
}
void OAIQTL::setFlank1RgdId(const qint32 &flank1_rgd_id) {
    m_flank1_rgd_id = flank1_rgd_id;
    m_flank1_rgd_id_isSet = true;
}

bool OAIQTL::is_flank1_rgd_id_Set() const{
    return m_flank1_rgd_id_isSet;
}

bool OAIQTL::is_flank1_rgd_id_Valid() const{
    return m_flank1_rgd_id_isValid;
}

qint32 OAIQTL::getFlank2RgdId() const {
    return m_flank2_rgd_id;
}
void OAIQTL::setFlank2RgdId(const qint32 &flank2_rgd_id) {
    m_flank2_rgd_id = flank2_rgd_id;
    m_flank2_rgd_id_isSet = true;
}

bool OAIQTL::is_flank2_rgd_id_Set() const{
    return m_flank2_rgd_id_isSet;
}

bool OAIQTL::is_flank2_rgd_id_Valid() const{
    return m_flank2_rgd_id_isValid;
}

QString OAIQTL::getInheritanceType() const {
    return m_inheritance_type;
}
void OAIQTL::setInheritanceType(const QString &inheritance_type) {
    m_inheritance_type = inheritance_type;
    m_inheritance_type_isSet = true;
}

bool OAIQTL::is_inheritance_type_Set() const{
    return m_inheritance_type_isSet;
}

bool OAIQTL::is_inheritance_type_Valid() const{
    return m_inheritance_type_isValid;
}

qint32 OAIQTL::getKey() const {
    return m_key;
}
void OAIQTL::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIQTL::is_key_Set() const{
    return m_key_isSet;
}

bool OAIQTL::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIQTL::getLinkageImage() const {
    return m_linkage_image;
}
void OAIQTL::setLinkageImage(const QString &linkage_image) {
    m_linkage_image = linkage_image;
    m_linkage_image_isSet = true;
}

bool OAIQTL::is_linkage_image_Set() const{
    return m_linkage_image_isSet;
}

bool OAIQTL::is_linkage_image_Valid() const{
    return m_linkage_image_isValid;
}

double OAIQTL::getLod() const {
    return m_lod;
}
void OAIQTL::setLod(const double &lod) {
    m_lod = lod;
    m_lod_isSet = true;
}

bool OAIQTL::is_lod_Set() const{
    return m_lod_isSet;
}

bool OAIQTL::is_lod_Valid() const{
    return m_lod_isValid;
}

QString OAIQTL::getLodImage() const {
    return m_lod_image;
}
void OAIQTL::setLodImage(const QString &lod_image) {
    m_lod_image = lod_image;
    m_lod_image_isSet = true;
}

bool OAIQTL::is_lod_image_Set() const{
    return m_lod_image_isSet;
}

bool OAIQTL::is_lod_image_Valid() const{
    return m_lod_image_isValid;
}

QString OAIQTL::getMostSignificantCmoTerm() const {
    return m_most_significant_cmo_term;
}
void OAIQTL::setMostSignificantCmoTerm(const QString &most_significant_cmo_term) {
    m_most_significant_cmo_term = most_significant_cmo_term;
    m_most_significant_cmo_term_isSet = true;
}

bool OAIQTL::is_most_significant_cmo_term_Set() const{
    return m_most_significant_cmo_term_isSet;
}

bool OAIQTL::is_most_significant_cmo_term_Valid() const{
    return m_most_significant_cmo_term_isValid;
}

QString OAIQTL::getName() const {
    return m_name;
}
void OAIQTL::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQTL::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQTL::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQTL::getNotes() const {
    return m_notes;
}
void OAIQTL::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIQTL::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIQTL::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIQTL::getPeakOffset() const {
    return m_peak_offset;
}
void OAIQTL::setPeakOffset(const qint32 &peak_offset) {
    m_peak_offset = peak_offset;
    m_peak_offset_isSet = true;
}

bool OAIQTL::is_peak_offset_Set() const{
    return m_peak_offset_isSet;
}

bool OAIQTL::is_peak_offset_Valid() const{
    return m_peak_offset_isValid;
}

qint32 OAIQTL::getPeakRgdId() const {
    return m_peak_rgd_id;
}
void OAIQTL::setPeakRgdId(const qint32 &peak_rgd_id) {
    m_peak_rgd_id = peak_rgd_id;
    m_peak_rgd_id_isSet = true;
}

bool OAIQTL::is_peak_rgd_id_Set() const{
    return m_peak_rgd_id_isSet;
}

bool OAIQTL::is_peak_rgd_id_Valid() const{
    return m_peak_rgd_id_isValid;
}

double OAIQTL::getPvalue() const {
    return m_pvalue;
}
void OAIQTL::setPvalue(const double &pvalue) {
    m_pvalue = pvalue;
    m_pvalue_isSet = true;
}

bool OAIQTL::is_pvalue_Set() const{
    return m_pvalue_isSet;
}

bool OAIQTL::is_pvalue_Valid() const{
    return m_pvalue_isValid;
}

qint32 OAIQTL::getRgdId() const {
    return m_rgd_id;
}
void OAIQTL::setRgdId(const qint32 &rgd_id) {
    m_rgd_id = rgd_id;
    m_rgd_id_isSet = true;
}

bool OAIQTL::is_rgd_id_Set() const{
    return m_rgd_id_isSet;
}

bool OAIQTL::is_rgd_id_Valid() const{
    return m_rgd_id_isValid;
}

QString OAIQTL::getSourceUrl() const {
    return m_source_url;
}
void OAIQTL::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIQTL::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIQTL::is_source_url_Valid() const{
    return m_source_url_isValid;
}

qint32 OAIQTL::getSpeciesTypeKey() const {
    return m_species_type_key;
}
void OAIQTL::setSpeciesTypeKey(const qint32 &species_type_key) {
    m_species_type_key = species_type_key;
    m_species_type_key_isSet = true;
}

bool OAIQTL::is_species_type_key_Set() const{
    return m_species_type_key_isSet;
}

bool OAIQTL::is_species_type_key_Valid() const{
    return m_species_type_key_isValid;
}

QString OAIQTL::getSymbol() const {
    return m_symbol;
}
void OAIQTL::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIQTL::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIQTL::is_symbol_Valid() const{
    return m_symbol_isValid;
}

double OAIQTL::getVariance() const {
    return m_variance;
}
void OAIQTL::setVariance(const double &variance) {
    m_variance = variance;
    m_variance_isSet = true;
}

bool OAIQTL::is_variance_Set() const{
    return m_variance_isSet;
}

bool OAIQTL::is_variance_Valid() const{
    return m_variance_isValid;
}

bool OAIQTL::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chromosome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flank1_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flank2_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inheritance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkage_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lod_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_significant_cmo_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvalue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQTL::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
