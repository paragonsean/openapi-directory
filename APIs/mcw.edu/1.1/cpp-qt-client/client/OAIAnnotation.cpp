/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation::OAIAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation::OAIAnnotation() {
    this->initializeModel();
}

OAIAnnotation::~OAIAnnotation() {}

void OAIAnnotation::initializeModel() {

    m_annotated_object_rgd_id_isSet = false;
    m_annotated_object_rgd_id_isValid = false;

    m_annotation_extension_isSet = false;
    m_annotation_extension_isValid = false;

    m_aspect_isSet = false;
    m_aspect_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_data_src_isSet = false;
    m_data_src_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_gene_product_form_id_isSet = false;
    m_gene_product_form_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_object_name_isSet = false;
    m_object_name_isValid = false;

    m_object_symbol_isSet = false;
    m_object_symbol_isValid = false;

    m_original_created_date_isSet = false;
    m_original_created_date_isValid = false;

    m_qualifier_isSet = false;
    m_qualifier_isValid = false;

    m_ref_rgd_id_isSet = false;
    m_ref_rgd_id_isValid = false;

    m_relative_to_isSet = false;
    m_relative_to_isValid = false;

    m_rgd_object_key_isSet = false;
    m_rgd_object_key_isValid = false;

    m_species_type_key_isSet = false;
    m_species_type_key_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_term_acc_isSet = false;
    m_term_acc_isValid = false;

    m_with_info_isSet = false;
    m_with_info_isValid = false;

    m_xref_source_isSet = false;
    m_xref_source_isValid = false;
}

void OAIAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotation::fromJsonObject(QJsonObject json) {

    m_annotated_object_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_annotated_object_rgd_id, json[QString("annotatedObjectRgdId")]);
    m_annotated_object_rgd_id_isSet = !json[QString("annotatedObjectRgdId")].isNull() && m_annotated_object_rgd_id_isValid;

    m_annotation_extension_isValid = ::OpenAPI::fromJsonValue(m_annotation_extension, json[QString("annotationExtension")]);
    m_annotation_extension_isSet = !json[QString("annotationExtension")].isNull() && m_annotation_extension_isValid;

    m_aspect_isValid = ::OpenAPI::fromJsonValue(m_aspect, json[QString("aspect")]);
    m_aspect_isSet = !json[QString("aspect")].isNull() && m_aspect_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_data_src_isValid = ::OpenAPI::fromJsonValue(m_data_src, json[QString("dataSrc")]);
    m_data_src_isSet = !json[QString("dataSrc")].isNull() && m_data_src_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_gene_product_form_id_isValid = ::OpenAPI::fromJsonValue(m_gene_product_form_id, json[QString("geneProductFormId")]);
    m_gene_product_form_id_isSet = !json[QString("geneProductFormId")].isNull() && m_gene_product_form_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_object_name_isValid = ::OpenAPI::fromJsonValue(m_object_name, json[QString("objectName")]);
    m_object_name_isSet = !json[QString("objectName")].isNull() && m_object_name_isValid;

    m_object_symbol_isValid = ::OpenAPI::fromJsonValue(m_object_symbol, json[QString("objectSymbol")]);
    m_object_symbol_isSet = !json[QString("objectSymbol")].isNull() && m_object_symbol_isValid;

    m_original_created_date_isValid = ::OpenAPI::fromJsonValue(m_original_created_date, json[QString("originalCreatedDate")]);
    m_original_created_date_isSet = !json[QString("originalCreatedDate")].isNull() && m_original_created_date_isValid;

    m_qualifier_isValid = ::OpenAPI::fromJsonValue(m_qualifier, json[QString("qualifier")]);
    m_qualifier_isSet = !json[QString("qualifier")].isNull() && m_qualifier_isValid;

    m_ref_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_ref_rgd_id, json[QString("refRgdId")]);
    m_ref_rgd_id_isSet = !json[QString("refRgdId")].isNull() && m_ref_rgd_id_isValid;

    m_relative_to_isValid = ::OpenAPI::fromJsonValue(m_relative_to, json[QString("relativeTo")]);
    m_relative_to_isSet = !json[QString("relativeTo")].isNull() && m_relative_to_isValid;

    m_rgd_object_key_isValid = ::OpenAPI::fromJsonValue(m_rgd_object_key, json[QString("rgdObjectKey")]);
    m_rgd_object_key_isSet = !json[QString("rgdObjectKey")].isNull() && m_rgd_object_key_isValid;

    m_species_type_key_isValid = ::OpenAPI::fromJsonValue(m_species_type_key, json[QString("speciesTypeKey")]);
    m_species_type_key_isSet = !json[QString("speciesTypeKey")].isNull() && m_species_type_key_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_term_acc_isValid = ::OpenAPI::fromJsonValue(m_term_acc, json[QString("termAcc")]);
    m_term_acc_isSet = !json[QString("termAcc")].isNull() && m_term_acc_isValid;

    m_with_info_isValid = ::OpenAPI::fromJsonValue(m_with_info, json[QString("withInfo")]);
    m_with_info_isSet = !json[QString("withInfo")].isNull() && m_with_info_isValid;

    m_xref_source_isValid = ::OpenAPI::fromJsonValue(m_xref_source, json[QString("xrefSource")]);
    m_xref_source_isSet = !json[QString("xrefSource")].isNull() && m_xref_source_isValid;
}

QString OAIAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotated_object_rgd_id_isSet) {
        obj.insert(QString("annotatedObjectRgdId"), ::OpenAPI::toJsonValue(m_annotated_object_rgd_id));
    }
    if (m_annotation_extension_isSet) {
        obj.insert(QString("annotationExtension"), ::OpenAPI::toJsonValue(m_annotation_extension));
    }
    if (m_aspect_isSet) {
        obj.insert(QString("aspect"), ::OpenAPI::toJsonValue(m_aspect));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_data_src_isSet) {
        obj.insert(QString("dataSrc"), ::OpenAPI::toJsonValue(m_data_src));
    }
    if (m_evidence_isSet) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_gene_product_form_id_isSet) {
        obj.insert(QString("geneProductFormId"), ::OpenAPI::toJsonValue(m_gene_product_form_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_object_name_isSet) {
        obj.insert(QString("objectName"), ::OpenAPI::toJsonValue(m_object_name));
    }
    if (m_object_symbol_isSet) {
        obj.insert(QString("objectSymbol"), ::OpenAPI::toJsonValue(m_object_symbol));
    }
    if (m_original_created_date_isSet) {
        obj.insert(QString("originalCreatedDate"), ::OpenAPI::toJsonValue(m_original_created_date));
    }
    if (m_qualifier_isSet) {
        obj.insert(QString("qualifier"), ::OpenAPI::toJsonValue(m_qualifier));
    }
    if (m_ref_rgd_id_isSet) {
        obj.insert(QString("refRgdId"), ::OpenAPI::toJsonValue(m_ref_rgd_id));
    }
    if (m_relative_to_isSet) {
        obj.insert(QString("relativeTo"), ::OpenAPI::toJsonValue(m_relative_to));
    }
    if (m_rgd_object_key_isSet) {
        obj.insert(QString("rgdObjectKey"), ::OpenAPI::toJsonValue(m_rgd_object_key));
    }
    if (m_species_type_key_isSet) {
        obj.insert(QString("speciesTypeKey"), ::OpenAPI::toJsonValue(m_species_type_key));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_term_acc_isSet) {
        obj.insert(QString("termAcc"), ::OpenAPI::toJsonValue(m_term_acc));
    }
    if (m_with_info_isSet) {
        obj.insert(QString("withInfo"), ::OpenAPI::toJsonValue(m_with_info));
    }
    if (m_xref_source_isSet) {
        obj.insert(QString("xrefSource"), ::OpenAPI::toJsonValue(m_xref_source));
    }
    return obj;
}

qint32 OAIAnnotation::getAnnotatedObjectRgdId() const {
    return m_annotated_object_rgd_id;
}
void OAIAnnotation::setAnnotatedObjectRgdId(const qint32 &annotated_object_rgd_id) {
    m_annotated_object_rgd_id = annotated_object_rgd_id;
    m_annotated_object_rgd_id_isSet = true;
}

bool OAIAnnotation::is_annotated_object_rgd_id_Set() const{
    return m_annotated_object_rgd_id_isSet;
}

bool OAIAnnotation::is_annotated_object_rgd_id_Valid() const{
    return m_annotated_object_rgd_id_isValid;
}

QString OAIAnnotation::getAnnotationExtension() const {
    return m_annotation_extension;
}
void OAIAnnotation::setAnnotationExtension(const QString &annotation_extension) {
    m_annotation_extension = annotation_extension;
    m_annotation_extension_isSet = true;
}

bool OAIAnnotation::is_annotation_extension_Set() const{
    return m_annotation_extension_isSet;
}

bool OAIAnnotation::is_annotation_extension_Valid() const{
    return m_annotation_extension_isValid;
}

QString OAIAnnotation::getAspect() const {
    return m_aspect;
}
void OAIAnnotation::setAspect(const QString &aspect) {
    m_aspect = aspect;
    m_aspect_isSet = true;
}

bool OAIAnnotation::is_aspect_Set() const{
    return m_aspect_isSet;
}

bool OAIAnnotation::is_aspect_Valid() const{
    return m_aspect_isValid;
}

qint32 OAIAnnotation::getCreatedBy() const {
    return m_created_by;
}
void OAIAnnotation::setCreatedBy(const qint32 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIAnnotation::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIAnnotation::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIAnnotation::getCreatedDate() const {
    return m_created_date;
}
void OAIAnnotation::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAnnotation::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAnnotation::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIAnnotation::getDataSrc() const {
    return m_data_src;
}
void OAIAnnotation::setDataSrc(const QString &data_src) {
    m_data_src = data_src;
    m_data_src_isSet = true;
}

bool OAIAnnotation::is_data_src_Set() const{
    return m_data_src_isSet;
}

bool OAIAnnotation::is_data_src_Valid() const{
    return m_data_src_isValid;
}

QString OAIAnnotation::getEvidence() const {
    return m_evidence;
}
void OAIAnnotation::setEvidence(const QString &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAIAnnotation::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAIAnnotation::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QString OAIAnnotation::getGeneProductFormId() const {
    return m_gene_product_form_id;
}
void OAIAnnotation::setGeneProductFormId(const QString &gene_product_form_id) {
    m_gene_product_form_id = gene_product_form_id;
    m_gene_product_form_id_isSet = true;
}

bool OAIAnnotation::is_gene_product_form_id_Set() const{
    return m_gene_product_form_id_isSet;
}

bool OAIAnnotation::is_gene_product_form_id_Valid() const{
    return m_gene_product_form_id_isValid;
}

qint32 OAIAnnotation::getKey() const {
    return m_key;
}
void OAIAnnotation::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAnnotation::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAnnotation::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIAnnotation::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIAnnotation::setLastModifiedBy(const qint32 &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIAnnotation::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIAnnotation::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QDateTime OAIAnnotation::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIAnnotation::setLastModifiedDate(const QDateTime &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIAnnotation::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIAnnotation::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIAnnotation::getNotes() const {
    return m_notes;
}
void OAIAnnotation::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIAnnotation::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIAnnotation::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIAnnotation::getObjectName() const {
    return m_object_name;
}
void OAIAnnotation::setObjectName(const QString &object_name) {
    m_object_name = object_name;
    m_object_name_isSet = true;
}

bool OAIAnnotation::is_object_name_Set() const{
    return m_object_name_isSet;
}

bool OAIAnnotation::is_object_name_Valid() const{
    return m_object_name_isValid;
}

QString OAIAnnotation::getObjectSymbol() const {
    return m_object_symbol;
}
void OAIAnnotation::setObjectSymbol(const QString &object_symbol) {
    m_object_symbol = object_symbol;
    m_object_symbol_isSet = true;
}

bool OAIAnnotation::is_object_symbol_Set() const{
    return m_object_symbol_isSet;
}

bool OAIAnnotation::is_object_symbol_Valid() const{
    return m_object_symbol_isValid;
}

QDateTime OAIAnnotation::getOriginalCreatedDate() const {
    return m_original_created_date;
}
void OAIAnnotation::setOriginalCreatedDate(const QDateTime &original_created_date) {
    m_original_created_date = original_created_date;
    m_original_created_date_isSet = true;
}

bool OAIAnnotation::is_original_created_date_Set() const{
    return m_original_created_date_isSet;
}

bool OAIAnnotation::is_original_created_date_Valid() const{
    return m_original_created_date_isValid;
}

QString OAIAnnotation::getQualifier() const {
    return m_qualifier;
}
void OAIAnnotation::setQualifier(const QString &qualifier) {
    m_qualifier = qualifier;
    m_qualifier_isSet = true;
}

bool OAIAnnotation::is_qualifier_Set() const{
    return m_qualifier_isSet;
}

bool OAIAnnotation::is_qualifier_Valid() const{
    return m_qualifier_isValid;
}

qint32 OAIAnnotation::getRefRgdId() const {
    return m_ref_rgd_id;
}
void OAIAnnotation::setRefRgdId(const qint32 &ref_rgd_id) {
    m_ref_rgd_id = ref_rgd_id;
    m_ref_rgd_id_isSet = true;
}

bool OAIAnnotation::is_ref_rgd_id_Set() const{
    return m_ref_rgd_id_isSet;
}

bool OAIAnnotation::is_ref_rgd_id_Valid() const{
    return m_ref_rgd_id_isValid;
}

QString OAIAnnotation::getRelativeTo() const {
    return m_relative_to;
}
void OAIAnnotation::setRelativeTo(const QString &relative_to) {
    m_relative_to = relative_to;
    m_relative_to_isSet = true;
}

bool OAIAnnotation::is_relative_to_Set() const{
    return m_relative_to_isSet;
}

bool OAIAnnotation::is_relative_to_Valid() const{
    return m_relative_to_isValid;
}

qint32 OAIAnnotation::getRgdObjectKey() const {
    return m_rgd_object_key;
}
void OAIAnnotation::setRgdObjectKey(const qint32 &rgd_object_key) {
    m_rgd_object_key = rgd_object_key;
    m_rgd_object_key_isSet = true;
}

bool OAIAnnotation::is_rgd_object_key_Set() const{
    return m_rgd_object_key_isSet;
}

bool OAIAnnotation::is_rgd_object_key_Valid() const{
    return m_rgd_object_key_isValid;
}

qint32 OAIAnnotation::getSpeciesTypeKey() const {
    return m_species_type_key;
}
void OAIAnnotation::setSpeciesTypeKey(const qint32 &species_type_key) {
    m_species_type_key = species_type_key;
    m_species_type_key_isSet = true;
}

bool OAIAnnotation::is_species_type_key_Set() const{
    return m_species_type_key_isSet;
}

bool OAIAnnotation::is_species_type_key_Valid() const{
    return m_species_type_key_isValid;
}

QString OAIAnnotation::getTerm() const {
    return m_term;
}
void OAIAnnotation::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIAnnotation::is_term_Set() const{
    return m_term_isSet;
}

bool OAIAnnotation::is_term_Valid() const{
    return m_term_isValid;
}

QString OAIAnnotation::getTermAcc() const {
    return m_term_acc;
}
void OAIAnnotation::setTermAcc(const QString &term_acc) {
    m_term_acc = term_acc;
    m_term_acc_isSet = true;
}

bool OAIAnnotation::is_term_acc_Set() const{
    return m_term_acc_isSet;
}

bool OAIAnnotation::is_term_acc_Valid() const{
    return m_term_acc_isValid;
}

QString OAIAnnotation::getWithInfo() const {
    return m_with_info;
}
void OAIAnnotation::setWithInfo(const QString &with_info) {
    m_with_info = with_info;
    m_with_info_isSet = true;
}

bool OAIAnnotation::is_with_info_Set() const{
    return m_with_info_isSet;
}

bool OAIAnnotation::is_with_info_Valid() const{
    return m_with_info_isValid;
}

QString OAIAnnotation::getXrefSource() const {
    return m_xref_source;
}
void OAIAnnotation::setXrefSource(const QString &xref_source) {
    m_xref_source = xref_source;
    m_xref_source_isSet = true;
}

bool OAIAnnotation::is_xref_source_Set() const{
    return m_xref_source_isSet;
}

bool OAIAnnotation::is_xref_source_Valid() const{
    return m_xref_source_isValid;
}

bool OAIAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotated_object_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gene_product_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgd_object_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_acc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xref_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
