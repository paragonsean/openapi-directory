/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapPair::OAIMapPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapPair::OAIMapPair() {
    this->initializeModel();
}

OAIMapPair::~OAIMapPair() {}

void OAIMapPair::initializeModel() {

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIMapPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapPair::fromJsonObject(QJsonObject json) {

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIMapPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapPair::asJsonObject() const {
    QJsonObject obj;
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

QString OAIMapPair::getKeyValue() const {
    return m_key_value;
}
void OAIMapPair::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIMapPair::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIMapPair::is_key_value_Valid() const{
    return m_key_value_isValid;
}

QString OAIMapPair::getStringValue() const {
    return m_string_value;
}
void OAIMapPair::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIMapPair::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIMapPair::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIMapPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
