/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChromosome.h
 *
 * 
 */

#ifndef OAIChromosome_H
#define OAIChromosome_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChromosome : public OAIObject {
public:
    OAIChromosome();
    OAIChromosome(QString json);
    ~OAIChromosome() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChromosome() const;
    void setChromosome(const QString &chromosome);
    bool is_chromosome_Set() const;
    bool is_chromosome_Valid() const;

    qint32 getContigCount() const;
    void setContigCount(const qint32 &contig_count);
    bool is_contig_count_Set() const;
    bool is_contig_count_Valid() const;

    qint32 getGapCount() const;
    void setGapCount(const qint32 &gap_count);
    bool is_gap_count_Set() const;
    bool is_gap_count_Valid() const;

    qint32 getGapLength() const;
    void setGapLength(const qint32 &gap_length);
    bool is_gap_length_Set() const;
    bool is_gap_length_Valid() const;

    QString getGenbankId() const;
    void setGenbankId(const QString &genbank_id);
    bool is_genbank_id_Set() const;
    bool is_genbank_id_Valid() const;

    qint32 getMapKey() const;
    void setMapKey(const qint32 &map_key);
    bool is_map_key_Set() const;
    bool is_map_key_Valid() const;

    qint32 getOrdinalNumber() const;
    void setOrdinalNumber(const qint32 &ordinal_number);
    bool is_ordinal_number_Set() const;
    bool is_ordinal_number_Valid() const;

    QString getRefseqId() const;
    void setRefseqId(const QString &refseq_id);
    bool is_refseq_id_Set() const;
    bool is_refseq_id_Valid() const;

    qint32 getSeqLength() const;
    void setSeqLength(const qint32 &seq_length);
    bool is_seq_length_Set() const;
    bool is_seq_length_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chromosome;
    bool m_chromosome_isSet;
    bool m_chromosome_isValid;

    qint32 m_contig_count;
    bool m_contig_count_isSet;
    bool m_contig_count_isValid;

    qint32 m_gap_count;
    bool m_gap_count_isSet;
    bool m_gap_count_isValid;

    qint32 m_gap_length;
    bool m_gap_length_isSet;
    bool m_gap_length_isValid;

    QString m_genbank_id;
    bool m_genbank_id_isSet;
    bool m_genbank_id_isValid;

    qint32 m_map_key;
    bool m_map_key_isSet;
    bool m_map_key_isValid;

    qint32 m_ordinal_number;
    bool m_ordinal_number_isSet;
    bool m_ordinal_number_isValid;

    QString m_refseq_id;
    bool m_refseq_id_isSet;
    bool m_refseq_id_isValid;

    qint32 m_seq_length;
    bool m_seq_length_isSet;
    bool m_seq_length_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChromosome)

#endif // OAIChromosome_H
