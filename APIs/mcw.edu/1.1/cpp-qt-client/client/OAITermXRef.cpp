/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITermXRef.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITermXRef::OAITermXRef(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITermXRef::OAITermXRef() {
    this->initializeModel();
}

OAITermXRef::~OAITermXRef() {}

void OAITermXRef::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_term_acc_isSet = false;
    m_term_acc_isValid = false;

    m_xref_description_isSet = false;
    m_xref_description_isValid = false;

    m_xref_value_isSet = false;
    m_xref_value_isValid = false;
}

void OAITermXRef::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITermXRef::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_term_acc_isValid = ::OpenAPI::fromJsonValue(m_term_acc, json[QString("termAcc")]);
    m_term_acc_isSet = !json[QString("termAcc")].isNull() && m_term_acc_isValid;

    m_xref_description_isValid = ::OpenAPI::fromJsonValue(m_xref_description, json[QString("xrefDescription")]);
    m_xref_description_isSet = !json[QString("xrefDescription")].isNull() && m_xref_description_isValid;

    m_xref_value_isValid = ::OpenAPI::fromJsonValue(m_xref_value, json[QString("xrefValue")]);
    m_xref_value_isSet = !json[QString("xrefValue")].isNull() && m_xref_value_isValid;
}

QString OAITermXRef::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITermXRef::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_term_acc_isSet) {
        obj.insert(QString("termAcc"), ::OpenAPI::toJsonValue(m_term_acc));
    }
    if (m_xref_description_isSet) {
        obj.insert(QString("xrefDescription"), ::OpenAPI::toJsonValue(m_xref_description));
    }
    if (m_xref_value_isSet) {
        obj.insert(QString("xrefValue"), ::OpenAPI::toJsonValue(m_xref_value));
    }
    return obj;
}

qint32 OAITermXRef::getKey() const {
    return m_key;
}
void OAITermXRef::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITermXRef::is_key_Set() const{
    return m_key_isSet;
}

bool OAITermXRef::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITermXRef::getTermAcc() const {
    return m_term_acc;
}
void OAITermXRef::setTermAcc(const QString &term_acc) {
    m_term_acc = term_acc;
    m_term_acc_isSet = true;
}

bool OAITermXRef::is_term_acc_Set() const{
    return m_term_acc_isSet;
}

bool OAITermXRef::is_term_acc_Valid() const{
    return m_term_acc_isValid;
}

QString OAITermXRef::getXrefDescription() const {
    return m_xref_description;
}
void OAITermXRef::setXrefDescription(const QString &xref_description) {
    m_xref_description = xref_description;
    m_xref_description_isSet = true;
}

bool OAITermXRef::is_xref_description_Set() const{
    return m_xref_description_isSet;
}

bool OAITermXRef::is_xref_description_Valid() const{
    return m_xref_description_isValid;
}

QString OAITermXRef::getXrefValue() const {
    return m_xref_value;
}
void OAITermXRef::setXrefValue(const QString &xref_value) {
    m_xref_value = xref_value;
    m_xref_value_isSet = true;
}

bool OAITermXRef::is_xref_value_Set() const{
    return m_xref_value_isSet;
}

bool OAITermXRef::is_xref_value_Valid() const{
    return m_xref_value_isValid;
}

bool OAITermXRef::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_acc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xref_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xref_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITermXRef::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
