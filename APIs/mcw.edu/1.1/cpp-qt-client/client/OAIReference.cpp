/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReference::OAIReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReference::OAIReference() {
    this->initializeModel();
}

OAIReference::~OAIReference() {}

void OAIReference::initializeModel() {

    m_citation_isSet = false;
    m_citation_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_editors_isSet = false;
    m_editors_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_pub_date_isSet = false;
    m_pub_date_isValid = false;

    m_pub_status_isSet = false;
    m_pub_status_isValid = false;

    m_publication_isSet = false;
    m_publication_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_publisher_city_isSet = false;
    m_publisher_city_isValid = false;

    m_ref_abstract_isSet = false;
    m_ref_abstract_isValid = false;

    m_reference_type_isSet = false;
    m_reference_type_isValid = false;

    m_rgd_id_isSet = false;
    m_rgd_id_isValid = false;

    m_species_type_key_isSet = false;
    m_species_type_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_web_reference_isSet = false;
    m_url_web_reference_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReference::fromJsonObject(QJsonObject json) {

    m_citation_isValid = ::OpenAPI::fromJsonValue(m_citation, json[QString("citation")]);
    m_citation_isSet = !json[QString("citation")].isNull() && m_citation_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_editors_isValid = ::OpenAPI::fromJsonValue(m_editors, json[QString("editors")]);
    m_editors_isSet = !json[QString("editors")].isNull() && m_editors_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_pub_date_isValid = ::OpenAPI::fromJsonValue(m_pub_date, json[QString("pubDate")]);
    m_pub_date_isSet = !json[QString("pubDate")].isNull() && m_pub_date_isValid;

    m_pub_status_isValid = ::OpenAPI::fromJsonValue(m_pub_status, json[QString("pubStatus")]);
    m_pub_status_isSet = !json[QString("pubStatus")].isNull() && m_pub_status_isValid;

    m_publication_isValid = ::OpenAPI::fromJsonValue(m_publication, json[QString("publication")]);
    m_publication_isSet = !json[QString("publication")].isNull() && m_publication_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_publisher_city_isValid = ::OpenAPI::fromJsonValue(m_publisher_city, json[QString("publisherCity")]);
    m_publisher_city_isSet = !json[QString("publisherCity")].isNull() && m_publisher_city_isValid;

    m_ref_abstract_isValid = ::OpenAPI::fromJsonValue(m_ref_abstract, json[QString("refAbstract")]);
    m_ref_abstract_isSet = !json[QString("refAbstract")].isNull() && m_ref_abstract_isValid;

    m_reference_type_isValid = ::OpenAPI::fromJsonValue(m_reference_type, json[QString("referenceType")]);
    m_reference_type_isSet = !json[QString("referenceType")].isNull() && m_reference_type_isValid;

    m_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_rgd_id, json[QString("rgdId")]);
    m_rgd_id_isSet = !json[QString("rgdId")].isNull() && m_rgd_id_isValid;

    m_species_type_key_isValid = ::OpenAPI::fromJsonValue(m_species_type_key, json[QString("speciesTypeKey")]);
    m_species_type_key_isSet = !json[QString("speciesTypeKey")].isNull() && m_species_type_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_web_reference_isValid = ::OpenAPI::fromJsonValue(m_url_web_reference, json[QString("urlWebReference")]);
    m_url_web_reference_isSet = !json[QString("urlWebReference")].isNull() && m_url_web_reference_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReference::asJsonObject() const {
    QJsonObject obj;
    if (m_citation_isSet) {
        obj.insert(QString("citation"), ::OpenAPI::toJsonValue(m_citation));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_editors_isSet) {
        obj.insert(QString("editors"), ::OpenAPI::toJsonValue(m_editors));
    }
    if (m_issue_isSet) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_pub_date_isSet) {
        obj.insert(QString("pubDate"), ::OpenAPI::toJsonValue(m_pub_date));
    }
    if (m_pub_status_isSet) {
        obj.insert(QString("pubStatus"), ::OpenAPI::toJsonValue(m_pub_status));
    }
    if (m_publication_isSet) {
        obj.insert(QString("publication"), ::OpenAPI::toJsonValue(m_publication));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_publisher_city_isSet) {
        obj.insert(QString("publisherCity"), ::OpenAPI::toJsonValue(m_publisher_city));
    }
    if (m_ref_abstract_isSet) {
        obj.insert(QString("refAbstract"), ::OpenAPI::toJsonValue(m_ref_abstract));
    }
    if (m_reference_type_isSet) {
        obj.insert(QString("referenceType"), ::OpenAPI::toJsonValue(m_reference_type));
    }
    if (m_rgd_id_isSet) {
        obj.insert(QString("rgdId"), ::OpenAPI::toJsonValue(m_rgd_id));
    }
    if (m_species_type_key_isSet) {
        obj.insert(QString("speciesTypeKey"), ::OpenAPI::toJsonValue(m_species_type_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_web_reference_isSet) {
        obj.insert(QString("urlWebReference"), ::OpenAPI::toJsonValue(m_url_web_reference));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

QString OAIReference::getCitation() const {
    return m_citation;
}
void OAIReference::setCitation(const QString &citation) {
    m_citation = citation;
    m_citation_isSet = true;
}

bool OAIReference::is_citation_Set() const{
    return m_citation_isSet;
}

bool OAIReference::is_citation_Valid() const{
    return m_citation_isValid;
}

QString OAIReference::getDoi() const {
    return m_doi;
}
void OAIReference::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIReference::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIReference::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAIReference::getEditors() const {
    return m_editors;
}
void OAIReference::setEditors(const QString &editors) {
    m_editors = editors;
    m_editors_isSet = true;
}

bool OAIReference::is_editors_Set() const{
    return m_editors_isSet;
}

bool OAIReference::is_editors_Valid() const{
    return m_editors_isValid;
}

QString OAIReference::getIssue() const {
    return m_issue;
}
void OAIReference::setIssue(const QString &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIReference::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIReference::is_issue_Valid() const{
    return m_issue_isValid;
}

qint32 OAIReference::getKey() const {
    return m_key;
}
void OAIReference::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIReference::is_key_Set() const{
    return m_key_isSet;
}

bool OAIReference::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIReference::getNotes() const {
    return m_notes;
}
void OAIReference::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIReference::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIReference::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIReference::getPages() const {
    return m_pages;
}
void OAIReference::setPages(const QString &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIReference::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIReference::is_pages_Valid() const{
    return m_pages_isValid;
}

QDateTime OAIReference::getPubDate() const {
    return m_pub_date;
}
void OAIReference::setPubDate(const QDateTime &pub_date) {
    m_pub_date = pub_date;
    m_pub_date_isSet = true;
}

bool OAIReference::is_pub_date_Set() const{
    return m_pub_date_isSet;
}

bool OAIReference::is_pub_date_Valid() const{
    return m_pub_date_isValid;
}

QString OAIReference::getPubStatus() const {
    return m_pub_status;
}
void OAIReference::setPubStatus(const QString &pub_status) {
    m_pub_status = pub_status;
    m_pub_status_isSet = true;
}

bool OAIReference::is_pub_status_Set() const{
    return m_pub_status_isSet;
}

bool OAIReference::is_pub_status_Valid() const{
    return m_pub_status_isValid;
}

QString OAIReference::getPublication() const {
    return m_publication;
}
void OAIReference::setPublication(const QString &publication) {
    m_publication = publication;
    m_publication_isSet = true;
}

bool OAIReference::is_publication_Set() const{
    return m_publication_isSet;
}

bool OAIReference::is_publication_Valid() const{
    return m_publication_isValid;
}

QString OAIReference::getPublisher() const {
    return m_publisher;
}
void OAIReference::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIReference::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIReference::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIReference::getPublisherCity() const {
    return m_publisher_city;
}
void OAIReference::setPublisherCity(const QString &publisher_city) {
    m_publisher_city = publisher_city;
    m_publisher_city_isSet = true;
}

bool OAIReference::is_publisher_city_Set() const{
    return m_publisher_city_isSet;
}

bool OAIReference::is_publisher_city_Valid() const{
    return m_publisher_city_isValid;
}

QString OAIReference::getRefAbstract() const {
    return m_ref_abstract;
}
void OAIReference::setRefAbstract(const QString &ref_abstract) {
    m_ref_abstract = ref_abstract;
    m_ref_abstract_isSet = true;
}

bool OAIReference::is_ref_abstract_Set() const{
    return m_ref_abstract_isSet;
}

bool OAIReference::is_ref_abstract_Valid() const{
    return m_ref_abstract_isValid;
}

QString OAIReference::getReferenceType() const {
    return m_reference_type;
}
void OAIReference::setReferenceType(const QString &reference_type) {
    m_reference_type = reference_type;
    m_reference_type_isSet = true;
}

bool OAIReference::is_reference_type_Set() const{
    return m_reference_type_isSet;
}

bool OAIReference::is_reference_type_Valid() const{
    return m_reference_type_isValid;
}

qint32 OAIReference::getRgdId() const {
    return m_rgd_id;
}
void OAIReference::setRgdId(const qint32 &rgd_id) {
    m_rgd_id = rgd_id;
    m_rgd_id_isSet = true;
}

bool OAIReference::is_rgd_id_Set() const{
    return m_rgd_id_isSet;
}

bool OAIReference::is_rgd_id_Valid() const{
    return m_rgd_id_isValid;
}

qint32 OAIReference::getSpeciesTypeKey() const {
    return m_species_type_key;
}
void OAIReference::setSpeciesTypeKey(const qint32 &species_type_key) {
    m_species_type_key = species_type_key;
    m_species_type_key_isSet = true;
}

bool OAIReference::is_species_type_key_Set() const{
    return m_species_type_key_isSet;
}

bool OAIReference::is_species_type_key_Valid() const{
    return m_species_type_key_isValid;
}

QString OAIReference::getTitle() const {
    return m_title;
}
void OAIReference::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReference::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReference::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIReference::getUrlWebReference() const {
    return m_url_web_reference;
}
void OAIReference::setUrlWebReference(const QString &url_web_reference) {
    m_url_web_reference = url_web_reference;
    m_url_web_reference_isSet = true;
}

bool OAIReference::is_url_web_reference_Set() const{
    return m_url_web_reference_isSet;
}

bool OAIReference::is_url_web_reference_Valid() const{
    return m_url_web_reference_isValid;
}

QString OAIReference::getVolume() const {
    return m_volume;
}
void OAIReference::setVolume(const QString &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIReference::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIReference::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_web_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
