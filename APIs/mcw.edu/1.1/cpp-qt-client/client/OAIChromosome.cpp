/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChromosome.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChromosome::OAIChromosome(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChromosome::OAIChromosome() {
    this->initializeModel();
}

OAIChromosome::~OAIChromosome() {}

void OAIChromosome::initializeModel() {

    m_chromosome_isSet = false;
    m_chromosome_isValid = false;

    m_contig_count_isSet = false;
    m_contig_count_isValid = false;

    m_gap_count_isSet = false;
    m_gap_count_isValid = false;

    m_gap_length_isSet = false;
    m_gap_length_isValid = false;

    m_genbank_id_isSet = false;
    m_genbank_id_isValid = false;

    m_map_key_isSet = false;
    m_map_key_isValid = false;

    m_ordinal_number_isSet = false;
    m_ordinal_number_isValid = false;

    m_refseq_id_isSet = false;
    m_refseq_id_isValid = false;

    m_seq_length_isSet = false;
    m_seq_length_isValid = false;
}

void OAIChromosome::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChromosome::fromJsonObject(QJsonObject json) {

    m_chromosome_isValid = ::OpenAPI::fromJsonValue(m_chromosome, json[QString("chromosome")]);
    m_chromosome_isSet = !json[QString("chromosome")].isNull() && m_chromosome_isValid;

    m_contig_count_isValid = ::OpenAPI::fromJsonValue(m_contig_count, json[QString("contigCount")]);
    m_contig_count_isSet = !json[QString("contigCount")].isNull() && m_contig_count_isValid;

    m_gap_count_isValid = ::OpenAPI::fromJsonValue(m_gap_count, json[QString("gapCount")]);
    m_gap_count_isSet = !json[QString("gapCount")].isNull() && m_gap_count_isValid;

    m_gap_length_isValid = ::OpenAPI::fromJsonValue(m_gap_length, json[QString("gapLength")]);
    m_gap_length_isSet = !json[QString("gapLength")].isNull() && m_gap_length_isValid;

    m_genbank_id_isValid = ::OpenAPI::fromJsonValue(m_genbank_id, json[QString("genbankId")]);
    m_genbank_id_isSet = !json[QString("genbankId")].isNull() && m_genbank_id_isValid;

    m_map_key_isValid = ::OpenAPI::fromJsonValue(m_map_key, json[QString("mapKey")]);
    m_map_key_isSet = !json[QString("mapKey")].isNull() && m_map_key_isValid;

    m_ordinal_number_isValid = ::OpenAPI::fromJsonValue(m_ordinal_number, json[QString("ordinalNumber")]);
    m_ordinal_number_isSet = !json[QString("ordinalNumber")].isNull() && m_ordinal_number_isValid;

    m_refseq_id_isValid = ::OpenAPI::fromJsonValue(m_refseq_id, json[QString("refseqId")]);
    m_refseq_id_isSet = !json[QString("refseqId")].isNull() && m_refseq_id_isValid;

    m_seq_length_isValid = ::OpenAPI::fromJsonValue(m_seq_length, json[QString("seqLength")]);
    m_seq_length_isSet = !json[QString("seqLength")].isNull() && m_seq_length_isValid;
}

QString OAIChromosome::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChromosome::asJsonObject() const {
    QJsonObject obj;
    if (m_chromosome_isSet) {
        obj.insert(QString("chromosome"), ::OpenAPI::toJsonValue(m_chromosome));
    }
    if (m_contig_count_isSet) {
        obj.insert(QString("contigCount"), ::OpenAPI::toJsonValue(m_contig_count));
    }
    if (m_gap_count_isSet) {
        obj.insert(QString("gapCount"), ::OpenAPI::toJsonValue(m_gap_count));
    }
    if (m_gap_length_isSet) {
        obj.insert(QString("gapLength"), ::OpenAPI::toJsonValue(m_gap_length));
    }
    if (m_genbank_id_isSet) {
        obj.insert(QString("genbankId"), ::OpenAPI::toJsonValue(m_genbank_id));
    }
    if (m_map_key_isSet) {
        obj.insert(QString("mapKey"), ::OpenAPI::toJsonValue(m_map_key));
    }
    if (m_ordinal_number_isSet) {
        obj.insert(QString("ordinalNumber"), ::OpenAPI::toJsonValue(m_ordinal_number));
    }
    if (m_refseq_id_isSet) {
        obj.insert(QString("refseqId"), ::OpenAPI::toJsonValue(m_refseq_id));
    }
    if (m_seq_length_isSet) {
        obj.insert(QString("seqLength"), ::OpenAPI::toJsonValue(m_seq_length));
    }
    return obj;
}

QString OAIChromosome::getChromosome() const {
    return m_chromosome;
}
void OAIChromosome::setChromosome(const QString &chromosome) {
    m_chromosome = chromosome;
    m_chromosome_isSet = true;
}

bool OAIChromosome::is_chromosome_Set() const{
    return m_chromosome_isSet;
}

bool OAIChromosome::is_chromosome_Valid() const{
    return m_chromosome_isValid;
}

qint32 OAIChromosome::getContigCount() const {
    return m_contig_count;
}
void OAIChromosome::setContigCount(const qint32 &contig_count) {
    m_contig_count = contig_count;
    m_contig_count_isSet = true;
}

bool OAIChromosome::is_contig_count_Set() const{
    return m_contig_count_isSet;
}

bool OAIChromosome::is_contig_count_Valid() const{
    return m_contig_count_isValid;
}

qint32 OAIChromosome::getGapCount() const {
    return m_gap_count;
}
void OAIChromosome::setGapCount(const qint32 &gap_count) {
    m_gap_count = gap_count;
    m_gap_count_isSet = true;
}

bool OAIChromosome::is_gap_count_Set() const{
    return m_gap_count_isSet;
}

bool OAIChromosome::is_gap_count_Valid() const{
    return m_gap_count_isValid;
}

qint32 OAIChromosome::getGapLength() const {
    return m_gap_length;
}
void OAIChromosome::setGapLength(const qint32 &gap_length) {
    m_gap_length = gap_length;
    m_gap_length_isSet = true;
}

bool OAIChromosome::is_gap_length_Set() const{
    return m_gap_length_isSet;
}

bool OAIChromosome::is_gap_length_Valid() const{
    return m_gap_length_isValid;
}

QString OAIChromosome::getGenbankId() const {
    return m_genbank_id;
}
void OAIChromosome::setGenbankId(const QString &genbank_id) {
    m_genbank_id = genbank_id;
    m_genbank_id_isSet = true;
}

bool OAIChromosome::is_genbank_id_Set() const{
    return m_genbank_id_isSet;
}

bool OAIChromosome::is_genbank_id_Valid() const{
    return m_genbank_id_isValid;
}

qint32 OAIChromosome::getMapKey() const {
    return m_map_key;
}
void OAIChromosome::setMapKey(const qint32 &map_key) {
    m_map_key = map_key;
    m_map_key_isSet = true;
}

bool OAIChromosome::is_map_key_Set() const{
    return m_map_key_isSet;
}

bool OAIChromosome::is_map_key_Valid() const{
    return m_map_key_isValid;
}

qint32 OAIChromosome::getOrdinalNumber() const {
    return m_ordinal_number;
}
void OAIChromosome::setOrdinalNumber(const qint32 &ordinal_number) {
    m_ordinal_number = ordinal_number;
    m_ordinal_number_isSet = true;
}

bool OAIChromosome::is_ordinal_number_Set() const{
    return m_ordinal_number_isSet;
}

bool OAIChromosome::is_ordinal_number_Valid() const{
    return m_ordinal_number_isValid;
}

QString OAIChromosome::getRefseqId() const {
    return m_refseq_id;
}
void OAIChromosome::setRefseqId(const QString &refseq_id) {
    m_refseq_id = refseq_id;
    m_refseq_id_isSet = true;
}

bool OAIChromosome::is_refseq_id_Set() const{
    return m_refseq_id_isSet;
}

bool OAIChromosome::is_refseq_id_Valid() const{
    return m_refseq_id_isValid;
}

qint32 OAIChromosome::getSeqLength() const {
    return m_seq_length;
}
void OAIChromosome::setSeqLength(const qint32 &seq_length) {
    m_seq_length = seq_length;
    m_seq_length_isSet = true;
}

bool OAIChromosome::is_seq_length_Set() const{
    return m_seq_length_isSet;
}

bool OAIChromosome::is_seq_length_Valid() const{
    return m_seq_length_isValid;
}

bool OAIChromosome::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chromosome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contig_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gap_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gap_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genbank_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refseq_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChromosome::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
