/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQTL.h
 *
 * 
 */

#ifndef OAIQTL_H
#define OAIQTL_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQTL : public OAIObject {
public:
    OAIQTL();
    OAIQTL(QString json);
    ~OAIQTL() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChromosome() const;
    void setChromosome(const QString &chromosome);
    bool is_chromosome_Set() const;
    bool is_chromosome_Valid() const;

    qint32 getFlank1RgdId() const;
    void setFlank1RgdId(const qint32 &flank1_rgd_id);
    bool is_flank1_rgd_id_Set() const;
    bool is_flank1_rgd_id_Valid() const;

    qint32 getFlank2RgdId() const;
    void setFlank2RgdId(const qint32 &flank2_rgd_id);
    bool is_flank2_rgd_id_Set() const;
    bool is_flank2_rgd_id_Valid() const;

    QString getInheritanceType() const;
    void setInheritanceType(const QString &inheritance_type);
    bool is_inheritance_type_Set() const;
    bool is_inheritance_type_Valid() const;

    qint32 getKey() const;
    void setKey(const qint32 &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getLinkageImage() const;
    void setLinkageImage(const QString &linkage_image);
    bool is_linkage_image_Set() const;
    bool is_linkage_image_Valid() const;

    double getLod() const;
    void setLod(const double &lod);
    bool is_lod_Set() const;
    bool is_lod_Valid() const;

    QString getLodImage() const;
    void setLodImage(const QString &lod_image);
    bool is_lod_image_Set() const;
    bool is_lod_image_Valid() const;

    QString getMostSignificantCmoTerm() const;
    void setMostSignificantCmoTerm(const QString &most_significant_cmo_term);
    bool is_most_significant_cmo_term_Set() const;
    bool is_most_significant_cmo_term_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint32 getPeakOffset() const;
    void setPeakOffset(const qint32 &peak_offset);
    bool is_peak_offset_Set() const;
    bool is_peak_offset_Valid() const;

    qint32 getPeakRgdId() const;
    void setPeakRgdId(const qint32 &peak_rgd_id);
    bool is_peak_rgd_id_Set() const;
    bool is_peak_rgd_id_Valid() const;

    double getPvalue() const;
    void setPvalue(const double &pvalue);
    bool is_pvalue_Set() const;
    bool is_pvalue_Valid() const;

    qint32 getRgdId() const;
    void setRgdId(const qint32 &rgd_id);
    bool is_rgd_id_Set() const;
    bool is_rgd_id_Valid() const;

    QString getSourceUrl() const;
    void setSourceUrl(const QString &source_url);
    bool is_source_url_Set() const;
    bool is_source_url_Valid() const;

    qint32 getSpeciesTypeKey() const;
    void setSpeciesTypeKey(const qint32 &species_type_key);
    bool is_species_type_key_Set() const;
    bool is_species_type_key_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    double getVariance() const;
    void setVariance(const double &variance);
    bool is_variance_Set() const;
    bool is_variance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chromosome;
    bool m_chromosome_isSet;
    bool m_chromosome_isValid;

    qint32 m_flank1_rgd_id;
    bool m_flank1_rgd_id_isSet;
    bool m_flank1_rgd_id_isValid;

    qint32 m_flank2_rgd_id;
    bool m_flank2_rgd_id_isSet;
    bool m_flank2_rgd_id_isValid;

    QString m_inheritance_type;
    bool m_inheritance_type_isSet;
    bool m_inheritance_type_isValid;

    qint32 m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_linkage_image;
    bool m_linkage_image_isSet;
    bool m_linkage_image_isValid;

    double m_lod;
    bool m_lod_isSet;
    bool m_lod_isValid;

    QString m_lod_image;
    bool m_lod_image_isSet;
    bool m_lod_image_isValid;

    QString m_most_significant_cmo_term;
    bool m_most_significant_cmo_term_isSet;
    bool m_most_significant_cmo_term_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint32 m_peak_offset;
    bool m_peak_offset_isSet;
    bool m_peak_offset_isValid;

    qint32 m_peak_rgd_id;
    bool m_peak_rgd_id_isSet;
    bool m_peak_rgd_id_isValid;

    double m_pvalue;
    bool m_pvalue_isSet;
    bool m_pvalue_isValid;

    qint32 m_rgd_id;
    bool m_rgd_id_isSet;
    bool m_rgd_id_isValid;

    QString m_source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;

    qint32 m_species_type_key;
    bool m_species_type_key_isSet;
    bool m_species_type_key_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;

    double m_variance;
    bool m_variance_isSet;
    bool m_variance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQTL)

#endif // OAIQTL_H
