/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappedSSLP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappedSSLP::OAIMappedSSLP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappedSSLP::OAIMappedSSLP() {
    this->initializeModel();
}

OAIMappedSSLP::~OAIMappedSSLP() {}

void OAIMappedSSLP::initializeModel() {

    m_chromosome_isSet = false;
    m_chromosome_isValid = false;

    m_map_key_isSet = false;
    m_map_key_isValid = false;

    m_sslp_isSet = false;
    m_sslp_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;

    m_strand_isSet = false;
    m_strand_isValid = false;
}

void OAIMappedSSLP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappedSSLP::fromJsonObject(QJsonObject json) {

    m_chromosome_isValid = ::OpenAPI::fromJsonValue(m_chromosome, json[QString("chromosome")]);
    m_chromosome_isSet = !json[QString("chromosome")].isNull() && m_chromosome_isValid;

    m_map_key_isValid = ::OpenAPI::fromJsonValue(m_map_key, json[QString("mapKey")]);
    m_map_key_isSet = !json[QString("mapKey")].isNull() && m_map_key_isValid;

    m_sslp_isValid = ::OpenAPI::fromJsonValue(m_sslp, json[QString("sslp")]);
    m_sslp_isSet = !json[QString("sslp")].isNull() && m_sslp_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;

    m_strand_isValid = ::OpenAPI::fromJsonValue(m_strand, json[QString("strand")]);
    m_strand_isSet = !json[QString("strand")].isNull() && m_strand_isValid;
}

QString OAIMappedSSLP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappedSSLP::asJsonObject() const {
    QJsonObject obj;
    if (m_chromosome_isSet) {
        obj.insert(QString("chromosome"), ::OpenAPI::toJsonValue(m_chromosome));
    }
    if (m_map_key_isSet) {
        obj.insert(QString("mapKey"), ::OpenAPI::toJsonValue(m_map_key));
    }
    if (m_sslp.isSet()) {
        obj.insert(QString("sslp"), ::OpenAPI::toJsonValue(m_sslp));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_stop_isSet) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    if (m_strand_isSet) {
        obj.insert(QString("strand"), ::OpenAPI::toJsonValue(m_strand));
    }
    return obj;
}

QString OAIMappedSSLP::getChromosome() const {
    return m_chromosome;
}
void OAIMappedSSLP::setChromosome(const QString &chromosome) {
    m_chromosome = chromosome;
    m_chromosome_isSet = true;
}

bool OAIMappedSSLP::is_chromosome_Set() const{
    return m_chromosome_isSet;
}

bool OAIMappedSSLP::is_chromosome_Valid() const{
    return m_chromosome_isValid;
}

qint32 OAIMappedSSLP::getMapKey() const {
    return m_map_key;
}
void OAIMappedSSLP::setMapKey(const qint32 &map_key) {
    m_map_key = map_key;
    m_map_key_isSet = true;
}

bool OAIMappedSSLP::is_map_key_Set() const{
    return m_map_key_isSet;
}

bool OAIMappedSSLP::is_map_key_Valid() const{
    return m_map_key_isValid;
}

OAISSLP OAIMappedSSLP::getSslp() const {
    return m_sslp;
}
void OAIMappedSSLP::setSslp(const OAISSLP &sslp) {
    m_sslp = sslp;
    m_sslp_isSet = true;
}

bool OAIMappedSSLP::is_sslp_Set() const{
    return m_sslp_isSet;
}

bool OAIMappedSSLP::is_sslp_Valid() const{
    return m_sslp_isValid;
}

qint64 OAIMappedSSLP::getStart() const {
    return m_start;
}
void OAIMappedSSLP::setStart(const qint64 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIMappedSSLP::is_start_Set() const{
    return m_start_isSet;
}

bool OAIMappedSSLP::is_start_Valid() const{
    return m_start_isValid;
}

qint64 OAIMappedSSLP::getStop() const {
    return m_stop;
}
void OAIMappedSSLP::setStop(const qint64 &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIMappedSSLP::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIMappedSSLP::is_stop_Valid() const{
    return m_stop_isValid;
}

QString OAIMappedSSLP::getStrand() const {
    return m_strand;
}
void OAIMappedSSLP::setStrand(const QString &strand) {
    m_strand = strand;
    m_strand_isSet = true;
}

bool OAIMappedSSLP::is_strand_Set() const{
    return m_strand_isSet;
}

bool OAIMappedSSLP::is_strand_Valid() const{
    return m_strand_isValid;
}

bool OAIMappedSSLP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chromosome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sslp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strand_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappedSSLP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
