/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationRequest::OAIAnnotationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationRequest::OAIAnnotationRequest() {
    this->initializeModel();
}

OAIAnnotationRequest::~OAIAnnotationRequest() {}

void OAIAnnotationRequest::initializeModel() {

    m_evidence_codes_isSet = false;
    m_evidence_codes_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_species_type_keys_isSet = false;
    m_species_type_keys_isValid = false;

    m_term_acc_isSet = false;
    m_term_acc_isValid = false;
}

void OAIAnnotationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationRequest::fromJsonObject(QJsonObject json) {

    m_evidence_codes_isValid = ::OpenAPI::fromJsonValue(m_evidence_codes, json[QString("evidenceCodes")]);
    m_evidence_codes_isSet = !json[QString("evidenceCodes")].isNull() && m_evidence_codes_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_species_type_keys_isValid = ::OpenAPI::fromJsonValue(m_species_type_keys, json[QString("speciesTypeKeys")]);
    m_species_type_keys_isSet = !json[QString("speciesTypeKeys")].isNull() && m_species_type_keys_isValid;

    m_term_acc_isValid = ::OpenAPI::fromJsonValue(m_term_acc, json[QString("termAcc")]);
    m_term_acc_isSet = !json[QString("termAcc")].isNull() && m_term_acc_isValid;
}

QString OAIAnnotationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_codes.size() > 0) {
        obj.insert(QString("evidenceCodes"), ::OpenAPI::toJsonValue(m_evidence_codes));
    }
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_species_type_keys.size() > 0) {
        obj.insert(QString("speciesTypeKeys"), ::OpenAPI::toJsonValue(m_species_type_keys));
    }
    if (m_term_acc_isSet) {
        obj.insert(QString("termAcc"), ::OpenAPI::toJsonValue(m_term_acc));
    }
    return obj;
}

QList<QString> OAIAnnotationRequest::getEvidenceCodes() const {
    return m_evidence_codes;
}
void OAIAnnotationRequest::setEvidenceCodes(const QList<QString> &evidence_codes) {
    m_evidence_codes = evidence_codes;
    m_evidence_codes_isSet = true;
}

bool OAIAnnotationRequest::is_evidence_codes_Set() const{
    return m_evidence_codes_isSet;
}

bool OAIAnnotationRequest::is_evidence_codes_Valid() const{
    return m_evidence_codes_isValid;
}

QList<QString> OAIAnnotationRequest::getIds() const {
    return m_ids;
}
void OAIAnnotationRequest::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIAnnotationRequest::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIAnnotationRequest::is_ids_Valid() const{
    return m_ids_isValid;
}

QList<qint32> OAIAnnotationRequest::getSpeciesTypeKeys() const {
    return m_species_type_keys;
}
void OAIAnnotationRequest::setSpeciesTypeKeys(const QList<qint32> &species_type_keys) {
    m_species_type_keys = species_type_keys;
    m_species_type_keys_isSet = true;
}

bool OAIAnnotationRequest::is_species_type_keys_Set() const{
    return m_species_type_keys_isSet;
}

bool OAIAnnotationRequest::is_species_type_keys_Valid() const{
    return m_species_type_keys_isValid;
}

QString OAIAnnotationRequest::getTermAcc() const {
    return m_term_acc;
}
void OAIAnnotationRequest::setTermAcc(const QString &term_acc) {
    m_term_acc = term_acc;
    m_term_acc_isSet = true;
}

bool OAIAnnotationRequest::is_term_acc_Set() const{
    return m_term_acc_isSet;
}

bool OAIAnnotationRequest::is_term_acc_Valid() const{
    return m_term_acc_isValid;
}

bool OAIAnnotationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_acc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
