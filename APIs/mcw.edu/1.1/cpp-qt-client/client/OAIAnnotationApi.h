/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnnotationApi_H
#define OAI_OAIAnnotationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnnotation.h"
#include "OAIAnnotationRequest.h"
#include "OAIMapPair.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnnotationApi : public QObject {
    Q_OBJECT

public:
    OAIAnnotationApi(const int timeOut = 0);
    ~OAIAnnotationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  acc_id QString [required]
    * @param[in]  species_type_key qint32 [required]
    * @param[in]  include_children bool [required]
    * @param[in]  object_type qint32 [required]
    */
    virtual void getAnnotationCountByAccIdAndObjectTypeUsingGET(const QString &acc_id, const qint32 &species_type_key, const bool &include_children, const qint32 &object_type);

    /**
    * @param[in]  acc_id QString [required]
    * @param[in]  species_type_key qint32 [required]
    * @param[in]  include_children bool [required]
    */
    virtual void getAnnotationCountByAccIdAndSpeciesUsingGET(const QString &acc_id, const qint32 &species_type_key, const bool &include_children);

    /**
    * @param[in]  acc_id QString [required]
    * @param[in]  include_children bool [required]
    */
    virtual void getAnnotationCountByAccIdUsingGET(const QString &acc_id, const bool &include_children);

    /**
    * @param[in]  acc_id QString [required]
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getAnnotationsByAccIdAndRgdIdUsingGET(const QString &acc_id, const qint32 &rgd_id);

    /**
    * @param[in]  rgd_id qint32 [required]
    * @param[in]  ontology_prefix QString [required]
    */
    virtual void getAnnotationsByRgdIdAndOntologyUsingGET(const qint32 &rgd_id, const QString &ontology_prefix);

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getAnnotationsByRgdIdUsingGET(const qint32 &rgd_id);

    /**
    * @param[in]  acc_id QString [required]
    * @param[in]  species_type_key qint32 [required]
    * @param[in]  include_children bool [required]
    */
    virtual void getAnnotationsUsingGET(const QString &acc_id, const qint32 &species_type_key, const bool &include_children);

    /**
    * @param[in]  oai_annotation_request OAIAnnotationRequest [optional]
    */
    virtual void getAnnotationsUsingPOST(const ::OpenAPI::OptionalParam<OAIAnnotationRequest> &oai_annotation_request = ::OpenAPI::OptionalParam<OAIAnnotationRequest>());

    /**
    * @param[in]  ref_rgd_id qint32 [required]
    */
    virtual void getAnnotsByRefrerenceUsingGET(const qint32 &ref_rgd_id);

    /**
    * @param[in]  rgd_id qint32 [required]
    */
    virtual void getTermAccIdsUsingGET(const qint32 &rgd_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAnnotationCountByAccIdAndObjectTypeUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationCountByAccIdAndSpeciesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationCountByAccIdUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationsByAccIdAndRgdIdUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationsByRgdIdAndOntologyUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationsByRgdIdUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAnnotationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getAnnotsByRefrerenceUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTermAccIdsUsingGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAnnotationCountByAccIdAndObjectTypeUsingGETSignal(qint32 summary);
    void getAnnotationCountByAccIdAndSpeciesUsingGETSignal(qint32 summary);
    void getAnnotationCountByAccIdUsingGETSignal(qint32 summary);
    void getAnnotationsByAccIdAndRgdIdUsingGETSignal(QList<OAIAnnotation> summary);
    void getAnnotationsByRgdIdAndOntologyUsingGETSignal(QList<OAIAnnotation> summary);
    void getAnnotationsByRgdIdUsingGETSignal(QList<OAIAnnotation> summary);
    void getAnnotationsUsingGETSignal(QList<OAIAnnotation> summary);
    void getAnnotationsUsingPOSTSignal(QList<OAIAnnotation> summary);
    void getAnnotsByRefrerenceUsingGETSignal(QList<OAIAnnotation> summary);
    void getTermAccIdsUsingGETSignal(QList<OAIMapPair> summary);


    void getAnnotationCountByAccIdAndObjectTypeUsingGETSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getAnnotationCountByAccIdAndSpeciesUsingGETSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getAnnotationCountByAccIdUsingGETSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getAnnotationsByAccIdAndRgdIdUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnotation> summary);
    void getAnnotationsByRgdIdAndOntologyUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnotation> summary);
    void getAnnotationsByRgdIdUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnotation> summary);
    void getAnnotationsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnotation> summary);
    void getAnnotationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnotation> summary);
    void getAnnotsByRefrerenceUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnotation> summary);
    void getTermAccIdsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIMapPair> summary);

    Q_DECL_DEPRECATED_X("Use getAnnotationCountByAccIdAndObjectTypeUsingGETSignalError() instead")
    void getAnnotationCountByAccIdAndObjectTypeUsingGETSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationCountByAccIdAndObjectTypeUsingGETSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationCountByAccIdAndSpeciesUsingGETSignalError() instead")
    void getAnnotationCountByAccIdAndSpeciesUsingGETSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationCountByAccIdAndSpeciesUsingGETSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationCountByAccIdUsingGETSignalError() instead")
    void getAnnotationCountByAccIdUsingGETSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationCountByAccIdUsingGETSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsByAccIdAndRgdIdUsingGETSignalError() instead")
    void getAnnotationsByAccIdAndRgdIdUsingGETSignalE(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsByAccIdAndRgdIdUsingGETSignalError(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsByRgdIdAndOntologyUsingGETSignalError() instead")
    void getAnnotationsByRgdIdAndOntologyUsingGETSignalE(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsByRgdIdAndOntologyUsingGETSignalError(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsByRgdIdUsingGETSignalError() instead")
    void getAnnotationsByRgdIdUsingGETSignalE(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsByRgdIdUsingGETSignalError(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsUsingGETSignalError() instead")
    void getAnnotationsUsingGETSignalE(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsUsingGETSignalError(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsUsingPOSTSignalError() instead")
    void getAnnotationsUsingPOSTSignalE(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsUsingPOSTSignalError(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotsByRefrerenceUsingGETSignalError() instead")
    void getAnnotsByRefrerenceUsingGETSignalE(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotsByRefrerenceUsingGETSignalError(QList<OAIAnnotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTermAccIdsUsingGETSignalError() instead")
    void getTermAccIdsUsingGETSignalE(QList<OAIMapPair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTermAccIdsUsingGETSignalError(QList<OAIMapPair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAnnotationCountByAccIdAndObjectTypeUsingGETSignalErrorFull() instead")
    void getAnnotationCountByAccIdAndObjectTypeUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationCountByAccIdAndObjectTypeUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationCountByAccIdAndSpeciesUsingGETSignalErrorFull() instead")
    void getAnnotationCountByAccIdAndSpeciesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationCountByAccIdAndSpeciesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationCountByAccIdUsingGETSignalErrorFull() instead")
    void getAnnotationCountByAccIdUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationCountByAccIdUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsByAccIdAndRgdIdUsingGETSignalErrorFull() instead")
    void getAnnotationsByAccIdAndRgdIdUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsByAccIdAndRgdIdUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsByRgdIdAndOntologyUsingGETSignalErrorFull() instead")
    void getAnnotationsByRgdIdAndOntologyUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsByRgdIdAndOntologyUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsByRgdIdUsingGETSignalErrorFull() instead")
    void getAnnotationsByRgdIdUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsByRgdIdUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsUsingGETSignalErrorFull() instead")
    void getAnnotationsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsUsingPOSTSignalErrorFull() instead")
    void getAnnotationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotsByRefrerenceUsingGETSignalErrorFull() instead")
    void getAnnotsByRefrerenceUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotsByRefrerenceUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTermAccIdsUsingGETSignalErrorFull() instead")
    void getTermAccIdsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTermAccIdsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
