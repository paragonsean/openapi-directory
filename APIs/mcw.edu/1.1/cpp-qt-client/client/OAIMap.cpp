/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMap::OAIMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMap::OAIMap() {
    this->initializeModel();
}

OAIMap::~OAIMap() {}

void OAIMap::initializeModel() {

    m_dbsnp_version_isSet = false;
    m_dbsnp_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_method_key_isSet = false;
    m_method_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_primary_ref_assembly_isSet = false;
    m_primary_ref_assembly_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_ref_seq_assembly_acc_isSet = false;
    m_ref_seq_assembly_acc_isValid = false;

    m_ref_seq_assembly_name_isSet = false;
    m_ref_seq_assembly_name_isValid = false;

    m_rgd_id_isSet = false;
    m_rgd_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_species_type_key_isSet = false;
    m_species_type_key_isValid = false;

    m_ucsc_assembly_id_isSet = false;
    m_ucsc_assembly_id_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMap::fromJsonObject(QJsonObject json) {

    m_dbsnp_version_isValid = ::OpenAPI::fromJsonValue(m_dbsnp_version, json[QString("dbsnpVersion")]);
    m_dbsnp_version_isSet = !json[QString("dbsnpVersion")].isNull() && m_dbsnp_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_method_key_isValid = ::OpenAPI::fromJsonValue(m_method_key, json[QString("methodKey")]);
    m_method_key_isSet = !json[QString("methodKey")].isNull() && m_method_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_primary_ref_assembly_isValid = ::OpenAPI::fromJsonValue(m_primary_ref_assembly, json[QString("primaryRefAssembly")]);
    m_primary_ref_assembly_isSet = !json[QString("primaryRefAssembly")].isNull() && m_primary_ref_assembly_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_ref_seq_assembly_acc_isValid = ::OpenAPI::fromJsonValue(m_ref_seq_assembly_acc, json[QString("refSeqAssemblyAcc")]);
    m_ref_seq_assembly_acc_isSet = !json[QString("refSeqAssemblyAcc")].isNull() && m_ref_seq_assembly_acc_isValid;

    m_ref_seq_assembly_name_isValid = ::OpenAPI::fromJsonValue(m_ref_seq_assembly_name, json[QString("refSeqAssemblyName")]);
    m_ref_seq_assembly_name_isSet = !json[QString("refSeqAssemblyName")].isNull() && m_ref_seq_assembly_name_isValid;

    m_rgd_id_isValid = ::OpenAPI::fromJsonValue(m_rgd_id, json[QString("rgdId")]);
    m_rgd_id_isSet = !json[QString("rgdId")].isNull() && m_rgd_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_species_type_key_isValid = ::OpenAPI::fromJsonValue(m_species_type_key, json[QString("speciesTypeKey")]);
    m_species_type_key_isSet = !json[QString("speciesTypeKey")].isNull() && m_species_type_key_isValid;

    m_ucsc_assembly_id_isValid = ::OpenAPI::fromJsonValue(m_ucsc_assembly_id, json[QString("ucscAssemblyId")]);
    m_ucsc_assembly_id_isSet = !json[QString("ucscAssemblyId")].isNull() && m_ucsc_assembly_id_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMap::asJsonObject() const {
    QJsonObject obj;
    if (m_dbsnp_version_isSet) {
        obj.insert(QString("dbsnpVersion"), ::OpenAPI::toJsonValue(m_dbsnp_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_method_key_isSet) {
        obj.insert(QString("methodKey"), ::OpenAPI::toJsonValue(m_method_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_primary_ref_assembly_isSet) {
        obj.insert(QString("primaryRefAssembly"), ::OpenAPI::toJsonValue(m_primary_ref_assembly));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_ref_seq_assembly_acc_isSet) {
        obj.insert(QString("refSeqAssemblyAcc"), ::OpenAPI::toJsonValue(m_ref_seq_assembly_acc));
    }
    if (m_ref_seq_assembly_name_isSet) {
        obj.insert(QString("refSeqAssemblyName"), ::OpenAPI::toJsonValue(m_ref_seq_assembly_name));
    }
    if (m_rgd_id_isSet) {
        obj.insert(QString("rgdId"), ::OpenAPI::toJsonValue(m_rgd_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_species_type_key_isSet) {
        obj.insert(QString("speciesTypeKey"), ::OpenAPI::toJsonValue(m_species_type_key));
    }
    if (m_ucsc_assembly_id_isSet) {
        obj.insert(QString("ucscAssemblyId"), ::OpenAPI::toJsonValue(m_ucsc_assembly_id));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIMap::getDbsnpVersion() const {
    return m_dbsnp_version;
}
void OAIMap::setDbsnpVersion(const QString &dbsnp_version) {
    m_dbsnp_version = dbsnp_version;
    m_dbsnp_version_isSet = true;
}

bool OAIMap::is_dbsnp_version_Set() const{
    return m_dbsnp_version_isSet;
}

bool OAIMap::is_dbsnp_version_Valid() const{
    return m_dbsnp_version_isValid;
}

QString OAIMap::getDescription() const {
    return m_description;
}
void OAIMap::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMap::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMap::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIMap::getKey() const {
    return m_key;
}
void OAIMap::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMap::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMap::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIMap::getMethodKey() const {
    return m_method_key;
}
void OAIMap::setMethodKey(const qint32 &method_key) {
    m_method_key = method_key;
    m_method_key_isSet = true;
}

bool OAIMap::is_method_key_Set() const{
    return m_method_key_isSet;
}

bool OAIMap::is_method_key_Valid() const{
    return m_method_key_isValid;
}

QString OAIMap::getName() const {
    return m_name;
}
void OAIMap::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMap::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMap::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMap::getNotes() const {
    return m_notes;
}
void OAIMap::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIMap::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIMap::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIMap::isPrimaryRefAssembly() const {
    return m_primary_ref_assembly;
}
void OAIMap::setPrimaryRefAssembly(const bool &primary_ref_assembly) {
    m_primary_ref_assembly = primary_ref_assembly;
    m_primary_ref_assembly_isSet = true;
}

bool OAIMap::is_primary_ref_assembly_Set() const{
    return m_primary_ref_assembly_isSet;
}

bool OAIMap::is_primary_ref_assembly_Valid() const{
    return m_primary_ref_assembly_isValid;
}

qint32 OAIMap::getRank() const {
    return m_rank;
}
void OAIMap::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIMap::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIMap::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIMap::getRefSeqAssemblyAcc() const {
    return m_ref_seq_assembly_acc;
}
void OAIMap::setRefSeqAssemblyAcc(const QString &ref_seq_assembly_acc) {
    m_ref_seq_assembly_acc = ref_seq_assembly_acc;
    m_ref_seq_assembly_acc_isSet = true;
}

bool OAIMap::is_ref_seq_assembly_acc_Set() const{
    return m_ref_seq_assembly_acc_isSet;
}

bool OAIMap::is_ref_seq_assembly_acc_Valid() const{
    return m_ref_seq_assembly_acc_isValid;
}

QString OAIMap::getRefSeqAssemblyName() const {
    return m_ref_seq_assembly_name;
}
void OAIMap::setRefSeqAssemblyName(const QString &ref_seq_assembly_name) {
    m_ref_seq_assembly_name = ref_seq_assembly_name;
    m_ref_seq_assembly_name_isSet = true;
}

bool OAIMap::is_ref_seq_assembly_name_Set() const{
    return m_ref_seq_assembly_name_isSet;
}

bool OAIMap::is_ref_seq_assembly_name_Valid() const{
    return m_ref_seq_assembly_name_isValid;
}

qint32 OAIMap::getRgdId() const {
    return m_rgd_id;
}
void OAIMap::setRgdId(const qint32 &rgd_id) {
    m_rgd_id = rgd_id;
    m_rgd_id_isSet = true;
}

bool OAIMap::is_rgd_id_Set() const{
    return m_rgd_id_isSet;
}

bool OAIMap::is_rgd_id_Valid() const{
    return m_rgd_id_isValid;
}

QString OAIMap::getSource() const {
    return m_source;
}
void OAIMap::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMap::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMap::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIMap::getSpeciesTypeKey() const {
    return m_species_type_key;
}
void OAIMap::setSpeciesTypeKey(const qint32 &species_type_key) {
    m_species_type_key = species_type_key;
    m_species_type_key_isSet = true;
}

bool OAIMap::is_species_type_key_Set() const{
    return m_species_type_key_isSet;
}

bool OAIMap::is_species_type_key_Valid() const{
    return m_species_type_key_isValid;
}

QString OAIMap::getUcscAssemblyId() const {
    return m_ucsc_assembly_id;
}
void OAIMap::setUcscAssemblyId(const QString &ucsc_assembly_id) {
    m_ucsc_assembly_id = ucsc_assembly_id;
    m_ucsc_assembly_id_isSet = true;
}

bool OAIMap::is_ucsc_assembly_id_Set() const{
    return m_ucsc_assembly_id_isSet;
}

bool OAIMap::is_ucsc_assembly_id_Valid() const{
    return m_ucsc_assembly_id_isValid;
}

QString OAIMap::getUnit() const {
    return m_unit;
}
void OAIMap::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMap::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMap::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAIMap::getVersion() const {
    return m_version;
}
void OAIMap::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMap::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMap::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dbsnp_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ref_assembly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_seq_assembly_acc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_seq_assembly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_type_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ucsc_assembly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
