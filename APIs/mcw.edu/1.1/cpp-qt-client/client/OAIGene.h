/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGene.h
 *
 * 
 */

#ifndef OAIGene_H
#define OAIGene_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGene : public OAIObject {
public:
    OAIGene();
    OAIGene(QString json);
    ~OAIGene() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAgrDescription() const;
    void setAgrDescription(const QString &agr_description);
    bool is_agr_description_Set() const;
    bool is_agr_description_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEnsemblFullName() const;
    void setEnsemblFullName(const QString &ensembl_full_name);
    bool is_ensembl_full_name_Set() const;
    bool is_ensembl_full_name_Valid() const;

    QString getEnsemblGeneSymbol() const;
    void setEnsemblGeneSymbol(const QString &ensembl_gene_symbol);
    bool is_ensembl_gene_symbol_Set() const;
    bool is_ensembl_gene_symbol_Valid() const;

    QString getEnsemblGeneType() const;
    void setEnsemblGeneType(const QString &ensembl_gene_type);
    bool is_ensembl_gene_type_Set() const;
    bool is_ensembl_gene_type_Valid() const;

    QString getGeneSource() const;
    void setGeneSource(const QString &gene_source);
    bool is_gene_source_Set() const;
    bool is_gene_source_Valid() const;

    qint32 getKey() const;
    void setKey(const qint32 &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getMergedDescription() const;
    void setMergedDescription(const QString &merged_description);
    bool is_merged_description_Set() const;
    bool is_merged_description_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNcbiAnnotStatus() const;
    void setNcbiAnnotStatus(const QString &ncbi_annot_status);
    bool is_ncbi_annot_status_Set() const;
    bool is_ncbi_annot_status_Valid() const;

    QDateTime getNomenReviewDate() const;
    void setNomenReviewDate(const QDateTime &nomen_review_date);
    bool is_nomen_review_date_Set() const;
    bool is_nomen_review_date_Valid() const;

    QString getNomenSource() const;
    void setNomenSource(const QString &nomen_source);
    bool is_nomen_source_Set() const;
    bool is_nomen_source_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getRefSeqStatus() const;
    void setRefSeqStatus(const QString &ref_seq_status);
    bool is_ref_seq_status_Set() const;
    bool is_ref_seq_status_Valid() const;

    qint32 getRgdId() const;
    void setRgdId(const qint32 &rgd_id);
    bool is_rgd_id_Set() const;
    bool is_rgd_id_Valid() const;

    QString getSoAccId() const;
    void setSoAccId(const QString &so_acc_id);
    bool is_so_acc_id_Set() const;
    bool is_so_acc_id_Valid() const;

    qint32 getSpeciesTypeKey() const;
    void setSpeciesTypeKey(const qint32 &species_type_key);
    bool is_species_type_key_Set() const;
    bool is_species_type_key_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isVariant() const;
    void setVariant(const bool &variant);
    bool is_variant_Set() const;
    bool is_variant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_agr_description;
    bool m_agr_description_isSet;
    bool m_agr_description_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_ensembl_full_name;
    bool m_ensembl_full_name_isSet;
    bool m_ensembl_full_name_isValid;

    QString m_ensembl_gene_symbol;
    bool m_ensembl_gene_symbol_isSet;
    bool m_ensembl_gene_symbol_isValid;

    QString m_ensembl_gene_type;
    bool m_ensembl_gene_type_isSet;
    bool m_ensembl_gene_type_isValid;

    QString m_gene_source;
    bool m_gene_source_isSet;
    bool m_gene_source_isValid;

    qint32 m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_merged_description;
    bool m_merged_description_isSet;
    bool m_merged_description_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_ncbi_annot_status;
    bool m_ncbi_annot_status_isSet;
    bool m_ncbi_annot_status_isValid;

    QDateTime m_nomen_review_date;
    bool m_nomen_review_date_isSet;
    bool m_nomen_review_date_isValid;

    QString m_nomen_source;
    bool m_nomen_source_isSet;
    bool m_nomen_source_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_ref_seq_status;
    bool m_ref_seq_status_isSet;
    bool m_ref_seq_status_isValid;

    qint32 m_rgd_id;
    bool m_rgd_id_isSet;
    bool m_rgd_id_isValid;

    QString m_so_acc_id;
    bool m_so_acc_id_isSet;
    bool m_so_acc_id_isValid;

    qint32 m_species_type_key;
    bool m_species_type_key_isSet;
    bool m_species_type_key_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_variant;
    bool m_variant_isSet;
    bool m_variant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGene)

#endif // OAIGene_H
