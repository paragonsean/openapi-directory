/**
 * Rat Genome Database REST API
 * The RGD REST API provides programmatic access to information and annotation stored in the Rat Genome Database
 *
 * The version of the OpenAPI document: 1.1
 * Contact: RGD.Data2@mcw.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathway::OAIPathway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathway::OAIPathway() {
    this->initializeModel();
}

OAIPathway::~OAIPathway() {}

void OAIPathway::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_altered_path_isSet = false;
    m_has_altered_path_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_list_isSet = false;
    m_object_list_isValid = false;

    m_pathway_categories_isSet = false;
    m_pathway_categories_isValid = false;

    m_reference_list_isSet = false;
    m_reference_list_isValid = false;
}

void OAIPathway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathway::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_altered_path_isValid = ::OpenAPI::fromJsonValue(m_has_altered_path, json[QString("hasAlteredPath")]);
    m_has_altered_path_isSet = !json[QString("hasAlteredPath")].isNull() && m_has_altered_path_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_list_isValid = ::OpenAPI::fromJsonValue(m_object_list, json[QString("objectList")]);
    m_object_list_isSet = !json[QString("objectList")].isNull() && m_object_list_isValid;

    m_pathway_categories_isValid = ::OpenAPI::fromJsonValue(m_pathway_categories, json[QString("pathwayCategories")]);
    m_pathway_categories_isSet = !json[QString("pathwayCategories")].isNull() && m_pathway_categories_isValid;

    m_reference_list_isValid = ::OpenAPI::fromJsonValue(m_reference_list, json[QString("referenceList")]);
    m_reference_list_isSet = !json[QString("referenceList")].isNull() && m_reference_list_isValid;
}

QString OAIPathway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathway::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_altered_path_isSet) {
        obj.insert(QString("hasAlteredPath"), ::OpenAPI::toJsonValue(m_has_altered_path));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_list.size() > 0) {
        obj.insert(QString("objectList"), ::OpenAPI::toJsonValue(m_object_list));
    }
    if (m_pathway_categories.size() > 0) {
        obj.insert(QString("pathwayCategories"), ::OpenAPI::toJsonValue(m_pathway_categories));
    }
    if (m_reference_list.size() > 0) {
        obj.insert(QString("referenceList"), ::OpenAPI::toJsonValue(m_reference_list));
    }
    return obj;
}

QString OAIPathway::getDescription() const {
    return m_description;
}
void OAIPathway::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPathway::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPathway::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPathway::getHasAlteredPath() const {
    return m_has_altered_path;
}
void OAIPathway::setHasAlteredPath(const QString &has_altered_path) {
    m_has_altered_path = has_altered_path;
    m_has_altered_path_isSet = true;
}

bool OAIPathway::is_has_altered_path_Set() const{
    return m_has_altered_path_isSet;
}

bool OAIPathway::is_has_altered_path_Valid() const{
    return m_has_altered_path_isValid;
}

QString OAIPathway::getId() const {
    return m_id;
}
void OAIPathway::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPathway::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPathway::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPathway::getName() const {
    return m_name;
}
void OAIPathway::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPathway::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPathway::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPathwayObject> OAIPathway::getObjectList() const {
    return m_object_list;
}
void OAIPathway::setObjectList(const QList<OAIPathwayObject> &object_list) {
    m_object_list = object_list;
    m_object_list_isSet = true;
}

bool OAIPathway::is_object_list_Set() const{
    return m_object_list_isSet;
}

bool OAIPathway::is_object_list_Valid() const{
    return m_object_list_isValid;
}

QList<QString> OAIPathway::getPathwayCategories() const {
    return m_pathway_categories;
}
void OAIPathway::setPathwayCategories(const QList<QString> &pathway_categories) {
    m_pathway_categories = pathway_categories;
    m_pathway_categories_isSet = true;
}

bool OAIPathway::is_pathway_categories_Set() const{
    return m_pathway_categories_isSet;
}

bool OAIPathway::is_pathway_categories_Valid() const{
    return m_pathway_categories_isValid;
}

QList<OAIReference> OAIPathway::getReferenceList() const {
    return m_reference_list;
}
void OAIPathway::setReferenceList(const QList<OAIReference> &reference_list) {
    m_reference_list = reference_list;
    m_reference_list_isSet = true;
}

bool OAIPathway::is_reference_list_Set() const{
    return m_reference_list_isSet;
}

bool OAIPathway::is_reference_list_Valid() const{
    return m_reference_list_isValid;
}

bool OAIPathway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_altered_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pathway_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
