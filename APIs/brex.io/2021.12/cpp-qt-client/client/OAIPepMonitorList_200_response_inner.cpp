/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPepMonitorList_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPepMonitorList_200_response_inner::OAIPepMonitorList_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPepMonitorList_200_response_inner::OAIPepMonitorList_200_response_inner() {
    this->initializeModel();
}

OAIPepMonitorList_200_response_inner::~OAIPepMonitorList_200_response_inner() {}

void OAIPepMonitorList_200_response_inner::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_case_id_isSet = false;
    m_case_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_structured_isSet = false;
    m_structured_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAIPepMonitorList_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPepMonitorList_200_response_inner::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_case_id_isValid = ::OpenAPI::fromJsonValue(m_case_id, json[QString("caseId")]);
    m_case_id_isSet = !json[QString("caseId")].isNull() && m_case_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_structured_isValid = ::OpenAPI::fromJsonValue(m_structured, json[QString("structured")]);
    m_structured_isSet = !json[QString("structured")].isNull() && m_structured_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAIPepMonitorList_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPepMonitorList_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_case_id_isSet) {
        obj.insert(QString("caseId"), ::OpenAPI::toJsonValue(m_case_id));
    }
    if (m_created.isSet()) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_structured_isSet) {
        obj.insert(QString("structured"), ::OpenAPI::toJsonValue(m_structured));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_webhook_isSet) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

bool OAIPepMonitorList_200_response_inner::isActive() const {
    return m_active;
}
void OAIPepMonitorList_200_response_inner::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPepMonitorList_200_response_inner::getCaseId() const {
    return m_case_id;
}
void OAIPepMonitorList_200_response_inner::setCaseId(const QString &case_id) {
    m_case_id = case_id;
    m_case_id_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_case_id_Set() const{
    return m_case_id_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_case_id_Valid() const{
    return m_case_id_isValid;
}

OAIObject OAIPepMonitorList_200_response_inner::getCreated() const {
    return m_created;
}
void OAIPepMonitorList_200_response_inner::setCreated(const OAIObject &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPepMonitorList_200_response_inner::getIdentifier() const {
    return m_identifier;
}
void OAIPepMonitorList_200_response_inner::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIPepMonitorList_200_response_inner::getStructured() const {
    return m_structured;
}
void OAIPepMonitorList_200_response_inner::setStructured(const QString &structured) {
    m_structured = structured;
    m_structured_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_structured_Set() const{
    return m_structured_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_structured_Valid() const{
    return m_structured_isValid;
}

QString OAIPepMonitorList_200_response_inner::getUpdated() const {
    return m_updated;
}
void OAIPepMonitorList_200_response_inner::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIPepMonitorList_200_response_inner::getWebhook() const {
    return m_webhook;
}
void OAIPepMonitorList_200_response_inner::setWebhook(const QString &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAIPepMonitorList_200_response_inner::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIPepMonitorList_200_response_inner::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAIPepMonitorList_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPepMonitorList_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
