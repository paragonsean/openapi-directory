/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1ProductApi_H
#define OAI_OAIV1ProductApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductAvailability_200_response.h"
#include "OAIProductCatalog_200_response.h"
#include "OAIProductNotifierCreate_200_response.h"
#include "OAIProductOrder_200_response.h"
#include "OAIProductRetrieve_200_response.h"
#include "OAIProductSearch_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1ProductApi : public QObject {
    Q_OBJECT

public:
    OAIV1ProductApi(const int timeOut = 0);
    ~OAIV1ProductApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sku QString [required]
    * @param[in]  subject_id QString [required]
    */
    virtual void productAvailability(const QString &sku, const QString &subject_id);

    /**
    * @param[in]  country QString [required]
    */
    virtual void productCatalog(const QString &country);

    /**
    * @param[in]  notifier_id QString [required]
    */
    virtual void productNotifier(const QString &notifier_id);

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  type QString [required]
    * @param[in]  uri QString [required]
    */
    virtual void productNotifierCreate(const QString &order_id, const QString &type, const QString &uri);

    /**
    * @param[in]  sku QString [required]
    * @param[in]  subject_id QString [required]
    */
    virtual void productOrder(const QString &sku, const QString &subject_id);

    /**
    * @param[in]  company_name QString [optional]
    * @param[in]  contact_email QString [optional]
    * @param[in]  contact_phone QString [optional]
    * @param[in]  cost_confirmation bool [optional]
    * @param[in]  country QString [optional]
    * @param[in]  financial_data bool [optional]
    * @param[in]  historic_information bool [optional]
    * @param[in]  information_requirements QString [optional]
    * @param[in]  location_investigation bool [optional]
    * @param[in]  priority QString [optional]
    * @param[in]  register_data bool [optional]
    * @param[in]  register_number QString [optional]
    * @param[in]  subject_id QString [optional]
    */
    virtual void productOrderConcierge(const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &cost_confirmation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &financial_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &historic_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &information_requirements = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &location_investigation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &register_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &register_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subject_id QString [required]
    * @param[in]  callback_url QString [optional]
    * @param[in]  credits double [optional]
    * @param[in]  include_docs bool [optional]
    * @param[in]  levels QString [optional]
    * @param[in]  strategy QString [optional]
    */
    virtual void productOrderUbo(const QString &subject_id, const ::OpenAPI::OptionalParam<QString> &callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &credits = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &include_docs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &levels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &strategy = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sku QString [required]
    * @param[in]  option QString [required]
    * @param[in]  subject_id QString [required]
    */
    virtual void productOrderWithOption(const QString &sku, const QString &option, const QString &subject_id);

    /**
    * @param[in]  order_id QString [required]
    */
    virtual void productRetrieve(const QString &order_id);

    /**
    * @param[in]  subject_id QString [required]
    */
    virtual void productSearch(const QString &subject_id);

    /**
    * @param[in]  order_id QString [required]
    */
    virtual void productStatus(const QString &order_id);

    /**
    * @param[in]  action QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  credits double [optional]
    */
    virtual void productUpdateAction(const QString &action, const QString &order_id, const ::OpenAPI::OptionalParam<double> &credits = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productAvailabilityCallback(OAIHttpRequestWorker *worker);
    void productCatalogCallback(OAIHttpRequestWorker *worker);
    void productNotifierCallback(OAIHttpRequestWorker *worker);
    void productNotifierCreateCallback(OAIHttpRequestWorker *worker);
    void productOrderCallback(OAIHttpRequestWorker *worker);
    void productOrderConciergeCallback(OAIHttpRequestWorker *worker);
    void productOrderUboCallback(OAIHttpRequestWorker *worker);
    void productOrderWithOptionCallback(OAIHttpRequestWorker *worker);
    void productRetrieveCallback(OAIHttpRequestWorker *worker);
    void productSearchCallback(OAIHttpRequestWorker *worker);
    void productStatusCallback(OAIHttpRequestWorker *worker);
    void productUpdateActionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productAvailabilitySignal(OAIProductAvailability_200_response summary);
    void productCatalogSignal(OAIProductCatalog_200_response summary);
    void productNotifierSignal();
    void productNotifierCreateSignal(OAIProductNotifierCreate_200_response summary);
    void productOrderSignal(OAIProductOrder_200_response summary);
    void productOrderConciergeSignal();
    void productOrderUboSignal();
    void productOrderWithOptionSignal();
    void productRetrieveSignal(OAIProductRetrieve_200_response summary);
    void productSearchSignal(QList<OAIProductSearch_200_response_inner> summary);
    void productStatusSignal();
    void productUpdateActionSignal();


    void productAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIProductAvailability_200_response summary);
    void productCatalogSignalFull(OAIHttpRequestWorker *worker, OAIProductCatalog_200_response summary);
    void productNotifierSignalFull(OAIHttpRequestWorker *worker);
    void productNotifierCreateSignalFull(OAIHttpRequestWorker *worker, OAIProductNotifierCreate_200_response summary);
    void productOrderSignalFull(OAIHttpRequestWorker *worker, OAIProductOrder_200_response summary);
    void productOrderConciergeSignalFull(OAIHttpRequestWorker *worker);
    void productOrderUboSignalFull(OAIHttpRequestWorker *worker);
    void productOrderWithOptionSignalFull(OAIHttpRequestWorker *worker);
    void productRetrieveSignalFull(OAIHttpRequestWorker *worker, OAIProductRetrieve_200_response summary);
    void productSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductSearch_200_response_inner> summary);
    void productStatusSignalFull(OAIHttpRequestWorker *worker);
    void productUpdateActionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productAvailabilitySignalError() instead")
    void productAvailabilitySignalE(OAIProductAvailability_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productAvailabilitySignalError(OAIProductAvailability_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCatalogSignalError() instead")
    void productCatalogSignalE(OAIProductCatalog_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCatalogSignalError(OAIProductCatalog_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNotifierSignalError() instead")
    void productNotifierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productNotifierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNotifierCreateSignalError() instead")
    void productNotifierCreateSignalE(OAIProductNotifierCreate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productNotifierCreateSignalError(OAIProductNotifierCreate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderSignalError() instead")
    void productOrderSignalE(OAIProductOrder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderSignalError(OAIProductOrder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderConciergeSignalError() instead")
    void productOrderConciergeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderConciergeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderUboSignalError() instead")
    void productOrderUboSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderUboSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderWithOptionSignalError() instead")
    void productOrderWithOptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderWithOptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productRetrieveSignalError() instead")
    void productRetrieveSignalE(OAIProductRetrieve_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productRetrieveSignalError(OAIProductRetrieve_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSignalError() instead")
    void productSearchSignalE(QList<OAIProductSearch_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSignalError(QList<OAIProductSearch_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productStatusSignalError() instead")
    void productStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productUpdateActionSignalError() instead")
    void productUpdateActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productUpdateActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productAvailabilitySignalErrorFull() instead")
    void productAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCatalogSignalErrorFull() instead")
    void productCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNotifierSignalErrorFull() instead")
    void productNotifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productNotifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNotifierCreateSignalErrorFull() instead")
    void productNotifierCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productNotifierCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderSignalErrorFull() instead")
    void productOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderConciergeSignalErrorFull() instead")
    void productOrderConciergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderConciergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderUboSignalErrorFull() instead")
    void productOrderUboSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderUboSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOrderWithOptionSignalErrorFull() instead")
    void productOrderWithOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOrderWithOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productRetrieveSignalErrorFull() instead")
    void productRetrieveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productRetrieveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSignalErrorFull() instead")
    void productSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productStatusSignalErrorFull() instead")
    void productStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productUpdateActionSignalErrorFull() instead")
    void productUpdateActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productUpdateActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
