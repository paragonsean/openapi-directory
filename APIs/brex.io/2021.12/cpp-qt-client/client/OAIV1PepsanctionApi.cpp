/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1PepsanctionApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIV1PepsanctionApi::OAIV1PepsanctionApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIV1PepsanctionApi::~OAIV1PepsanctionApi() {
}

void OAIV1PepsanctionApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.kompany.com/"),
    "Main endpoint",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("pepMonitorList", defaultConf);
    _serverIndices.insert("pepMonitorList", 0);
    _serverConfigs.insert("pepMonitorUnregister", defaultConf);
    _serverIndices.insert("pepMonitorUnregister", 0);
    _serverConfigs.insert("pepMonitorUpdate", defaultConf);
    _serverIndices.insert("pepMonitorUpdate", 0);
    _serverConfigs.insert("pepOrder", defaultConf);
    _serverIndices.insert("pepOrder", 0);
    _serverConfigs.insert("pepRetrieve", defaultConf);
    _serverIndices.insert("pepRetrieve", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIV1PepsanctionApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIV1PepsanctionApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIV1PepsanctionApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIV1PepsanctionApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIV1PepsanctionApi::setUsername(const QString &username) {
    _username = username;
}

void OAIV1PepsanctionApi::setPassword(const QString &password) {
    _password = password;
}


void OAIV1PepsanctionApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIV1PepsanctionApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIV1PepsanctionApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIV1PepsanctionApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIV1PepsanctionApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIV1PepsanctionApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIV1PepsanctionApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIV1PepsanctionApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIV1PepsanctionApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIV1PepsanctionApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIV1PepsanctionApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIV1PepsanctionApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIV1PepsanctionApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIV1PepsanctionApi::pepMonitorList() {
    QString fullPath = QString(_serverConfigs["pepMonitorList"][_serverIndices.value("pepMonitorList")].URL()+"/api/v1/pepsanction/monitor/list");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1PepsanctionApi::pepMonitorListCallback);
    connect(this, &OAIV1PepsanctionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1PepsanctionApi::pepMonitorListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPepMonitorList_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPepMonitorList_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pepMonitorListSignal(output);
        Q_EMIT pepMonitorListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pepMonitorListSignalE(output, error_type, error_str);
        Q_EMIT pepMonitorListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pepMonitorListSignalError(output, error_type, error_str);
        Q_EMIT pepMonitorListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1PepsanctionApi::pepMonitorUnregister(const QString &id) {
    QString fullPath = QString(_serverConfigs["pepMonitorUnregister"][_serverIndices.value("pepMonitorUnregister")].URL()+"/api/v1/pepsanction/monitor/unregister/{id}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1PepsanctionApi::pepMonitorUnregisterCallback);
    connect(this, &OAIV1PepsanctionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1PepsanctionApi::pepMonitorUnregisterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pepMonitorUnregisterSignal();
        Q_EMIT pepMonitorUnregisterSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pepMonitorUnregisterSignalE(error_type, error_str);
        Q_EMIT pepMonitorUnregisterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pepMonitorUnregisterSignalError(error_type, error_str);
        Q_EMIT pepMonitorUnregisterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1PepsanctionApi::pepMonitorUpdate(const QString &id, const ::OpenAPI::OptionalParam<QString> &webhook) {
    QString fullPath = QString(_serverConfigs["pepMonitorUpdate"][_serverIndices.value("pepMonitorUpdate")].URL()+"/api/v1/pepsanction/monitor/update/{id}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (webhook.hasValue())
    {
        input.add_var("Webhook", ::OpenAPI::toStringValue(webhook.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1PepsanctionApi::pepMonitorUpdateCallback);
    connect(this, &OAIV1PepsanctionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1PepsanctionApi::pepMonitorUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPepMonitorList_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pepMonitorUpdateSignal(output);
        Q_EMIT pepMonitorUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pepMonitorUpdateSignalE(output, error_type, error_str);
        Q_EMIT pepMonitorUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pepMonitorUpdateSignalError(output, error_type, error_str);
        Q_EMIT pepMonitorUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1PepsanctionApi::pepOrder(const QString &type, const QString &search, const ::OpenAPI::OptionalParam<QString> &aliases, const ::OpenAPI::OptionalParam<QString> &country, const ::OpenAPI::OptionalParam<QString> &dob, const ::OpenAPI::OptionalParam<QString> &family_name, const ::OpenAPI::OptionalParam<QString> &filters, const ::OpenAPI::OptionalParam<QString> &given_name, const ::OpenAPI::OptionalParam<QString> &lei, const ::OpenAPI::OptionalParam<QString> &locale, const ::OpenAPI::OptionalParam<QString> &medialists, const ::OpenAPI::OptionalParam<QString> &middle_name, const ::OpenAPI::OptionalParam<bool> &monitoring, const ::OpenAPI::OptionalParam<QString> &peplists, const ::OpenAPI::OptionalParam<QString> &region, const ::OpenAPI::OptionalParam<bool> &smart_match, const ::OpenAPI::OptionalParam<QString> &watchlists, const ::OpenAPI::OptionalParam<QString> &webhook) {
    QString fullPath = QString(_serverConfigs["pepOrder"][_serverIndices.value("pepOrder")].URL()+"/api/v1/pepsanction/order/{type}/{search}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    
    {
        QString searchPathParam("{");
        searchPathParam.append("search").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "search", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"search"+pathSuffix : pathPrefix;
        fullPath.replace(searchPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(search)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (aliases.hasValue())
    {
        input.add_var("Aliases", ::OpenAPI::toStringValue(aliases.value()));
    }
    if (country.hasValue())
    {
        input.add_var("Country", ::OpenAPI::toStringValue(country.value()));
    }
    if (dob.hasValue())
    {
        input.add_var("DOB", ::OpenAPI::toStringValue(dob.value()));
    }
    if (family_name.hasValue())
    {
        input.add_var("FamilyName", ::OpenAPI::toStringValue(family_name.value()));
    }
    if (filters.hasValue())
    {
        input.add_var("Filters", ::OpenAPI::toStringValue(filters.value()));
    }
    if (given_name.hasValue())
    {
        input.add_var("GivenName", ::OpenAPI::toStringValue(given_name.value()));
    }
    if (lei.hasValue())
    {
        input.add_var("LEI", ::OpenAPI::toStringValue(lei.value()));
    }
    if (locale.hasValue())
    {
        input.add_var("Locale", ::OpenAPI::toStringValue(locale.value()));
    }
    if (medialists.hasValue())
    {
        input.add_var("Medialists", ::OpenAPI::toStringValue(medialists.value()));
    }
    if (middle_name.hasValue())
    {
        input.add_var("MiddleName", ::OpenAPI::toStringValue(middle_name.value()));
    }
    if (monitoring.hasValue())
    {
        input.add_var("Monitoring", ::OpenAPI::toStringValue(monitoring.value()));
    }
    if (peplists.hasValue())
    {
        input.add_var("Peplists", ::OpenAPI::toStringValue(peplists.value()));
    }
    if (region.hasValue())
    {
        input.add_var("Region", ::OpenAPI::toStringValue(region.value()));
    }
    if (smart_match.hasValue())
    {
        input.add_var("SmartMatch", ::OpenAPI::toStringValue(smart_match.value()));
    }
    if (watchlists.hasValue())
    {
        input.add_var("Watchlists", ::OpenAPI::toStringValue(watchlists.value()));
    }
    if (webhook.hasValue())
    {
        input.add_var("Webhook", ::OpenAPI::toStringValue(webhook.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1PepsanctionApi::pepOrderCallback);
    connect(this, &OAIV1PepsanctionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1PepsanctionApi::pepOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pepOrderSignal();
        Q_EMIT pepOrderSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pepOrderSignalE(error_type, error_str);
        Q_EMIT pepOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pepOrderSignalError(error_type, error_str);
        Q_EMIT pepOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1PepsanctionApi::pepRetrieve(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept) {
    QString fullPath = QString(_serverConfigs["pepRetrieve"][_serverIndices.value("pepRetrieve")].URL()+"/api/v1/pepsanction/retrieve/{id}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1PepsanctionApi::pepRetrieveCallback);
    connect(this, &OAIV1PepsanctionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1PepsanctionApi::pepRetrieveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPepRetrieve_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pepRetrieveSignal(output);
        Q_EMIT pepRetrieveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pepRetrieveSignalE(output, error_type, error_str);
        Q_EMIT pepRetrieveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pepRetrieveSignalError(output, error_type, error_str);
        Q_EMIT pepRetrieveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1PepsanctionApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
