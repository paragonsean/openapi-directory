/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatBasic_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatBasic_200_response::OAIVatBasic_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatBasic_200_response::OAIVatBasic_200_response() {
    this->initializeModel();
}

OAIVatBasic_200_response::~OAIVatBasic_200_response() {}

void OAIVatBasic_200_response::initializeModel() {

    m_candidate_isSet = false;
    m_candidate_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_validation_status_isSet = false;
    m_validation_status_isValid = false;
}

void OAIVatBasic_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatBasic_200_response::fromJsonObject(QJsonObject json) {

    m_candidate_isValid = ::OpenAPI::fromJsonValue(m_candidate, json[QString("candidate")]);
    m_candidate_isSet = !json[QString("candidate")].isNull() && m_candidate_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("confidenceScore")]);
    m_confidence_score_isSet = !json[QString("confidenceScore")].isNull() && m_confidence_score_isValid;

    m_validation_status_isValid = ::OpenAPI::fromJsonValue(m_validation_status, json[QString("validationStatus")]);
    m_validation_status_isSet = !json[QString("validationStatus")].isNull() && m_validation_status_isValid;
}

QString OAIVatBasic_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatBasic_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate.size() > 0) {
        obj.insert(QString("candidate"), ::OpenAPI::toJsonValue(m_candidate));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_confidence_score_isSet) {
        obj.insert(QString("confidenceScore"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_validation_status_isSet) {
        obj.insert(QString("validationStatus"), ::OpenAPI::toJsonValue(m_validation_status));
    }
    return obj;
}

QList<OAIObject> OAIVatBasic_200_response::getCandidate() const {
    return m_candidate;
}
void OAIVatBasic_200_response::setCandidate(const QList<OAIObject> &candidate) {
    m_candidate = candidate;
    m_candidate_isSet = true;
}

bool OAIVatBasic_200_response::is_candidate_Set() const{
    return m_candidate_isSet;
}

bool OAIVatBasic_200_response::is_candidate_Valid() const{
    return m_candidate_isValid;
}

OAIObject OAIVatBasic_200_response::getCompany() const {
    return m_company;
}
void OAIVatBasic_200_response::setCompany(const OAIObject &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIVatBasic_200_response::is_company_Set() const{
    return m_company_isSet;
}

bool OAIVatBasic_200_response::is_company_Valid() const{
    return m_company_isValid;
}

double OAIVatBasic_200_response::getConfidenceScore() const {
    return m_confidence_score;
}
void OAIVatBasic_200_response::setConfidenceScore(const double &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAIVatBasic_200_response::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAIVatBasic_200_response::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

bool OAIVatBasic_200_response::isValidationStatus() const {
    return m_validation_status;
}
void OAIVatBasic_200_response::setValidationStatus(const bool &validation_status) {
    m_validation_status = validation_status;
    m_validation_status_isSet = true;
}

bool OAIVatBasic_200_response::is_validation_status_Set() const{
    return m_validation_status_isSet;
}

bool OAIVatBasic_200_response::is_validation_status_Valid() const{
    return m_validation_status_isValid;
}

bool OAIVatBasic_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatBasic_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_score_isValid && m_validation_status_isValid && true;
}

} // namespace OpenAPI
