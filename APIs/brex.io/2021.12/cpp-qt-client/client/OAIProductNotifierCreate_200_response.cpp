/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductNotifierCreate_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductNotifierCreate_200_response::OAIProductNotifierCreate_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductNotifierCreate_200_response::OAIProductNotifierCreate_200_response() {
    this->initializeModel();
}

OAIProductNotifierCreate_200_response::~OAIProductNotifierCreate_200_response() {}

void OAIProductNotifierCreate_200_response::initializeModel() {

    m_callback_isSet = false;
    m_callback_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_last_call_time_isSet = false;
    m_last_call_time_isValid = false;

    m_last_response_code_isSet = false;
    m_last_response_code_isValid = false;

    m_notifier_type_isSet = false;
    m_notifier_type_isValid = false;

    m_product_order_identity_isSet = false;
    m_product_order_identity_isValid = false;
}

void OAIProductNotifierCreate_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductNotifierCreate_200_response::fromJsonObject(QJsonObject json) {

    m_callback_isValid = ::OpenAPI::fromJsonValue(m_callback, json[QString("callback")]);
    m_callback_isSet = !json[QString("callback")].isNull() && m_callback_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_last_call_time_isValid = ::OpenAPI::fromJsonValue(m_last_call_time, json[QString("lastCallTime")]);
    m_last_call_time_isSet = !json[QString("lastCallTime")].isNull() && m_last_call_time_isValid;

    m_last_response_code_isValid = ::OpenAPI::fromJsonValue(m_last_response_code, json[QString("lastResponseCode")]);
    m_last_response_code_isSet = !json[QString("lastResponseCode")].isNull() && m_last_response_code_isValid;

    m_notifier_type_isValid = ::OpenAPI::fromJsonValue(m_notifier_type, json[QString("notifierType")]);
    m_notifier_type_isSet = !json[QString("notifierType")].isNull() && m_notifier_type_isValid;

    m_product_order_identity_isValid = ::OpenAPI::fromJsonValue(m_product_order_identity, json[QString("productOrderIdentity")]);
    m_product_order_identity_isSet = !json[QString("productOrderIdentity")].isNull() && m_product_order_identity_isValid;
}

QString OAIProductNotifierCreate_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductNotifierCreate_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_isSet) {
        obj.insert(QString("callback"), ::OpenAPI::toJsonValue(m_callback));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_last_call_time.isSet()) {
        obj.insert(QString("lastCallTime"), ::OpenAPI::toJsonValue(m_last_call_time));
    }
    if (m_last_response_code_isSet) {
        obj.insert(QString("lastResponseCode"), ::OpenAPI::toJsonValue(m_last_response_code));
    }
    if (m_notifier_type_isSet) {
        obj.insert(QString("notifierType"), ::OpenAPI::toJsonValue(m_notifier_type));
    }
    if (m_product_order_identity_isSet) {
        obj.insert(QString("productOrderIdentity"), ::OpenAPI::toJsonValue(m_product_order_identity));
    }
    return obj;
}

QString OAIProductNotifierCreate_200_response::getCallback() const {
    return m_callback;
}
void OAIProductNotifierCreate_200_response::setCallback(const QString &callback) {
    m_callback = callback;
    m_callback_isSet = true;
}

bool OAIProductNotifierCreate_200_response::is_callback_Set() const{
    return m_callback_isSet;
}

bool OAIProductNotifierCreate_200_response::is_callback_Valid() const{
    return m_callback_isValid;
}

QString OAIProductNotifierCreate_200_response::getIdentity() const {
    return m_identity;
}
void OAIProductNotifierCreate_200_response::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIProductNotifierCreate_200_response::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIProductNotifierCreate_200_response::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIObject OAIProductNotifierCreate_200_response::getLastCallTime() const {
    return m_last_call_time;
}
void OAIProductNotifierCreate_200_response::setLastCallTime(const OAIObject &last_call_time) {
    m_last_call_time = last_call_time;
    m_last_call_time_isSet = true;
}

bool OAIProductNotifierCreate_200_response::is_last_call_time_Set() const{
    return m_last_call_time_isSet;
}

bool OAIProductNotifierCreate_200_response::is_last_call_time_Valid() const{
    return m_last_call_time_isValid;
}

qint32 OAIProductNotifierCreate_200_response::getLastResponseCode() const {
    return m_last_response_code;
}
void OAIProductNotifierCreate_200_response::setLastResponseCode(const qint32 &last_response_code) {
    m_last_response_code = last_response_code;
    m_last_response_code_isSet = true;
}

bool OAIProductNotifierCreate_200_response::is_last_response_code_Set() const{
    return m_last_response_code_isSet;
}

bool OAIProductNotifierCreate_200_response::is_last_response_code_Valid() const{
    return m_last_response_code_isValid;
}

QString OAIProductNotifierCreate_200_response::getNotifierType() const {
    return m_notifier_type;
}
void OAIProductNotifierCreate_200_response::setNotifierType(const QString &notifier_type) {
    m_notifier_type = notifier_type;
    m_notifier_type_isSet = true;
}

bool OAIProductNotifierCreate_200_response::is_notifier_type_Set() const{
    return m_notifier_type_isSet;
}

bool OAIProductNotifierCreate_200_response::is_notifier_type_Valid() const{
    return m_notifier_type_isValid;
}

QString OAIProductNotifierCreate_200_response::getProductOrderIdentity() const {
    return m_product_order_identity;
}
void OAIProductNotifierCreate_200_response::setProductOrderIdentity(const QString &product_order_identity) {
    m_product_order_identity = product_order_identity;
    m_product_order_identity_isSet = true;
}

bool OAIProductNotifierCreate_200_response::is_product_order_identity_Set() const{
    return m_product_order_identity_isSet;
}

bool OAIProductNotifierCreate_200_response::is_product_order_identity_Valid() const{
    return m_product_order_identity_isValid;
}

bool OAIProductNotifierCreate_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_call_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifier_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_order_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductNotifierCreate_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_callback_isValid && m_last_call_time_isValid && m_last_response_code_isValid && m_notifier_type_isValid && m_product_order_identity_isValid && true;
}

} // namespace OpenAPI
