/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductAvailability_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductAvailability_200_response::OAIProductAvailability_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductAvailability_200_response::OAIProductAvailability_200_response() {
    this->initializeModel();
}

OAIProductAvailability_200_response::~OAIProductAvailability_200_response() {}

void OAIProductAvailability_200_response::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_options_isSet = false;
    m_has_options_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIProductAvailability_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductAvailability_200_response::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_options_isValid = ::OpenAPI::fromJsonValue(m_has_options, json[QString("hasOptions")]);
    m_has_options_isSet = !json[QString("hasOptions")].isNull() && m_has_options_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIProductAvailability_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductAvailability_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_options_isSet) {
        obj.insert(QString("hasOptions"), ::OpenAPI::toJsonValue(m_has_options));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIProductAvailability_200_response::getAvailability() const {
    return m_availability;
}
void OAIProductAvailability_200_response::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIProductAvailability_200_response::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIProductAvailability_200_response::is_availability_Valid() const{
    return m_availability_isValid;
}

QString OAIProductAvailability_200_response::getCategory() const {
    return m_category;
}
void OAIProductAvailability_200_response::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIProductAvailability_200_response::is_category_Set() const{
    return m_category_isSet;
}

bool OAIProductAvailability_200_response::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIProductAvailability_200_response::getCountryCode() const {
    return m_country_code;
}
void OAIProductAvailability_200_response::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIProductAvailability_200_response::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIProductAvailability_200_response::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIProductAvailability_200_response::getDescription() const {
    return m_description;
}
void OAIProductAvailability_200_response::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductAvailability_200_response::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductAvailability_200_response::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProductAvailability_200_response::isHasOptions() const {
    return m_has_options;
}
void OAIProductAvailability_200_response::setHasOptions(const bool &has_options) {
    m_has_options = has_options;
    m_has_options_isSet = true;
}

bool OAIProductAvailability_200_response::is_has_options_Set() const{
    return m_has_options_isSet;
}

bool OAIProductAvailability_200_response::is_has_options_Valid() const{
    return m_has_options_isValid;
}

QList<QString> OAIProductAvailability_200_response::getOptions() const {
    return m_options;
}
void OAIProductAvailability_200_response::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIProductAvailability_200_response::is_options_Set() const{
    return m_options_isSet;
}

bool OAIProductAvailability_200_response::is_options_Valid() const{
    return m_options_isValid;
}

float OAIProductAvailability_200_response::getPrice() const {
    return m_price;
}
void OAIProductAvailability_200_response::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProductAvailability_200_response::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProductAvailability_200_response::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIProductAvailability_200_response::getProvider() const {
    return m_provider;
}
void OAIProductAvailability_200_response::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIProductAvailability_200_response::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIProductAvailability_200_response::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIProductAvailability_200_response::getSku() const {
    return m_sku;
}
void OAIProductAvailability_200_response::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIProductAvailability_200_response::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIProductAvailability_200_response::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIProductAvailability_200_response::getType() const {
    return m_type;
}
void OAIProductAvailability_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductAvailability_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductAvailability_200_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIProductAvailability_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductAvailability_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_availability_isValid && m_category_isValid && m_country_code_isValid && m_description_isValid && m_has_options_isValid && m_options_isValid && m_price_isValid && m_provider_isValid && m_sku_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
