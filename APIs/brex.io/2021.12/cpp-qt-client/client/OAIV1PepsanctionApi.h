/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1PepsanctionApi_H
#define OAI_OAIV1PepsanctionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPepMonitorList_200_response_inner.h"
#include "OAIPepRetrieve_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1PepsanctionApi : public QObject {
    Q_OBJECT

public:
    OAIV1PepsanctionApi(const int timeOut = 0);
    ~OAIV1PepsanctionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void pepMonitorList();

    /**
    * @param[in]  id QString [required]
    */
    virtual void pepMonitorUnregister(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  webhook QString [optional]
    */
    virtual void pepMonitorUpdate(const QString &id, const ::OpenAPI::OptionalParam<QString> &webhook = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  search QString [required]
    * @param[in]  aliases QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  dob QString [optional]
    * @param[in]  family_name QString [optional]
    * @param[in]  filters QString [optional]
    * @param[in]  given_name QString [optional]
    * @param[in]  lei QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  medialists QString [optional]
    * @param[in]  middle_name QString [optional]
    * @param[in]  monitoring bool [optional]
    * @param[in]  peplists QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  smart_match bool [optional]
    * @param[in]  watchlists QString [optional]
    * @param[in]  webhook QString [optional]
    */
    virtual void pepOrder(const QString &type, const QString &search, const ::OpenAPI::OptionalParam<QString> &aliases = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dob = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &family_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &given_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &medialists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &middle_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &monitoring = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &peplists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &smart_match = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &watchlists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhook = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  accept QString [optional]
    */
    virtual void pepRetrieve(const QString &id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void pepMonitorListCallback(OAIHttpRequestWorker *worker);
    void pepMonitorUnregisterCallback(OAIHttpRequestWorker *worker);
    void pepMonitorUpdateCallback(OAIHttpRequestWorker *worker);
    void pepOrderCallback(OAIHttpRequestWorker *worker);
    void pepRetrieveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void pepMonitorListSignal(QList<OAIPepMonitorList_200_response_inner> summary);
    void pepMonitorUnregisterSignal();
    void pepMonitorUpdateSignal(OAIPepMonitorList_200_response_inner summary);
    void pepOrderSignal();
    void pepRetrieveSignal(OAIPepRetrieve_200_response summary);


    void pepMonitorListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPepMonitorList_200_response_inner> summary);
    void pepMonitorUnregisterSignalFull(OAIHttpRequestWorker *worker);
    void pepMonitorUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPepMonitorList_200_response_inner summary);
    void pepOrderSignalFull(OAIHttpRequestWorker *worker);
    void pepRetrieveSignalFull(OAIHttpRequestWorker *worker, OAIPepRetrieve_200_response summary);

    Q_DECL_DEPRECATED_X("Use pepMonitorListSignalError() instead")
    void pepMonitorListSignalE(QList<OAIPepMonitorList_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pepMonitorListSignalError(QList<OAIPepMonitorList_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepMonitorUnregisterSignalError() instead")
    void pepMonitorUnregisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pepMonitorUnregisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepMonitorUpdateSignalError() instead")
    void pepMonitorUpdateSignalE(OAIPepMonitorList_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pepMonitorUpdateSignalError(OAIPepMonitorList_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepOrderSignalError() instead")
    void pepOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pepOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepRetrieveSignalError() instead")
    void pepRetrieveSignalE(OAIPepRetrieve_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pepRetrieveSignalError(OAIPepRetrieve_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use pepMonitorListSignalErrorFull() instead")
    void pepMonitorListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pepMonitorListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepMonitorUnregisterSignalErrorFull() instead")
    void pepMonitorUnregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pepMonitorUnregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepMonitorUpdateSignalErrorFull() instead")
    void pepMonitorUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pepMonitorUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepOrderSignalErrorFull() instead")
    void pepOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pepOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pepRetrieveSignalErrorFull() instead")
    void pepRetrieveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pepRetrieveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
