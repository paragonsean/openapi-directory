/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1TinVerificationApi_H
#define OAI_OAIV1TinVerificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITinVerificationBasicCheck_200_response.h"
#include "OAITinVerificationComprehensiveCheck_200_response.h"
#include "OAITinVerificationNameLookup_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1TinVerificationApi : public QObject {
    Q_OBJECT

public:
    OAIV1TinVerificationApi(const int timeOut = 0);
    ~OAIV1TinVerificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  tin QString [required]
    * @param[in]  name QString [required]
    */
    virtual void tinVerificationBasicCheck(const QString &tin, const QString &name);

    /**
    * @param[in]  tin QString [required]
    * @param[in]  name QString [required]
    * @param[in]  threshold qint64 [optional]
    */
    virtual void tinVerificationComprehensiveCheck(const QString &tin, const QString &name, const ::OpenAPI::OptionalParam<qint64> &threshold = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  tin QString [required]
    */
    virtual void tinVerificationNameLookup(const QString &tin);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tinVerificationBasicCheckCallback(OAIHttpRequestWorker *worker);
    void tinVerificationComprehensiveCheckCallback(OAIHttpRequestWorker *worker);
    void tinVerificationNameLookupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tinVerificationBasicCheckSignal(OAITinVerificationBasicCheck_200_response summary);
    void tinVerificationComprehensiveCheckSignal(OAITinVerificationComprehensiveCheck_200_response summary);
    void tinVerificationNameLookupSignal(OAITinVerificationNameLookup_200_response summary);


    void tinVerificationBasicCheckSignalFull(OAIHttpRequestWorker *worker, OAITinVerificationBasicCheck_200_response summary);
    void tinVerificationComprehensiveCheckSignalFull(OAIHttpRequestWorker *worker, OAITinVerificationComprehensiveCheck_200_response summary);
    void tinVerificationNameLookupSignalFull(OAIHttpRequestWorker *worker, OAITinVerificationNameLookup_200_response summary);

    Q_DECL_DEPRECATED_X("Use tinVerificationBasicCheckSignalError() instead")
    void tinVerificationBasicCheckSignalE(OAITinVerificationBasicCheck_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tinVerificationBasicCheckSignalError(OAITinVerificationBasicCheck_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tinVerificationComprehensiveCheckSignalError() instead")
    void tinVerificationComprehensiveCheckSignalE(OAITinVerificationComprehensiveCheck_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tinVerificationComprehensiveCheckSignalError(OAITinVerificationComprehensiveCheck_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tinVerificationNameLookupSignalError() instead")
    void tinVerificationNameLookupSignalE(OAITinVerificationNameLookup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tinVerificationNameLookupSignalError(OAITinVerificationNameLookup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tinVerificationBasicCheckSignalErrorFull() instead")
    void tinVerificationBasicCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tinVerificationBasicCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tinVerificationComprehensiveCheckSignalErrorFull() instead")
    void tinVerificationComprehensiveCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tinVerificationComprehensiveCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tinVerificationNameLookupSignalErrorFull() instead")
    void tinVerificationNameLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tinVerificationNameLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
