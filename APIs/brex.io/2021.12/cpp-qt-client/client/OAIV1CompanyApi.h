/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1CompanyApi_H
#define OAI_OAIV1CompanyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompanyAnnouncement_200_response_inner.h"
#include "OAICompanyDeepsearchISIN_200_response_inner.h"
#include "OAICompanyDeepsearchLEI_200_response.h"
#include "OAICompanyNotificationId_200_response_inner.h"
#include "OAICompanyNotificationRegister_200_response.h"
#include "OAICompanySearchName_200_response_inner.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1CompanyApi : public QObject {
    Q_OBJECT

public:
    OAIV1CompanyApi(const int timeOut = 0);
    ~OAIV1CompanyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country QString [required]
    * @param[in]  address QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  vat QString [optional]
    */
    virtual void companyAlternativeSearch(const QString &country, const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vat = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void companyAnnouncement(const QString &id);

    /**
    * @param[in]  isin QString [optional]
    */
    virtual void companyDeepsearchISIN(const ::OpenAPI::OptionalParam<QString> &isin = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void companyDeepsearchLEI(const QString &number, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  name QString [required]
    */
    virtual void companyDeepsearchName(const QString &country, const QString &name);

    /**
    * @param[in]  country QString [required]
    * @param[in]  number QString [required]
    */
    virtual void companyDeepsearchNumber(const QString &country, const QString &number);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  data bool [optional]
    */
    virtual void companyIdAnnouncements(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &data = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  dataset QString [required]
    * @param[in]  check_stock_listing bool [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void companyIdDataset(const QString &id, const QString &dataset, const ::OpenAPI::OptionalParam<bool> &check_stock_listing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void companyIdSuper(const QString &id, const QString &country, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


    virtual void companyMonitorChangeTypesList();

    /**
    * @param[in]  id QString [required]
    */
    virtual void companyMonitorId(const QString &id);


    virtual void companyMonitorList();

    /**
    * @param[in]  id QString [required]
    * @param[in]  callback_url QString [required]
    * @param[in]  change_type QString [required]
    */
    virtual void companyMonitorRegister(const QString &id, const QString &callback_url, const QString &change_type);

    /**
    * @param[in]  id QString [required]
    */
    virtual void companyMonitorUnregister(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void companyNotificationId(const QString &id);


    virtual void companyNotificationList();

    /**
    * @param[in]  id QString [required]
    * @param[in]  callback_url QString [required]
    */
    virtual void companyNotificationRegister(const QString &id, const QString &callback_url);

    /**
    * @param[in]  id QString [required]
    */
    virtual void companyNotificationUnregister(const QString &id);

    /**
    * @param[in]  country QString [required]
    * @param[in]  name QString [required]
    * @param[in]  limit qint64 [optional]
    */
    virtual void companySearchName(const QString &country, const QString &name, const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  number QString [required]
    * @param[in]  limit qint64 [optional]
    */
    virtual void companySearchNumber(const QString &country, const QString &number, const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void companyAlternativeSearchCallback(OAIHttpRequestWorker *worker);
    void companyAnnouncementCallback(OAIHttpRequestWorker *worker);
    void companyDeepsearchISINCallback(OAIHttpRequestWorker *worker);
    void companyDeepsearchLEICallback(OAIHttpRequestWorker *worker);
    void companyDeepsearchNameCallback(OAIHttpRequestWorker *worker);
    void companyDeepsearchNumberCallback(OAIHttpRequestWorker *worker);
    void companyIdAnnouncementsCallback(OAIHttpRequestWorker *worker);
    void companyIdDatasetCallback(OAIHttpRequestWorker *worker);
    void companyIdSuperCallback(OAIHttpRequestWorker *worker);
    void companyMonitorChangeTypesListCallback(OAIHttpRequestWorker *worker);
    void companyMonitorIdCallback(OAIHttpRequestWorker *worker);
    void companyMonitorListCallback(OAIHttpRequestWorker *worker);
    void companyMonitorRegisterCallback(OAIHttpRequestWorker *worker);
    void companyMonitorUnregisterCallback(OAIHttpRequestWorker *worker);
    void companyNotificationIdCallback(OAIHttpRequestWorker *worker);
    void companyNotificationListCallback(OAIHttpRequestWorker *worker);
    void companyNotificationRegisterCallback(OAIHttpRequestWorker *worker);
    void companyNotificationUnregisterCallback(OAIHttpRequestWorker *worker);
    void companySearchNameCallback(OAIHttpRequestWorker *worker);
    void companySearchNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void companyAlternativeSearchSignal();
    void companyAnnouncementSignal(QList<OAICompanyAnnouncement_200_response_inner> summary);
    void companyDeepsearchISINSignal(QList<OAICompanyDeepsearchISIN_200_response_inner> summary);
    void companyDeepsearchLEISignal(OAICompanyDeepsearchLEI_200_response summary);
    void companyDeepsearchNameSignal();
    void companyDeepsearchNumberSignal();
    void companyIdAnnouncementsSignal();
    void companyIdDatasetSignal(OAIObject summary);
    void companyIdSuperSignal();
    void companyMonitorChangeTypesListSignal(QList<QString> summary);
    void companyMonitorIdSignal();
    void companyMonitorListSignal();
    void companyMonitorRegisterSignal();
    void companyMonitorUnregisterSignal();
    void companyNotificationIdSignal(QList<OAICompanyNotificationId_200_response_inner> summary);
    void companyNotificationListSignal();
    void companyNotificationRegisterSignal(OAICompanyNotificationRegister_200_response summary);
    void companyNotificationUnregisterSignal();
    void companySearchNameSignal(QList<OAICompanySearchName_200_response_inner> summary);
    void companySearchNumberSignal();


    void companyAlternativeSearchSignalFull(OAIHttpRequestWorker *worker);
    void companyAnnouncementSignalFull(OAIHttpRequestWorker *worker, QList<OAICompanyAnnouncement_200_response_inner> summary);
    void companyDeepsearchISINSignalFull(OAIHttpRequestWorker *worker, QList<OAICompanyDeepsearchISIN_200_response_inner> summary);
    void companyDeepsearchLEISignalFull(OAIHttpRequestWorker *worker, OAICompanyDeepsearchLEI_200_response summary);
    void companyDeepsearchNameSignalFull(OAIHttpRequestWorker *worker);
    void companyDeepsearchNumberSignalFull(OAIHttpRequestWorker *worker);
    void companyIdAnnouncementsSignalFull(OAIHttpRequestWorker *worker);
    void companyIdDatasetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void companyIdSuperSignalFull(OAIHttpRequestWorker *worker);
    void companyMonitorChangeTypesListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void companyMonitorIdSignalFull(OAIHttpRequestWorker *worker);
    void companyMonitorListSignalFull(OAIHttpRequestWorker *worker);
    void companyMonitorRegisterSignalFull(OAIHttpRequestWorker *worker);
    void companyMonitorUnregisterSignalFull(OAIHttpRequestWorker *worker);
    void companyNotificationIdSignalFull(OAIHttpRequestWorker *worker, QList<OAICompanyNotificationId_200_response_inner> summary);
    void companyNotificationListSignalFull(OAIHttpRequestWorker *worker);
    void companyNotificationRegisterSignalFull(OAIHttpRequestWorker *worker, OAICompanyNotificationRegister_200_response summary);
    void companyNotificationUnregisterSignalFull(OAIHttpRequestWorker *worker);
    void companySearchNameSignalFull(OAIHttpRequestWorker *worker, QList<OAICompanySearchName_200_response_inner> summary);
    void companySearchNumberSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use companyAlternativeSearchSignalError() instead")
    void companyAlternativeSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyAlternativeSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyAnnouncementSignalError() instead")
    void companyAnnouncementSignalE(QList<OAICompanyAnnouncement_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyAnnouncementSignalError(QList<OAICompanyAnnouncement_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchISINSignalError() instead")
    void companyDeepsearchISINSignalE(QList<OAICompanyDeepsearchISIN_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchISINSignalError(QList<OAICompanyDeepsearchISIN_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchLEISignalError() instead")
    void companyDeepsearchLEISignalE(OAICompanyDeepsearchLEI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchLEISignalError(OAICompanyDeepsearchLEI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchNameSignalError() instead")
    void companyDeepsearchNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchNumberSignalError() instead")
    void companyDeepsearchNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyIdAnnouncementsSignalError() instead")
    void companyIdAnnouncementsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyIdAnnouncementsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyIdDatasetSignalError() instead")
    void companyIdDatasetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyIdDatasetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyIdSuperSignalError() instead")
    void companyIdSuperSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyIdSuperSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorChangeTypesListSignalError() instead")
    void companyMonitorChangeTypesListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorChangeTypesListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorIdSignalError() instead")
    void companyMonitorIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorListSignalError() instead")
    void companyMonitorListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorRegisterSignalError() instead")
    void companyMonitorRegisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorRegisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorUnregisterSignalError() instead")
    void companyMonitorUnregisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorUnregisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationIdSignalError() instead")
    void companyNotificationIdSignalE(QList<OAICompanyNotificationId_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationIdSignalError(QList<OAICompanyNotificationId_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationListSignalError() instead")
    void companyNotificationListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationRegisterSignalError() instead")
    void companyNotificationRegisterSignalE(OAICompanyNotificationRegister_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationRegisterSignalError(OAICompanyNotificationRegister_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationUnregisterSignalError() instead")
    void companyNotificationUnregisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationUnregisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySearchNameSignalError() instead")
    void companySearchNameSignalE(QList<OAICompanySearchName_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companySearchNameSignalError(QList<OAICompanySearchName_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySearchNumberSignalError() instead")
    void companySearchNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companySearchNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use companyAlternativeSearchSignalErrorFull() instead")
    void companyAlternativeSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyAlternativeSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyAnnouncementSignalErrorFull() instead")
    void companyAnnouncementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyAnnouncementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchISINSignalErrorFull() instead")
    void companyDeepsearchISINSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchISINSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchLEISignalErrorFull() instead")
    void companyDeepsearchLEISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchLEISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchNameSignalErrorFull() instead")
    void companyDeepsearchNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyDeepsearchNumberSignalErrorFull() instead")
    void companyDeepsearchNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyDeepsearchNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyIdAnnouncementsSignalErrorFull() instead")
    void companyIdAnnouncementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyIdAnnouncementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyIdDatasetSignalErrorFull() instead")
    void companyIdDatasetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyIdDatasetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyIdSuperSignalErrorFull() instead")
    void companyIdSuperSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyIdSuperSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorChangeTypesListSignalErrorFull() instead")
    void companyMonitorChangeTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorChangeTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorIdSignalErrorFull() instead")
    void companyMonitorIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorListSignalErrorFull() instead")
    void companyMonitorListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorRegisterSignalErrorFull() instead")
    void companyMonitorRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyMonitorUnregisterSignalErrorFull() instead")
    void companyMonitorUnregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyMonitorUnregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationIdSignalErrorFull() instead")
    void companyNotificationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationListSignalErrorFull() instead")
    void companyNotificationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationRegisterSignalErrorFull() instead")
    void companyNotificationRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyNotificationUnregisterSignalErrorFull() instead")
    void companyNotificationUnregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyNotificationUnregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySearchNameSignalErrorFull() instead")
    void companySearchNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companySearchNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySearchNumberSignalErrorFull() instead")
    void companySearchNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companySearchNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
