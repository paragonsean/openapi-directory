/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanySearchName_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanySearchName_200_response_inner::OAICompanySearchName_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanySearchName_200_response_inner::OAICompanySearchName_200_response_inner() {
    this->initializeModel();
}

OAICompanySearchName_200_response_inner::~OAICompanySearchName_200_response_inner() {}

void OAICompanySearchName_200_response_inner::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_of_incorporation_isSet = false;
    m_date_of_incorporation_isValid = false;

    m_extra_data_isSet = false;
    m_extra_data_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legal_form_isSet = false;
    m_legal_form_isValid = false;

    m_managing_directors_isSet = false;
    m_managing_directors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_request_time_isSet = false;
    m_request_time_isValid = false;

    m_secretaries_isSet = false;
    m_secretaries_isValid = false;

    m_sic_nace_codes_isSet = false;
    m_sic_nace_codes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICompanySearchName_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanySearchName_200_response_inner::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date_of_incorporation_isValid = ::OpenAPI::fromJsonValue(m_date_of_incorporation, json[QString("dateOfIncorporation")]);
    m_date_of_incorporation_isSet = !json[QString("dateOfIncorporation")].isNull() && m_date_of_incorporation_isValid;

    m_extra_data_isValid = ::OpenAPI::fromJsonValue(m_extra_data, json[QString("extraData")]);
    m_extra_data_isSet = !json[QString("extraData")].isNull() && m_extra_data_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formattedAddress")]);
    m_formatted_address_isSet = !json[QString("formattedAddress")].isNull() && m_formatted_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legal_form_isValid = ::OpenAPI::fromJsonValue(m_legal_form, json[QString("legalForm")]);
    m_legal_form_isSet = !json[QString("legalForm")].isNull() && m_legal_form_isValid;

    m_managing_directors_isValid = ::OpenAPI::fromJsonValue(m_managing_directors, json[QString("managingDirectors")]);
    m_managing_directors_isSet = !json[QString("managingDirectors")].isNull() && m_managing_directors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_request_time_isValid = ::OpenAPI::fromJsonValue(m_request_time, json[QString("requestTime")]);
    m_request_time_isSet = !json[QString("requestTime")].isNull() && m_request_time_isValid;

    m_secretaries_isValid = ::OpenAPI::fromJsonValue(m_secretaries, json[QString("secretaries")]);
    m_secretaries_isSet = !json[QString("secretaries")].isNull() && m_secretaries_isValid;

    m_sic_nace_codes_isValid = ::OpenAPI::fromJsonValue(m_sic_nace_codes, json[QString("sicNaceCodes")]);
    m_sic_nace_codes_isSet = !json[QString("sicNaceCodes")].isNull() && m_sic_nace_codes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICompanySearchName_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanySearchName_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_of_incorporation_isSet) {
        obj.insert(QString("dateOfIncorporation"), ::OpenAPI::toJsonValue(m_date_of_incorporation));
    }
    if (m_extra_data_isSet) {
        obj.insert(QString("extraData"), ::OpenAPI::toJsonValue(m_extra_data));
    }
    if (m_formatted_address.size() > 0) {
        obj.insert(QString("formattedAddress"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legal_form_isSet) {
        obj.insert(QString("legalForm"), ::OpenAPI::toJsonValue(m_legal_form));
    }
    if (m_managing_directors.size() > 0) {
        obj.insert(QString("managingDirectors"), ::OpenAPI::toJsonValue(m_managing_directors));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_request_time_isSet) {
        obj.insert(QString("requestTime"), ::OpenAPI::toJsonValue(m_request_time));
    }
    if (m_secretaries.size() > 0) {
        obj.insert(QString("secretaries"), ::OpenAPI::toJsonValue(m_secretaries));
    }
    if (m_sic_nace_codes.size() > 0) {
        obj.insert(QString("sicNaceCodes"), ::OpenAPI::toJsonValue(m_sic_nace_codes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<QString> OAICompanySearchName_200_response_inner::getAddress() const {
    return m_address;
}
void OAICompanySearchName_200_response_inner::setAddress(const QList<QString> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAICompanySearchName_200_response_inner::is_address_Valid() const{
    return m_address_isValid;
}

QString OAICompanySearchName_200_response_inner::getCountry() const {
    return m_country;
}
void OAICompanySearchName_200_response_inner::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_country_Set() const{
    return m_country_isSet;
}

bool OAICompanySearchName_200_response_inner::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICompanySearchName_200_response_inner::getDateOfIncorporation() const {
    return m_date_of_incorporation;
}
void OAICompanySearchName_200_response_inner::setDateOfIncorporation(const QString &date_of_incorporation) {
    m_date_of_incorporation = date_of_incorporation;
    m_date_of_incorporation_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_date_of_incorporation_Set() const{
    return m_date_of_incorporation_isSet;
}

bool OAICompanySearchName_200_response_inner::is_date_of_incorporation_Valid() const{
    return m_date_of_incorporation_isValid;
}

OAIObject OAICompanySearchName_200_response_inner::getExtraData() const {
    return m_extra_data;
}
void OAICompanySearchName_200_response_inner::setExtraData(const OAIObject &extra_data) {
    m_extra_data = extra_data;
    m_extra_data_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_extra_data_Set() const{
    return m_extra_data_isSet;
}

bool OAICompanySearchName_200_response_inner::is_extra_data_Valid() const{
    return m_extra_data_isValid;
}

QList<QString> OAICompanySearchName_200_response_inner::getFormattedAddress() const {
    return m_formatted_address;
}
void OAICompanySearchName_200_response_inner::setFormattedAddress(const QList<QString> &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAICompanySearchName_200_response_inner::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAICompanySearchName_200_response_inner::getId() const {
    return m_id;
}
void OAICompanySearchName_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompanySearchName_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompanySearchName_200_response_inner::getLegalForm() const {
    return m_legal_form;
}
void OAICompanySearchName_200_response_inner::setLegalForm(const QString &legal_form) {
    m_legal_form = legal_form;
    m_legal_form_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_legal_form_Set() const{
    return m_legal_form_isSet;
}

bool OAICompanySearchName_200_response_inner::is_legal_form_Valid() const{
    return m_legal_form_isValid;
}

QList<QString> OAICompanySearchName_200_response_inner::getManagingDirectors() const {
    return m_managing_directors;
}
void OAICompanySearchName_200_response_inner::setManagingDirectors(const QList<QString> &managing_directors) {
    m_managing_directors = managing_directors;
    m_managing_directors_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_managing_directors_Set() const{
    return m_managing_directors_isSet;
}

bool OAICompanySearchName_200_response_inner::is_managing_directors_Valid() const{
    return m_managing_directors_isValid;
}

QString OAICompanySearchName_200_response_inner::getName() const {
    return m_name;
}
void OAICompanySearchName_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompanySearchName_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompanySearchName_200_response_inner::getRegistrationNumber() const {
    return m_registration_number;
}
void OAICompanySearchName_200_response_inner::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAICompanySearchName_200_response_inner::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

qint32 OAICompanySearchName_200_response_inner::getRequestTime() const {
    return m_request_time;
}
void OAICompanySearchName_200_response_inner::setRequestTime(const qint32 &request_time) {
    m_request_time = request_time;
    m_request_time_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_request_time_Set() const{
    return m_request_time_isSet;
}

bool OAICompanySearchName_200_response_inner::is_request_time_Valid() const{
    return m_request_time_isValid;
}

QList<QString> OAICompanySearchName_200_response_inner::getSecretaries() const {
    return m_secretaries;
}
void OAICompanySearchName_200_response_inner::setSecretaries(const QList<QString> &secretaries) {
    m_secretaries = secretaries;
    m_secretaries_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_secretaries_Set() const{
    return m_secretaries_isSet;
}

bool OAICompanySearchName_200_response_inner::is_secretaries_Valid() const{
    return m_secretaries_isValid;
}

QList<QString> OAICompanySearchName_200_response_inner::getSicNaceCodes() const {
    return m_sic_nace_codes;
}
void OAICompanySearchName_200_response_inner::setSicNaceCodes(const QList<QString> &sic_nace_codes) {
    m_sic_nace_codes = sic_nace_codes;
    m_sic_nace_codes_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_sic_nace_codes_Set() const{
    return m_sic_nace_codes_isSet;
}

bool OAICompanySearchName_200_response_inner::is_sic_nace_codes_Valid() const{
    return m_sic_nace_codes_isValid;
}

QString OAICompanySearchName_200_response_inner::getStatus() const {
    return m_status;
}
void OAICompanySearchName_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICompanySearchName_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAICompanySearchName_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICompanySearchName_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_incorporation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_directors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secretaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic_nace_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanySearchName_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
