/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPepRetrieve_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPepRetrieve_200_response::OAIPepRetrieve_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPepRetrieve_200_response::OAIPepRetrieve_200_response() {
    this->initializeModel();
}

OAIPepRetrieve_200_response::~OAIPepRetrieve_200_response() {}

void OAIPepRetrieve_200_response::initializeModel() {

    m_lists_checked_isSet = false;
    m_lists_checked_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPepRetrieve_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPepRetrieve_200_response::fromJsonObject(QJsonObject json) {

    m_lists_checked_isValid = ::OpenAPI::fromJsonValue(m_lists_checked, json[QString("listsChecked")]);
    m_lists_checked_isSet = !json[QString("listsChecked")].isNull() && m_lists_checked_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPepRetrieve_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPepRetrieve_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_lists_checked_isSet) {
        obj.insert(QString("listsChecked"), ::OpenAPI::toJsonValue(m_lists_checked));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPepRetrieve_200_response::getListsChecked() const {
    return m_lists_checked;
}
void OAIPepRetrieve_200_response::setListsChecked(const QString &lists_checked) {
    m_lists_checked = lists_checked;
    m_lists_checked_isSet = true;
}

bool OAIPepRetrieve_200_response::is_lists_checked_Set() const{
    return m_lists_checked_isSet;
}

bool OAIPepRetrieve_200_response::is_lists_checked_Valid() const{
    return m_lists_checked_isValid;
}

OAIPepRetrieve_200_response_results OAIPepRetrieve_200_response::getResults() const {
    return m_results;
}
void OAIPepRetrieve_200_response::setResults(const OAIPepRetrieve_200_response_results &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPepRetrieve_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPepRetrieve_200_response::is_results_Valid() const{
    return m_results_isValid;
}

QString OAIPepRetrieve_200_response::getSearch() const {
    return m_search;
}
void OAIPepRetrieve_200_response::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIPepRetrieve_200_response::is_search_Set() const{
    return m_search_isSet;
}

bool OAIPepRetrieve_200_response::is_search_Valid() const{
    return m_search_isValid;
}

QString OAIPepRetrieve_200_response::getStatus() const {
    return m_status;
}
void OAIPepRetrieve_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPepRetrieve_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPepRetrieve_200_response::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIPepRetrieve_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAIPepRetrieve_200_response::setTimestamp(const OAIObject &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPepRetrieve_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPepRetrieve_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIPepRetrieve_200_response::getType() const {
    return m_type;
}
void OAIPepRetrieve_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPepRetrieve_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPepRetrieve_200_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPepRetrieve_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lists_checked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPepRetrieve_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lists_checked_isValid && m_search_isValid && m_status_isValid && m_timestamp_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
