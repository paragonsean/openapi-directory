/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1VatVerificationApi_H
#define OAI_OAIV1VatVerificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVatBasic_200_response.h"
#include "OAIVatLevelTwo_200_response.h"
#include "OAIVatLookup_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1VatVerificationApi : public QObject {
    Q_OBJECT

public:
    OAIV1VatVerificationApi(const int timeOut = 0);
    ~OAIV1VatVerificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country QString [required]
    * @param[in]  vat_number QString [required]
    * @param[in]  company_address QString [optional]
    * @param[in]  company_name QString [optional]
    * @param[in]  company_number QString [optional]
    */
    virtual void vatBasic(const QString &country, const QString &vat_number, const ::OpenAPI::OptionalParam<QString> &company_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  vat_number QString [required]
    * @param[in]  company_address QString [optional]
    * @param[in]  company_name QString [optional]
    * @param[in]  company_number QString [optional]
    */
    virtual void vatComprehensive(const QString &country, const QString &vat_number, const ::OpenAPI::OptionalParam<QString> &company_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  vat_number QString [required]
    * @param[in]  confirmation bool [optional]
    */
    virtual void vatLevelTwo(const QString &country, const QString &vat_number, const ::OpenAPI::OptionalParam<bool> &confirmation = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  name QString [required]
    * @param[in]  address QString [optional]
    */
    virtual void vatLookup(const QString &country, const QString &name, const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void vatBasicCallback(OAIHttpRequestWorker *worker);
    void vatComprehensiveCallback(OAIHttpRequestWorker *worker);
    void vatLevelTwoCallback(OAIHttpRequestWorker *worker);
    void vatLookupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void vatBasicSignal(OAIVatBasic_200_response summary);
    void vatComprehensiveSignal();
    void vatLevelTwoSignal(OAIVatLevelTwo_200_response summary);
    void vatLookupSignal(OAIVatLookup_200_response summary);


    void vatBasicSignalFull(OAIHttpRequestWorker *worker, OAIVatBasic_200_response summary);
    void vatComprehensiveSignalFull(OAIHttpRequestWorker *worker);
    void vatLevelTwoSignalFull(OAIHttpRequestWorker *worker, OAIVatLevelTwo_200_response summary);
    void vatLookupSignalFull(OAIHttpRequestWorker *worker, OAIVatLookup_200_response summary);

    Q_DECL_DEPRECATED_X("Use vatBasicSignalError() instead")
    void vatBasicSignalE(OAIVatBasic_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatBasicSignalError(OAIVatBasic_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatComprehensiveSignalError() instead")
    void vatComprehensiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vatComprehensiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatLevelTwoSignalError() instead")
    void vatLevelTwoSignalE(OAIVatLevelTwo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatLevelTwoSignalError(OAIVatLevelTwo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatLookupSignalError() instead")
    void vatLookupSignalE(OAIVatLookup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatLookupSignalError(OAIVatLookup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use vatBasicSignalErrorFull() instead")
    void vatBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatComprehensiveSignalErrorFull() instead")
    void vatComprehensiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatComprehensiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatLevelTwoSignalErrorFull() instead")
    void vatLevelTwoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatLevelTwoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatLookupSignalErrorFull() instead")
    void vatLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
