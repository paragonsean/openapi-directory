/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatLookup_200_response_matches_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatLookup_200_response_matches_inner::OAIVatLookup_200_response_matches_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatLookup_200_response_matches_inner::OAIVatLookup_200_response_matches_inner() {
    this->initializeModel();
}

OAIVatLookup_200_response_matches_inner::~OAIVatLookup_200_response_matches_inner() {}

void OAIVatLookup_200_response_matches_inner::initializeModel() {

    m_company_isSet = false;
    m_company_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAIVatLookup_200_response_matches_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatLookup_200_response_matches_inner::fromJsonObject(QJsonObject json) {

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAIVatLookup_200_response_matches_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatLookup_200_response_matches_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_vat_isSet) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

OAIObject OAIVatLookup_200_response_matches_inner::getCompany() const {
    return m_company;
}
void OAIVatLookup_200_response_matches_inner::setCompany(const OAIObject &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIVatLookup_200_response_matches_inner::is_company_Set() const{
    return m_company_isSet;
}

bool OAIVatLookup_200_response_matches_inner::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIVatLookup_200_response_matches_inner::getVat() const {
    return m_vat;
}
void OAIVatLookup_200_response_matches_inner::setVat(const QString &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIVatLookup_200_response_matches_inner::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIVatLookup_200_response_matches_inner::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIVatLookup_200_response_matches_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatLookup_200_response_matches_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
