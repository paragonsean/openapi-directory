/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1ProductApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIV1ProductApi::OAIV1ProductApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIV1ProductApi::~OAIV1ProductApi() {
}

void OAIV1ProductApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.kompany.com/"),
    "Main endpoint",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("productAvailability", defaultConf);
    _serverIndices.insert("productAvailability", 0);
    _serverConfigs.insert("productCatalog", defaultConf);
    _serverIndices.insert("productCatalog", 0);
    _serverConfigs.insert("productNotifier", defaultConf);
    _serverIndices.insert("productNotifier", 0);
    _serverConfigs.insert("productNotifierCreate", defaultConf);
    _serverIndices.insert("productNotifierCreate", 0);
    _serverConfigs.insert("productOrder", defaultConf);
    _serverIndices.insert("productOrder", 0);
    _serverConfigs.insert("productOrderConcierge", defaultConf);
    _serverIndices.insert("productOrderConcierge", 0);
    _serverConfigs.insert("productOrderUbo", defaultConf);
    _serverIndices.insert("productOrderUbo", 0);
    _serverConfigs.insert("productOrderWithOption", defaultConf);
    _serverIndices.insert("productOrderWithOption", 0);
    _serverConfigs.insert("productRetrieve", defaultConf);
    _serverIndices.insert("productRetrieve", 0);
    _serverConfigs.insert("productSearch", defaultConf);
    _serverIndices.insert("productSearch", 0);
    _serverConfigs.insert("productStatus", defaultConf);
    _serverIndices.insert("productStatus", 0);
    _serverConfigs.insert("productUpdateAction", defaultConf);
    _serverIndices.insert("productUpdateAction", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIV1ProductApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIV1ProductApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIV1ProductApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIV1ProductApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIV1ProductApi::setUsername(const QString &username) {
    _username = username;
}

void OAIV1ProductApi::setPassword(const QString &password) {
    _password = password;
}


void OAIV1ProductApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIV1ProductApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIV1ProductApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIV1ProductApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIV1ProductApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIV1ProductApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIV1ProductApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIV1ProductApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIV1ProductApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIV1ProductApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIV1ProductApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIV1ProductApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIV1ProductApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIV1ProductApi::productAvailability(const QString &sku, const QString &subject_id) {
    QString fullPath = QString(_serverConfigs["productAvailability"][_serverIndices.value("productAvailability")].URL()+"/api/v1/product/availability/{sku}/{subjectId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString skuPathParam("{");
        skuPathParam.append("sku").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sku", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sku"+pathSuffix : pathPrefix;
        fullPath.replace(skuPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sku)));
    }
    
    {
        QString subject_idPathParam("{");
        subject_idPathParam.append("subjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subjectId"+pathSuffix : pathPrefix;
        fullPath.replace(subject_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subject_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productAvailabilityCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productAvailabilityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProductAvailability_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productAvailabilitySignal(output);
        Q_EMIT productAvailabilitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productAvailabilitySignalE(output, error_type, error_str);
        Q_EMIT productAvailabilitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productAvailabilitySignalError(output, error_type, error_str);
        Q_EMIT productAvailabilitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productCatalog(const QString &country) {
    QString fullPath = QString(_serverConfigs["productCatalog"][_serverIndices.value("productCatalog")].URL()+"/api/v1/product/catalog/{country}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString countryPathParam("{");
        countryPathParam.append("country").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "country", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"country"+pathSuffix : pathPrefix;
        fullPath.replace(countryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productCatalogCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productCatalogCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProductCatalog_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productCatalogSignal(output);
        Q_EMIT productCatalogSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productCatalogSignalE(output, error_type, error_str);
        Q_EMIT productCatalogSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productCatalogSignalError(output, error_type, error_str);
        Q_EMIT productCatalogSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productNotifier(const QString &notifier_id) {
    QString fullPath = QString(_serverConfigs["productNotifier"][_serverIndices.value("productNotifier")].URL()+"/api/v1/product/notifier/{notifierId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString notifier_idPathParam("{");
        notifier_idPathParam.append("notifierId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "notifierId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"notifierId"+pathSuffix : pathPrefix;
        fullPath.replace(notifier_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(notifier_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productNotifierCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productNotifierCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productNotifierSignal();
        Q_EMIT productNotifierSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productNotifierSignalE(error_type, error_str);
        Q_EMIT productNotifierSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productNotifierSignalError(error_type, error_str);
        Q_EMIT productNotifierSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productNotifierCreate(const QString &order_id, const QString &type, const QString &uri) {
    QString fullPath = QString(_serverConfigs["productNotifierCreate"][_serverIndices.value("productNotifierCreate")].URL()+"/api/v1/product/notifier/{orderId}/{type}/{uri}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString order_idPathParam("{");
        order_idPathParam.append("orderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orderId"+pathSuffix : pathPrefix;
        fullPath.replace(order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(order_id)));
    }
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    
    {
        QString uriPathParam("{");
        uriPathParam.append("uri").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "uri", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"uri"+pathSuffix : pathPrefix;
        fullPath.replace(uriPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(uri)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productNotifierCreateCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productNotifierCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProductNotifierCreate_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productNotifierCreateSignal(output);
        Q_EMIT productNotifierCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productNotifierCreateSignalE(output, error_type, error_str);
        Q_EMIT productNotifierCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productNotifierCreateSignalError(output, error_type, error_str);
        Q_EMIT productNotifierCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productOrder(const QString &sku, const QString &subject_id) {
    QString fullPath = QString(_serverConfigs["productOrder"][_serverIndices.value("productOrder")].URL()+"/api/v1/product/order/{sku}/{subjectId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString skuPathParam("{");
        skuPathParam.append("sku").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sku", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sku"+pathSuffix : pathPrefix;
        fullPath.replace(skuPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sku)));
    }
    
    {
        QString subject_idPathParam("{");
        subject_idPathParam.append("subjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subjectId"+pathSuffix : pathPrefix;
        fullPath.replace(subject_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subject_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productOrderCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProductOrder_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productOrderSignal(output);
        Q_EMIT productOrderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productOrderSignalE(output, error_type, error_str);
        Q_EMIT productOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productOrderSignalError(output, error_type, error_str);
        Q_EMIT productOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productOrderConcierge(const ::OpenAPI::OptionalParam<QString> &company_name, const ::OpenAPI::OptionalParam<QString> &contact_email, const ::OpenAPI::OptionalParam<QString> &contact_phone, const ::OpenAPI::OptionalParam<bool> &cost_confirmation, const ::OpenAPI::OptionalParam<QString> &country, const ::OpenAPI::OptionalParam<bool> &financial_data, const ::OpenAPI::OptionalParam<bool> &historic_information, const ::OpenAPI::OptionalParam<QString> &information_requirements, const ::OpenAPI::OptionalParam<bool> &location_investigation, const ::OpenAPI::OptionalParam<QString> &priority, const ::OpenAPI::OptionalParam<bool> &register_data, const ::OpenAPI::OptionalParam<QString> &register_number, const ::OpenAPI::OptionalParam<QString> &subject_id) {
    QString fullPath = QString(_serverConfigs["productOrderConcierge"][_serverIndices.value("productOrderConcierge")].URL()+"/api/v1/product/order/concierge");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (company_name.hasValue())
    {
        input.add_var("companyName", ::OpenAPI::toStringValue(company_name.value()));
    }
    if (contact_email.hasValue())
    {
        input.add_var("contactEmail", ::OpenAPI::toStringValue(contact_email.value()));
    }
    if (contact_phone.hasValue())
    {
        input.add_var("contactPhone", ::OpenAPI::toStringValue(contact_phone.value()));
    }
    if (cost_confirmation.hasValue())
    {
        input.add_var("costConfirmation", ::OpenAPI::toStringValue(cost_confirmation.value()));
    }
    if (country.hasValue())
    {
        input.add_var("country", ::OpenAPI::toStringValue(country.value()));
    }
    if (financial_data.hasValue())
    {
        input.add_var("financialData", ::OpenAPI::toStringValue(financial_data.value()));
    }
    if (historic_information.hasValue())
    {
        input.add_var("historicInformation", ::OpenAPI::toStringValue(historic_information.value()));
    }
    if (information_requirements.hasValue())
    {
        input.add_var("informationRequirements", ::OpenAPI::toStringValue(information_requirements.value()));
    }
    if (location_investigation.hasValue())
    {
        input.add_var("locationInvestigation", ::OpenAPI::toStringValue(location_investigation.value()));
    }
    if (priority.hasValue())
    {
        input.add_var("priority", ::OpenAPI::toStringValue(priority.value()));
    }
    if (register_data.hasValue())
    {
        input.add_var("registerData", ::OpenAPI::toStringValue(register_data.value()));
    }
    if (register_number.hasValue())
    {
        input.add_var("registerNumber", ::OpenAPI::toStringValue(register_number.value()));
    }
    if (subject_id.hasValue())
    {
        input.add_var("subjectId", ::OpenAPI::toStringValue(subject_id.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productOrderConciergeCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productOrderConciergeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productOrderConciergeSignal();
        Q_EMIT productOrderConciergeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productOrderConciergeSignalE(error_type, error_str);
        Q_EMIT productOrderConciergeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productOrderConciergeSignalError(error_type, error_str);
        Q_EMIT productOrderConciergeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productOrderUbo(const QString &subject_id, const ::OpenAPI::OptionalParam<QString> &callback_url, const ::OpenAPI::OptionalParam<double> &credits, const ::OpenAPI::OptionalParam<bool> &include_docs, const ::OpenAPI::OptionalParam<QString> &levels, const ::OpenAPI::OptionalParam<QString> &strategy) {
    QString fullPath = QString(_serverConfigs["productOrderUbo"][_serverIndices.value("productOrderUbo")].URL()+"/api/v1/product/order/ubo");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (callback_url.hasValue())
    {
        input.add_var("callbackUrl", ::OpenAPI::toStringValue(callback_url.value()));
    }
    if (credits.hasValue())
    {
        input.add_var("credits", ::OpenAPI::toStringValue(credits.value()));
    }
    if (include_docs.hasValue())
    {
        input.add_var("includeDocs", ::OpenAPI::toStringValue(include_docs.value()));
    }
    if (levels.hasValue())
    {
        input.add_var("levels", ::OpenAPI::toStringValue(levels.value()));
    }
    if (strategy.hasValue())
    {
        input.add_var("strategy", ::OpenAPI::toStringValue(strategy.value()));
    }
    
    {
        input.add_var("subjectId", ::OpenAPI::toStringValue(subject_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productOrderUboCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productOrderUboCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productOrderUboSignal();
        Q_EMIT productOrderUboSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productOrderUboSignalE(error_type, error_str);
        Q_EMIT productOrderUboSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productOrderUboSignalError(error_type, error_str);
        Q_EMIT productOrderUboSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productOrderWithOption(const QString &sku, const QString &option, const QString &subject_id) {
    QString fullPath = QString(_serverConfigs["productOrderWithOption"][_serverIndices.value("productOrderWithOption")].URL()+"/api/v1/product/order/{sku}/{option}/{subjectId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString skuPathParam("{");
        skuPathParam.append("sku").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sku", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sku"+pathSuffix : pathPrefix;
        fullPath.replace(skuPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sku)));
    }
    
    {
        QString optionPathParam("{");
        optionPathParam.append("option").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "option", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"option"+pathSuffix : pathPrefix;
        fullPath.replace(optionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(option)));
    }
    
    {
        QString subject_idPathParam("{");
        subject_idPathParam.append("subjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subjectId"+pathSuffix : pathPrefix;
        fullPath.replace(subject_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subject_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productOrderWithOptionCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productOrderWithOptionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productOrderWithOptionSignal();
        Q_EMIT productOrderWithOptionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productOrderWithOptionSignalE(error_type, error_str);
        Q_EMIT productOrderWithOptionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productOrderWithOptionSignalError(error_type, error_str);
        Q_EMIT productOrderWithOptionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productRetrieve(const QString &order_id) {
    QString fullPath = QString(_serverConfigs["productRetrieve"][_serverIndices.value("productRetrieve")].URL()+"/api/v1/product/{orderId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString order_idPathParam("{");
        order_idPathParam.append("orderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orderId"+pathSuffix : pathPrefix;
        fullPath.replace(order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(order_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productRetrieveCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productRetrieveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProductRetrieve_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productRetrieveSignal(output);
        Q_EMIT productRetrieveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productRetrieveSignalE(output, error_type, error_str);
        Q_EMIT productRetrieveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productRetrieveSignalError(output, error_type, error_str);
        Q_EMIT productRetrieveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productSearch(const QString &subject_id) {
    QString fullPath = QString(_serverConfigs["productSearch"][_serverIndices.value("productSearch")].URL()+"/api/v1/product/search/{subjectId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString subject_idPathParam("{");
        subject_idPathParam.append("subjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subjectId"+pathSuffix : pathPrefix;
        fullPath.replace(subject_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subject_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productSearchCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productSearchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProductSearch_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProductSearch_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productSearchSignal(output);
        Q_EMIT productSearchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productSearchSignalE(output, error_type, error_str);
        Q_EMIT productSearchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productSearchSignalError(output, error_type, error_str);
        Q_EMIT productSearchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productStatus(const QString &order_id) {
    QString fullPath = QString(_serverConfigs["productStatus"][_serverIndices.value("productStatus")].URL()+"/api/v1/product/status/{orderId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString order_idPathParam("{");
        order_idPathParam.append("orderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orderId"+pathSuffix : pathPrefix;
        fullPath.replace(order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(order_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productStatusCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productStatusSignal();
        Q_EMIT productStatusSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productStatusSignalE(error_type, error_str);
        Q_EMIT productStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productStatusSignalError(error_type, error_str);
        Q_EMIT productStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::productUpdateAction(const QString &action, const QString &order_id, const ::OpenAPI::OptionalParam<double> &credits) {
    QString fullPath = QString(_serverConfigs["productUpdateAction"][_serverIndices.value("productUpdateAction")].URL()+"/api/v1/product/update/{action}/{orderId}");
    
    if (_apiKeys.contains("user_key")) {
        addHeaders("user_key",_apiKeys.find("user_key").value());
    }
    
    
    {
        QString actionPathParam("{");
        actionPathParam.append("action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action"+pathSuffix : pathPrefix;
        fullPath.replace(actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action)));
    }
    
    {
        QString order_idPathParam("{");
        order_idPathParam.append("orderId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orderId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orderId"+pathSuffix : pathPrefix;
        fullPath.replace(order_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(order_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (credits.hasValue())
    {
        input.add_var("credits", ::OpenAPI::toStringValue(credits.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1ProductApi::productUpdateActionCallback);
    connect(this, &OAIV1ProductApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1ProductApi::productUpdateActionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT productUpdateActionSignal();
        Q_EMIT productUpdateActionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT productUpdateActionSignalE(error_type, error_str);
        Q_EMIT productUpdateActionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT productUpdateActionSignalError(error_type, error_str);
        Q_EMIT productUpdateActionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1ProductApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
