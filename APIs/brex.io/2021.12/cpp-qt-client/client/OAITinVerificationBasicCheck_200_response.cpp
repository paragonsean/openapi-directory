/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITinVerificationBasicCheck_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITinVerificationBasicCheck_200_response::OAITinVerificationBasicCheck_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITinVerificationBasicCheck_200_response::OAITinVerificationBasicCheck_200_response() {
    this->initializeModel();
}

OAITinVerificationBasicCheck_200_response::~OAITinVerificationBasicCheck_200_response() {}

void OAITinVerificationBasicCheck_200_response::initializeModel() {

    m_match_status_isSet = false;
    m_match_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_possible_match_isSet = false;
    m_possible_match_isValid = false;

    m_tin_isSet = false;
    m_tin_isValid = false;

    m_validation_status_isSet = false;
    m_validation_status_isValid = false;
}

void OAITinVerificationBasicCheck_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITinVerificationBasicCheck_200_response::fromJsonObject(QJsonObject json) {

    m_match_status_isValid = ::OpenAPI::fromJsonValue(m_match_status, json[QString("matchStatus")]);
    m_match_status_isSet = !json[QString("matchStatus")].isNull() && m_match_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_possible_match_isValid = ::OpenAPI::fromJsonValue(m_possible_match, json[QString("possibleMatch")]);
    m_possible_match_isSet = !json[QString("possibleMatch")].isNull() && m_possible_match_isValid;

    m_tin_isValid = ::OpenAPI::fromJsonValue(m_tin, json[QString("tin")]);
    m_tin_isSet = !json[QString("tin")].isNull() && m_tin_isValid;

    m_validation_status_isValid = ::OpenAPI::fromJsonValue(m_validation_status, json[QString("validationStatus")]);
    m_validation_status_isSet = !json[QString("validationStatus")].isNull() && m_validation_status_isValid;
}

QString OAITinVerificationBasicCheck_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITinVerificationBasicCheck_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_match_status_isSet) {
        obj.insert(QString("matchStatus"), ::OpenAPI::toJsonValue(m_match_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_possible_match_isSet) {
        obj.insert(QString("possibleMatch"), ::OpenAPI::toJsonValue(m_possible_match));
    }
    if (m_tin_isSet) {
        obj.insert(QString("tin"), ::OpenAPI::toJsonValue(m_tin));
    }
    if (m_validation_status_isSet) {
        obj.insert(QString("validationStatus"), ::OpenAPI::toJsonValue(m_validation_status));
    }
    return obj;
}

QString OAITinVerificationBasicCheck_200_response::getMatchStatus() const {
    return m_match_status;
}
void OAITinVerificationBasicCheck_200_response::setMatchStatus(const QString &match_status) {
    m_match_status = match_status;
    m_match_status_isSet = true;
}

bool OAITinVerificationBasicCheck_200_response::is_match_status_Set() const{
    return m_match_status_isSet;
}

bool OAITinVerificationBasicCheck_200_response::is_match_status_Valid() const{
    return m_match_status_isValid;
}

QString OAITinVerificationBasicCheck_200_response::getName() const {
    return m_name;
}
void OAITinVerificationBasicCheck_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITinVerificationBasicCheck_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAITinVerificationBasicCheck_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITinVerificationBasicCheck_200_response::getPossibleMatch() const {
    return m_possible_match;
}
void OAITinVerificationBasicCheck_200_response::setPossibleMatch(const QString &possible_match) {
    m_possible_match = possible_match;
    m_possible_match_isSet = true;
}

bool OAITinVerificationBasicCheck_200_response::is_possible_match_Set() const{
    return m_possible_match_isSet;
}

bool OAITinVerificationBasicCheck_200_response::is_possible_match_Valid() const{
    return m_possible_match_isValid;
}

QString OAITinVerificationBasicCheck_200_response::getTin() const {
    return m_tin;
}
void OAITinVerificationBasicCheck_200_response::setTin(const QString &tin) {
    m_tin = tin;
    m_tin_isSet = true;
}

bool OAITinVerificationBasicCheck_200_response::is_tin_Set() const{
    return m_tin_isSet;
}

bool OAITinVerificationBasicCheck_200_response::is_tin_Valid() const{
    return m_tin_isValid;
}

QString OAITinVerificationBasicCheck_200_response::getValidationStatus() const {
    return m_validation_status;
}
void OAITinVerificationBasicCheck_200_response::setValidationStatus(const QString &validation_status) {
    m_validation_status = validation_status;
    m_validation_status_isSet = true;
}

bool OAITinVerificationBasicCheck_200_response::is_validation_status_Set() const{
    return m_validation_status_isSet;
}

bool OAITinVerificationBasicCheck_200_response::is_validation_status_Valid() const{
    return m_validation_status_isValid;
}

bool OAITinVerificationBasicCheck_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITinVerificationBasicCheck_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_status_isValid && m_name_isValid && m_possible_match_isValid && m_tin_isValid && m_validation_status_isValid && true;
}

} // namespace OpenAPI
