/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEinVerificationLookup_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEinVerificationLookup_200_response::OAIEinVerificationLookup_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEinVerificationLookup_200_response::OAIEinVerificationLookup_200_response() {
    this->initializeModel();
}

OAIEinVerificationLookup_200_response::~OAIEinVerificationLookup_200_response() {}

void OAIEinVerificationLookup_200_response::initializeModel() {

    m_matched_ein_companies_isSet = false;
    m_matched_ein_companies_isValid = false;

    m_searchterm_name_isSet = false;
    m_searchterm_name_isValid = false;

    m_searchterm_state_isSet = false;
    m_searchterm_state_isValid = false;

    m_searchterm_zip_isSet = false;
    m_searchterm_zip_isValid = false;

    m_tight_search_isSet = false;
    m_tight_search_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIEinVerificationLookup_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEinVerificationLookup_200_response::fromJsonObject(QJsonObject json) {

    m_matched_ein_companies_isValid = ::OpenAPI::fromJsonValue(m_matched_ein_companies, json[QString("matched_ein_companies")]);
    m_matched_ein_companies_isSet = !json[QString("matched_ein_companies")].isNull() && m_matched_ein_companies_isValid;

    m_searchterm_name_isValid = ::OpenAPI::fromJsonValue(m_searchterm_name, json[QString("searchterm_name")]);
    m_searchterm_name_isSet = !json[QString("searchterm_name")].isNull() && m_searchterm_name_isValid;

    m_searchterm_state_isValid = ::OpenAPI::fromJsonValue(m_searchterm_state, json[QString("searchterm_state")]);
    m_searchterm_state_isSet = !json[QString("searchterm_state")].isNull() && m_searchterm_state_isValid;

    m_searchterm_zip_isValid = ::OpenAPI::fromJsonValue(m_searchterm_zip, json[QString("searchterm_zip")]);
    m_searchterm_zip_isSet = !json[QString("searchterm_zip")].isNull() && m_searchterm_zip_isValid;

    m_tight_search_isValid = ::OpenAPI::fromJsonValue(m_tight_search, json[QString("tight_search")]);
    m_tight_search_isSet = !json[QString("tight_search")].isNull() && m_tight_search_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIEinVerificationLookup_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEinVerificationLookup_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_matched_ein_companies.size() > 0) {
        obj.insert(QString("matched_ein_companies"), ::OpenAPI::toJsonValue(m_matched_ein_companies));
    }
    if (m_searchterm_name_isSet) {
        obj.insert(QString("searchterm_name"), ::OpenAPI::toJsonValue(m_searchterm_name));
    }
    if (m_searchterm_state_isSet) {
        obj.insert(QString("searchterm_state"), ::OpenAPI::toJsonValue(m_searchterm_state));
    }
    if (m_searchterm_zip_isSet) {
        obj.insert(QString("searchterm_zip"), ::OpenAPI::toJsonValue(m_searchterm_zip));
    }
    if (m_tight_search_isSet) {
        obj.insert(QString("tight_search"), ::OpenAPI::toJsonValue(m_tight_search));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList<OAIEinVerificationLookup_200_response_matched_ein_companies_inner> OAIEinVerificationLookup_200_response::getMatchedEinCompanies() const {
    return m_matched_ein_companies;
}
void OAIEinVerificationLookup_200_response::setMatchedEinCompanies(const QList<OAIEinVerificationLookup_200_response_matched_ein_companies_inner> &matched_ein_companies) {
    m_matched_ein_companies = matched_ein_companies;
    m_matched_ein_companies_isSet = true;
}

bool OAIEinVerificationLookup_200_response::is_matched_ein_companies_Set() const{
    return m_matched_ein_companies_isSet;
}

bool OAIEinVerificationLookup_200_response::is_matched_ein_companies_Valid() const{
    return m_matched_ein_companies_isValid;
}

QString OAIEinVerificationLookup_200_response::getSearchtermName() const {
    return m_searchterm_name;
}
void OAIEinVerificationLookup_200_response::setSearchtermName(const QString &searchterm_name) {
    m_searchterm_name = searchterm_name;
    m_searchterm_name_isSet = true;
}

bool OAIEinVerificationLookup_200_response::is_searchterm_name_Set() const{
    return m_searchterm_name_isSet;
}

bool OAIEinVerificationLookup_200_response::is_searchterm_name_Valid() const{
    return m_searchterm_name_isValid;
}

QString OAIEinVerificationLookup_200_response::getSearchtermState() const {
    return m_searchterm_state;
}
void OAIEinVerificationLookup_200_response::setSearchtermState(const QString &searchterm_state) {
    m_searchterm_state = searchterm_state;
    m_searchterm_state_isSet = true;
}

bool OAIEinVerificationLookup_200_response::is_searchterm_state_Set() const{
    return m_searchterm_state_isSet;
}

bool OAIEinVerificationLookup_200_response::is_searchterm_state_Valid() const{
    return m_searchterm_state_isValid;
}

QString OAIEinVerificationLookup_200_response::getSearchtermZip() const {
    return m_searchterm_zip;
}
void OAIEinVerificationLookup_200_response::setSearchtermZip(const QString &searchterm_zip) {
    m_searchterm_zip = searchterm_zip;
    m_searchterm_zip_isSet = true;
}

bool OAIEinVerificationLookup_200_response::is_searchterm_zip_Set() const{
    return m_searchterm_zip_isSet;
}

bool OAIEinVerificationLookup_200_response::is_searchterm_zip_Valid() const{
    return m_searchterm_zip_isValid;
}

bool OAIEinVerificationLookup_200_response::isTightSearch() const {
    return m_tight_search;
}
void OAIEinVerificationLookup_200_response::setTightSearch(const bool &tight_search) {
    m_tight_search = tight_search;
    m_tight_search_isSet = true;
}

bool OAIEinVerificationLookup_200_response::is_tight_search_Set() const{
    return m_tight_search_isSet;
}

bool OAIEinVerificationLookup_200_response::is_tight_search_Valid() const{
    return m_tight_search_isValid;
}

double OAIEinVerificationLookup_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAIEinVerificationLookup_200_response::setTimestamp(const double &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEinVerificationLookup_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEinVerificationLookup_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIEinVerificationLookup_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matched_ein_companies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchterm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchterm_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchterm_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tight_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEinVerificationLookup_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_searchterm_name_isValid && m_searchterm_state_isValid && m_searchterm_zip_isValid && m_tight_search_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
