/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductOrder_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductOrder_200_response::OAIProductOrder_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductOrder_200_response::OAIProductOrder_200_response() {
    this->initializeModel();
}

OAIProductOrder_200_response::~OAIProductOrder_200_response() {}

void OAIProductOrder_200_response::initializeModel() {

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_option_isSet = false;
    m_option_isValid = false;

    m_ordered_isSet = false;
    m_ordered_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_value_isSet = false;
    m_subject_value_isValid = false;
}

void OAIProductOrder_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductOrder_200_response::fromJsonObject(QJsonObject json) {

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_ordered_isValid = ::OpenAPI::fromJsonValue(m_ordered, json[QString("ordered")]);
    m_ordered_isSet = !json[QString("ordered")].isNull() && m_ordered_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_value_isValid = ::OpenAPI::fromJsonValue(m_subject_value, json[QString("subjectValue")]);
    m_subject_value_isSet = !json[QString("subjectValue")].isNull() && m_subject_value_isValid;
}

QString OAIProductOrder_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductOrder_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_option_isSet) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_ordered.isSet()) {
        obj.insert(QString("ordered"), ::OpenAPI::toJsonValue(m_ordered));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_value_isSet) {
        obj.insert(QString("subjectValue"), ::OpenAPI::toJsonValue(m_subject_value));
    }
    return obj;
}

QString OAIProductOrder_200_response::getIdentity() const {
    return m_identity;
}
void OAIProductOrder_200_response::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIProductOrder_200_response::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIProductOrder_200_response::is_identity_Valid() const{
    return m_identity_isValid;
}

QString OAIProductOrder_200_response::getOption() const {
    return m_option;
}
void OAIProductOrder_200_response::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAIProductOrder_200_response::is_option_Set() const{
    return m_option_isSet;
}

bool OAIProductOrder_200_response::is_option_Valid() const{
    return m_option_isValid;
}

OAIObject OAIProductOrder_200_response::getOrdered() const {
    return m_ordered;
}
void OAIProductOrder_200_response::setOrdered(const OAIObject &ordered) {
    m_ordered = ordered;
    m_ordered_isSet = true;
}

bool OAIProductOrder_200_response::is_ordered_Set() const{
    return m_ordered_isSet;
}

bool OAIProductOrder_200_response::is_ordered_Valid() const{
    return m_ordered_isValid;
}

QString OAIProductOrder_200_response::getOwner() const {
    return m_owner;
}
void OAIProductOrder_200_response::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProductOrder_200_response::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProductOrder_200_response::is_owner_Valid() const{
    return m_owner_isValid;
}

float OAIProductOrder_200_response::getPrice() const {
    return m_price;
}
void OAIProductOrder_200_response::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProductOrder_200_response::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProductOrder_200_response::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIProductOrder_200_response::getSku() const {
    return m_sku;
}
void OAIProductOrder_200_response::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIProductOrder_200_response::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIProductOrder_200_response::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIProductOrder_200_response::getStatus() const {
    return m_status;
}
void OAIProductOrder_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProductOrder_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProductOrder_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProductOrder_200_response::getSubjectId() const {
    return m_subject_id;
}
void OAIProductOrder_200_response::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIProductOrder_200_response::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIProductOrder_200_response::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIProductOrder_200_response::getSubjectValue() const {
    return m_subject_value;
}
void OAIProductOrder_200_response::setSubjectValue(const QString &subject_value) {
    m_subject_value = subject_value;
    m_subject_value_isSet = true;
}

bool OAIProductOrder_200_response::is_subject_value_Set() const{
    return m_subject_value_isSet;
}

bool OAIProductOrder_200_response::is_subject_value_Valid() const{
    return m_subject_value_isValid;
}

bool OAIProductOrder_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductOrder_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_isValid && m_option_isValid && m_ordered_isValid && m_owner_isValid && m_price_isValid && m_sku_isValid && m_status_isValid && m_subject_id_isValid && m_subject_value_isValid && true;
}

} // namespace OpenAPI
