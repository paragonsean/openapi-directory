/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemCountries_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemCountries_default_response::OAISystemCountries_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemCountries_default_response::OAISystemCountries_default_response() {
    this->initializeModel();
}

OAISystemCountries_default_response::~OAISystemCountries_default_response() {}

void OAISystemCountries_default_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_fault_isSet = false;
    m_fault_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAISystemCountries_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemCountries_default_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_fault_isValid = ::OpenAPI::fromJsonValue(m_fault, json[QString("fault")]);
    m_fault_isSet = !json[QString("fault")].isNull() && m_fault_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAISystemCountries_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemCountries_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_fault_isSet) {
        obj.insert(QString("fault"), ::OpenAPI::toJsonValue(m_fault));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

qint32 OAISystemCountries_default_response::getCode() const {
    return m_code;
}
void OAISystemCountries_default_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISystemCountries_default_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAISystemCountries_default_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAISystemCountries_default_response::getFault() const {
    return m_fault;
}
void OAISystemCountries_default_response::setFault(const QString &fault) {
    m_fault = fault;
    m_fault_isSet = true;
}

bool OAISystemCountries_default_response::is_fault_Set() const{
    return m_fault_isSet;
}

bool OAISystemCountries_default_response::is_fault_Valid() const{
    return m_fault_isValid;
}

QString OAISystemCountries_default_response::getMessage() const {
    return m_message;
}
void OAISystemCountries_default_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISystemCountries_default_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAISystemCountries_default_response::is_message_Valid() const{
    return m_message_isValid;
}

QString OAISystemCountries_default_response::getTag() const {
    return m_tag;
}
void OAISystemCountries_default_response::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAISystemCountries_default_response::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAISystemCountries_default_response::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAISystemCountries_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemCountries_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && m_tag_isValid && true;
}

} // namespace OpenAPI
