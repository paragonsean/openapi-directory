/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatLookup_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatLookup_200_response::OAIVatLookup_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatLookup_200_response::OAIVatLookup_200_response() {
    this->initializeModel();
}

OAIVatLookup_200_response::~OAIVatLookup_200_response() {}

void OAIVatLookup_200_response::initializeModel() {

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_searchterm_address_isSet = false;
    m_searchterm_address_isValid = false;

    m_searchterm_country_isSet = false;
    m_searchterm_country_isValid = false;

    m_searchterm_name_isSet = false;
    m_searchterm_name_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIVatLookup_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatLookup_200_response::fromJsonObject(QJsonObject json) {

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_searchterm_address_isValid = ::OpenAPI::fromJsonValue(m_searchterm_address, json[QString("searchterm_address")]);
    m_searchterm_address_isSet = !json[QString("searchterm_address")].isNull() && m_searchterm_address_isValid;

    m_searchterm_country_isValid = ::OpenAPI::fromJsonValue(m_searchterm_country, json[QString("searchterm_country")]);
    m_searchterm_country_isSet = !json[QString("searchterm_country")].isNull() && m_searchterm_country_isValid;

    m_searchterm_name_isValid = ::OpenAPI::fromJsonValue(m_searchterm_name, json[QString("searchterm_name")]);
    m_searchterm_name_isSet = !json[QString("searchterm_name")].isNull() && m_searchterm_name_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIVatLookup_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatLookup_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_searchterm_address_isSet) {
        obj.insert(QString("searchterm_address"), ::OpenAPI::toJsonValue(m_searchterm_address));
    }
    if (m_searchterm_country_isSet) {
        obj.insert(QString("searchterm_country"), ::OpenAPI::toJsonValue(m_searchterm_country));
    }
    if (m_searchterm_name_isSet) {
        obj.insert(QString("searchterm_name"), ::OpenAPI::toJsonValue(m_searchterm_name));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList<OAIVatLookup_200_response_matches_inner> OAIVatLookup_200_response::getMatches() const {
    return m_matches;
}
void OAIVatLookup_200_response::setMatches(const QList<OAIVatLookup_200_response_matches_inner> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAIVatLookup_200_response::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAIVatLookup_200_response::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAIVatLookup_200_response::getSearchtermAddress() const {
    return m_searchterm_address;
}
void OAIVatLookup_200_response::setSearchtermAddress(const QString &searchterm_address) {
    m_searchterm_address = searchterm_address;
    m_searchterm_address_isSet = true;
}

bool OAIVatLookup_200_response::is_searchterm_address_Set() const{
    return m_searchterm_address_isSet;
}

bool OAIVatLookup_200_response::is_searchterm_address_Valid() const{
    return m_searchterm_address_isValid;
}

QString OAIVatLookup_200_response::getSearchtermCountry() const {
    return m_searchterm_country;
}
void OAIVatLookup_200_response::setSearchtermCountry(const QString &searchterm_country) {
    m_searchterm_country = searchterm_country;
    m_searchterm_country_isSet = true;
}

bool OAIVatLookup_200_response::is_searchterm_country_Set() const{
    return m_searchterm_country_isSet;
}

bool OAIVatLookup_200_response::is_searchterm_country_Valid() const{
    return m_searchterm_country_isValid;
}

QString OAIVatLookup_200_response::getSearchtermName() const {
    return m_searchterm_name;
}
void OAIVatLookup_200_response::setSearchtermName(const QString &searchterm_name) {
    m_searchterm_name = searchterm_name;
    m_searchterm_name_isSet = true;
}

bool OAIVatLookup_200_response::is_searchterm_name_Set() const{
    return m_searchterm_name_isSet;
}

bool OAIVatLookup_200_response::is_searchterm_name_Valid() const{
    return m_searchterm_name_isValid;
}

qint32 OAIVatLookup_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAIVatLookup_200_response::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIVatLookup_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIVatLookup_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIVatLookup_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchterm_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchterm_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchterm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatLookup_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
