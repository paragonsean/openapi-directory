/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPepRetrieve_200_response_results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPepRetrieve_200_response_results::OAIPepRetrieve_200_response_results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPepRetrieve_200_response_results::OAIPepRetrieve_200_response_results() {
    this->initializeModel();
}

OAIPepRetrieve_200_response_results::~OAIPepRetrieve_200_response_results() {}

void OAIPepRetrieve_200_response_results::initializeModel() {

    m_excerpts_isSet = false;
    m_excerpts_isValid = false;

    m_results_url_isSet = false;
    m_results_url_isValid = false;

    m_search_type_isSet = false;
    m_search_type_isValid = false;

    m_source_agency_isSet = false;
    m_source_agency_isValid = false;

    m_source_entity_isSet = false;
    m_source_entity_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIPepRetrieve_200_response_results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPepRetrieve_200_response_results::fromJsonObject(QJsonObject json) {

    m_excerpts_isValid = ::OpenAPI::fromJsonValue(m_excerpts, json[QString("Excerpts")]);
    m_excerpts_isSet = !json[QString("Excerpts")].isNull() && m_excerpts_isValid;

    m_results_url_isValid = ::OpenAPI::fromJsonValue(m_results_url, json[QString("ResultsURL")]);
    m_results_url_isSet = !json[QString("ResultsURL")].isNull() && m_results_url_isValid;

    m_search_type_isValid = ::OpenAPI::fromJsonValue(m_search_type, json[QString("SearchType")]);
    m_search_type_isSet = !json[QString("SearchType")].isNull() && m_search_type_isValid;

    m_source_agency_isValid = ::OpenAPI::fromJsonValue(m_source_agency, json[QString("SourceAgency")]);
    m_source_agency_isSet = !json[QString("SourceAgency")].isNull() && m_source_agency_isValid;

    m_source_entity_isValid = ::OpenAPI::fromJsonValue(m_source_entity, json[QString("SourceEntity")]);
    m_source_entity_isSet = !json[QString("SourceEntity")].isNull() && m_source_entity_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("SourceName")]);
    m_source_name_isSet = !json[QString("SourceName")].isNull() && m_source_name_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;
}

QString OAIPepRetrieve_200_response_results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPepRetrieve_200_response_results::asJsonObject() const {
    QJsonObject obj;
    if (m_excerpts_isSet) {
        obj.insert(QString("Excerpts"), ::OpenAPI::toJsonValue(m_excerpts));
    }
    if (m_results_url_isSet) {
        obj.insert(QString("ResultsURL"), ::OpenAPI::toJsonValue(m_results_url));
    }
    if (m_search_type_isSet) {
        obj.insert(QString("SearchType"), ::OpenAPI::toJsonValue(m_search_type));
    }
    if (m_source_agency_isSet) {
        obj.insert(QString("SourceAgency"), ::OpenAPI::toJsonValue(m_source_agency));
    }
    if (m_source_entity_isSet) {
        obj.insert(QString("SourceEntity"), ::OpenAPI::toJsonValue(m_source_entity));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("SourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

QString OAIPepRetrieve_200_response_results::getExcerpts() const {
    return m_excerpts;
}
void OAIPepRetrieve_200_response_results::setExcerpts(const QString &excerpts) {
    m_excerpts = excerpts;
    m_excerpts_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_excerpts_Set() const{
    return m_excerpts_isSet;
}

bool OAIPepRetrieve_200_response_results::is_excerpts_Valid() const{
    return m_excerpts_isValid;
}

QString OAIPepRetrieve_200_response_results::getResultsUrl() const {
    return m_results_url;
}
void OAIPepRetrieve_200_response_results::setResultsUrl(const QString &results_url) {
    m_results_url = results_url;
    m_results_url_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_results_url_Set() const{
    return m_results_url_isSet;
}

bool OAIPepRetrieve_200_response_results::is_results_url_Valid() const{
    return m_results_url_isValid;
}

QString OAIPepRetrieve_200_response_results::getSearchType() const {
    return m_search_type;
}
void OAIPepRetrieve_200_response_results::setSearchType(const QString &search_type) {
    m_search_type = search_type;
    m_search_type_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_search_type_Set() const{
    return m_search_type_isSet;
}

bool OAIPepRetrieve_200_response_results::is_search_type_Valid() const{
    return m_search_type_isValid;
}

QString OAIPepRetrieve_200_response_results::getSourceAgency() const {
    return m_source_agency;
}
void OAIPepRetrieve_200_response_results::setSourceAgency(const QString &source_agency) {
    m_source_agency = source_agency;
    m_source_agency_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_source_agency_Set() const{
    return m_source_agency_isSet;
}

bool OAIPepRetrieve_200_response_results::is_source_agency_Valid() const{
    return m_source_agency_isValid;
}

QString OAIPepRetrieve_200_response_results::getSourceEntity() const {
    return m_source_entity;
}
void OAIPepRetrieve_200_response_results::setSourceEntity(const QString &source_entity) {
    m_source_entity = source_entity;
    m_source_entity_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_source_entity_Set() const{
    return m_source_entity_isSet;
}

bool OAIPepRetrieve_200_response_results::is_source_entity_Valid() const{
    return m_source_entity_isValid;
}

qint64 OAIPepRetrieve_200_response_results::getSourceId() const {
    return m_source_id;
}
void OAIPepRetrieve_200_response_results::setSourceId(const qint64 &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIPepRetrieve_200_response_results::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIPepRetrieve_200_response_results::getSourceName() const {
    return m_source_name;
}
void OAIPepRetrieve_200_response_results::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIPepRetrieve_200_response_results::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIPepRetrieve_200_response_results::getSourceType() const {
    return m_source_type;
}
void OAIPepRetrieve_200_response_results::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIPepRetrieve_200_response_results::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIPepRetrieve_200_response_results::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIPepRetrieve_200_response_results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excerpts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPepRetrieve_200_response_results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
