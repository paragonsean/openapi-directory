/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINifBasic_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINifBasic_200_response::OAINifBasic_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINifBasic_200_response::OAINifBasic_200_response() {
    this->initializeModel();
}

OAINifBasic_200_response::~OAINifBasic_200_response() {}

void OAINifBasic_200_response::initializeModel() {

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_nif_number_isSet = false;
    m_nif_number_isValid = false;

    m_validation_status_isSet = false;
    m_validation_status_isValid = false;
}

void OAINifBasic_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINifBasic_200_response::fromJsonObject(QJsonObject json) {

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("confidenceScore")]);
    m_confidence_score_isSet = !json[QString("confidenceScore")].isNull() && m_confidence_score_isValid;

    m_nif_number_isValid = ::OpenAPI::fromJsonValue(m_nif_number, json[QString("nifNumber")]);
    m_nif_number_isSet = !json[QString("nifNumber")].isNull() && m_nif_number_isValid;

    m_validation_status_isValid = ::OpenAPI::fromJsonValue(m_validation_status, json[QString("validationStatus")]);
    m_validation_status_isSet = !json[QString("validationStatus")].isNull() && m_validation_status_isValid;
}

QString OAINifBasic_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINifBasic_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_confidence_score_isSet) {
        obj.insert(QString("confidenceScore"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_nif_number_isSet) {
        obj.insert(QString("nifNumber"), ::OpenAPI::toJsonValue(m_nif_number));
    }
    if (m_validation_status_isSet) {
        obj.insert(QString("validationStatus"), ::OpenAPI::toJsonValue(m_validation_status));
    }
    return obj;
}

QString OAINifBasic_200_response::getCompanyName() const {
    return m_company_name;
}
void OAINifBasic_200_response::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAINifBasic_200_response::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAINifBasic_200_response::is_company_name_Valid() const{
    return m_company_name_isValid;
}

double OAINifBasic_200_response::getConfidenceScore() const {
    return m_confidence_score;
}
void OAINifBasic_200_response::setConfidenceScore(const double &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAINifBasic_200_response::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAINifBasic_200_response::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

double OAINifBasic_200_response::getNifNumber() const {
    return m_nif_number;
}
void OAINifBasic_200_response::setNifNumber(const double &nif_number) {
    m_nif_number = nif_number;
    m_nif_number_isSet = true;
}

bool OAINifBasic_200_response::is_nif_number_Set() const{
    return m_nif_number_isSet;
}

bool OAINifBasic_200_response::is_nif_number_Valid() const{
    return m_nif_number_isValid;
}

bool OAINifBasic_200_response::isValidationStatus() const {
    return m_validation_status;
}
void OAINifBasic_200_response::setValidationStatus(const bool &validation_status) {
    m_validation_status = validation_status;
    m_validation_status_isSet = true;
}

bool OAINifBasic_200_response::is_validation_status_Set() const{
    return m_validation_status_isSet;
}

bool OAINifBasic_200_response::is_validation_status_Valid() const{
    return m_validation_status_isValid;
}

bool OAINifBasic_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nif_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINifBasic_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_score_isValid && m_nif_number_isValid && m_validation_status_isValid && true;
}

} // namespace OpenAPI
