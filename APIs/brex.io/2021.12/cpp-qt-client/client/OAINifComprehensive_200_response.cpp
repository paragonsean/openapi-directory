/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINifComprehensive_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINifComprehensive_200_response::OAINifComprehensive_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINifComprehensive_200_response::OAINifComprehensive_200_response() {
    this->initializeModel();
}

OAINifComprehensive_200_response::~OAINifComprehensive_200_response() {}

void OAINifComprehensive_200_response::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_capital_isSet = false;
    m_capital_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_legal_type_isSet = false;
    m_legal_type_isValid = false;

    m_nif_number_isSet = false;
    m_nif_number_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_validation_status_isSet = false;
    m_validation_status_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAINifComprehensive_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINifComprehensive_200_response::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_capital_isValid = ::OpenAPI::fromJsonValue(m_capital, json[QString("capital")]);
    m_capital_isSet = !json[QString("capital")].isNull() && m_capital_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("confidenceScore")]);
    m_confidence_score_isSet = !json[QString("confidenceScore")].isNull() && m_confidence_score_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_legal_type_isValid = ::OpenAPI::fromJsonValue(m_legal_type, json[QString("legalType")]);
    m_legal_type_isSet = !json[QString("legalType")].isNull() && m_legal_type_isValid;

    m_nif_number_isValid = ::OpenAPI::fromJsonValue(m_nif_number, json[QString("nifNumber")]);
    m_nif_number_isSet = !json[QString("nifNumber")].isNull() && m_nif_number_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_validation_status_isValid = ::OpenAPI::fromJsonValue(m_validation_status, json[QString("validationStatus")]);
    m_validation_status_isSet = !json[QString("validationStatus")].isNull() && m_validation_status_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAINifComprehensive_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINifComprehensive_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_capital_isSet) {
        obj.insert(QString("capital"), ::OpenAPI::toJsonValue(m_capital));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_confidence_score_isSet) {
        obj.insert(QString("confidenceScore"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_geo_isSet) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_legal_type_isSet) {
        obj.insert(QString("legalType"), ::OpenAPI::toJsonValue(m_legal_type));
    }
    if (m_nif_number_isSet) {
        obj.insert(QString("nifNumber"), ::OpenAPI::toJsonValue(m_nif_number));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_validation_status_isSet) {
        obj.insert(QString("validationStatus"), ::OpenAPI::toJsonValue(m_validation_status));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIObject OAINifComprehensive_200_response::getActivity() const {
    return m_activity;
}
void OAINifComprehensive_200_response::setActivity(const OAIObject &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAINifComprehensive_200_response::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAINifComprehensive_200_response::is_activity_Valid() const{
    return m_activity_isValid;
}

QString OAINifComprehensive_200_response::getAddress() const {
    return m_address;
}
void OAINifComprehensive_200_response::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAINifComprehensive_200_response::is_address_Set() const{
    return m_address_isSet;
}

bool OAINifComprehensive_200_response::is_address_Valid() const{
    return m_address_isValid;
}

double OAINifComprehensive_200_response::getCapital() const {
    return m_capital;
}
void OAINifComprehensive_200_response::setCapital(const double &capital) {
    m_capital = capital;
    m_capital_isSet = true;
}

bool OAINifComprehensive_200_response::is_capital_Set() const{
    return m_capital_isSet;
}

bool OAINifComprehensive_200_response::is_capital_Valid() const{
    return m_capital_isValid;
}

QString OAINifComprehensive_200_response::getCompanyName() const {
    return m_company_name;
}
void OAINifComprehensive_200_response::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAINifComprehensive_200_response::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAINifComprehensive_200_response::is_company_name_Valid() const{
    return m_company_name_isValid;
}

double OAINifComprehensive_200_response::getConfidenceScore() const {
    return m_confidence_score;
}
void OAINifComprehensive_200_response::setConfidenceScore(const double &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAINifComprehensive_200_response::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAINifComprehensive_200_response::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

QString OAINifComprehensive_200_response::getCurrency() const {
    return m_currency;
}
void OAINifComprehensive_200_response::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAINifComprehensive_200_response::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAINifComprehensive_200_response::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAINifComprehensive_200_response::getEmail() const {
    return m_email;
}
void OAINifComprehensive_200_response::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAINifComprehensive_200_response::is_email_Set() const{
    return m_email_isSet;
}

bool OAINifComprehensive_200_response::is_email_Valid() const{
    return m_email_isValid;
}

QString OAINifComprehensive_200_response::getFax() const {
    return m_fax;
}
void OAINifComprehensive_200_response::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAINifComprehensive_200_response::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAINifComprehensive_200_response::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAINifComprehensive_200_response::getGeo() const {
    return m_geo;
}
void OAINifComprehensive_200_response::setGeo(const QString &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAINifComprehensive_200_response::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAINifComprehensive_200_response::is_geo_Valid() const{
    return m_geo_isValid;
}

QString OAINifComprehensive_200_response::getLegalType() const {
    return m_legal_type;
}
void OAINifComprehensive_200_response::setLegalType(const QString &legal_type) {
    m_legal_type = legal_type;
    m_legal_type_isSet = true;
}

bool OAINifComprehensive_200_response::is_legal_type_Set() const{
    return m_legal_type_isSet;
}

bool OAINifComprehensive_200_response::is_legal_type_Valid() const{
    return m_legal_type_isValid;
}

double OAINifComprehensive_200_response::getNifNumber() const {
    return m_nif_number;
}
void OAINifComprehensive_200_response::setNifNumber(const double &nif_number) {
    m_nif_number = nif_number;
    m_nif_number_isSet = true;
}

bool OAINifComprehensive_200_response::is_nif_number_Set() const{
    return m_nif_number_isSet;
}

bool OAINifComprehensive_200_response::is_nif_number_Valid() const{
    return m_nif_number_isValid;
}

QString OAINifComprehensive_200_response::getPhone() const {
    return m_phone;
}
void OAINifComprehensive_200_response::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAINifComprehensive_200_response::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAINifComprehensive_200_response::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIObject OAINifComprehensive_200_response::getStatus() const {
    return m_status;
}
void OAINifComprehensive_200_response::setStatus(const OAIObject &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINifComprehensive_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAINifComprehensive_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAINifComprehensive_200_response::isValidationStatus() const {
    return m_validation_status;
}
void OAINifComprehensive_200_response::setValidationStatus(const bool &validation_status) {
    m_validation_status = validation_status;
    m_validation_status_isSet = true;
}

bool OAINifComprehensive_200_response::is_validation_status_Set() const{
    return m_validation_status_isSet;
}

bool OAINifComprehensive_200_response::is_validation_status_Valid() const{
    return m_validation_status_isValid;
}

QString OAINifComprehensive_200_response::getWebsite() const {
    return m_website;
}
void OAINifComprehensive_200_response::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAINifComprehensive_200_response::is_website_Set() const{
    return m_website_isSet;
}

bool OAINifComprehensive_200_response::is_website_Valid() const{
    return m_website_isValid;
}

bool OAINifComprehensive_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nif_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINifComprehensive_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_score_isValid && m_nif_number_isValid && m_validation_status_isValid && true;
}

} // namespace OpenAPI
