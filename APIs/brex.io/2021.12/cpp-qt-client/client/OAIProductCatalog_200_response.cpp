/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductCatalog_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductCatalog_200_response::OAIProductCatalog_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductCatalog_200_response::OAIProductCatalog_200_response() {
    this->initializeModel();
}

OAIProductCatalog_200_response::~OAIProductCatalog_200_response() {}

void OAIProductCatalog_200_response::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProductCatalog_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductCatalog_200_response::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProductCatalog_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductCatalog_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_form_isSet) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIProductCatalog_200_response::getCountryCode() const {
    return m_country_code;
}
void OAIProductCatalog_200_response::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIProductCatalog_200_response::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIProductCatalog_200_response::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIProductCatalog_200_response::getDescription() const {
    return m_description;
}
void OAIProductCatalog_200_response::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductCatalog_200_response::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductCatalog_200_response::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductCatalog_200_response::getForm() const {
    return m_form;
}
void OAIProductCatalog_200_response::setForm(const QString &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAIProductCatalog_200_response::is_form_Set() const{
    return m_form_isSet;
}

bool OAIProductCatalog_200_response::is_form_Valid() const{
    return m_form_isValid;
}

QString OAIProductCatalog_200_response::getMethod() const {
    return m_method;
}
void OAIProductCatalog_200_response::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIProductCatalog_200_response::is_method_Set() const{
    return m_method_isSet;
}

bool OAIProductCatalog_200_response::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIProductCatalog_200_response::getName() const {
    return m_name;
}
void OAIProductCatalog_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductCatalog_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductCatalog_200_response::is_name_Valid() const{
    return m_name_isValid;
}

float OAIProductCatalog_200_response::getPrice() const {
    return m_price;
}
void OAIProductCatalog_200_response::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProductCatalog_200_response::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProductCatalog_200_response::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIProductCatalog_200_response::getSku() const {
    return m_sku;
}
void OAIProductCatalog_200_response::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIProductCatalog_200_response::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIProductCatalog_200_response::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIProductCatalog_200_response::getUrl() const {
    return m_url;
}
void OAIProductCatalog_200_response::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProductCatalog_200_response::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProductCatalog_200_response::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProductCatalog_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductCatalog_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
