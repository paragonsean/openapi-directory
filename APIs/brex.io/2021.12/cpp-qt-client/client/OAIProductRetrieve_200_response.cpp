/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductRetrieve_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductRetrieve_200_response::OAIProductRetrieve_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductRetrieve_200_response::OAIProductRetrieve_200_response() {
    this->initializeModel();
}

OAIProductRetrieve_200_response::~OAIProductRetrieve_200_response() {}

void OAIProductRetrieve_200_response::initializeModel() {

    m_child_orders_isSet = false;
    m_child_orders_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_product_order_id_isSet = false;
    m_product_order_id_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIProductRetrieve_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductRetrieve_200_response::fromJsonObject(QJsonObject json) {

    m_child_orders_isValid = ::OpenAPI::fromJsonValue(m_child_orders, json[QString("childOrders")]);
    m_child_orders_isSet = !json[QString("childOrders")].isNull() && m_child_orders_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_product_order_id_isValid = ::OpenAPI::fromJsonValue(m_product_order_id, json[QString("productOrderId")]);
    m_product_order_id_isSet = !json[QString("productOrderId")].isNull() && m_product_order_id_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIProductRetrieve_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductRetrieve_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_child_orders.size() > 0) {
        obj.insert(QString("childOrders"), ::OpenAPI::toJsonValue(m_child_orders));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_product_order_id_isSet) {
        obj.insert(QString("productOrderId"), ::OpenAPI::toJsonValue(m_product_order_id));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QList<QString> OAIProductRetrieve_200_response::getChildOrders() const {
    return m_child_orders;
}
void OAIProductRetrieve_200_response::setChildOrders(const QList<QString> &child_orders) {
    m_child_orders = child_orders;
    m_child_orders_isSet = true;
}

bool OAIProductRetrieve_200_response::is_child_orders_Set() const{
    return m_child_orders_isSet;
}

bool OAIProductRetrieve_200_response::is_child_orders_Valid() const{
    return m_child_orders_isValid;
}

OAIObject OAIProductRetrieve_200_response::getData() const {
    return m_data;
}
void OAIProductRetrieve_200_response::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIProductRetrieve_200_response::is_data_Set() const{
    return m_data_isSet;
}

bool OAIProductRetrieve_200_response::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIProductRetrieve_200_response::getMimeType() const {
    return m_mime_type;
}
void OAIProductRetrieve_200_response::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIProductRetrieve_200_response::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIProductRetrieve_200_response::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIProductRetrieve_200_response::getProductOrderId() const {
    return m_product_order_id;
}
void OAIProductRetrieve_200_response::setProductOrderId(const QString &product_order_id) {
    m_product_order_id = product_order_id;
    m_product_order_id_isSet = true;
}

bool OAIProductRetrieve_200_response::is_product_order_id_Set() const{
    return m_product_order_id_isSet;
}

bool OAIProductRetrieve_200_response::is_product_order_id_Valid() const{
    return m_product_order_id_isValid;
}

QString OAIProductRetrieve_200_response::getUri() const {
    return m_uri;
}
void OAIProductRetrieve_200_response::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIProductRetrieve_200_response::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIProductRetrieve_200_response::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIProductRetrieve_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductRetrieve_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_mime_type_isValid && m_product_order_id_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
