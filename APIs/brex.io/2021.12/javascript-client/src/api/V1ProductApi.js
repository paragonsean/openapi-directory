/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductAvailability200Response from '../model/ProductAvailability200Response';
import ProductCatalog200Response from '../model/ProductCatalog200Response';
import ProductNotifierCreate200Response from '../model/ProductNotifierCreate200Response';
import ProductOrder200Response from '../model/ProductOrder200Response';
import ProductRetrieve200Response from '../model/ProductRetrieve200Response';
import ProductSearch200ResponseInner from '../model/ProductSearch200ResponseInner';

/**
* V1Product service.
* @module api/V1ProductApi
* @version 2021.12
*/
export default class V1ProductApi {

    /**
    * Constructs a new V1ProductApi. 
    * @alias module:api/V1ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productAvailability operation.
     * @callback module:api/V1ProductApi~productAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAvailability200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a document availability result
     * Check availability and valid options for a particular product for a particular company identfied by its id
     * @param {String} sku SKU - 9 character value from a Product object
     * @param {String} subjectId Subject (e.g. Company) ID - 32 character hex value
     * @param {module:api/V1ProductApi~productAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAvailability200Response}
     */
    productAvailability(sku, subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling productAvailability");
      }
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling productAvailability");
      }

      let pathParams = {
        'sku': sku,
        'subjectId': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductAvailability200Response;
      return this.apiClient.callApi(
        '/api/v1/product/availability/{sku}/{subjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCatalog operation.
     * @callback module:api/V1ProductApi~productCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCatalog200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a catalog of products
     * Returns a catalog of purchasable products available with some metadata for a particular country
     * @param {String} country two letter country code in upper case
     * @param {module:api/V1ProductApi~productCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCatalog200Response}
     */
    productCatalog(country, callback) {
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling productCatalog");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCatalog200Response;
      return this.apiClient.callApi(
        '/api/v1/product/catalog/{country}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productNotifier operation.
     * @callback module:api/V1ProductApi~productNotifierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata for a notifier
     * Queries and returns all metadata associated with a notifier identified by its notifer id
     * @param {String} notifierId ID of the ProductOrderNotifier as returned from a /notifier POST call - 32 character hex value
     * @param {module:api/V1ProductApi~productNotifierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productNotifier(notifierId, callback) {
      let postBody = null;
      // verify the required parameter 'notifierId' is set
      if (notifierId === undefined || notifierId === null) {
        throw new Error("Missing the required parameter 'notifierId' when calling productNotifier");
      }

      let pathParams = {
        'notifierId': notifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/product/notifier/{notifierId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productNotifierCreate operation.
     * @callback module:api/V1ProductApi~productNotifierCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductNotifierCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a notifier for an order
     * Create a notifier for a particular order. Parameters can be supplied in the path
     * @param {String} orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value
     * @param {String} type Type of the notifier - indicates the action the notifier will perform. Currently GET and POST are supported which performs an http(s) GET/POST to the supplied uri with appended notifierId= and orderId= parameters when the order processing is completed. Upon the POST request the order object is sent as a JSON body
     * @param {String} uri URI of the notifier for the 'complete' action. Currently only a GET method HTTP(s) URL is supported. 1 to 250 characters long. Every slash in the URI must be replaced by a ~
     * @param {module:api/V1ProductApi~productNotifierCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductNotifierCreate200Response}
     */
    productNotifierCreate(orderId, type, uri, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling productNotifierCreate");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling productNotifierCreate");
      }
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling productNotifierCreate");
      }

      let pathParams = {
        'orderId': orderId,
        'type': type,
        'uri': uri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductNotifierCreate200Response;
      return this.apiClient.callApi(
        '/api/v1/product/notifier/{orderId}/{type}/{uri}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOrder operation.
     * @callback module:api/V1ProductApi~productOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOrder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places a product order
     * Place an order for a particular product identified by its SKU for a particular company identified by its id
     * @param {String} sku SKU - 9 character value from a Product object
     * @param {String} subjectId Subject (e.g. Company) ID - 32 character hex value
     * @param {module:api/V1ProductApi~productOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOrder200Response}
     */
    productOrder(sku, subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling productOrder");
      }
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling productOrder");
      }

      let pathParams = {
        'sku': sku,
        'subjectId': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOrder200Response;
      return this.apiClient.callApi(
        '/api/v1/product/order/{sku}/{subjectId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOrderConcierge operation.
     * @callback module:api/V1ProductApi~productOrderConciergeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places a concierge order
     * Place an order for a concierge product
     * @param {Object} opts Optional parameters
     * @param {String} [companyName] Name of the company for which a document should be ordered. (Not required if subjectId is given)
     * @param {String} [contactEmail] Contact E-Mail, will be contacted if concierge costs are exceeding the threshhold configured on your plan
     * @param {String} [contactPhone] Contact phone, will be contacted if concierge costs are exceeding the threshhold configured on your plan
     * @param {Boolean} [costConfirmation] If the concierge cost should require additional confirmation if a threshold is reached (configured on your plan)
     * @param {String} [country] Two letter ISO code of the country of the company
     * @param {Boolean} [financialData] If you want financial data of the company to be retrieved
     * @param {Boolean} [historicInformation] If you want historical data of the company to be retrieved
     * @param {String} [informationRequirements] Requirements on what document or information should be provided. Please be very precise
     * @param {Boolean} [locationInvestigation] If the companies residency should be investigated
     * @param {String} [priority] Priority of order: standard/express are allowed
     * @param {Boolean} [registerData] If you want register data of the company to be retrieved
     * @param {String} [registerNumber] Registration number of the company for which a document should be ordered. (Not required if subjectId is given)
     * @param {String} [subjectId] Kompanyid of the company you want to place the order for
     * @param {module:api/V1ProductApi~productOrderConciergeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productOrderConcierge(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'companyName': opts['companyName'],
        'contactEmail': opts['contactEmail'],
        'contactPhone': opts['contactPhone'],
        'costConfirmation': opts['costConfirmation'],
        'country': opts['country'],
        'financialData': opts['financialData'],
        'historicInformation': opts['historicInformation'],
        'informationRequirements': opts['informationRequirements'],
        'locationInvestigation': opts['locationInvestigation'],
        'priority': opts['priority'],
        'registerData': opts['registerData'],
        'registerNumber': opts['registerNumber'],
        'subjectId': opts['subjectId']
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/product/order/concierge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOrderUbo operation.
     * @callback module:api/V1ProductApi~productOrderUboCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places a UBO order
     * Place an order for a UBO (ultimate beneficial owner) discovery report
     * @param {String} subjectId KYC API Id (32 byte hexid) of the company you want to place the order for
     * @param {Object} opts Optional parameters
     * @param {String} [callbackUrl] An optional callback URL to which updates about the order will be sent (for instance if credits are exceeded)
     * @param {Number} [credits] Specify a maximum amount of credits which should be used. To disable use -1
     * @param {Boolean} [includeDocs] Include purchase of register document to ubo report
     * @param {String} [levels] Define a threshold for different levels of crawling
     * @param {String} [strategy] Choose a matching strategy. Available options (FULL,LEVELS)
     * @param {module:api/V1ProductApi~productOrderUboCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productOrderUbo(subjectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling productOrderUbo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'callbackUrl': opts['callbackUrl'],
        'credits': opts['credits'],
        'includeDocs': opts['includeDocs'],
        'levels': opts['levels'],
        'strategy': opts['strategy'],
        'subjectId': subjectId
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/product/order/ubo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOrderWithOption operation.
     * @callback module:api/V1ProductApi~productOrderWithOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places a product order
     * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
     * @param {String} sku SKU - 9 character value from a Product object
     * @param {String} option Product option (e.g. Accounts year) from a previous Availability call
     * @param {String} subjectId Subject (e.g. Company) ID - 32 character hex value
     * @param {module:api/V1ProductApi~productOrderWithOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productOrderWithOption(sku, option, subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling productOrderWithOption");
      }
      // verify the required parameter 'option' is set
      if (option === undefined || option === null) {
        throw new Error("Missing the required parameter 'option' when calling productOrderWithOption");
      }
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling productOrderWithOption");
      }

      let pathParams = {
        'sku': sku,
        'option': option,
        'subjectId': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/product/order/{sku}/{option}/{subjectId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productRetrieve operation.
     * @callback module:api/V1ProductApi~productRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductRetrieve200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the result of an order
     * Retrieves the document or structured data associated with a completed order identified with its order id
     * @param {String} orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value
     * @param {module:api/V1ProductApi~productRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductRetrieve200Response}
     */
    productRetrieve(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling productRetrieve");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductRetrieve200Response;
      return this.apiClient.callApi(
        '/api/v1/product/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSearch operation.
     * @callback module:api/V1ProductApi~productSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductSearch200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of products
     * Search for possible products for a particular company identified by its id
     * @param {String} subjectId Subject (e.g. Company) ID - 32 character hex value
     * @param {module:api/V1ProductApi~productSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductSearch200ResponseInner>}
     */
    productSearch(subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling productSearch");
      }

      let pathParams = {
        'subjectId': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductSearch200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/product/search/{subjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productStatus operation.
     * @callback module:api/V1ProductApi~productStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata for a order
     * Retrieve the current status of an order identified by its order id
     * @param {String} orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value
     * @param {module:api/V1ProductApi~productStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productStatus(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling productStatus");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/product/status/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productUpdateAction operation.
     * @callback module:api/V1ProductApi~productUpdateActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates metadata of an order
     * Update an existing order identified by its order id
     * @param {String} action The action you want to perform for the order
     * @param {String} orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value
     * @param {Object} opts Optional parameters
     * @param {Number} [credits] Specify an amount of credits which should be added to the order
     * @param {module:api/V1ProductApi~productUpdateActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productUpdateAction(action, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling productUpdateAction");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling productUpdateAction");
      }

      let pathParams = {
        'action': action,
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'credits': opts['credits']
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/product/update/{action}/{orderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
