/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PepMonitorList200ResponseInner from '../model/PepMonitorList200ResponseInner';
import PepRetrieve200Response from '../model/PepRetrieve200Response';

/**
* V1Pepsanction service.
* @module api/V1PepsanctionApi
* @version 2021.12
*/
export default class V1PepsanctionApi {

    /**
    * Constructs a new V1PepsanctionApi. 
    * @alias module:api/V1PepsanctionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pepMonitorList operation.
     * @callback module:api/V1PepsanctionApi~pepMonitorListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PepMonitorList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of monitor entries
     * Retrieve a list of all active Pep Sanction Report monitors for this account
     * @param {module:api/V1PepsanctionApi~pepMonitorListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PepMonitorList200ResponseInner>}
     */
    pepMonitorList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PepMonitorList200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/pepsanction/monitor/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pepMonitorUnregister operation.
     * @callback module:api/V1PepsanctionApi~pepMonitorUnregisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactive a pep sanction monitor
     * Unregister a previously created Pep Sanction Report Monitor
     * @param {String} id The identifier of the Monitor
     * @param {module:api/V1PepsanctionApi~pepMonitorUnregisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pepMonitorUnregister(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pepMonitorUnregister");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/pepsanction/monitor/unregister/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pepMonitorUpdate operation.
     * @callback module:api/V1PepsanctionApi~pepMonitorUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PepMonitorList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details of active Pep Sanction monitor
     * Update the webhook URL of an active Pep Sanction Report Monitor
     * @param {String} id The identifier of the Monitor
     * @param {Object} opts Optional parameters
     * @param {String} [webhook] If Monitoring is enabled this parameter is required. This is where updates will be sent to
     * @param {module:api/V1PepsanctionApi~pepMonitorUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PepMonitorList200ResponseInner}
     */
    pepMonitorUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pepMonitorUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Webhook': opts['webhook']
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PepMonitorList200ResponseInner;
      return this.apiClient.callApi(
        '/api/v1/pepsanction/monitor/update/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pepOrder operation.
     * @callback module:api/V1PepsanctionApi~pepOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Orders a new Pep Sanction Check Report
     * Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
     * @param {module:model/String} type Type (Business or Person) of the requested Pep Sanction Check
     * @param {String} search Search string for the Pep Sanction Check
     * @param {Object} opts Optional parameters
     * @param {String} [aliases] Optional parameter for declaring alias names when doing a person search (seperated by commas)
     * @param {String} [country] Optional name of Country to assist in identifying matches based upon location/geography.
     * @param {String} [DOB] Optional parameter for date of birth name when doing a person search
     * @param {String} [familyName] Optional parameter for last name when doing a person search
     * @param {String} [filters] Optional parameter for restricting search when doing a person search (seperated by commas)
     * @param {String} [givenName] Optional parameter for first name when doing a person search
     * @param {String} [LEI] Optional Legal Entity Identifier for additional business identifier verification.
     * @param {String} [locale] Optional name of City or Locale to assist in identifying matches based upon location/geography.
     * @param {String} [medialists] Optional parameter for selecting only specific media lists. By default all lists are queried
     * @param {String} [middleName] Optional parameter for middle name when doing a person search
     * @param {Boolean} [monitoring] If this Pep Sanction Check should be continuesly monitored.
     * @param {String} [peplists] Optional parameter for selecting only specific pep lists. By default all lists are queried
     * @param {String} [region] Optional name of Region or State to assist in identifying matches based upon location/geography.
     * @param {Boolean} [smartMatch] Optional parameter for enabling SmartMatch to retrieve more results
     * @param {String} [watchlists] Optional parameter for selecting only specific watch lists. By default all lists are queried
     * @param {String} [webhook] If Monitoring is enabled this parameter is required. This is where updates will be sent to
     * @param {module:api/V1PepsanctionApi~pepOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pepOrder(type, search, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling pepOrder");
      }
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling pepOrder");
      }

      let pathParams = {
        'type': type,
        'search': search
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Aliases': opts['aliases'],
        'Country': opts['country'],
        'DOB': opts['DOB'],
        'FamilyName': opts['familyName'],
        'Filters': opts['filters'],
        'GivenName': opts['givenName'],
        'LEI': opts['LEI'],
        'Locale': opts['locale'],
        'Medialists': opts['medialists'],
        'MiddleName': opts['middleName'],
        'Monitoring': opts['monitoring'],
        'Peplists': opts['peplists'],
        'Region': opts['region'],
        'SmartMatch': opts['smartMatch'],
        'Watchlists': opts['watchlists'],
        'Webhook': opts['webhook']
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/pepsanction/order/{type}/{search}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pepRetrieve operation.
     * @callback module:api/V1PepsanctionApi~pepRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PepRetrieve200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a json or pdf report
     * Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
     * @param {String} id The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [accept = 'application/json')] The type (pdf or json) in which the check should be returned
     * @param {module:api/V1PepsanctionApi~pepRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PepRetrieve200Response}
     */
    pepRetrieve(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pepRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PepRetrieve200Response;
      return this.apiClient.callApi(
        '/api/v1/pepsanction/retrieve/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
