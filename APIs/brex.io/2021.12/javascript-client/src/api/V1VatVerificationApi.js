/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VatBasic200Response from '../model/VatBasic200Response';
import VatLevelTwo200Response from '../model/VatLevelTwo200Response';
import VatLookup200Response from '../model/VatLookup200Response';

/**
* V1VatVerification service.
* @module api/V1VatVerificationApi
* @version 2021.12
*/
export default class V1VatVerificationApi {

    /**
    * Constructs a new V1VatVerificationApi. 
    * @alias module:api/V1VatVerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the vatBasic operation.
     * @callback module:api/V1VatVerificationApi~vatBasicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VatBasic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a verification result
     * Basic verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} vatNumber VAT number to validate
     * @param {Object} opts Optional parameters
     * @param {String} [companyAddress] company address lines
     * @param {String} [companyName] Company name
     * @param {String} [companyNumber] official company number
     * @param {module:api/V1VatVerificationApi~vatBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VatBasic200Response}
     */
    vatBasic(country, vatNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling vatBasic");
      }
      // verify the required parameter 'vatNumber' is set
      if (vatNumber === undefined || vatNumber === null) {
        throw new Error("Missing the required parameter 'vatNumber' when calling vatBasic");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'companyAddress': opts['companyAddress'],
        'companyName': opts['companyName'],
        'companyNumber': opts['companyNumber'],
        'vatNumber': vatNumber
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VatBasic200Response;
      return this.apiClient.callApi(
        '/api/v1/vat-verification/basic-check/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatComprehensive operation.
     * @callback module:api/V1VatVerificationApi~vatComprehensiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a verification result and company data
     * Extended verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} vatNumber VAT number to validate
     * @param {Object} opts Optional parameters
     * @param {String} [companyAddress] company address lines
     * @param {String} [companyName] Company name
     * @param {String} [companyNumber] official company number
     * @param {module:api/V1VatVerificationApi~vatComprehensiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vatComprehensive(country, vatNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling vatComprehensive");
      }
      // verify the required parameter 'vatNumber' is set
      if (vatNumber === undefined || vatNumber === null) {
        throw new Error("Missing the required parameter 'vatNumber' when calling vatComprehensive");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'companyAddress': opts['companyAddress'],
        'companyName': opts['companyName'],
        'companyNumber': opts['companyNumber'],
        'vatNumber': vatNumber
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/vat-verification/comprehensive-check/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatLevelTwo operation.
     * @callback module:api/V1VatVerificationApi~vatLevelTwoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VatLevelTwo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a level two verification result
     * Second Level Verification of VAT number against BMF Austria. Optional confirmation parameter can be provided to order a Confirmation Report.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} vatNumber VAT number to validate
     * @param {Object} opts Optional parameters
     * @param {Boolean} [confirmation] If a confirmation document should be ordered
     * @param {module:api/V1VatVerificationApi~vatLevelTwoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VatLevelTwo200Response}
     */
    vatLevelTwo(country, vatNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling vatLevelTwo");
      }
      // verify the required parameter 'vatNumber' is set
      if (vatNumber === undefined || vatNumber === null) {
        throw new Error("Missing the required parameter 'vatNumber' when calling vatLevelTwo");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'confirmation': opts['confirmation'],
        'vatNumber': vatNumber
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VatLevelTwo200Response;
      return this.apiClient.callApi(
        '/api/v1/vat-verification/leveltwo-check/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatLookup operation.
     * @callback module:api/V1VatVerificationApi~vatLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VatLookup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of vat numbers with additional data
     * Reverse VAT Lookup: Search for companies and their VAT numbers by company name. Search is forwarded to a provider.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} name Company name
     * @param {Object} opts Optional parameters
     * @param {String} [address] Company address
     * @param {module:api/V1VatVerificationApi~vatLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VatLookup200Response}
     */
    vatLookup(country, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling vatLookup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling vatLookup");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'address': opts['address'],
        'name': name
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VatLookup200Response;
      return this.apiClient.callApi(
        '/api/v1/vat-verification/lookup/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
