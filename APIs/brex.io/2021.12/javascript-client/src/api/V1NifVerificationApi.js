/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NifBasic200Response from '../model/NifBasic200Response';
import NifComprehensive200Response from '../model/NifComprehensive200Response';

/**
* V1NifVerification service.
* @module api/V1NifVerificationApi
* @version 2021.12
*/
export default class V1NifVerificationApi {

    /**
    * Constructs a new V1NifVerificationApi. 
    * @alias module:api/V1NifVerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the nifBasic operation.
     * @callback module:api/V1NifVerificationApi~nifBasicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NifBasic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies a NIF number
     * Performs a basic verification check of a given NIF tax number against NIF.com. Optional parameters may be added to improve calculation of confidence score.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} nifNumber NIF number to validate
     * @param {Object} opts Optional parameters
     * @param {String} [companyAddress] company address lines
     * @param {String} [companyName] Company name
     * @param {module:api/V1NifVerificationApi~nifBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NifBasic200Response}
     */
    nifBasic(country, nifNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling nifBasic");
      }
      // verify the required parameter 'nifNumber' is set
      if (nifNumber === undefined || nifNumber === null) {
        throw new Error("Missing the required parameter 'nifNumber' when calling nifBasic");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'companyAddress': opts['companyAddress'],
        'companyName': opts['companyName'],
        'nifNumber': nifNumber
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = NifBasic200Response;
      return this.apiClient.callApi(
        '/api/v1/nif-verification/basic-check/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nifComprehensive operation.
     * @callback module:api/V1NifVerificationApi~nifComprehensiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NifComprehensive200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies a NIF number and retrieves company data
     * Comprehensive verification of given portuguese NIF number against NIF.com. Optional parameters may help to build a better confidence score. Additional company data will be provided.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} nifNumber NIF number to validate
     * @param {Object} opts Optional parameters
     * @param {String} [companyAddress] company address lines
     * @param {String} [companyName] Company name
     * @param {module:api/V1NifVerificationApi~nifComprehensiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NifComprehensive200Response}
     */
    nifComprehensive(country, nifNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling nifComprehensive");
      }
      // verify the required parameter 'nifNumber' is set
      if (nifNumber === undefined || nifNumber === null) {
        throw new Error("Missing the required parameter 'nifNumber' when calling nifComprehensive");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'companyAddress': opts['companyAddress'],
        'companyName': opts['companyName'],
        'nifNumber': nifNumber
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = NifComprehensive200Response;
      return this.apiClient.callApi(
        '/api/v1/nif-verification/comprehensive-check/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
