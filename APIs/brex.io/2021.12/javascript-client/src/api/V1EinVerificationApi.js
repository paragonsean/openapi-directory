/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EinVerificationBasic200Response from '../model/EinVerificationBasic200Response';
import EinVerificationComprehensive200Response from '../model/EinVerificationComprehensive200Response';
import EinVerificationLookup200Response from '../model/EinVerificationLookup200Response';

/**
* V1EinVerification service.
* @module api/V1EinVerificationApi
* @version 2021.12
*/
export default class V1EinVerificationApi {

    /**
    * Constructs a new V1EinVerificationApi. 
    * @alias module:api/V1EinVerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the einVerificationBasic operation.
     * @callback module:api/V1EinVerificationApi~einVerificationBasicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EinVerificationBasic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies an EIN number
     * Performs a basic verification check of a given EIN tax number.
     * @param {String} ein Nine letter EIN number with or without hyphens
     * @param {module:api/V1EinVerificationApi~einVerificationBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EinVerificationBasic200Response}
     */
    einVerificationBasic(ein, callback) {
      let postBody = null;
      // verify the required parameter 'ein' is set
      if (ein === undefined || ein === null) {
        throw new Error("Missing the required parameter 'ein' when calling einVerificationBasic");
      }

      let pathParams = {
      };
      let queryParams = {
        'ein': ein
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EinVerificationBasic200Response;
      return this.apiClient.callApi(
        '/api/v1/ein-verification/basic-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the einVerificationComprehensive operation.
     * @callback module:api/V1EinVerificationApi~einVerificationComprehensiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EinVerificationComprehensive200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies EIN number and retrieves company data
     * Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
     * @param {String} ein Nine letter EIN number with or without hyphens
     * @param {module:api/V1EinVerificationApi~einVerificationComprehensiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EinVerificationComprehensive200Response}
     */
    einVerificationComprehensive(ein, callback) {
      let postBody = null;
      // verify the required parameter 'ein' is set
      if (ein === undefined || ein === null) {
        throw new Error("Missing the required parameter 'ein' when calling einVerificationComprehensive");
      }

      let pathParams = {
      };
      let queryParams = {
        'ein': ein
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EinVerificationComprehensive200Response;
      return this.apiClient.callApi(
        '/api/v1/ein-verification/comprehensive-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the einVerificationLookup operation.
     * @callback module:api/V1EinVerificationApi~einVerificationLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EinVerificationLookup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of EIN numbers
     * Lookup EIN number for a company by its company name
     * @param {String} name Business name of the company
     * @param {Object} opts Optional parameters
     * @param {String} [state] Optional state parameter to improve results. (Two letter code for example CA or US-CA for California)
     * @param {String} [zip] Optional zip code parameter to improve results. (Zip is preferred over state)
     * @param {Boolean} [tight] Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5)
     * @param {module:api/V1EinVerificationApi~einVerificationLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EinVerificationLookup200Response}
     */
    einVerificationLookup(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling einVerificationLookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'state': opts['state'],
        'zip': opts['zip'],
        'tight': opts['tight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EinVerificationLookup200Response;
      return this.apiClient.callApi(
        '/api/v1/ein-verification/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
