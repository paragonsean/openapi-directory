/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompanyAnnouncement200ResponseInner from '../model/CompanyAnnouncement200ResponseInner';
import CompanyDeepsearchISIN200ResponseInner from '../model/CompanyDeepsearchISIN200ResponseInner';
import CompanyDeepsearchLEI200Response from '../model/CompanyDeepsearchLEI200Response';
import CompanyNotificationId200ResponseInner from '../model/CompanyNotificationId200ResponseInner';
import CompanyNotificationRegister200Response from '../model/CompanyNotificationRegister200Response';
import CompanySearchName200ResponseInner from '../model/CompanySearchName200ResponseInner';

/**
* V1Company service.
* @module api/V1CompanyApi
* @version 2021.12
*/
export default class V1CompanyApi {

    /**
    * Constructs a new V1CompanyApi. 
    * @alias module:api/V1CompanyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the companyAlternativeSearch operation.
     * @callback module:api/V1CompanyApi~companyAlternativeSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of companies from the KYC API company index
     * KYC API company index lookup by country and mixed parameters. This function requires a country code then a mixture of name
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {Object} opts Optional parameters
     * @param {String} [address] Company address (or address partial)
     * @param {String} [name] Company name
     * @param {String} [number] Company registration number
     * @param {String} [phone] Company contact phone number
     * @param {String} [url] Company url
     * @param {String} [vat] Company VAT number
     * @param {module:api/V1CompanyApi~companyAlternativeSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyAlternativeSearch(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling companyAlternativeSearch");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'address': opts['address'],
        'name': opts['name'],
        'number': opts['number'],
        'phone': opts['phone'],
        'url': opts['url'],
        'vat': opts['vat']
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/search/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyAnnouncement operation.
     * @callback module:api/V1CompanyApi~companyAnnouncementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompanyAnnouncement200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves announcement data
     * Request full announcement data identified by announcement id
     * @param {String} id announcement hex ID
     * @param {module:api/V1CompanyApi~companyAnnouncementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompanyAnnouncement200ResponseInner>}
     */
    companyAnnouncement(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyAnnouncement");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompanyAnnouncement200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/company/announcement/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeepsearchISIN operation.
     * @callback module:api/V1CompanyApi~companyDeepsearchISINCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompanyDeepsearchISIN200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of stock exchange listings
     * Lookup stock exchange listings identified by an ISIN (International Securities Identification Number) number. Search is forwarded to a provider.
     * @param {Object} opts Optional parameters
     * @param {String} [isin] A list of ISIN numbers seperated by comma (maximum) is 100
     * @param {module:api/V1CompanyApi~companyDeepsearchISINCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompanyDeepsearchISIN200ResponseInner>}
     */
    companyDeepsearchISIN(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'isin': opts['isin']
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [CompanyDeepsearchISIN200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/company/deepsearch/isin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeepsearchLEI operation.
     * @callback module:api/V1CompanyApi~companyDeepsearchLEICallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyDeepsearchLEI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of companies
     * Lookup companies identified by a LEI (Legal Entity Identifier) number. Search is forwarded to a provider.
     * @param {String} number lei number
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Pagination for the ISIN number results (1000 numbers per page)
     * @param {module:api/V1CompanyApi~companyDeepsearchLEICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyDeepsearchLEI200Response}
     */
    companyDeepsearchLEI(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling companyDeepsearchLEI");
      }

      let pathParams = {
        'number': number
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanyDeepsearchLEI200Response;
      return this.apiClient.callApi(
        '/api/v1/company/deepsearch/lei/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeepsearchName operation.
     * @callback module:api/V1CompanyApi~companyDeepsearchNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of companies from the official business register
     * Search for companies with a certain name. Search is forwarded to the respective business register of the country.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} name company name
     * @param {module:api/V1CompanyApi~companyDeepsearchNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyDeepsearchName(country, name, callback) {
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling companyDeepsearchName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling companyDeepsearchName");
      }

      let pathParams = {
        'country': country,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/deepsearch/name/{country}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeepsearchNumber operation.
     * @callback module:api/V1CompanyApi~companyDeepsearchNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of companies from the official business register
     * Search for companies with a certain register number. Search is forwarded to the respective business register of the country.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} number company registration number
     * @param {module:api/V1CompanyApi~companyDeepsearchNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyDeepsearchNumber(country, number, callback) {
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling companyDeepsearchNumber");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling companyDeepsearchNumber");
      }

      let pathParams = {
        'country': country,
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/deepsearch/number/{country}/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIdAnnouncements operation.
     * @callback module:api/V1CompanyApi~companyIdAnnouncementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves company announcements
     * Search announcements filed to the business register from a company identified by an id
     * @param {String} id company hex ID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] limit of announcements in response (default 10)
     * @param {Number} [offset] to paginate through results (default 0)
     * @param {Boolean} [data] If this parameter is set to false, you will only receive ids, and no additional data about announcements and no hits to the metric will be counted. (and potentially minimizing your costs)
     * @param {module:api/V1CompanyApi~companyIdAnnouncementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyIdAnnouncements(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIdAnnouncements");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'data': opts['data']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/{id}/announcements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIdDataset operation.
     * @callback module:api/V1CompanyApi~companyIdDatasetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves company details
     * Get company details by id. The level of details is defined by the dataset parameter
     * @param {String} id company master data by id
     * @param {module:model/String} dataset company master data by id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [checkStockListing] Try to retrieve additional stock information for this company. (Only available on refresh)
     * @param {module:model/String} [lang] Optional data translation (only available in limited jurisdictions)
     * @param {module:api/V1CompanyApi~companyIdDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    companyIdDataset(id, dataset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIdDataset");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling companyIdDataset");
      }

      let pathParams = {
        'id': id,
        'dataset': dataset
      };
      let queryParams = {
        'check_stock_listing': opts['checkStockListing'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/company/{id}/{dataset}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIdSuper operation.
     * @callback module:api/V1CompanyApi~companyIdSuperCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves structured data extracted from a company document
     * Request company superdata identified by company id
     * @param {String} id company superdata by id
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [lang] Optional data translation (only available in limited jurisdictions)
     * @param {module:api/V1CompanyApi~companyIdSuperCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyIdSuper(id, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIdSuper");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling companyIdSuper");
      }

      let pathParams = {
        'id': id,
        'country': country
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/{id}/super/{country}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMonitorChangeTypesList operation.
     * @callback module:api/V1CompanyApi~companyMonitorChangeTypesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available ChangeTypes
     * Get current list of available ChangeTypes to subscribe to
     * @param {module:api/V1CompanyApi~companyMonitorChangeTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    companyMonitorChangeTypesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/company/monitoring/changeTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMonitorId operation.
     * @callback module:api/V1CompanyApi~companyMonitorIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get monitor status for specific company id
     * Query status of registered monitors for a specific company identified by a company id
     * @param {String} id Company Hex ID
     * @param {module:api/V1CompanyApi~companyMonitorIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyMonitorId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyMonitorId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/monitoring/list/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMonitorList operation.
     * @callback module:api/V1CompanyApi~companyMonitorListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of registered monitors
     * Query list of all registered monitors for logged in user
     * @param {module:api/V1CompanyApi~companyMonitorListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyMonitorList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/monitoring/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMonitorRegister operation.
     * @callback module:api/V1CompanyApi~companyMonitorRegisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a Company for monitoring
     * Add a company to your perpetual monitoring list and register a callback URL to get monitoring alerts.
     * @param {String} id Company Hex ID
     * @param {String} callbackUrl Callback URL
     * @param {String} changeType ChangeType to monitor
     * @param {module:api/V1CompanyApi~companyMonitorRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyMonitorRegister(id, callbackUrl, changeType, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyMonitorRegister");
      }
      // verify the required parameter 'callbackUrl' is set
      if (callbackUrl === undefined || callbackUrl === null) {
        throw new Error("Missing the required parameter 'callbackUrl' when calling companyMonitorRegister");
      }
      // verify the required parameter 'changeType' is set
      if (changeType === undefined || changeType === null) {
        throw new Error("Missing the required parameter 'changeType' when calling companyMonitorRegister");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'callbackUrl': callbackUrl,
        'changeType': changeType
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/monitoring/register/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMonitorUnregister operation.
     * @callback module:api/V1CompanyApi~companyMonitorUnregisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates an active notification
     * Deactivate a previously registered company monitor identified by the notifier id
     * @param {String} id Registration id of monitoring request record
     * @param {module:api/V1CompanyApi~companyMonitorUnregisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyMonitorUnregister(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyMonitorUnregister");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/monitoring/unregister/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNotificationId operation.
     * @callback module:api/V1CompanyApi~companyNotificationIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompanyNotificationId200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of registered notifications
     * Query list of registered notifications for a specific company identified by a company id
     * @param {String} id Company Hex ID
     * @param {module:api/V1CompanyApi~companyNotificationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompanyNotificationId200ResponseInner>}
     */
    companyNotificationId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyNotificationId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompanyNotificationId200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/company/notification/list/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNotificationList operation.
     * @callback module:api/V1CompanyApi~companyNotificationListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of registered notifications
     * Query list of registered callback URLs for logged in user
     * @param {module:api/V1CompanyApi~companyNotificationListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyNotificationList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/notification/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNotificationRegister operation.
     * @callback module:api/V1CompanyApi~companyNotificationRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyNotificationRegister200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new notification
     * Register a new callback URL to get notifications about companies.
     * @param {String} id Company Hex ID
     * @param {String} callbackUrl Callback URL
     * @param {module:api/V1CompanyApi~companyNotificationRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyNotificationRegister200Response}
     */
    companyNotificationRegister(id, callbackUrl, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyNotificationRegister");
      }
      // verify the required parameter 'callbackUrl' is set
      if (callbackUrl === undefined || callbackUrl === null) {
        throw new Error("Missing the required parameter 'callbackUrl' when calling companyNotificationRegister");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'callbackUrl': callbackUrl
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CompanyNotificationRegister200Response;
      return this.apiClient.callApi(
        '/api/v1/company/notification/register/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNotificationUnregister operation.
     * @callback module:api/V1CompanyApi~companyNotificationUnregisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister a company from Monitoring
     * Deactivate a previously registered company monitor identified by the notifier id
     * @param {String} id Registration id of monitoring request record
     * @param {module:api/V1CompanyApi~companyNotificationUnregisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyNotificationUnregister(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyNotificationUnregister");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/notification/unregister/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companySearchName operation.
     * @callback module:api/V1CompanyApi~companySearchNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompanySearchName200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of companies from the KYC API company index
     * KYC API company index lookup for companies with a certain name in a country.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} name company name
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] number of search results
     * @param {module:api/V1CompanyApi~companySearchNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompanySearchName200ResponseInner>}
     */
    companySearchName(country, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling companySearchName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling companySearchName");
      }

      let pathParams = {
        'country': country,
        'name': name
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompanySearchName200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/company/search/name/{country}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companySearchNumber operation.
     * @callback module:api/V1CompanyApi~companySearchNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of companies from the KYC API company index
     * KYC API company index lookup for companies with a certain register number in a country.
     * @param {String} country ISO_3166-1_alpha-2 representation of a country name - 2 chars
     * @param {String} number company registration number
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] number of search results
     * @param {module:api/V1CompanyApi~companySearchNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companySearchNumber(country, number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling companySearchNumber");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling companySearchNumber");
      }

      let pathParams = {
        'country': country,
        'number': number
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/company/search/number/{country}/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
