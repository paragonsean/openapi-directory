/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VatBasic200Response model module.
 * @module model/VatBasic200Response
 * @version 2021.12
 */
class VatBasic200Response {
    /**
     * Constructs a new <code>VatBasic200Response</code>.
     * @alias module:model/VatBasic200Response
     * @param confidenceScore {Number} 
     * @param validationStatus {Boolean} 
     */
    constructor(confidenceScore, validationStatus) { 
        
        VatBasic200Response.initialize(this, confidenceScore, validationStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, confidenceScore, validationStatus) { 
        obj['confidenceScore'] = confidenceScore;
        obj['validationStatus'] = validationStatus;
    }

    /**
     * Constructs a <code>VatBasic200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VatBasic200Response} obj Optional instance to populate.
     * @return {module:model/VatBasic200Response} The populated <code>VatBasic200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VatBasic200Response();

            if (data.hasOwnProperty('candidate')) {
                obj['candidate'] = ApiClient.convertToType(data['candidate'], [Object]);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = Object.constructFromObject(data['company']);
            }
            if (data.hasOwnProperty('confidenceScore')) {
                obj['confidenceScore'] = ApiClient.convertToType(data['confidenceScore'], 'Number');
            }
            if (data.hasOwnProperty('validationStatus')) {
                obj['validationStatus'] = ApiClient.convertToType(data['validationStatus'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VatBasic200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VatBasic200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VatBasic200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['candidate'])) {
            throw new Error("Expected the field `candidate` to be an array in the JSON data but got " + data['candidate']);
        }

        return true;
    }


}

VatBasic200Response.RequiredProperties = ["confidenceScore", "validationStatus"];

/**
 * @member {Array.<Object>} candidate
 */
VatBasic200Response.prototype['candidate'] = undefined;

/**
 * @member {Object} company
 */
VatBasic200Response.prototype['company'] = undefined;

/**
 * @member {Number} confidenceScore
 */
VatBasic200Response.prototype['confidenceScore'] = undefined;

/**
 * @member {Boolean} validationStatus
 */
VatBasic200Response.prototype['validationStatus'] = undefined;






export default VatBasic200Response;

