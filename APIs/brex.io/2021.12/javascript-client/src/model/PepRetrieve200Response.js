/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PepRetrieve200ResponseResults from './PepRetrieve200ResponseResults';

/**
 * The PepRetrieve200Response model module.
 * @module model/PepRetrieve200Response
 * @version 2021.12
 */
class PepRetrieve200Response {
    /**
     * Constructs a new <code>PepRetrieve200Response</code>.
     * @alias module:model/PepRetrieve200Response
     * @param listsChecked {String} 
     * @param search {String} 
     * @param status {String} 
     * @param timestamp {Object} 
     * @param type {String} 
     */
    constructor(listsChecked, search, status, timestamp, type) { 
        
        PepRetrieve200Response.initialize(this, listsChecked, search, status, timestamp, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, listsChecked, search, status, timestamp, type) { 
        obj['listsChecked'] = listsChecked;
        obj['search'] = search;
        obj['status'] = status;
        obj['timestamp'] = timestamp;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PepRetrieve200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PepRetrieve200Response} obj Optional instance to populate.
     * @return {module:model/PepRetrieve200Response} The populated <code>PepRetrieve200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PepRetrieve200Response();

            if (data.hasOwnProperty('listsChecked')) {
                obj['listsChecked'] = ApiClient.convertToType(data['listsChecked'], 'String');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = PepRetrieve200ResponseResults.constructFromObject(data['results']);
            }
            if (data.hasOwnProperty('search')) {
                obj['search'] = ApiClient.convertToType(data['search'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = Object.constructFromObject(data['timestamp']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PepRetrieve200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PepRetrieve200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PepRetrieve200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['listsChecked'] && !(typeof data['listsChecked'] === 'string' || data['listsChecked'] instanceof String)) {
            throw new Error("Expected the field `listsChecked` to be a primitive type in the JSON string but got " + data['listsChecked']);
        }
        // validate the optional field `results`
        if (data['results']) { // data not null
          PepRetrieve200ResponseResults.validateJSON(data['results']);
        }
        // ensure the json data is a string
        if (data['search'] && !(typeof data['search'] === 'string' || data['search'] instanceof String)) {
            throw new Error("Expected the field `search` to be a primitive type in the JSON string but got " + data['search']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PepRetrieve200Response.RequiredProperties = ["listsChecked", "search", "status", "timestamp", "type"];

/**
 * @member {String} listsChecked
 */
PepRetrieve200Response.prototype['listsChecked'] = undefined;

/**
 * @member {module:model/PepRetrieve200ResponseResults} results
 */
PepRetrieve200Response.prototype['results'] = undefined;

/**
 * @member {String} search
 */
PepRetrieve200Response.prototype['search'] = undefined;

/**
 * @member {String} status
 */
PepRetrieve200Response.prototype['status'] = undefined;

/**
 * @member {Object} timestamp
 */
PepRetrieve200Response.prototype['timestamp'] = undefined;

/**
 * @member {String} type
 */
PepRetrieve200Response.prototype['type'] = undefined;






export default PepRetrieve200Response;

