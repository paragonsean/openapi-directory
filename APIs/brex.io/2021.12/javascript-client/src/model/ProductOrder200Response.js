/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductOrder200Response model module.
 * @module model/ProductOrder200Response
 * @version 2021.12
 */
class ProductOrder200Response {
    /**
     * Constructs a new <code>ProductOrder200Response</code>.
     * @alias module:model/ProductOrder200Response
     * @param identity {String} 
     * @param option {String} 
     * @param ordered {Object} 
     * @param owner {String} 
     * @param price {Number} 
     * @param sku {String} 
     * @param status {String} 
     * @param subjectId {String} 
     * @param subjectValue {String} 
     */
    constructor(identity, option, ordered, owner, price, sku, status, subjectId, subjectValue) { 
        
        ProductOrder200Response.initialize(this, identity, option, ordered, owner, price, sku, status, subjectId, subjectValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identity, option, ordered, owner, price, sku, status, subjectId, subjectValue) { 
        obj['identity'] = identity;
        obj['option'] = option;
        obj['ordered'] = ordered;
        obj['owner'] = owner;
        obj['price'] = price;
        obj['sku'] = sku;
        obj['status'] = status;
        obj['subjectId'] = subjectId;
        obj['subjectValue'] = subjectValue;
    }

    /**
     * Constructs a <code>ProductOrder200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductOrder200Response} obj Optional instance to populate.
     * @return {module:model/ProductOrder200Response} The populated <code>ProductOrder200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductOrder200Response();

            if (data.hasOwnProperty('identity')) {
                obj['identity'] = ApiClient.convertToType(data['identity'], 'String');
            }
            if (data.hasOwnProperty('option')) {
                obj['option'] = ApiClient.convertToType(data['option'], 'String');
            }
            if (data.hasOwnProperty('ordered')) {
                obj['ordered'] = Object.constructFromObject(data['ordered']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'String');
            }
            if (data.hasOwnProperty('subjectValue')) {
                obj['subjectValue'] = ApiClient.convertToType(data['subjectValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductOrder200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductOrder200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductOrder200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['identity'] && !(typeof data['identity'] === 'string' || data['identity'] instanceof String)) {
            throw new Error("Expected the field `identity` to be a primitive type in the JSON string but got " + data['identity']);
        }
        // ensure the json data is a string
        if (data['option'] && !(typeof data['option'] === 'string' || data['option'] instanceof String)) {
            throw new Error("Expected the field `option` to be a primitive type in the JSON string but got " + data['option']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subjectId'] && !(typeof data['subjectId'] === 'string' || data['subjectId'] instanceof String)) {
            throw new Error("Expected the field `subjectId` to be a primitive type in the JSON string but got " + data['subjectId']);
        }
        // ensure the json data is a string
        if (data['subjectValue'] && !(typeof data['subjectValue'] === 'string' || data['subjectValue'] instanceof String)) {
            throw new Error("Expected the field `subjectValue` to be a primitive type in the JSON string but got " + data['subjectValue']);
        }

        return true;
    }


}

ProductOrder200Response.RequiredProperties = ["identity", "option", "ordered", "owner", "price", "sku", "status", "subjectId", "subjectValue"];

/**
 * @member {String} identity
 */
ProductOrder200Response.prototype['identity'] = undefined;

/**
 * @member {String} option
 */
ProductOrder200Response.prototype['option'] = undefined;

/**
 * @member {Object} ordered
 */
ProductOrder200Response.prototype['ordered'] = undefined;

/**
 * @member {String} owner
 */
ProductOrder200Response.prototype['owner'] = undefined;

/**
 * @member {Number} price
 */
ProductOrder200Response.prototype['price'] = undefined;

/**
 * @member {String} sku
 */
ProductOrder200Response.prototype['sku'] = undefined;

/**
 * @member {String} status
 */
ProductOrder200Response.prototype['status'] = undefined;

/**
 * @member {String} subjectId
 */
ProductOrder200Response.prototype['subjectId'] = undefined;

/**
 * @member {String} subjectValue
 */
ProductOrder200Response.prototype['subjectValue'] = undefined;






export default ProductOrder200Response;

