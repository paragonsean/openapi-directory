/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompanySearchName200ResponseInner model module.
 * @module model/CompanySearchName200ResponseInner
 * @version 2021.12
 */
class CompanySearchName200ResponseInner {
    /**
     * Constructs a new <code>CompanySearchName200ResponseInner</code>.
     * @alias module:model/CompanySearchName200ResponseInner
     */
    constructor() { 
        
        CompanySearchName200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanySearchName200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanySearchName200ResponseInner} obj Optional instance to populate.
     * @return {module:model/CompanySearchName200ResponseInner} The populated <code>CompanySearchName200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanySearchName200ResponseInner();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('dateOfIncorporation')) {
                obj['dateOfIncorporation'] = ApiClient.convertToType(data['dateOfIncorporation'], 'String');
            }
            if (data.hasOwnProperty('extraData')) {
                obj['extraData'] = ApiClient.convertToType(data['extraData'], Object);
            }
            if (data.hasOwnProperty('formattedAddress')) {
                obj['formattedAddress'] = ApiClient.convertToType(data['formattedAddress'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('legalForm')) {
                obj['legalForm'] = ApiClient.convertToType(data['legalForm'], 'String');
            }
            if (data.hasOwnProperty('managingDirectors')) {
                obj['managingDirectors'] = ApiClient.convertToType(data['managingDirectors'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('requestTime')) {
                obj['requestTime'] = ApiClient.convertToType(data['requestTime'], 'Number');
            }
            if (data.hasOwnProperty('secretaries')) {
                obj['secretaries'] = ApiClient.convertToType(data['secretaries'], ['String']);
            }
            if (data.hasOwnProperty('sicNaceCodes')) {
                obj['sicNaceCodes'] = ApiClient.convertToType(data['sicNaceCodes'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanySearchName200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanySearchName200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['address'])) {
            throw new Error("Expected the field `address` to be an array in the JSON data but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['dateOfIncorporation'] && !(typeof data['dateOfIncorporation'] === 'string' || data['dateOfIncorporation'] instanceof String)) {
            throw new Error("Expected the field `dateOfIncorporation` to be a primitive type in the JSON string but got " + data['dateOfIncorporation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['formattedAddress'])) {
            throw new Error("Expected the field `formattedAddress` to be an array in the JSON data but got " + data['formattedAddress']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['legalForm'] && !(typeof data['legalForm'] === 'string' || data['legalForm'] instanceof String)) {
            throw new Error("Expected the field `legalForm` to be a primitive type in the JSON string but got " + data['legalForm']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['managingDirectors'])) {
            throw new Error("Expected the field `managingDirectors` to be an array in the JSON data but got " + data['managingDirectors']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secretaries'])) {
            throw new Error("Expected the field `secretaries` to be an array in the JSON data but got " + data['secretaries']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sicNaceCodes'])) {
            throw new Error("Expected the field `sicNaceCodes` to be an array in the JSON data but got " + data['sicNaceCodes']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} address
 */
CompanySearchName200ResponseInner.prototype['address'] = undefined;

/**
 * @member {String} country
 */
CompanySearchName200ResponseInner.prototype['country'] = undefined;

/**
 * @member {String} dateOfIncorporation
 */
CompanySearchName200ResponseInner.prototype['dateOfIncorporation'] = undefined;

/**
 * @member {Object} extraData
 */
CompanySearchName200ResponseInner.prototype['extraData'] = undefined;

/**
 * @member {Array.<String>} formattedAddress
 */
CompanySearchName200ResponseInner.prototype['formattedAddress'] = undefined;

/**
 * @member {String} id
 */
CompanySearchName200ResponseInner.prototype['id'] = undefined;

/**
 * @member {String} legalForm
 */
CompanySearchName200ResponseInner.prototype['legalForm'] = undefined;

/**
 * @member {Array.<String>} managingDirectors
 */
CompanySearchName200ResponseInner.prototype['managingDirectors'] = undefined;

/**
 * @member {String} name
 */
CompanySearchName200ResponseInner.prototype['name'] = undefined;

/**
 * @member {String} registrationNumber
 */
CompanySearchName200ResponseInner.prototype['registrationNumber'] = undefined;

/**
 * @member {Number} requestTime
 */
CompanySearchName200ResponseInner.prototype['requestTime'] = undefined;

/**
 * @member {Array.<String>} secretaries
 */
CompanySearchName200ResponseInner.prototype['secretaries'] = undefined;

/**
 * @member {Array.<String>} sicNaceCodes
 */
CompanySearchName200ResponseInner.prototype['sicNaceCodes'] = undefined;

/**
 * @member {String} status
 */
CompanySearchName200ResponseInner.prototype['status'] = undefined;






export default CompanySearchName200ResponseInner;

