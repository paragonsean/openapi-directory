/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductAvailability200Response model module.
 * @module model/ProductAvailability200Response
 * @version 2021.12
 */
class ProductAvailability200Response {
    /**
     * Constructs a new <code>ProductAvailability200Response</code>.
     * @alias module:model/ProductAvailability200Response
     * @param availability {String} 
     * @param category {String} 
     * @param countryCode {String} 
     * @param description {String} 
     * @param hasOptions {Boolean} 
     * @param options {Array.<String>} 
     * @param price {Number} 
     * @param provider {String} 
     * @param sku {String} 
     * @param type {String} 
     */
    constructor(availability, category, countryCode, description, hasOptions, options, price, provider, sku, type) { 
        
        ProductAvailability200Response.initialize(this, availability, category, countryCode, description, hasOptions, options, price, provider, sku, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availability, category, countryCode, description, hasOptions, options, price, provider, sku, type) { 
        obj['availability'] = availability;
        obj['category'] = category;
        obj['countryCode'] = countryCode;
        obj['description'] = description;
        obj['hasOptions'] = hasOptions;
        obj['options'] = options;
        obj['price'] = price;
        obj['provider'] = provider;
        obj['sku'] = sku;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ProductAvailability200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductAvailability200Response} obj Optional instance to populate.
     * @return {module:model/ProductAvailability200Response} The populated <code>ProductAvailability200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductAvailability200Response();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hasOptions')) {
                obj['hasOptions'] = ApiClient.convertToType(data['hasOptions'], 'Boolean');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductAvailability200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductAvailability200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductAvailability200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ProductAvailability200Response.RequiredProperties = ["availability", "category", "countryCode", "description", "hasOptions", "options", "price", "provider", "sku", "type"];

/**
 * @member {String} availability
 */
ProductAvailability200Response.prototype['availability'] = undefined;

/**
 * @member {String} category
 */
ProductAvailability200Response.prototype['category'] = undefined;

/**
 * @member {String} countryCode
 */
ProductAvailability200Response.prototype['countryCode'] = undefined;

/**
 * @member {String} description
 */
ProductAvailability200Response.prototype['description'] = undefined;

/**
 * @member {Boolean} hasOptions
 */
ProductAvailability200Response.prototype['hasOptions'] = undefined;

/**
 * @member {Array.<String>} options
 */
ProductAvailability200Response.prototype['options'] = undefined;

/**
 * @member {Number} price
 */
ProductAvailability200Response.prototype['price'] = undefined;

/**
 * @member {String} provider
 */
ProductAvailability200Response.prototype['provider'] = undefined;

/**
 * @member {String} sku
 */
ProductAvailability200Response.prototype['sku'] = undefined;

/**
 * @member {String} type
 */
ProductAvailability200Response.prototype['type'] = undefined;






export default ProductAvailability200Response;

