/**
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KycApiDocumentation);
  }
}(this, function(expect, KycApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KycApiDocumentation.V1ProductApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('V1ProductApi', function() {
    describe('productAvailability', function() {
      it('should call productAvailability successfully', function(done) {
        //uncomment below and update the code to test productAvailability
        //instance.productAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productCatalog', function() {
      it('should call productCatalog successfully', function(done) {
        //uncomment below and update the code to test productCatalog
        //instance.productCatalog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productNotifier', function() {
      it('should call productNotifier successfully', function(done) {
        //uncomment below and update the code to test productNotifier
        //instance.productNotifier(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productNotifierCreate', function() {
      it('should call productNotifierCreate successfully', function(done) {
        //uncomment below and update the code to test productNotifierCreate
        //instance.productNotifierCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productOrder', function() {
      it('should call productOrder successfully', function(done) {
        //uncomment below and update the code to test productOrder
        //instance.productOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productOrderConcierge', function() {
      it('should call productOrderConcierge successfully', function(done) {
        //uncomment below and update the code to test productOrderConcierge
        //instance.productOrderConcierge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productOrderUbo', function() {
      it('should call productOrderUbo successfully', function(done) {
        //uncomment below and update the code to test productOrderUbo
        //instance.productOrderUbo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productOrderWithOption', function() {
      it('should call productOrderWithOption successfully', function(done) {
        //uncomment below and update the code to test productOrderWithOption
        //instance.productOrderWithOption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productRetrieve', function() {
      it('should call productRetrieve successfully', function(done) {
        //uncomment below and update the code to test productRetrieve
        //instance.productRetrieve(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearch', function() {
      it('should call productSearch successfully', function(done) {
        //uncomment below and update the code to test productSearch
        //instance.productSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productStatus', function() {
      it('should call productStatus successfully', function(done) {
        //uncomment below and update the code to test productStatus
        //instance.productStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productUpdateAction', function() {
      it('should call productUpdateAction successfully', function(done) {
        //uncomment below and update the code to test productUpdateAction
        //instance.productUpdateAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
