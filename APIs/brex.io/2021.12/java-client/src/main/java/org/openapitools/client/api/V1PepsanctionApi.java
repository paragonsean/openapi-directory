/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PepMonitorList200ResponseInner;
import org.openapitools.client.model.PepRetrieve200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1PepsanctionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1PepsanctionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1PepsanctionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pepMonitorList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View Pep Sanction Report monitors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepMonitorListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pepsanction/monitor/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pepMonitorListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return pepMonitorListCall(_callback);

    }

    /**
     * Retrieves a list of monitor entries
     * Retrieve a list of all active Pep Sanction Report monitors for this account
     * @return List&lt;PepMonitorList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View Pep Sanction Report monitors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PepMonitorList200ResponseInner> pepMonitorList() throws ApiException {
        ApiResponse<List<PepMonitorList200ResponseInner>> localVarResp = pepMonitorListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of monitor entries
     * Retrieve a list of all active Pep Sanction Report monitors for this account
     * @return ApiResponse&lt;List&lt;PepMonitorList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View Pep Sanction Report monitors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PepMonitorList200ResponseInner>> pepMonitorListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pepMonitorListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PepMonitorList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of monitor entries (asynchronously)
     * Retrieve a list of all active Pep Sanction Report monitors for this account
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View Pep Sanction Report monitors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepMonitorListAsync(final ApiCallback<List<PepMonitorList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pepMonitorListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PepMonitorList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pepMonitorUnregister
     * @param id The identifier of the Monitor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepMonitorUnregisterCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pepsanction/monitor/unregister/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pepMonitorUnregisterValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pepMonitorUnregister(Async)");
        }

        return pepMonitorUnregisterCall(id, _callback);

    }

    /**
     * Deactive a pep sanction monitor
     * Unregister a previously created Pep Sanction Report Monitor
     * @param id The identifier of the Monitor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void pepMonitorUnregister(String id) throws ApiException {
        pepMonitorUnregisterWithHttpInfo(id);
    }

    /**
     * Deactive a pep sanction monitor
     * Unregister a previously created Pep Sanction Report Monitor
     * @param id The identifier of the Monitor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pepMonitorUnregisterWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = pepMonitorUnregisterValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deactive a pep sanction monitor (asynchronously)
     * Unregister a previously created Pep Sanction Report Monitor
     * @param id The identifier of the Monitor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepMonitorUnregisterAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pepMonitorUnregisterValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pepMonitorUpdate
     * @param id The identifier of the Monitor (required)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View a monitor for a Pep Sanction Report </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepMonitorUpdateCall(String id, String webhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pepsanction/monitor/update/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webhook != null) {
            localVarFormParams.put("Webhook", webhook);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pepMonitorUpdateValidateBeforeCall(String id, String webhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pepMonitorUpdate(Async)");
        }

        return pepMonitorUpdateCall(id, webhook, _callback);

    }

    /**
     * Update details of active Pep Sanction monitor
     * Update the webhook URL of an active Pep Sanction Report Monitor
     * @param id The identifier of the Monitor (required)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @return PepMonitorList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View a monitor for a Pep Sanction Report </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PepMonitorList200ResponseInner pepMonitorUpdate(String id, String webhook) throws ApiException {
        ApiResponse<PepMonitorList200ResponseInner> localVarResp = pepMonitorUpdateWithHttpInfo(id, webhook);
        return localVarResp.getData();
    }

    /**
     * Update details of active Pep Sanction monitor
     * Update the webhook URL of an active Pep Sanction Report Monitor
     * @param id The identifier of the Monitor (required)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @return ApiResponse&lt;PepMonitorList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View a monitor for a Pep Sanction Report </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PepMonitorList200ResponseInner> pepMonitorUpdateWithHttpInfo(String id, String webhook) throws ApiException {
        okhttp3.Call localVarCall = pepMonitorUpdateValidateBeforeCall(id, webhook, null);
        Type localVarReturnType = new TypeToken<PepMonitorList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update details of active Pep Sanction monitor (asynchronously)
     * Update the webhook URL of an active Pep Sanction Report Monitor
     * @param id The identifier of the Monitor (required)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View a monitor for a Pep Sanction Report </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepMonitorUpdateAsync(String id, String webhook, final ApiCallback<PepMonitorList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = pepMonitorUpdateValidateBeforeCall(id, webhook, _callback);
        Type localVarReturnType = new TypeToken<PepMonitorList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pepOrder
     * @param type Type (Business or Person) of the requested Pep Sanction Check (required)
     * @param search Search string for the Pep Sanction Check (required)
     * @param aliases Optional parameter for declaring alias names when doing a person search (seperated by commas) (optional)
     * @param country Optional name of Country to assist in identifying matches based upon location/geography. (optional)
     * @param DOB Optional parameter for date of birth name when doing a person search (optional)
     * @param familyName Optional parameter for last name when doing a person search (optional)
     * @param filters Optional parameter for restricting search when doing a person search (seperated by commas) (optional)
     * @param givenName Optional parameter for first name when doing a person search (optional)
     * @param LEI Optional Legal Entity Identifier for additional business identifier verification. (optional)
     * @param locale Optional name of City or Locale to assist in identifying matches based upon location/geography. (optional)
     * @param medialists Optional parameter for selecting only specific media lists. By default all lists are queried (optional)
     * @param middleName Optional parameter for middle name when doing a person search (optional)
     * @param monitoring If this Pep Sanction Check should be continuesly monitored. (optional)
     * @param peplists Optional parameter for selecting only specific pep lists. By default all lists are queried (optional)
     * @param region Optional name of Region or State to assist in identifying matches based upon location/geography. (optional)
     * @param smartMatch Optional parameter for enabling SmartMatch to retrieve more results (optional)
     * @param watchlists Optional parameter for selecting only specific watch lists. By default all lists are queried (optional)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepOrderCall(String type, String search, String aliases, String country, String DOB, String familyName, String filters, String givenName, String LEI, String locale, String medialists, String middleName, Boolean monitoring, String peplists, String region, Boolean smartMatch, String watchlists, String webhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pepsanction/order/{type}/{search}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "search" + "}", localVarApiClient.escapeString(search.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aliases != null) {
            localVarFormParams.put("Aliases", aliases);
        }

        if (country != null) {
            localVarFormParams.put("Country", country);
        }

        if (DOB != null) {
            localVarFormParams.put("DOB", DOB);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (filters != null) {
            localVarFormParams.put("Filters", filters);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (LEI != null) {
            localVarFormParams.put("LEI", LEI);
        }

        if (locale != null) {
            localVarFormParams.put("Locale", locale);
        }

        if (medialists != null) {
            localVarFormParams.put("Medialists", medialists);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (monitoring != null) {
            localVarFormParams.put("Monitoring", monitoring);
        }

        if (peplists != null) {
            localVarFormParams.put("Peplists", peplists);
        }

        if (region != null) {
            localVarFormParams.put("Region", region);
        }

        if (smartMatch != null) {
            localVarFormParams.put("SmartMatch", smartMatch);
        }

        if (watchlists != null) {
            localVarFormParams.put("Watchlists", watchlists);
        }

        if (webhook != null) {
            localVarFormParams.put("Webhook", webhook);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pepOrderValidateBeforeCall(String type, String search, String aliases, String country, String DOB, String familyName, String filters, String givenName, String LEI, String locale, String medialists, String middleName, Boolean monitoring, String peplists, String region, Boolean smartMatch, String watchlists, String webhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling pepOrder(Async)");
        }

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling pepOrder(Async)");
        }

        return pepOrderCall(type, search, aliases, country, DOB, familyName, filters, givenName, LEI, locale, medialists, middleName, monitoring, peplists, region, smartMatch, watchlists, webhook, _callback);

    }

    /**
     * Orders a new Pep Sanction Check Report
     * Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
     * @param type Type (Business or Person) of the requested Pep Sanction Check (required)
     * @param search Search string for the Pep Sanction Check (required)
     * @param aliases Optional parameter for declaring alias names when doing a person search (seperated by commas) (optional)
     * @param country Optional name of Country to assist in identifying matches based upon location/geography. (optional)
     * @param DOB Optional parameter for date of birth name when doing a person search (optional)
     * @param familyName Optional parameter for last name when doing a person search (optional)
     * @param filters Optional parameter for restricting search when doing a person search (seperated by commas) (optional)
     * @param givenName Optional parameter for first name when doing a person search (optional)
     * @param LEI Optional Legal Entity Identifier for additional business identifier verification. (optional)
     * @param locale Optional name of City or Locale to assist in identifying matches based upon location/geography. (optional)
     * @param medialists Optional parameter for selecting only specific media lists. By default all lists are queried (optional)
     * @param middleName Optional parameter for middle name when doing a person search (optional)
     * @param monitoring If this Pep Sanction Check should be continuesly monitored. (optional)
     * @param peplists Optional parameter for selecting only specific pep lists. By default all lists are queried (optional)
     * @param region Optional name of Region or State to assist in identifying matches based upon location/geography. (optional)
     * @param smartMatch Optional parameter for enabling SmartMatch to retrieve more results (optional)
     * @param watchlists Optional parameter for selecting only specific watch lists. By default all lists are queried (optional)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void pepOrder(String type, String search, String aliases, String country, String DOB, String familyName, String filters, String givenName, String LEI, String locale, String medialists, String middleName, Boolean monitoring, String peplists, String region, Boolean smartMatch, String watchlists, String webhook) throws ApiException {
        pepOrderWithHttpInfo(type, search, aliases, country, DOB, familyName, filters, givenName, LEI, locale, medialists, middleName, monitoring, peplists, region, smartMatch, watchlists, webhook);
    }

    /**
     * Orders a new Pep Sanction Check Report
     * Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
     * @param type Type (Business or Person) of the requested Pep Sanction Check (required)
     * @param search Search string for the Pep Sanction Check (required)
     * @param aliases Optional parameter for declaring alias names when doing a person search (seperated by commas) (optional)
     * @param country Optional name of Country to assist in identifying matches based upon location/geography. (optional)
     * @param DOB Optional parameter for date of birth name when doing a person search (optional)
     * @param familyName Optional parameter for last name when doing a person search (optional)
     * @param filters Optional parameter for restricting search when doing a person search (seperated by commas) (optional)
     * @param givenName Optional parameter for first name when doing a person search (optional)
     * @param LEI Optional Legal Entity Identifier for additional business identifier verification. (optional)
     * @param locale Optional name of City or Locale to assist in identifying matches based upon location/geography. (optional)
     * @param medialists Optional parameter for selecting only specific media lists. By default all lists are queried (optional)
     * @param middleName Optional parameter for middle name when doing a person search (optional)
     * @param monitoring If this Pep Sanction Check should be continuesly monitored. (optional)
     * @param peplists Optional parameter for selecting only specific pep lists. By default all lists are queried (optional)
     * @param region Optional name of Region or State to assist in identifying matches based upon location/geography. (optional)
     * @param smartMatch Optional parameter for enabling SmartMatch to retrieve more results (optional)
     * @param watchlists Optional parameter for selecting only specific watch lists. By default all lists are queried (optional)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pepOrderWithHttpInfo(String type, String search, String aliases, String country, String DOB, String familyName, String filters, String givenName, String LEI, String locale, String medialists, String middleName, Boolean monitoring, String peplists, String region, Boolean smartMatch, String watchlists, String webhook) throws ApiException {
        okhttp3.Call localVarCall = pepOrderValidateBeforeCall(type, search, aliases, country, DOB, familyName, filters, givenName, LEI, locale, medialists, middleName, monitoring, peplists, region, smartMatch, watchlists, webhook, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Orders a new Pep Sanction Check Report (asynchronously)
     * Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
     * @param type Type (Business or Person) of the requested Pep Sanction Check (required)
     * @param search Search string for the Pep Sanction Check (required)
     * @param aliases Optional parameter for declaring alias names when doing a person search (seperated by commas) (optional)
     * @param country Optional name of Country to assist in identifying matches based upon location/geography. (optional)
     * @param DOB Optional parameter for date of birth name when doing a person search (optional)
     * @param familyName Optional parameter for last name when doing a person search (optional)
     * @param filters Optional parameter for restricting search when doing a person search (seperated by commas) (optional)
     * @param givenName Optional parameter for first name when doing a person search (optional)
     * @param LEI Optional Legal Entity Identifier for additional business identifier verification. (optional)
     * @param locale Optional name of City or Locale to assist in identifying matches based upon location/geography. (optional)
     * @param medialists Optional parameter for selecting only specific media lists. By default all lists are queried (optional)
     * @param middleName Optional parameter for middle name when doing a person search (optional)
     * @param monitoring If this Pep Sanction Check should be continuesly monitored. (optional)
     * @param peplists Optional parameter for selecting only specific pep lists. By default all lists are queried (optional)
     * @param region Optional name of Region or State to assist in identifying matches based upon location/geography. (optional)
     * @param smartMatch Optional parameter for enabling SmartMatch to retrieve more results (optional)
     * @param watchlists Optional parameter for selecting only specific watch lists. By default all lists are queried (optional)
     * @param webhook If Monitoring is enabled this parameter is required. This is where updates will be sent to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepOrderAsync(String type, String search, String aliases, String country, String DOB, String familyName, String filters, String givenName, String LEI, String locale, String medialists, String middleName, Boolean monitoring, String peplists, String region, Boolean smartMatch, String watchlists, String webhook, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pepOrderValidateBeforeCall(type, search, aliases, country, DOB, familyName, filters, givenName, LEI, locale, medialists, middleName, monitoring, peplists, region, smartMatch, watchlists, webhook, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pepRetrieve
     * @param id The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call) (required)
     * @param accept The type (pdf or json) in which the check should be returned (optional, default to application/json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a PEP and sanctions list check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepRetrieveCall(String id, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pepsanction/retrieve/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pepRetrieveValidateBeforeCall(String id, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pepRetrieve(Async)");
        }

        return pepRetrieveCall(id, accept, _callback);

    }

    /**
     * Returns a json or pdf report
     * Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
     * @param id The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call) (required)
     * @param accept The type (pdf or json) in which the check should be returned (optional, default to application/json)
     * @return PepRetrieve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a PEP and sanctions list check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PepRetrieve200Response pepRetrieve(String id, String accept) throws ApiException {
        ApiResponse<PepRetrieve200Response> localVarResp = pepRetrieveWithHttpInfo(id, accept);
        return localVarResp.getData();
    }

    /**
     * Returns a json or pdf report
     * Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
     * @param id The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call) (required)
     * @param accept The type (pdf or json) in which the check should be returned (optional, default to application/json)
     * @return ApiResponse&lt;PepRetrieve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a PEP and sanctions list check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PepRetrieve200Response> pepRetrieveWithHttpInfo(String id, String accept) throws ApiException {
        okhttp3.Call localVarCall = pepRetrieveValidateBeforeCall(id, accept, null);
        Type localVarReturnType = new TypeToken<PepRetrieve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a json or pdf report (asynchronously)
     * Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
     * @param id The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call) (required)
     * @param accept The type (pdf or json) in which the check should be returned (optional, default to application/json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a PEP and sanctions list check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pepRetrieveAsync(String id, String accept, final ApiCallback<PepRetrieve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pepRetrieveValidateBeforeCall(id, accept, _callback);
        Type localVarReturnType = new TypeToken<PepRetrieve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
