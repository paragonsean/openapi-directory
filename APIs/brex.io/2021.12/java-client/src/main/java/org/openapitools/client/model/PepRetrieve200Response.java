/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PepRetrieve200ResponseResults;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PepRetrieve200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:26.420924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PepRetrieve200Response {
  public static final String SERIALIZED_NAME_LISTS_CHECKED = "listsChecked";
  @SerializedName(SERIALIZED_NAME_LISTS_CHECKED)
  private String listsChecked;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private PepRetrieve200ResponseResults results;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private String search;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Object timestamp = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public PepRetrieve200Response() {
  }

  public PepRetrieve200Response listsChecked(String listsChecked) {
    this.listsChecked = listsChecked;
    return this;
  }

  /**
   * Get listsChecked
   * @return listsChecked
   */
  @javax.annotation.Nonnull
  public String getListsChecked() {
    return listsChecked;
  }

  public void setListsChecked(String listsChecked) {
    this.listsChecked = listsChecked;
  }


  public PepRetrieve200Response results(PepRetrieve200ResponseResults results) {
    this.results = results;
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public PepRetrieve200ResponseResults getResults() {
    return results;
  }

  public void setResults(PepRetrieve200ResponseResults results) {
    this.results = results;
  }


  public PepRetrieve200Response search(String search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nonnull
  public String getSearch() {
    return search;
  }

  public void setSearch(String search) {
    this.search = search;
  }


  public PepRetrieve200Response status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PepRetrieve200Response timestamp(Object timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public Object getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Object timestamp) {
    this.timestamp = timestamp;
  }


  public PepRetrieve200Response type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PepRetrieve200Response pepRetrieve200Response = (PepRetrieve200Response) o;
    return Objects.equals(this.listsChecked, pepRetrieve200Response.listsChecked) &&
        Objects.equals(this.results, pepRetrieve200Response.results) &&
        Objects.equals(this.search, pepRetrieve200Response.search) &&
        Objects.equals(this.status, pepRetrieve200Response.status) &&
        Objects.equals(this.timestamp, pepRetrieve200Response.timestamp) &&
        Objects.equals(this.type, pepRetrieve200Response.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listsChecked, results, search, status, timestamp, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PepRetrieve200Response {\n");
    sb.append("    listsChecked: ").append(toIndentedString(listsChecked)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("listsChecked");
    openapiFields.add("results");
    openapiFields.add("search");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("listsChecked");
    openapiRequiredFields.add("search");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PepRetrieve200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PepRetrieve200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PepRetrieve200Response is not found in the empty JSON string", PepRetrieve200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PepRetrieve200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PepRetrieve200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PepRetrieve200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("listsChecked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listsChecked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listsChecked").toString()));
      }
      // validate the optional field `results`
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        PepRetrieve200ResponseResults.validateJsonElement(jsonObj.get("results"));
      }
      if (!jsonObj.get("search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PepRetrieve200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PepRetrieve200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PepRetrieve200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PepRetrieve200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<PepRetrieve200Response>() {
           @Override
           public void write(JsonWriter out, PepRetrieve200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PepRetrieve200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PepRetrieve200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PepRetrieve200Response
   * @throws IOException if the JSON string is invalid with respect to PepRetrieve200Response
   */
  public static PepRetrieve200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PepRetrieve200Response.class);
  }

  /**
   * Convert an instance of PepRetrieve200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

