/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VatBasic200Response;
import org.openapitools.client.model.VatLevelTwo200Response;
import org.openapitools.client.model.VatLookup200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1VatVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1VatVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1VatVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vatBasic
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes validity of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatBasicCall(String country, String vatNumber, String companyAddress, String companyName, String companyNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vat-verification/basic-check/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyAddress != null) {
            localVarFormParams.put("companyAddress", companyAddress);
        }

        if (companyName != null) {
            localVarFormParams.put("companyName", companyName);
        }

        if (companyNumber != null) {
            localVarFormParams.put("companyNumber", companyNumber);
        }

        if (vatNumber != null) {
            localVarFormParams.put("vatNumber", vatNumber);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatBasicValidateBeforeCall(String country, String vatNumber, String companyAddress, String companyName, String companyNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling vatBasic(Async)");
        }

        // verify the required parameter 'vatNumber' is set
        if (vatNumber == null) {
            throw new ApiException("Missing the required parameter 'vatNumber' when calling vatBasic(Async)");
        }

        return vatBasicCall(country, vatNumber, companyAddress, companyName, companyNumber, _callback);

    }

    /**
     * Returns a verification result
     * Basic verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @return VatBasic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes validity of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VatBasic200Response vatBasic(String country, String vatNumber, String companyAddress, String companyName, String companyNumber) throws ApiException {
        ApiResponse<VatBasic200Response> localVarResp = vatBasicWithHttpInfo(country, vatNumber, companyAddress, companyName, companyNumber);
        return localVarResp.getData();
    }

    /**
     * Returns a verification result
     * Basic verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @return ApiResponse&lt;VatBasic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes validity of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VatBasic200Response> vatBasicWithHttpInfo(String country, String vatNumber, String companyAddress, String companyName, String companyNumber) throws ApiException {
        okhttp3.Call localVarCall = vatBasicValidateBeforeCall(country, vatNumber, companyAddress, companyName, companyNumber, null);
        Type localVarReturnType = new TypeToken<VatBasic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a verification result (asynchronously)
     * Basic verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes validity of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatBasicAsync(String country, String vatNumber, String companyAddress, String companyName, String companyNumber, final ApiCallback<VatBasic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatBasicValidateBeforeCall(country, vatNumber, companyAddress, companyName, companyNumber, _callback);
        Type localVarReturnType = new TypeToken<VatBasic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatComprehensive
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatComprehensiveCall(String country, String vatNumber, String companyAddress, String companyName, String companyNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vat-verification/comprehensive-check/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyAddress != null) {
            localVarFormParams.put("companyAddress", companyAddress);
        }

        if (companyName != null) {
            localVarFormParams.put("companyName", companyName);
        }

        if (companyNumber != null) {
            localVarFormParams.put("companyNumber", companyNumber);
        }

        if (vatNumber != null) {
            localVarFormParams.put("vatNumber", vatNumber);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatComprehensiveValidateBeforeCall(String country, String vatNumber, String companyAddress, String companyName, String companyNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling vatComprehensive(Async)");
        }

        // verify the required parameter 'vatNumber' is set
        if (vatNumber == null) {
            throw new ApiException("Missing the required parameter 'vatNumber' when calling vatComprehensive(Async)");
        }

        return vatComprehensiveCall(country, vatNumber, companyAddress, companyName, companyNumber, _callback);

    }

    /**
     * Returns a verification result and company data
     * Extended verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void vatComprehensive(String country, String vatNumber, String companyAddress, String companyName, String companyNumber) throws ApiException {
        vatComprehensiveWithHttpInfo(country, vatNumber, companyAddress, companyName, companyNumber);
    }

    /**
     * Returns a verification result and company data
     * Extended verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vatComprehensiveWithHttpInfo(String country, String vatNumber, String companyAddress, String companyName, String companyNumber) throws ApiException {
        okhttp3.Call localVarCall = vatComprehensiveValidateBeforeCall(country, vatNumber, companyAddress, companyName, companyNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a verification result and company data (asynchronously)
     * Extended verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param companyNumber official company number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatComprehensiveAsync(String country, String vatNumber, String companyAddress, String companyName, String companyNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatComprehensiveValidateBeforeCall(country, vatNumber, companyAddress, companyName, companyNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatLevelTwo
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param confirmation If a confirmation document should be ordered (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes second level validity result of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatLevelTwoCall(String country, String vatNumber, Boolean confirmation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vat-verification/leveltwo-check/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirmation != null) {
            localVarFormParams.put("confirmation", confirmation);
        }

        if (vatNumber != null) {
            localVarFormParams.put("vatNumber", vatNumber);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatLevelTwoValidateBeforeCall(String country, String vatNumber, Boolean confirmation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling vatLevelTwo(Async)");
        }

        // verify the required parameter 'vatNumber' is set
        if (vatNumber == null) {
            throw new ApiException("Missing the required parameter 'vatNumber' when calling vatLevelTwo(Async)");
        }

        return vatLevelTwoCall(country, vatNumber, confirmation, _callback);

    }

    /**
     * Returns a level two verification result
     * Second Level Verification of VAT number against BMF Austria. Optional confirmation parameter can be provided to order a Confirmation Report.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param confirmation If a confirmation document should be ordered (optional)
     * @return VatLevelTwo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes second level validity result of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VatLevelTwo200Response vatLevelTwo(String country, String vatNumber, Boolean confirmation) throws ApiException {
        ApiResponse<VatLevelTwo200Response> localVarResp = vatLevelTwoWithHttpInfo(country, vatNumber, confirmation);
        return localVarResp.getData();
    }

    /**
     * Returns a level two verification result
     * Second Level Verification of VAT number against BMF Austria. Optional confirmation parameter can be provided to order a Confirmation Report.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param confirmation If a confirmation document should be ordered (optional)
     * @return ApiResponse&lt;VatLevelTwo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes second level validity result of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VatLevelTwo200Response> vatLevelTwoWithHttpInfo(String country, String vatNumber, Boolean confirmation) throws ApiException {
        okhttp3.Call localVarCall = vatLevelTwoValidateBeforeCall(country, vatNumber, confirmation, null);
        Type localVarReturnType = new TypeToken<VatLevelTwo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a level two verification result (asynchronously)
     * Second Level Verification of VAT number against BMF Austria. Optional confirmation parameter can be provided to order a Confirmation Report.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param vatNumber VAT number to validate (required)
     * @param confirmation If a confirmation document should be ordered (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Denotes second level validity result of checked VAT </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatLevelTwoAsync(String country, String vatNumber, Boolean confirmation, final ApiCallback<VatLevelTwo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatLevelTwoValidateBeforeCall(country, vatNumber, confirmation, _callback);
        Type localVarReturnType = new TypeToken<VatLevelTwo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatLookup
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param name Company name (required)
     * @param address Company address (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a VAT number reverse Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatLookupCall(String country, String name, String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vat-verification/lookup/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarFormParams.put("address", address);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatLookupValidateBeforeCall(String country, String name, String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling vatLookup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling vatLookup(Async)");
        }

        return vatLookupCall(country, name, address, _callback);

    }

    /**
     * Returns a list of vat numbers with additional data
     * Reverse VAT Lookup: Search for companies and their VAT numbers by company name. Search is forwarded to a provider.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param name Company name (required)
     * @param address Company address (optional)
     * @return VatLookup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a VAT number reverse Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VatLookup200Response vatLookup(String country, String name, String address) throws ApiException {
        ApiResponse<VatLookup200Response> localVarResp = vatLookupWithHttpInfo(country, name, address);
        return localVarResp.getData();
    }

    /**
     * Returns a list of vat numbers with additional data
     * Reverse VAT Lookup: Search for companies and their VAT numbers by company name. Search is forwarded to a provider.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param name Company name (required)
     * @param address Company address (optional)
     * @return ApiResponse&lt;VatLookup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a VAT number reverse Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VatLookup200Response> vatLookupWithHttpInfo(String country, String name, String address) throws ApiException {
        okhttp3.Call localVarCall = vatLookupValidateBeforeCall(country, name, address, null);
        Type localVarReturnType = new TypeToken<VatLookup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of vat numbers with additional data (asynchronously)
     * Reverse VAT Lookup: Search for companies and their VAT numbers by company name. Search is forwarded to a provider.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param name Company name (required)
     * @param address Company address (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a VAT number reverse Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatLookupAsync(String country, String name, String address, final ApiCallback<VatLookup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatLookupValidateBeforeCall(country, name, address, _callback);
        Type localVarReturnType = new TypeToken<VatLookup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
