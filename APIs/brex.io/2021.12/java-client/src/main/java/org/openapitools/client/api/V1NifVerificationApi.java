/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NifBasic200Response;
import org.openapitools.client.model.NifComprehensive200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1NifVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1NifVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1NifVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for nifBasic
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nifBasicCall(String country, String nifNumber, String companyAddress, String companyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/nif-verification/basic-check/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyAddress != null) {
            localVarFormParams.put("companyAddress", companyAddress);
        }

        if (companyName != null) {
            localVarFormParams.put("companyName", companyName);
        }

        if (nifNumber != null) {
            localVarFormParams.put("nifNumber", nifNumber);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nifBasicValidateBeforeCall(String country, String nifNumber, String companyAddress, String companyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling nifBasic(Async)");
        }

        // verify the required parameter 'nifNumber' is set
        if (nifNumber == null) {
            throw new ApiException("Missing the required parameter 'nifNumber' when calling nifBasic(Async)");
        }

        return nifBasicCall(country, nifNumber, companyAddress, companyName, _callback);

    }

    /**
     * Verifies a NIF number
     * Performs a basic verification check of a given NIF tax number against NIF.com. Optional parameters may be added to improve calculation of confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @return NifBasic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NifBasic200Response nifBasic(String country, String nifNumber, String companyAddress, String companyName) throws ApiException {
        ApiResponse<NifBasic200Response> localVarResp = nifBasicWithHttpInfo(country, nifNumber, companyAddress, companyName);
        return localVarResp.getData();
    }

    /**
     * Verifies a NIF number
     * Performs a basic verification check of a given NIF tax number against NIF.com. Optional parameters may be added to improve calculation of confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @return ApiResponse&lt;NifBasic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NifBasic200Response> nifBasicWithHttpInfo(String country, String nifNumber, String companyAddress, String companyName) throws ApiException {
        okhttp3.Call localVarCall = nifBasicValidateBeforeCall(country, nifNumber, companyAddress, companyName, null);
        Type localVarReturnType = new TypeToken<NifBasic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies a NIF number (asynchronously)
     * Performs a basic verification check of a given NIF tax number against NIF.com. Optional parameters may be added to improve calculation of confidence score.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nifBasicAsync(String country, String nifNumber, String companyAddress, String companyName, final ApiCallback<NifBasic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = nifBasicValidateBeforeCall(country, nifNumber, companyAddress, companyName, _callback);
        Type localVarReturnType = new TypeToken<NifBasic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nifComprehensive
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nifComprehensiveCall(String country, String nifNumber, String companyAddress, String companyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/nif-verification/comprehensive-check/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyAddress != null) {
            localVarFormParams.put("companyAddress", companyAddress);
        }

        if (companyName != null) {
            localVarFormParams.put("companyName", companyName);
        }

        if (nifNumber != null) {
            localVarFormParams.put("nifNumber", nifNumber);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nifComprehensiveValidateBeforeCall(String country, String nifNumber, String companyAddress, String companyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling nifComprehensive(Async)");
        }

        // verify the required parameter 'nifNumber' is set
        if (nifNumber == null) {
            throw new ApiException("Missing the required parameter 'nifNumber' when calling nifComprehensive(Async)");
        }

        return nifComprehensiveCall(country, nifNumber, companyAddress, companyName, _callback);

    }

    /**
     * Verifies a NIF number and retrieves company data
     * Comprehensive verification of given portuguese NIF number against NIF.com. Optional parameters may help to build a better confidence score. Additional company data will be provided.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @return NifComprehensive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NifComprehensive200Response nifComprehensive(String country, String nifNumber, String companyAddress, String companyName) throws ApiException {
        ApiResponse<NifComprehensive200Response> localVarResp = nifComprehensiveWithHttpInfo(country, nifNumber, companyAddress, companyName);
        return localVarResp.getData();
    }

    /**
     * Verifies a NIF number and retrieves company data
     * Comprehensive verification of given portuguese NIF number against NIF.com. Optional parameters may help to build a better confidence score. Additional company data will be provided.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @return ApiResponse&lt;NifComprehensive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NifComprehensive200Response> nifComprehensiveWithHttpInfo(String country, String nifNumber, String companyAddress, String companyName) throws ApiException {
        okhttp3.Call localVarCall = nifComprehensiveValidateBeforeCall(country, nifNumber, companyAddress, companyName, null);
        Type localVarReturnType = new TypeToken<NifComprehensive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies a NIF number and retrieves company data (asynchronously)
     * Comprehensive verification of given portuguese NIF number against NIF.com. Optional parameters may help to build a better confidence score. Additional company data will be provided.
     * @param country ISO_3166-1_alpha-2 representation of a country name - 2 chars (required)
     * @param nifNumber NIF number to validate (required)
     * @param companyAddress company address lines (optional)
     * @param companyName Company name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive NIF verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nifComprehensiveAsync(String country, String nifNumber, String companyAddress, String companyName, final ApiCallback<NifComprehensive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = nifComprehensiveValidateBeforeCall(country, nifNumber, companyAddress, companyName, _callback);
        Type localVarReturnType = new TypeToken<NifComprehensive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
