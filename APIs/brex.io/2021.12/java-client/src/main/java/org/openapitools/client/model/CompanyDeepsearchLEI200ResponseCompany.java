/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyDeepsearchLEI200ResponseCompany
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:26.420924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyDeepsearchLEI200ResponseCompany {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<String> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATE_OF_INCORPORATION = "dateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_DATE_OF_INCORPORATION)
  private String dateOfIncorporation;

  public static final String SERIALIZED_NAME_EXTRA_DATA = "extraData";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA)
  private Object extraData;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formattedAddress";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private List<String> formattedAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LEGAL_FORM = "legalForm";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM)
  private String legalForm;

  public static final String SERIALIZED_NAME_MANAGING_DIRECTORS = "managingDirectors";
  @SerializedName(SERIALIZED_NAME_MANAGING_DIRECTORS)
  private List<String> managingDirectors = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_REQUEST_TIME = "requestTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIME)
  private Integer requestTime;

  public static final String SERIALIZED_NAME_SECRETARIES = "secretaries";
  @SerializedName(SERIALIZED_NAME_SECRETARIES)
  private List<String> secretaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIC_NACE_CODES = "sicNaceCodes";
  @SerializedName(SERIALIZED_NAME_SIC_NACE_CODES)
  private List<String> sicNaceCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public CompanyDeepsearchLEI200ResponseCompany() {
  }

  public CompanyDeepsearchLEI200ResponseCompany address(List<String> address) {
    this.address = address;
    return this;
  }

  public CompanyDeepsearchLEI200ResponseCompany addAddressItem(String addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public List<String> getAddress() {
    return address;
  }

  public void setAddress(List<String> address) {
    this.address = address;
  }


  public CompanyDeepsearchLEI200ResponseCompany country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CompanyDeepsearchLEI200ResponseCompany dateOfIncorporation(String dateOfIncorporation) {
    this.dateOfIncorporation = dateOfIncorporation;
    return this;
  }

  /**
   * Get dateOfIncorporation
   * @return dateOfIncorporation
   */
  @javax.annotation.Nullable
  public String getDateOfIncorporation() {
    return dateOfIncorporation;
  }

  public void setDateOfIncorporation(String dateOfIncorporation) {
    this.dateOfIncorporation = dateOfIncorporation;
  }


  public CompanyDeepsearchLEI200ResponseCompany extraData(Object extraData) {
    this.extraData = extraData;
    return this;
  }

  /**
   * Get extraData
   * @return extraData
   */
  @javax.annotation.Nullable
  public Object getExtraData() {
    return extraData;
  }

  public void setExtraData(Object extraData) {
    this.extraData = extraData;
  }


  public CompanyDeepsearchLEI200ResponseCompany formattedAddress(List<String> formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  public CompanyDeepsearchLEI200ResponseCompany addFormattedAddressItem(String formattedAddressItem) {
    if (this.formattedAddress == null) {
      this.formattedAddress = new ArrayList<>();
    }
    this.formattedAddress.add(formattedAddressItem);
    return this;
  }

  /**
   * Get formattedAddress
   * @return formattedAddress
   */
  @javax.annotation.Nullable
  public List<String> getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(List<String> formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public CompanyDeepsearchLEI200ResponseCompany id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CompanyDeepsearchLEI200ResponseCompany legalForm(String legalForm) {
    this.legalForm = legalForm;
    return this;
  }

  /**
   * Get legalForm
   * @return legalForm
   */
  @javax.annotation.Nullable
  public String getLegalForm() {
    return legalForm;
  }

  public void setLegalForm(String legalForm) {
    this.legalForm = legalForm;
  }


  public CompanyDeepsearchLEI200ResponseCompany managingDirectors(List<String> managingDirectors) {
    this.managingDirectors = managingDirectors;
    return this;
  }

  public CompanyDeepsearchLEI200ResponseCompany addManagingDirectorsItem(String managingDirectorsItem) {
    if (this.managingDirectors == null) {
      this.managingDirectors = new ArrayList<>();
    }
    this.managingDirectors.add(managingDirectorsItem);
    return this;
  }

  /**
   * Get managingDirectors
   * @return managingDirectors
   */
  @javax.annotation.Nullable
  public List<String> getManagingDirectors() {
    return managingDirectors;
  }

  public void setManagingDirectors(List<String> managingDirectors) {
    this.managingDirectors = managingDirectors;
  }


  public CompanyDeepsearchLEI200ResponseCompany name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CompanyDeepsearchLEI200ResponseCompany registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * Get registrationNumber
   * @return registrationNumber
   */
  @javax.annotation.Nonnull
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public CompanyDeepsearchLEI200ResponseCompany requestTime(Integer requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  /**
   * Get requestTime
   * @return requestTime
   */
  @javax.annotation.Nullable
  public Integer getRequestTime() {
    return requestTime;
  }

  public void setRequestTime(Integer requestTime) {
    this.requestTime = requestTime;
  }


  public CompanyDeepsearchLEI200ResponseCompany secretaries(List<String> secretaries) {
    this.secretaries = secretaries;
    return this;
  }

  public CompanyDeepsearchLEI200ResponseCompany addSecretariesItem(String secretariesItem) {
    if (this.secretaries == null) {
      this.secretaries = new ArrayList<>();
    }
    this.secretaries.add(secretariesItem);
    return this;
  }

  /**
   * Get secretaries
   * @return secretaries
   */
  @javax.annotation.Nullable
  public List<String> getSecretaries() {
    return secretaries;
  }

  public void setSecretaries(List<String> secretaries) {
    this.secretaries = secretaries;
  }


  public CompanyDeepsearchLEI200ResponseCompany sicNaceCodes(List<String> sicNaceCodes) {
    this.sicNaceCodes = sicNaceCodes;
    return this;
  }

  public CompanyDeepsearchLEI200ResponseCompany addSicNaceCodesItem(String sicNaceCodesItem) {
    if (this.sicNaceCodes == null) {
      this.sicNaceCodes = new ArrayList<>();
    }
    this.sicNaceCodes.add(sicNaceCodesItem);
    return this;
  }

  /**
   * Get sicNaceCodes
   * @return sicNaceCodes
   */
  @javax.annotation.Nullable
  public List<String> getSicNaceCodes() {
    return sicNaceCodes;
  }

  public void setSicNaceCodes(List<String> sicNaceCodes) {
    this.sicNaceCodes = sicNaceCodes;
  }


  public CompanyDeepsearchLEI200ResponseCompany status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyDeepsearchLEI200ResponseCompany companyDeepsearchLEI200ResponseCompany = (CompanyDeepsearchLEI200ResponseCompany) o;
    return Objects.equals(this.address, companyDeepsearchLEI200ResponseCompany.address) &&
        Objects.equals(this.country, companyDeepsearchLEI200ResponseCompany.country) &&
        Objects.equals(this.dateOfIncorporation, companyDeepsearchLEI200ResponseCompany.dateOfIncorporation) &&
        Objects.equals(this.extraData, companyDeepsearchLEI200ResponseCompany.extraData) &&
        Objects.equals(this.formattedAddress, companyDeepsearchLEI200ResponseCompany.formattedAddress) &&
        Objects.equals(this.id, companyDeepsearchLEI200ResponseCompany.id) &&
        Objects.equals(this.legalForm, companyDeepsearchLEI200ResponseCompany.legalForm) &&
        Objects.equals(this.managingDirectors, companyDeepsearchLEI200ResponseCompany.managingDirectors) &&
        Objects.equals(this.name, companyDeepsearchLEI200ResponseCompany.name) &&
        Objects.equals(this.registrationNumber, companyDeepsearchLEI200ResponseCompany.registrationNumber) &&
        Objects.equals(this.requestTime, companyDeepsearchLEI200ResponseCompany.requestTime) &&
        Objects.equals(this.secretaries, companyDeepsearchLEI200ResponseCompany.secretaries) &&
        Objects.equals(this.sicNaceCodes, companyDeepsearchLEI200ResponseCompany.sicNaceCodes) &&
        Objects.equals(this.status, companyDeepsearchLEI200ResponseCompany.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, country, dateOfIncorporation, extraData, formattedAddress, id, legalForm, managingDirectors, name, registrationNumber, requestTime, secretaries, sicNaceCodes, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyDeepsearchLEI200ResponseCompany {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    dateOfIncorporation: ").append(toIndentedString(dateOfIncorporation)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legalForm: ").append(toIndentedString(legalForm)).append("\n");
    sb.append("    managingDirectors: ").append(toIndentedString(managingDirectors)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
    sb.append("    secretaries: ").append(toIndentedString(secretaries)).append("\n");
    sb.append("    sicNaceCodes: ").append(toIndentedString(sicNaceCodes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("country");
    openapiFields.add("dateOfIncorporation");
    openapiFields.add("extraData");
    openapiFields.add("formattedAddress");
    openapiFields.add("id");
    openapiFields.add("legalForm");
    openapiFields.add("managingDirectors");
    openapiFields.add("name");
    openapiFields.add("registrationNumber");
    openapiFields.add("requestTime");
    openapiFields.add("secretaries");
    openapiFields.add("sicNaceCodes");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("registrationNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyDeepsearchLEI200ResponseCompany
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyDeepsearchLEI200ResponseCompany.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyDeepsearchLEI200ResponseCompany is not found in the empty JSON string", CompanyDeepsearchLEI200ResponseCompany.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyDeepsearchLEI200ResponseCompany.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyDeepsearchLEI200ResponseCompany` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompanyDeepsearchLEI200ResponseCompany.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull() && !jsonObj.get("address").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("dateOfIncorporation") != null && !jsonObj.get("dateOfIncorporation").isJsonNull()) && !jsonObj.get("dateOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfIncorporation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("formattedAddress") != null && !jsonObj.get("formattedAddress").isJsonNull() && !jsonObj.get("formattedAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedAddress` to be an array in the JSON string but got `%s`", jsonObj.get("formattedAddress").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("legalForm") != null && !jsonObj.get("legalForm").isJsonNull()) && !jsonObj.get("legalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalForm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("managingDirectors") != null && !jsonObj.get("managingDirectors").isJsonNull() && !jsonObj.get("managingDirectors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `managingDirectors` to be an array in the JSON string but got `%s`", jsonObj.get("managingDirectors").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secretaries") != null && !jsonObj.get("secretaries").isJsonNull() && !jsonObj.get("secretaries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretaries` to be an array in the JSON string but got `%s`", jsonObj.get("secretaries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sicNaceCodes") != null && !jsonObj.get("sicNaceCodes").isJsonNull() && !jsonObj.get("sicNaceCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sicNaceCodes` to be an array in the JSON string but got `%s`", jsonObj.get("sicNaceCodes").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyDeepsearchLEI200ResponseCompany.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyDeepsearchLEI200ResponseCompany' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyDeepsearchLEI200ResponseCompany> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyDeepsearchLEI200ResponseCompany.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyDeepsearchLEI200ResponseCompany>() {
           @Override
           public void write(JsonWriter out, CompanyDeepsearchLEI200ResponseCompany value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyDeepsearchLEI200ResponseCompany read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyDeepsearchLEI200ResponseCompany given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyDeepsearchLEI200ResponseCompany
   * @throws IOException if the JSON string is invalid with respect to CompanyDeepsearchLEI200ResponseCompany
   */
  public static CompanyDeepsearchLEI200ResponseCompany fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyDeepsearchLEI200ResponseCompany.class);
  }

  /**
   * Convert an instance of CompanyDeepsearchLEI200ResponseCompany to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

