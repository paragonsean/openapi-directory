/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyNotificationId200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:26.420924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyNotificationId200ResponseInner {
  public static final String SERIALIZED_NAME_CALLBACK_COUNT = "callbackCount";
  @SerializedName(SERIALIZED_NAME_CALLBACK_COUNT)
  private Integer callbackCount;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Object created = null;

  public static final String SERIALIZED_NAME_MONITOR_STATUS = "monitorStatus";
  @SerializedName(SERIALIZED_NAME_MONITOR_STATUS)
  private String monitorStatus;

  public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notificationId";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
  private String notificationId;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  private String subjectId;

  public CompanyNotificationId200ResponseInner() {
  }

  public CompanyNotificationId200ResponseInner callbackCount(Integer callbackCount) {
    this.callbackCount = callbackCount;
    return this;
  }

  /**
   * Get callbackCount
   * @return callbackCount
   */
  @javax.annotation.Nullable
  public Integer getCallbackCount() {
    return callbackCount;
  }

  public void setCallbackCount(Integer callbackCount) {
    this.callbackCount = callbackCount;
  }


  public CompanyNotificationId200ResponseInner callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public CompanyNotificationId200ResponseInner created(Object created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public Object getCreated() {
    return created;
  }

  public void setCreated(Object created) {
    this.created = created;
  }


  public CompanyNotificationId200ResponseInner monitorStatus(String monitorStatus) {
    this.monitorStatus = monitorStatus;
    return this;
  }

  /**
   * Get monitorStatus
   * @return monitorStatus
   */
  @javax.annotation.Nullable
  public String getMonitorStatus() {
    return monitorStatus;
  }

  public void setMonitorStatus(String monitorStatus) {
    this.monitorStatus = monitorStatus;
  }


  public CompanyNotificationId200ResponseInner notificationId(String notificationId) {
    this.notificationId = notificationId;
    return this;
  }

  /**
   * Get notificationId
   * @return notificationId
   */
  @javax.annotation.Nullable
  public String getNotificationId() {
    return notificationId;
  }

  public void setNotificationId(String notificationId) {
    this.notificationId = notificationId;
  }


  public CompanyNotificationId200ResponseInner subjectId(String subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Get subjectId
   * @return subjectId
   */
  @javax.annotation.Nullable
  public String getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(String subjectId) {
    this.subjectId = subjectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyNotificationId200ResponseInner companyNotificationId200ResponseInner = (CompanyNotificationId200ResponseInner) o;
    return Objects.equals(this.callbackCount, companyNotificationId200ResponseInner.callbackCount) &&
        Objects.equals(this.callbackUrl, companyNotificationId200ResponseInner.callbackUrl) &&
        Objects.equals(this.created, companyNotificationId200ResponseInner.created) &&
        Objects.equals(this.monitorStatus, companyNotificationId200ResponseInner.monitorStatus) &&
        Objects.equals(this.notificationId, companyNotificationId200ResponseInner.notificationId) &&
        Objects.equals(this.subjectId, companyNotificationId200ResponseInner.subjectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackCount, callbackUrl, created, monitorStatus, notificationId, subjectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyNotificationId200ResponseInner {\n");
    sb.append("    callbackCount: ").append(toIndentedString(callbackCount)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    monitorStatus: ").append(toIndentedString(monitorStatus)).append("\n");
    sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callbackCount");
    openapiFields.add("callbackUrl");
    openapiFields.add("created");
    openapiFields.add("monitorStatus");
    openapiFields.add("notificationId");
    openapiFields.add("subjectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyNotificationId200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyNotificationId200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyNotificationId200ResponseInner is not found in the empty JSON string", CompanyNotificationId200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyNotificationId200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyNotificationId200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callbackUrl") != null && !jsonObj.get("callbackUrl").isJsonNull()) && !jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      if ((jsonObj.get("monitorStatus") != null && !jsonObj.get("monitorStatus").isJsonNull()) && !jsonObj.get("monitorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitorStatus").toString()));
      }
      if ((jsonObj.get("notificationId") != null && !jsonObj.get("notificationId").isJsonNull()) && !jsonObj.get("notificationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationId").toString()));
      }
      if ((jsonObj.get("subjectId") != null && !jsonObj.get("subjectId").isJsonNull()) && !jsonObj.get("subjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyNotificationId200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyNotificationId200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyNotificationId200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyNotificationId200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyNotificationId200ResponseInner>() {
           @Override
           public void write(JsonWriter out, CompanyNotificationId200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyNotificationId200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyNotificationId200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyNotificationId200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to CompanyNotificationId200ResponseInner
   */
  public static CompanyNotificationId200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyNotificationId200ResponseInner.class);
  }

  /**
   * Convert an instance of CompanyNotificationId200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

