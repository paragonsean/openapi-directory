/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TinVerificationBasicCheck200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:26.420924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TinVerificationBasicCheck200Response {
  public static final String SERIALIZED_NAME_MATCH_STATUS = "matchStatus";
  @SerializedName(SERIALIZED_NAME_MATCH_STATUS)
  private String matchStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSSIBLE_MATCH = "possibleMatch";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_MATCH)
  private String possibleMatch;

  public static final String SERIALIZED_NAME_TIN = "tin";
  @SerializedName(SERIALIZED_NAME_TIN)
  private String tin;

  public static final String SERIALIZED_NAME_VALIDATION_STATUS = "validationStatus";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATUS)
  private String validationStatus;

  public TinVerificationBasicCheck200Response() {
  }

  public TinVerificationBasicCheck200Response matchStatus(String matchStatus) {
    this.matchStatus = matchStatus;
    return this;
  }

  /**
   * Get matchStatus
   * @return matchStatus
   */
  @javax.annotation.Nonnull
  public String getMatchStatus() {
    return matchStatus;
  }

  public void setMatchStatus(String matchStatus) {
    this.matchStatus = matchStatus;
  }


  public TinVerificationBasicCheck200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TinVerificationBasicCheck200Response possibleMatch(String possibleMatch) {
    this.possibleMatch = possibleMatch;
    return this;
  }

  /**
   * Get possibleMatch
   * @return possibleMatch
   */
  @javax.annotation.Nonnull
  public String getPossibleMatch() {
    return possibleMatch;
  }

  public void setPossibleMatch(String possibleMatch) {
    this.possibleMatch = possibleMatch;
  }


  public TinVerificationBasicCheck200Response tin(String tin) {
    this.tin = tin;
    return this;
  }

  /**
   * Get tin
   * @return tin
   */
  @javax.annotation.Nonnull
  public String getTin() {
    return tin;
  }

  public void setTin(String tin) {
    this.tin = tin;
  }


  public TinVerificationBasicCheck200Response validationStatus(String validationStatus) {
    this.validationStatus = validationStatus;
    return this;
  }

  /**
   * Get validationStatus
   * @return validationStatus
   */
  @javax.annotation.Nonnull
  public String getValidationStatus() {
    return validationStatus;
  }

  public void setValidationStatus(String validationStatus) {
    this.validationStatus = validationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TinVerificationBasicCheck200Response tinVerificationBasicCheck200Response = (TinVerificationBasicCheck200Response) o;
    return Objects.equals(this.matchStatus, tinVerificationBasicCheck200Response.matchStatus) &&
        Objects.equals(this.name, tinVerificationBasicCheck200Response.name) &&
        Objects.equals(this.possibleMatch, tinVerificationBasicCheck200Response.possibleMatch) &&
        Objects.equals(this.tin, tinVerificationBasicCheck200Response.tin) &&
        Objects.equals(this.validationStatus, tinVerificationBasicCheck200Response.validationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchStatus, name, possibleMatch, tin, validationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TinVerificationBasicCheck200Response {\n");
    sb.append("    matchStatus: ").append(toIndentedString(matchStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    possibleMatch: ").append(toIndentedString(possibleMatch)).append("\n");
    sb.append("    tin: ").append(toIndentedString(tin)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchStatus");
    openapiFields.add("name");
    openapiFields.add("possibleMatch");
    openapiFields.add("tin");
    openapiFields.add("validationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matchStatus");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("possibleMatch");
    openapiRequiredFields.add("tin");
    openapiRequiredFields.add("validationStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TinVerificationBasicCheck200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TinVerificationBasicCheck200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TinVerificationBasicCheck200Response is not found in the empty JSON string", TinVerificationBasicCheck200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TinVerificationBasicCheck200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TinVerificationBasicCheck200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TinVerificationBasicCheck200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("matchStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchStatus").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("possibleMatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possibleMatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possibleMatch").toString()));
      }
      if (!jsonObj.get("tin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tin").toString()));
      }
      if (!jsonObj.get("validationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TinVerificationBasicCheck200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TinVerificationBasicCheck200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TinVerificationBasicCheck200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TinVerificationBasicCheck200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<TinVerificationBasicCheck200Response>() {
           @Override
           public void write(JsonWriter out, TinVerificationBasicCheck200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TinVerificationBasicCheck200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TinVerificationBasicCheck200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TinVerificationBasicCheck200Response
   * @throws IOException if the JSON string is invalid with respect to TinVerificationBasicCheck200Response
   */
  public static TinVerificationBasicCheck200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TinVerificationBasicCheck200Response.class);
  }

  /**
   * Convert an instance of TinVerificationBasicCheck200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

