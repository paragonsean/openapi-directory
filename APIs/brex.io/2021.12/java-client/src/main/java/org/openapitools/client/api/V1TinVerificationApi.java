/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TinVerificationBasicCheck200Response;
import org.openapitools.client.model.TinVerificationComprehensiveCheck200Response;
import org.openapitools.client.model.TinVerificationNameLookup200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1TinVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1TinVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1TinVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tinVerificationBasicCheck
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinVerificationBasicCheckCall(String tin, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tin-verification/basic-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tin", tin));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinVerificationBasicCheckValidateBeforeCall(String tin, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tin' is set
        if (tin == null) {
            throw new ApiException("Missing the required parameter 'tin' when calling tinVerificationBasicCheck(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling tinVerificationBasicCheck(Async)");
        }

        return tinVerificationBasicCheckCall(tin, name, _callback);

    }

    /**
     * Verifies a TIN number
     * Performs a basic verification check of a given TIN number and name.
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @return TinVerificationBasicCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TinVerificationBasicCheck200Response tinVerificationBasicCheck(String tin, String name) throws ApiException {
        ApiResponse<TinVerificationBasicCheck200Response> localVarResp = tinVerificationBasicCheckWithHttpInfo(tin, name);
        return localVarResp.getData();
    }

    /**
     * Verifies a TIN number
     * Performs a basic verification check of a given TIN number and name.
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @return ApiResponse&lt;TinVerificationBasicCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TinVerificationBasicCheck200Response> tinVerificationBasicCheckWithHttpInfo(String tin, String name) throws ApiException {
        okhttp3.Call localVarCall = tinVerificationBasicCheckValidateBeforeCall(tin, name, null);
        Type localVarReturnType = new TypeToken<TinVerificationBasicCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies a TIN number (asynchronously)
     * Performs a basic verification check of a given TIN number and name.
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinVerificationBasicCheckAsync(String tin, String name, final ApiCallback<TinVerificationBasicCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinVerificationBasicCheckValidateBeforeCall(tin, name, _callback);
        Type localVarReturnType = new TypeToken<TinVerificationBasicCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tinVerificationComprehensiveCheck
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @param threshold The percentage of minimum similarity threshold for company matching (optional, default: 70%) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name and the list of matched companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinVerificationComprehensiveCheckCall(String tin, String name, Long threshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tin-verification/comprehensive-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tin", tin));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threshold", threshold));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinVerificationComprehensiveCheckValidateBeforeCall(String tin, String name, Long threshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tin' is set
        if (tin == null) {
            throw new ApiException("Missing the required parameter 'tin' when calling tinVerificationComprehensiveCheck(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling tinVerificationComprehensiveCheck(Async)");
        }

        return tinVerificationComprehensiveCheckCall(tin, name, threshold, _callback);

    }

    /**
     * EIN Name Lookup with TIN number and retrieves company data
     * Performs an EIN name match using provided TIN Number. Additionally to the name lookup it will lookup company details
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @param threshold The percentage of minimum similarity threshold for company matching (optional, default: 70%) (optional)
     * @return TinVerificationComprehensiveCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name and the list of matched companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TinVerificationComprehensiveCheck200Response tinVerificationComprehensiveCheck(String tin, String name, Long threshold) throws ApiException {
        ApiResponse<TinVerificationComprehensiveCheck200Response> localVarResp = tinVerificationComprehensiveCheckWithHttpInfo(tin, name, threshold);
        return localVarResp.getData();
    }

    /**
     * EIN Name Lookup with TIN number and retrieves company data
     * Performs an EIN name match using provided TIN Number. Additionally to the name lookup it will lookup company details
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @param threshold The percentage of minimum similarity threshold for company matching (optional, default: 70%) (optional)
     * @return ApiResponse&lt;TinVerificationComprehensiveCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name and the list of matched companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TinVerificationComprehensiveCheck200Response> tinVerificationComprehensiveCheckWithHttpInfo(String tin, String name, Long threshold) throws ApiException {
        okhttp3.Call localVarCall = tinVerificationComprehensiveCheckValidateBeforeCall(tin, name, threshold, null);
        Type localVarReturnType = new TypeToken<TinVerificationComprehensiveCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EIN Name Lookup with TIN number and retrieves company data (asynchronously)
     * Performs an EIN name match using provided TIN Number. Additionally to the name lookup it will lookup company details
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param name Company Name (required)
     * @param threshold The percentage of minimum similarity threshold for company matching (optional, default: 70%) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic TIN number check with company name and the list of matched companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinVerificationComprehensiveCheckAsync(String tin, String name, Long threshold, final ApiCallback<TinVerificationComprehensiveCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinVerificationComprehensiveCheckValidateBeforeCall(tin, name, threshold, _callback);
        Type localVarReturnType = new TypeToken<TinVerificationComprehensiveCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tinVerificationNameLookup
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN name lookup with TIN number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinVerificationNameLookupCall(String tin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tin-verification/name-lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tin", tin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinVerificationNameLookupValidateBeforeCall(String tin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tin' is set
        if (tin == null) {
            throw new ApiException("Missing the required parameter 'tin' when calling tinVerificationNameLookup(Async)");
        }

        return tinVerificationNameLookupCall(tin, _callback);

    }

    /**
     * EIN Name Lookup with TIN number
     * Performs an EIN name match using provided TIN Number
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @return TinVerificationNameLookup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN name lookup with TIN number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TinVerificationNameLookup200Response tinVerificationNameLookup(String tin) throws ApiException {
        ApiResponse<TinVerificationNameLookup200Response> localVarResp = tinVerificationNameLookupWithHttpInfo(tin);
        return localVarResp.getData();
    }

    /**
     * EIN Name Lookup with TIN number
     * Performs an EIN name match using provided TIN Number
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @return ApiResponse&lt;TinVerificationNameLookup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN name lookup with TIN number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TinVerificationNameLookup200Response> tinVerificationNameLookupWithHttpInfo(String tin) throws ApiException {
        okhttp3.Call localVarCall = tinVerificationNameLookupValidateBeforeCall(tin, null);
        Type localVarReturnType = new TypeToken<TinVerificationNameLookup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EIN Name Lookup with TIN number (asynchronously)
     * Performs an EIN name match using provided TIN Number
     * @param tin Nine letter TIN number with or without hyphens (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN name lookup with TIN number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinVerificationNameLookupAsync(String tin, final ApiCallback<TinVerificationNameLookup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinVerificationNameLookupValidateBeforeCall(tin, _callback);
        Type localVarReturnType = new TypeToken<TinVerificationNameLookup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
