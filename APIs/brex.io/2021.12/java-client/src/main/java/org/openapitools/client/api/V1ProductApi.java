/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ProductAvailability200Response;
import org.openapitools.client.model.ProductCatalog200Response;
import org.openapitools.client.model.ProductNotifierCreate200Response;
import org.openapitools.client.model.ProductOrder200Response;
import org.openapitools.client.model.ProductRetrieve200Response;
import org.openapitools.client.model.ProductSearch200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productAvailability
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAvailabilityCall(String sku, String subjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/availability/{sku}/{subjectId}"
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()))
            .replace("{" + "subjectId" + "}", localVarApiClient.escapeString(subjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAvailabilityValidateBeforeCall(String sku, String subjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling productAvailability(Async)");
        }

        // verify the required parameter 'subjectId' is set
        if (subjectId == null) {
            throw new ApiException("Missing the required parameter 'subjectId' when calling productAvailability(Async)");
        }

        return productAvailabilityCall(sku, subjectId, _callback);

    }

    /**
     * Retrieves a document availability result
     * Check availability and valid options for a particular product for a particular company identfied by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return ProductAvailability200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductAvailability200Response productAvailability(String sku, String subjectId) throws ApiException {
        ApiResponse<ProductAvailability200Response> localVarResp = productAvailabilityWithHttpInfo(sku, subjectId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a document availability result
     * Check availability and valid options for a particular product for a particular company identfied by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return ApiResponse&lt;ProductAvailability200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAvailability200Response> productAvailabilityWithHttpInfo(String sku, String subjectId) throws ApiException {
        okhttp3.Call localVarCall = productAvailabilityValidateBeforeCall(sku, subjectId, null);
        Type localVarReturnType = new TypeToken<ProductAvailability200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a document availability result (asynchronously)
     * Check availability and valid options for a particular product for a particular company identfied by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAvailabilityAsync(String sku, String subjectId, final ApiCallback<ProductAvailability200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAvailabilityValidateBeforeCall(sku, subjectId, _callback);
        Type localVarReturnType = new TypeToken<ProductAvailability200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCatalog
     * @param country two letter country code in upper case (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product with details like URI to purchase it </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCatalogCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/catalog/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCatalogValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling productCatalog(Async)");
        }

        return productCatalogCall(country, _callback);

    }

    /**
     * Returns a catalog of products
     * Returns a catalog of purchasable products available with some metadata for a particular country
     * @param country two letter country code in upper case (required)
     * @return ProductCatalog200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product with details like URI to purchase it </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductCatalog200Response productCatalog(String country) throws ApiException {
        ApiResponse<ProductCatalog200Response> localVarResp = productCatalogWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * Returns a catalog of products
     * Returns a catalog of purchasable products available with some metadata for a particular country
     * @param country two letter country code in upper case (required)
     * @return ApiResponse&lt;ProductCatalog200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product with details like URI to purchase it </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCatalog200Response> productCatalogWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = productCatalogValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<ProductCatalog200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a catalog of products (asynchronously)
     * Returns a catalog of purchasable products available with some metadata for a particular country
     * @param country two letter country code in upper case (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product with details like URI to purchase it </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCatalogAsync(String country, final ApiCallback<ProductCatalog200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCatalogValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<ProductCatalog200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productNotifier
     * @param notifierId ID of the ProductOrderNotifier as returned from a /notifier POST call - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productNotifierCall(String notifierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/notifier/{notifierId}"
            .replace("{" + "notifierId" + "}", localVarApiClient.escapeString(notifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productNotifierValidateBeforeCall(String notifierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notifierId' is set
        if (notifierId == null) {
            throw new ApiException("Missing the required parameter 'notifierId' when calling productNotifier(Async)");
        }

        return productNotifierCall(notifierId, _callback);

    }

    /**
     * Returns metadata for a notifier
     * Queries and returns all metadata associated with a notifier identified by its notifer id
     * @param notifierId ID of the ProductOrderNotifier as returned from a /notifier POST call - 32 character hex value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productNotifier(String notifierId) throws ApiException {
        productNotifierWithHttpInfo(notifierId);
    }

    /**
     * Returns metadata for a notifier
     * Queries and returns all metadata associated with a notifier identified by its notifer id
     * @param notifierId ID of the ProductOrderNotifier as returned from a /notifier POST call - 32 character hex value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productNotifierWithHttpInfo(String notifierId) throws ApiException {
        okhttp3.Call localVarCall = productNotifierValidateBeforeCall(notifierId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns metadata for a notifier (asynchronously)
     * Queries and returns all metadata associated with a notifier identified by its notifer id
     * @param notifierId ID of the ProductOrderNotifier as returned from a /notifier POST call - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productNotifierAsync(String notifierId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productNotifierValidateBeforeCall(notifierId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productNotifierCreate
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param type Type of the notifier - indicates the action the notifier will perform. Currently GET and POST are supported which performs an http(s) GET/POST to the supplied uri with appended notifierId&#x3D; and orderId&#x3D; parameters when the order processing is completed. Upon the POST request the order object is sent as a JSON body (required)
     * @param uri URI of the notifier for the &#39;complete&#39; action. Currently only a GET method HTTP(s) URL is supported. 1 to 250 characters long. Every slash in the URI must be replaced by a ~ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of configured product order notification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productNotifierCreateCall(String orderId, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/notifier/{orderId}/{type}/{uri}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "uri" + "}", localVarApiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productNotifierCreateValidateBeforeCall(String orderId, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling productNotifierCreate(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling productNotifierCreate(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling productNotifierCreate(Async)");
        }

        return productNotifierCreateCall(orderId, type, uri, _callback);

    }

    /**
     * Creates a notifier for an order
     * Create a notifier for a particular order. Parameters can be supplied in the path
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param type Type of the notifier - indicates the action the notifier will perform. Currently GET and POST are supported which performs an http(s) GET/POST to the supplied uri with appended notifierId&#x3D; and orderId&#x3D; parameters when the order processing is completed. Upon the POST request the order object is sent as a JSON body (required)
     * @param uri URI of the notifier for the &#39;complete&#39; action. Currently only a GET method HTTP(s) URL is supported. 1 to 250 characters long. Every slash in the URI must be replaced by a ~ (required)
     * @return ProductNotifierCreate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of configured product order notification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductNotifierCreate200Response productNotifierCreate(String orderId, String type, String uri) throws ApiException {
        ApiResponse<ProductNotifierCreate200Response> localVarResp = productNotifierCreateWithHttpInfo(orderId, type, uri);
        return localVarResp.getData();
    }

    /**
     * Creates a notifier for an order
     * Create a notifier for a particular order. Parameters can be supplied in the path
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param type Type of the notifier - indicates the action the notifier will perform. Currently GET and POST are supported which performs an http(s) GET/POST to the supplied uri with appended notifierId&#x3D; and orderId&#x3D; parameters when the order processing is completed. Upon the POST request the order object is sent as a JSON body (required)
     * @param uri URI of the notifier for the &#39;complete&#39; action. Currently only a GET method HTTP(s) URL is supported. 1 to 250 characters long. Every slash in the URI must be replaced by a ~ (required)
     * @return ApiResponse&lt;ProductNotifierCreate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of configured product order notification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductNotifierCreate200Response> productNotifierCreateWithHttpInfo(String orderId, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = productNotifierCreateValidateBeforeCall(orderId, type, uri, null);
        Type localVarReturnType = new TypeToken<ProductNotifierCreate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a notifier for an order (asynchronously)
     * Create a notifier for a particular order. Parameters can be supplied in the path
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param type Type of the notifier - indicates the action the notifier will perform. Currently GET and POST are supported which performs an http(s) GET/POST to the supplied uri with appended notifierId&#x3D; and orderId&#x3D; parameters when the order processing is completed. Upon the POST request the order object is sent as a JSON body (required)
     * @param uri URI of the notifier for the &#39;complete&#39; action. Currently only a GET method HTTP(s) URL is supported. 1 to 250 characters long. Every slash in the URI must be replaced by a ~ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of configured product order notification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productNotifierCreateAsync(String orderId, String type, String uri, final ApiCallback<ProductNotifierCreate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productNotifierCreateValidateBeforeCall(orderId, type, uri, _callback);
        Type localVarReturnType = new TypeToken<ProductNotifierCreate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOrder
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product order details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderCall(String sku, String subjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/order/{sku}/{subjectId}"
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()))
            .replace("{" + "subjectId" + "}", localVarApiClient.escapeString(subjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOrderValidateBeforeCall(String sku, String subjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling productOrder(Async)");
        }

        // verify the required parameter 'subjectId' is set
        if (subjectId == null) {
            throw new ApiException("Missing the required parameter 'subjectId' when calling productOrder(Async)");
        }

        return productOrderCall(sku, subjectId, _callback);

    }

    /**
     * Places a product order
     * Place an order for a particular product identified by its SKU for a particular company identified by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return ProductOrder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product order details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductOrder200Response productOrder(String sku, String subjectId) throws ApiException {
        ApiResponse<ProductOrder200Response> localVarResp = productOrderWithHttpInfo(sku, subjectId);
        return localVarResp.getData();
    }

    /**
     * Places a product order
     * Place an order for a particular product identified by its SKU for a particular company identified by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return ApiResponse&lt;ProductOrder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product order details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOrder200Response> productOrderWithHttpInfo(String sku, String subjectId) throws ApiException {
        okhttp3.Call localVarCall = productOrderValidateBeforeCall(sku, subjectId, null);
        Type localVarReturnType = new TypeToken<ProductOrder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Places a product order (asynchronously)
     * Place an order for a particular product identified by its SKU for a particular company identified by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product order details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderAsync(String sku, String subjectId, final ApiCallback<ProductOrder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOrderValidateBeforeCall(sku, subjectId, _callback);
        Type localVarReturnType = new TypeToken<ProductOrder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOrderConcierge
     * @param companyName Name of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param contactEmail Contact E-Mail, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param contactPhone Contact phone, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param costConfirmation If the concierge cost should require additional confirmation if a threshold is reached (configured on your plan) (optional)
     * @param country Two letter ISO code of the country of the company (optional)
     * @param financialData If you want financial data of the company to be retrieved (optional)
     * @param historicInformation If you want historical data of the company to be retrieved (optional)
     * @param informationRequirements Requirements on what document or information should be provided. Please be very precise (optional)
     * @param locationInvestigation If the companies residency should be investigated (optional)
     * @param priority Priority of order: standard/express are allowed (optional)
     * @param registerData If you want register data of the company to be retrieved (optional)
     * @param registerNumber Registration number of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param subjectId Kompanyid of the company you want to place the order for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderConciergeCall(String companyName, String contactEmail, String contactPhone, Boolean costConfirmation, String country, Boolean financialData, Boolean historicInformation, String informationRequirements, Boolean locationInvestigation, String priority, Boolean registerData, String registerNumber, String subjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/order/concierge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyName != null) {
            localVarFormParams.put("companyName", companyName);
        }

        if (contactEmail != null) {
            localVarFormParams.put("contactEmail", contactEmail);
        }

        if (contactPhone != null) {
            localVarFormParams.put("contactPhone", contactPhone);
        }

        if (costConfirmation != null) {
            localVarFormParams.put("costConfirmation", costConfirmation);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (financialData != null) {
            localVarFormParams.put("financialData", financialData);
        }

        if (historicInformation != null) {
            localVarFormParams.put("historicInformation", historicInformation);
        }

        if (informationRequirements != null) {
            localVarFormParams.put("informationRequirements", informationRequirements);
        }

        if (locationInvestigation != null) {
            localVarFormParams.put("locationInvestigation", locationInvestigation);
        }

        if (priority != null) {
            localVarFormParams.put("priority", priority);
        }

        if (registerData != null) {
            localVarFormParams.put("registerData", registerData);
        }

        if (registerNumber != null) {
            localVarFormParams.put("registerNumber", registerNumber);
        }

        if (subjectId != null) {
            localVarFormParams.put("subjectId", subjectId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOrderConciergeValidateBeforeCall(String companyName, String contactEmail, String contactPhone, Boolean costConfirmation, String country, Boolean financialData, Boolean historicInformation, String informationRequirements, Boolean locationInvestigation, String priority, Boolean registerData, String registerNumber, String subjectId, final ApiCallback _callback) throws ApiException {
        return productOrderConciergeCall(companyName, contactEmail, contactPhone, costConfirmation, country, financialData, historicInformation, informationRequirements, locationInvestigation, priority, registerData, registerNumber, subjectId, _callback);

    }

    /**
     * Places a concierge order
     * Place an order for a concierge product
     * @param companyName Name of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param contactEmail Contact E-Mail, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param contactPhone Contact phone, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param costConfirmation If the concierge cost should require additional confirmation if a threshold is reached (configured on your plan) (optional)
     * @param country Two letter ISO code of the country of the company (optional)
     * @param financialData If you want financial data of the company to be retrieved (optional)
     * @param historicInformation If you want historical data of the company to be retrieved (optional)
     * @param informationRequirements Requirements on what document or information should be provided. Please be very precise (optional)
     * @param locationInvestigation If the companies residency should be investigated (optional)
     * @param priority Priority of order: standard/express are allowed (optional)
     * @param registerData If you want register data of the company to be retrieved (optional)
     * @param registerNumber Registration number of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param subjectId Kompanyid of the company you want to place the order for (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productOrderConcierge(String companyName, String contactEmail, String contactPhone, Boolean costConfirmation, String country, Boolean financialData, Boolean historicInformation, String informationRequirements, Boolean locationInvestigation, String priority, Boolean registerData, String registerNumber, String subjectId) throws ApiException {
        productOrderConciergeWithHttpInfo(companyName, contactEmail, contactPhone, costConfirmation, country, financialData, historicInformation, informationRequirements, locationInvestigation, priority, registerData, registerNumber, subjectId);
    }

    /**
     * Places a concierge order
     * Place an order for a concierge product
     * @param companyName Name of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param contactEmail Contact E-Mail, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param contactPhone Contact phone, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param costConfirmation If the concierge cost should require additional confirmation if a threshold is reached (configured on your plan) (optional)
     * @param country Two letter ISO code of the country of the company (optional)
     * @param financialData If you want financial data of the company to be retrieved (optional)
     * @param historicInformation If you want historical data of the company to be retrieved (optional)
     * @param informationRequirements Requirements on what document or information should be provided. Please be very precise (optional)
     * @param locationInvestigation If the companies residency should be investigated (optional)
     * @param priority Priority of order: standard/express are allowed (optional)
     * @param registerData If you want register data of the company to be retrieved (optional)
     * @param registerNumber Registration number of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param subjectId Kompanyid of the company you want to place the order for (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productOrderConciergeWithHttpInfo(String companyName, String contactEmail, String contactPhone, Boolean costConfirmation, String country, Boolean financialData, Boolean historicInformation, String informationRequirements, Boolean locationInvestigation, String priority, Boolean registerData, String registerNumber, String subjectId) throws ApiException {
        okhttp3.Call localVarCall = productOrderConciergeValidateBeforeCall(companyName, contactEmail, contactPhone, costConfirmation, country, financialData, historicInformation, informationRequirements, locationInvestigation, priority, registerData, registerNumber, subjectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Places a concierge order (asynchronously)
     * Place an order for a concierge product
     * @param companyName Name of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param contactEmail Contact E-Mail, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param contactPhone Contact phone, will be contacted if concierge costs are exceeding the threshhold configured on your plan (optional)
     * @param costConfirmation If the concierge cost should require additional confirmation if a threshold is reached (configured on your plan) (optional)
     * @param country Two letter ISO code of the country of the company (optional)
     * @param financialData If you want financial data of the company to be retrieved (optional)
     * @param historicInformation If you want historical data of the company to be retrieved (optional)
     * @param informationRequirements Requirements on what document or information should be provided. Please be very precise (optional)
     * @param locationInvestigation If the companies residency should be investigated (optional)
     * @param priority Priority of order: standard/express are allowed (optional)
     * @param registerData If you want register data of the company to be retrieved (optional)
     * @param registerNumber Registration number of the company for which a document should be ordered. (Not required if subjectId is given) (optional)
     * @param subjectId Kompanyid of the company you want to place the order for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderConciergeAsync(String companyName, String contactEmail, String contactPhone, Boolean costConfirmation, String country, Boolean financialData, Boolean historicInformation, String informationRequirements, Boolean locationInvestigation, String priority, Boolean registerData, String registerNumber, String subjectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOrderConciergeValidateBeforeCall(companyName, contactEmail, contactPhone, costConfirmation, country, financialData, historicInformation, informationRequirements, locationInvestigation, priority, registerData, registerNumber, subjectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOrderUbo
     * @param subjectId KYC API Id (32 byte hexid) of the company you want to place the order for (required)
     * @param callbackUrl An optional callback URL to which updates about the order will be sent (for instance if credits are exceeded) (optional)
     * @param credits Specify a maximum amount of credits which should be used. To disable use -1 (optional)
     * @param includeDocs Include purchase of register document to ubo report (optional)
     * @param levels Define a threshold for different levels of crawling (optional)
     * @param strategy Choose a matching strategy. Available options (FULL,LEVELS) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderUboCall(String subjectId, String callbackUrl, BigDecimal credits, Boolean includeDocs, String levels, String strategy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/order/ubo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackUrl != null) {
            localVarFormParams.put("callbackUrl", callbackUrl);
        }

        if (credits != null) {
            localVarFormParams.put("credits", credits);
        }

        if (includeDocs != null) {
            localVarFormParams.put("includeDocs", includeDocs);
        }

        if (levels != null) {
            localVarFormParams.put("levels", levels);
        }

        if (strategy != null) {
            localVarFormParams.put("strategy", strategy);
        }

        if (subjectId != null) {
            localVarFormParams.put("subjectId", subjectId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOrderUboValidateBeforeCall(String subjectId, String callbackUrl, BigDecimal credits, Boolean includeDocs, String levels, String strategy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subjectId' is set
        if (subjectId == null) {
            throw new ApiException("Missing the required parameter 'subjectId' when calling productOrderUbo(Async)");
        }

        return productOrderUboCall(subjectId, callbackUrl, credits, includeDocs, levels, strategy, _callback);

    }

    /**
     * Places a UBO order
     * Place an order for a UBO (ultimate beneficial owner) discovery report
     * @param subjectId KYC API Id (32 byte hexid) of the company you want to place the order for (required)
     * @param callbackUrl An optional callback URL to which updates about the order will be sent (for instance if credits are exceeded) (optional)
     * @param credits Specify a maximum amount of credits which should be used. To disable use -1 (optional)
     * @param includeDocs Include purchase of register document to ubo report (optional)
     * @param levels Define a threshold for different levels of crawling (optional)
     * @param strategy Choose a matching strategy. Available options (FULL,LEVELS) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productOrderUbo(String subjectId, String callbackUrl, BigDecimal credits, Boolean includeDocs, String levels, String strategy) throws ApiException {
        productOrderUboWithHttpInfo(subjectId, callbackUrl, credits, includeDocs, levels, strategy);
    }

    /**
     * Places a UBO order
     * Place an order for a UBO (ultimate beneficial owner) discovery report
     * @param subjectId KYC API Id (32 byte hexid) of the company you want to place the order for (required)
     * @param callbackUrl An optional callback URL to which updates about the order will be sent (for instance if credits are exceeded) (optional)
     * @param credits Specify a maximum amount of credits which should be used. To disable use -1 (optional)
     * @param includeDocs Include purchase of register document to ubo report (optional)
     * @param levels Define a threshold for different levels of crawling (optional)
     * @param strategy Choose a matching strategy. Available options (FULL,LEVELS) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productOrderUboWithHttpInfo(String subjectId, String callbackUrl, BigDecimal credits, Boolean includeDocs, String levels, String strategy) throws ApiException {
        okhttp3.Call localVarCall = productOrderUboValidateBeforeCall(subjectId, callbackUrl, credits, includeDocs, levels, strategy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Places a UBO order (asynchronously)
     * Place an order for a UBO (ultimate beneficial owner) discovery report
     * @param subjectId KYC API Id (32 byte hexid) of the company you want to place the order for (required)
     * @param callbackUrl An optional callback URL to which updates about the order will be sent (for instance if credits are exceeded) (optional)
     * @param credits Specify a maximum amount of credits which should be used. To disable use -1 (optional)
     * @param includeDocs Include purchase of register document to ubo report (optional)
     * @param levels Define a threshold for different levels of crawling (optional)
     * @param strategy Choose a matching strategy. Available options (FULL,LEVELS) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderUboAsync(String subjectId, String callbackUrl, BigDecimal credits, Boolean includeDocs, String levels, String strategy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOrderUboValidateBeforeCall(subjectId, callbackUrl, credits, includeDocs, levels, strategy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOrderWithOption
     * @param sku SKU - 9 character value from a Product object (required)
     * @param option Product option (e.g. Accounts year) from a previous Availability call (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderWithOptionCall(String sku, String option, String subjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/order/{sku}/{option}/{subjectId}"
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()))
            .replace("{" + "option" + "}", localVarApiClient.escapeString(option.toString()))
            .replace("{" + "subjectId" + "}", localVarApiClient.escapeString(subjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOrderWithOptionValidateBeforeCall(String sku, String option, String subjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling productOrderWithOption(Async)");
        }

        // verify the required parameter 'option' is set
        if (option == null) {
            throw new ApiException("Missing the required parameter 'option' when calling productOrderWithOption(Async)");
        }

        // verify the required parameter 'subjectId' is set
        if (subjectId == null) {
            throw new ApiException("Missing the required parameter 'subjectId' when calling productOrderWithOption(Async)");
        }

        return productOrderWithOptionCall(sku, option, subjectId, _callback);

    }

    /**
     * Places a product order
     * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param option Product option (e.g. Accounts year) from a previous Availability call (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productOrderWithOption(String sku, String option, String subjectId) throws ApiException {
        productOrderWithOptionWithHttpInfo(sku, option, subjectId);
    }

    /**
     * Places a product order
     * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param option Product option (e.g. Accounts year) from a previous Availability call (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productOrderWithOptionWithHttpInfo(String sku, String option, String subjectId) throws ApiException {
        okhttp3.Call localVarCall = productOrderWithOptionValidateBeforeCall(sku, option, subjectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Places a product order (asynchronously)
     * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
     * @param sku SKU - 9 character value from a Product object (required)
     * @param option Product option (e.g. Accounts year) from a previous Availability call (required)
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOrderWithOptionAsync(String sku, String option, String subjectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOrderWithOptionValidateBeforeCall(sku, option, subjectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productRetrieve
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details for retrieval of a delivered product </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productRetrieveCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productRetrieveValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling productRetrieve(Async)");
        }

        return productRetrieveCall(orderId, _callback);

    }

    /**
     * Retrieves the result of an order
     * Retrieves the document or structured data associated with a completed order identified with its order id
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @return ProductRetrieve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details for retrieval of a delivered product </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductRetrieve200Response productRetrieve(String orderId) throws ApiException {
        ApiResponse<ProductRetrieve200Response> localVarResp = productRetrieveWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the result of an order
     * Retrieves the document or structured data associated with a completed order identified with its order id
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @return ApiResponse&lt;ProductRetrieve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details for retrieval of a delivered product </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductRetrieve200Response> productRetrieveWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = productRetrieveValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<ProductRetrieve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the result of an order (asynchronously)
     * Retrieves the document or structured data associated with a completed order identified with its order id
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details for retrieval of a delivered product </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productRetrieveAsync(String orderId, final ApiCallback<ProductRetrieve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productRetrieveValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<ProductRetrieve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSearch
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchCall(String subjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/search/{subjectId}"
            .replace("{" + "subjectId" + "}", localVarApiClient.escapeString(subjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSearchValidateBeforeCall(String subjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subjectId' is set
        if (subjectId == null) {
            throw new ApiException("Missing the required parameter 'subjectId' when calling productSearch(Async)");
        }

        return productSearchCall(subjectId, _callback);

    }

    /**
     * Returns a list of products
     * Search for possible products for a particular company identified by its id
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return List&lt;ProductSearch200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductSearch200ResponseInner> productSearch(String subjectId) throws ApiException {
        ApiResponse<List<ProductSearch200ResponseInner>> localVarResp = productSearchWithHttpInfo(subjectId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of products
     * Search for possible products for a particular company identified by its id
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @return ApiResponse&lt;List&lt;ProductSearch200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductSearch200ResponseInner>> productSearchWithHttpInfo(String subjectId) throws ApiException {
        okhttp3.Call localVarCall = productSearchValidateBeforeCall(subjectId, null);
        Type localVarReturnType = new TypeToken<List<ProductSearch200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of products (asynchronously)
     * Search for possible products for a particular company identified by its id
     * @param subjectId Subject (e.g. Company) ID - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchAsync(String subjectId, final ApiCallback<List<ProductSearch200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSearchValidateBeforeCall(subjectId, _callback);
        Type localVarReturnType = new TypeToken<List<ProductSearch200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productStatus
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productStatusCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/status/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productStatusValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling productStatus(Async)");
        }

        return productStatusCall(orderId, _callback);

    }

    /**
     * Returns metadata for a order
     * Retrieve the current status of an order identified by its order id
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productStatus(String orderId) throws ApiException {
        productStatusWithHttpInfo(orderId);
    }

    /**
     * Returns metadata for a order
     * Retrieve the current status of an order identified by its order id
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productStatusWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = productStatusValidateBeforeCall(orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns metadata for a order (asynchronously)
     * Retrieve the current status of an order identified by its order id
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productStatusAsync(String orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productStatusValidateBeforeCall(orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productUpdateAction
     * @param action The action you want to perform for the order (required)
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param credits Specify an amount of credits which should be added to the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productUpdateActionCall(String action, String orderId, BigDecimal credits, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/update/{action}/{orderId}"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (credits != null) {
            localVarFormParams.put("credits", credits);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productUpdateActionValidateBeforeCall(String action, String orderId, BigDecimal credits, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling productUpdateAction(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling productUpdateAction(Async)");
        }

        return productUpdateActionCall(action, orderId, credits, _callback);

    }

    /**
     * Updates metadata of an order
     * Update an existing order identified by its order id
     * @param action The action you want to perform for the order (required)
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param credits Specify an amount of credits which should be added to the order (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productUpdateAction(String action, String orderId, BigDecimal credits) throws ApiException {
        productUpdateActionWithHttpInfo(action, orderId, credits);
    }

    /**
     * Updates metadata of an order
     * Update an existing order identified by its order id
     * @param action The action you want to perform for the order (required)
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param credits Specify an amount of credits which should be added to the order (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productUpdateActionWithHttpInfo(String action, String orderId, BigDecimal credits) throws ApiException {
        okhttp3.Call localVarCall = productUpdateActionValidateBeforeCall(action, orderId, credits, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates metadata of an order (asynchronously)
     * Update an existing order identified by its order id
     * @param action The action you want to perform for the order (required)
     * @param orderId ID of the ProductOrder as returned from a /product/buy call - 32 character hex value (required)
     * @param credits Specify an amount of credits which should be added to the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productUpdateActionAsync(String action, String orderId, BigDecimal credits, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productUpdateActionValidateBeforeCall(action, orderId, credits, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
