/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PepRetrieve200ResponseResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:26.420924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PepRetrieve200ResponseResults {
  public static final String SERIALIZED_NAME_EXCERPTS = "Excerpts";
  @SerializedName(SERIALIZED_NAME_EXCERPTS)
  private String excerpts;

  public static final String SERIALIZED_NAME_RESULTS_U_R_L = "ResultsURL";
  @SerializedName(SERIALIZED_NAME_RESULTS_U_R_L)
  private String resultsURL;

  public static final String SERIALIZED_NAME_SEARCH_TYPE = "SearchType";
  @SerializedName(SERIALIZED_NAME_SEARCH_TYPE)
  private String searchType;

  public static final String SERIALIZED_NAME_SOURCE_AGENCY = "SourceAgency";
  @SerializedName(SERIALIZED_NAME_SOURCE_AGENCY)
  private String sourceAgency;

  public static final String SERIALIZED_NAME_SOURCE_ENTITY = "SourceEntity";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY)
  private String sourceEntity;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private Long sourceID;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "SourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public PepRetrieve200ResponseResults() {
  }

  public PepRetrieve200ResponseResults excerpts(String excerpts) {
    this.excerpts = excerpts;
    return this;
  }

  /**
   * Get excerpts
   * @return excerpts
   */
  @javax.annotation.Nullable
  public String getExcerpts() {
    return excerpts;
  }

  public void setExcerpts(String excerpts) {
    this.excerpts = excerpts;
  }


  public PepRetrieve200ResponseResults resultsURL(String resultsURL) {
    this.resultsURL = resultsURL;
    return this;
  }

  /**
   * Get resultsURL
   * @return resultsURL
   */
  @javax.annotation.Nullable
  public String getResultsURL() {
    return resultsURL;
  }

  public void setResultsURL(String resultsURL) {
    this.resultsURL = resultsURL;
  }


  public PepRetrieve200ResponseResults searchType(String searchType) {
    this.searchType = searchType;
    return this;
  }

  /**
   * Get searchType
   * @return searchType
   */
  @javax.annotation.Nullable
  public String getSearchType() {
    return searchType;
  }

  public void setSearchType(String searchType) {
    this.searchType = searchType;
  }


  public PepRetrieve200ResponseResults sourceAgency(String sourceAgency) {
    this.sourceAgency = sourceAgency;
    return this;
  }

  /**
   * Get sourceAgency
   * @return sourceAgency
   */
  @javax.annotation.Nullable
  public String getSourceAgency() {
    return sourceAgency;
  }

  public void setSourceAgency(String sourceAgency) {
    this.sourceAgency = sourceAgency;
  }


  public PepRetrieve200ResponseResults sourceEntity(String sourceEntity) {
    this.sourceEntity = sourceEntity;
    return this;
  }

  /**
   * Get sourceEntity
   * @return sourceEntity
   */
  @javax.annotation.Nullable
  public String getSourceEntity() {
    return sourceEntity;
  }

  public void setSourceEntity(String sourceEntity) {
    this.sourceEntity = sourceEntity;
  }


  public PepRetrieve200ResponseResults sourceID(Long sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Get sourceID
   * @return sourceID
   */
  @javax.annotation.Nullable
  public Long getSourceID() {
    return sourceID;
  }

  public void setSourceID(Long sourceID) {
    this.sourceID = sourceID;
  }


  public PepRetrieve200ResponseResults sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Get sourceName
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public PepRetrieve200ResponseResults sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PepRetrieve200ResponseResults pepRetrieve200ResponseResults = (PepRetrieve200ResponseResults) o;
    return Objects.equals(this.excerpts, pepRetrieve200ResponseResults.excerpts) &&
        Objects.equals(this.resultsURL, pepRetrieve200ResponseResults.resultsURL) &&
        Objects.equals(this.searchType, pepRetrieve200ResponseResults.searchType) &&
        Objects.equals(this.sourceAgency, pepRetrieve200ResponseResults.sourceAgency) &&
        Objects.equals(this.sourceEntity, pepRetrieve200ResponseResults.sourceEntity) &&
        Objects.equals(this.sourceID, pepRetrieve200ResponseResults.sourceID) &&
        Objects.equals(this.sourceName, pepRetrieve200ResponseResults.sourceName) &&
        Objects.equals(this.sourceType, pepRetrieve200ResponseResults.sourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excerpts, resultsURL, searchType, sourceAgency, sourceEntity, sourceID, sourceName, sourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PepRetrieve200ResponseResults {\n");
    sb.append("    excerpts: ").append(toIndentedString(excerpts)).append("\n");
    sb.append("    resultsURL: ").append(toIndentedString(resultsURL)).append("\n");
    sb.append("    searchType: ").append(toIndentedString(searchType)).append("\n");
    sb.append("    sourceAgency: ").append(toIndentedString(sourceAgency)).append("\n");
    sb.append("    sourceEntity: ").append(toIndentedString(sourceEntity)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Excerpts");
    openapiFields.add("ResultsURL");
    openapiFields.add("SearchType");
    openapiFields.add("SourceAgency");
    openapiFields.add("SourceEntity");
    openapiFields.add("SourceID");
    openapiFields.add("SourceName");
    openapiFields.add("SourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PepRetrieve200ResponseResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PepRetrieve200ResponseResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PepRetrieve200ResponseResults is not found in the empty JSON string", PepRetrieve200ResponseResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PepRetrieve200ResponseResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PepRetrieve200ResponseResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Excerpts") != null && !jsonObj.get("Excerpts").isJsonNull()) && !jsonObj.get("Excerpts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Excerpts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Excerpts").toString()));
      }
      if ((jsonObj.get("ResultsURL") != null && !jsonObj.get("ResultsURL").isJsonNull()) && !jsonObj.get("ResultsURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResultsURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResultsURL").toString()));
      }
      if ((jsonObj.get("SearchType") != null && !jsonObj.get("SearchType").isJsonNull()) && !jsonObj.get("SearchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchType").toString()));
      }
      if ((jsonObj.get("SourceAgency") != null && !jsonObj.get("SourceAgency").isJsonNull()) && !jsonObj.get("SourceAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceAgency").toString()));
      }
      if ((jsonObj.get("SourceEntity") != null && !jsonObj.get("SourceEntity").isJsonNull()) && !jsonObj.get("SourceEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceEntity").toString()));
      }
      if ((jsonObj.get("SourceName") != null && !jsonObj.get("SourceName").isJsonNull()) && !jsonObj.get("SourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceName").toString()));
      }
      if ((jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) && !jsonObj.get("SourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PepRetrieve200ResponseResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PepRetrieve200ResponseResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PepRetrieve200ResponseResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PepRetrieve200ResponseResults.class));

       return (TypeAdapter<T>) new TypeAdapter<PepRetrieve200ResponseResults>() {
           @Override
           public void write(JsonWriter out, PepRetrieve200ResponseResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PepRetrieve200ResponseResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PepRetrieve200ResponseResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PepRetrieve200ResponseResults
   * @throws IOException if the JSON string is invalid with respect to PepRetrieve200ResponseResults
   */
  public static PepRetrieve200ResponseResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PepRetrieve200ResponseResults.class);
  }

  /**
   * Convert an instance of PepRetrieve200ResponseResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

