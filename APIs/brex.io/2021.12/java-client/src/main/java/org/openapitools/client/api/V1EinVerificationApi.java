/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EinVerificationBasic200Response;
import org.openapitools.client.model.EinVerificationComprehensive200Response;
import org.openapitools.client.model.EinVerificationLookup200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1EinVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1EinVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1EinVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for einVerificationBasic
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call einVerificationBasicCall(String ein, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ein-verification/basic-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ein", ein));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call einVerificationBasicValidateBeforeCall(String ein, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ein' is set
        if (ein == null) {
            throw new ApiException("Missing the required parameter 'ein' when calling einVerificationBasic(Async)");
        }

        return einVerificationBasicCall(ein, _callback);

    }

    /**
     * Verifies an EIN number
     * Performs a basic verification check of a given EIN tax number.
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @return EinVerificationBasic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EinVerificationBasic200Response einVerificationBasic(String ein) throws ApiException {
        ApiResponse<EinVerificationBasic200Response> localVarResp = einVerificationBasicWithHttpInfo(ein);
        return localVarResp.getData();
    }

    /**
     * Verifies an EIN number
     * Performs a basic verification check of a given EIN tax number.
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @return ApiResponse&lt;EinVerificationBasic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EinVerificationBasic200Response> einVerificationBasicWithHttpInfo(String ein) throws ApiException {
        okhttp3.Call localVarCall = einVerificationBasicValidateBeforeCall(ein, null);
        Type localVarReturnType = new TypeToken<EinVerificationBasic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies an EIN number (asynchronously)
     * Performs a basic verification check of a given EIN tax number.
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a basic EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call einVerificationBasicAsync(String ein, final ApiCallback<EinVerificationBasic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = einVerificationBasicValidateBeforeCall(ein, _callback);
        Type localVarReturnType = new TypeToken<EinVerificationBasic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for einVerificationComprehensive
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call einVerificationComprehensiveCall(String ein, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ein-verification/comprehensive-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ein", ein));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call einVerificationComprehensiveValidateBeforeCall(String ein, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ein' is set
        if (ein == null) {
            throw new ApiException("Missing the required parameter 'ein' when calling einVerificationComprehensive(Async)");
        }

        return einVerificationComprehensiveCall(ein, _callback);

    }

    /**
     * Verifies EIN number and retrieves company data
     * Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @return EinVerificationComprehensive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EinVerificationComprehensive200Response einVerificationComprehensive(String ein) throws ApiException {
        ApiResponse<EinVerificationComprehensive200Response> localVarResp = einVerificationComprehensiveWithHttpInfo(ein);
        return localVarResp.getData();
    }

    /**
     * Verifies EIN number and retrieves company data
     * Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @return ApiResponse&lt;EinVerificationComprehensive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EinVerificationComprehensive200Response> einVerificationComprehensiveWithHttpInfo(String ein) throws ApiException {
        okhttp3.Call localVarCall = einVerificationComprehensiveValidateBeforeCall(ein, null);
        Type localVarReturnType = new TypeToken<EinVerificationComprehensive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies EIN number and retrieves company data (asynchronously)
     * Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
     * @param ein Nine letter EIN number with or without hyphens (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a comprehensive EIN number verification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call einVerificationComprehensiveAsync(String ein, final ApiCallback<EinVerificationComprehensive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = einVerificationComprehensiveValidateBeforeCall(ein, _callback);
        Type localVarReturnType = new TypeToken<EinVerificationComprehensive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for einVerificationLookup
     * @param name Business name of the company (required)
     * @param state Optional state parameter to improve results. (Two letter code for example CA or US-CA for California) (optional)
     * @param zip Optional zip code parameter to improve results. (Zip is preferred over state) (optional)
     * @param tight Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN reverse lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call einVerificationLookupCall(String name, String state, String zip, Boolean tight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ein-verification/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (tight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tight", tight));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call einVerificationLookupValidateBeforeCall(String name, String state, String zip, Boolean tight, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling einVerificationLookup(Async)");
        }

        return einVerificationLookupCall(name, state, zip, tight, _callback);

    }

    /**
     * Retrieves a list of EIN numbers
     * Lookup EIN number for a company by its company name
     * @param name Business name of the company (required)
     * @param state Optional state parameter to improve results. (Two letter code for example CA or US-CA for California) (optional)
     * @param zip Optional zip code parameter to improve results. (Zip is preferred over state) (optional)
     * @param tight Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5) (optional)
     * @return EinVerificationLookup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN reverse lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EinVerificationLookup200Response einVerificationLookup(String name, String state, String zip, Boolean tight) throws ApiException {
        ApiResponse<EinVerificationLookup200Response> localVarResp = einVerificationLookupWithHttpInfo(name, state, zip, tight);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of EIN numbers
     * Lookup EIN number for a company by its company name
     * @param name Business name of the company (required)
     * @param state Optional state parameter to improve results. (Two letter code for example CA or US-CA for California) (optional)
     * @param zip Optional zip code parameter to improve results. (Zip is preferred over state) (optional)
     * @param tight Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5) (optional)
     * @return ApiResponse&lt;EinVerificationLookup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN reverse lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EinVerificationLookup200Response> einVerificationLookupWithHttpInfo(String name, String state, String zip, Boolean tight) throws ApiException {
        okhttp3.Call localVarCall = einVerificationLookupValidateBeforeCall(name, state, zip, tight, null);
        Type localVarReturnType = new TypeToken<EinVerificationLookup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of EIN numbers (asynchronously)
     * Lookup EIN number for a company by its company name
     * @param name Business name of the company (required)
     * @param state Optional state parameter to improve results. (Two letter code for example CA or US-CA for California) (optional)
     * @param zip Optional zip code parameter to improve results. (Zip is preferred over state) (optional)
     * @param tight Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of a EIN reverse lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call einVerificationLookupAsync(String name, String state, String zip, Boolean tight, final ApiCallback<EinVerificationLookup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = einVerificationLookupValidateBeforeCall(name, state, zip, tight, _callback);
        Type localVarReturnType = new TypeToken<EinVerificationLookup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
