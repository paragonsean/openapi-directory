/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductNotifierCreate200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:26.420924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductNotifierCreate200Response {
  public static final String SERIALIZED_NAME_CALLBACK = "callback";
  @SerializedName(SERIALIZED_NAME_CALLBACK)
  private String callback;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private String identity;

  public static final String SERIALIZED_NAME_LAST_CALL_TIME = "lastCallTime";
  @SerializedName(SERIALIZED_NAME_LAST_CALL_TIME)
  private Object lastCallTime = null;

  public static final String SERIALIZED_NAME_LAST_RESPONSE_CODE = "lastResponseCode";
  @SerializedName(SERIALIZED_NAME_LAST_RESPONSE_CODE)
  private Integer lastResponseCode;

  public static final String SERIALIZED_NAME_NOTIFIER_TYPE = "notifierType";
  @SerializedName(SERIALIZED_NAME_NOTIFIER_TYPE)
  private String notifierType;

  public static final String SERIALIZED_NAME_PRODUCT_ORDER_IDENTITY = "productOrderIdentity";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ORDER_IDENTITY)
  private String productOrderIdentity;

  public ProductNotifierCreate200Response() {
  }

  public ProductNotifierCreate200Response callback(String callback) {
    this.callback = callback;
    return this;
  }

  /**
   * Get callback
   * @return callback
   */
  @javax.annotation.Nonnull
  public String getCallback() {
    return callback;
  }

  public void setCallback(String callback) {
    this.callback = callback;
  }


  public ProductNotifierCreate200Response identity(String identity) {
    this.identity = identity;
    return this;
  }

  /**
   * Get identity
   * @return identity
   */
  @javax.annotation.Nullable
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }


  public ProductNotifierCreate200Response lastCallTime(Object lastCallTime) {
    this.lastCallTime = lastCallTime;
    return this;
  }

  /**
   * Get lastCallTime
   * @return lastCallTime
   */
  @javax.annotation.Nonnull
  public Object getLastCallTime() {
    return lastCallTime;
  }

  public void setLastCallTime(Object lastCallTime) {
    this.lastCallTime = lastCallTime;
  }


  public ProductNotifierCreate200Response lastResponseCode(Integer lastResponseCode) {
    this.lastResponseCode = lastResponseCode;
    return this;
  }

  /**
   * Get lastResponseCode
   * @return lastResponseCode
   */
  @javax.annotation.Nonnull
  public Integer getLastResponseCode() {
    return lastResponseCode;
  }

  public void setLastResponseCode(Integer lastResponseCode) {
    this.lastResponseCode = lastResponseCode;
  }


  public ProductNotifierCreate200Response notifierType(String notifierType) {
    this.notifierType = notifierType;
    return this;
  }

  /**
   * Get notifierType
   * @return notifierType
   */
  @javax.annotation.Nonnull
  public String getNotifierType() {
    return notifierType;
  }

  public void setNotifierType(String notifierType) {
    this.notifierType = notifierType;
  }


  public ProductNotifierCreate200Response productOrderIdentity(String productOrderIdentity) {
    this.productOrderIdentity = productOrderIdentity;
    return this;
  }

  /**
   * Get productOrderIdentity
   * @return productOrderIdentity
   */
  @javax.annotation.Nonnull
  public String getProductOrderIdentity() {
    return productOrderIdentity;
  }

  public void setProductOrderIdentity(String productOrderIdentity) {
    this.productOrderIdentity = productOrderIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductNotifierCreate200Response productNotifierCreate200Response = (ProductNotifierCreate200Response) o;
    return Objects.equals(this.callback, productNotifierCreate200Response.callback) &&
        Objects.equals(this.identity, productNotifierCreate200Response.identity) &&
        Objects.equals(this.lastCallTime, productNotifierCreate200Response.lastCallTime) &&
        Objects.equals(this.lastResponseCode, productNotifierCreate200Response.lastResponseCode) &&
        Objects.equals(this.notifierType, productNotifierCreate200Response.notifierType) &&
        Objects.equals(this.productOrderIdentity, productNotifierCreate200Response.productOrderIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callback, identity, lastCallTime, lastResponseCode, notifierType, productOrderIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductNotifierCreate200Response {\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    lastCallTime: ").append(toIndentedString(lastCallTime)).append("\n");
    sb.append("    lastResponseCode: ").append(toIndentedString(lastResponseCode)).append("\n");
    sb.append("    notifierType: ").append(toIndentedString(notifierType)).append("\n");
    sb.append("    productOrderIdentity: ").append(toIndentedString(productOrderIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback");
    openapiFields.add("identity");
    openapiFields.add("lastCallTime");
    openapiFields.add("lastResponseCode");
    openapiFields.add("notifierType");
    openapiFields.add("productOrderIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callback");
    openapiRequiredFields.add("lastCallTime");
    openapiRequiredFields.add("lastResponseCode");
    openapiRequiredFields.add("notifierType");
    openapiRequiredFields.add("productOrderIdentity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductNotifierCreate200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductNotifierCreate200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductNotifierCreate200Response is not found in the empty JSON string", ProductNotifierCreate200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductNotifierCreate200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductNotifierCreate200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductNotifierCreate200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("callback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback").toString()));
      }
      if ((jsonObj.get("identity") != null && !jsonObj.get("identity").isJsonNull()) && !jsonObj.get("identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity").toString()));
      }
      if (!jsonObj.get("notifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifierType").toString()));
      }
      if (!jsonObj.get("productOrderIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productOrderIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productOrderIdentity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductNotifierCreate200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductNotifierCreate200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductNotifierCreate200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductNotifierCreate200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductNotifierCreate200Response>() {
           @Override
           public void write(JsonWriter out, ProductNotifierCreate200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductNotifierCreate200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductNotifierCreate200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductNotifierCreate200Response
   * @throws IOException if the JSON string is invalid with respect to ProductNotifierCreate200Response
   */
  public static ProductNotifierCreate200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductNotifierCreate200Response.class);
  }

  /**
   * Convert an instance of ProductNotifierCreate200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

