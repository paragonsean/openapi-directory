/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompanyAnnouncement200ResponseInner;
import org.openapitools.client.model.CompanyDeepsearchISIN200ResponseInner;
import org.openapitools.client.model.CompanyDeepsearchLEI200Response;
import org.openapitools.client.model.CompanyNotificationId200ResponseInner;
import org.openapitools.client.model.CompanyNotificationRegister200Response;
import org.openapitools.client.model.CompanySearchName200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1CompanyApi
 */
@Disabled
public class V1CompanyApiTest {

    private final V1CompanyApi api = new V1CompanyApi();

    /**
     * Retrieves a list of companies from the KYC API company index
     *
     * KYC API company index lookup by country and mixed parameters. This function requires a country code then a mixture of name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyAlternativeSearchTest() throws ApiException {
        String country = null;
        String address = null;
        String name = null;
        String number = null;
        String phone = null;
        String url = null;
        String vat = null;
        api.companyAlternativeSearch(country, address, name, number, phone, url, vat);
        // TODO: test validations
    }

    /**
     * Retrieves announcement data
     *
     * Request full announcement data identified by announcement id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyAnnouncementTest() throws ApiException {
        String id = null;
        List<CompanyAnnouncement200ResponseInner> response = api.companyAnnouncement(id);
        // TODO: test validations
    }

    /**
     * Retrieves a list of stock exchange listings
     *
     * Lookup stock exchange listings identified by an ISIN (International Securities Identification Number) number. Search is forwarded to a provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyDeepsearchISINTest() throws ApiException {
        String isin = null;
        List<CompanyDeepsearchISIN200ResponseInner> response = api.companyDeepsearchISIN(isin);
        // TODO: test validations
    }

    /**
     * Retrieves a list of companies
     *
     * Lookup companies identified by a LEI (Legal Entity Identifier) number. Search is forwarded to a provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyDeepsearchLEITest() throws ApiException {
        String number = null;
        Integer page = null;
        CompanyDeepsearchLEI200Response response = api.companyDeepsearchLEI(number, page);
        // TODO: test validations
    }

    /**
     * Retrieves a list of companies from the official business register
     *
     * Search for companies with a certain name. Search is forwarded to the respective business register of the country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyDeepsearchNameTest() throws ApiException {
        String country = null;
        String name = null;
        api.companyDeepsearchName(country, name);
        // TODO: test validations
    }

    /**
     * Retrieves a list of companies from the official business register
     *
     * Search for companies with a certain register number. Search is forwarded to the respective business register of the country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyDeepsearchNumberTest() throws ApiException {
        String country = null;
        String number = null;
        api.companyDeepsearchNumber(country, number);
        // TODO: test validations
    }

    /**
     * Retrieves company announcements
     *
     * Search announcements filed to the business register from a company identified by an id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyIdAnnouncementsTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Boolean data = null;
        api.companyIdAnnouncements(id, limit, offset, data);
        // TODO: test validations
    }

    /**
     * Retrieves company details
     *
     * Get company details by id. The level of details is defined by the dataset parameter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyIdDatasetTest() throws ApiException {
        String id = null;
        String dataset = null;
        Boolean checkStockListing = null;
        String lang = null;
        Object response = api.companyIdDataset(id, dataset, checkStockListing, lang);
        // TODO: test validations
    }

    /**
     * Retrieves structured data extracted from a company document
     *
     * Request company superdata identified by company id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyIdSuperTest() throws ApiException {
        String id = null;
        String country = null;
        String lang = null;
        api.companyIdSuper(id, country, lang);
        // TODO: test validations
    }

    /**
     * Get available ChangeTypes
     *
     * Get current list of available ChangeTypes to subscribe to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyMonitorChangeTypesListTest() throws ApiException {
        List<String> response = api.companyMonitorChangeTypesList();
        // TODO: test validations
    }

    /**
     * Get monitor status for specific company id
     *
     * Query status of registered monitors for a specific company identified by a company id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyMonitorIdTest() throws ApiException {
        String id = null;
        api.companyMonitorId(id);
        // TODO: test validations
    }

    /**
     * Retrieves a list of registered monitors
     *
     * Query list of all registered monitors for logged in user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyMonitorListTest() throws ApiException {
        api.companyMonitorList();
        // TODO: test validations
    }

    /**
     * Register a Company for monitoring
     *
     * Add a company to your perpetual monitoring list and register a callback URL to get monitoring alerts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyMonitorRegisterTest() throws ApiException {
        String id = null;
        String callbackUrl = null;
        String changeType = null;
        api.companyMonitorRegister(id, callbackUrl, changeType);
        // TODO: test validations
    }

    /**
     * Deactivates an active notification
     *
     * Deactivate a previously registered company monitor identified by the notifier id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyMonitorUnregisterTest() throws ApiException {
        String id = null;
        api.companyMonitorUnregister(id);
        // TODO: test validations
    }

    /**
     * Retrieves a list of registered notifications
     *
     * Query list of registered notifications for a specific company identified by a company id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyNotificationIdTest() throws ApiException {
        String id = null;
        List<CompanyNotificationId200ResponseInner> response = api.companyNotificationId(id);
        // TODO: test validations
    }

    /**
     * Retrieves a list of registered notifications
     *
     * Query list of registered callback URLs for logged in user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyNotificationListTest() throws ApiException {
        api.companyNotificationList();
        // TODO: test validations
    }

    /**
     * Creates a new notification
     *
     * Register a new callback URL to get notifications about companies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyNotificationRegisterTest() throws ApiException {
        String id = null;
        String callbackUrl = null;
        CompanyNotificationRegister200Response response = api.companyNotificationRegister(id, callbackUrl);
        // TODO: test validations
    }

    /**
     * Unregister a company from Monitoring
     *
     * Deactivate a previously registered company monitor identified by the notifier id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyNotificationUnregisterTest() throws ApiException {
        String id = null;
        api.companyNotificationUnregister(id);
        // TODO: test validations
    }

    /**
     * Retrieves a list of companies from the KYC API company index
     *
     * KYC API company index lookup for companies with a certain name in a country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companySearchNameTest() throws ApiException {
        String country = null;
        String name = null;
        Long limit = null;
        List<CompanySearchName200ResponseInner> response = api.companySearchName(country, name, limit);
        // TODO: test validations
    }

    /**
     * Retrieves a list of companies from the KYC API company index
     *
     * KYC API company index lookup for companies with a certain register number in a country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companySearchNumberTest() throws ApiException {
        String country = null;
        String number = null;
        Long limit = null;
        api.companySearchNumber(country, number, limit);
        // TODO: test validations
    }

}
