/*
 * KYC API Documentation
 * API Interface to retrieve company data and products from business registers
 *
 * The version of the OpenAPI document: 2021.12
 * Contact: support@kompany.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ProductAvailability200Response;
import org.openapitools.client.model.ProductCatalog200Response;
import org.openapitools.client.model.ProductNotifierCreate200Response;
import org.openapitools.client.model.ProductOrder200Response;
import org.openapitools.client.model.ProductRetrieve200Response;
import org.openapitools.client.model.ProductSearch200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1ProductApi
 */
@Disabled
public class V1ProductApiTest {

    private final V1ProductApi api = new V1ProductApi();

    /**
     * Retrieves a document availability result
     *
     * Check availability and valid options for a particular product for a particular company identfied by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productAvailabilityTest() throws ApiException {
        String sku = null;
        String subjectId = null;
        ProductAvailability200Response response = api.productAvailability(sku, subjectId);
        // TODO: test validations
    }

    /**
     * Returns a catalog of products
     *
     * Returns a catalog of purchasable products available with some metadata for a particular country
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCatalogTest() throws ApiException {
        String country = null;
        ProductCatalog200Response response = api.productCatalog(country);
        // TODO: test validations
    }

    /**
     * Returns metadata for a notifier
     *
     * Queries and returns all metadata associated with a notifier identified by its notifer id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productNotifierTest() throws ApiException {
        String notifierId = null;
        api.productNotifier(notifierId);
        // TODO: test validations
    }

    /**
     * Creates a notifier for an order
     *
     * Create a notifier for a particular order. Parameters can be supplied in the path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productNotifierCreateTest() throws ApiException {
        String orderId = null;
        String type = null;
        String uri = null;
        ProductNotifierCreate200Response response = api.productNotifierCreate(orderId, type, uri);
        // TODO: test validations
    }

    /**
     * Places a product order
     *
     * Place an order for a particular product identified by its SKU for a particular company identified by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOrderTest() throws ApiException {
        String sku = null;
        String subjectId = null;
        ProductOrder200Response response = api.productOrder(sku, subjectId);
        // TODO: test validations
    }

    /**
     * Places a concierge order
     *
     * Place an order for a concierge product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOrderConciergeTest() throws ApiException {
        String companyName = null;
        String contactEmail = null;
        String contactPhone = null;
        Boolean costConfirmation = null;
        String country = null;
        Boolean financialData = null;
        Boolean historicInformation = null;
        String informationRequirements = null;
        Boolean locationInvestigation = null;
        String priority = null;
        Boolean registerData = null;
        String registerNumber = null;
        String subjectId = null;
        api.productOrderConcierge(companyName, contactEmail, contactPhone, costConfirmation, country, financialData, historicInformation, informationRequirements, locationInvestigation, priority, registerData, registerNumber, subjectId);
        // TODO: test validations
    }

    /**
     * Places a UBO order
     *
     * Place an order for a UBO (ultimate beneficial owner) discovery report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOrderUboTest() throws ApiException {
        String subjectId = null;
        String callbackUrl = null;
        BigDecimal credits = null;
        Boolean includeDocs = null;
        String levels = null;
        String strategy = null;
        api.productOrderUbo(subjectId, callbackUrl, credits, includeDocs, levels, strategy);
        // TODO: test validations
    }

    /**
     * Places a product order
     *
     * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOrderWithOptionTest() throws ApiException {
        String sku = null;
        String option = null;
        String subjectId = null;
        api.productOrderWithOption(sku, option, subjectId);
        // TODO: test validations
    }

    /**
     * Retrieves the result of an order
     *
     * Retrieves the document or structured data associated with a completed order identified with its order id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productRetrieveTest() throws ApiException {
        String orderId = null;
        ProductRetrieve200Response response = api.productRetrieve(orderId);
        // TODO: test validations
    }

    /**
     * Returns a list of products
     *
     * Search for possible products for a particular company identified by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchTest() throws ApiException {
        String subjectId = null;
        List<ProductSearch200ResponseInner> response = api.productSearch(subjectId);
        // TODO: test validations
    }

    /**
     * Returns metadata for a order
     *
     * Retrieve the current status of an order identified by its order id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productStatusTest() throws ApiException {
        String orderId = null;
        api.productStatus(orderId);
        // TODO: test validations
    }

    /**
     * Updates metadata of an order
     *
     * Update an existing order identified by its order id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productUpdateActionTest() throws ApiException {
        String action = null;
        String orderId = null;
        BigDecimal credits = null;
        api.productUpdateAction(action, orderId, credits);
        // TODO: test validations
    }

}
