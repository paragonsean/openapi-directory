/**
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideoApi_H
#define OAI_OAIVideoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorObject.h"
#include "OAIObject.h"
#include "OAIStreamInformationObject.h"
#include "OAIUploadParameterObject.h"
#include "OAIUploaderInformationObject.h"
#include "OAIVideoObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideoApi : public QObject {
    Q_OBJECT

public:
    OAIVideoApi(const int timeOut = 0);
    ~OAIVideoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  userdata QString [optional]
    */
    virtual void create(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &userdata = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  video_id QString [required]
    */
    virtual void details(const QString &api_key, const QString &video_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void query(const QString &api_key, const QString &filter);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  video_id QString [required]
    */
    virtual void stream(const QString &api_key, const QString &video_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  video_id QString [required]
    * @param[in]  source QString [required]
    */
    virtual void update(const QString &api_key, const QString &video_id, const QString &source);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  video_id QString [required]
    */
    virtual void upload(const QString &api_key, const QString &video_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  video_id QString [required]
    * @param[in]  timeout QString [optional]
    */
    virtual void uploader(const QString &api_key, const QString &video_id, const ::OpenAPI::OptionalParam<QString> &timeout = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCallback(OAIHttpRequestWorker *worker);
    void detailsCallback(OAIHttpRequestWorker *worker);
    void queryCallback(OAIHttpRequestWorker *worker);
    void streamCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);
    void uploadCallback(OAIHttpRequestWorker *worker);
    void uploaderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSignal(OAIVideoObject summary);
    void detailsSignal(OAIVideoObject summary);
    void querySignal(QList<OAIObject> summary);
    void streamSignal(OAIStreamInformationObject summary);
    void updateSignal(OAIVideoObject summary);
    void uploadSignal(OAIUploadParameterObject summary);
    void uploaderSignal(OAIUploaderInformationObject summary);


    void createSignalFull(OAIHttpRequestWorker *worker, OAIVideoObject summary);
    void detailsSignalFull(OAIHttpRequestWorker *worker, OAIVideoObject summary);
    void querySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void streamSignalFull(OAIHttpRequestWorker *worker, OAIStreamInformationObject summary);
    void updateSignalFull(OAIHttpRequestWorker *worker, OAIVideoObject summary);
    void uploadSignalFull(OAIHttpRequestWorker *worker, OAIUploadParameterObject summary);
    void uploaderSignalFull(OAIHttpRequestWorker *worker, OAIUploaderInformationObject summary);

    Q_DECL_DEPRECATED_X("Use createSignalError() instead")
    void createSignalE(OAIVideoObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSignalError(OAIVideoObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailsSignalError() instead")
    void detailsSignalE(OAIVideoObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detailsSignalError(OAIVideoObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySignalError() instead")
    void querySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void querySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSignalError() instead")
    void streamSignalE(OAIStreamInformationObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSignalError(OAIStreamInformationObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(OAIVideoObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(OAIVideoObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadSignalError() instead")
    void uploadSignalE(OAIUploadParameterObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadSignalError(OAIUploadParameterObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploaderSignalError() instead")
    void uploaderSignalE(OAIUploaderInformationObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploaderSignalError(OAIUploaderInformationObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSignalErrorFull() instead")
    void createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailsSignalErrorFull() instead")
    void detailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySignalErrorFull() instead")
    void querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSignalErrorFull() instead")
    void streamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadSignalErrorFull() instead")
    void uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploaderSignalErrorFull() instead")
    void uploaderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploaderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
