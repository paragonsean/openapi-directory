/**
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorObject::OAIErrorObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorObject::OAIErrorObject() {
    this->initializeModel();
}

OAIErrorObject::~OAIErrorObject() {}

void OAIErrorObject::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIErrorObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorObject::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIErrorObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorObject::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIObject OAIErrorObject::getDetails() const {
    return m_details;
}
void OAIErrorObject::setDetails(const OAIObject &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIErrorObject::is_details_Set() const{
    return m_details_isSet;
}

bool OAIErrorObject::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIErrorObject::getMessage() const {
    return m_message;
}
void OAIErrorObject::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorObject::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorObject::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIErrorObject::getName() const {
    return m_name;
}
void OAIErrorObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIErrorObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIErrorObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIErrorObject::getUrl() const {
    return m_url;
}
void OAIErrorObject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIErrorObject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIErrorObject::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIErrorObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
