/**
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadParameterObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadParameterObject::OAIUploadParameterObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadParameterObject::OAIUploadParameterObject() {
    this->initializeModel();
}

OAIUploadParameterObject::~OAIUploadParameterObject() {}

void OAIUploadParameterObject::initializeModel() {

    m_aws_access_key_id_isSet = false;
    m_aws_access_key_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_acl_isSet = false;
    m_acl_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIUploadParameterObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadParameterObject::fromJsonObject(QJsonObject json) {

    m_aws_access_key_id_isValid = ::OpenAPI::fromJsonValue(m_aws_access_key_id, json[QString("AWSAccessKeyId")]);
    m_aws_access_key_id_isSet = !json[QString("AWSAccessKeyId")].isNull() && m_aws_access_key_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("Content-Type")]);
    m_content_type_isSet = !json[QString("Content-Type")].isNull() && m_content_type_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("Signature")]);
    m_signature_isSet = !json[QString("Signature")].isNull() && m_signature_isValid;

    m_acl_isValid = ::OpenAPI::fromJsonValue(m_acl, json[QString("acl")]);
    m_acl_isSet = !json[QString("acl")].isNull() && m_acl_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIUploadParameterObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadParameterObject::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_access_key_id_isSet) {
        obj.insert(QString("AWSAccessKeyId"), ::OpenAPI::toJsonValue(m_aws_access_key_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("Content-Type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_signature_isSet) {
        obj.insert(QString("Signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_acl_isSet) {
        obj.insert(QString("acl"), ::OpenAPI::toJsonValue(m_acl));
    }
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIUploadParameterObject::getAwsAccessKeyId() const {
    return m_aws_access_key_id;
}
void OAIUploadParameterObject::setAwsAccessKeyId(const QString &aws_access_key_id) {
    m_aws_access_key_id = aws_access_key_id;
    m_aws_access_key_id_isSet = true;
}

bool OAIUploadParameterObject::is_aws_access_key_id_Set() const{
    return m_aws_access_key_id_isSet;
}

bool OAIUploadParameterObject::is_aws_access_key_id_Valid() const{
    return m_aws_access_key_id_isValid;
}

QString OAIUploadParameterObject::getContentType() const {
    return m_content_type;
}
void OAIUploadParameterObject::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIUploadParameterObject::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIUploadParameterObject::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIUploadParameterObject::getPolicy() const {
    return m_policy;
}
void OAIUploadParameterObject::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUploadParameterObject::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUploadParameterObject::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIUploadParameterObject::getSignature() const {
    return m_signature;
}
void OAIUploadParameterObject::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIUploadParameterObject::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIUploadParameterObject::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIUploadParameterObject::getAcl() const {
    return m_acl;
}
void OAIUploadParameterObject::setAcl(const QString &acl) {
    m_acl = acl;
    m_acl_isSet = true;
}

bool OAIUploadParameterObject::is_acl_Set() const{
    return m_acl_isSet;
}

bool OAIUploadParameterObject::is_acl_Valid() const{
    return m_acl_isValid;
}

QString OAIUploadParameterObject::getAction() const {
    return m_action;
}
void OAIUploadParameterObject::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUploadParameterObject::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUploadParameterObject::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIUploadParameterObject::getKey() const {
    return m_key;
}
void OAIUploadParameterObject::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUploadParameterObject::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUploadParameterObject::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIUploadParameterObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_access_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadParameterObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
