/*
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.StreamInformationObject;
import org.openapitools.client.model.UploadParameterObject;
import org.openapitools.client.model.UploaderInformationObject;
import org.openapitools.client.model.VideoObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideoApi
 */
@Disabled
public class VideoApiTest {

    private final VideoApi api = new VideoApi();

    /**
     * Create a new video, optionally setting some metadata fields.
     *
     * Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \&quot;userdata\&quot; field can be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String apiKey = null;
        String userdata = null;
        VideoObject response = api.create(apiKey, userdata);
        // TODO: test validations
    }

    /**
     * Return details about a video.
     *
     * Return details about a video. You may optionally request that only some of the metadata fields are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detailsTest() throws ApiException {
        String apiKey = null;
        String videoId = null;
        VideoObject response = api.details(apiKey, videoId);
        // TODO: test validations
    }

    /**
     * Perform a JavaScript query to return video objects matching any desired criteria.
     *
     * Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        String apiKey = null;
        String filter = null;
        List<Object> response = api.query(apiKey, filter);
        // TODO: test validations
    }

    /**
     * Returns urls for streaming.
     *
     * Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamTest() throws ApiException {
        String apiKey = null;
        String videoId = null;
        StreamInformationObject response = api.stream(apiKey, videoId);
        // TODO: test validations
    }

    /**
     * Update a video&#39;s metadata.
     *
     * Update a video&#39;s metadata through JavaScript code. Only fields inside the \&quot;userdata\&quot; object can be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String apiKey = null;
        String videoId = null;
        String source = null;
        VideoObject response = api.update(apiKey, videoId, source);
        // TODO: test validations
    }

    /**
     * Return parameters needed for uploading a video file.
     *
     * Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples. #### *Example request* &#x60;&#x60;&#x60;shell curl -s https://api.synq.fm/v1/video/upload \\   -F api_key&#x3D;${SYNQ_API_KEY} \\   -F video_id&#x3D;2d81c30ce62f4dfdb501dbca96c7ae56 &#x60;&#x60;&#x60;  #### *Example response* &#x60;&#x60;&#x60;json {   \&quot;action\&quot;: \&quot;https://synqfm.s3.amazonaws.com/\&quot;,   \&quot;AWSAccessKeyId\&quot;: \&quot;AKIAIP77Y7MMX3ITZMFA\&quot;,   \&quot;Content-Type\&quot;: \&quot;video/mp4\&quot;,   \&quot;Policy\&quot;: \&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot;,   \&quot;Signature\&quot;: \&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot;,   \&quot;acl\&quot;: \&quot;public-read\&quot;,   \&quot;key\&quot;: \&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; } &#x60;&#x60;&#x60;  To upload the file, you can then make a multipart POST request to the URL in &#x60;action&#x60;, and for all the other parameters returned, set them as form parameters.  Given the parameters above, you would upload a file &#x60;test.mp4&#x60; using cURL like this:  &#x60;&#x60;&#x60;shell curl -s https://synqfm.s3.amazonaws.com/ \\   -F AWSAccessKeyId&#x3D;\&quot;AKIAIP77Y7MMX3ITZMFA\&quot; \\   -F Content-Type&#x3D;\&quot;video/mp4\&quot; \\   -F Policy&#x3D;\&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot; \\   -F Signature&#x3D;\&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot; \\   -F acl&#x3D;\&quot;public-read\&quot; \\   -F key&#x3D;\&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; \\   -F file&#x3D;\&quot;@my_video_file.mp4\&quot; &#x60;&#x60;&#x60;  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadTest() throws ApiException {
        String apiKey = null;
        String videoId = null;
        UploadParameterObject response = api.upload(apiKey, videoId);
        // TODO: test validations
    }

    /**
     * Return embeddable url to an uploader widget
     *
     * Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploaderTest() throws ApiException {
        String apiKey = null;
        String videoId = null;
        String timeout = null;
        UploaderInformationObject response = api.uploader(apiKey, videoId, timeout);
        // TODO: test validations
    }

}
