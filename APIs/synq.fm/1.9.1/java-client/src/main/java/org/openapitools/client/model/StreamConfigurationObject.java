/*
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamConfigurationObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.338355-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamConfigurationObject {
  public static final String SERIALIZED_NAME_RTMP_HOST = "rtmp_host";
  @SerializedName(SERIALIZED_NAME_RTMP_HOST)
  private String rtmpHost;

  public static final String SERIALIZED_NAME_RTMP_KEY = "rtmp_key";
  @SerializedName(SERIALIZED_NAME_RTMP_KEY)
  private String rtmpKey;

  public static final String SERIALIZED_NAME_RTMP_PORT = "rtmp_port";
  @SerializedName(SERIALIZED_NAME_RTMP_PORT)
  private String rtmpPort;

  public static final String SERIALIZED_NAME_RTMP_URL = "rtmp_url";
  @SerializedName(SERIALIZED_NAME_RTMP_URL)
  private String rtmpUrl;

  public StreamConfigurationObject() {
  }

  public StreamConfigurationObject rtmpHost(String rtmpHost) {
    this.rtmpHost = rtmpHost;
    return this;
  }

  /**
   * Get rtmpHost
   * @return rtmpHost
   */
  @javax.annotation.Nullable
  public String getRtmpHost() {
    return rtmpHost;
  }

  public void setRtmpHost(String rtmpHost) {
    this.rtmpHost = rtmpHost;
  }


  public StreamConfigurationObject rtmpKey(String rtmpKey) {
    this.rtmpKey = rtmpKey;
    return this;
  }

  /**
   * Get rtmpKey
   * @return rtmpKey
   */
  @javax.annotation.Nullable
  public String getRtmpKey() {
    return rtmpKey;
  }

  public void setRtmpKey(String rtmpKey) {
    this.rtmpKey = rtmpKey;
  }


  public StreamConfigurationObject rtmpPort(String rtmpPort) {
    this.rtmpPort = rtmpPort;
    return this;
  }

  /**
   * Get rtmpPort
   * @return rtmpPort
   */
  @javax.annotation.Nullable
  public String getRtmpPort() {
    return rtmpPort;
  }

  public void setRtmpPort(String rtmpPort) {
    this.rtmpPort = rtmpPort;
  }


  public StreamConfigurationObject rtmpUrl(String rtmpUrl) {
    this.rtmpUrl = rtmpUrl;
    return this;
  }

  /**
   * Get rtmpUrl
   * @return rtmpUrl
   */
  @javax.annotation.Nullable
  public String getRtmpUrl() {
    return rtmpUrl;
  }

  public void setRtmpUrl(String rtmpUrl) {
    this.rtmpUrl = rtmpUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamConfigurationObject streamConfigurationObject = (StreamConfigurationObject) o;
    return Objects.equals(this.rtmpHost, streamConfigurationObject.rtmpHost) &&
        Objects.equals(this.rtmpKey, streamConfigurationObject.rtmpKey) &&
        Objects.equals(this.rtmpPort, streamConfigurationObject.rtmpPort) &&
        Objects.equals(this.rtmpUrl, streamConfigurationObject.rtmpUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rtmpHost, rtmpKey, rtmpPort, rtmpUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamConfigurationObject {\n");
    sb.append("    rtmpHost: ").append(toIndentedString(rtmpHost)).append("\n");
    sb.append("    rtmpKey: ").append(toIndentedString(rtmpKey)).append("\n");
    sb.append("    rtmpPort: ").append(toIndentedString(rtmpPort)).append("\n");
    sb.append("    rtmpUrl: ").append(toIndentedString(rtmpUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rtmp_host");
    openapiFields.add("rtmp_key");
    openapiFields.add("rtmp_port");
    openapiFields.add("rtmp_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamConfigurationObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamConfigurationObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamConfigurationObject is not found in the empty JSON string", StreamConfigurationObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamConfigurationObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamConfigurationObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("rtmp_host") != null && !jsonObj.get("rtmp_host").isJsonNull()) && !jsonObj.get("rtmp_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmp_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmp_host").toString()));
      }
      if ((jsonObj.get("rtmp_key") != null && !jsonObj.get("rtmp_key").isJsonNull()) && !jsonObj.get("rtmp_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmp_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmp_key").toString()));
      }
      if ((jsonObj.get("rtmp_port") != null && !jsonObj.get("rtmp_port").isJsonNull()) && !jsonObj.get("rtmp_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmp_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmp_port").toString()));
      }
      if ((jsonObj.get("rtmp_url") != null && !jsonObj.get("rtmp_url").isJsonNull()) && !jsonObj.get("rtmp_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmp_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmp_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamConfigurationObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamConfigurationObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamConfigurationObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamConfigurationObject.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamConfigurationObject>() {
           @Override
           public void write(JsonWriter out, StreamConfigurationObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamConfigurationObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamConfigurationObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamConfigurationObject
   * @throws IOException if the JSON string is invalid with respect to StreamConfigurationObject
   */
  public static StreamConfigurationObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamConfigurationObject.class);
  }

  /**
   * Convert an instance of StreamConfigurationObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

