/*
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadParameterObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.338355-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadParameterObject {
  public static final String SERIALIZED_NAME_AW_S_ACCESS_KEY_ID = "AWSAccessKeyId";
  @SerializedName(SERIALIZED_NAME_AW_S_ACCESS_KEY_ID)
  private String awSAccessKeyId;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "Content-Type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_POLICY = "Policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_SIGNATURE = "Signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_ACL = "acl";
  @SerializedName(SERIALIZED_NAME_ACL)
  private String acl;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public UploadParameterObject() {
  }

  public UploadParameterObject awSAccessKeyId(String awSAccessKeyId) {
    this.awSAccessKeyId = awSAccessKeyId;
    return this;
  }

  /**
   * Get awSAccessKeyId
   * @return awSAccessKeyId
   */
  @javax.annotation.Nullable
  public String getAwSAccessKeyId() {
    return awSAccessKeyId;
  }

  public void setAwSAccessKeyId(String awSAccessKeyId) {
    this.awSAccessKeyId = awSAccessKeyId;
  }


  public UploadParameterObject contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public UploadParameterObject policy(String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public UploadParameterObject signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public UploadParameterObject acl(String acl) {
    this.acl = acl;
    return this;
  }

  /**
   * Get acl
   * @return acl
   */
  @javax.annotation.Nullable
  public String getAcl() {
    return acl;
  }

  public void setAcl(String acl) {
    this.acl = acl;
  }


  public UploadParameterObject action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public UploadParameterObject key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadParameterObject uploadParameterObject = (UploadParameterObject) o;
    return Objects.equals(this.awSAccessKeyId, uploadParameterObject.awSAccessKeyId) &&
        Objects.equals(this.contentType, uploadParameterObject.contentType) &&
        Objects.equals(this.policy, uploadParameterObject.policy) &&
        Objects.equals(this.signature, uploadParameterObject.signature) &&
        Objects.equals(this.acl, uploadParameterObject.acl) &&
        Objects.equals(this.action, uploadParameterObject.action) &&
        Objects.equals(this.key, uploadParameterObject.key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awSAccessKeyId, contentType, policy, signature, acl, action, key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadParameterObject {\n");
    sb.append("    awSAccessKeyId: ").append(toIndentedString(awSAccessKeyId)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    acl: ").append(toIndentedString(acl)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AWSAccessKeyId");
    openapiFields.add("Content-Type");
    openapiFields.add("Policy");
    openapiFields.add("Signature");
    openapiFields.add("acl");
    openapiFields.add("action");
    openapiFields.add("key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadParameterObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadParameterObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadParameterObject is not found in the empty JSON string", UploadParameterObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadParameterObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadParameterObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AWSAccessKeyId") != null && !jsonObj.get("AWSAccessKeyId").isJsonNull()) && !jsonObj.get("AWSAccessKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AWSAccessKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AWSAccessKeyId").toString()));
      }
      if ((jsonObj.get("Content-Type") != null && !jsonObj.get("Content-Type").isJsonNull()) && !jsonObj.get("Content-Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Content-Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Content-Type").toString()));
      }
      if ((jsonObj.get("Policy") != null && !jsonObj.get("Policy").isJsonNull()) && !jsonObj.get("Policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Policy").toString()));
      }
      if ((jsonObj.get("Signature") != null && !jsonObj.get("Signature").isJsonNull()) && !jsonObj.get("Signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Signature").toString()));
      }
      if ((jsonObj.get("acl") != null && !jsonObj.get("acl").isJsonNull()) && !jsonObj.get("acl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acl").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadParameterObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadParameterObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadParameterObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadParameterObject.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadParameterObject>() {
           @Override
           public void write(JsonWriter out, UploadParameterObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadParameterObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadParameterObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadParameterObject
   * @throws IOException if the JSON string is invalid with respect to UploadParameterObject
   */
  public static UploadParameterObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadParameterObject.class);
  }

  /**
   * Convert an instance of UploadParameterObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

