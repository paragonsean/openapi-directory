/*
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.StreamInformationObject;
import org.openapitools.client.model.UploadParameterObject;
import org.openapitools.client.model.UploaderInformationObject;
import org.openapitools.client.model.VideoObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for create
     * @param apiKey  (required)
     * @param userdata Additional metadata that will be associated with the video (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(String apiKey, String userdata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (userdata != null) {
            localVarFormParams.put("userdata", userdata);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String apiKey, String userdata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling create(Async)");
        }

        return createCall(apiKey, userdata, _callback);

    }

    /**
     * Create a new video, optionally setting some metadata fields.
     * Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \&quot;userdata\&quot; field can be set.
     * @param apiKey  (required)
     * @param userdata Additional metadata that will be associated with the video (optional)
     * @return VideoObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public VideoObject create(String apiKey, String userdata) throws ApiException {
        ApiResponse<VideoObject> localVarResp = createWithHttpInfo(apiKey, userdata);
        return localVarResp.getData();
    }

    /**
     * Create a new video, optionally setting some metadata fields.
     * Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \&quot;userdata\&quot; field can be set.
     * @param apiKey  (required)
     * @param userdata Additional metadata that will be associated with the video (optional)
     * @return ApiResponse&lt;VideoObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoObject> createWithHttpInfo(String apiKey, String userdata) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(apiKey, userdata, null);
        Type localVarReturnType = new TypeToken<VideoObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new video, optionally setting some metadata fields. (asynchronously)
     * Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \&quot;userdata\&quot; field can be set.
     * @param apiKey  (required)
     * @param userdata Additional metadata that will be associated with the video (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(String apiKey, String userdata, final ApiCallback<VideoObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(apiKey, userdata, _callback);
        Type localVarReturnType = new TypeToken<VideoObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for details
     * @param apiKey  (required)
     * @param videoId ID of the video to retrieve the metadata from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailsCall(String apiKey, String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (videoId != null) {
            localVarFormParams.put("video_id", videoId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailsValidateBeforeCall(String apiKey, String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling details(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling details(Async)");
        }

        return detailsCall(apiKey, videoId, _callback);

    }

    /**
     * Return details about a video.
     * Return details about a video. You may optionally request that only some of the metadata fields are returned.
     * @param apiKey  (required)
     * @param videoId ID of the video to retrieve the metadata from (required)
     * @return VideoObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public VideoObject details(String apiKey, String videoId) throws ApiException {
        ApiResponse<VideoObject> localVarResp = detailsWithHttpInfo(apiKey, videoId);
        return localVarResp.getData();
    }

    /**
     * Return details about a video.
     * Return details about a video. You may optionally request that only some of the metadata fields are returned.
     * @param apiKey  (required)
     * @param videoId ID of the video to retrieve the metadata from (required)
     * @return ApiResponse&lt;VideoObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoObject> detailsWithHttpInfo(String apiKey, String videoId) throws ApiException {
        okhttp3.Call localVarCall = detailsValidateBeforeCall(apiKey, videoId, null);
        Type localVarReturnType = new TypeToken<VideoObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return details about a video. (asynchronously)
     * Return details about a video. You may optionally request that only some of the metadata fields are returned.
     * @param apiKey  (required)
     * @param videoId ID of the video to retrieve the metadata from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailsAsync(String apiKey, String videoId, final ApiCallback<VideoObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailsValidateBeforeCall(apiKey, videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for query
     * @param apiKey  (required)
     * @param filter JavaScript code to be run over each video object, to determine what should be returend. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of arbitrary elements, up to one element for each video object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryCall(String apiKey, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (filter != null) {
            localVarFormParams.put("filter", filter);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryValidateBeforeCall(String apiKey, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling query(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling query(Async)");
        }

        return queryCall(apiKey, filter, _callback);

    }

    /**
     * Perform a JavaScript query to return video objects matching any desired criteria.
     * Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/).
     * @param apiKey  (required)
     * @param filter JavaScript code to be run over each video object, to determine what should be returend. (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of arbitrary elements, up to one element for each video object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> query(String apiKey, String filter) throws ApiException {
        ApiResponse<List<Object>> localVarResp = queryWithHttpInfo(apiKey, filter);
        return localVarResp.getData();
    }

    /**
     * Perform a JavaScript query to return video objects matching any desired criteria.
     * Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/).
     * @param apiKey  (required)
     * @param filter JavaScript code to be run over each video object, to determine what should be returend. (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of arbitrary elements, up to one element for each video object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> queryWithHttpInfo(String apiKey, String filter) throws ApiException {
        okhttp3.Call localVarCall = queryValidateBeforeCall(apiKey, filter, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform a JavaScript query to return video objects matching any desired criteria. (asynchronously)
     * Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/).
     * @param apiKey  (required)
     * @param filter JavaScript code to be run over each video object, to determine what should be returend. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of arbitrary elements, up to one element for each video object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsync(String apiKey, String filter, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryValidateBeforeCall(apiKey, filter, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stream
     * @param apiKey  (required)
     * @param videoId The ID of the video you want to stream to. The video needs to have been previously created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with urls for streaming. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamCall(String apiKey, String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (videoId != null) {
            localVarFormParams.put("video_id", videoId);
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamValidateBeforeCall(String apiKey, String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling stream(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling stream(Async)");
        }

        return streamCall(apiKey, videoId, _callback);

    }

    /**
     * Returns urls for streaming.
     * Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.
     * @param apiKey  (required)
     * @param videoId The ID of the video you want to stream to. The video needs to have been previously created. (required)
     * @return StreamInformationObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with urls for streaming. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public StreamInformationObject stream(String apiKey, String videoId) throws ApiException {
        ApiResponse<StreamInformationObject> localVarResp = streamWithHttpInfo(apiKey, videoId);
        return localVarResp.getData();
    }

    /**
     * Returns urls for streaming.
     * Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.
     * @param apiKey  (required)
     * @param videoId The ID of the video you want to stream to. The video needs to have been previously created. (required)
     * @return ApiResponse&lt;StreamInformationObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with urls for streaming. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamInformationObject> streamWithHttpInfo(String apiKey, String videoId) throws ApiException {
        okhttp3.Call localVarCall = streamValidateBeforeCall(apiKey, videoId, null);
        Type localVarReturnType = new TypeToken<StreamInformationObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns urls for streaming. (asynchronously)
     * Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.
     * @param apiKey  (required)
     * @param videoId The ID of the video you want to stream to. The video needs to have been previously created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with urls for streaming. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamAsync(String apiKey, String videoId, final ApiCallback<StreamInformationObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamValidateBeforeCall(apiKey, videoId, _callback);
        Type localVarReturnType = new TypeToken<StreamInformationObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param apiKey  (required)
     * @param videoId The ID of the video whose metadata will be updated (required)
     * @param source JavaScript code to execute on the video object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String apiKey, String videoId, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (videoId != null) {
            localVarFormParams.put("video_id", videoId);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String apiKey, String videoId, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling update(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling update(Async)");
        }

        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling update(Async)");
        }

        return updateCall(apiKey, videoId, source, _callback);

    }

    /**
     * Update a video&#39;s metadata.
     * Update a video&#39;s metadata through JavaScript code. Only fields inside the \&quot;userdata\&quot; object can be set.
     * @param apiKey  (required)
     * @param videoId The ID of the video whose metadata will be updated (required)
     * @param source JavaScript code to execute on the video object. (required)
     * @return VideoObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public VideoObject update(String apiKey, String videoId, String source) throws ApiException {
        ApiResponse<VideoObject> localVarResp = updateWithHttpInfo(apiKey, videoId, source);
        return localVarResp.getData();
    }

    /**
     * Update a video&#39;s metadata.
     * Update a video&#39;s metadata through JavaScript code. Only fields inside the \&quot;userdata\&quot; object can be set.
     * @param apiKey  (required)
     * @param videoId The ID of the video whose metadata will be updated (required)
     * @param source JavaScript code to execute on the video object. (required)
     * @return ApiResponse&lt;VideoObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoObject> updateWithHttpInfo(String apiKey, String videoId, String source) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(apiKey, videoId, source, null);
        Type localVarReturnType = new TypeToken<VideoObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a video&#39;s metadata. (asynchronously)
     * Update a video&#39;s metadata through JavaScript code. Only fields inside the \&quot;userdata\&quot; object can be set.
     * @param apiKey  (required)
     * @param videoId The ID of the video whose metadata will be updated (required)
     * @param source JavaScript code to execute on the video object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A video object, containing all metadata members. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String apiKey, String videoId, String source, final ApiCallback<VideoObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(apiKey, videoId, source, _callback);
        Type localVarReturnType = new TypeToken<VideoObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upload
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all parameters needed for uploading the file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCall(String apiKey, String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (videoId != null) {
            localVarFormParams.put("video_id", videoId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadValidateBeforeCall(String apiKey, String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling upload(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling upload(Async)");
        }

        return uploadCall(apiKey, videoId, _callback);

    }

    /**
     * Return parameters needed for uploading a video file.
     * Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples. #### *Example request* &#x60;&#x60;&#x60;shell curl -s https://api.synq.fm/v1/video/upload \\   -F api_key&#x3D;${SYNQ_API_KEY} \\   -F video_id&#x3D;2d81c30ce62f4dfdb501dbca96c7ae56 &#x60;&#x60;&#x60;  #### *Example response* &#x60;&#x60;&#x60;json {   \&quot;action\&quot;: \&quot;https://synqfm.s3.amazonaws.com/\&quot;,   \&quot;AWSAccessKeyId\&quot;: \&quot;AKIAIP77Y7MMX3ITZMFA\&quot;,   \&quot;Content-Type\&quot;: \&quot;video/mp4\&quot;,   \&quot;Policy\&quot;: \&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot;,   \&quot;Signature\&quot;: \&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot;,   \&quot;acl\&quot;: \&quot;public-read\&quot;,   \&quot;key\&quot;: \&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; } &#x60;&#x60;&#x60;  To upload the file, you can then make a multipart POST request to the URL in &#x60;action&#x60;, and for all the other parameters returned, set them as form parameters.  Given the parameters above, you would upload a file &#x60;test.mp4&#x60; using cURL like this:  &#x60;&#x60;&#x60;shell curl -s https://synqfm.s3.amazonaws.com/ \\   -F AWSAccessKeyId&#x3D;\&quot;AKIAIP77Y7MMX3ITZMFA\&quot; \\   -F Content-Type&#x3D;\&quot;video/mp4\&quot; \\   -F Policy&#x3D;\&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot; \\   -F Signature&#x3D;\&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot; \\   -F acl&#x3D;\&quot;public-read\&quot; \\   -F key&#x3D;\&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; \\   -F file&#x3D;\&quot;@my_video_file.mp4\&quot; &#x60;&#x60;&#x60;  
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @return UploadParameterObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all parameters needed for uploading the file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public UploadParameterObject upload(String apiKey, String videoId) throws ApiException {
        ApiResponse<UploadParameterObject> localVarResp = uploadWithHttpInfo(apiKey, videoId);
        return localVarResp.getData();
    }

    /**
     * Return parameters needed for uploading a video file.
     * Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples. #### *Example request* &#x60;&#x60;&#x60;shell curl -s https://api.synq.fm/v1/video/upload \\   -F api_key&#x3D;${SYNQ_API_KEY} \\   -F video_id&#x3D;2d81c30ce62f4dfdb501dbca96c7ae56 &#x60;&#x60;&#x60;  #### *Example response* &#x60;&#x60;&#x60;json {   \&quot;action\&quot;: \&quot;https://synqfm.s3.amazonaws.com/\&quot;,   \&quot;AWSAccessKeyId\&quot;: \&quot;AKIAIP77Y7MMX3ITZMFA\&quot;,   \&quot;Content-Type\&quot;: \&quot;video/mp4\&quot;,   \&quot;Policy\&quot;: \&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot;,   \&quot;Signature\&quot;: \&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot;,   \&quot;acl\&quot;: \&quot;public-read\&quot;,   \&quot;key\&quot;: \&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; } &#x60;&#x60;&#x60;  To upload the file, you can then make a multipart POST request to the URL in &#x60;action&#x60;, and for all the other parameters returned, set them as form parameters.  Given the parameters above, you would upload a file &#x60;test.mp4&#x60; using cURL like this:  &#x60;&#x60;&#x60;shell curl -s https://synqfm.s3.amazonaws.com/ \\   -F AWSAccessKeyId&#x3D;\&quot;AKIAIP77Y7MMX3ITZMFA\&quot; \\   -F Content-Type&#x3D;\&quot;video/mp4\&quot; \\   -F Policy&#x3D;\&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot; \\   -F Signature&#x3D;\&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot; \\   -F acl&#x3D;\&quot;public-read\&quot; \\   -F key&#x3D;\&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; \\   -F file&#x3D;\&quot;@my_video_file.mp4\&quot; &#x60;&#x60;&#x60;  
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @return ApiResponse&lt;UploadParameterObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all parameters needed for uploading the file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadParameterObject> uploadWithHttpInfo(String apiKey, String videoId) throws ApiException {
        okhttp3.Call localVarCall = uploadValidateBeforeCall(apiKey, videoId, null);
        Type localVarReturnType = new TypeToken<UploadParameterObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return parameters needed for uploading a video file. (asynchronously)
     * Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples. #### *Example request* &#x60;&#x60;&#x60;shell curl -s https://api.synq.fm/v1/video/upload \\   -F api_key&#x3D;${SYNQ_API_KEY} \\   -F video_id&#x3D;2d81c30ce62f4dfdb501dbca96c7ae56 &#x60;&#x60;&#x60;  #### *Example response* &#x60;&#x60;&#x60;json {   \&quot;action\&quot;: \&quot;https://synqfm.s3.amazonaws.com/\&quot;,   \&quot;AWSAccessKeyId\&quot;: \&quot;AKIAIP77Y7MMX3ITZMFA\&quot;,   \&quot;Content-Type\&quot;: \&quot;video/mp4\&quot;,   \&quot;Policy\&quot;: \&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot;,   \&quot;Signature\&quot;: \&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot;,   \&quot;acl\&quot;: \&quot;public-read\&quot;,   \&quot;key\&quot;: \&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; } &#x60;&#x60;&#x60;  To upload the file, you can then make a multipart POST request to the URL in &#x60;action&#x60;, and for all the other parameters returned, set them as form parameters.  Given the parameters above, you would upload a file &#x60;test.mp4&#x60; using cURL like this:  &#x60;&#x60;&#x60;shell curl -s https://synqfm.s3.amazonaws.com/ \\   -F AWSAccessKeyId&#x3D;\&quot;AKIAIP77Y7MMX3ITZMFA\&quot; \\   -F Content-Type&#x3D;\&quot;video/mp4\&quot; \\   -F Policy&#x3D;\&quot;eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\&quot; \\   -F Signature&#x3D;\&quot;ysqDemlKXKr6hKzVFP0hCGgf/cs&#x3D;\&quot; \\   -F acl&#x3D;\&quot;public-read\&quot; \\   -F key&#x3D;\&quot;projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\&quot; \\   -F file&#x3D;\&quot;@my_video_file.mp4\&quot; &#x60;&#x60;&#x60;  
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all parameters needed for uploading the file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAsync(String apiKey, String videoId, final ApiCallback<UploadParameterObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadValidateBeforeCall(apiKey, videoId, _callback);
        Type localVarReturnType = new TypeToken<UploadParameterObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploader
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @param timeout How long the uploader widget works for. Anything from &#39;30 minutes&#39; to &#39;2 days&#39;. (optional, default to 2 hours)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with an embeddable url to an uploader page/widget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploaderCall(String apiKey, String videoId, String timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/uploader";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (videoId != null) {
            localVarFormParams.put("video_id", videoId);
        }

        if (timeout != null) {
            localVarFormParams.put("timeout", timeout);
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploaderValidateBeforeCall(String apiKey, String videoId, String timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uploader(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling uploader(Async)");
        }

        return uploaderCall(apiKey, videoId, timeout, _callback);

    }

    /**
     * Return embeddable url to an uploader widget
     * Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @param timeout How long the uploader widget works for. Anything from &#39;30 minutes&#39; to &#39;2 days&#39;. (optional, default to 2 hours)
     * @return UploaderInformationObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with an embeddable url to an uploader page/widget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public UploaderInformationObject uploader(String apiKey, String videoId, String timeout) throws ApiException {
        ApiResponse<UploaderInformationObject> localVarResp = uploaderWithHttpInfo(apiKey, videoId, timeout);
        return localVarResp.getData();
    }

    /**
     * Return embeddable url to an uploader widget
     * Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @param timeout How long the uploader widget works for. Anything from &#39;30 minutes&#39; to &#39;2 days&#39;. (optional, default to 2 hours)
     * @return ApiResponse&lt;UploaderInformationObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with an embeddable url to an uploader page/widget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploaderInformationObject> uploaderWithHttpInfo(String apiKey, String videoId, String timeout) throws ApiException {
        okhttp3.Call localVarCall = uploaderValidateBeforeCall(apiKey, videoId, timeout, null);
        Type localVarReturnType = new TypeToken<UploaderInformationObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return embeddable url to an uploader widget (asynchronously)
     * Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.
     * @param apiKey  (required)
     * @param videoId The ID of the video you are going to upload into. The video needs to have been previously created. (required)
     * @param timeout How long the uploader widget works for. Anything from &#39;30 minutes&#39; to &#39;2 days&#39;. (optional, default to 2 hours)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object with an embeddable url to an uploader page/widget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploaderAsync(String apiKey, String videoId, String timeout, final ApiCallback<UploaderInformationObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploaderValidateBeforeCall(apiKey, videoId, timeout, _callback);
        Type localVarReturnType = new TypeToken<UploaderInformationObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
