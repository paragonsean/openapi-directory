# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, input: object=None, outputs: object=None, state: str=None, updated_at: str=None, userdata: object=None, video_id: str=None):
        """VideoObject - a model defined in OpenAPI

        :param created_at: The created_at of this VideoObject.
        :param input: The input of this VideoObject.
        :param outputs: The outputs of this VideoObject.
        :param state: The state of this VideoObject.
        :param updated_at: The updated_at of this VideoObject.
        :param userdata: The userdata of this VideoObject.
        :param video_id: The video_id of this VideoObject.
        """
        self.openapi_types = {
            'created_at': str,
            'input': object,
            'outputs': object,
            'state': str,
            'updated_at': str,
            'userdata': object,
            'video_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'input': 'input',
            'outputs': 'outputs',
            'state': 'state',
            'updated_at': 'updated_at',
            'userdata': 'userdata',
            'video_id': 'video_id'
        }

        self._created_at = created_at
        self._input = input
        self._outputs = outputs
        self._state = state
        self._updated_at = updated_at
        self._userdata = userdata
        self._video_id = video_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoObject of this VideoObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this VideoObject.


        :return: The created_at of this VideoObject.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VideoObject.


        :param created_at: The created_at of this VideoObject.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def input(self):
        """Gets the input of this VideoObject.


        :return: The input of this VideoObject.
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this VideoObject.


        :param input: The input of this VideoObject.
        :type input: object
        """

        self._input = input

    @property
    def outputs(self):
        """Gets the outputs of this VideoObject.


        :return: The outputs of this VideoObject.
        :rtype: object
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this VideoObject.


        :param outputs: The outputs of this VideoObject.
        :type outputs: object
        """

        self._outputs = outputs

    @property
    def state(self):
        """Gets the state of this VideoObject.


        :return: The state of this VideoObject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VideoObject.


        :param state: The state of this VideoObject.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this VideoObject.


        :return: The updated_at of this VideoObject.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VideoObject.


        :param updated_at: The updated_at of this VideoObject.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def userdata(self):
        """Gets the userdata of this VideoObject.


        :return: The userdata of this VideoObject.
        :rtype: object
        """
        return self._userdata

    @userdata.setter
    def userdata(self, userdata):
        """Sets the userdata of this VideoObject.


        :param userdata: The userdata of this VideoObject.
        :type userdata: object
        """
        if userdata is None:
            raise ValueError("Invalid value for `userdata`, must not be `None`")

        self._userdata = userdata

    @property
    def video_id(self):
        """Gets the video_id of this VideoObject.


        :return: The video_id of this VideoObject.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this VideoObject.


        :param video_id: The video_id of this VideoObject.
        :type video_id: str
        """
        if video_id is None:
            raise ValueError("Invalid value for `video_id`, must not be `None`")

        self._video_id = video_id
