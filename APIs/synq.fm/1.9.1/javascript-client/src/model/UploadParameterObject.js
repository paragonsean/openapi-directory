/**
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadParameterObject model module.
 * @module model/UploadParameterObject
 * @version 1.9.1
 */
class UploadParameterObject {
    /**
     * Constructs a new <code>UploadParameterObject</code>.
     * @alias module:model/UploadParameterObject
     */
    constructor() { 
        
        UploadParameterObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadParameterObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadParameterObject} obj Optional instance to populate.
     * @return {module:model/UploadParameterObject} The populated <code>UploadParameterObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadParameterObject();

            if (data.hasOwnProperty('AWSAccessKeyId')) {
                obj['AWSAccessKeyId'] = ApiClient.convertToType(data['AWSAccessKeyId'], 'String');
            }
            if (data.hasOwnProperty('Content-Type')) {
                obj['Content-Type'] = ApiClient.convertToType(data['Content-Type'], 'String');
            }
            if (data.hasOwnProperty('Policy')) {
                obj['Policy'] = ApiClient.convertToType(data['Policy'], 'String');
            }
            if (data.hasOwnProperty('Signature')) {
                obj['Signature'] = ApiClient.convertToType(data['Signature'], 'String');
            }
            if (data.hasOwnProperty('acl')) {
                obj['acl'] = ApiClient.convertToType(data['acl'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadParameterObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadParameterObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AWSAccessKeyId'] && !(typeof data['AWSAccessKeyId'] === 'string' || data['AWSAccessKeyId'] instanceof String)) {
            throw new Error("Expected the field `AWSAccessKeyId` to be a primitive type in the JSON string but got " + data['AWSAccessKeyId']);
        }
        // ensure the json data is a string
        if (data['Content-Type'] && !(typeof data['Content-Type'] === 'string' || data['Content-Type'] instanceof String)) {
            throw new Error("Expected the field `Content-Type` to be a primitive type in the JSON string but got " + data['Content-Type']);
        }
        // ensure the json data is a string
        if (data['Policy'] && !(typeof data['Policy'] === 'string' || data['Policy'] instanceof String)) {
            throw new Error("Expected the field `Policy` to be a primitive type in the JSON string but got " + data['Policy']);
        }
        // ensure the json data is a string
        if (data['Signature'] && !(typeof data['Signature'] === 'string' || data['Signature'] instanceof String)) {
            throw new Error("Expected the field `Signature` to be a primitive type in the JSON string but got " + data['Signature']);
        }
        // ensure the json data is a string
        if (data['acl'] && !(typeof data['acl'] === 'string' || data['acl'] instanceof String)) {
            throw new Error("Expected the field `acl` to be a primitive type in the JSON string but got " + data['acl']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }

        return true;
    }


}



/**
 * @member {String} AWSAccessKeyId
 */
UploadParameterObject.prototype['AWSAccessKeyId'] = undefined;

/**
 * @member {String} Content-Type
 */
UploadParameterObject.prototype['Content-Type'] = undefined;

/**
 * @member {String} Policy
 */
UploadParameterObject.prototype['Policy'] = undefined;

/**
 * @member {String} Signature
 */
UploadParameterObject.prototype['Signature'] = undefined;

/**
 * @member {String} acl
 */
UploadParameterObject.prototype['acl'] = undefined;

/**
 * @member {String} action
 */
UploadParameterObject.prototype['action'] = undefined;

/**
 * @member {String} key
 */
UploadParameterObject.prototype['key'] = undefined;






export default UploadParameterObject;

