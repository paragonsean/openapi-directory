/**
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoObject model module.
 * @module model/VideoObject
 * @version 1.9.1
 */
class VideoObject {
    /**
     * Constructs a new <code>VideoObject</code>.
     * @alias module:model/VideoObject
     * @param createdAt {String} 
     * @param state {String} 
     * @param updatedAt {String} 
     * @param userdata {Object} 
     * @param videoId {String} 
     */
    constructor(createdAt, state, updatedAt, userdata, videoId) { 
        
        VideoObject.initialize(this, createdAt, state, updatedAt, userdata, videoId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, state, updatedAt, userdata, videoId) { 
        obj['created_at'] = createdAt;
        obj['state'] = state;
        obj['updated_at'] = updatedAt;
        obj['userdata'] = userdata;
        obj['video_id'] = videoId;
    }

    /**
     * Constructs a <code>VideoObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoObject} obj Optional instance to populate.
     * @return {module:model/VideoObject} The populated <code>VideoObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoObject();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], Object);
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], Object);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('userdata')) {
                obj['userdata'] = ApiClient.convertToType(data['userdata'], Object);
            }
            if (data.hasOwnProperty('video_id')) {
                obj['video_id'] = ApiClient.convertToType(data['video_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['video_id'] && !(typeof data['video_id'] === 'string' || data['video_id'] instanceof String)) {
            throw new Error("Expected the field `video_id` to be a primitive type in the JSON string but got " + data['video_id']);
        }

        return true;
    }


}

VideoObject.RequiredProperties = ["created_at", "state", "updated_at", "userdata", "video_id"];

/**
 * @member {String} created_at
 */
VideoObject.prototype['created_at'] = undefined;

/**
 * @member {Object} input
 */
VideoObject.prototype['input'] = undefined;

/**
 * @member {Object} outputs
 */
VideoObject.prototype['outputs'] = undefined;

/**
 * @member {String} state
 */
VideoObject.prototype['state'] = undefined;

/**
 * @member {String} updated_at
 */
VideoObject.prototype['updated_at'] = undefined;

/**
 * @member {Object} userdata
 */
VideoObject.prototype['userdata'] = undefined;

/**
 * @member {String} video_id
 */
VideoObject.prototype['video_id'] = undefined;






export default VideoObject;

