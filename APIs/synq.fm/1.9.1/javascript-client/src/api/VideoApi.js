/**
 * SYNQ Video
 * * [Sign up for a developer API key!](https://www.synq.fm/register) * [SYNQ API Guide](/)
 *
 * The version of the OpenAPI document: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorObject from '../model/ErrorObject';
import StreamInformationObject from '../model/StreamInformationObject';
import UploadParameterObject from '../model/UploadParameterObject';
import UploaderInformationObject from '../model/UploaderInformationObject';
import VideoObject from '../model/VideoObject';

/**
* Video service.
* @module api/VideoApi
* @version 1.9.1
*/
export default class VideoApi {

    /**
    * Constructs a new VideoApi. 
    * @alias module:api/VideoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/VideoApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new video, optionally setting some metadata fields.
     * Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \"userdata\" field can be set.
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [userdata] Additional metadata that will be associated with the video
     * @param {module:api/VideoApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoObject}
     */
    create(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'userdata': opts['userdata']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoObject;
      return this.apiClient.callApi(
        '/video/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the details operation.
     * @callback module:api/VideoApi~detailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return details about a video.
     * Return details about a video. You may optionally request that only some of the metadata fields are returned.
     * @param {String} apiKey 
     * @param {String} videoId ID of the video to retrieve the metadata from
     * @param {module:api/VideoApi~detailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoObject}
     */
    details(apiKey, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling details");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling details");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'video_id': videoId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoObject;
      return this.apiClient.callApi(
        '/video/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/VideoApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a JavaScript query to return video objects matching any desired criteria.
     * Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/).
     * @param {String} apiKey 
     * @param {String} filter JavaScript code to be run over each video object, to determine what should be returend.
     * @param {module:api/VideoApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    query(apiKey, filter, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling query");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling query");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'filter': filter
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/video/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stream operation.
     * @callback module:api/VideoApi~streamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamInformationObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns urls for streaming.
     * Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.
     * @param {String} apiKey 
     * @param {String} videoId The ID of the video you want to stream to. The video needs to have been previously created.
     * @param {module:api/VideoApi~streamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamInformationObject}
     */
    stream(apiKey, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling stream");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling stream");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'video_id': videoId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['text/plain'];
      let returnType = StreamInformationObject;
      return this.apiClient.callApi(
        '/video/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/VideoApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a video's metadata.
     * Update a video's metadata through JavaScript code. Only fields inside the \"userdata\" object can be set.
     * @param {String} apiKey 
     * @param {String} videoId The ID of the video whose metadata will be updated
     * @param {String} source JavaScript code to execute on the video object.
     * @param {module:api/VideoApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoObject}
     */
    update(apiKey, videoId, source, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling update");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling update");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling update");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'video_id': videoId,
        'source': source
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoObject;
      return this.apiClient.callApi(
        '/video/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upload operation.
     * @callback module:api/VideoApi~uploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadParameterObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return parameters needed for uploading a video file.
     * Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples. #### *Example request* ```shell curl -s https://api.synq.fm/v1/video/upload \\   -F api_key=${SYNQ_API_KEY} \\   -F video_id=2d81c30ce62f4dfdb501dbca96c7ae56 ```  #### *Example response* ```json {   \"action\": \"https://synqfm.s3.amazonaws.com/\",   \"AWSAccessKeyId\": \"AKIAIP77Y7MMX3ITZMFA\",   \"Content-Type\": \"video/mp4\",   \"Policy\": \"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\",   \"Signature\": \"ysqDemlKXKr6hKzVFP0hCGgf/cs=\",   \"acl\": \"public-read\",   \"key\": \"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\" } ```  To upload the file, you can then make a multipart POST request to the URL in `action`, and for all the other parameters returned, set them as form parameters.  Given the parameters above, you would upload a file `test.mp4` using cURL like this:  ```shell curl -s https://synqfm.s3.amazonaws.com/ \\   -F AWSAccessKeyId=\"AKIAIP77Y7MMX3ITZMFA\" \\   -F Content-Type=\"video/mp4\" \\   -F Policy=\"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\" \\   -F Signature=\"ysqDemlKXKr6hKzVFP0hCGgf/cs=\" \\   -F acl=\"public-read\" \\   -F key=\"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\" \\   -F file=\"@my_video_file.mp4\" ```  
     * @param {String} apiKey 
     * @param {String} videoId The ID of the video you are going to upload into. The video needs to have been previously created.
     * @param {module:api/VideoApi~uploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadParameterObject}
     */
    upload(apiKey, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling upload");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling upload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'video_id': videoId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UploadParameterObject;
      return this.apiClient.callApi(
        '/video/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploader operation.
     * @callback module:api/VideoApi~uploaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploaderInformationObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return embeddable url to an uploader widget
     * Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.
     * @param {String} apiKey 
     * @param {String} videoId The ID of the video you are going to upload into. The video needs to have been previously created.
     * @param {Object} opts Optional parameters
     * @param {String} [timeout = '2 hours')] How long the uploader widget works for. Anything from '30 minutes' to '2 days'.
     * @param {module:api/VideoApi~uploaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploaderInformationObject}
     */
    uploader(apiKey, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling uploader");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling uploader");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'video_id': videoId,
        'timeout': opts['timeout']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['text/plain'];
      let returnType = UploaderInformationObject;
      return this.apiClient.callApi(
        '/video/uploader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
