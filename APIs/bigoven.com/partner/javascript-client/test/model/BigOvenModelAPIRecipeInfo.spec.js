/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.1000000RecipeAndGroceryListApiV2);
  }
}(this, function(expect, 1000000RecipeAndGroceryListApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BigOvenModelAPIRecipeInfo', function() {
    it('should create an instance of BigOvenModelAPIRecipeInfo', function() {
      // uncomment below and update the code to test BigOvenModelAPIRecipeInfo
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be.a(1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo);
    });

    it('should have the property bookmarkURL (base name: "BookmarkURL")', function() {
      // uncomment below and update the code to test the property bookmarkURL
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "Category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "CreationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property cuisine (base name: "Cuisine")', function() {
      // uncomment below and update the code to test the property cuisine
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property hasVideos (base name: "HasVideos")', function() {
      // uncomment below and update the code to test the property hasVideos
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property heroPhotoUrl (base name: "HeroPhotoUrl")', function() {
      // uncomment below and update the code to test the property heroPhotoUrl
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property hideFromPublicSearch (base name: "HideFromPublicSearch")', function() {
      // uncomment below and update the code to test the property hideFromPublicSearch
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property imageURL (base name: "ImageURL")', function() {
      // uncomment below and update the code to test the property imageURL
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property imageURL120 (base name: "ImageURL120")', function() {
      // uncomment below and update the code to test the property imageURL120
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property isBookmark (base name: "IsBookmark")', function() {
      // uncomment below and update the code to test the property isBookmark
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property isPrivate (base name: "IsPrivate")', function() {
      // uncomment below and update the code to test the property isPrivate
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property maxImageSquare (base name: "MaxImageSquare")', function() {
      // uncomment below and update the code to test the property maxImageSquare
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property microcategory (base name: "Microcategory")', function() {
      // uncomment below and update the code to test the property microcategory
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property poster (base name: "Poster")', function() {
      // uncomment below and update the code to test the property poster
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property qualityScore (base name: "QualityScore")', function() {
      // uncomment below and update the code to test the property qualityScore
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property recipeID (base name: "RecipeID")', function() {
      // uncomment below and update the code to test the property recipeID
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property reviewCount (base name: "ReviewCount")', function() {
      // uncomment below and update the code to test the property reviewCount
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property starRating (base name: "StarRating")', function() {
      // uncomment below and update the code to test the property starRating
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property starRatingIMG (base name: "StarRatingIMG")', function() {
      // uncomment below and update the code to test the property starRatingIMG
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property subcategory (base name: "Subcategory")', function() {
      // uncomment below and update the code to test the property subcategory
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "Title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property totalTries (base name: "TotalTries")', function() {
      // uncomment below and update the code to test the property totalTries
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property webURL (base name: "WebURL")', function() {
      // uncomment below and update the code to test the property webURL
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

    it('should have the property yieldNumber (base name: "YieldNumber")', function() {
      // uncomment below and update the code to test the property yieldNumber
      //var instance = new 1000000RecipeAndGroceryListApiV2.BigOvenModelAPIRecipeInfo();
      //expect(instance).to.be();
    });

  });

}));
