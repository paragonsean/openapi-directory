/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.1000000RecipeAndGroceryListApiV2);
  }
}(this, function(expect, 1000000RecipeAndGroceryListApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new 1000000RecipeAndGroceryListApiV2.RecipeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecipeApi', function() {
    describe('recipeAutoComplete', function() {
      it('should call recipeAutoComplete successfully', function(done) {
        //uncomment below and update the code to test recipeAutoComplete
        //instance.recipeAutoComplete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeAutoCompleteAllRecipes', function() {
      it('should call recipeAutoCompleteAllRecipes successfully', function(done) {
        //uncomment below and update the code to test recipeAutoCompleteAllRecipes
        //instance.recipeAutoCompleteAllRecipes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeAutoCompleteMyRecipes', function() {
      it('should call recipeAutoCompleteMyRecipes successfully', function(done) {
        //uncomment below and update the code to test recipeAutoCompleteMyRecipes
        //instance.recipeAutoCompleteMyRecipes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeCategories', function() {
      it('should call recipeCategories successfully', function(done) {
        //uncomment below and update the code to test recipeCategories
        //instance.recipeCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeDelete', function() {
      it('should call recipeDelete successfully', function(done) {
        //uncomment below and update the code to test recipeDelete
        //instance.recipeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeFeedback', function() {
      it('should call recipeFeedback successfully', function(done) {
        //uncomment below and update the code to test recipeFeedback
        //instance.recipeFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGet', function() {
      it('should call recipeGet successfully', function(done) {
        //uncomment below and update the code to test recipeGet
        //instance.recipeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetActiveRecipe', function() {
      it('should call recipeGetActiveRecipe successfully', function(done) {
        //uncomment below and update the code to test recipeGetActiveRecipe
        //instance.recipeGetActiveRecipe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetRandomRecipe', function() {
      it('should call recipeGetRandomRecipe successfully', function(done) {
        //uncomment below and update the code to test recipeGetRandomRecipe
        //instance.recipeGetRandomRecipe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetRecipeWithSteps', function() {
      it('should call recipeGetRecipeWithSteps successfully', function(done) {
        //uncomment below and update the code to test recipeGetRecipeWithSteps
        //instance.recipeGetRecipeWithSteps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetStep', function() {
      it('should call recipeGetStep successfully', function(done) {
        //uncomment below and update the code to test recipeGetStep
        //instance.recipeGetStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetStepNumber', function() {
      it('should call recipeGetStepNumber successfully', function(done) {
        //uncomment below and update the code to test recipeGetStepNumber
        //instance.recipeGetStepNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetSteps', function() {
      it('should call recipeGetSteps successfully', function(done) {
        //uncomment below and update the code to test recipeGetSteps
        //instance.recipeGetSteps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeGetV2', function() {
      it('should call recipeGetV2 successfully', function(done) {
        //uncomment below and update the code to test recipeGetV2
        //instance.recipeGetV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipePost', function() {
      it('should call recipePost successfully', function(done) {
        //uncomment below and update the code to test recipePost
        //instance.recipePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipePut', function() {
      it('should call recipePut successfully', function(done) {
        //uncomment below and update the code to test recipePut
        //instance.recipePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeRaves', function() {
      it('should call recipeRaves successfully', function(done) {
        //uncomment below and update the code to test recipeRaves
        //instance.recipeRaves(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeRecentViews', function() {
      it('should call recipeRecentViews successfully', function(done) {
        //uncomment below and update the code to test recipeRecentViews
        //instance.recipeRecentViews(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeRecipeSearch', function() {
      it('should call recipeRecipeSearch successfully', function(done) {
        //uncomment below and update the code to test recipeRecipeSearch
        //instance.recipeRecipeSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeRecipeSearchRandom', function() {
      it('should call recipeRecipeSearchRandom successfully', function(done) {
        //uncomment below and update the code to test recipeRecipeSearchRandom
        //instance.recipeRecipeSearchRandom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeRelated', function() {
      it('should call recipeRelated successfully', function(done) {
        //uncomment below and update the code to test recipeRelated
        //instance.recipeRelated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeScan', function() {
      it('should call recipeScan successfully', function(done) {
        //uncomment below and update the code to test recipeScan
        //instance.recipeScan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recipeZapRecipe', function() {
      it('should call recipeZapRecipe successfully', function(done) {
        //uncomment below and update the code to test recipeZapRecipe
        //instance.recipeZapRecipe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
