/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import API2ModelsRecipesFeedbackDTO from '../model/API2ModelsRecipesFeedbackDTO';
import API2ModelsRecipesRecipeResponse from '../model/API2ModelsRecipesRecipeResponse';
import API2Result from '../model/API2Result';
import BigOvenModelAPI2Recipe from '../model/BigOvenModelAPI2Recipe';
import BigOvenModelAPI2RecipeSearchResult from '../model/BigOvenModelAPI2RecipeSearchResult';
import BigOvenModelAPIRecipe from '../model/BigOvenModelAPIRecipe';
import BigOvenModelRecipeCategory from '../model/BigOvenModelRecipeCategory';
import BigOvenModelRecipeInfoDateTuple2 from '../model/BigOvenModelRecipeInfoDateTuple2';
import BigOvenModelRecipeInfoReviewTuple2 from '../model/BigOvenModelRecipeInfoReviewTuple2';
import BigOvenModelRecipeInfoTiny from '../model/BigOvenModelRecipeInfoTiny';
import BigOvenResult from '../model/BigOvenResult';

/**
* Recipe service.
* @module api/RecipeApi
* @version partner
*/
export default class RecipeApi {

    /**
    * Constructs a new RecipeApi. 
    * @alias module:api/RecipeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recipeAutoComplete operation.
     * @callback module:api/RecipeApi~recipeAutoCompleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a query, return recipe titles starting with query. Query must be at least 3 chars in length.
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {module:api/RecipeApi~recipeAutoCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    recipeAutoComplete(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling recipeAutoComplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/recipe/autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeAutoCompleteAllRecipes operation.
     * @callback module:api/RecipeApi~recipeAutoCompleteAllRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelRecipeInfoTiny>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Automatics the complete all recipes.
     * @param {String} query The query.
     * @param {Number} limit The limit.
     * @param {module:api/RecipeApi~recipeAutoCompleteAllRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelRecipeInfoTiny>}
     */
    recipeAutoCompleteAllRecipes(query, limit, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling recipeAutoCompleteAllRecipes");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling recipeAutoCompleteAllRecipes");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelRecipeInfoTiny];
      return this.apiClient.callApi(
        '/recipe/autocomplete/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeAutoCompleteMyRecipes operation.
     * @callback module:api/RecipeApi~recipeAutoCompleteMyRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelRecipeInfoTiny>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Automatics the complete my recipes.
     * @param {String} query The query.
     * @param {Number} limit The limit.
     * @param {module:api/RecipeApi~recipeAutoCompleteMyRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelRecipeInfoTiny>}
     */
    recipeAutoCompleteMyRecipes(query, limit, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling recipeAutoCompleteMyRecipes");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling recipeAutoCompleteMyRecipes");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelRecipeInfoTiny];
      return this.apiClient.callApi(
        '/recipe/autocomplete/mine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeCategories operation.
     * @callback module:api/RecipeApi~recipeCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelRecipeCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recipe categories (the ID field can be used for include_cat in search parameters)
     * @param {module:api/RecipeApi~recipeCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelRecipeCategory>}
     */
    recipeCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelRecipeCategory];
      return this.apiClient.callApi(
        '/recipe/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeDelete operation.
     * @callback module:api/RecipeApi~recipeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Recipe (you must be authenticated as an owner of the recipe)
     * @param {Number} id 
     * @param {module:api/RecipeApi~recipeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    recipeDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/recipe/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeFeedback operation.
     * @callback module:api/RecipeApi~recipeFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Feedback on a Recipe -- for internal BigOven editors
     * @param {Number} recipeId 
     * @param {module:model/API2ModelsRecipesFeedbackDTO} aPI2ModelsRecipesFeedbackDTO The payload for feedback, which includes the field \"feedback\"
     * @param {module:api/RecipeApi~recipeFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    recipeFeedback(recipeId, aPI2ModelsRecipesFeedbackDTO, callback) {
      let postBody = aPI2ModelsRecipesFeedbackDTO;
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling recipeFeedback");
      }
      // verify the required parameter 'aPI2ModelsRecipesFeedbackDTO' is set
      if (aPI2ModelsRecipesFeedbackDTO === undefined || aPI2ModelsRecipesFeedbackDTO === null) {
        throw new Error("Missing the required parameter 'aPI2ModelsRecipesFeedbackDTO' when calling recipeFeedback");
      }

      let pathParams = {
        'recipeId': recipeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGet operation.
     * @callback module:api/RecipeApi~recipeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPI2Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return full Recipe detail. Returns 403 if the recipe is owned by someone else.
     * @param {Number} id The Recipe ID to retrieve
     * @param {Object} opts Optional parameters
     * @param {Boolean} [prefetch] The prefetch.
     * @param {module:api/RecipeApi~recipeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPI2Recipe}
     */
    recipeGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'prefetch': opts['prefetch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPI2Recipe;
      return this.apiClient.callApi(
        '/recipe/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetActiveRecipe operation.
     * @callback module:api/RecipeApi~recipeGetActiveRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns last active recipe for the user
     * @param {String} userName 
     * @param {module:api/RecipeApi~recipeGetActiveRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenResult}
     */
    recipeGetActiveRecipe(userName, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling recipeGetActiveRecipe");
      }

      let pathParams = {
      };
      let queryParams = {
        'userName': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenResult;
      return this.apiClient.callApi(
        '/recipe/get/active/recipe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetRandomRecipe operation.
     * @callback module:api/RecipeApi~recipeGetRandomRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIRecipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a random, home-page-quality Recipe.
     * @param {module:api/RecipeApi~recipeGetRandomRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIRecipe}
     */
    recipeGetRandomRecipe(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIRecipe;
      return this.apiClient.callApi(
        '/recipes/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetRecipeWithSteps operation.
     * @callback module:api/RecipeApi~recipeGetRecipeWithStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPI2Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else.
     * @param {Number} id the Recipe ID to retrieve
     * @param {Object} opts Optional parameters
     * @param {Boolean} [prefetch] 
     * @param {module:api/RecipeApi~recipeGetRecipeWithStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPI2Recipe}
     */
    recipeGetRecipeWithSteps(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeGetRecipeWithSteps");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'prefetch': opts['prefetch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPI2Recipe;
      return this.apiClient.callApi(
        '/recipe/steps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetStep operation.
     * @callback module:api/RecipeApi~recipeGetStepCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets recipe single step as text
     * @param {String} userName 
     * @param {Number} recipeId 
     * @param {Number} stepId 
     * @param {module:api/RecipeApi~recipeGetStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    recipeGetStep(userName, recipeId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling recipeGetStep");
      }
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling recipeGetStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling recipeGetStep");
      }

      let pathParams = {
      };
      let queryParams = {
        'userName': userName,
        'recipeId': recipeId,
        'stepId': stepId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/recipe/get/saved/step', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetStepNumber operation.
     * @callback module:api/RecipeApi~recipeGetStepNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/API2Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns stored step number and number of steps in recipe
     * @param {String} userName 
     * @param {Number} recipeId 
     * @param {module:api/RecipeApi~recipeGetStepNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/API2Result}
     */
    recipeGetStepNumber(userName, recipeId, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling recipeGetStepNumber");
      }
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling recipeGetStepNumber");
      }

      let pathParams = {
      };
      let queryParams = {
        'userName': userName,
        'recipeId': recipeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = API2Result;
      return this.apiClient.callApi(
        '/recipe/get/step/number', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetSteps operation.
     * @callback module:api/RecipeApi~recipeGetStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores recipe step number and returns saved step data
     * @param {String} userName 
     * @param {Number} recipeId 
     * @param {Number} stepId 
     * @param {module:api/RecipeApi~recipeGetStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenResult}
     */
    recipeGetSteps(userName, recipeId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling recipeGetSteps");
      }
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling recipeGetSteps");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling recipeGetSteps");
      }

      let pathParams = {
      };
      let queryParams = {
        'userName': userName,
        'recipeId': recipeId,
        'stepId': stepId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenResult;
      return this.apiClient.callApi(
        '/recipe/post/step', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeGetV2 operation.
     * @callback module:api/RecipeApi~recipeGetV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/API2ModelsRecipesRecipeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Same as GET recipe but also includes the recipe videos (if any)
     * @param {Number} id The Recipe ID to retrieve
     * @param {Object} opts Optional parameters
     * @param {Boolean} [prefetch] The prefetch.
     * @param {module:api/RecipeApi~recipeGetV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/API2ModelsRecipesRecipeResponse}
     */
    recipeGetV2(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeGetV2");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'prefetch': opts['prefetch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = API2ModelsRecipesRecipeResponse;
      return this.apiClient.callApi(
        '/recipes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipePost operation.
     * @callback module:api/RecipeApi~recipePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIRecipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new recipe
     * @param {module:model/BigOvenModelAPIRecipe} bigOvenModelAPIRecipe 
     * @param {module:api/RecipeApi~recipePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIRecipe}
     */
    recipePost(bigOvenModelAPIRecipe, callback) {
      let postBody = bigOvenModelAPIRecipe;
      // verify the required parameter 'bigOvenModelAPIRecipe' is set
      if (bigOvenModelAPIRecipe === undefined || bigOvenModelAPIRecipe === null) {
        throw new Error("Missing the required parameter 'bigOvenModelAPIRecipe' when calling recipePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIRecipe;
      return this.apiClient.callApi(
        '/recipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipePut operation.
     * @callback module:api/RecipeApi~recipePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIRecipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a recipe
     * @param {module:model/BigOvenModelAPIRecipe} bigOvenModelAPIRecipe 
     * @param {module:api/RecipeApi~recipePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIRecipe}
     */
    recipePut(bigOvenModelAPIRecipe, callback) {
      let postBody = bigOvenModelAPIRecipe;
      // verify the required parameter 'bigOvenModelAPIRecipe' is set
      if (bigOvenModelAPIRecipe === undefined || bigOvenModelAPIRecipe === null) {
        throw new Error("Missing the required parameter 'bigOvenModelAPIRecipe' when calling recipePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIRecipe;
      return this.apiClient.callApi(
        '/recipe', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeRaves operation.
     * @callback module:api/RecipeApi~recipeRavesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelRecipeInfoReviewTuple2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the recipe/comment tuples for those recipes with 4 or 5 star ratings
     * @param {Object} opts Optional parameters
     * @param {Number} [pg] page, starting with 1
     * @param {Number} [rpp] results per page
     * @param {module:api/RecipeApi~recipeRavesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelRecipeInfoReviewTuple2>}
     */
    recipeRaves(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg': opts['pg'],
        'rpp': opts['rpp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelRecipeInfoReviewTuple2];
      return this.apiClient.callApi(
        '/recipes/raves', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeRecentViews operation.
     * @callback module:api/RecipeApi~recipeRecentViewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelRecipeInfoDateTuple2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recipes that the authenticated user has most recently viewed
     * @param {Object} opts Optional parameters
     * @param {Number} [pg] Page number starting with 1
     * @param {Number} [rpp] results per page
     * @param {module:api/RecipeApi~recipeRecentViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelRecipeInfoDateTuple2>}
     */
    recipeRecentViews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg': opts['pg'],
        'rpp': opts['rpp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelRecipeInfoDateTuple2];
      return this.apiClient.callApi(
        '/recipes/recentviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeRecipeSearch operation.
     * @callback module:api/RecipeApi~recipeRecipeSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPI2RecipeSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you'd like to limit by course, set the parameter \"include_primarycat\" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \"include_ing\" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \"exclude_ing\" to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25              If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).              Or, you can set username=theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter=added,try,favorites,myrecipes\\r\\n\\r\\n              folder=FolderNameCaseSensitive              coll=ID of Collection
     * @param {Object} opts Optional parameters
     * @param {String} [anyKw] Search anywhere in the recipe for the keyword
     * @param {String} [folder] Search in a specific folder name for the authenticated user
     * @param {Number} [coll] Limit to a collection ID number
     * @param {String} [filter] optionally set to either \"myrecipes\", \"try\", \"favorites\",\"added\" to filter to just the authenticated user's recipe set
     * @param {String} [titleKw] Search just in the recipe title for the keyword
     * @param {Number} [userId] Set the target userid to search their public recipes
     * @param {String} [username] Set the target username to search their public recipes
     * @param {String} [token] 
     * @param {Boolean} [photos] if set to true, limit search results to photos only
     * @param {Boolean} [boostmine] if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders)
     * @param {String} [includeCat] integer of the subcategory you'd like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \"Main Dish &gt; Casseroles\".
     * @param {String} [excludeCat] like include_cat, set this to an integer to exclude a specific category
     * @param {String} [includePrimarycat] csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]
     * @param {String} [excludePrimarycat] csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]
     * @param {String} [includeIng] A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken
     * @param {String} [excludeIng] A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required)
     * @param {String} [cuisine] Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese
     * @param {String} [db] 
     * @param {String} [userset] If set to a given username, it'll force the search to filter to just that username
     * @param {Number} [servingsMin] Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \"dozen\", etc. This parameter simply specifies the minimum number for that value entered in \"yield.\"
     * @param {Number} [totalMins] Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \"1 hour, 15 minutes\" to 75 before passing in.)
     * @param {Number} [maxIngredients] Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less
     * @param {Number} [minIngredients] Optional. If supplied, will restrict results to recipes that have at least {minIngredients}
     * @param {Number} [rpp] integer; results per page
     * @param {Number} [pg] integer: the page number
     * @param {Number} [vtn] when set to 1, limit to vegetarian (Powersearch-capable plan required)
     * @param {Number} [vgn] when set to 1, limit to vegan (Powersearch-capable plan required)
     * @param {Number} [chs] when set to 1, limit to contains-cheese (Powersearch-capable plan required)
     * @param {Number} [glf] when set to 1, limit to gluten-free (Powersearch-capable plan required)
     * @param {Number} [ntf] when set to 1, limit to nut-free (Powersearch-capable plan required)
     * @param {Number} [dyf] when set to 1, limit to dairy-free (Powersearch-capable plan required)
     * @param {Number} [sff] when set to 1, limit to seafood-free (Powersearch-capable plan required)
     * @param {Number} [slf] when set to 1, limit to shellfish-free (Powersearch-capable plan required)
     * @param {Number} [tnf] when set to 1, limit to tree-nut free (Powersearch-capable plan required)
     * @param {Number} [wmf] when set to 1, limit to white-meat free (Powersearch-capable plan required)
     * @param {Number} [rmf] when set to 1, limit to red-meat free (Powersearch-capable plan required)
     * @param {Number} [cps] when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required)
     * @param {Number} [champion] optional. When set to 1, this will limit search results to \"best of\" recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don't include this parameter.
     * @param {Boolean} [synonyms] optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon)
     * @param {module:api/RecipeApi~recipeRecipeSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPI2RecipeSearchResult}
     */
    recipeRecipeSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'any_kw': opts['anyKw'],
        'folder': opts['folder'],
        'coll': opts['coll'],
        'filter': opts['filter'],
        'title_kw': opts['titleKw'],
        'userId': opts['userId'],
        'username': opts['username'],
        'token': opts['token'],
        'photos': opts['photos'],
        'boostmine': opts['boostmine'],
        'include_cat': opts['includeCat'],
        'exclude_cat': opts['excludeCat'],
        'include_primarycat': opts['includePrimarycat'],
        'exclude_primarycat': opts['excludePrimarycat'],
        'include_ing': opts['includeIng'],
        'exclude_ing': opts['excludeIng'],
        'cuisine': opts['cuisine'],
        'db': opts['db'],
        'userset': opts['userset'],
        'servingsMin': opts['servingsMin'],
        'totalMins': opts['totalMins'],
        'maxIngredients': opts['maxIngredients'],
        'minIngredients': opts['minIngredients'],
        'rpp': opts['rpp'],
        'pg': opts['pg'],
        'vtn': opts['vtn'],
        'vgn': opts['vgn'],
        'chs': opts['chs'],
        'glf': opts['glf'],
        'ntf': opts['ntf'],
        'dyf': opts['dyf'],
        'sff': opts['sff'],
        'slf': opts['slf'],
        'tnf': opts['tnf'],
        'wmf': opts['wmf'],
        'rmf': opts['rmf'],
        'cps': opts['cps'],
        'champion': opts['champion'],
        'synonyms': opts['synonyms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPI2RecipeSearchResult;
      return this.apiClient.callApi(
        '/recipes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeRecipeSearchRandom operation.
     * @callback module:api/RecipeApi~recipeRecipeSearchRandomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPI2RecipeSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you'd like to limit by course, set the parameter \"include_primarycat\" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \"include_ing\" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \"exclude_ing\" to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25              If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).              Or, you can set username=theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter=added,try,favorites,myrecipes\\r\\n\\r\\n              folder=FolderNameCaseSensitive              coll=ID of Collection
     * @param {Object} opts Optional parameters
     * @param {String} [anyKw] Search anywhere in the recipe for the keyword
     * @param {String} [folder] Search in a specific folder name for the authenticated user
     * @param {Number} [coll] Limit to a collection ID number
     * @param {String} [filter] optionally set to either \"myrecipes\", \"try\", \"favorites\",\"added\" to filter to just the authenticated user's recipe set
     * @param {String} [titleKw] Search just in the recipe title for the keyword
     * @param {Number} [userId] Set the target userid to search their public recipes
     * @param {String} [username] Set the target username to search their public recipes
     * @param {String} [token] 
     * @param {Boolean} [photos] if set to true, limit search results to photos only
     * @param {Boolean} [boostmine] if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders)
     * @param {String} [includeCat] integer of the subcategory you'd like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \"Main Dish &gt; Casseroles\".
     * @param {String} [excludeCat] like include_cat, set this to an integer to exclude a specific category
     * @param {String} [includePrimarycat] csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]
     * @param {String} [excludePrimarycat] csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]
     * @param {String} [includeIng] A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken
     * @param {String} [excludeIng] A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required)
     * @param {String} [cuisine] Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese
     * @param {String} [db] 
     * @param {String} [userset] If set to a given username, it'll force the search to filter to just that username
     * @param {Number} [servingsMin] Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \"dozen\", etc. This parameter simply specifies the minimum number for that value entered in \"yield.\"
     * @param {Number} [totalMins] Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \"1 hour, 15 minutes\" to 75 before passing in.)
     * @param {Number} [maxIngredients] Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less
     * @param {Number} [minIngredients] Optional. If supplied, will restrict results to recipes that have at least {minIngredients}
     * @param {Number} [vtn] when set to 1, limit to vegetarian (Powersearch-capable plan required)
     * @param {Number} [vgn] when set to 1, limit to vegan (Powersearch-capable plan required)
     * @param {Number} [chs] when set to 1, limit to contains-cheese (Powersearch-capable plan required)
     * @param {Number} [glf] when set to 1, limit to gluten-free (Powersearch-capable plan required)
     * @param {Number} [ntf] when set to 1, limit to nut-free (Powersearch-capable plan required)
     * @param {Number} [dyf] when set to 1, limit to dairy-free (Powersearch-capable plan required)
     * @param {Number} [sff] when set to 1, limit to seafood-free (Powersearch-capable plan required)
     * @param {Number} [slf] when set to 1, limit to shellfish-free (Powersearch-capable plan required)
     * @param {Number} [tnf] when set to 1, limit to tree-nut free (Powersearch-capable plan required)
     * @param {Number} [wmf] when set to 1, limit to white-meat free (Powersearch-capable plan required)
     * @param {Number} [rmf] when set to 1, limit to red-meat free (Powersearch-capable plan required)
     * @param {Number} [cps] when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required)
     * @param {Number} [champion] optional. When set to 1, this will limit search results to \"best of\" recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don't include this parameter.
     * @param {Boolean} [synonyms] optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon)
     * @param {module:api/RecipeApi~recipeRecipeSearchRandomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPI2RecipeSearchResult}
     */
    recipeRecipeSearchRandom(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'any_kw': opts['anyKw'],
        'folder': opts['folder'],
        'coll': opts['coll'],
        'filter': opts['filter'],
        'title_kw': opts['titleKw'],
        'userId': opts['userId'],
        'username': opts['username'],
        'token': opts['token'],
        'photos': opts['photos'],
        'boostmine': opts['boostmine'],
        'include_cat': opts['includeCat'],
        'exclude_cat': opts['excludeCat'],
        'include_primarycat': opts['includePrimarycat'],
        'exclude_primarycat': opts['excludePrimarycat'],
        'include_ing': opts['includeIng'],
        'exclude_ing': opts['excludeIng'],
        'cuisine': opts['cuisine'],
        'db': opts['db'],
        'userset': opts['userset'],
        'servingsMin': opts['servingsMin'],
        'totalMins': opts['totalMins'],
        'maxIngredients': opts['maxIngredients'],
        'minIngredients': opts['minIngredients'],
        'vtn': opts['vtn'],
        'vgn': opts['vgn'],
        'chs': opts['chs'],
        'glf': opts['glf'],
        'ntf': opts['ntf'],
        'dyf': opts['dyf'],
        'sff': opts['sff'],
        'slf': opts['slf'],
        'tnf': opts['tnf'],
        'wmf': opts['wmf'],
        'rmf': opts['rmf'],
        'cps': opts['cps'],
        'champion': opts['champion'],
        'synonyms': opts['synonyms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPI2RecipeSearchResult;
      return this.apiClient.callApi(
        '/recipes/top25random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeRelated operation.
     * @callback module:api/RecipeApi~recipeRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPI2RecipeSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recipes related to the given recipeId
     * @param {Number} recipeId The recipe id
     * @param {Object} opts Optional parameters
     * @param {Number} [pg] The page
     * @param {Number} [rpp] The results per page
     * @param {module:api/RecipeApi~recipeRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPI2RecipeSearchResult}
     */
    recipeRelated(recipeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling recipeRelated");
      }

      let pathParams = {
        'recipeId': recipeId
      };
      let queryParams = {
        'pg': opts['pg'],
        'rpp': opts['rpp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPI2RecipeSearchResult;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeScan operation.
     * @callback module:api/RecipeApi~recipeScanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST an image as a new RecipeScan request                  1)  Fetch the filename -- DONE                  2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE                  3)  Create 120 thumbnail size  in pics/scan/120 -- DONE                  4)  Insert the CloudTasks record                  5)  Create the HIT                  6)  Update the CloudTasks record with the HIT ID                  7)  Email the requesing user                  8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail
     * @param {Object} opts Optional parameters
     * @param {Boolean} [test] 
     * @param {String} [devicetype] 
     * @param {Number} [lat] 
     * @param {Number} [lng] 
     * @param {module:api/RecipeApi~recipeScanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recipeScan(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'test': opts['test'],
        'devicetype': opts['devicetype'],
        'lat': opts['lat'],
        'lng': opts['lng']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recipe/scan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeZapRecipe operation.
     * @callback module:api/RecipeApi~recipeZapRecipeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Zaps the recipe.
     * @param {Number} id The identifier.
     * @param {module:api/RecipeApi~recipeZapRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    recipeZapRecipe(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeZapRecipe");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/recipe/{id}/zap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
