/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import API2ControllersWebAPIReviewControllerPostReplyReq from '../model/API2ControllersWebAPIReviewControllerPostReplyReq';
import API2ControllersWebAPIReviewControllerReviewRequest from '../model/API2ControllersWebAPIReviewControllerReviewRequest';
import API2ControllersWebAPIReviewControllerReviewRequestLegacy from '../model/API2ControllersWebAPIReviewControllerReviewRequestLegacy';
import BigOvenModelAPIReply from '../model/BigOvenModelAPIReply';
import BigOvenModelAPIReview from '../model/BigOvenModelAPIReview';

/**
* Review service.
* @module api/ReviewApi
* @version partner
*/
export default class ReviewApi {

    /**
    * Constructs a new ReviewApi. 
    * @alias module:api/ReviewApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recipeRecipeIdReviewGet operation.
     * @callback module:api/ReviewApi~recipeRecipeIdReviewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get *my* review for the recipe {recipeId}, where \"me\" is determined by standard authentication headers
     * @param {Number} recipeId 
     * @param {module:api/ReviewApi~recipeRecipeIdReviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReview}
     */
    recipeRecipeIdReviewGet(recipeId, callback) {
      let postBody = null;
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling recipeRecipeIdReviewGet");
      }

      let pathParams = {
        'recipeId': recipeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReview;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/review', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipeReviewReviewIdGet operation.
     * @callback module:api/ReviewApi~recipeReviewReviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.              Recommended display is to list top-level reviews with one featured reply underneath.               Currently, the FeaturedReply is the most recent one for that rating.
     * @param {String} reviewId 
     * @param {module:api/ReviewApi~recipeReviewReviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReview}
     */
    recipeReviewReviewIdGet(reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling recipeReviewReviewIdGet");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReview;
      return this.apiClient.callApi(
        '/recipe/review/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewDelete operation.
     * @callback module:api/ReviewApi~reviewDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED! - Deletes a review by recipeId and reviewId. Please use recipe/review/{reviewId} instead.
     * @param {Number} recipeId 
     * @param {Number} reviewId 
     * @param {module:api/ReviewApi~reviewDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reviewDelete(recipeId, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling reviewDelete");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewDelete");
      }

      let pathParams = {
        'recipeId': recipeId,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/review/{reviewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewDeleteReply operation.
     * @callback module:api/ReviewApi~reviewDeleteReplyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply.
     * @param {String} replyId 
     * @param {module:api/ReviewApi~reviewDeleteReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reviewDeleteReply(replyId, callback) {
      let postBody = null;
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling reviewDeleteReply");
      }

      let pathParams = {
        'replyId': replyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/recipe/review/replies/{replyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewGet operation.
     * @callback module:api/ReviewApi~reviewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.              Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.              We are also supporting more of a \"Google Play\" style model for Reviews and Replies. That is, there are top-level Reviews and then              an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review               per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed              which do NOT carry the \"DEPRECATED\" flag.
     * @param {Number} reviewId int
     * @param {Number} recipeId int
     * @param {module:api/ReviewApi~reviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReview}
     */
    reviewGet(reviewId, recipeId, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewGet");
      }
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling reviewGet");
      }

      let pathParams = {
        'reviewId': reviewId,
        'recipeId': recipeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReview;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/review/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewGetReplies operation.
     * @callback module:api/ReviewApi~reviewGetRepliesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelAPIReply>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a paged list of replies for a given review.
     * @param {String} reviewId 
     * @param {Object} opts Optional parameters
     * @param {Number} [pg] the page (int), starting with 1
     * @param {Number} [rpp] results per page (int)
     * @param {module:api/ReviewApi~reviewGetRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelAPIReply>}
     */
    reviewGetReplies(reviewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewGetReplies");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
        'pg': opts['pg'],
        'rpp': opts['rpp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelAPIReply];
      return this.apiClient.callApi(
        '/recipe/review/{reviewId}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewGetReviews operation.
     * @callback module:api/ReviewApi~reviewGetReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BigOvenModelAPIReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount.
     * @param {Number} recipeId recipe id (int)
     * @param {Object} opts Optional parameters
     * @param {Number} [pg] the page (int), starting with 1
     * @param {Number} [rpp] results per page (int)
     * @param {module:api/ReviewApi~reviewGetReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BigOvenModelAPIReview>}
     */
    reviewGetReviews(recipeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling reviewGetReviews");
      }

      let pathParams = {
        'recipeId': recipeId
      };
      let queryParams = {
        'pg': opts['pg'],
        'rpp': opts['rpp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [BigOvenModelAPIReview];
      return this.apiClient.callApi(
        '/recipe/{recipeId}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewPost operation.
     * @callback module:api/ReviewApi~reviewPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated.
     * @param {Number} recipeId 
     * @param {module:model/API2ControllersWebAPIReviewControllerReviewRequest} aPI2ControllersWebAPIReviewControllerReviewRequest 
     * @param {module:api/ReviewApi~reviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reviewPost(recipeId, aPI2ControllersWebAPIReviewControllerReviewRequest, callback) {
      let postBody = aPI2ControllersWebAPIReviewControllerReviewRequest;
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling reviewPost");
      }
      // verify the required parameter 'aPI2ControllersWebAPIReviewControllerReviewRequest' is set
      if (aPI2ControllersWebAPIReviewControllerReviewRequest === undefined || aPI2ControllersWebAPIReviewControllerReviewRequest === null) {
        throw new Error("Missing the required parameter 'aPI2ControllersWebAPIReviewControllerReviewRequest' when calling reviewPost");
      }

      let pathParams = {
        'recipeId': recipeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/review', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewPostReply operation.
     * @callback module:api/ReviewApi~reviewPostReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do.
     * @param {String} reviewId 
     * @param {module:model/API2ControllersWebAPIReviewControllerPostReplyReq} aPI2ControllersWebAPIReviewControllerPostReplyReq 
     * @param {module:api/ReviewApi~reviewPostReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReply}
     */
    reviewPostReply(reviewId, aPI2ControllersWebAPIReviewControllerPostReplyReq, callback) {
      let postBody = aPI2ControllersWebAPIReviewControllerPostReplyReq;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewPostReply");
      }
      // verify the required parameter 'aPI2ControllersWebAPIReviewControllerPostReplyReq' is set
      if (aPI2ControllersWebAPIReviewControllerPostReplyReq === undefined || aPI2ControllersWebAPIReviewControllerPostReplyReq === null) {
        throw new Error("Missing the required parameter 'aPI2ControllersWebAPIReviewControllerPostReplyReq' when calling reviewPostReply");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReply;
      return this.apiClient.callApi(
        '/recipe/review/{reviewId}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewPut operation.
     * @callback module:api/ReviewApi~reviewPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a given top-level review.
     * @param {String} reviewId 
     * @param {module:model/API2ControllersWebAPIReviewControllerReviewRequest} aPI2ControllersWebAPIReviewControllerReviewRequest 
     * @param {module:api/ReviewApi~reviewPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReview}
     */
    reviewPut(reviewId, aPI2ControllersWebAPIReviewControllerReviewRequest, callback) {
      let postBody = aPI2ControllersWebAPIReviewControllerReviewRequest;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewPut");
      }
      // verify the required parameter 'aPI2ControllersWebAPIReviewControllerReviewRequest' is set
      if (aPI2ControllersWebAPIReviewControllerReviewRequest === undefined || aPI2ControllersWebAPIReviewControllerReviewRequest === null) {
        throw new Error("Missing the required parameter 'aPI2ControllersWebAPIReviewControllerReviewRequest' when calling reviewPut");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReview;
      return this.apiClient.callApi(
        '/recipe/review/{reviewId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewPutLegacy operation.
     * @callback module:api/ReviewApi~reviewPutLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.              We are moving to a string-based primary key system, no longer integers, for reviews and replies.
     * @param {Number} reviewId reviewId (int)
     * @param {Number} recipeId recipeId (int)
     * @param {module:model/API2ControllersWebAPIReviewControllerReviewRequestLegacy} aPI2ControllersWebAPIReviewControllerReviewRequestLegacy 
     * @param {module:api/ReviewApi~reviewPutLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReview}
     */
    reviewPutLegacy(reviewId, recipeId, aPI2ControllersWebAPIReviewControllerReviewRequestLegacy, callback) {
      let postBody = aPI2ControllersWebAPIReviewControllerReviewRequestLegacy;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewPutLegacy");
      }
      // verify the required parameter 'recipeId' is set
      if (recipeId === undefined || recipeId === null) {
        throw new Error("Missing the required parameter 'recipeId' when calling reviewPutLegacy");
      }
      // verify the required parameter 'aPI2ControllersWebAPIReviewControllerReviewRequestLegacy' is set
      if (aPI2ControllersWebAPIReviewControllerReviewRequestLegacy === undefined || aPI2ControllersWebAPIReviewControllerReviewRequestLegacy === null) {
        throw new Error("Missing the required parameter 'aPI2ControllersWebAPIReviewControllerReviewRequestLegacy' when calling reviewPutLegacy");
      }

      let pathParams = {
        'reviewId': reviewId,
        'recipeId': recipeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReview;
      return this.apiClient.callApi(
        '/recipe/{recipeId}/review/{reviewId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewPutReply operation.
     * @callback module:api/ReviewApi~reviewPutReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BigOvenModelAPIReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply.
     * @param {String} replyId 
     * @param {module:model/API2ControllersWebAPIReviewControllerPostReplyReq} aPI2ControllersWebAPIReviewControllerPostReplyReq 
     * @param {module:api/ReviewApi~reviewPutReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BigOvenModelAPIReply}
     */
    reviewPutReply(replyId, aPI2ControllersWebAPIReviewControllerPostReplyReq, callback) {
      let postBody = aPI2ControllersWebAPIReviewControllerPostReplyReq;
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling reviewPutReply");
      }
      // verify the required parameter 'aPI2ControllersWebAPIReviewControllerPostReplyReq' is set
      if (aPI2ControllersWebAPIReviewControllerPostReplyReq === undefined || aPI2ControllersWebAPIReviewControllerPostReplyReq === null) {
        throw new Error("Missing the required parameter 'aPI2ControllersWebAPIReviewControllerPostReplyReq' when calling reviewPutReply");
      }

      let pathParams = {
        'replyId': replyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BigOvenModelAPIReply;
      return this.apiClient.callApi(
        '/recipe/review/replies/{replyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
