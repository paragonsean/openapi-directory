/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigOven_Model_API_NutritionInfo.h
 *
 * 
 */

#ifndef OAIBigOven_Model_API_NutritionInfo_H
#define OAIBigOven_Model_API_NutritionInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBigOven_Model_API_NutritionInfo : public OAIObject {
public:
    OAIBigOven_Model_API_NutritionInfo();
    OAIBigOven_Model_API_NutritionInfo(QString json);
    ~OAIBigOven_Model_API_NutritionInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCaloriesFromFat() const;
    void setCaloriesFromFat(const double &calories_from_fat);
    bool is_calories_from_fat_Set() const;
    bool is_calories_from_fat_Valid() const;

    double getCholesterol() const;
    void setCholesterol(const double &cholesterol);
    bool is_cholesterol_Set() const;
    bool is_cholesterol_Valid() const;

    double getCholesterolPct() const;
    void setCholesterolPct(const double &cholesterol_pct);
    bool is_cholesterol_pct_Set() const;
    bool is_cholesterol_pct_Valid() const;

    double getDietaryFiber() const;
    void setDietaryFiber(const double &dietary_fiber);
    bool is_dietary_fiber_Set() const;
    bool is_dietary_fiber_Valid() const;

    double getDietaryFiberPct() const;
    void setDietaryFiberPct(const double &dietary_fiber_pct);
    bool is_dietary_fiber_pct_Set() const;
    bool is_dietary_fiber_pct_Valid() const;

    double getMonoFat() const;
    void setMonoFat(const double &mono_fat);
    bool is_mono_fat_Set() const;
    bool is_mono_fat_Valid() const;

    double getPolyFat() const;
    void setPolyFat(const double &poly_fat);
    bool is_poly_fat_Set() const;
    bool is_poly_fat_Valid() const;

    double getPotassium() const;
    void setPotassium(const double &potassium);
    bool is_potassium_Set() const;
    bool is_potassium_Valid() const;

    double getPotassiumPct() const;
    void setPotassiumPct(const double &potassium_pct);
    bool is_potassium_pct_Set() const;
    bool is_potassium_pct_Valid() const;

    double getProtein() const;
    void setProtein(const double &protein);
    bool is_protein_Set() const;
    bool is_protein_Valid() const;

    double getProteinPct() const;
    void setProteinPct(const double &protein_pct);
    bool is_protein_pct_Set() const;
    bool is_protein_pct_Valid() const;

    double getSatFat() const;
    void setSatFat(const double &sat_fat);
    bool is_sat_fat_Set() const;
    bool is_sat_fat_Valid() const;

    double getSatFatPct() const;
    void setSatFatPct(const double &sat_fat_pct);
    bool is_sat_fat_pct_Set() const;
    bool is_sat_fat_pct_Valid() const;

    QString getSingularYieldUnit() const;
    void setSingularYieldUnit(const QString &singular_yield_unit);
    bool is_singular_yield_unit_Set() const;
    bool is_singular_yield_unit_Valid() const;

    double getSodium() const;
    void setSodium(const double &sodium);
    bool is_sodium_Set() const;
    bool is_sodium_Valid() const;

    double getSodiumPct() const;
    void setSodiumPct(const double &sodium_pct);
    bool is_sodium_pct_Set() const;
    bool is_sodium_pct_Valid() const;

    double getSugar() const;
    void setSugar(const double &sugar);
    bool is_sugar_Set() const;
    bool is_sugar_Valid() const;

    double getTotalCalories() const;
    void setTotalCalories(const double &total_calories);
    bool is_total_calories_Set() const;
    bool is_total_calories_Valid() const;

    double getTotalCarbs() const;
    void setTotalCarbs(const double &total_carbs);
    bool is_total_carbs_Set() const;
    bool is_total_carbs_Valid() const;

    double getTotalCarbsPct() const;
    void setTotalCarbsPct(const double &total_carbs_pct);
    bool is_total_carbs_pct_Set() const;
    bool is_total_carbs_pct_Valid() const;

    double getTotalFat() const;
    void setTotalFat(const double &total_fat);
    bool is_total_fat_Set() const;
    bool is_total_fat_Valid() const;

    double getTotalFatPct() const;
    void setTotalFatPct(const double &total_fat_pct);
    bool is_total_fat_pct_Set() const;
    bool is_total_fat_pct_Valid() const;

    double getTransFat() const;
    void setTransFat(const double &trans_fat);
    bool is_trans_fat_Set() const;
    bool is_trans_fat_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_calories_from_fat;
    bool m_calories_from_fat_isSet;
    bool m_calories_from_fat_isValid;

    double m_cholesterol;
    bool m_cholesterol_isSet;
    bool m_cholesterol_isValid;

    double m_cholesterol_pct;
    bool m_cholesterol_pct_isSet;
    bool m_cholesterol_pct_isValid;

    double m_dietary_fiber;
    bool m_dietary_fiber_isSet;
    bool m_dietary_fiber_isValid;

    double m_dietary_fiber_pct;
    bool m_dietary_fiber_pct_isSet;
    bool m_dietary_fiber_pct_isValid;

    double m_mono_fat;
    bool m_mono_fat_isSet;
    bool m_mono_fat_isValid;

    double m_poly_fat;
    bool m_poly_fat_isSet;
    bool m_poly_fat_isValid;

    double m_potassium;
    bool m_potassium_isSet;
    bool m_potassium_isValid;

    double m_potassium_pct;
    bool m_potassium_pct_isSet;
    bool m_potassium_pct_isValid;

    double m_protein;
    bool m_protein_isSet;
    bool m_protein_isValid;

    double m_protein_pct;
    bool m_protein_pct_isSet;
    bool m_protein_pct_isValid;

    double m_sat_fat;
    bool m_sat_fat_isSet;
    bool m_sat_fat_isValid;

    double m_sat_fat_pct;
    bool m_sat_fat_pct_isSet;
    bool m_sat_fat_pct_isValid;

    QString m_singular_yield_unit;
    bool m_singular_yield_unit_isSet;
    bool m_singular_yield_unit_isValid;

    double m_sodium;
    bool m_sodium_isSet;
    bool m_sodium_isValid;

    double m_sodium_pct;
    bool m_sodium_pct_isSet;
    bool m_sodium_pct_isValid;

    double m_sugar;
    bool m_sugar_isSet;
    bool m_sugar_isValid;

    double m_total_calories;
    bool m_total_calories_isSet;
    bool m_total_calories_isValid;

    double m_total_carbs;
    bool m_total_carbs_isSet;
    bool m_total_carbs_isValid;

    double m_total_carbs_pct;
    bool m_total_carbs_pct_isSet;
    bool m_total_carbs_pct_isValid;

    double m_total_fat;
    bool m_total_fat_isSet;
    bool m_total_fat_isValid;

    double m_total_fat_pct;
    bool m_total_fat_pct_isSet;
    bool m_total_fat_pct_isValid;

    double m_trans_fat;
    bool m_trans_fat_isSet;
    bool m_trans_fat_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigOven_Model_API_NutritionInfo)

#endif // OAIBigOven_Model_API_NutritionInfo_H
