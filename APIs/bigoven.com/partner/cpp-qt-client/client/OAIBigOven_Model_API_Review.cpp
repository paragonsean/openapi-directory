/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigOven_Model_API_Review.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigOven_Model_API_Review::OAIBigOven_Model_API_Review(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigOven_Model_API_Review::OAIBigOven_Model_API_Review() {
    this->initializeModel();
}

OAIBigOven_Model_API_Review::~OAIBigOven_Model_API_Review() {}

void OAIBigOven_Model_API_Review::initializeModel() {

    m_active_minutes_isSet = false;
    m_active_minutes_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_featured_reply_isSet = false;
    m_featured_reply_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_poster_isSet = false;
    m_poster_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_review_id_isSet = false;
    m_review_id_isValid = false;

    m_star_rating_isSet = false;
    m_star_rating_isValid = false;

    m_total_minutes_isSet = false;
    m_total_minutes_isValid = false;
}

void OAIBigOven_Model_API_Review::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigOven_Model_API_Review::fromJsonObject(QJsonObject json) {

    m_active_minutes_isValid = ::OpenAPI::fromJsonValue(m_active_minutes, json[QString("ActiveMinutes")]);
    m_active_minutes_isSet = !json[QString("ActiveMinutes")].isNull() && m_active_minutes_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_featured_reply_isValid = ::OpenAPI::fromJsonValue(m_featured_reply, json[QString("FeaturedReply")]);
    m_featured_reply_isSet = !json[QString("FeaturedReply")].isNull() && m_featured_reply_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("GUID")]);
    m_guid_isSet = !json[QString("GUID")].isNull() && m_guid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("ParentID")]);
    m_parent_id_isSet = !json[QString("ParentID")].isNull() && m_parent_id_isValid;

    m_poster_isValid = ::OpenAPI::fromJsonValue(m_poster, json[QString("Poster")]);
    m_poster_isSet = !json[QString("Poster")].isNull() && m_poster_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("Replies")]);
    m_replies_isSet = !json[QString("Replies")].isNull() && m_replies_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("ReplyCount")]);
    m_reply_count_isSet = !json[QString("ReplyCount")].isNull() && m_reply_count_isValid;

    m_review_id_isValid = ::OpenAPI::fromJsonValue(m_review_id, json[QString("ReviewID")]);
    m_review_id_isSet = !json[QString("ReviewID")].isNull() && m_review_id_isValid;

    m_star_rating_isValid = ::OpenAPI::fromJsonValue(m_star_rating, json[QString("StarRating")]);
    m_star_rating_isSet = !json[QString("StarRating")].isNull() && m_star_rating_isValid;

    m_total_minutes_isValid = ::OpenAPI::fromJsonValue(m_total_minutes, json[QString("TotalMinutes")]);
    m_total_minutes_isSet = !json[QString("TotalMinutes")].isNull() && m_total_minutes_isValid;
}

QString OAIBigOven_Model_API_Review::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigOven_Model_API_Review::asJsonObject() const {
    QJsonObject obj;
    if (m_active_minutes_isSet) {
        obj.insert(QString("ActiveMinutes"), ::OpenAPI::toJsonValue(m_active_minutes));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_featured_reply.isSet()) {
        obj.insert(QString("FeaturedReply"), ::OpenAPI::toJsonValue(m_featured_reply));
    }
    if (m_guid_isSet) {
        obj.insert(QString("GUID"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("ParentID"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_poster.isSet()) {
        obj.insert(QString("Poster"), ::OpenAPI::toJsonValue(m_poster));
    }
    if (m_replies.size() > 0) {
        obj.insert(QString("Replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("ReplyCount"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_review_id_isSet) {
        obj.insert(QString("ReviewID"), ::OpenAPI::toJsonValue(m_review_id));
    }
    if (m_star_rating_isSet) {
        obj.insert(QString("StarRating"), ::OpenAPI::toJsonValue(m_star_rating));
    }
    if (m_total_minutes_isSet) {
        obj.insert(QString("TotalMinutes"), ::OpenAPI::toJsonValue(m_total_minutes));
    }
    return obj;
}

qint32 OAIBigOven_Model_API_Review::getActiveMinutes() const {
    return m_active_minutes;
}
void OAIBigOven_Model_API_Review::setActiveMinutes(const qint32 &active_minutes) {
    m_active_minutes = active_minutes;
    m_active_minutes_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_active_minutes_Set() const{
    return m_active_minutes_isSet;
}

bool OAIBigOven_Model_API_Review::is_active_minutes_Valid() const{
    return m_active_minutes_isValid;
}

QString OAIBigOven_Model_API_Review::getComment() const {
    return m_comment;
}
void OAIBigOven_Model_API_Review::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIBigOven_Model_API_Review::is_comment_Valid() const{
    return m_comment_isValid;
}

QDateTime OAIBigOven_Model_API_Review::getCreationDate() const {
    return m_creation_date;
}
void OAIBigOven_Model_API_Review::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIBigOven_Model_API_Review::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIBigOven_Model_API_Reply OAIBigOven_Model_API_Review::getFeaturedReply() const {
    return m_featured_reply;
}
void OAIBigOven_Model_API_Review::setFeaturedReply(const OAIBigOven_Model_API_Reply &featured_reply) {
    m_featured_reply = featured_reply;
    m_featured_reply_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_featured_reply_Set() const{
    return m_featured_reply_isSet;
}

bool OAIBigOven_Model_API_Review::is_featured_reply_Valid() const{
    return m_featured_reply_isValid;
}

QString OAIBigOven_Model_API_Review::getGuid() const {
    return m_guid;
}
void OAIBigOven_Model_API_Review::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIBigOven_Model_API_Review::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIBigOven_Model_API_Review::getId() const {
    return m_id;
}
void OAIBigOven_Model_API_Review::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBigOven_Model_API_Review::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIBigOven_Model_API_Review::getLastModified() const {
    return m_last_modified;
}
void OAIBigOven_Model_API_Review::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIBigOven_Model_API_Review::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

qint64 OAIBigOven_Model_API_Review::getParentId() const {
    return m_parent_id;
}
void OAIBigOven_Model_API_Review::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIBigOven_Model_API_Review::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

OAIBigOven_Model_API_UserInfo OAIBigOven_Model_API_Review::getPoster() const {
    return m_poster;
}
void OAIBigOven_Model_API_Review::setPoster(const OAIBigOven_Model_API_UserInfo &poster) {
    m_poster = poster;
    m_poster_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_poster_Set() const{
    return m_poster_isSet;
}

bool OAIBigOven_Model_API_Review::is_poster_Valid() const{
    return m_poster_isValid;
}

QList<OAIBigOven_Model_API_Review> OAIBigOven_Model_API_Review::getReplies() const {
    return m_replies;
}
void OAIBigOven_Model_API_Review::setReplies(const QList<OAIBigOven_Model_API_Review> &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIBigOven_Model_API_Review::is_replies_Valid() const{
    return m_replies_isValid;
}

qint32 OAIBigOven_Model_API_Review::getReplyCount() const {
    return m_reply_count;
}
void OAIBigOven_Model_API_Review::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAIBigOven_Model_API_Review::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

qint64 OAIBigOven_Model_API_Review::getReviewId() const {
    return m_review_id;
}
void OAIBigOven_Model_API_Review::setReviewId(const qint64 &review_id) {
    m_review_id = review_id;
    m_review_id_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_review_id_Set() const{
    return m_review_id_isSet;
}

bool OAIBigOven_Model_API_Review::is_review_id_Valid() const{
    return m_review_id_isValid;
}

double OAIBigOven_Model_API_Review::getStarRating() const {
    return m_star_rating;
}
void OAIBigOven_Model_API_Review::setStarRating(const double &star_rating) {
    m_star_rating = star_rating;
    m_star_rating_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_star_rating_Set() const{
    return m_star_rating_isSet;
}

bool OAIBigOven_Model_API_Review::is_star_rating_Valid() const{
    return m_star_rating_isValid;
}

qint32 OAIBigOven_Model_API_Review::getTotalMinutes() const {
    return m_total_minutes;
}
void OAIBigOven_Model_API_Review::setTotalMinutes(const qint32 &total_minutes) {
    m_total_minutes = total_minutes;
    m_total_minutes_isSet = true;
}

bool OAIBigOven_Model_API_Review::is_total_minutes_Set() const{
    return m_total_minutes_isSet;
}

bool OAIBigOven_Model_API_Review::is_total_minutes_Valid() const{
    return m_total_minutes_isValid;
}

bool OAIBigOven_Model_API_Review::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_reply.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigOven_Model_API_Review::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
