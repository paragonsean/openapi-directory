/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigOven_Model_API_Ingredient.h
 *
 * 
 */

#ifndef OAIBigOven_Model_API_Ingredient_H
#define OAIBigOven_Model_API_Ingredient_H

#include <QJsonObject>

#include "OAIBigOven_Model_API_IngredientInfo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigOven_Model_API_IngredientInfo;

class OAIBigOven_Model_API_Ingredient : public OAIObject {
public:
    OAIBigOven_Model_API_Ingredient();
    OAIBigOven_Model_API_Ingredient(QString json);
    ~OAIBigOven_Model_API_Ingredient() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDisplayIndex() const;
    void setDisplayIndex(const qint32 &display_index);
    bool is_display_index_Set() const;
    bool is_display_index_Valid() const;

    QString getDisplayQuantity() const;
    void setDisplayQuantity(const QString &display_quantity);
    bool is_display_quantity_Set() const;
    bool is_display_quantity_Valid() const;

    QString getHtmlName() const;
    void setHtmlName(const QString &html_name);
    bool is_html_name_Set() const;
    bool is_html_name_Valid() const;

    qint64 getIngredientId() const;
    void setIngredientId(const qint64 &ingredient_id);
    bool is_ingredient_id_Set() const;
    bool is_ingredient_id_Valid() const;

    OAIBigOven_Model_API_IngredientInfo getIngredientInfo() const;
    void setIngredientInfo(const OAIBigOven_Model_API_IngredientInfo &ingredient_info);
    bool is_ingredient_info_Set() const;
    bool is_ingredient_info_Valid() const;

    bool isIsHeading() const;
    void setIsHeading(const bool &is_heading);
    bool is_is_heading_Set() const;
    bool is_is_heading_Valid() const;

    bool isIsLinked() const;
    void setIsLinked(const bool &is_linked);
    bool is_is_linked_Set() const;
    bool is_is_linked_Valid() const;

    QString getMetricDisplayQuantity() const;
    void setMetricDisplayQuantity(const QString &metric_display_quantity);
    bool is_metric_display_quantity_Set() const;
    bool is_metric_display_quantity_Valid() const;

    double getMetricQuantity() const;
    void setMetricQuantity(const double &metric_quantity);
    bool is_metric_quantity_Set() const;
    bool is_metric_quantity_Valid() const;

    QString getMetricUnit() const;
    void setMetricUnit(const QString &metric_unit);
    bool is_metric_unit_Set() const;
    bool is_metric_unit_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPreparationNotes() const;
    void setPreparationNotes(const QString &preparation_notes);
    bool is_preparation_notes_Set() const;
    bool is_preparation_notes_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_display_index;
    bool m_display_index_isSet;
    bool m_display_index_isValid;

    QString m_display_quantity;
    bool m_display_quantity_isSet;
    bool m_display_quantity_isValid;

    QString m_html_name;
    bool m_html_name_isSet;
    bool m_html_name_isValid;

    qint64 m_ingredient_id;
    bool m_ingredient_id_isSet;
    bool m_ingredient_id_isValid;

    OAIBigOven_Model_API_IngredientInfo m_ingredient_info;
    bool m_ingredient_info_isSet;
    bool m_ingredient_info_isValid;

    bool m_is_heading;
    bool m_is_heading_isSet;
    bool m_is_heading_isValid;

    bool m_is_linked;
    bool m_is_linked_isSet;
    bool m_is_linked_isValid;

    QString m_metric_display_quantity;
    bool m_metric_display_quantity_isSet;
    bool m_metric_display_quantity_isValid;

    double m_metric_quantity;
    bool m_metric_quantity_isSet;
    bool m_metric_quantity_isValid;

    QString m_metric_unit;
    bool m_metric_unit_isSet;
    bool m_metric_unit_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_preparation_notes;
    bool m_preparation_notes_isSet;
    bool m_preparation_notes_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigOven_Model_API_Ingredient)

#endif // OAIBigOven_Model_API_Ingredient_H
