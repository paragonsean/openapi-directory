/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigOven_Model_API_RecipeInfo.h
 *
 * 
 */

#ifndef OAIBigOven_Model_API_RecipeInfo_H
#define OAIBigOven_Model_API_RecipeInfo_H

#include <QJsonObject>

#include "OAIBigOven_Model_API_UserInfo.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigOven_Model_API_UserInfo;

class OAIBigOven_Model_API_RecipeInfo : public OAIObject {
public:
    OAIBigOven_Model_API_RecipeInfo();
    OAIBigOven_Model_API_RecipeInfo(QString json);
    ~OAIBigOven_Model_API_RecipeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBookmarkUrl() const;
    void setBookmarkUrl(const QString &bookmark_url);
    bool is_bookmark_url_Set() const;
    bool is_bookmark_url_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getCuisine() const;
    void setCuisine(const QString &cuisine);
    bool is_cuisine_Set() const;
    bool is_cuisine_Valid() const;

    bool isHasVideos() const;
    void setHasVideos(const bool &has_videos);
    bool is_has_videos_Set() const;
    bool is_has_videos_Valid() const;

    QString getHeroPhotoUrl() const;
    void setHeroPhotoUrl(const QString &hero_photo_url);
    bool is_hero_photo_url_Set() const;
    bool is_hero_photo_url_Valid() const;

    bool isHideFromPublicSearch() const;
    void setHideFromPublicSearch(const bool &hide_from_public_search);
    bool is_hide_from_public_search_Set() const;
    bool is_hide_from_public_search_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getImageUrl120() const;
    void setImageUrl120(const QString &image_url120);
    bool is_image_url120_Set() const;
    bool is_image_url120_Valid() const;

    bool isIsBookmark() const;
    void setIsBookmark(const bool &is_bookmark);
    bool is_is_bookmark_Set() const;
    bool is_is_bookmark_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    qint32 getMaxImageSquare() const;
    void setMaxImageSquare(const qint32 &max_image_square);
    bool is_max_image_square_Set() const;
    bool is_max_image_square_Valid() const;

    QString getMicrocategory() const;
    void setMicrocategory(const QString &microcategory);
    bool is_microcategory_Set() const;
    bool is_microcategory_Valid() const;

    OAIBigOven_Model_API_UserInfo getPoster() const;
    void setPoster(const OAIBigOven_Model_API_UserInfo &poster);
    bool is_poster_Set() const;
    bool is_poster_Valid() const;

    double getQualityScore() const;
    void setQualityScore(const double &quality_score);
    bool is_quality_score_Set() const;
    bool is_quality_score_Valid() const;

    qint32 getRecipeId() const;
    void setRecipeId(const qint32 &recipe_id);
    bool is_recipe_id_Set() const;
    bool is_recipe_id_Valid() const;

    qint32 getReviewCount() const;
    void setReviewCount(const qint32 &review_count);
    bool is_review_count_Set() const;
    bool is_review_count_Valid() const;

    double getStarRating() const;
    void setStarRating(const double &star_rating);
    bool is_star_rating_Set() const;
    bool is_star_rating_Valid() const;

    QString getStarRatingImg() const;
    void setStarRatingImg(const QString &star_rating_img);
    bool is_star_rating_img_Set() const;
    bool is_star_rating_img_Valid() const;

    QString getSubcategory() const;
    void setSubcategory(const QString &subcategory);
    bool is_subcategory_Set() const;
    bool is_subcategory_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTotalTries() const;
    void setTotalTries(const qint32 &total_tries);
    bool is_total_tries_Set() const;
    bool is_total_tries_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    double getYieldNumber() const;
    void setYieldNumber(const double &yield_number);
    bool is_yield_number_Set() const;
    bool is_yield_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bookmark_url;
    bool m_bookmark_url_isSet;
    bool m_bookmark_url_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_cuisine;
    bool m_cuisine_isSet;
    bool m_cuisine_isValid;

    bool m_has_videos;
    bool m_has_videos_isSet;
    bool m_has_videos_isValid;

    QString m_hero_photo_url;
    bool m_hero_photo_url_isSet;
    bool m_hero_photo_url_isValid;

    bool m_hide_from_public_search;
    bool m_hide_from_public_search_isSet;
    bool m_hide_from_public_search_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_image_url120;
    bool m_image_url120_isSet;
    bool m_image_url120_isValid;

    bool m_is_bookmark;
    bool m_is_bookmark_isSet;
    bool m_is_bookmark_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    qint32 m_max_image_square;
    bool m_max_image_square_isSet;
    bool m_max_image_square_isValid;

    QString m_microcategory;
    bool m_microcategory_isSet;
    bool m_microcategory_isValid;

    OAIBigOven_Model_API_UserInfo m_poster;
    bool m_poster_isSet;
    bool m_poster_isValid;

    double m_quality_score;
    bool m_quality_score_isSet;
    bool m_quality_score_isValid;

    qint32 m_recipe_id;
    bool m_recipe_id_isSet;
    bool m_recipe_id_isValid;

    qint32 m_review_count;
    bool m_review_count_isSet;
    bool m_review_count_isValid;

    double m_star_rating;
    bool m_star_rating_isSet;
    bool m_star_rating_isValid;

    QString m_star_rating_img;
    bool m_star_rating_img_isSet;
    bool m_star_rating_img_isValid;

    QString m_subcategory;
    bool m_subcategory_isSet;
    bool m_subcategory_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_total_tries;
    bool m_total_tries_isSet;
    bool m_total_tries_isValid;

    QString m_web_url;
    bool m_web_url_isSet;
    bool m_web_url_isValid;

    double m_yield_number;
    bool m_yield_number_isSet;
    bool m_yield_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigOven_Model_API_RecipeInfo)

#endif // OAIBigOven_Model_API_RecipeInfo_H
