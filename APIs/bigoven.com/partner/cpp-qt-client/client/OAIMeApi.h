/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeApi_H
#define OAI_OAIMeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI2_Controllers_WebAPI_MeController_PreferenceOptions.h"
#include "OAIAPI2_Models_BigOvenUser.h"
#include "OAIAPI2_Models_Personal.h"
#include "OAIAPI2_Models_Preference.h"
#include "OAIAPI2_Models_Profile.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeApi : public QObject {
    Q_OBJECT

public:
    OAIMeApi(const int timeOut = 0);
    ~OAIMeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void meGetOptions();


    virtual void meIndex();

    /**
    * @param[in]  oaiapi2_models_profile OAIAPI2_Models_Profile [required]
    */
    virtual void meProfilePut(const OAIAPI2_Models_Profile &oaiapi2_models_profile);

    /**
    * @param[in]  oaiapi2_models_big_oven_user OAIAPI2_Models_BigOvenUser [required]
    */
    virtual void mePutMe(const OAIAPI2_Models_BigOvenUser &oaiapi2_models_big_oven_user);

    /**
    * @param[in]  oaiapi2_models_personal OAIAPI2_Models_Personal [required]
    */
    virtual void mePutMePersonal(const OAIAPI2_Models_Personal &oaiapi2_models_personal);

    /**
    * @param[in]  oaiapi2_models_preference OAIAPI2_Models_Preference [required]
    */
    virtual void mePutMePreferences(const OAIAPI2_Models_Preference &oaiapi2_models_preference);


    virtual void meSkinny();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meGetOptionsCallback(OAIHttpRequestWorker *worker);
    void meIndexCallback(OAIHttpRequestWorker *worker);
    void meProfilePutCallback(OAIHttpRequestWorker *worker);
    void mePutMeCallback(OAIHttpRequestWorker *worker);
    void mePutMePersonalCallback(OAIHttpRequestWorker *worker);
    void mePutMePreferencesCallback(OAIHttpRequestWorker *worker);
    void meSkinnyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meGetOptionsSignal(OAIAPI2_Controllers_WebAPI_MeController_PreferenceOptions summary);
    void meIndexSignal(OAIAPI2_Models_BigOvenUser summary);
    void meProfilePutSignal(OAIAPI2_Models_BigOvenUser summary);
    void mePutMeSignal(OAIAPI2_Models_BigOvenUser summary);
    void mePutMePersonalSignal(OAIAPI2_Models_BigOvenUser summary);
    void mePutMePreferencesSignal(OAIAPI2_Models_BigOvenUser summary);
    void meSkinnySignal(OAIAPI2_Models_BigOvenUser summary);


    void meGetOptionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Controllers_WebAPI_MeController_PreferenceOptions summary);
    void meIndexSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_BigOvenUser summary);
    void meProfilePutSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_BigOvenUser summary);
    void mePutMeSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_BigOvenUser summary);
    void mePutMePersonalSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_BigOvenUser summary);
    void mePutMePreferencesSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_BigOvenUser summary);
    void meSkinnySignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_BigOvenUser summary);

    Q_DECL_DEPRECATED_X("Use meGetOptionsSignalError() instead")
    void meGetOptionsSignalE(OAIAPI2_Controllers_WebAPI_MeController_PreferenceOptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meGetOptionsSignalError(OAIAPI2_Controllers_WebAPI_MeController_PreferenceOptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meIndexSignalError() instead")
    void meIndexSignalE(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meIndexSignalError(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meProfilePutSignalError() instead")
    void meProfilePutSignalE(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meProfilePutSignalError(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePutMeSignalError() instead")
    void mePutMeSignalE(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mePutMeSignalError(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePutMePersonalSignalError() instead")
    void mePutMePersonalSignalE(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mePutMePersonalSignalError(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePutMePreferencesSignalError() instead")
    void mePutMePreferencesSignalE(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mePutMePreferencesSignalError(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meSkinnySignalError() instead")
    void meSkinnySignalE(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meSkinnySignalError(OAIAPI2_Models_BigOvenUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meGetOptionsSignalErrorFull() instead")
    void meGetOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meGetOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meIndexSignalErrorFull() instead")
    void meIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meProfilePutSignalErrorFull() instead")
    void meProfilePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meProfilePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePutMeSignalErrorFull() instead")
    void mePutMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mePutMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePutMePersonalSignalErrorFull() instead")
    void mePutMePersonalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mePutMePersonalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePutMePreferencesSignalErrorFull() instead")
    void mePutMePreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mePutMePreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meSkinnySignalErrorFull() instead")
    void meSkinnySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meSkinnySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
