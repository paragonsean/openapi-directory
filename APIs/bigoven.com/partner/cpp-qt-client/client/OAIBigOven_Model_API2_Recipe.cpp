/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigOven_Model_API2_Recipe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigOven_Model_API2_Recipe::OAIBigOven_Model_API2_Recipe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigOven_Model_API2_Recipe::OAIBigOven_Model_API2_Recipe() {
    this->initializeModel();
}

OAIBigOven_Model_API2_Recipe::~OAIBigOven_Model_API2_Recipe() {}

void OAIBigOven_Model_API2_Recipe::initializeModel() {

    m_active_minutes_isSet = false;
    m_active_minutes_isValid = false;

    m_ad_tags_isSet = false;
    m_ad_tags_isValid = false;

    m_admin_boost_isSet = false;
    m_admin_boost_isValid = false;

    m_all_categories_text_isSet = false;
    m_all_categories_text_isValid = false;

    m_bookmark_image_url_isSet = false;
    m_bookmark_image_url_isValid = false;

    m_bookmark_site_logo_isSet = false;
    m_bookmark_site_logo_isValid = false;

    m_bookmark_url_isSet = false;
    m_bookmark_url_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_cuisine_isSet = false;
    m_cuisine_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_favorite_count_isSet = false;
    m_favorite_count_isValid = false;

    m_image_squares_isSet = false;
    m_image_squares_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_ingredients_isSet = false;
    m_ingredients_isValid = false;

    m_ingredients_text_block_isSet = false;
    m_ingredients_text_block_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_is_bookmark_isSet = false;
    m_is_bookmark_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_is_recipe_scan_isSet = false;
    m_is_recipe_scan_isValid = false;

    m_is_sponsored_isSet = false;
    m_is_sponsored_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_max_image_square_isSet = false;
    m_max_image_square_isValid = false;

    m_medal_count_isSet = false;
    m_medal_count_isValid = false;

    m_menu_count_isSet = false;
    m_menu_count_isValid = false;

    m_microcategory_isSet = false;
    m_microcategory_isValid = false;

    m_notes_count_isSet = false;
    m_notes_count_isValid = false;

    m_nutrition_info_isSet = false;
    m_nutrition_info_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_poster_isSet = false;
    m_poster_isValid = false;

    m_primary_ingredient_isSet = false;
    m_primary_ingredient_isValid = false;

    m_recipe_id_isSet = false;
    m_recipe_id_isValid = false;

    m_review_count_isSet = false;
    m_review_count_isValid = false;

    m_star_rating_isSet = false;
    m_star_rating_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_subcategory_isSet = false;
    m_subcategory_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_minutes_isSet = false;
    m_total_minutes_isValid = false;

    m_variant_of_recipe_id_isSet = false;
    m_variant_of_recipe_id_isValid = false;

    m_verified_by_class_isSet = false;
    m_verified_by_class_isValid = false;

    m_verified_date_time_isSet = false;
    m_verified_date_time_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_yield_number_isSet = false;
    m_yield_number_isValid = false;

    m_yield_unit_isSet = false;
    m_yield_unit_isValid = false;
}

void OAIBigOven_Model_API2_Recipe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigOven_Model_API2_Recipe::fromJsonObject(QJsonObject json) {

    m_active_minutes_isValid = ::OpenAPI::fromJsonValue(m_active_minutes, json[QString("ActiveMinutes")]);
    m_active_minutes_isSet = !json[QString("ActiveMinutes")].isNull() && m_active_minutes_isValid;

    m_ad_tags_isValid = ::OpenAPI::fromJsonValue(m_ad_tags, json[QString("AdTags")]);
    m_ad_tags_isSet = !json[QString("AdTags")].isNull() && m_ad_tags_isValid;

    m_admin_boost_isValid = ::OpenAPI::fromJsonValue(m_admin_boost, json[QString("AdminBoost")]);
    m_admin_boost_isSet = !json[QString("AdminBoost")].isNull() && m_admin_boost_isValid;

    m_all_categories_text_isValid = ::OpenAPI::fromJsonValue(m_all_categories_text, json[QString("AllCategoriesText")]);
    m_all_categories_text_isSet = !json[QString("AllCategoriesText")].isNull() && m_all_categories_text_isValid;

    m_bookmark_image_url_isValid = ::OpenAPI::fromJsonValue(m_bookmark_image_url, json[QString("BookmarkImageURL")]);
    m_bookmark_image_url_isSet = !json[QString("BookmarkImageURL")].isNull() && m_bookmark_image_url_isValid;

    m_bookmark_site_logo_isValid = ::OpenAPI::fromJsonValue(m_bookmark_site_logo, json[QString("BookmarkSiteLogo")]);
    m_bookmark_site_logo_isSet = !json[QString("BookmarkSiteLogo")].isNull() && m_bookmark_site_logo_isValid;

    m_bookmark_url_isValid = ::OpenAPI::fromJsonValue(m_bookmark_url, json[QString("BookmarkURL")]);
    m_bookmark_url_isSet = !json[QString("BookmarkURL")].isNull() && m_bookmark_url_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("Collection")]);
    m_collection_isSet = !json[QString("Collection")].isNull() && m_collection_isValid;

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("CollectionID")]);
    m_collection_id_isSet = !json[QString("CollectionID")].isNull() && m_collection_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_cuisine_isValid = ::OpenAPI::fromJsonValue(m_cuisine, json[QString("Cuisine")]);
    m_cuisine_isSet = !json[QString("Cuisine")].isNull() && m_cuisine_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_favorite_count_isValid = ::OpenAPI::fromJsonValue(m_favorite_count, json[QString("FavoriteCount")]);
    m_favorite_count_isSet = !json[QString("FavoriteCount")].isNull() && m_favorite_count_isValid;

    m_image_squares_isValid = ::OpenAPI::fromJsonValue(m_image_squares, json[QString("ImageSquares")]);
    m_image_squares_isSet = !json[QString("ImageSquares")].isNull() && m_image_squares_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("ImageURL")]);
    m_image_url_isSet = !json[QString("ImageURL")].isNull() && m_image_url_isValid;

    m_ingredients_isValid = ::OpenAPI::fromJsonValue(m_ingredients, json[QString("Ingredients")]);
    m_ingredients_isSet = !json[QString("Ingredients")].isNull() && m_ingredients_isValid;

    m_ingredients_text_block_isValid = ::OpenAPI::fromJsonValue(m_ingredients_text_block, json[QString("IngredientsTextBlock")]);
    m_ingredients_text_block_isSet = !json[QString("IngredientsTextBlock")].isNull() && m_ingredients_text_block_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("Instructions")]);
    m_instructions_isSet = !json[QString("Instructions")].isNull() && m_instructions_isValid;

    m_is_bookmark_isValid = ::OpenAPI::fromJsonValue(m_is_bookmark, json[QString("IsBookmark")]);
    m_is_bookmark_isSet = !json[QString("IsBookmark")].isNull() && m_is_bookmark_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("IsPrivate")]);
    m_is_private_isSet = !json[QString("IsPrivate")].isNull() && m_is_private_isValid;

    m_is_recipe_scan_isValid = ::OpenAPI::fromJsonValue(m_is_recipe_scan, json[QString("IsRecipeScan")]);
    m_is_recipe_scan_isSet = !json[QString("IsRecipeScan")].isNull() && m_is_recipe_scan_isValid;

    m_is_sponsored_isValid = ::OpenAPI::fromJsonValue(m_is_sponsored, json[QString("IsSponsored")]);
    m_is_sponsored_isSet = !json[QString("IsSponsored")].isNull() && m_is_sponsored_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_max_image_square_isValid = ::OpenAPI::fromJsonValue(m_max_image_square, json[QString("MaxImageSquare")]);
    m_max_image_square_isSet = !json[QString("MaxImageSquare")].isNull() && m_max_image_square_isValid;

    m_medal_count_isValid = ::OpenAPI::fromJsonValue(m_medal_count, json[QString("MedalCount")]);
    m_medal_count_isSet = !json[QString("MedalCount")].isNull() && m_medal_count_isValid;

    m_menu_count_isValid = ::OpenAPI::fromJsonValue(m_menu_count, json[QString("MenuCount")]);
    m_menu_count_isSet = !json[QString("MenuCount")].isNull() && m_menu_count_isValid;

    m_microcategory_isValid = ::OpenAPI::fromJsonValue(m_microcategory, json[QString("Microcategory")]);
    m_microcategory_isSet = !json[QString("Microcategory")].isNull() && m_microcategory_isValid;

    m_notes_count_isValid = ::OpenAPI::fromJsonValue(m_notes_count, json[QString("NotesCount")]);
    m_notes_count_isSet = !json[QString("NotesCount")].isNull() && m_notes_count_isValid;

    m_nutrition_info_isValid = ::OpenAPI::fromJsonValue(m_nutrition_info, json[QString("NutritionInfo")]);
    m_nutrition_info_isSet = !json[QString("NutritionInfo")].isNull() && m_nutrition_info_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("PhotoUrl")]);
    m_photo_url_isSet = !json[QString("PhotoUrl")].isNull() && m_photo_url_isValid;

    m_poster_isValid = ::OpenAPI::fromJsonValue(m_poster, json[QString("Poster")]);
    m_poster_isSet = !json[QString("Poster")].isNull() && m_poster_isValid;

    m_primary_ingredient_isValid = ::OpenAPI::fromJsonValue(m_primary_ingredient, json[QString("PrimaryIngredient")]);
    m_primary_ingredient_isSet = !json[QString("PrimaryIngredient")].isNull() && m_primary_ingredient_isValid;

    m_recipe_id_isValid = ::OpenAPI::fromJsonValue(m_recipe_id, json[QString("RecipeID")]);
    m_recipe_id_isSet = !json[QString("RecipeID")].isNull() && m_recipe_id_isValid;

    m_review_count_isValid = ::OpenAPI::fromJsonValue(m_review_count, json[QString("ReviewCount")]);
    m_review_count_isSet = !json[QString("ReviewCount")].isNull() && m_review_count_isValid;

    m_star_rating_isValid = ::OpenAPI::fromJsonValue(m_star_rating, json[QString("StarRating")]);
    m_star_rating_isSet = !json[QString("StarRating")].isNull() && m_star_rating_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("Steps")]);
    m_steps_isSet = !json[QString("Steps")].isNull() && m_steps_isValid;

    m_subcategory_isValid = ::OpenAPI::fromJsonValue(m_subcategory, json[QString("Subcategory")]);
    m_subcategory_isSet = !json[QString("Subcategory")].isNull() && m_subcategory_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_total_minutes_isValid = ::OpenAPI::fromJsonValue(m_total_minutes, json[QString("TotalMinutes")]);
    m_total_minutes_isSet = !json[QString("TotalMinutes")].isNull() && m_total_minutes_isValid;

    m_variant_of_recipe_id_isValid = ::OpenAPI::fromJsonValue(m_variant_of_recipe_id, json[QString("VariantOfRecipeID")]);
    m_variant_of_recipe_id_isSet = !json[QString("VariantOfRecipeID")].isNull() && m_variant_of_recipe_id_isValid;

    m_verified_by_class_isValid = ::OpenAPI::fromJsonValue(m_verified_by_class, json[QString("VerifiedByClass")]);
    m_verified_by_class_isSet = !json[QString("VerifiedByClass")].isNull() && m_verified_by_class_isValid;

    m_verified_date_time_isValid = ::OpenAPI::fromJsonValue(m_verified_date_time, json[QString("VerifiedDateTime")]);
    m_verified_date_time_isSet = !json[QString("VerifiedDateTime")].isNull() && m_verified_date_time_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("WebURL")]);
    m_web_url_isSet = !json[QString("WebURL")].isNull() && m_web_url_isValid;

    m_yield_number_isValid = ::OpenAPI::fromJsonValue(m_yield_number, json[QString("YieldNumber")]);
    m_yield_number_isSet = !json[QString("YieldNumber")].isNull() && m_yield_number_isValid;

    m_yield_unit_isValid = ::OpenAPI::fromJsonValue(m_yield_unit, json[QString("YieldUnit")]);
    m_yield_unit_isSet = !json[QString("YieldUnit")].isNull() && m_yield_unit_isValid;
}

QString OAIBigOven_Model_API2_Recipe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigOven_Model_API2_Recipe::asJsonObject() const {
    QJsonObject obj;
    if (m_active_minutes_isSet) {
        obj.insert(QString("ActiveMinutes"), ::OpenAPI::toJsonValue(m_active_minutes));
    }
    if (m_ad_tags_isSet) {
        obj.insert(QString("AdTags"), ::OpenAPI::toJsonValue(m_ad_tags));
    }
    if (m_admin_boost_isSet) {
        obj.insert(QString("AdminBoost"), ::OpenAPI::toJsonValue(m_admin_boost));
    }
    if (m_all_categories_text_isSet) {
        obj.insert(QString("AllCategoriesText"), ::OpenAPI::toJsonValue(m_all_categories_text));
    }
    if (m_bookmark_image_url_isSet) {
        obj.insert(QString("BookmarkImageURL"), ::OpenAPI::toJsonValue(m_bookmark_image_url));
    }
    if (m_bookmark_site_logo_isSet) {
        obj.insert(QString("BookmarkSiteLogo"), ::OpenAPI::toJsonValue(m_bookmark_site_logo));
    }
    if (m_bookmark_url_isSet) {
        obj.insert(QString("BookmarkURL"), ::OpenAPI::toJsonValue(m_bookmark_url));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_collection_isSet) {
        obj.insert(QString("Collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_collection_id_isSet) {
        obj.insert(QString("CollectionID"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_cuisine_isSet) {
        obj.insert(QString("Cuisine"), ::OpenAPI::toJsonValue(m_cuisine));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_favorite_count_isSet) {
        obj.insert(QString("FavoriteCount"), ::OpenAPI::toJsonValue(m_favorite_count));
    }
    if (m_image_squares.size() > 0) {
        obj.insert(QString("ImageSquares"), ::OpenAPI::toJsonValue(m_image_squares));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("ImageURL"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_ingredients.size() > 0) {
        obj.insert(QString("Ingredients"), ::OpenAPI::toJsonValue(m_ingredients));
    }
    if (m_ingredients_text_block_isSet) {
        obj.insert(QString("IngredientsTextBlock"), ::OpenAPI::toJsonValue(m_ingredients_text_block));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("Instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_is_bookmark_isSet) {
        obj.insert(QString("IsBookmark"), ::OpenAPI::toJsonValue(m_is_bookmark));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("IsPrivate"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_is_recipe_scan_isSet) {
        obj.insert(QString("IsRecipeScan"), ::OpenAPI::toJsonValue(m_is_recipe_scan));
    }
    if (m_is_sponsored_isSet) {
        obj.insert(QString("IsSponsored"), ::OpenAPI::toJsonValue(m_is_sponsored));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_max_image_square_isSet) {
        obj.insert(QString("MaxImageSquare"), ::OpenAPI::toJsonValue(m_max_image_square));
    }
    if (m_medal_count_isSet) {
        obj.insert(QString("MedalCount"), ::OpenAPI::toJsonValue(m_medal_count));
    }
    if (m_menu_count_isSet) {
        obj.insert(QString("MenuCount"), ::OpenAPI::toJsonValue(m_menu_count));
    }
    if (m_microcategory_isSet) {
        obj.insert(QString("Microcategory"), ::OpenAPI::toJsonValue(m_microcategory));
    }
    if (m_notes_count_isSet) {
        obj.insert(QString("NotesCount"), ::OpenAPI::toJsonValue(m_notes_count));
    }
    if (m_nutrition_info.isSet()) {
        obj.insert(QString("NutritionInfo"), ::OpenAPI::toJsonValue(m_nutrition_info));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("PhotoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_poster.isSet()) {
        obj.insert(QString("Poster"), ::OpenAPI::toJsonValue(m_poster));
    }
    if (m_primary_ingredient_isSet) {
        obj.insert(QString("PrimaryIngredient"), ::OpenAPI::toJsonValue(m_primary_ingredient));
    }
    if (m_recipe_id_isSet) {
        obj.insert(QString("RecipeID"), ::OpenAPI::toJsonValue(m_recipe_id));
    }
    if (m_review_count_isSet) {
        obj.insert(QString("ReviewCount"), ::OpenAPI::toJsonValue(m_review_count));
    }
    if (m_star_rating_isSet) {
        obj.insert(QString("StarRating"), ::OpenAPI::toJsonValue(m_star_rating));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("Steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_subcategory_isSet) {
        obj.insert(QString("Subcategory"), ::OpenAPI::toJsonValue(m_subcategory));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_minutes_isSet) {
        obj.insert(QString("TotalMinutes"), ::OpenAPI::toJsonValue(m_total_minutes));
    }
    if (m_variant_of_recipe_id_isSet) {
        obj.insert(QString("VariantOfRecipeID"), ::OpenAPI::toJsonValue(m_variant_of_recipe_id));
    }
    if (m_verified_by_class_isSet) {
        obj.insert(QString("VerifiedByClass"), ::OpenAPI::toJsonValue(m_verified_by_class));
    }
    if (m_verified_date_time_isSet) {
        obj.insert(QString("VerifiedDateTime"), ::OpenAPI::toJsonValue(m_verified_date_time));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("WebURL"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_yield_number_isSet) {
        obj.insert(QString("YieldNumber"), ::OpenAPI::toJsonValue(m_yield_number));
    }
    if (m_yield_unit_isSet) {
        obj.insert(QString("YieldUnit"), ::OpenAPI::toJsonValue(m_yield_unit));
    }
    return obj;
}

qint32 OAIBigOven_Model_API2_Recipe::getActiveMinutes() const {
    return m_active_minutes;
}
void OAIBigOven_Model_API2_Recipe::setActiveMinutes(const qint32 &active_minutes) {
    m_active_minutes = active_minutes;
    m_active_minutes_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_active_minutes_Set() const{
    return m_active_minutes_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_active_minutes_Valid() const{
    return m_active_minutes_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getAdTags() const {
    return m_ad_tags;
}
void OAIBigOven_Model_API2_Recipe::setAdTags(const QString &ad_tags) {
    m_ad_tags = ad_tags;
    m_ad_tags_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_ad_tags_Set() const{
    return m_ad_tags_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_ad_tags_Valid() const{
    return m_ad_tags_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getAdminBoost() const {
    return m_admin_boost;
}
void OAIBigOven_Model_API2_Recipe::setAdminBoost(const qint32 &admin_boost) {
    m_admin_boost = admin_boost;
    m_admin_boost_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_admin_boost_Set() const{
    return m_admin_boost_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_admin_boost_Valid() const{
    return m_admin_boost_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getAllCategoriesText() const {
    return m_all_categories_text;
}
void OAIBigOven_Model_API2_Recipe::setAllCategoriesText(const QString &all_categories_text) {
    m_all_categories_text = all_categories_text;
    m_all_categories_text_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_all_categories_text_Set() const{
    return m_all_categories_text_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_all_categories_text_Valid() const{
    return m_all_categories_text_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getBookmarkImageUrl() const {
    return m_bookmark_image_url;
}
void OAIBigOven_Model_API2_Recipe::setBookmarkImageUrl(const QString &bookmark_image_url) {
    m_bookmark_image_url = bookmark_image_url;
    m_bookmark_image_url_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_bookmark_image_url_Set() const{
    return m_bookmark_image_url_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_bookmark_image_url_Valid() const{
    return m_bookmark_image_url_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getBookmarkSiteLogo() const {
    return m_bookmark_site_logo;
}
void OAIBigOven_Model_API2_Recipe::setBookmarkSiteLogo(const QString &bookmark_site_logo) {
    m_bookmark_site_logo = bookmark_site_logo;
    m_bookmark_site_logo_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_bookmark_site_logo_Set() const{
    return m_bookmark_site_logo_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_bookmark_site_logo_Valid() const{
    return m_bookmark_site_logo_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getBookmarkUrl() const {
    return m_bookmark_url;
}
void OAIBigOven_Model_API2_Recipe::setBookmarkUrl(const QString &bookmark_url) {
    m_bookmark_url = bookmark_url;
    m_bookmark_url_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_bookmark_url_Set() const{
    return m_bookmark_url_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_bookmark_url_Valid() const{
    return m_bookmark_url_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getCategory() const {
    return m_category;
}
void OAIBigOven_Model_API2_Recipe::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getCollection() const {
    return m_collection;
}
void OAIBigOven_Model_API2_Recipe::setCollection(const QString &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_collection_Valid() const{
    return m_collection_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getCollectionId() const {
    return m_collection_id;
}
void OAIBigOven_Model_API2_Recipe::setCollectionId(const qint32 &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

QDateTime OAIBigOven_Model_API2_Recipe::getCreationDate() const {
    return m_creation_date;
}
void OAIBigOven_Model_API2_Recipe::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getCuisine() const {
    return m_cuisine;
}
void OAIBigOven_Model_API2_Recipe::setCuisine(const QString &cuisine) {
    m_cuisine = cuisine;
    m_cuisine_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_cuisine_Set() const{
    return m_cuisine_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_cuisine_Valid() const{
    return m_cuisine_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getDescription() const {
    return m_description;
}
void OAIBigOven_Model_API2_Recipe::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getFavoriteCount() const {
    return m_favorite_count;
}
void OAIBigOven_Model_API2_Recipe::setFavoriteCount(const qint32 &favorite_count) {
    m_favorite_count = favorite_count;
    m_favorite_count_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_favorite_count_Set() const{
    return m_favorite_count_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_favorite_count_Valid() const{
    return m_favorite_count_isValid;
}

QList<qint32> OAIBigOven_Model_API2_Recipe::getImageSquares() const {
    return m_image_squares;
}
void OAIBigOven_Model_API2_Recipe::setImageSquares(const QList<qint32> &image_squares) {
    m_image_squares = image_squares;
    m_image_squares_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_image_squares_Set() const{
    return m_image_squares_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_image_squares_Valid() const{
    return m_image_squares_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getImageUrl() const {
    return m_image_url;
}
void OAIBigOven_Model_API2_Recipe::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QList<OAIBigOven_Model_API_Ingredient> OAIBigOven_Model_API2_Recipe::getIngredients() const {
    return m_ingredients;
}
void OAIBigOven_Model_API2_Recipe::setIngredients(const QList<OAIBigOven_Model_API_Ingredient> &ingredients) {
    m_ingredients = ingredients;
    m_ingredients_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_ingredients_Set() const{
    return m_ingredients_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_ingredients_Valid() const{
    return m_ingredients_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getIngredientsTextBlock() const {
    return m_ingredients_text_block;
}
void OAIBigOven_Model_API2_Recipe::setIngredientsTextBlock(const QString &ingredients_text_block) {
    m_ingredients_text_block = ingredients_text_block;
    m_ingredients_text_block_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_ingredients_text_block_Set() const{
    return m_ingredients_text_block_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_ingredients_text_block_Valid() const{
    return m_ingredients_text_block_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getInstructions() const {
    return m_instructions;
}
void OAIBigOven_Model_API2_Recipe::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIBigOven_Model_API2_Recipe::isIsBookmark() const {
    return m_is_bookmark;
}
void OAIBigOven_Model_API2_Recipe::setIsBookmark(const bool &is_bookmark) {
    m_is_bookmark = is_bookmark;
    m_is_bookmark_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_is_bookmark_Set() const{
    return m_is_bookmark_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_is_bookmark_Valid() const{
    return m_is_bookmark_isValid;
}

bool OAIBigOven_Model_API2_Recipe::isIsPrivate() const {
    return m_is_private;
}
void OAIBigOven_Model_API2_Recipe::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_is_private_Valid() const{
    return m_is_private_isValid;
}

bool OAIBigOven_Model_API2_Recipe::isIsRecipeScan() const {
    return m_is_recipe_scan;
}
void OAIBigOven_Model_API2_Recipe::setIsRecipeScan(const bool &is_recipe_scan) {
    m_is_recipe_scan = is_recipe_scan;
    m_is_recipe_scan_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_is_recipe_scan_Set() const{
    return m_is_recipe_scan_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_is_recipe_scan_Valid() const{
    return m_is_recipe_scan_isValid;
}

bool OAIBigOven_Model_API2_Recipe::isIsSponsored() const {
    return m_is_sponsored;
}
void OAIBigOven_Model_API2_Recipe::setIsSponsored(const bool &is_sponsored) {
    m_is_sponsored = is_sponsored;
    m_is_sponsored_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_is_sponsored_Set() const{
    return m_is_sponsored_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_is_sponsored_Valid() const{
    return m_is_sponsored_isValid;
}

QDateTime OAIBigOven_Model_API2_Recipe::getLastModified() const {
    return m_last_modified;
}
void OAIBigOven_Model_API2_Recipe::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getMaxImageSquare() const {
    return m_max_image_square;
}
void OAIBigOven_Model_API2_Recipe::setMaxImageSquare(const qint32 &max_image_square) {
    m_max_image_square = max_image_square;
    m_max_image_square_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_max_image_square_Set() const{
    return m_max_image_square_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_max_image_square_Valid() const{
    return m_max_image_square_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getMedalCount() const {
    return m_medal_count;
}
void OAIBigOven_Model_API2_Recipe::setMedalCount(const qint32 &medal_count) {
    m_medal_count = medal_count;
    m_medal_count_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_medal_count_Set() const{
    return m_medal_count_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_medal_count_Valid() const{
    return m_medal_count_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getMenuCount() const {
    return m_menu_count;
}
void OAIBigOven_Model_API2_Recipe::setMenuCount(const qint32 &menu_count) {
    m_menu_count = menu_count;
    m_menu_count_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_menu_count_Set() const{
    return m_menu_count_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_menu_count_Valid() const{
    return m_menu_count_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getMicrocategory() const {
    return m_microcategory;
}
void OAIBigOven_Model_API2_Recipe::setMicrocategory(const QString &microcategory) {
    m_microcategory = microcategory;
    m_microcategory_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_microcategory_Set() const{
    return m_microcategory_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_microcategory_Valid() const{
    return m_microcategory_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getNotesCount() const {
    return m_notes_count;
}
void OAIBigOven_Model_API2_Recipe::setNotesCount(const qint32 &notes_count) {
    m_notes_count = notes_count;
    m_notes_count_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_notes_count_Set() const{
    return m_notes_count_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_notes_count_Valid() const{
    return m_notes_count_isValid;
}

OAIBigOven_Model_API_NutritionInfo OAIBigOven_Model_API2_Recipe::getNutritionInfo() const {
    return m_nutrition_info;
}
void OAIBigOven_Model_API2_Recipe::setNutritionInfo(const OAIBigOven_Model_API_NutritionInfo &nutrition_info) {
    m_nutrition_info = nutrition_info;
    m_nutrition_info_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_nutrition_info_Set() const{
    return m_nutrition_info_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_nutrition_info_Valid() const{
    return m_nutrition_info_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getPhotoUrl() const {
    return m_photo_url;
}
void OAIBigOven_Model_API2_Recipe::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

OAIBigOven_Model_API_UserInfo OAIBigOven_Model_API2_Recipe::getPoster() const {
    return m_poster;
}
void OAIBigOven_Model_API2_Recipe::setPoster(const OAIBigOven_Model_API_UserInfo &poster) {
    m_poster = poster;
    m_poster_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_poster_Set() const{
    return m_poster_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_poster_Valid() const{
    return m_poster_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getPrimaryIngredient() const {
    return m_primary_ingredient;
}
void OAIBigOven_Model_API2_Recipe::setPrimaryIngredient(const QString &primary_ingredient) {
    m_primary_ingredient = primary_ingredient;
    m_primary_ingredient_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_primary_ingredient_Set() const{
    return m_primary_ingredient_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_primary_ingredient_Valid() const{
    return m_primary_ingredient_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getRecipeId() const {
    return m_recipe_id;
}
void OAIBigOven_Model_API2_Recipe::setRecipeId(const qint32 &recipe_id) {
    m_recipe_id = recipe_id;
    m_recipe_id_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_recipe_id_Set() const{
    return m_recipe_id_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_recipe_id_Valid() const{
    return m_recipe_id_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getReviewCount() const {
    return m_review_count;
}
void OAIBigOven_Model_API2_Recipe::setReviewCount(const qint32 &review_count) {
    m_review_count = review_count;
    m_review_count_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_review_count_Set() const{
    return m_review_count_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_review_count_Valid() const{
    return m_review_count_isValid;
}

double OAIBigOven_Model_API2_Recipe::getStarRating() const {
    return m_star_rating;
}
void OAIBigOven_Model_API2_Recipe::setStarRating(const double &star_rating) {
    m_star_rating = star_rating;
    m_star_rating_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_star_rating_Set() const{
    return m_star_rating_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_star_rating_Valid() const{
    return m_star_rating_isValid;
}

QList<OAIBigOven_Model_InstructionStep> OAIBigOven_Model_API2_Recipe::getSteps() const {
    return m_steps;
}
void OAIBigOven_Model_API2_Recipe::setSteps(const QList<OAIBigOven_Model_InstructionStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_steps_Valid() const{
    return m_steps_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getSubcategory() const {
    return m_subcategory;
}
void OAIBigOven_Model_API2_Recipe::setSubcategory(const QString &subcategory) {
    m_subcategory = subcategory;
    m_subcategory_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_subcategory_Set() const{
    return m_subcategory_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_subcategory_Valid() const{
    return m_subcategory_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getTitle() const {
    return m_title;
}
void OAIBigOven_Model_API2_Recipe::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getTotalMinutes() const {
    return m_total_minutes;
}
void OAIBigOven_Model_API2_Recipe::setTotalMinutes(const qint32 &total_minutes) {
    m_total_minutes = total_minutes;
    m_total_minutes_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_total_minutes_Set() const{
    return m_total_minutes_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_total_minutes_Valid() const{
    return m_total_minutes_isValid;
}

qint32 OAIBigOven_Model_API2_Recipe::getVariantOfRecipeId() const {
    return m_variant_of_recipe_id;
}
void OAIBigOven_Model_API2_Recipe::setVariantOfRecipeId(const qint32 &variant_of_recipe_id) {
    m_variant_of_recipe_id = variant_of_recipe_id;
    m_variant_of_recipe_id_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_variant_of_recipe_id_Set() const{
    return m_variant_of_recipe_id_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_variant_of_recipe_id_Valid() const{
    return m_variant_of_recipe_id_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getVerifiedByClass() const {
    return m_verified_by_class;
}
void OAIBigOven_Model_API2_Recipe::setVerifiedByClass(const QString &verified_by_class) {
    m_verified_by_class = verified_by_class;
    m_verified_by_class_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_verified_by_class_Set() const{
    return m_verified_by_class_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_verified_by_class_Valid() const{
    return m_verified_by_class_isValid;
}

QDateTime OAIBigOven_Model_API2_Recipe::getVerifiedDateTime() const {
    return m_verified_date_time;
}
void OAIBigOven_Model_API2_Recipe::setVerifiedDateTime(const QDateTime &verified_date_time) {
    m_verified_date_time = verified_date_time;
    m_verified_date_time_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_verified_date_time_Set() const{
    return m_verified_date_time_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_verified_date_time_Valid() const{
    return m_verified_date_time_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getWebUrl() const {
    return m_web_url;
}
void OAIBigOven_Model_API2_Recipe::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_web_url_Valid() const{
    return m_web_url_isValid;
}

double OAIBigOven_Model_API2_Recipe::getYieldNumber() const {
    return m_yield_number;
}
void OAIBigOven_Model_API2_Recipe::setYieldNumber(const double &yield_number) {
    m_yield_number = yield_number;
    m_yield_number_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_yield_number_Set() const{
    return m_yield_number_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_yield_number_Valid() const{
    return m_yield_number_isValid;
}

QString OAIBigOven_Model_API2_Recipe::getYieldUnit() const {
    return m_yield_unit;
}
void OAIBigOven_Model_API2_Recipe::setYieldUnit(const QString &yield_unit) {
    m_yield_unit = yield_unit;
    m_yield_unit_isSet = true;
}

bool OAIBigOven_Model_API2_Recipe::is_yield_unit_Set() const{
    return m_yield_unit_isSet;
}

bool OAIBigOven_Model_API2_Recipe::is_yield_unit_Valid() const{
    return m_yield_unit_isValid;
}

bool OAIBigOven_Model_API2_Recipe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_boost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_categories_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmark_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmark_site_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmark_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cuisine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_squares.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredients_text_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bookmark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_recipe_scan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sponsored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_image_square_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microcategory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrition_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ingredient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_of_recipe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_by_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yield_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yield_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigOven_Model_API2_Recipe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
