/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigOven_Model_API_UserInfo.h
 *
 * 
 */

#ifndef OAIBigOven_Model_API_UserInfo_H
#define OAIBigOven_Model_API_UserInfo_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBigOven_Model_API_UserInfo : public OAIObject {
public:
    OAIBigOven_Model_API_UserInfo();
    OAIBigOven_Model_API_UserInfo(QString json);
    ~OAIBigOven_Model_API_UserInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getImageUrl48() const;
    void setImageUrl48(const QString &image_url48);
    bool is_image_url48_Set() const;
    bool is_image_url48_Valid() const;

    bool isIsKitchenHelper() const;
    void setIsKitchenHelper(const bool &is_kitchen_helper);
    bool is_is_kitchen_helper_Set() const;
    bool is_is_kitchen_helper_Valid() const;

    bool isIsPremium() const;
    void setIsPremium(const bool &is_premium);
    bool is_is_premium_Set() const;
    bool is_is_premium_Valid() const;

    bool isIsUsingRecurly() const;
    void setIsUsingRecurly(const bool &is_using_recurly);
    bool is_is_using_recurly_Set() const;
    bool is_is_using_recurly_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    QDateTime getMemberSince() const;
    void setMemberSince(const QDateTime &member_since);
    bool is_member_since_Set() const;
    bool is_member_since_Valid() const;

    QString getPhotoUrl() const;
    void setPhotoUrl(const QString &photo_url);
    bool is_photo_url_Set() const;
    bool is_photo_url_Valid() const;

    QString getPhotoUrl48() const;
    void setPhotoUrl48(const QString &photo_url48);
    bool is_photo_url48_Set() const;
    bool is_photo_url48_Valid() const;

    QDateTime getPremiumExpiryDate() const;
    void setPremiumExpiryDate(const QDateTime &premium_expiry_date);
    bool is_premium_expiry_date_Set() const;
    bool is_premium_expiry_date_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_image_url48;
    bool m_image_url48_isSet;
    bool m_image_url48_isValid;

    bool m_is_kitchen_helper;
    bool m_is_kitchen_helper_isSet;
    bool m_is_kitchen_helper_isValid;

    bool m_is_premium;
    bool m_is_premium_isSet;
    bool m_is_premium_isValid;

    bool m_is_using_recurly;
    bool m_is_using_recurly_isSet;
    bool m_is_using_recurly_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    QDateTime m_member_since;
    bool m_member_since_isSet;
    bool m_member_since_isValid;

    QString m_photo_url;
    bool m_photo_url_isSet;
    bool m_photo_url_isValid;

    QString m_photo_url48;
    bool m_photo_url48_isSet;
    bool m_photo_url48_isValid;

    QDateTime m_premium_expiry_date;
    bool m_premium_expiry_date_isSet;
    bool m_premium_expiry_date_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString m_web_url;
    bool m_web_url_isSet;
    bool m_web_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigOven_Model_API_UserInfo)

#endif // OAIBigOven_Model_API_UserInfo_H
