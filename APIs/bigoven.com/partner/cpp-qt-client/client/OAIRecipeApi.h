/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecipeApi_H
#define OAI_OAIRecipeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI2_Models_Recipes_FeedbackDTO.h"
#include "OAIAPI2_Models_Recipes_RecipeResponse.h"
#include "OAIAPI2_Result.h"
#include "OAIBigOven_Model_API2_Recipe.h"
#include "OAIBigOven_Model_API2_RecipeSearchResult.h"
#include "OAIBigOven_Model_API_Recipe.h"
#include "OAIBigOven_Model_RecipeCategory.h"
#include "OAIBigOven_Model_RecipeInfoDateTuple2.h"
#include "OAIBigOven_Model_RecipeInfoReviewTuple2.h"
#include "OAIBigOven_Model_RecipeInfoTiny.h"
#include "OAIBigOven_Result.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecipeApi : public QObject {
    Q_OBJECT

public:
    OAIRecipeApi(const int timeOut = 0);
    ~OAIRecipeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void recipeAutoComplete(const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [required]
    */
    virtual void recipeAutoCompleteAllRecipes(const QString &query, const qint32 &limit);

    /**
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [required]
    */
    virtual void recipeAutoCompleteMyRecipes(const QString &query, const qint32 &limit);


    virtual void recipeCategories();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void recipeDelete(const qint32 &id);

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  oaiapi2_models_recipes_feedback_dto OAIAPI2_Models_Recipes_FeedbackDTO [required]
    */
    virtual void recipeFeedback(const qint32 &recipe_id, const OAIAPI2_Models_Recipes_FeedbackDTO &oaiapi2_models_recipes_feedback_dto);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  prefetch bool [optional]
    */
    virtual void recipeGet(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &prefetch = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_name QString [required]
    */
    virtual void recipeGetActiveRecipe(const QString &user_name);


    virtual void recipeGetRandomRecipe();

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  prefetch bool [optional]
    */
    virtual void recipeGetRecipeWithSteps(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &prefetch = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  step_id qint32 [required]
    */
    virtual void recipeGetStep(const QString &user_name, const qint32 &recipe_id, const qint32 &step_id);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  recipe_id qint32 [required]
    */
    virtual void recipeGetStepNumber(const QString &user_name, const qint32 &recipe_id);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  step_id qint32 [required]
    */
    virtual void recipeGetSteps(const QString &user_name, const qint32 &recipe_id, const qint32 &step_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  prefetch bool [optional]
    */
    virtual void recipeGetV2(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &prefetch = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_big_oven_model_api_recipe OAIBigOven_Model_API_Recipe [required]
    */
    virtual void recipePost(const OAIBigOven_Model_API_Recipe &oai_big_oven_model_api_recipe);

    /**
    * @param[in]  oai_big_oven_model_api_recipe OAIBigOven_Model_API_Recipe [required]
    */
    virtual void recipePut(const OAIBigOven_Model_API_Recipe &oai_big_oven_model_api_recipe);

    /**
    * @param[in]  pg qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    */
    virtual void recipeRaves(const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  pg qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    */
    virtual void recipeRecentViews(const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  any_kw QString [optional]
    * @param[in]  folder QString [optional]
    * @param[in]  coll qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  title_kw QString [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  username QString [optional]
    * @param[in]  token QString [optional]
    * @param[in]  photos bool [optional]
    * @param[in]  boostmine bool [optional]
    * @param[in]  include_cat QString [optional]
    * @param[in]  exclude_cat QString [optional]
    * @param[in]  include_primarycat QString [optional]
    * @param[in]  exclude_primarycat QString [optional]
    * @param[in]  include_ing QString [optional]
    * @param[in]  exclude_ing QString [optional]
    * @param[in]  cuisine QString [optional]
    * @param[in]  db QString [optional]
    * @param[in]  userset QString [optional]
    * @param[in]  servings_min double [optional]
    * @param[in]  total_mins qint32 [optional]
    * @param[in]  max_ingredients qint32 [optional]
    * @param[in]  min_ingredients qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    * @param[in]  pg qint32 [optional]
    * @param[in]  vtn qint32 [optional]
    * @param[in]  vgn qint32 [optional]
    * @param[in]  chs qint32 [optional]
    * @param[in]  glf qint32 [optional]
    * @param[in]  ntf qint32 [optional]
    * @param[in]  dyf qint32 [optional]
    * @param[in]  sff qint32 [optional]
    * @param[in]  slf qint32 [optional]
    * @param[in]  tnf qint32 [optional]
    * @param[in]  wmf qint32 [optional]
    * @param[in]  rmf qint32 [optional]
    * @param[in]  cps qint32 [optional]
    * @param[in]  champion qint32 [optional]
    * @param[in]  synonyms bool [optional]
    */
    virtual void recipeRecipeSearch(const ::OpenAPI::OptionalParam<QString> &any_kw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &folder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &coll = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title_kw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &photos = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &boostmine = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_primarycat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_primarycat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_ing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_ing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cuisine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &userset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &servings_min = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &total_mins = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_ingredients = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_ingredients = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vtn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vgn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &chs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &glf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ntf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &dyf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &sff = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &slf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &tnf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &wmf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rmf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cps = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &champion = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &synonyms = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  any_kw QString [optional]
    * @param[in]  folder QString [optional]
    * @param[in]  coll qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  title_kw QString [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  username QString [optional]
    * @param[in]  token QString [optional]
    * @param[in]  photos bool [optional]
    * @param[in]  boostmine bool [optional]
    * @param[in]  include_cat QString [optional]
    * @param[in]  exclude_cat QString [optional]
    * @param[in]  include_primarycat QString [optional]
    * @param[in]  exclude_primarycat QString [optional]
    * @param[in]  include_ing QString [optional]
    * @param[in]  exclude_ing QString [optional]
    * @param[in]  cuisine QString [optional]
    * @param[in]  db QString [optional]
    * @param[in]  userset QString [optional]
    * @param[in]  servings_min double [optional]
    * @param[in]  total_mins qint32 [optional]
    * @param[in]  max_ingredients qint32 [optional]
    * @param[in]  min_ingredients qint32 [optional]
    * @param[in]  vtn qint32 [optional]
    * @param[in]  vgn qint32 [optional]
    * @param[in]  chs qint32 [optional]
    * @param[in]  glf qint32 [optional]
    * @param[in]  ntf qint32 [optional]
    * @param[in]  dyf qint32 [optional]
    * @param[in]  sff qint32 [optional]
    * @param[in]  slf qint32 [optional]
    * @param[in]  tnf qint32 [optional]
    * @param[in]  wmf qint32 [optional]
    * @param[in]  rmf qint32 [optional]
    * @param[in]  cps qint32 [optional]
    * @param[in]  champion qint32 [optional]
    * @param[in]  synonyms bool [optional]
    */
    virtual void recipeRecipeSearchRandom(const ::OpenAPI::OptionalParam<QString> &any_kw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &folder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &coll = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title_kw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &photos = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &boostmine = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_primarycat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_primarycat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_ing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_ing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cuisine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &userset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &servings_min = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &total_mins = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_ingredients = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_ingredients = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vtn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vgn = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &chs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &glf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ntf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &dyf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &sff = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &slf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &tnf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &wmf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rmf = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cps = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &champion = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &synonyms = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  pg qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    */
    virtual void recipeRelated(const qint32 &recipe_id, const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  test bool [optional]
    * @param[in]  devicetype QString [optional]
    * @param[in]  lat double [optional]
    * @param[in]  lng double [optional]
    */
    virtual void recipeScan(const ::OpenAPI::OptionalParam<bool> &test = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &devicetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &lng = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void recipeZapRecipe(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recipeAutoCompleteCallback(OAIHttpRequestWorker *worker);
    void recipeAutoCompleteAllRecipesCallback(OAIHttpRequestWorker *worker);
    void recipeAutoCompleteMyRecipesCallback(OAIHttpRequestWorker *worker);
    void recipeCategoriesCallback(OAIHttpRequestWorker *worker);
    void recipeDeleteCallback(OAIHttpRequestWorker *worker);
    void recipeFeedbackCallback(OAIHttpRequestWorker *worker);
    void recipeGetCallback(OAIHttpRequestWorker *worker);
    void recipeGetActiveRecipeCallback(OAIHttpRequestWorker *worker);
    void recipeGetRandomRecipeCallback(OAIHttpRequestWorker *worker);
    void recipeGetRecipeWithStepsCallback(OAIHttpRequestWorker *worker);
    void recipeGetStepCallback(OAIHttpRequestWorker *worker);
    void recipeGetStepNumberCallback(OAIHttpRequestWorker *worker);
    void recipeGetStepsCallback(OAIHttpRequestWorker *worker);
    void recipeGetV2Callback(OAIHttpRequestWorker *worker);
    void recipePostCallback(OAIHttpRequestWorker *worker);
    void recipePutCallback(OAIHttpRequestWorker *worker);
    void recipeRavesCallback(OAIHttpRequestWorker *worker);
    void recipeRecentViewsCallback(OAIHttpRequestWorker *worker);
    void recipeRecipeSearchCallback(OAIHttpRequestWorker *worker);
    void recipeRecipeSearchRandomCallback(OAIHttpRequestWorker *worker);
    void recipeRelatedCallback(OAIHttpRequestWorker *worker);
    void recipeScanCallback(OAIHttpRequestWorker *worker);
    void recipeZapRecipeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recipeAutoCompleteSignal(QList<QString> summary);
    void recipeAutoCompleteAllRecipesSignal(QList<OAIBigOven_Model_RecipeInfoTiny> summary);
    void recipeAutoCompleteMyRecipesSignal(QList<OAIBigOven_Model_RecipeInfoTiny> summary);
    void recipeCategoriesSignal(QList<OAIBigOven_Model_RecipeCategory> summary);
    void recipeDeleteSignal(OAIObject summary);
    void recipeFeedbackSignal(OAIObject summary);
    void recipeGetSignal(OAIBigOven_Model_API2_Recipe summary);
    void recipeGetActiveRecipeSignal(OAIBigOven_Result summary);
    void recipeGetRandomRecipeSignal(OAIBigOven_Model_API_Recipe summary);
    void recipeGetRecipeWithStepsSignal(OAIBigOven_Model_API2_Recipe summary);
    void recipeGetStepSignal(QString summary);
    void recipeGetStepNumberSignal(OAIAPI2_Result summary);
    void recipeGetStepsSignal(OAIBigOven_Result summary);
    void recipeGetV2Signal(OAIAPI2_Models_Recipes_RecipeResponse summary);
    void recipePostSignal(OAIBigOven_Model_API_Recipe summary);
    void recipePutSignal(OAIBigOven_Model_API_Recipe summary);
    void recipeRavesSignal(QList<OAIBigOven_Model_RecipeInfoReviewTuple2> summary);
    void recipeRecentViewsSignal(QList<OAIBigOven_Model_RecipeInfoDateTuple2> summary);
    void recipeRecipeSearchSignal(OAIBigOven_Model_API2_RecipeSearchResult summary);
    void recipeRecipeSearchRandomSignal(OAIBigOven_Model_API2_RecipeSearchResult summary);
    void recipeRelatedSignal(OAIBigOven_Model_API2_RecipeSearchResult summary);
    void recipeScanSignal();
    void recipeZapRecipeSignal(OAIObject summary);


    void recipeAutoCompleteSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void recipeAutoCompleteAllRecipesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_RecipeInfoTiny> summary);
    void recipeAutoCompleteMyRecipesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_RecipeInfoTiny> summary);
    void recipeCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_RecipeCategory> summary);
    void recipeDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void recipeFeedbackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void recipeGetSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_Recipe summary);
    void recipeGetActiveRecipeSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Result summary);
    void recipeGetRandomRecipeSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Recipe summary);
    void recipeGetRecipeWithStepsSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_Recipe summary);
    void recipeGetStepSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void recipeGetStepNumberSignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Result summary);
    void recipeGetStepsSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Result summary);
    void recipeGetV2SignalFull(OAIHttpRequestWorker *worker, OAIAPI2_Models_Recipes_RecipeResponse summary);
    void recipePostSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Recipe summary);
    void recipePutSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Recipe summary);
    void recipeRavesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_RecipeInfoReviewTuple2> summary);
    void recipeRecentViewsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_RecipeInfoDateTuple2> summary);
    void recipeRecipeSearchSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_RecipeSearchResult summary);
    void recipeRecipeSearchRandomSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_RecipeSearchResult summary);
    void recipeRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_RecipeSearchResult summary);
    void recipeScanSignalFull(OAIHttpRequestWorker *worker);
    void recipeZapRecipeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use recipeAutoCompleteSignalError() instead")
    void recipeAutoCompleteSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeAutoCompleteSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeAutoCompleteAllRecipesSignalError() instead")
    void recipeAutoCompleteAllRecipesSignalE(QList<OAIBigOven_Model_RecipeInfoTiny> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeAutoCompleteAllRecipesSignalError(QList<OAIBigOven_Model_RecipeInfoTiny> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeAutoCompleteMyRecipesSignalError() instead")
    void recipeAutoCompleteMyRecipesSignalE(QList<OAIBigOven_Model_RecipeInfoTiny> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeAutoCompleteMyRecipesSignalError(QList<OAIBigOven_Model_RecipeInfoTiny> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeCategoriesSignalError() instead")
    void recipeCategoriesSignalE(QList<OAIBigOven_Model_RecipeCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeCategoriesSignalError(QList<OAIBigOven_Model_RecipeCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeDeleteSignalError() instead")
    void recipeDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeFeedbackSignalError() instead")
    void recipeFeedbackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeFeedbackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetSignalError() instead")
    void recipeGetSignalE(OAIBigOven_Model_API2_Recipe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetSignalError(OAIBigOven_Model_API2_Recipe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetActiveRecipeSignalError() instead")
    void recipeGetActiveRecipeSignalE(OAIBigOven_Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetActiveRecipeSignalError(OAIBigOven_Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetRandomRecipeSignalError() instead")
    void recipeGetRandomRecipeSignalE(OAIBigOven_Model_API_Recipe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetRandomRecipeSignalError(OAIBigOven_Model_API_Recipe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetRecipeWithStepsSignalError() instead")
    void recipeGetRecipeWithStepsSignalE(OAIBigOven_Model_API2_Recipe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetRecipeWithStepsSignalError(OAIBigOven_Model_API2_Recipe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetStepSignalError() instead")
    void recipeGetStepSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetStepSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetStepNumberSignalError() instead")
    void recipeGetStepNumberSignalE(OAIAPI2_Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetStepNumberSignalError(OAIAPI2_Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetStepsSignalError() instead")
    void recipeGetStepsSignalE(OAIBigOven_Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetStepsSignalError(OAIBigOven_Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetV2SignalError() instead")
    void recipeGetV2SignalE(OAIAPI2_Models_Recipes_RecipeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetV2SignalError(OAIAPI2_Models_Recipes_RecipeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipePostSignalError() instead")
    void recipePostSignalE(OAIBigOven_Model_API_Recipe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipePostSignalError(OAIBigOven_Model_API_Recipe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipePutSignalError() instead")
    void recipePutSignalE(OAIBigOven_Model_API_Recipe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipePutSignalError(OAIBigOven_Model_API_Recipe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRavesSignalError() instead")
    void recipeRavesSignalE(QList<OAIBigOven_Model_RecipeInfoReviewTuple2> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRavesSignalError(QList<OAIBigOven_Model_RecipeInfoReviewTuple2> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRecentViewsSignalError() instead")
    void recipeRecentViewsSignalE(QList<OAIBigOven_Model_RecipeInfoDateTuple2> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecentViewsSignalError(QList<OAIBigOven_Model_RecipeInfoDateTuple2> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRecipeSearchSignalError() instead")
    void recipeRecipeSearchSignalE(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecipeSearchSignalError(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRecipeSearchRandomSignalError() instead")
    void recipeRecipeSearchRandomSignalE(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecipeSearchRandomSignalError(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRelatedSignalError() instead")
    void recipeRelatedSignalE(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRelatedSignalError(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeScanSignalError() instead")
    void recipeScanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recipeScanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeZapRecipeSignalError() instead")
    void recipeZapRecipeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeZapRecipeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recipeAutoCompleteSignalErrorFull() instead")
    void recipeAutoCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeAutoCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeAutoCompleteAllRecipesSignalErrorFull() instead")
    void recipeAutoCompleteAllRecipesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeAutoCompleteAllRecipesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeAutoCompleteMyRecipesSignalErrorFull() instead")
    void recipeAutoCompleteMyRecipesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeAutoCompleteMyRecipesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeCategoriesSignalErrorFull() instead")
    void recipeCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeDeleteSignalErrorFull() instead")
    void recipeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeFeedbackSignalErrorFull() instead")
    void recipeFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetSignalErrorFull() instead")
    void recipeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetActiveRecipeSignalErrorFull() instead")
    void recipeGetActiveRecipeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetActiveRecipeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetRandomRecipeSignalErrorFull() instead")
    void recipeGetRandomRecipeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetRandomRecipeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetRecipeWithStepsSignalErrorFull() instead")
    void recipeGetRecipeWithStepsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetRecipeWithStepsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetStepSignalErrorFull() instead")
    void recipeGetStepSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetStepSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetStepNumberSignalErrorFull() instead")
    void recipeGetStepNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetStepNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetStepsSignalErrorFull() instead")
    void recipeGetStepsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetStepsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeGetV2SignalErrorFull() instead")
    void recipeGetV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeGetV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipePostSignalErrorFull() instead")
    void recipePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipePutSignalErrorFull() instead")
    void recipePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRavesSignalErrorFull() instead")
    void recipeRavesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRavesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRecentViewsSignalErrorFull() instead")
    void recipeRecentViewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecentViewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRecipeSearchSignalErrorFull() instead")
    void recipeRecipeSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecipeSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRecipeSearchRandomSignalErrorFull() instead")
    void recipeRecipeSearchRandomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecipeSearchRandomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeRelatedSignalErrorFull() instead")
    void recipeRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeScanSignalErrorFull() instead")
    void recipeScanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeScanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeZapRecipeSignalErrorFull() instead")
    void recipeZapRecipeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeZapRecipeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
