/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigOven_Model_API2_CollectionInfo.h
 *
 * 
 */

#ifndef OAIBigOven_Model_API2_CollectionInfo_H
#define OAIBigOven_Model_API2_CollectionInfo_H

#include <QJsonObject>

#include "OAIBigOven_Model_API2_RecipeInfox.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigOven_Model_API2_RecipeInfox;

class OAIBigOven_Model_API2_CollectionInfo : public OAIObject {
public:
    OAIBigOven_Model_API2_CollectionInfo();
    OAIBigOven_Model_API2_CollectionInfo(QString json);
    ~OAIBigOven_Model_API2_CollectionInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsFiltered() const;
    void setIsFiltered(const bool &is_filtered);
    bool is_is_filtered_Set() const;
    bool is_is_filtered_Valid() const;

    bool isIsSponsored() const;
    void setIsSponsored(const bool &is_sponsored);
    bool is_is_sponsored_Set() const;
    bool is_is_sponsored_Valid() const;

    QString getMobileUrl() const;
    void setMobileUrl(const QString &mobile_url);
    bool is_mobile_url_Set() const;
    bool is_mobile_url_Valid() const;

    bool isPro() const;
    void setPro(const bool &pro);
    bool is_pro_Set() const;
    bool is_pro_Valid() const;

    QString getPhotoUrl() const;
    void setPhotoUrl(const QString &photo_url);
    bool is_photo_url_Set() const;
    bool is_photo_url_Valid() const;

    QList<OAIBigOven_Model_API2_RecipeInfox> getResults() const;
    void setResults(const QList<OAIBigOven_Model_API2_RecipeInfox> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_filtered;
    bool m_is_filtered_isSet;
    bool m_is_filtered_isValid;

    bool m_is_sponsored;
    bool m_is_sponsored_isSet;
    bool m_is_sponsored_isValid;

    QString m_mobile_url;
    bool m_mobile_url_isSet;
    bool m_mobile_url_isValid;

    bool m_pro;
    bool m_pro_isSet;
    bool m_pro_isValid;

    QString m_photo_url;
    bool m_photo_url_isSet;
    bool m_photo_url_isValid;

    QList<OAIBigOven_Model_API2_RecipeInfox> m_results;
    bool m_results_isSet;
    bool m_results_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString m_web_url;
    bool m_web_url_isSet;
    bool m_web_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigOven_Model_API2_CollectionInfo)

#endif // OAIBigOven_Model_API2_CollectionInfo_H
