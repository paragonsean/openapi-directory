/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigOven_Model_API_Grocery_Item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigOven_Model_API_Grocery_Item::OAIBigOven_Model_API_Grocery_Item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigOven_Model_API_Grocery_Item::OAIBigOven_Model_API_Grocery_Item() {
    this->initializeModel();
}

OAIBigOven_Model_API_Grocery_Item::~OAIBigOven_Model_API_Grocery_Item() {}

void OAIBigOven_Model_API_Grocery_Item::initializeModel() {

    m_big_oven_object_isSet = false;
    m_big_oven_object_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_display_quantity_isSet = false;
    m_display_quantity_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_is_checked_isSet = false;
    m_is_checked_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_local_status_isSet = false;
    m_local_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_recipe_id_isSet = false;
    m_recipe_id_isValid = false;

    m_third_party_url_isSet = false;
    m_third_party_url_isValid = false;
}

void OAIBigOven_Model_API_Grocery_Item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigOven_Model_API_Grocery_Item::fromJsonObject(QJsonObject json) {

    m_big_oven_object_isValid = ::OpenAPI::fromJsonValue(m_big_oven_object, json[QString("BigOvenObject")]);
    m_big_oven_object_isSet = !json[QString("BigOvenObject")].isNull() && m_big_oven_object_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("Department")]);
    m_department_isSet = !json[QString("Department")].isNull() && m_department_isValid;

    m_display_quantity_isValid = ::OpenAPI::fromJsonValue(m_display_quantity, json[QString("DisplayQuantity")]);
    m_display_quantity_isSet = !json[QString("DisplayQuantity")].isNull() && m_display_quantity_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("GUID")]);
    m_guid_isSet = !json[QString("GUID")].isNull() && m_guid_isValid;

    m_is_checked_isValid = ::OpenAPI::fromJsonValue(m_is_checked, json[QString("IsChecked")]);
    m_is_checked_isSet = !json[QString("IsChecked")].isNull() && m_is_checked_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemID")]);
    m_item_id_isSet = !json[QString("ItemID")].isNull() && m_item_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_local_status_isValid = ::OpenAPI::fromJsonValue(m_local_status, json[QString("LocalStatus")]);
    m_local_status_isSet = !json[QString("LocalStatus")].isNull() && m_local_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_recipe_id_isValid = ::OpenAPI::fromJsonValue(m_recipe_id, json[QString("RecipeID")]);
    m_recipe_id_isSet = !json[QString("RecipeID")].isNull() && m_recipe_id_isValid;

    m_third_party_url_isValid = ::OpenAPI::fromJsonValue(m_third_party_url, json[QString("ThirdPartyURL")]);
    m_third_party_url_isSet = !json[QString("ThirdPartyURL")].isNull() && m_third_party_url_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigOven_Model_API_Grocery_Item::asJsonObject() const {
    QJsonObject obj;
    if (m_big_oven_object_isSet) {
        obj.insert(QString("BigOvenObject"), ::OpenAPI::toJsonValue(m_big_oven_object));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_department_isSet) {
        obj.insert(QString("Department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_display_quantity_isSet) {
        obj.insert(QString("DisplayQuantity"), ::OpenAPI::toJsonValue(m_display_quantity));
    }
    if (m_guid_isSet) {
        obj.insert(QString("GUID"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_is_checked_isSet) {
        obj.insert(QString("IsChecked"), ::OpenAPI::toJsonValue(m_is_checked));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemID"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_local_status_isSet) {
        obj.insert(QString("LocalStatus"), ::OpenAPI::toJsonValue(m_local_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_recipe_id_isSet) {
        obj.insert(QString("RecipeID"), ::OpenAPI::toJsonValue(m_recipe_id));
    }
    if (m_third_party_url_isSet) {
        obj.insert(QString("ThirdPartyURL"), ::OpenAPI::toJsonValue(m_third_party_url));
    }
    return obj;
}

QString OAIBigOven_Model_API_Grocery_Item::getBigOvenObject() const {
    return m_big_oven_object;
}
void OAIBigOven_Model_API_Grocery_Item::setBigOvenObject(const QString &big_oven_object) {
    m_big_oven_object = big_oven_object;
    m_big_oven_object_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_big_oven_object_Set() const{
    return m_big_oven_object_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_big_oven_object_Valid() const{
    return m_big_oven_object_isValid;
}

QDateTime OAIBigOven_Model_API_Grocery_Item::getCreationDate() const {
    return m_creation_date;
}
void OAIBigOven_Model_API_Grocery_Item::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getDepartment() const {
    return m_department;
}
void OAIBigOven_Model_API_Grocery_Item::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_department_Set() const{
    return m_department_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getDisplayQuantity() const {
    return m_display_quantity;
}
void OAIBigOven_Model_API_Grocery_Item::setDisplayQuantity(const QString &display_quantity) {
    m_display_quantity = display_quantity;
    m_display_quantity_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_display_quantity_Set() const{
    return m_display_quantity_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_display_quantity_Valid() const{
    return m_display_quantity_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getGuid() const {
    return m_guid;
}
void OAIBigOven_Model_API_Grocery_Item::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_guid_Valid() const{
    return m_guid_isValid;
}

bool OAIBigOven_Model_API_Grocery_Item::isIsChecked() const {
    return m_is_checked;
}
void OAIBigOven_Model_API_Grocery_Item::setIsChecked(const bool &is_checked) {
    m_is_checked = is_checked;
    m_is_checked_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_is_checked_Set() const{
    return m_is_checked_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_is_checked_Valid() const{
    return m_is_checked_isValid;
}

qint64 OAIBigOven_Model_API_Grocery_Item::getItemId() const {
    return m_item_id;
}
void OAIBigOven_Model_API_Grocery_Item::setItemId(const qint64 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QDateTime OAIBigOven_Model_API_Grocery_Item::getLastModified() const {
    return m_last_modified;
}
void OAIBigOven_Model_API_Grocery_Item::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getLocalStatus() const {
    return m_local_status;
}
void OAIBigOven_Model_API_Grocery_Item::setLocalStatus(const QString &local_status) {
    m_local_status = local_status;
    m_local_status_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_local_status_Set() const{
    return m_local_status_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_local_status_Valid() const{
    return m_local_status_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getName() const {
    return m_name;
}
void OAIBigOven_Model_API_Grocery_Item::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getNotes() const {
    return m_notes;
}
void OAIBigOven_Model_API_Grocery_Item::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIBigOven_Model_API_Grocery_Item::getRecipeId() const {
    return m_recipe_id;
}
void OAIBigOven_Model_API_Grocery_Item::setRecipeId(const qint32 &recipe_id) {
    m_recipe_id = recipe_id;
    m_recipe_id_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_recipe_id_Set() const{
    return m_recipe_id_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_recipe_id_Valid() const{
    return m_recipe_id_isValid;
}

QString OAIBigOven_Model_API_Grocery_Item::getThirdPartyUrl() const {
    return m_third_party_url;
}
void OAIBigOven_Model_API_Grocery_Item::setThirdPartyUrl(const QString &third_party_url) {
    m_third_party_url = third_party_url;
    m_third_party_url_isSet = true;
}

bool OAIBigOven_Model_API_Grocery_Item::is_third_party_url_Set() const{
    return m_third_party_url_isSet;
}

bool OAIBigOven_Model_API_Grocery_Item::is_third_party_url_Valid() const{
    return m_third_party_url_isValid;
}

bool OAIBigOven_Model_API_Grocery_Item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_oven_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_checked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigOven_Model_API_Grocery_Item::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
