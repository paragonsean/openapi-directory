/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigOven_Model_API_Image.h
 *
 * 
 */

#ifndef OAIBigOven_Model_API_Image_H
#define OAIBigOven_Model_API_Image_H

#include <QJsonObject>

#include "OAIBigOven_Model_API_UserInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigOven_Model_API_UserInfo;

class OAIBigOven_Model_API_Image : public OAIObject {
public:
    OAIBigOven_Model_API_Image();
    OAIBigOven_Model_API_Image(QString json);
    ~OAIBigOven_Model_API_Image() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCaption() const;
    void setCaption(const QString &caption);
    bool is_caption_Set() const;
    bool is_caption_Valid() const;

    QString getCreationDate() const;
    void setCreationDate(const QString &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    qint64 getImageId() const;
    void setImageId(const qint64 &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    QList<qint32> getImageSquares() const;
    void setImageSquares(const QList<qint32> &image_squares);
    bool is_image_squares_Set() const;
    bool is_image_squares_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getImageUrl120() const;
    void setImageUrl120(const QString &image_url120);
    bool is_image_url120_Set() const;
    bool is_image_url120_Valid() const;

    QString getImageUrl128() const;
    void setImageUrl128(const QString &image_url128);
    bool is_image_url128_Set() const;
    bool is_image_url128_Valid() const;

    QString getImageUrl200() const;
    void setImageUrl200(const QString &image_url200);
    bool is_image_url200_Set() const;
    bool is_image_url200_Valid() const;

    QString getImageUrl256() const;
    void setImageUrl256(const QString &image_url256);
    bool is_image_url256_Set() const;
    bool is_image_url256_Valid() const;

    QString getImageUrl48() const;
    void setImageUrl48(const QString &image_url48);
    bool is_image_url48_Set() const;
    bool is_image_url48_Valid() const;

    QString getImageUrl64() const;
    void setImageUrl64(const QString &image_url64);
    bool is_image_url64_Set() const;
    bool is_image_url64_Valid() const;

    bool isIsPrimary() const;
    void setIsPrimary(const bool &is_primary);
    bool is_is_primary_Set() const;
    bool is_is_primary_Valid() const;

    qint32 getMaxImageSquare() const;
    void setMaxImageSquare(const qint32 &max_image_square);
    bool is_max_image_square_Set() const;
    bool is_max_image_square_Valid() const;

    OAIBigOven_Model_API_UserInfo getPoster() const;
    void setPoster(const OAIBigOven_Model_API_UserInfo &poster);
    bool is_poster_Set() const;
    bool is_poster_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_caption;
    bool m_caption_isSet;
    bool m_caption_isValid;

    QString m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    qint64 m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    QList<qint32> m_image_squares;
    bool m_image_squares_isSet;
    bool m_image_squares_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_image_url120;
    bool m_image_url120_isSet;
    bool m_image_url120_isValid;

    QString m_image_url128;
    bool m_image_url128_isSet;
    bool m_image_url128_isValid;

    QString m_image_url200;
    bool m_image_url200_isSet;
    bool m_image_url200_isValid;

    QString m_image_url256;
    bool m_image_url256_isSet;
    bool m_image_url256_isValid;

    QString m_image_url48;
    bool m_image_url48_isSet;
    bool m_image_url48_isValid;

    QString m_image_url64;
    bool m_image_url64_isSet;
    bool m_image_url64_isValid;

    bool m_is_primary;
    bool m_is_primary_isSet;
    bool m_is_primary_isValid;

    qint32 m_max_image_square;
    bool m_max_image_square_isSet;
    bool m_max_image_square_isValid;

    OAIBigOven_Model_API_UserInfo m_poster;
    bool m_poster_isSet;
    bool m_poster_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigOven_Model_API_Image)

#endif // OAIBigOven_Model_API_Image_H
