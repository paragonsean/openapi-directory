/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionApi_H
#define OAI_OAICollectionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBigOven_Model_API2_CollectionInfo.h"
#include "OAIBigOven_Model_API2_RecipeSearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionApi : public QObject {
    Q_OBJECT

public:
    OAICollectionApi(const int timeOut = 0);
    ~OAICollectionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  test QString [optional]
    */
    virtual void collectionCollections(const ::OpenAPI::OptionalParam<QString> &test = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  rpp qint32 [optional]
    * @param[in]  pg qint32 [optional]
    * @param[in]  test bool [optional]
    * @param[in]  session_for_logging QString [optional]
    */
    virtual void collectionGetCollection(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &test = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &session_for_logging = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void collectionGetCollectionMeta(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void collectionCollectionsCallback(OAIHttpRequestWorker *worker);
    void collectionGetCollectionCallback(OAIHttpRequestWorker *worker);
    void collectionGetCollectionMetaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void collectionCollectionsSignal(QList<OAIBigOven_Model_API2_CollectionInfo> summary);
    void collectionGetCollectionSignal(OAIBigOven_Model_API2_RecipeSearchResult summary);
    void collectionGetCollectionMetaSignal(OAIBigOven_Model_API2_CollectionInfo summary);


    void collectionCollectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_API2_CollectionInfo> summary);
    void collectionGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_RecipeSearchResult summary);
    void collectionGetCollectionMetaSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_CollectionInfo summary);

    Q_DECL_DEPRECATED_X("Use collectionCollectionsSignalError() instead")
    void collectionCollectionsSignalE(QList<OAIBigOven_Model_API2_CollectionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionCollectionsSignalError(QList<OAIBigOven_Model_API2_CollectionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionGetCollectionSignalError() instead")
    void collectionGetCollectionSignalE(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionGetCollectionSignalError(OAIBigOven_Model_API2_RecipeSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionGetCollectionMetaSignalError() instead")
    void collectionGetCollectionMetaSignalE(OAIBigOven_Model_API2_CollectionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionGetCollectionMetaSignalError(OAIBigOven_Model_API2_CollectionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use collectionCollectionsSignalErrorFull() instead")
    void collectionCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionGetCollectionSignalErrorFull() instead")
    void collectionGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionGetCollectionMetaSignalErrorFull() instead")
    void collectionGetCollectionMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionGetCollectionMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
