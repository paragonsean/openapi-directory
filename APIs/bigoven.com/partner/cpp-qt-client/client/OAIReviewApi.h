/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReviewApi_H
#define OAI_OAIReviewApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI2_Controllers_WebAPI_ReviewController_PostReplyReq.h"
#include "OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequest.h"
#include "OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequestLegacy.h"
#include "OAIBigOven_Model_API_Reply.h"
#include "OAIBigOven_Model_API_Review.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReviewApi : public QObject {
    Q_OBJECT

public:
    OAIReviewApi(const int timeOut = 0);
    ~OAIReviewApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  recipe_id qint32 [required]
    */
    virtual void recipeRecipeIdReviewGet(const qint32 &recipe_id);

    /**
    * @param[in]  review_id QString [required]
    */
    virtual void recipeReviewReviewIdGet(const QString &review_id);

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  review_id qint64 [required]
    */
    virtual void reviewDelete(const qint32 &recipe_id, const qint64 &review_id);

    /**
    * @param[in]  reply_id QString [required]
    */
    virtual void reviewDeleteReply(const QString &reply_id);

    /**
    * @param[in]  review_id qint32 [required]
    * @param[in]  recipe_id qint32 [required]
    */
    virtual void reviewGet(const qint32 &review_id, const qint32 &recipe_id);

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  pg qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    */
    virtual void reviewGetReplies(const QString &review_id, const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  pg qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    */
    virtual void reviewGetReviews(const qint32 &recipe_id, const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  oaiapi2_controllers_web_api_review_controller_review_request OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequest [required]
    */
    virtual void reviewPost(const qint32 &recipe_id, const OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequest &oaiapi2_controllers_web_api_review_controller_review_request);

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  oaiapi2_controllers_web_api_review_controller_post_reply_req OAIAPI2_Controllers_WebAPI_ReviewController_PostReplyReq [required]
    */
    virtual void reviewPostReply(const QString &review_id, const OAIAPI2_Controllers_WebAPI_ReviewController_PostReplyReq &oaiapi2_controllers_web_api_review_controller_post_reply_req);

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  oaiapi2_controllers_web_api_review_controller_review_request OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequest [required]
    */
    virtual void reviewPut(const QString &review_id, const OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequest &oaiapi2_controllers_web_api_review_controller_review_request);

    /**
    * @param[in]  review_id qint32 [required]
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  oaiapi2_controllers_web_api_review_controller_review_request_legacy OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequestLegacy [required]
    */
    virtual void reviewPutLegacy(const qint32 &review_id, const qint32 &recipe_id, const OAIAPI2_Controllers_WebAPI_ReviewController_ReviewRequestLegacy &oaiapi2_controllers_web_api_review_controller_review_request_legacy);

    /**
    * @param[in]  reply_id QString [required]
    * @param[in]  oaiapi2_controllers_web_api_review_controller_post_reply_req OAIAPI2_Controllers_WebAPI_ReviewController_PostReplyReq [required]
    */
    virtual void reviewPutReply(const QString &reply_id, const OAIAPI2_Controllers_WebAPI_ReviewController_PostReplyReq &oaiapi2_controllers_web_api_review_controller_post_reply_req);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recipeRecipeIdReviewGetCallback(OAIHttpRequestWorker *worker);
    void recipeReviewReviewIdGetCallback(OAIHttpRequestWorker *worker);
    void reviewDeleteCallback(OAIHttpRequestWorker *worker);
    void reviewDeleteReplyCallback(OAIHttpRequestWorker *worker);
    void reviewGetCallback(OAIHttpRequestWorker *worker);
    void reviewGetRepliesCallback(OAIHttpRequestWorker *worker);
    void reviewGetReviewsCallback(OAIHttpRequestWorker *worker);
    void reviewPostCallback(OAIHttpRequestWorker *worker);
    void reviewPostReplyCallback(OAIHttpRequestWorker *worker);
    void reviewPutCallback(OAIHttpRequestWorker *worker);
    void reviewPutLegacyCallback(OAIHttpRequestWorker *worker);
    void reviewPutReplyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recipeRecipeIdReviewGetSignal(OAIBigOven_Model_API_Review summary);
    void recipeReviewReviewIdGetSignal(OAIBigOven_Model_API_Review summary);
    void reviewDeleteSignal(OAIObject summary);
    void reviewDeleteReplySignal(OAIObject summary);
    void reviewGetSignal(OAIBigOven_Model_API_Review summary);
    void reviewGetRepliesSignal(QList<OAIBigOven_Model_API_Reply> summary);
    void reviewGetReviewsSignal(QList<OAIBigOven_Model_API_Review> summary);
    void reviewPostSignal(OAIObject summary);
    void reviewPostReplySignal(OAIBigOven_Model_API_Reply summary);
    void reviewPutSignal(OAIBigOven_Model_API_Review summary);
    void reviewPutLegacySignal(OAIBigOven_Model_API_Review summary);
    void reviewPutReplySignal(OAIBigOven_Model_API_Reply summary);


    void recipeRecipeIdReviewGetSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Review summary);
    void recipeReviewReviewIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Review summary);
    void reviewDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void reviewDeleteReplySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void reviewGetSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Review summary);
    void reviewGetRepliesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_API_Reply> summary);
    void reviewGetReviewsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigOven_Model_API_Review> summary);
    void reviewPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void reviewPostReplySignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Reply summary);
    void reviewPutSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Review summary);
    void reviewPutLegacySignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Review summary);
    void reviewPutReplySignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_Reply summary);

    Q_DECL_DEPRECATED_X("Use recipeRecipeIdReviewGetSignalError() instead")
    void recipeRecipeIdReviewGetSignalE(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecipeIdReviewGetSignalError(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeReviewReviewIdGetSignalError() instead")
    void recipeReviewReviewIdGetSignalE(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeReviewReviewIdGetSignalError(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewDeleteSignalError() instead")
    void reviewDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewDeleteReplySignalError() instead")
    void reviewDeleteReplySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewDeleteReplySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewGetSignalError() instead")
    void reviewGetSignalE(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewGetSignalError(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewGetRepliesSignalError() instead")
    void reviewGetRepliesSignalE(QList<OAIBigOven_Model_API_Reply> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewGetRepliesSignalError(QList<OAIBigOven_Model_API_Reply> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewGetReviewsSignalError() instead")
    void reviewGetReviewsSignalE(QList<OAIBigOven_Model_API_Review> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewGetReviewsSignalError(QList<OAIBigOven_Model_API_Review> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPostSignalError() instead")
    void reviewPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPostReplySignalError() instead")
    void reviewPostReplySignalE(OAIBigOven_Model_API_Reply summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPostReplySignalError(OAIBigOven_Model_API_Reply summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPutSignalError() instead")
    void reviewPutSignalE(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPutSignalError(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPutLegacySignalError() instead")
    void reviewPutLegacySignalE(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPutLegacySignalError(OAIBigOven_Model_API_Review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPutReplySignalError() instead")
    void reviewPutReplySignalE(OAIBigOven_Model_API_Reply summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPutReplySignalError(OAIBigOven_Model_API_Reply summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recipeRecipeIdReviewGetSignalErrorFull() instead")
    void recipeRecipeIdReviewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeRecipeIdReviewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeReviewReviewIdGetSignalErrorFull() instead")
    void recipeReviewReviewIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeReviewReviewIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewDeleteSignalErrorFull() instead")
    void reviewDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewDeleteReplySignalErrorFull() instead")
    void reviewDeleteReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewDeleteReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewGetSignalErrorFull() instead")
    void reviewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewGetRepliesSignalErrorFull() instead")
    void reviewGetRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewGetRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewGetReviewsSignalErrorFull() instead")
    void reviewGetReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewGetReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPostSignalErrorFull() instead")
    void reviewPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPostReplySignalErrorFull() instead")
    void reviewPostReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPostReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPutSignalErrorFull() instead")
    void reviewPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPutLegacySignalErrorFull() instead")
    void reviewPutLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPutLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewPutReplySignalErrorFull() instead")
    void reviewPutReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewPutReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
