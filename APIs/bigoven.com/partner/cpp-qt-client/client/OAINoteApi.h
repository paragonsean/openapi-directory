/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINoteApi_H
#define OAI_OAINoteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI2_Controllers_WebAPI_NoteController_NoteRequest.h"
#include "OAIBigOven_Model_API2_RecipeNote.h"
#include "OAIBigOven_Model_API_RecipeNote.h"
#include "OAIBigOven_Model_API_RecipeNoteList.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINoteApi : public QObject {
    Q_OBJECT

public:
    OAINoteApi(const int timeOut = 0);
    ~OAINoteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void noteDelete(const qint32 &recipe_id, const qint32 &note_id);

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void noteGet(const qint32 &recipe_id, const qint32 &note_id);

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  pg qint32 [optional]
    * @param[in]  rpp qint32 [optional]
    */
    virtual void noteGetNotes(const qint32 &recipe_id, const ::OpenAPI::OptionalParam<qint32> &pg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rpp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  oaiapi2_controllers_web_api_note_controller_note_request OAIAPI2_Controllers_WebAPI_NoteController_NoteRequest [required]
    */
    virtual void notePost(const qint32 &recipe_id, const OAIAPI2_Controllers_WebAPI_NoteController_NoteRequest &oaiapi2_controllers_web_api_note_controller_note_request);

    /**
    * @param[in]  recipe_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oaiapi2_controllers_web_api_note_controller_note_request OAIAPI2_Controllers_WebAPI_NoteController_NoteRequest [required]
    */
    virtual void notePut(const qint32 &recipe_id, const qint32 &note_id, const OAIAPI2_Controllers_WebAPI_NoteController_NoteRequest &oaiapi2_controllers_web_api_note_controller_note_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void noteDeleteCallback(OAIHttpRequestWorker *worker);
    void noteGetCallback(OAIHttpRequestWorker *worker);
    void noteGetNotesCallback(OAIHttpRequestWorker *worker);
    void notePostCallback(OAIHttpRequestWorker *worker);
    void notePutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void noteDeleteSignal(OAIObject summary);
    void noteGetSignal(OAIBigOven_Model_API_RecipeNote summary);
    void noteGetNotesSignal(OAIBigOven_Model_API_RecipeNoteList summary);
    void notePostSignal(OAIBigOven_Model_API2_RecipeNote summary);
    void notePutSignal(OAIBigOven_Model_API_RecipeNote summary);


    void noteDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void noteGetSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_RecipeNote summary);
    void noteGetNotesSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_RecipeNoteList summary);
    void notePostSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API2_RecipeNote summary);
    void notePutSignalFull(OAIHttpRequestWorker *worker, OAIBigOven_Model_API_RecipeNote summary);

    Q_DECL_DEPRECATED_X("Use noteDeleteSignalError() instead")
    void noteDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void noteDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noteGetSignalError() instead")
    void noteGetSignalE(OAIBigOven_Model_API_RecipeNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void noteGetSignalError(OAIBigOven_Model_API_RecipeNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noteGetNotesSignalError() instead")
    void noteGetNotesSignalE(OAIBigOven_Model_API_RecipeNoteList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void noteGetNotesSignalError(OAIBigOven_Model_API_RecipeNoteList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notePostSignalError() instead")
    void notePostSignalE(OAIBigOven_Model_API2_RecipeNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notePostSignalError(OAIBigOven_Model_API2_RecipeNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notePutSignalError() instead")
    void notePutSignalE(OAIBigOven_Model_API_RecipeNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notePutSignalError(OAIBigOven_Model_API_RecipeNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use noteDeleteSignalErrorFull() instead")
    void noteDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void noteDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noteGetSignalErrorFull() instead")
    void noteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void noteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noteGetNotesSignalErrorFull() instead")
    void noteGetNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void noteGetNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notePostSignalErrorFull() instead")
    void notePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notePutSignalErrorFull() instead")
    void notePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
