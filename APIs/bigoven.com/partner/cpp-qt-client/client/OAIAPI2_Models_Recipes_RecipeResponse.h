/**
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPI2_Models_Recipes_RecipeResponse.h
 *
 * DTO used to return a recipe with videos
 */

#ifndef OAIAPI2_Models_Recipes_RecipeResponse_H
#define OAIAPI2_Models_Recipes_RecipeResponse_H

#include <QJsonObject>

#include "OAIAPI2_Models_Recipes_RecipeVideoResponse.h"
#include "OAIBigOven_Model_API_Ingredient.h"
#include "OAIBigOven_Model_API_NutritionInfo.h"
#include "OAIBigOven_Model_API_UserInfo.h"
#include "OAIBigOven_Model_InstructionStep.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigOven_Model_API_Ingredient;
class OAIBigOven_Model_API_NutritionInfo;
class OAIBigOven_Model_API_UserInfo;
class OAIBigOven_Model_InstructionStep;
class OAIAPI2_Models_Recipes_RecipeVideoResponse;

class OAIAPI2_Models_Recipes_RecipeResponse : public OAIObject {
public:
    OAIAPI2_Models_Recipes_RecipeResponse();
    OAIAPI2_Models_Recipes_RecipeResponse(QString json);
    ~OAIAPI2_Models_Recipes_RecipeResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActiveMinutes() const;
    void setActiveMinutes(const qint32 &active_minutes);
    bool is_active_minutes_Set() const;
    bool is_active_minutes_Valid() const;

    QString getAdTags() const;
    void setAdTags(const QString &ad_tags);
    bool is_ad_tags_Set() const;
    bool is_ad_tags_Valid() const;

    qint32 getAdminBoost() const;
    void setAdminBoost(const qint32 &admin_boost);
    bool is_admin_boost_Set() const;
    bool is_admin_boost_Valid() const;

    QString getAllCategoriesText() const;
    void setAllCategoriesText(const QString &all_categories_text);
    bool is_all_categories_text_Set() const;
    bool is_all_categories_text_Valid() const;

    QString getBookmarkImageUrl() const;
    void setBookmarkImageUrl(const QString &bookmark_image_url);
    bool is_bookmark_image_url_Set() const;
    bool is_bookmark_image_url_Valid() const;

    QString getBookmarkSiteLogo() const;
    void setBookmarkSiteLogo(const QString &bookmark_site_logo);
    bool is_bookmark_site_logo_Set() const;
    bool is_bookmark_site_logo_Valid() const;

    QString getBookmarkUrl() const;
    void setBookmarkUrl(const QString &bookmark_url);
    bool is_bookmark_url_Set() const;
    bool is_bookmark_url_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getCollection() const;
    void setCollection(const QString &collection);
    bool is_collection_Set() const;
    bool is_collection_Valid() const;

    qint32 getCollectionId() const;
    void setCollectionId(const qint32 &collection_id);
    bool is_collection_id_Set() const;
    bool is_collection_id_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getCuisine() const;
    void setCuisine(const QString &cuisine);
    bool is_cuisine_Set() const;
    bool is_cuisine_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getFavoriteCount() const;
    void setFavoriteCount(const qint32 &favorite_count);
    bool is_favorite_count_Set() const;
    bool is_favorite_count_Valid() const;

    QList<qint32> getImageSquares() const;
    void setImageSquares(const QList<qint32> &image_squares);
    bool is_image_squares_Set() const;
    bool is_image_squares_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QList<OAIBigOven_Model_API_Ingredient> getIngredients() const;
    void setIngredients(const QList<OAIBigOven_Model_API_Ingredient> &ingredients);
    bool is_ingredients_Set() const;
    bool is_ingredients_Valid() const;

    QString getIngredientsTextBlock() const;
    void setIngredientsTextBlock(const QString &ingredients_text_block);
    bool is_ingredients_text_block_Set() const;
    bool is_ingredients_text_block_Valid() const;

    QString getInstructions() const;
    void setInstructions(const QString &instructions);
    bool is_instructions_Set() const;
    bool is_instructions_Valid() const;

    bool isIsBookmark() const;
    void setIsBookmark(const bool &is_bookmark);
    bool is_is_bookmark_Set() const;
    bool is_is_bookmark_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    bool isIsRecipeScan() const;
    void setIsRecipeScan(const bool &is_recipe_scan);
    bool is_is_recipe_scan_Set() const;
    bool is_is_recipe_scan_Valid() const;

    bool isIsSponsored() const;
    void setIsSponsored(const bool &is_sponsored);
    bool is_is_sponsored_Set() const;
    bool is_is_sponsored_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    qint32 getMaxImageSquare() const;
    void setMaxImageSquare(const qint32 &max_image_square);
    bool is_max_image_square_Set() const;
    bool is_max_image_square_Valid() const;

    qint32 getMedalCount() const;
    void setMedalCount(const qint32 &medal_count);
    bool is_medal_count_Set() const;
    bool is_medal_count_Valid() const;

    qint32 getMenuCount() const;
    void setMenuCount(const qint32 &menu_count);
    bool is_menu_count_Set() const;
    bool is_menu_count_Valid() const;

    QString getMicrocategory() const;
    void setMicrocategory(const QString &microcategory);
    bool is_microcategory_Set() const;
    bool is_microcategory_Valid() const;

    qint32 getNotesCount() const;
    void setNotesCount(const qint32 &notes_count);
    bool is_notes_count_Set() const;
    bool is_notes_count_Valid() const;

    OAIBigOven_Model_API_NutritionInfo getNutritionInfo() const;
    void setNutritionInfo(const OAIBigOven_Model_API_NutritionInfo &nutrition_info);
    bool is_nutrition_info_Set() const;
    bool is_nutrition_info_Valid() const;

    QString getPhotoUrl() const;
    void setPhotoUrl(const QString &photo_url);
    bool is_photo_url_Set() const;
    bool is_photo_url_Valid() const;

    OAIBigOven_Model_API_UserInfo getPoster() const;
    void setPoster(const OAIBigOven_Model_API_UserInfo &poster);
    bool is_poster_Set() const;
    bool is_poster_Valid() const;

    QString getPrimaryIngredient() const;
    void setPrimaryIngredient(const QString &primary_ingredient);
    bool is_primary_ingredient_Set() const;
    bool is_primary_ingredient_Valid() const;

    qint32 getRecipeId() const;
    void setRecipeId(const qint32 &recipe_id);
    bool is_recipe_id_Set() const;
    bool is_recipe_id_Valid() const;

    qint32 getReviewCount() const;
    void setReviewCount(const qint32 &review_count);
    bool is_review_count_Set() const;
    bool is_review_count_Valid() const;

    double getStarRating() const;
    void setStarRating(const double &star_rating);
    bool is_star_rating_Set() const;
    bool is_star_rating_Valid() const;

    QList<OAIBigOven_Model_InstructionStep> getSteps() const;
    void setSteps(const QList<OAIBigOven_Model_InstructionStep> &steps);
    bool is_steps_Set() const;
    bool is_steps_Valid() const;

    QString getSubcategory() const;
    void setSubcategory(const QString &subcategory);
    bool is_subcategory_Set() const;
    bool is_subcategory_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTotalMinutes() const;
    void setTotalMinutes(const qint32 &total_minutes);
    bool is_total_minutes_Set() const;
    bool is_total_minutes_Valid() const;

    qint32 getVariantOfRecipeId() const;
    void setVariantOfRecipeId(const qint32 &variant_of_recipe_id);
    bool is_variant_of_recipe_id_Set() const;
    bool is_variant_of_recipe_id_Valid() const;

    QString getVerifiedByClass() const;
    void setVerifiedByClass(const QString &verified_by_class);
    bool is_verified_by_class_Set() const;
    bool is_verified_by_class_Valid() const;

    QDateTime getVerifiedDateTime() const;
    void setVerifiedDateTime(const QDateTime &verified_date_time);
    bool is_verified_date_time_Set() const;
    bool is_verified_date_time_Valid() const;

    QList<OAIAPI2_Models_Recipes_RecipeVideoResponse> getVideos() const;
    void setVideos(const QList<OAIAPI2_Models_Recipes_RecipeVideoResponse> &videos);
    bool is_videos_Set() const;
    bool is_videos_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    double getYieldNumber() const;
    void setYieldNumber(const double &yield_number);
    bool is_yield_number_Set() const;
    bool is_yield_number_Valid() const;

    QString getYieldUnit() const;
    void setYieldUnit(const QString &yield_unit);
    bool is_yield_unit_Set() const;
    bool is_yield_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_minutes;
    bool m_active_minutes_isSet;
    bool m_active_minutes_isValid;

    QString m_ad_tags;
    bool m_ad_tags_isSet;
    bool m_ad_tags_isValid;

    qint32 m_admin_boost;
    bool m_admin_boost_isSet;
    bool m_admin_boost_isValid;

    QString m_all_categories_text;
    bool m_all_categories_text_isSet;
    bool m_all_categories_text_isValid;

    QString m_bookmark_image_url;
    bool m_bookmark_image_url_isSet;
    bool m_bookmark_image_url_isValid;

    QString m_bookmark_site_logo;
    bool m_bookmark_site_logo_isSet;
    bool m_bookmark_site_logo_isValid;

    QString m_bookmark_url;
    bool m_bookmark_url_isSet;
    bool m_bookmark_url_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_collection;
    bool m_collection_isSet;
    bool m_collection_isValid;

    qint32 m_collection_id;
    bool m_collection_id_isSet;
    bool m_collection_id_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_cuisine;
    bool m_cuisine_isSet;
    bool m_cuisine_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_favorite_count;
    bool m_favorite_count_isSet;
    bool m_favorite_count_isValid;

    QList<qint32> m_image_squares;
    bool m_image_squares_isSet;
    bool m_image_squares_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QList<OAIBigOven_Model_API_Ingredient> m_ingredients;
    bool m_ingredients_isSet;
    bool m_ingredients_isValid;

    QString m_ingredients_text_block;
    bool m_ingredients_text_block_isSet;
    bool m_ingredients_text_block_isValid;

    QString m_instructions;
    bool m_instructions_isSet;
    bool m_instructions_isValid;

    bool m_is_bookmark;
    bool m_is_bookmark_isSet;
    bool m_is_bookmark_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    bool m_is_recipe_scan;
    bool m_is_recipe_scan_isSet;
    bool m_is_recipe_scan_isValid;

    bool m_is_sponsored;
    bool m_is_sponsored_isSet;
    bool m_is_sponsored_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    qint32 m_max_image_square;
    bool m_max_image_square_isSet;
    bool m_max_image_square_isValid;

    qint32 m_medal_count;
    bool m_medal_count_isSet;
    bool m_medal_count_isValid;

    qint32 m_menu_count;
    bool m_menu_count_isSet;
    bool m_menu_count_isValid;

    QString m_microcategory;
    bool m_microcategory_isSet;
    bool m_microcategory_isValid;

    qint32 m_notes_count;
    bool m_notes_count_isSet;
    bool m_notes_count_isValid;

    OAIBigOven_Model_API_NutritionInfo m_nutrition_info;
    bool m_nutrition_info_isSet;
    bool m_nutrition_info_isValid;

    QString m_photo_url;
    bool m_photo_url_isSet;
    bool m_photo_url_isValid;

    OAIBigOven_Model_API_UserInfo m_poster;
    bool m_poster_isSet;
    bool m_poster_isValid;

    QString m_primary_ingredient;
    bool m_primary_ingredient_isSet;
    bool m_primary_ingredient_isValid;

    qint32 m_recipe_id;
    bool m_recipe_id_isSet;
    bool m_recipe_id_isValid;

    qint32 m_review_count;
    bool m_review_count_isSet;
    bool m_review_count_isValid;

    double m_star_rating;
    bool m_star_rating_isSet;
    bool m_star_rating_isValid;

    QList<OAIBigOven_Model_InstructionStep> m_steps;
    bool m_steps_isSet;
    bool m_steps_isValid;

    QString m_subcategory;
    bool m_subcategory_isSet;
    bool m_subcategory_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_total_minutes;
    bool m_total_minutes_isSet;
    bool m_total_minutes_isValid;

    qint32 m_variant_of_recipe_id;
    bool m_variant_of_recipe_id_isSet;
    bool m_variant_of_recipe_id_isValid;

    QString m_verified_by_class;
    bool m_verified_by_class_isSet;
    bool m_verified_by_class_isValid;

    QDateTime m_verified_date_time;
    bool m_verified_date_time_isSet;
    bool m_verified_date_time_isValid;

    QList<OAIAPI2_Models_Recipes_RecipeVideoResponse> m_videos;
    bool m_videos_isSet;
    bool m_videos_isValid;

    QString m_web_url;
    bool m_web_url_isSet;
    bool m_web_url_isValid;

    double m_yield_number;
    bool m_yield_number_isSet;
    bool m_yield_number_isValid;

    QString m_yield_unit;
    bool m_yield_unit_isSet;
    bool m_yield_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPI2_Models_Recipes_RecipeResponse)

#endif // OAIAPI2_Models_Recipes_RecipeResponse_H
