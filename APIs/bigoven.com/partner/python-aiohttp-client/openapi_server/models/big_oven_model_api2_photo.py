# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_oven_model_api2_user_info_tinyx import BigOvenModelAPI2UserInfoTinyx
from openapi_server import util


class BigOvenModelAPI2Photo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, creation_date: str=None, image_id: int=None, is_primary: bool=None, max_image_square: int=None, photo_url: str=None, poster: BigOvenModelAPI2UserInfoTinyx=None):
        """BigOvenModelAPI2Photo - a model defined in OpenAPI

        :param caption: The caption of this BigOvenModelAPI2Photo.
        :param creation_date: The creation_date of this BigOvenModelAPI2Photo.
        :param image_id: The image_id of this BigOvenModelAPI2Photo.
        :param is_primary: The is_primary of this BigOvenModelAPI2Photo.
        :param max_image_square: The max_image_square of this BigOvenModelAPI2Photo.
        :param photo_url: The photo_url of this BigOvenModelAPI2Photo.
        :param poster: The poster of this BigOvenModelAPI2Photo.
        """
        self.openapi_types = {
            'caption': str,
            'creation_date': str,
            'image_id': int,
            'is_primary': bool,
            'max_image_square': int,
            'photo_url': str,
            'poster': BigOvenModelAPI2UserInfoTinyx
        }

        self.attribute_map = {
            'caption': 'Caption',
            'creation_date': 'CreationDate',
            'image_id': 'ImageID',
            'is_primary': 'IsPrimary',
            'max_image_square': 'MaxImageSquare',
            'photo_url': 'PhotoUrl',
            'poster': 'Poster'
        }

        self._caption = caption
        self._creation_date = creation_date
        self._image_id = image_id
        self._is_primary = is_primary
        self._max_image_square = max_image_square
        self._photo_url = photo_url
        self._poster = poster

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigOvenModelAPI2Photo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigOven.Model.API2.Photo of this BigOvenModelAPI2Photo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this BigOvenModelAPI2Photo.


        :return: The caption of this BigOvenModelAPI2Photo.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this BigOvenModelAPI2Photo.


        :param caption: The caption of this BigOvenModelAPI2Photo.
        :type caption: str
        """

        self._caption = caption

    @property
    def creation_date(self):
        """Gets the creation_date of this BigOvenModelAPI2Photo.


        :return: The creation_date of this BigOvenModelAPI2Photo.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this BigOvenModelAPI2Photo.


        :param creation_date: The creation_date of this BigOvenModelAPI2Photo.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def image_id(self):
        """Gets the image_id of this BigOvenModelAPI2Photo.


        :return: The image_id of this BigOvenModelAPI2Photo.
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this BigOvenModelAPI2Photo.


        :param image_id: The image_id of this BigOvenModelAPI2Photo.
        :type image_id: int
        """

        self._image_id = image_id

    @property
    def is_primary(self):
        """Gets the is_primary of this BigOvenModelAPI2Photo.


        :return: The is_primary of this BigOvenModelAPI2Photo.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this BigOvenModelAPI2Photo.


        :param is_primary: The is_primary of this BigOvenModelAPI2Photo.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def max_image_square(self):
        """Gets the max_image_square of this BigOvenModelAPI2Photo.


        :return: The max_image_square of this BigOvenModelAPI2Photo.
        :rtype: int
        """
        return self._max_image_square

    @max_image_square.setter
    def max_image_square(self, max_image_square):
        """Sets the max_image_square of this BigOvenModelAPI2Photo.


        :param max_image_square: The max_image_square of this BigOvenModelAPI2Photo.
        :type max_image_square: int
        """

        self._max_image_square = max_image_square

    @property
    def photo_url(self):
        """Gets the photo_url of this BigOvenModelAPI2Photo.


        :return: The photo_url of this BigOvenModelAPI2Photo.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this BigOvenModelAPI2Photo.


        :param photo_url: The photo_url of this BigOvenModelAPI2Photo.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def poster(self):
        """Gets the poster of this BigOvenModelAPI2Photo.


        :return: The poster of this BigOvenModelAPI2Photo.
        :rtype: BigOvenModelAPI2UserInfoTinyx
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this BigOvenModelAPI2Photo.


        :param poster: The poster of this BigOvenModelAPI2Photo.
        :type poster: BigOvenModelAPI2UserInfoTinyx
        """

        self._poster = poster
