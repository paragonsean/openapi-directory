# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BigOvenModelAPIIngredientInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, department: str=None, master_ingredient_id: int=None, name: str=None, usually_on_hand: bool=None):
        """BigOvenModelAPIIngredientInfo - a model defined in OpenAPI

        :param department: The department of this BigOvenModelAPIIngredientInfo.
        :param master_ingredient_id: The master_ingredient_id of this BigOvenModelAPIIngredientInfo.
        :param name: The name of this BigOvenModelAPIIngredientInfo.
        :param usually_on_hand: The usually_on_hand of this BigOvenModelAPIIngredientInfo.
        """
        self.openapi_types = {
            'department': str,
            'master_ingredient_id': int,
            'name': str,
            'usually_on_hand': bool
        }

        self.attribute_map = {
            'department': 'Department',
            'master_ingredient_id': 'MasterIngredientID',
            'name': 'Name',
            'usually_on_hand': 'UsuallyOnHand'
        }

        self._department = department
        self._master_ingredient_id = master_ingredient_id
        self._name = name
        self._usually_on_hand = usually_on_hand

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigOvenModelAPIIngredientInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigOven.Model.API.IngredientInfo of this BigOvenModelAPIIngredientInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def department(self):
        """Gets the department of this BigOvenModelAPIIngredientInfo.


        :return: The department of this BigOvenModelAPIIngredientInfo.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this BigOvenModelAPIIngredientInfo.


        :param department: The department of this BigOvenModelAPIIngredientInfo.
        :type department: str
        """

        self._department = department

    @property
    def master_ingredient_id(self):
        """Gets the master_ingredient_id of this BigOvenModelAPIIngredientInfo.


        :return: The master_ingredient_id of this BigOvenModelAPIIngredientInfo.
        :rtype: int
        """
        return self._master_ingredient_id

    @master_ingredient_id.setter
    def master_ingredient_id(self, master_ingredient_id):
        """Sets the master_ingredient_id of this BigOvenModelAPIIngredientInfo.


        :param master_ingredient_id: The master_ingredient_id of this BigOvenModelAPIIngredientInfo.
        :type master_ingredient_id: int
        """

        self._master_ingredient_id = master_ingredient_id

    @property
    def name(self):
        """Gets the name of this BigOvenModelAPIIngredientInfo.


        :return: The name of this BigOvenModelAPIIngredientInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BigOvenModelAPIIngredientInfo.


        :param name: The name of this BigOvenModelAPIIngredientInfo.
        :type name: str
        """

        self._name = name

    @property
    def usually_on_hand(self):
        """Gets the usually_on_hand of this BigOvenModelAPIIngredientInfo.


        :return: The usually_on_hand of this BigOvenModelAPIIngredientInfo.
        :rtype: bool
        """
        return self._usually_on_hand

    @usually_on_hand.setter
    def usually_on_hand(self, usually_on_hand):
        """Sets the usually_on_hand of this BigOvenModelAPIIngredientInfo.


        :param usually_on_hand: The usually_on_hand of this BigOvenModelAPIIngredientInfo.
        :type usually_on_hand: bool
        """

        self._usually_on_hand = usually_on_hand
