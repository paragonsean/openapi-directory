# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class API2ModelsCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_count: int=None, followers_count: int=None, following_count: int=None, private_recipe_count: int=None, public_recipe_count: int=None, total_recipes: int=None):
        """API2ModelsCounts - a model defined in OpenAPI

        :param added_count: The added_count of this API2ModelsCounts.
        :param followers_count: The followers_count of this API2ModelsCounts.
        :param following_count: The following_count of this API2ModelsCounts.
        :param private_recipe_count: The private_recipe_count of this API2ModelsCounts.
        :param public_recipe_count: The public_recipe_count of this API2ModelsCounts.
        :param total_recipes: The total_recipes of this API2ModelsCounts.
        """
        self.openapi_types = {
            'added_count': int,
            'followers_count': int,
            'following_count': int,
            'private_recipe_count': int,
            'public_recipe_count': int,
            'total_recipes': int
        }

        self.attribute_map = {
            'added_count': 'AddedCount',
            'followers_count': 'FollowersCount',
            'following_count': 'FollowingCount',
            'private_recipe_count': 'PrivateRecipeCount',
            'public_recipe_count': 'PublicRecipeCount',
            'total_recipes': 'TotalRecipes'
        }

        self._added_count = added_count
        self._followers_count = followers_count
        self._following_count = following_count
        self._private_recipe_count = private_recipe_count
        self._public_recipe_count = public_recipe_count
        self._total_recipes = total_recipes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'API2ModelsCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API2.Models.Counts of this API2ModelsCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_count(self):
        """Gets the added_count of this API2ModelsCounts.

        

        :return: The added_count of this API2ModelsCounts.
        :rtype: int
        """
        return self._added_count

    @added_count.setter
    def added_count(self, added_count):
        """Sets the added_count of this API2ModelsCounts.

        

        :param added_count: The added_count of this API2ModelsCounts.
        :type added_count: int
        """

        self._added_count = added_count

    @property
    def followers_count(self):
        """Gets the followers_count of this API2ModelsCounts.

        

        :return: The followers_count of this API2ModelsCounts.
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this API2ModelsCounts.

        

        :param followers_count: The followers_count of this API2ModelsCounts.
        :type followers_count: int
        """

        self._followers_count = followers_count

    @property
    def following_count(self):
        """Gets the following_count of this API2ModelsCounts.

        

        :return: The following_count of this API2ModelsCounts.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this API2ModelsCounts.

        

        :param following_count: The following_count of this API2ModelsCounts.
        :type following_count: int
        """

        self._following_count = following_count

    @property
    def private_recipe_count(self):
        """Gets the private_recipe_count of this API2ModelsCounts.

        

        :return: The private_recipe_count of this API2ModelsCounts.
        :rtype: int
        """
        return self._private_recipe_count

    @private_recipe_count.setter
    def private_recipe_count(self, private_recipe_count):
        """Sets the private_recipe_count of this API2ModelsCounts.

        

        :param private_recipe_count: The private_recipe_count of this API2ModelsCounts.
        :type private_recipe_count: int
        """

        self._private_recipe_count = private_recipe_count

    @property
    def public_recipe_count(self):
        """Gets the public_recipe_count of this API2ModelsCounts.

        

        :return: The public_recipe_count of this API2ModelsCounts.
        :rtype: int
        """
        return self._public_recipe_count

    @public_recipe_count.setter
    def public_recipe_count(self, public_recipe_count):
        """Sets the public_recipe_count of this API2ModelsCounts.

        

        :param public_recipe_count: The public_recipe_count of this API2ModelsCounts.
        :type public_recipe_count: int
        """

        self._public_recipe_count = public_recipe_count

    @property
    def total_recipes(self):
        """Gets the total_recipes of this API2ModelsCounts.

        

        :return: The total_recipes of this API2ModelsCounts.
        :rtype: int
        """
        return self._total_recipes

    @total_recipes.setter
    def total_recipes(self, total_recipes):
        """Sets the total_recipes of this API2ModelsCounts.

        

        :param total_recipes: The total_recipes of this API2ModelsCounts.
        :type total_recipes: int
        """

        self._total_recipes = total_recipes
