# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_oven_model_api2_recipe_infox import BigOvenModelAPI2RecipeInfox
from openapi_server import util


class BigOvenModelAPI2CollectionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, is_filtered: bool=None, is_sponsored: bool=None, mobile_url: str=None, pro: bool=None, photo_url: str=None, results: List[BigOvenModelAPI2RecipeInfox]=None, title: str=None, token: str=None, web_url: str=None):
        """BigOvenModelAPI2CollectionInfo - a model defined in OpenAPI

        :param description: The description of this BigOvenModelAPI2CollectionInfo.
        :param id: The id of this BigOvenModelAPI2CollectionInfo.
        :param is_filtered: The is_filtered of this BigOvenModelAPI2CollectionInfo.
        :param is_sponsored: The is_sponsored of this BigOvenModelAPI2CollectionInfo.
        :param mobile_url: The mobile_url of this BigOvenModelAPI2CollectionInfo.
        :param pro: The pro of this BigOvenModelAPI2CollectionInfo.
        :param photo_url: The photo_url of this BigOvenModelAPI2CollectionInfo.
        :param results: The results of this BigOvenModelAPI2CollectionInfo.
        :param title: The title of this BigOvenModelAPI2CollectionInfo.
        :param token: The token of this BigOvenModelAPI2CollectionInfo.
        :param web_url: The web_url of this BigOvenModelAPI2CollectionInfo.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'is_filtered': bool,
            'is_sponsored': bool,
            'mobile_url': str,
            'pro': bool,
            'photo_url': str,
            'results': List[BigOvenModelAPI2RecipeInfox],
            'title': str,
            'token': str,
            'web_url': str
        }

        self.attribute_map = {
            'description': 'Description',
            'id': 'ID',
            'is_filtered': 'IsFiltered',
            'is_sponsored': 'IsSponsored',
            'mobile_url': 'MobileUrl',
            'pro': 'PRO',
            'photo_url': 'PhotoUrl',
            'results': 'Results',
            'title': 'Title',
            'token': 'Token',
            'web_url': 'WebUrl'
        }

        self._description = description
        self._id = id
        self._is_filtered = is_filtered
        self._is_sponsored = is_sponsored
        self._mobile_url = mobile_url
        self._pro = pro
        self._photo_url = photo_url
        self._results = results
        self._title = title
        self._token = token
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigOvenModelAPI2CollectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigOven.Model.API2.CollectionInfo of this BigOvenModelAPI2CollectionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this BigOvenModelAPI2CollectionInfo.


        :return: The description of this BigOvenModelAPI2CollectionInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BigOvenModelAPI2CollectionInfo.


        :param description: The description of this BigOvenModelAPI2CollectionInfo.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this BigOvenModelAPI2CollectionInfo.


        :return: The id of this BigOvenModelAPI2CollectionInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BigOvenModelAPI2CollectionInfo.


        :param id: The id of this BigOvenModelAPI2CollectionInfo.
        :type id: int
        """

        self._id = id

    @property
    def is_filtered(self):
        """Gets the is_filtered of this BigOvenModelAPI2CollectionInfo.


        :return: The is_filtered of this BigOvenModelAPI2CollectionInfo.
        :rtype: bool
        """
        return self._is_filtered

    @is_filtered.setter
    def is_filtered(self, is_filtered):
        """Sets the is_filtered of this BigOvenModelAPI2CollectionInfo.


        :param is_filtered: The is_filtered of this BigOvenModelAPI2CollectionInfo.
        :type is_filtered: bool
        """

        self._is_filtered = is_filtered

    @property
    def is_sponsored(self):
        """Gets the is_sponsored of this BigOvenModelAPI2CollectionInfo.


        :return: The is_sponsored of this BigOvenModelAPI2CollectionInfo.
        :rtype: bool
        """
        return self._is_sponsored

    @is_sponsored.setter
    def is_sponsored(self, is_sponsored):
        """Sets the is_sponsored of this BigOvenModelAPI2CollectionInfo.


        :param is_sponsored: The is_sponsored of this BigOvenModelAPI2CollectionInfo.
        :type is_sponsored: bool
        """

        self._is_sponsored = is_sponsored

    @property
    def mobile_url(self):
        """Gets the mobile_url of this BigOvenModelAPI2CollectionInfo.


        :return: The mobile_url of this BigOvenModelAPI2CollectionInfo.
        :rtype: str
        """
        return self._mobile_url

    @mobile_url.setter
    def mobile_url(self, mobile_url):
        """Sets the mobile_url of this BigOvenModelAPI2CollectionInfo.


        :param mobile_url: The mobile_url of this BigOvenModelAPI2CollectionInfo.
        :type mobile_url: str
        """

        self._mobile_url = mobile_url

    @property
    def pro(self):
        """Gets the pro of this BigOvenModelAPI2CollectionInfo.


        :return: The pro of this BigOvenModelAPI2CollectionInfo.
        :rtype: bool
        """
        return self._pro

    @pro.setter
    def pro(self, pro):
        """Sets the pro of this BigOvenModelAPI2CollectionInfo.


        :param pro: The pro of this BigOvenModelAPI2CollectionInfo.
        :type pro: bool
        """

        self._pro = pro

    @property
    def photo_url(self):
        """Gets the photo_url of this BigOvenModelAPI2CollectionInfo.


        :return: The photo_url of this BigOvenModelAPI2CollectionInfo.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this BigOvenModelAPI2CollectionInfo.


        :param photo_url: The photo_url of this BigOvenModelAPI2CollectionInfo.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def results(self):
        """Gets the results of this BigOvenModelAPI2CollectionInfo.


        :return: The results of this BigOvenModelAPI2CollectionInfo.
        :rtype: List[BigOvenModelAPI2RecipeInfox]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this BigOvenModelAPI2CollectionInfo.


        :param results: The results of this BigOvenModelAPI2CollectionInfo.
        :type results: List[BigOvenModelAPI2RecipeInfox]
        """

        self._results = results

    @property
    def title(self):
        """Gets the title of this BigOvenModelAPI2CollectionInfo.


        :return: The title of this BigOvenModelAPI2CollectionInfo.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BigOvenModelAPI2CollectionInfo.


        :param title: The title of this BigOvenModelAPI2CollectionInfo.
        :type title: str
        """

        self._title = title

    @property
    def token(self):
        """Gets the token of this BigOvenModelAPI2CollectionInfo.


        :return: The token of this BigOvenModelAPI2CollectionInfo.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BigOvenModelAPI2CollectionInfo.


        :param token: The token of this BigOvenModelAPI2CollectionInfo.
        :type token: str
        """

        self._token = token

    @property
    def web_url(self):
        """Gets the web_url of this BigOvenModelAPI2CollectionInfo.


        :return: The web_url of this BigOvenModelAPI2CollectionInfo.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this BigOvenModelAPI2CollectionInfo.


        :param web_url: The web_url of this BigOvenModelAPI2CollectionInfo.
        :type web_url: str
        """

        self._web_url = web_url
