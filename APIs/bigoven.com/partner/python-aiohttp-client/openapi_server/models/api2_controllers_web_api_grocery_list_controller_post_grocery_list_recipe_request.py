# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mark_as_pending: bool=None, recipe_id: int=None, scale: float=None):
        """API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest - a model defined in OpenAPI

        :param mark_as_pending: The mark_as_pending of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :param recipe_id: The recipe_id of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :param scale: The scale of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        """
        self.openapi_types = {
            'mark_as_pending': bool,
            'recipe_id': int,
            'scale': float
        }

        self.attribute_map = {
            'mark_as_pending': 'markAsPending',
            'recipe_id': 'recipeId',
            'scale': 'scale'
        }

        self._mark_as_pending = mark_as_pending
        self._recipe_id = recipe_id
        self._scale = scale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API2.Controllers.WebAPI.GroceryListController.PostGroceryListRecipeRequest of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mark_as_pending(self):
        """Gets the mark_as_pending of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.

        Gets or sets the mark as pending.

        :return: The mark_as_pending of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :rtype: bool
        """
        return self._mark_as_pending

    @mark_as_pending.setter
    def mark_as_pending(self, mark_as_pending):
        """Sets the mark_as_pending of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.

        Gets or sets the mark as pending.

        :param mark_as_pending: The mark_as_pending of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :type mark_as_pending: bool
        """

        self._mark_as_pending = mark_as_pending

    @property
    def recipe_id(self):
        """Gets the recipe_id of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.

        Gets or sets the recipe identifier.

        :return: The recipe_id of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :rtype: int
        """
        return self._recipe_id

    @recipe_id.setter
    def recipe_id(self, recipe_id):
        """Sets the recipe_id of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.

        Gets or sets the recipe identifier.

        :param recipe_id: The recipe_id of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :type recipe_id: int
        """

        self._recipe_id = recipe_id

    @property
    def scale(self):
        """Gets the scale of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.

        Gets or sets the scale.

        :return: The scale of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.

        Gets or sets the scale.

        :param scale: The scale of this API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest.
        :type scale: float
        """

        self._scale = scale
