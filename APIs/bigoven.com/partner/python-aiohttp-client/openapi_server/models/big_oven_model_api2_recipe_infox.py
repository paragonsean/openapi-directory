# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_oven_model_api2_user_info_tinyx import BigOvenModelAPI2UserInfoTinyx
from openapi_server import util


class BigOvenModelAPI2RecipeInfox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, creation_date: datetime=None, cuisine: str=None, has_videos: bool=None, is_bookmark: bool=None, is_private: bool=None, is_recipe_scan: bool=None, microcategory: str=None, photo_url: str=None, poster: BigOvenModelAPI2UserInfoTinyx=None, recipe_id: int=None, review_count: int=None, servings: float=None, star_rating: float=None, subcategory: str=None, title: str=None, total_tries: int=None, web_url: str=None):
        """BigOvenModelAPI2RecipeInfox - a model defined in OpenAPI

        :param category: The category of this BigOvenModelAPI2RecipeInfox.
        :param creation_date: The creation_date of this BigOvenModelAPI2RecipeInfox.
        :param cuisine: The cuisine of this BigOvenModelAPI2RecipeInfox.
        :param has_videos: The has_videos of this BigOvenModelAPI2RecipeInfox.
        :param is_bookmark: The is_bookmark of this BigOvenModelAPI2RecipeInfox.
        :param is_private: The is_private of this BigOvenModelAPI2RecipeInfox.
        :param is_recipe_scan: The is_recipe_scan of this BigOvenModelAPI2RecipeInfox.
        :param microcategory: The microcategory of this BigOvenModelAPI2RecipeInfox.
        :param photo_url: The photo_url of this BigOvenModelAPI2RecipeInfox.
        :param poster: The poster of this BigOvenModelAPI2RecipeInfox.
        :param recipe_id: The recipe_id of this BigOvenModelAPI2RecipeInfox.
        :param review_count: The review_count of this BigOvenModelAPI2RecipeInfox.
        :param servings: The servings of this BigOvenModelAPI2RecipeInfox.
        :param star_rating: The star_rating of this BigOvenModelAPI2RecipeInfox.
        :param subcategory: The subcategory of this BigOvenModelAPI2RecipeInfox.
        :param title: The title of this BigOvenModelAPI2RecipeInfox.
        :param total_tries: The total_tries of this BigOvenModelAPI2RecipeInfox.
        :param web_url: The web_url of this BigOvenModelAPI2RecipeInfox.
        """
        self.openapi_types = {
            'category': str,
            'creation_date': datetime,
            'cuisine': str,
            'has_videos': bool,
            'is_bookmark': bool,
            'is_private': bool,
            'is_recipe_scan': bool,
            'microcategory': str,
            'photo_url': str,
            'poster': BigOvenModelAPI2UserInfoTinyx,
            'recipe_id': int,
            'review_count': int,
            'servings': float,
            'star_rating': float,
            'subcategory': str,
            'title': str,
            'total_tries': int,
            'web_url': str
        }

        self.attribute_map = {
            'category': 'Category',
            'creation_date': 'CreationDate',
            'cuisine': 'Cuisine',
            'has_videos': 'HasVideos',
            'is_bookmark': 'IsBookmark',
            'is_private': 'IsPrivate',
            'is_recipe_scan': 'IsRecipeScan',
            'microcategory': 'Microcategory',
            'photo_url': 'PhotoUrl',
            'poster': 'Poster',
            'recipe_id': 'RecipeID',
            'review_count': 'ReviewCount',
            'servings': 'Servings',
            'star_rating': 'StarRating',
            'subcategory': 'Subcategory',
            'title': 'Title',
            'total_tries': 'TotalTries',
            'web_url': 'WebURL'
        }

        self._category = category
        self._creation_date = creation_date
        self._cuisine = cuisine
        self._has_videos = has_videos
        self._is_bookmark = is_bookmark
        self._is_private = is_private
        self._is_recipe_scan = is_recipe_scan
        self._microcategory = microcategory
        self._photo_url = photo_url
        self._poster = poster
        self._recipe_id = recipe_id
        self._review_count = review_count
        self._servings = servings
        self._star_rating = star_rating
        self._subcategory = subcategory
        self._title = title
        self._total_tries = total_tries
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigOvenModelAPI2RecipeInfox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigOven.Model.API2.RecipeInfox of this BigOvenModelAPI2RecipeInfox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this BigOvenModelAPI2RecipeInfox.


        :return: The category of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BigOvenModelAPI2RecipeInfox.


        :param category: The category of this BigOvenModelAPI2RecipeInfox.
        :type category: str
        """

        self._category = category

    @property
    def creation_date(self):
        """Gets the creation_date of this BigOvenModelAPI2RecipeInfox.


        :return: The creation_date of this BigOvenModelAPI2RecipeInfox.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this BigOvenModelAPI2RecipeInfox.


        :param creation_date: The creation_date of this BigOvenModelAPI2RecipeInfox.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def cuisine(self):
        """Gets the cuisine of this BigOvenModelAPI2RecipeInfox.


        :return: The cuisine of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._cuisine

    @cuisine.setter
    def cuisine(self, cuisine):
        """Sets the cuisine of this BigOvenModelAPI2RecipeInfox.


        :param cuisine: The cuisine of this BigOvenModelAPI2RecipeInfox.
        :type cuisine: str
        """

        self._cuisine = cuisine

    @property
    def has_videos(self):
        """Gets the has_videos of this BigOvenModelAPI2RecipeInfox.


        :return: The has_videos of this BigOvenModelAPI2RecipeInfox.
        :rtype: bool
        """
        return self._has_videos

    @has_videos.setter
    def has_videos(self, has_videos):
        """Sets the has_videos of this BigOvenModelAPI2RecipeInfox.


        :param has_videos: The has_videos of this BigOvenModelAPI2RecipeInfox.
        :type has_videos: bool
        """

        self._has_videos = has_videos

    @property
    def is_bookmark(self):
        """Gets the is_bookmark of this BigOvenModelAPI2RecipeInfox.


        :return: The is_bookmark of this BigOvenModelAPI2RecipeInfox.
        :rtype: bool
        """
        return self._is_bookmark

    @is_bookmark.setter
    def is_bookmark(self, is_bookmark):
        """Sets the is_bookmark of this BigOvenModelAPI2RecipeInfox.


        :param is_bookmark: The is_bookmark of this BigOvenModelAPI2RecipeInfox.
        :type is_bookmark: bool
        """

        self._is_bookmark = is_bookmark

    @property
    def is_private(self):
        """Gets the is_private of this BigOvenModelAPI2RecipeInfox.


        :return: The is_private of this BigOvenModelAPI2RecipeInfox.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this BigOvenModelAPI2RecipeInfox.


        :param is_private: The is_private of this BigOvenModelAPI2RecipeInfox.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def is_recipe_scan(self):
        """Gets the is_recipe_scan of this BigOvenModelAPI2RecipeInfox.


        :return: The is_recipe_scan of this BigOvenModelAPI2RecipeInfox.
        :rtype: bool
        """
        return self._is_recipe_scan

    @is_recipe_scan.setter
    def is_recipe_scan(self, is_recipe_scan):
        """Sets the is_recipe_scan of this BigOvenModelAPI2RecipeInfox.


        :param is_recipe_scan: The is_recipe_scan of this BigOvenModelAPI2RecipeInfox.
        :type is_recipe_scan: bool
        """

        self._is_recipe_scan = is_recipe_scan

    @property
    def microcategory(self):
        """Gets the microcategory of this BigOvenModelAPI2RecipeInfox.


        :return: The microcategory of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._microcategory

    @microcategory.setter
    def microcategory(self, microcategory):
        """Sets the microcategory of this BigOvenModelAPI2RecipeInfox.


        :param microcategory: The microcategory of this BigOvenModelAPI2RecipeInfox.
        :type microcategory: str
        """

        self._microcategory = microcategory

    @property
    def photo_url(self):
        """Gets the photo_url of this BigOvenModelAPI2RecipeInfox.


        :return: The photo_url of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this BigOvenModelAPI2RecipeInfox.


        :param photo_url: The photo_url of this BigOvenModelAPI2RecipeInfox.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def poster(self):
        """Gets the poster of this BigOvenModelAPI2RecipeInfox.


        :return: The poster of this BigOvenModelAPI2RecipeInfox.
        :rtype: BigOvenModelAPI2UserInfoTinyx
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this BigOvenModelAPI2RecipeInfox.


        :param poster: The poster of this BigOvenModelAPI2RecipeInfox.
        :type poster: BigOvenModelAPI2UserInfoTinyx
        """

        self._poster = poster

    @property
    def recipe_id(self):
        """Gets the recipe_id of this BigOvenModelAPI2RecipeInfox.


        :return: The recipe_id of this BigOvenModelAPI2RecipeInfox.
        :rtype: int
        """
        return self._recipe_id

    @recipe_id.setter
    def recipe_id(self, recipe_id):
        """Sets the recipe_id of this BigOvenModelAPI2RecipeInfox.


        :param recipe_id: The recipe_id of this BigOvenModelAPI2RecipeInfox.
        :type recipe_id: int
        """

        self._recipe_id = recipe_id

    @property
    def review_count(self):
        """Gets the review_count of this BigOvenModelAPI2RecipeInfox.


        :return: The review_count of this BigOvenModelAPI2RecipeInfox.
        :rtype: int
        """
        return self._review_count

    @review_count.setter
    def review_count(self, review_count):
        """Sets the review_count of this BigOvenModelAPI2RecipeInfox.


        :param review_count: The review_count of this BigOvenModelAPI2RecipeInfox.
        :type review_count: int
        """

        self._review_count = review_count

    @property
    def servings(self):
        """Gets the servings of this BigOvenModelAPI2RecipeInfox.


        :return: The servings of this BigOvenModelAPI2RecipeInfox.
        :rtype: float
        """
        return self._servings

    @servings.setter
    def servings(self, servings):
        """Sets the servings of this BigOvenModelAPI2RecipeInfox.


        :param servings: The servings of this BigOvenModelAPI2RecipeInfox.
        :type servings: float
        """

        self._servings = servings

    @property
    def star_rating(self):
        """Gets the star_rating of this BigOvenModelAPI2RecipeInfox.


        :return: The star_rating of this BigOvenModelAPI2RecipeInfox.
        :rtype: float
        """
        return self._star_rating

    @star_rating.setter
    def star_rating(self, star_rating):
        """Sets the star_rating of this BigOvenModelAPI2RecipeInfox.


        :param star_rating: The star_rating of this BigOvenModelAPI2RecipeInfox.
        :type star_rating: float
        """

        self._star_rating = star_rating

    @property
    def subcategory(self):
        """Gets the subcategory of this BigOvenModelAPI2RecipeInfox.


        :return: The subcategory of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this BigOvenModelAPI2RecipeInfox.


        :param subcategory: The subcategory of this BigOvenModelAPI2RecipeInfox.
        :type subcategory: str
        """

        self._subcategory = subcategory

    @property
    def title(self):
        """Gets the title of this BigOvenModelAPI2RecipeInfox.


        :return: The title of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BigOvenModelAPI2RecipeInfox.


        :param title: The title of this BigOvenModelAPI2RecipeInfox.
        :type title: str
        """

        self._title = title

    @property
    def total_tries(self):
        """Gets the total_tries of this BigOvenModelAPI2RecipeInfox.


        :return: The total_tries of this BigOvenModelAPI2RecipeInfox.
        :rtype: int
        """
        return self._total_tries

    @total_tries.setter
    def total_tries(self, total_tries):
        """Sets the total_tries of this BigOvenModelAPI2RecipeInfox.


        :param total_tries: The total_tries of this BigOvenModelAPI2RecipeInfox.
        :type total_tries: int
        """

        self._total_tries = total_tries

    @property
    def web_url(self):
        """Gets the web_url of this BigOvenModelAPI2RecipeInfox.


        :return: The web_url of this BigOvenModelAPI2RecipeInfox.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this BigOvenModelAPI2RecipeInfox.


        :param web_url: The web_url of this BigOvenModelAPI2RecipeInfox.
        :type web_url: str
        """

        self._web_url = web_url
