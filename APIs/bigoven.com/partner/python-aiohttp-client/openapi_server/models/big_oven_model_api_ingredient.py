# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_oven_model_api_ingredient_info import BigOvenModelAPIIngredientInfo
from openapi_server import util


class BigOvenModelAPIIngredient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_index: int=None, display_quantity: str=None, html_name: str=None, ingredient_id: int=None, ingredient_info: BigOvenModelAPIIngredientInfo=None, is_heading: bool=None, is_linked: bool=None, metric_display_quantity: str=None, metric_quantity: float=None, metric_unit: str=None, name: str=None, preparation_notes: str=None, quantity: float=None, unit: str=None):
        """BigOvenModelAPIIngredient - a model defined in OpenAPI

        :param display_index: The display_index of this BigOvenModelAPIIngredient.
        :param display_quantity: The display_quantity of this BigOvenModelAPIIngredient.
        :param html_name: The html_name of this BigOvenModelAPIIngredient.
        :param ingredient_id: The ingredient_id of this BigOvenModelAPIIngredient.
        :param ingredient_info: The ingredient_info of this BigOvenModelAPIIngredient.
        :param is_heading: The is_heading of this BigOvenModelAPIIngredient.
        :param is_linked: The is_linked of this BigOvenModelAPIIngredient.
        :param metric_display_quantity: The metric_display_quantity of this BigOvenModelAPIIngredient.
        :param metric_quantity: The metric_quantity of this BigOvenModelAPIIngredient.
        :param metric_unit: The metric_unit of this BigOvenModelAPIIngredient.
        :param name: The name of this BigOvenModelAPIIngredient.
        :param preparation_notes: The preparation_notes of this BigOvenModelAPIIngredient.
        :param quantity: The quantity of this BigOvenModelAPIIngredient.
        :param unit: The unit of this BigOvenModelAPIIngredient.
        """
        self.openapi_types = {
            'display_index': int,
            'display_quantity': str,
            'html_name': str,
            'ingredient_id': int,
            'ingredient_info': BigOvenModelAPIIngredientInfo,
            'is_heading': bool,
            'is_linked': bool,
            'metric_display_quantity': str,
            'metric_quantity': float,
            'metric_unit': str,
            'name': str,
            'preparation_notes': str,
            'quantity': float,
            'unit': str
        }

        self.attribute_map = {
            'display_index': 'DisplayIndex',
            'display_quantity': 'DisplayQuantity',
            'html_name': 'HTMLName',
            'ingredient_id': 'IngredientID',
            'ingredient_info': 'IngredientInfo',
            'is_heading': 'IsHeading',
            'is_linked': 'IsLinked',
            'metric_display_quantity': 'MetricDisplayQuantity',
            'metric_quantity': 'MetricQuantity',
            'metric_unit': 'MetricUnit',
            'name': 'Name',
            'preparation_notes': 'PreparationNotes',
            'quantity': 'Quantity',
            'unit': 'Unit'
        }

        self._display_index = display_index
        self._display_quantity = display_quantity
        self._html_name = html_name
        self._ingredient_id = ingredient_id
        self._ingredient_info = ingredient_info
        self._is_heading = is_heading
        self._is_linked = is_linked
        self._metric_display_quantity = metric_display_quantity
        self._metric_quantity = metric_quantity
        self._metric_unit = metric_unit
        self._name = name
        self._preparation_notes = preparation_notes
        self._quantity = quantity
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigOvenModelAPIIngredient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigOven.Model.API.Ingredient of this BigOvenModelAPIIngredient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_index(self):
        """Gets the display_index of this BigOvenModelAPIIngredient.


        :return: The display_index of this BigOvenModelAPIIngredient.
        :rtype: int
        """
        return self._display_index

    @display_index.setter
    def display_index(self, display_index):
        """Sets the display_index of this BigOvenModelAPIIngredient.


        :param display_index: The display_index of this BigOvenModelAPIIngredient.
        :type display_index: int
        """

        self._display_index = display_index

    @property
    def display_quantity(self):
        """Gets the display_quantity of this BigOvenModelAPIIngredient.


        :return: The display_quantity of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._display_quantity

    @display_quantity.setter
    def display_quantity(self, display_quantity):
        """Sets the display_quantity of this BigOvenModelAPIIngredient.


        :param display_quantity: The display_quantity of this BigOvenModelAPIIngredient.
        :type display_quantity: str
        """

        self._display_quantity = display_quantity

    @property
    def html_name(self):
        """Gets the html_name of this BigOvenModelAPIIngredient.


        :return: The html_name of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._html_name

    @html_name.setter
    def html_name(self, html_name):
        """Sets the html_name of this BigOvenModelAPIIngredient.


        :param html_name: The html_name of this BigOvenModelAPIIngredient.
        :type html_name: str
        """

        self._html_name = html_name

    @property
    def ingredient_id(self):
        """Gets the ingredient_id of this BigOvenModelAPIIngredient.


        :return: The ingredient_id of this BigOvenModelAPIIngredient.
        :rtype: int
        """
        return self._ingredient_id

    @ingredient_id.setter
    def ingredient_id(self, ingredient_id):
        """Sets the ingredient_id of this BigOvenModelAPIIngredient.


        :param ingredient_id: The ingredient_id of this BigOvenModelAPIIngredient.
        :type ingredient_id: int
        """

        self._ingredient_id = ingredient_id

    @property
    def ingredient_info(self):
        """Gets the ingredient_info of this BigOvenModelAPIIngredient.


        :return: The ingredient_info of this BigOvenModelAPIIngredient.
        :rtype: BigOvenModelAPIIngredientInfo
        """
        return self._ingredient_info

    @ingredient_info.setter
    def ingredient_info(self, ingredient_info):
        """Sets the ingredient_info of this BigOvenModelAPIIngredient.


        :param ingredient_info: The ingredient_info of this BigOvenModelAPIIngredient.
        :type ingredient_info: BigOvenModelAPIIngredientInfo
        """

        self._ingredient_info = ingredient_info

    @property
    def is_heading(self):
        """Gets the is_heading of this BigOvenModelAPIIngredient.


        :return: The is_heading of this BigOvenModelAPIIngredient.
        :rtype: bool
        """
        return self._is_heading

    @is_heading.setter
    def is_heading(self, is_heading):
        """Sets the is_heading of this BigOvenModelAPIIngredient.


        :param is_heading: The is_heading of this BigOvenModelAPIIngredient.
        :type is_heading: bool
        """

        self._is_heading = is_heading

    @property
    def is_linked(self):
        """Gets the is_linked of this BigOvenModelAPIIngredient.


        :return: The is_linked of this BigOvenModelAPIIngredient.
        :rtype: bool
        """
        return self._is_linked

    @is_linked.setter
    def is_linked(self, is_linked):
        """Sets the is_linked of this BigOvenModelAPIIngredient.


        :param is_linked: The is_linked of this BigOvenModelAPIIngredient.
        :type is_linked: bool
        """

        self._is_linked = is_linked

    @property
    def metric_display_quantity(self):
        """Gets the metric_display_quantity of this BigOvenModelAPIIngredient.


        :return: The metric_display_quantity of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._metric_display_quantity

    @metric_display_quantity.setter
    def metric_display_quantity(self, metric_display_quantity):
        """Sets the metric_display_quantity of this BigOvenModelAPIIngredient.


        :param metric_display_quantity: The metric_display_quantity of this BigOvenModelAPIIngredient.
        :type metric_display_quantity: str
        """

        self._metric_display_quantity = metric_display_quantity

    @property
    def metric_quantity(self):
        """Gets the metric_quantity of this BigOvenModelAPIIngredient.


        :return: The metric_quantity of this BigOvenModelAPIIngredient.
        :rtype: float
        """
        return self._metric_quantity

    @metric_quantity.setter
    def metric_quantity(self, metric_quantity):
        """Sets the metric_quantity of this BigOvenModelAPIIngredient.


        :param metric_quantity: The metric_quantity of this BigOvenModelAPIIngredient.
        :type metric_quantity: float
        """

        self._metric_quantity = metric_quantity

    @property
    def metric_unit(self):
        """Gets the metric_unit of this BigOvenModelAPIIngredient.


        :return: The metric_unit of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._metric_unit

    @metric_unit.setter
    def metric_unit(self, metric_unit):
        """Sets the metric_unit of this BigOvenModelAPIIngredient.


        :param metric_unit: The metric_unit of this BigOvenModelAPIIngredient.
        :type metric_unit: str
        """

        self._metric_unit = metric_unit

    @property
    def name(self):
        """Gets the name of this BigOvenModelAPIIngredient.


        :return: The name of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BigOvenModelAPIIngredient.


        :param name: The name of this BigOvenModelAPIIngredient.
        :type name: str
        """

        self._name = name

    @property
    def preparation_notes(self):
        """Gets the preparation_notes of this BigOvenModelAPIIngredient.


        :return: The preparation_notes of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._preparation_notes

    @preparation_notes.setter
    def preparation_notes(self, preparation_notes):
        """Sets the preparation_notes of this BigOvenModelAPIIngredient.


        :param preparation_notes: The preparation_notes of this BigOvenModelAPIIngredient.
        :type preparation_notes: str
        """

        self._preparation_notes = preparation_notes

    @property
    def quantity(self):
        """Gets the quantity of this BigOvenModelAPIIngredient.


        :return: The quantity of this BigOvenModelAPIIngredient.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BigOvenModelAPIIngredient.


        :param quantity: The quantity of this BigOvenModelAPIIngredient.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def unit(self):
        """Gets the unit of this BigOvenModelAPIIngredient.


        :return: The unit of this BigOvenModelAPIIngredient.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this BigOvenModelAPIIngredient.


        :param unit: The unit of this BigOvenModelAPIIngredient.
        :type unit: str
        """

        self._unit = unit
