/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.API2ModelsRecipesFeedbackDTO;
import org.openapitools.client.model.API2ModelsRecipesRecipeResponse;
import org.openapitools.client.model.API2Result;
import org.openapitools.client.model.BigOvenModelAPI2Recipe;
import org.openapitools.client.model.BigOvenModelAPI2RecipeSearchResult;
import org.openapitools.client.model.BigOvenModelAPIRecipe;
import org.openapitools.client.model.BigOvenModelRecipeCategory;
import org.openapitools.client.model.BigOvenModelRecipeInfoDateTuple2;
import org.openapitools.client.model.BigOvenModelRecipeInfoReviewTuple2;
import org.openapitools.client.model.BigOvenModelRecipeInfoTiny;
import org.openapitools.client.model.BigOvenResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecipeApi
 */
@Disabled
public class RecipeApiTest {

    private final RecipeApi api = new RecipeApi();

    /**
     * Given a query, return recipe titles starting with query. Query must be at least 3 chars in length.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeAutoCompleteTest() throws ApiException {
        String query = null;
        Integer limit = null;
        List<String> response = api.recipeAutoComplete(query, limit);
        // TODO: test validations
    }

    /**
     * Automatics the complete all recipes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeAutoCompleteAllRecipesTest() throws ApiException {
        String query = null;
        Integer limit = null;
        List<BigOvenModelRecipeInfoTiny> response = api.recipeAutoCompleteAllRecipes(query, limit);
        // TODO: test validations
    }

    /**
     * Automatics the complete my recipes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeAutoCompleteMyRecipesTest() throws ApiException {
        String query = null;
        Integer limit = null;
        List<BigOvenModelRecipeInfoTiny> response = api.recipeAutoCompleteMyRecipes(query, limit);
        // TODO: test validations
    }

    /**
     * Get a list of recipe categories (the ID field can be used for include_cat in search parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeCategoriesTest() throws ApiException {
        List<BigOvenModelRecipeCategory> response = api.recipeCategories();
        // TODO: test validations
    }

    /**
     * Delete a Recipe (you must be authenticated as an owner of the recipe)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeDeleteTest() throws ApiException {
        Integer id = null;
        Object response = api.recipeDelete(id);
        // TODO: test validations
    }

    /**
     * Feedback on a Recipe -- for internal BigOven editors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeFeedbackTest() throws ApiException {
        Integer recipeId = null;
        API2ModelsRecipesFeedbackDTO apI2ModelsRecipesFeedbackDTO = null;
        Object response = api.recipeFeedback(recipeId, apI2ModelsRecipesFeedbackDTO);
        // TODO: test validations
    }

    /**
     * Return full Recipe detail. Returns 403 if the recipe is owned by someone else.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetTest() throws ApiException {
        Integer id = null;
        Boolean prefetch = null;
        BigOvenModelAPI2Recipe response = api.recipeGet(id, prefetch);
        // TODO: test validations
    }

    /**
     * Returns last active recipe for the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetActiveRecipeTest() throws ApiException {
        String userName = null;
        BigOvenResult response = api.recipeGetActiveRecipe(userName);
        // TODO: test validations
    }

    /**
     * Get a random, home-page-quality Recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetRandomRecipeTest() throws ApiException {
        BigOvenModelAPIRecipe response = api.recipeGetRandomRecipe();
        // TODO: test validations
    }

    /**
     * Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetRecipeWithStepsTest() throws ApiException {
        Integer id = null;
        Boolean prefetch = null;
        BigOvenModelAPI2Recipe response = api.recipeGetRecipeWithSteps(id, prefetch);
        // TODO: test validations
    }

    /**
     * Gets recipe single step as text
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetStepTest() throws ApiException {
        String userName = null;
        Integer recipeId = null;
        Integer stepId = null;
        String response = api.recipeGetStep(userName, recipeId, stepId);
        // TODO: test validations
    }

    /**
     * Returns stored step number and number of steps in recipe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetStepNumberTest() throws ApiException {
        String userName = null;
        Integer recipeId = null;
        API2Result response = api.recipeGetStepNumber(userName, recipeId);
        // TODO: test validations
    }

    /**
     * Stores recipe step number and returns saved step data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetStepsTest() throws ApiException {
        String userName = null;
        Integer recipeId = null;
        Integer stepId = null;
        BigOvenResult response = api.recipeGetSteps(userName, recipeId, stepId);
        // TODO: test validations
    }

    /**
     * Same as GET recipe but also includes the recipe videos (if any)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetV2Test() throws ApiException {
        Integer id = null;
        Boolean prefetch = null;
        API2ModelsRecipesRecipeResponse response = api.recipeGetV2(id, prefetch);
        // TODO: test validations
    }

    /**
     * Add a new recipe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipePostTest() throws ApiException {
        BigOvenModelAPIRecipe bigOvenModelAPIRecipe = null;
        BigOvenModelAPIRecipe response = api.recipePost(bigOvenModelAPIRecipe);
        // TODO: test validations
    }

    /**
     * Update a recipe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipePutTest() throws ApiException {
        BigOvenModelAPIRecipe bigOvenModelAPIRecipe = null;
        BigOvenModelAPIRecipe response = api.recipePut(bigOvenModelAPIRecipe);
        // TODO: test validations
    }

    /**
     * Get the recipe/comment tuples for those recipes with 4 or 5 star ratings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeRavesTest() throws ApiException {
        Integer pg = null;
        Integer rpp = null;
        List<BigOvenModelRecipeInfoReviewTuple2> response = api.recipeRaves(pg, rpp);
        // TODO: test validations
    }

    /**
     * Get a list of recipes that the authenticated user has most recently viewed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeRecentViewsTest() throws ApiException {
        Integer pg = null;
        Integer rpp = null;
        List<BigOvenModelRecipeInfoDateTuple2> response = api.recipeRecentViews(pg, rpp);
        // TODO: test validations
    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeRecipeSearchTest() throws ApiException {
        String anyKw = null;
        String folder = null;
        Integer coll = null;
        String filter = null;
        String titleKw = null;
        Integer userId = null;
        String username = null;
        String token = null;
        Boolean photos = null;
        Boolean boostmine = null;
        String includeCat = null;
        String excludeCat = null;
        String includePrimarycat = null;
        String excludePrimarycat = null;
        String includeIng = null;
        String excludeIng = null;
        String cuisine = null;
        String db = null;
        String userset = null;
        Double servingsMin = null;
        Integer totalMins = null;
        Integer maxIngredients = null;
        Integer minIngredients = null;
        Integer rpp = null;
        Integer pg = null;
        Integer vtn = null;
        Integer vgn = null;
        Integer chs = null;
        Integer glf = null;
        Integer ntf = null;
        Integer dyf = null;
        Integer sff = null;
        Integer slf = null;
        Integer tnf = null;
        Integer wmf = null;
        Integer rmf = null;
        Integer cps = null;
        Integer champion = null;
        Boolean synonyms = null;
        BigOvenModelAPI2RecipeSearchResult response = api.recipeRecipeSearch(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, rpp, pg, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms);
        // TODO: test validations
    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeRecipeSearchRandomTest() throws ApiException {
        String anyKw = null;
        String folder = null;
        Integer coll = null;
        String filter = null;
        String titleKw = null;
        Integer userId = null;
        String username = null;
        String token = null;
        Boolean photos = null;
        Boolean boostmine = null;
        String includeCat = null;
        String excludeCat = null;
        String includePrimarycat = null;
        String excludePrimarycat = null;
        String includeIng = null;
        String excludeIng = null;
        String cuisine = null;
        String db = null;
        String userset = null;
        Double servingsMin = null;
        Integer totalMins = null;
        Integer maxIngredients = null;
        Integer minIngredients = null;
        Integer vtn = null;
        Integer vgn = null;
        Integer chs = null;
        Integer glf = null;
        Integer ntf = null;
        Integer dyf = null;
        Integer sff = null;
        Integer slf = null;
        Integer tnf = null;
        Integer wmf = null;
        Integer rmf = null;
        Integer cps = null;
        Integer champion = null;
        Boolean synonyms = null;
        BigOvenModelAPI2RecipeSearchResult response = api.recipeRecipeSearchRandom(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms);
        // TODO: test validations
    }

    /**
     * Get recipes related to the given recipeId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeRelatedTest() throws ApiException {
        Integer recipeId = null;
        Integer pg = null;
        Integer rpp = null;
        BigOvenModelAPI2RecipeSearchResult response = api.recipeRelated(recipeId, pg, rpp);
        // TODO: test validations
    }

    /**
     * POST an image as a new RecipeScan request                  1)  Fetch the filename -- DONE                  2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE                  3)  Create 120 thumbnail size  in pics/scan/120 -- DONE                  4)  Insert the CloudTasks record                  5)  Create the HIT                  6)  Update the CloudTasks record with the HIT ID                  7)  Email the requesing user                  8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeScanTest() throws ApiException {
        Boolean test = null;
        String devicetype = null;
        Double lat = null;
        Double lng = null;
        api.recipeScan(test, devicetype, lat, lng);
        // TODO: test validations
    }

    /**
     * Zaps the recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeZapRecipeTest() throws ApiException {
        Integer id = null;
        Object response = api.recipeZapRecipe(id);
        // TODO: test validations
    }

}
