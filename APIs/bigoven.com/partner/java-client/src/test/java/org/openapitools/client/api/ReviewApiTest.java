/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.API2ControllersWebAPIReviewControllerPostReplyReq;
import org.openapitools.client.model.API2ControllersWebAPIReviewControllerReviewRequest;
import org.openapitools.client.model.API2ControllersWebAPIReviewControllerReviewRequestLegacy;
import org.openapitools.client.model.BigOvenModelAPIReply;
import org.openapitools.client.model.BigOvenModelAPIReview;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReviewApi
 */
@Disabled
public class ReviewApiTest {

    private final ReviewApi api = new ReviewApi();

    /**
     * Get *my* review for the recipe {recipeId}, where \&quot;me\&quot; is determined by standard authentication headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeRecipeIdReviewGetTest() throws ApiException {
        Integer recipeId = null;
        BigOvenModelAPIReview response = api.recipeRecipeIdReviewGet(recipeId);
        // TODO: test validations
    }

    /**
     * Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.              Recommended display is to list top-level reviews with one featured reply underneath.               Currently, the FeaturedReply is the most recent one for that rating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeReviewReviewIdGetTest() throws ApiException {
        String reviewId = null;
        BigOvenModelAPIReview response = api.recipeReviewReviewIdGet(reviewId);
        // TODO: test validations
    }

    /**
     * DEPRECATED! - Deletes a review by recipeId and reviewId. Please use recipe/review/{reviewId} instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewDeleteTest() throws ApiException {
        Integer recipeId = null;
        Long reviewId = null;
        Object response = api.reviewDelete(recipeId, reviewId);
        // TODO: test validations
    }

    /**
     * DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewDeleteReplyTest() throws ApiException {
        String replyId = null;
        Object response = api.reviewDeleteReply(replyId);
        // TODO: test validations
    }

    /**
     * Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.              Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.              We are also supporting more of a \&quot;Google Play\&quot; style model for Reviews and Replies. That is, there are top-level Reviews and then              an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review               per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed              which do NOT carry the \&quot;DEPRECATED\&quot; flag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewGetTest() throws ApiException {
        Integer reviewId = null;
        Integer recipeId = null;
        BigOvenModelAPIReview response = api.reviewGet(reviewId, recipeId);
        // TODO: test validations
    }

    /**
     * Get a paged list of replies for a given review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewGetRepliesTest() throws ApiException {
        String reviewId = null;
        Integer pg = null;
        Integer rpp = null;
        List<BigOvenModelAPIReply> response = api.reviewGetReplies(reviewId, pg, rpp);
        // TODO: test validations
    }

    /**
     * Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewGetReviewsTest() throws ApiException {
        Integer recipeId = null;
        Integer pg = null;
        Integer rpp = null;
        List<BigOvenModelAPIReview> response = api.reviewGetReviews(recipeId, pg, rpp);
        // TODO: test validations
    }

    /**
     * Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewPostTest() throws ApiException {
        Integer recipeId = null;
        API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest = null;
        Object response = api.reviewPost(recipeId, apI2ControllersWebAPIReviewControllerReviewRequest);
        // TODO: test validations
    }

    /**
     * POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewPostReplyTest() throws ApiException {
        String reviewId = null;
        API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq = null;
        BigOvenModelAPIReply response = api.reviewPostReply(reviewId, apI2ControllersWebAPIReviewControllerPostReplyReq);
        // TODO: test validations
    }

    /**
     * Update a given top-level review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewPutTest() throws ApiException {
        String reviewId = null;
        API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest = null;
        BigOvenModelAPIReview response = api.reviewPut(reviewId, apI2ControllersWebAPIReviewControllerReviewRequest);
        // TODO: test validations
    }

    /**
     * HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.              We are moving to a string-based primary key system, no longer integers, for reviews and replies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewPutLegacyTest() throws ApiException {
        Integer reviewId = null;
        Integer recipeId = null;
        API2ControllersWebAPIReviewControllerReviewRequestLegacy apI2ControllersWebAPIReviewControllerReviewRequestLegacy = null;
        BigOvenModelAPIReview response = api.reviewPutLegacy(reviewId, recipeId, apI2ControllersWebAPIReviewControllerReviewRequestLegacy);
        // TODO: test validations
    }

    /**
     * Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewPutReplyTest() throws ApiException {
        String replyId = null;
        API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq = null;
        BigOvenModelAPIReply response = api.reviewPutReply(replyId, apI2ControllersWebAPIReviewControllerPostReplyReq);
        // TODO: test validations
    }

}
