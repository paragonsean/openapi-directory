/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BigOvenModelAPIIngredient;
import org.openapitools.client.model.BigOvenModelAPINutritionInfo;
import org.openapitools.client.model.BigOvenModelAPIUserInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BigOvenModelAPIRecipe
 */
public class BigOvenModelAPIRecipeTest {
    private final BigOvenModelAPIRecipe model = new BigOvenModelAPIRecipe();

    /**
     * Model tests for BigOvenModelAPIRecipe
     */
    @Test
    public void testBigOvenModelAPIRecipe() {
        // TODO: test BigOvenModelAPIRecipe
    }

    /**
     * Test the property 'activeMinutes'
     */
    @Test
    public void activeMinutesTest() {
        // TODO: test activeMinutes
    }

    /**
     * Test the property 'adTags'
     */
    @Test
    public void adTagsTest() {
        // TODO: test adTags
    }

    /**
     * Test the property 'adminBoost'
     */
    @Test
    public void adminBoostTest() {
        // TODO: test adminBoost
    }

    /**
     * Test the property 'allCategoriesText'
     */
    @Test
    public void allCategoriesTextTest() {
        // TODO: test allCategoriesText
    }

    /**
     * Test the property 'bookmarkImageURL'
     */
    @Test
    public void bookmarkImageURLTest() {
        // TODO: test bookmarkImageURL
    }

    /**
     * Test the property 'bookmarkSiteLogo'
     */
    @Test
    public void bookmarkSiteLogoTest() {
        // TODO: test bookmarkSiteLogo
    }

    /**
     * Test the property 'bookmarkURL'
     */
    @Test
    public void bookmarkURLTest() {
        // TODO: test bookmarkURL
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'collection'
     */
    @Test
    public void collectionTest() {
        // TODO: test collection
    }

    /**
     * Test the property 'collectionID'
     */
    @Test
    public void collectionIDTest() {
        // TODO: test collectionID
    }

    /**
     * Test the property 'creationDate'
     */
    @Test
    public void creationDateTest() {
        // TODO: test creationDate
    }

    /**
     * Test the property 'cuisine'
     */
    @Test
    public void cuisineTest() {
        // TODO: test cuisine
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'favoriteCount'
     */
    @Test
    public void favoriteCountTest() {
        // TODO: test favoriteCount
    }

    /**
     * Test the property 'heroPhotoUrl'
     */
    @Test
    public void heroPhotoUrlTest() {
        // TODO: test heroPhotoUrl
    }

    /**
     * Test the property 'imageSquares'
     */
    @Test
    public void imageSquaresTest() {
        // TODO: test imageSquares
    }

    /**
     * Test the property 'imageURL'
     */
    @Test
    public void imageURLTest() {
        // TODO: test imageURL
    }

    /**
     * Test the property 'ingredients'
     */
    @Test
    public void ingredientsTest() {
        // TODO: test ingredients
    }

    /**
     * Test the property 'ingredientsTextBlock'
     */
    @Test
    public void ingredientsTextBlockTest() {
        // TODO: test ingredientsTextBlock
    }

    /**
     * Test the property 'instructions'
     */
    @Test
    public void instructionsTest() {
        // TODO: test instructions
    }

    /**
     * Test the property 'isBookmark'
     */
    @Test
    public void isBookmarkTest() {
        // TODO: test isBookmark
    }

    /**
     * Test the property 'isPrivate'
     */
    @Test
    public void isPrivateTest() {
        // TODO: test isPrivate
    }

    /**
     * Test the property 'isRecipeScan'
     */
    @Test
    public void isRecipeScanTest() {
        // TODO: test isRecipeScan
    }

    /**
     * Test the property 'isSponsored'
     */
    @Test
    public void isSponsoredTest() {
        // TODO: test isSponsored
    }

    /**
     * Test the property 'lastModified'
     */
    @Test
    public void lastModifiedTest() {
        // TODO: test lastModified
    }

    /**
     * Test the property 'maxImageSquare'
     */
    @Test
    public void maxImageSquareTest() {
        // TODO: test maxImageSquare
    }

    /**
     * Test the property 'medalCount'
     */
    @Test
    public void medalCountTest() {
        // TODO: test medalCount
    }

    /**
     * Test the property 'menuCount'
     */
    @Test
    public void menuCountTest() {
        // TODO: test menuCount
    }

    /**
     * Test the property 'microcategory'
     */
    @Test
    public void microcategoryTest() {
        // TODO: test microcategory
    }

    /**
     * Test the property 'notesCount'
     */
    @Test
    public void notesCountTest() {
        // TODO: test notesCount
    }

    /**
     * Test the property 'nutritionInfo'
     */
    @Test
    public void nutritionInfoTest() {
        // TODO: test nutritionInfo
    }

    /**
     * Test the property 'poster'
     */
    @Test
    public void posterTest() {
        // TODO: test poster
    }

    /**
     * Test the property 'primaryIngredient'
     */
    @Test
    public void primaryIngredientTest() {
        // TODO: test primaryIngredient
    }

    /**
     * Test the property 'recipeID'
     */
    @Test
    public void recipeIDTest() {
        // TODO: test recipeID
    }

    /**
     * Test the property 'reviewCount'
     */
    @Test
    public void reviewCountTest() {
        // TODO: test reviewCount
    }

    /**
     * Test the property 'starRating'
     */
    @Test
    public void starRatingTest() {
        // TODO: test starRating
    }

    /**
     * Test the property 'subcategory'
     */
    @Test
    public void subcategoryTest() {
        // TODO: test subcategory
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'totalMinutes'
     */
    @Test
    public void totalMinutesTest() {
        // TODO: test totalMinutes
    }

    /**
     * Test the property 'variantOfRecipeID'
     */
    @Test
    public void variantOfRecipeIDTest() {
        // TODO: test variantOfRecipeID
    }

    /**
     * Test the property 'verifiedByClass'
     */
    @Test
    public void verifiedByClassTest() {
        // TODO: test verifiedByClass
    }

    /**
     * Test the property 'verifiedDateTime'
     */
    @Test
    public void verifiedDateTimeTest() {
        // TODO: test verifiedDateTime
    }

    /**
     * Test the property 'webURL'
     */
    @Test
    public void webURLTest() {
        // TODO: test webURL
    }

    /**
     * Test the property 'yieldNumber'
     */
    @Test
    public void yieldNumberTest() {
        // TODO: test yieldNumber
    }

    /**
     * Test the property 'yieldUnit'
     */
    @Test
    public void yieldUnitTest() {
        // TODO: test yieldUnit
    }

}
