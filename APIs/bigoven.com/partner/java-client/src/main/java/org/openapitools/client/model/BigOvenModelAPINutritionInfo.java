/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPINutritionInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPINutritionInfo {
  public static final String SERIALIZED_NAME_CALORIES_FROM_FAT = "CaloriesFromFat";
  @SerializedName(SERIALIZED_NAME_CALORIES_FROM_FAT)
  private Double caloriesFromFat;

  public static final String SERIALIZED_NAME_CHOLESTEROL = "Cholesterol";
  @SerializedName(SERIALIZED_NAME_CHOLESTEROL)
  private Double cholesterol;

  public static final String SERIALIZED_NAME_CHOLESTEROL_PCT = "CholesterolPct";
  @SerializedName(SERIALIZED_NAME_CHOLESTEROL_PCT)
  private Double cholesterolPct;

  public static final String SERIALIZED_NAME_DIETARY_FIBER = "DietaryFiber";
  @SerializedName(SERIALIZED_NAME_DIETARY_FIBER)
  private Double dietaryFiber;

  public static final String SERIALIZED_NAME_DIETARY_FIBER_PCT = "DietaryFiberPct";
  @SerializedName(SERIALIZED_NAME_DIETARY_FIBER_PCT)
  private Double dietaryFiberPct;

  public static final String SERIALIZED_NAME_MONO_FAT = "MonoFat";
  @SerializedName(SERIALIZED_NAME_MONO_FAT)
  private Double monoFat;

  public static final String SERIALIZED_NAME_POLY_FAT = "PolyFat";
  @SerializedName(SERIALIZED_NAME_POLY_FAT)
  private Double polyFat;

  public static final String SERIALIZED_NAME_POTASSIUM = "Potassium";
  @SerializedName(SERIALIZED_NAME_POTASSIUM)
  private Double potassium;

  public static final String SERIALIZED_NAME_POTASSIUM_PCT = "PotassiumPct";
  @SerializedName(SERIALIZED_NAME_POTASSIUM_PCT)
  private Double potassiumPct;

  public static final String SERIALIZED_NAME_PROTEIN = "Protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private Double protein;

  public static final String SERIALIZED_NAME_PROTEIN_PCT = "ProteinPct";
  @SerializedName(SERIALIZED_NAME_PROTEIN_PCT)
  private Double proteinPct;

  public static final String SERIALIZED_NAME_SAT_FAT = "SatFat";
  @SerializedName(SERIALIZED_NAME_SAT_FAT)
  private Double satFat;

  public static final String SERIALIZED_NAME_SAT_FAT_PCT = "SatFatPct";
  @SerializedName(SERIALIZED_NAME_SAT_FAT_PCT)
  private Double satFatPct;

  public static final String SERIALIZED_NAME_SINGULAR_YIELD_UNIT = "SingularYieldUnit";
  @SerializedName(SERIALIZED_NAME_SINGULAR_YIELD_UNIT)
  private String singularYieldUnit;

  public static final String SERIALIZED_NAME_SODIUM = "Sodium";
  @SerializedName(SERIALIZED_NAME_SODIUM)
  private Double sodium;

  public static final String SERIALIZED_NAME_SODIUM_PCT = "SodiumPct";
  @SerializedName(SERIALIZED_NAME_SODIUM_PCT)
  private Double sodiumPct;

  public static final String SERIALIZED_NAME_SUGAR = "Sugar";
  @SerializedName(SERIALIZED_NAME_SUGAR)
  private Double sugar;

  public static final String SERIALIZED_NAME_TOTAL_CALORIES = "TotalCalories";
  @SerializedName(SERIALIZED_NAME_TOTAL_CALORIES)
  private Double totalCalories;

  public static final String SERIALIZED_NAME_TOTAL_CARBS = "TotalCarbs";
  @SerializedName(SERIALIZED_NAME_TOTAL_CARBS)
  private Double totalCarbs;

  public static final String SERIALIZED_NAME_TOTAL_CARBS_PCT = "TotalCarbsPct";
  @SerializedName(SERIALIZED_NAME_TOTAL_CARBS_PCT)
  private Double totalCarbsPct;

  public static final String SERIALIZED_NAME_TOTAL_FAT = "TotalFat";
  @SerializedName(SERIALIZED_NAME_TOTAL_FAT)
  private Double totalFat;

  public static final String SERIALIZED_NAME_TOTAL_FAT_PCT = "TotalFatPct";
  @SerializedName(SERIALIZED_NAME_TOTAL_FAT_PCT)
  private Double totalFatPct;

  public static final String SERIALIZED_NAME_TRANS_FAT = "TransFat";
  @SerializedName(SERIALIZED_NAME_TRANS_FAT)
  private Double transFat;

  public BigOvenModelAPINutritionInfo() {
  }

  public BigOvenModelAPINutritionInfo caloriesFromFat(Double caloriesFromFat) {
    this.caloriesFromFat = caloriesFromFat;
    return this;
  }

  /**
   * Get caloriesFromFat
   * @return caloriesFromFat
   */
  @javax.annotation.Nullable
  public Double getCaloriesFromFat() {
    return caloriesFromFat;
  }

  public void setCaloriesFromFat(Double caloriesFromFat) {
    this.caloriesFromFat = caloriesFromFat;
  }


  public BigOvenModelAPINutritionInfo cholesterol(Double cholesterol) {
    this.cholesterol = cholesterol;
    return this;
  }

  /**
   * Get cholesterol
   * @return cholesterol
   */
  @javax.annotation.Nullable
  public Double getCholesterol() {
    return cholesterol;
  }

  public void setCholesterol(Double cholesterol) {
    this.cholesterol = cholesterol;
  }


  public BigOvenModelAPINutritionInfo cholesterolPct(Double cholesterolPct) {
    this.cholesterolPct = cholesterolPct;
    return this;
  }

  /**
   * Get cholesterolPct
   * @return cholesterolPct
   */
  @javax.annotation.Nullable
  public Double getCholesterolPct() {
    return cholesterolPct;
  }

  public void setCholesterolPct(Double cholesterolPct) {
    this.cholesterolPct = cholesterolPct;
  }


  public BigOvenModelAPINutritionInfo dietaryFiber(Double dietaryFiber) {
    this.dietaryFiber = dietaryFiber;
    return this;
  }

  /**
   * Get dietaryFiber
   * @return dietaryFiber
   */
  @javax.annotation.Nullable
  public Double getDietaryFiber() {
    return dietaryFiber;
  }

  public void setDietaryFiber(Double dietaryFiber) {
    this.dietaryFiber = dietaryFiber;
  }


  public BigOvenModelAPINutritionInfo dietaryFiberPct(Double dietaryFiberPct) {
    this.dietaryFiberPct = dietaryFiberPct;
    return this;
  }

  /**
   * Get dietaryFiberPct
   * @return dietaryFiberPct
   */
  @javax.annotation.Nullable
  public Double getDietaryFiberPct() {
    return dietaryFiberPct;
  }

  public void setDietaryFiberPct(Double dietaryFiberPct) {
    this.dietaryFiberPct = dietaryFiberPct;
  }


  public BigOvenModelAPINutritionInfo monoFat(Double monoFat) {
    this.monoFat = monoFat;
    return this;
  }

  /**
   * Get monoFat
   * @return monoFat
   */
  @javax.annotation.Nullable
  public Double getMonoFat() {
    return monoFat;
  }

  public void setMonoFat(Double monoFat) {
    this.monoFat = monoFat;
  }


  public BigOvenModelAPINutritionInfo polyFat(Double polyFat) {
    this.polyFat = polyFat;
    return this;
  }

  /**
   * Get polyFat
   * @return polyFat
   */
  @javax.annotation.Nullable
  public Double getPolyFat() {
    return polyFat;
  }

  public void setPolyFat(Double polyFat) {
    this.polyFat = polyFat;
  }


  public BigOvenModelAPINutritionInfo potassium(Double potassium) {
    this.potassium = potassium;
    return this;
  }

  /**
   * Get potassium
   * @return potassium
   */
  @javax.annotation.Nullable
  public Double getPotassium() {
    return potassium;
  }

  public void setPotassium(Double potassium) {
    this.potassium = potassium;
  }


  public BigOvenModelAPINutritionInfo potassiumPct(Double potassiumPct) {
    this.potassiumPct = potassiumPct;
    return this;
  }

  /**
   * Get potassiumPct
   * @return potassiumPct
   */
  @javax.annotation.Nullable
  public Double getPotassiumPct() {
    return potassiumPct;
  }

  public void setPotassiumPct(Double potassiumPct) {
    this.potassiumPct = potassiumPct;
  }


  public BigOvenModelAPINutritionInfo protein(Double protein) {
    this.protein = protein;
    return this;
  }

  /**
   * Get protein
   * @return protein
   */
  @javax.annotation.Nullable
  public Double getProtein() {
    return protein;
  }

  public void setProtein(Double protein) {
    this.protein = protein;
  }


  public BigOvenModelAPINutritionInfo proteinPct(Double proteinPct) {
    this.proteinPct = proteinPct;
    return this;
  }

  /**
   * Get proteinPct
   * @return proteinPct
   */
  @javax.annotation.Nullable
  public Double getProteinPct() {
    return proteinPct;
  }

  public void setProteinPct(Double proteinPct) {
    this.proteinPct = proteinPct;
  }


  public BigOvenModelAPINutritionInfo satFat(Double satFat) {
    this.satFat = satFat;
    return this;
  }

  /**
   * Get satFat
   * @return satFat
   */
  @javax.annotation.Nullable
  public Double getSatFat() {
    return satFat;
  }

  public void setSatFat(Double satFat) {
    this.satFat = satFat;
  }


  public BigOvenModelAPINutritionInfo satFatPct(Double satFatPct) {
    this.satFatPct = satFatPct;
    return this;
  }

  /**
   * Get satFatPct
   * @return satFatPct
   */
  @javax.annotation.Nullable
  public Double getSatFatPct() {
    return satFatPct;
  }

  public void setSatFatPct(Double satFatPct) {
    this.satFatPct = satFatPct;
  }


  public BigOvenModelAPINutritionInfo singularYieldUnit(String singularYieldUnit) {
    this.singularYieldUnit = singularYieldUnit;
    return this;
  }

  /**
   * Get singularYieldUnit
   * @return singularYieldUnit
   */
  @javax.annotation.Nullable
  public String getSingularYieldUnit() {
    return singularYieldUnit;
  }

  public void setSingularYieldUnit(String singularYieldUnit) {
    this.singularYieldUnit = singularYieldUnit;
  }


  public BigOvenModelAPINutritionInfo sodium(Double sodium) {
    this.sodium = sodium;
    return this;
  }

  /**
   * Get sodium
   * @return sodium
   */
  @javax.annotation.Nullable
  public Double getSodium() {
    return sodium;
  }

  public void setSodium(Double sodium) {
    this.sodium = sodium;
  }


  public BigOvenModelAPINutritionInfo sodiumPct(Double sodiumPct) {
    this.sodiumPct = sodiumPct;
    return this;
  }

  /**
   * Get sodiumPct
   * @return sodiumPct
   */
  @javax.annotation.Nullable
  public Double getSodiumPct() {
    return sodiumPct;
  }

  public void setSodiumPct(Double sodiumPct) {
    this.sodiumPct = sodiumPct;
  }


  public BigOvenModelAPINutritionInfo sugar(Double sugar) {
    this.sugar = sugar;
    return this;
  }

  /**
   * Get sugar
   * @return sugar
   */
  @javax.annotation.Nullable
  public Double getSugar() {
    return sugar;
  }

  public void setSugar(Double sugar) {
    this.sugar = sugar;
  }


  public BigOvenModelAPINutritionInfo totalCalories(Double totalCalories) {
    this.totalCalories = totalCalories;
    return this;
  }

  /**
   * Get totalCalories
   * @return totalCalories
   */
  @javax.annotation.Nullable
  public Double getTotalCalories() {
    return totalCalories;
  }

  public void setTotalCalories(Double totalCalories) {
    this.totalCalories = totalCalories;
  }


  public BigOvenModelAPINutritionInfo totalCarbs(Double totalCarbs) {
    this.totalCarbs = totalCarbs;
    return this;
  }

  /**
   * Get totalCarbs
   * @return totalCarbs
   */
  @javax.annotation.Nullable
  public Double getTotalCarbs() {
    return totalCarbs;
  }

  public void setTotalCarbs(Double totalCarbs) {
    this.totalCarbs = totalCarbs;
  }


  public BigOvenModelAPINutritionInfo totalCarbsPct(Double totalCarbsPct) {
    this.totalCarbsPct = totalCarbsPct;
    return this;
  }

  /**
   * Get totalCarbsPct
   * @return totalCarbsPct
   */
  @javax.annotation.Nullable
  public Double getTotalCarbsPct() {
    return totalCarbsPct;
  }

  public void setTotalCarbsPct(Double totalCarbsPct) {
    this.totalCarbsPct = totalCarbsPct;
  }


  public BigOvenModelAPINutritionInfo totalFat(Double totalFat) {
    this.totalFat = totalFat;
    return this;
  }

  /**
   * Get totalFat
   * @return totalFat
   */
  @javax.annotation.Nullable
  public Double getTotalFat() {
    return totalFat;
  }

  public void setTotalFat(Double totalFat) {
    this.totalFat = totalFat;
  }


  public BigOvenModelAPINutritionInfo totalFatPct(Double totalFatPct) {
    this.totalFatPct = totalFatPct;
    return this;
  }

  /**
   * Get totalFatPct
   * @return totalFatPct
   */
  @javax.annotation.Nullable
  public Double getTotalFatPct() {
    return totalFatPct;
  }

  public void setTotalFatPct(Double totalFatPct) {
    this.totalFatPct = totalFatPct;
  }


  public BigOvenModelAPINutritionInfo transFat(Double transFat) {
    this.transFat = transFat;
    return this;
  }

  /**
   * Get transFat
   * @return transFat
   */
  @javax.annotation.Nullable
  public Double getTransFat() {
    return transFat;
  }

  public void setTransFat(Double transFat) {
    this.transFat = transFat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPINutritionInfo bigOvenModelAPINutritionInfo = (BigOvenModelAPINutritionInfo) o;
    return Objects.equals(this.caloriesFromFat, bigOvenModelAPINutritionInfo.caloriesFromFat) &&
        Objects.equals(this.cholesterol, bigOvenModelAPINutritionInfo.cholesterol) &&
        Objects.equals(this.cholesterolPct, bigOvenModelAPINutritionInfo.cholesterolPct) &&
        Objects.equals(this.dietaryFiber, bigOvenModelAPINutritionInfo.dietaryFiber) &&
        Objects.equals(this.dietaryFiberPct, bigOvenModelAPINutritionInfo.dietaryFiberPct) &&
        Objects.equals(this.monoFat, bigOvenModelAPINutritionInfo.monoFat) &&
        Objects.equals(this.polyFat, bigOvenModelAPINutritionInfo.polyFat) &&
        Objects.equals(this.potassium, bigOvenModelAPINutritionInfo.potassium) &&
        Objects.equals(this.potassiumPct, bigOvenModelAPINutritionInfo.potassiumPct) &&
        Objects.equals(this.protein, bigOvenModelAPINutritionInfo.protein) &&
        Objects.equals(this.proteinPct, bigOvenModelAPINutritionInfo.proteinPct) &&
        Objects.equals(this.satFat, bigOvenModelAPINutritionInfo.satFat) &&
        Objects.equals(this.satFatPct, bigOvenModelAPINutritionInfo.satFatPct) &&
        Objects.equals(this.singularYieldUnit, bigOvenModelAPINutritionInfo.singularYieldUnit) &&
        Objects.equals(this.sodium, bigOvenModelAPINutritionInfo.sodium) &&
        Objects.equals(this.sodiumPct, bigOvenModelAPINutritionInfo.sodiumPct) &&
        Objects.equals(this.sugar, bigOvenModelAPINutritionInfo.sugar) &&
        Objects.equals(this.totalCalories, bigOvenModelAPINutritionInfo.totalCalories) &&
        Objects.equals(this.totalCarbs, bigOvenModelAPINutritionInfo.totalCarbs) &&
        Objects.equals(this.totalCarbsPct, bigOvenModelAPINutritionInfo.totalCarbsPct) &&
        Objects.equals(this.totalFat, bigOvenModelAPINutritionInfo.totalFat) &&
        Objects.equals(this.totalFatPct, bigOvenModelAPINutritionInfo.totalFatPct) &&
        Objects.equals(this.transFat, bigOvenModelAPINutritionInfo.transFat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caloriesFromFat, cholesterol, cholesterolPct, dietaryFiber, dietaryFiberPct, monoFat, polyFat, potassium, potassiumPct, protein, proteinPct, satFat, satFatPct, singularYieldUnit, sodium, sodiumPct, sugar, totalCalories, totalCarbs, totalCarbsPct, totalFat, totalFatPct, transFat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPINutritionInfo {\n");
    sb.append("    caloriesFromFat: ").append(toIndentedString(caloriesFromFat)).append("\n");
    sb.append("    cholesterol: ").append(toIndentedString(cholesterol)).append("\n");
    sb.append("    cholesterolPct: ").append(toIndentedString(cholesterolPct)).append("\n");
    sb.append("    dietaryFiber: ").append(toIndentedString(dietaryFiber)).append("\n");
    sb.append("    dietaryFiberPct: ").append(toIndentedString(dietaryFiberPct)).append("\n");
    sb.append("    monoFat: ").append(toIndentedString(monoFat)).append("\n");
    sb.append("    polyFat: ").append(toIndentedString(polyFat)).append("\n");
    sb.append("    potassium: ").append(toIndentedString(potassium)).append("\n");
    sb.append("    potassiumPct: ").append(toIndentedString(potassiumPct)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    proteinPct: ").append(toIndentedString(proteinPct)).append("\n");
    sb.append("    satFat: ").append(toIndentedString(satFat)).append("\n");
    sb.append("    satFatPct: ").append(toIndentedString(satFatPct)).append("\n");
    sb.append("    singularYieldUnit: ").append(toIndentedString(singularYieldUnit)).append("\n");
    sb.append("    sodium: ").append(toIndentedString(sodium)).append("\n");
    sb.append("    sodiumPct: ").append(toIndentedString(sodiumPct)).append("\n");
    sb.append("    sugar: ").append(toIndentedString(sugar)).append("\n");
    sb.append("    totalCalories: ").append(toIndentedString(totalCalories)).append("\n");
    sb.append("    totalCarbs: ").append(toIndentedString(totalCarbs)).append("\n");
    sb.append("    totalCarbsPct: ").append(toIndentedString(totalCarbsPct)).append("\n");
    sb.append("    totalFat: ").append(toIndentedString(totalFat)).append("\n");
    sb.append("    totalFatPct: ").append(toIndentedString(totalFatPct)).append("\n");
    sb.append("    transFat: ").append(toIndentedString(transFat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CaloriesFromFat");
    openapiFields.add("Cholesterol");
    openapiFields.add("CholesterolPct");
    openapiFields.add("DietaryFiber");
    openapiFields.add("DietaryFiberPct");
    openapiFields.add("MonoFat");
    openapiFields.add("PolyFat");
    openapiFields.add("Potassium");
    openapiFields.add("PotassiumPct");
    openapiFields.add("Protein");
    openapiFields.add("ProteinPct");
    openapiFields.add("SatFat");
    openapiFields.add("SatFatPct");
    openapiFields.add("SingularYieldUnit");
    openapiFields.add("Sodium");
    openapiFields.add("SodiumPct");
    openapiFields.add("Sugar");
    openapiFields.add("TotalCalories");
    openapiFields.add("TotalCarbs");
    openapiFields.add("TotalCarbsPct");
    openapiFields.add("TotalFat");
    openapiFields.add("TotalFatPct");
    openapiFields.add("TransFat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPINutritionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPINutritionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPINutritionInfo is not found in the empty JSON string", BigOvenModelAPINutritionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPINutritionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPINutritionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SingularYieldUnit") != null && !jsonObj.get("SingularYieldUnit").isJsonNull()) && !jsonObj.get("SingularYieldUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SingularYieldUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SingularYieldUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPINutritionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPINutritionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPINutritionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPINutritionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPINutritionInfo>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPINutritionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPINutritionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPINutritionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPINutritionInfo
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPINutritionInfo
   */
  public static BigOvenModelAPINutritionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPINutritionInfo.class);
  }

  /**
   * Convert an instance of BigOvenModelAPINutritionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

