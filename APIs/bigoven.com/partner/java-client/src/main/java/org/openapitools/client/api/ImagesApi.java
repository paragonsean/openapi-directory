/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.API2ControllersWebAPIImagesControllerRecipePhotosResponse;
import org.openapitools.client.model.BigOvenModelAPIImage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for imagesGet
     * @param recipeId Recipe ID (required) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetCall(Integer recipeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/images"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesGetValidateBeforeCall(Integer recipeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling imagesGet(Async)");
        }

        return imagesGetCall(recipeId, _callback);

    }

    /**
     * Get all the images for a recipe. DEPRECATED. Please use /recipe/{recipeId}/photos.
     * 
     * @param recipeId Recipe ID (required) (required)
     * @return List&lt;BigOvenModelAPIImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelAPIImage> imagesGet(Integer recipeId) throws ApiException {
        ApiResponse<List<BigOvenModelAPIImage>> localVarResp = imagesGetWithHttpInfo(recipeId);
        return localVarResp.getData();
    }

    /**
     * Get all the images for a recipe. DEPRECATED. Please use /recipe/{recipeId}/photos.
     * 
     * @param recipeId Recipe ID (required) (required)
     * @return ApiResponse&lt;List&lt;BigOvenModelAPIImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelAPIImage>> imagesGetWithHttpInfo(Integer recipeId) throws ApiException {
        okhttp3.Call localVarCall = imagesGetValidateBeforeCall(recipeId, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the images for a recipe. DEPRECATED. Please use /recipe/{recipeId}/photos. (asynchronously)
     * 
     * @param recipeId Recipe ID (required) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetAsync(Integer recipeId, final ApiCallback<List<BigOvenModelAPIImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesGetValidateBeforeCall(recipeId, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesGetPendingByUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetPendingByUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/photos/pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesGetPendingByUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return imagesGetPendingByUserCall(_callback);

    }

    /**
     * Gets the pending by user.
     * 
     * @return API2ControllersWebAPIImagesControllerRecipePhotosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public API2ControllersWebAPIImagesControllerRecipePhotosResponse imagesGetPendingByUser() throws ApiException {
        ApiResponse<API2ControllersWebAPIImagesControllerRecipePhotosResponse> localVarResp = imagesGetPendingByUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the pending by user.
     * 
     * @return ApiResponse&lt;API2ControllersWebAPIImagesControllerRecipePhotosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<API2ControllersWebAPIImagesControllerRecipePhotosResponse> imagesGetPendingByUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = imagesGetPendingByUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<API2ControllersWebAPIImagesControllerRecipePhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the pending by user. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetPendingByUserAsync(final ApiCallback<API2ControllersWebAPIImagesControllerRecipePhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesGetPendingByUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<API2ControllersWebAPIImagesControllerRecipePhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesGetRecipePhotos
     * @param recipeId Recipe ID (required) (required)
     * @param pg  (optional)
     * @param rpp  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetRecipePhotosCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/photos"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesGetRecipePhotosValidateBeforeCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling imagesGetRecipePhotos(Async)");
        }

        return imagesGetRecipePhotosCall(recipeId, pg, rpp, _callback);

    }

    /**
     * Get all the photos for a recipe
     * 
     * @param recipeId Recipe ID (required) (required)
     * @param pg  (optional)
     * @param rpp  (optional)
     * @return API2ControllersWebAPIImagesControllerRecipePhotosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public API2ControllersWebAPIImagesControllerRecipePhotosResponse imagesGetRecipePhotos(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        ApiResponse<API2ControllersWebAPIImagesControllerRecipePhotosResponse> localVarResp = imagesGetRecipePhotosWithHttpInfo(recipeId, pg, rpp);
        return localVarResp.getData();
    }

    /**
     * Get all the photos for a recipe
     * 
     * @param recipeId Recipe ID (required) (required)
     * @param pg  (optional)
     * @param rpp  (optional)
     * @return ApiResponse&lt;API2ControllersWebAPIImagesControllerRecipePhotosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<API2ControllersWebAPIImagesControllerRecipePhotosResponse> imagesGetRecipePhotosWithHttpInfo(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = imagesGetRecipePhotosValidateBeforeCall(recipeId, pg, rpp, null);
        Type localVarReturnType = new TypeToken<API2ControllersWebAPIImagesControllerRecipePhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the photos for a recipe (asynchronously)
     * 
     * @param recipeId Recipe ID (required) (required)
     * @param pg  (optional)
     * @param rpp  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetRecipePhotosAsync(Integer recipeId, Integer pg, Integer rpp, final ApiCallback<API2ControllersWebAPIImagesControllerRecipePhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesGetRecipePhotosValidateBeforeCall(recipeId, pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<API2ControllersWebAPIImagesControllerRecipePhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesGetScanImages
     * @param recipeId the recipe identifier (int) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetScanImagesCall(Integer recipeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/scans"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesGetScanImagesValidateBeforeCall(Integer recipeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling imagesGetScanImages(Async)");
        }

        return imagesGetScanImagesCall(recipeId, _callback);

    }

    /**
     * Gets a list of RecipeScan images for the recipe. There will be at most 3 per recipe.
     * 
     * @param recipeId the recipe identifier (int) (required)
     * @return List&lt;BigOvenModelAPIImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelAPIImage> imagesGetScanImages(Integer recipeId) throws ApiException {
        ApiResponse<List<BigOvenModelAPIImage>> localVarResp = imagesGetScanImagesWithHttpInfo(recipeId);
        return localVarResp.getData();
    }

    /**
     * Gets a list of RecipeScan images for the recipe. There will be at most 3 per recipe.
     * 
     * @param recipeId the recipe identifier (int) (required)
     * @return ApiResponse&lt;List&lt;BigOvenModelAPIImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelAPIImage>> imagesGetScanImagesWithHttpInfo(Integer recipeId) throws ApiException {
        okhttp3.Call localVarCall = imagesGetScanImagesValidateBeforeCall(recipeId, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of RecipeScan images for the recipe. There will be at most 3 per recipe. (asynchronously)
     * 
     * @param recipeId the recipe identifier (int) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetScanImagesAsync(Integer recipeId, final ApiCallback<List<BigOvenModelAPIImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesGetScanImagesValidateBeforeCall(recipeId, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesUploadRecipeImage
     * @param recipeId  (required)
     * @param caption  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesUploadRecipeImageCall(String recipeId, String caption, Double lat, Double lng, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/image"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesUploadRecipeImageValidateBeforeCall(String recipeId, String caption, Double lat, Double lng, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling imagesUploadRecipeImage(Async)");
        }

        return imagesUploadRecipeImageCall(recipeId, caption, lat, lng, _callback);

    }

    /**
     * POST: /recipe/{recipeId}/image?lat&#x3D;42&amp;amp;lng&#x3D;21&amp;amp;caption&#x3D;this%20is%20my%20caption                              Note that caption, lng and lat are all optional, but must go on the request URI as params because this endpoint               needs a multipart/mime content header and will not parse JSON in the body along with it.                             Testing with Postman (validated 11/20/2015):               1) Remove the Content-Type header; add authentication information               2) On the request, click Body and choose \&quot;form-data\&quot;, then add a line item with \&quot;key\&quot; column set to \&quot;file\&quot; and on the right,               change the type of the input from Text to File.  Browse and choose a JPG.
     * 
     * @param recipeId  (required)
     * @param caption  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public Object imagesUploadRecipeImage(String recipeId, String caption, Double lat, Double lng) throws ApiException {
        ApiResponse<Object> localVarResp = imagesUploadRecipeImageWithHttpInfo(recipeId, caption, lat, lng);
        return localVarResp.getData();
    }

    /**
     * POST: /recipe/{recipeId}/image?lat&#x3D;42&amp;amp;lng&#x3D;21&amp;amp;caption&#x3D;this%20is%20my%20caption                              Note that caption, lng and lat are all optional, but must go on the request URI as params because this endpoint               needs a multipart/mime content header and will not parse JSON in the body along with it.                             Testing with Postman (validated 11/20/2015):               1) Remove the Content-Type header; add authentication information               2) On the request, click Body and choose \&quot;form-data\&quot;, then add a line item with \&quot;key\&quot; column set to \&quot;file\&quot; and on the right,               change the type of the input from Text to File.  Browse and choose a JPG.
     * 
     * @param recipeId  (required)
     * @param caption  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> imagesUploadRecipeImageWithHttpInfo(String recipeId, String caption, Double lat, Double lng) throws ApiException {
        okhttp3.Call localVarCall = imagesUploadRecipeImageValidateBeforeCall(recipeId, caption, lat, lng, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST: /recipe/{recipeId}/image?lat&#x3D;42&amp;amp;lng&#x3D;21&amp;amp;caption&#x3D;this%20is%20my%20caption                              Note that caption, lng and lat are all optional, but must go on the request URI as params because this endpoint               needs a multipart/mime content header and will not parse JSON in the body along with it.                             Testing with Postman (validated 11/20/2015):               1) Remove the Content-Type header; add authentication information               2) On the request, click Body and choose \&quot;form-data\&quot;, then add a line item with \&quot;key\&quot; column set to \&quot;file\&quot; and on the right,               change the type of the input from Text to File.  Browse and choose a JPG. (asynchronously)
     * 
     * @param recipeId  (required)
     * @param caption  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesUploadRecipeImageAsync(String recipeId, String caption, Double lat, Double lng, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesUploadRecipeImageValidateBeforeCall(recipeId, caption, lat, lng, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesUploadUserAvatar
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesUploadUserAvatarCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/image/avatar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesUploadUserAvatarValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return imagesUploadUserAvatarCall(_callback);

    }

    /**
     * POST: /image/avatar                             Testing with Postman (validated 11/20/2015):              1) Remove the Content-Type header; add authentication information              2) On the request, click Body and choose \&quot;form-data\&quot;, then add a line item with \&quot;key\&quot; column set to \&quot;file\&quot; and on the right,              change the type of the input from Text to File.  Browse and choose a JPG.
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public Object imagesUploadUserAvatar() throws ApiException {
        ApiResponse<Object> localVarResp = imagesUploadUserAvatarWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * POST: /image/avatar                             Testing with Postman (validated 11/20/2015):              1) Remove the Content-Type header; add authentication information              2) On the request, click Body and choose \&quot;form-data\&quot;, then add a line item with \&quot;key\&quot; column set to \&quot;file\&quot; and on the right,              change the type of the input from Text to File.  Browse and choose a JPG.
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> imagesUploadUserAvatarWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = imagesUploadUserAvatarValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST: /image/avatar                             Testing with Postman (validated 11/20/2015):              1) Remove the Content-Type header; add authentication information              2) On the request, click Body and choose \&quot;form-data\&quot;, then add a line item with \&quot;key\&quot; column set to \&quot;file\&quot; and on the right,              change the type of the input from Text to File.  Browse and choose a JPG. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if bad request (e.g., missing parameters) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> if the user is unknown </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> if unsupported media type (e.g., bad JPG) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesUploadUserAvatarAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesUploadUserAvatarValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
