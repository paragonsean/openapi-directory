/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BigOvenModelAPI2RecipeInfox;
import org.openapitools.client.model.BigOvenModelAPIReview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelRecipeInfoReviewTuple2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelRecipeInfoReviewTuple2 {
  public static final String SERIALIZED_NAME_RECIPE_INFO = "RecipeInfo";
  @SerializedName(SERIALIZED_NAME_RECIPE_INFO)
  private BigOvenModelAPI2RecipeInfox recipeInfo;

  public static final String SERIALIZED_NAME_REVIEW = "Review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private BigOvenModelAPIReview review;

  public BigOvenModelRecipeInfoReviewTuple2() {
  }

  public BigOvenModelRecipeInfoReviewTuple2 recipeInfo(BigOvenModelAPI2RecipeInfox recipeInfo) {
    this.recipeInfo = recipeInfo;
    return this;
  }

  /**
   * Get recipeInfo
   * @return recipeInfo
   */
  @javax.annotation.Nullable
  public BigOvenModelAPI2RecipeInfox getRecipeInfo() {
    return recipeInfo;
  }

  public void setRecipeInfo(BigOvenModelAPI2RecipeInfox recipeInfo) {
    this.recipeInfo = recipeInfo;
  }


  public BigOvenModelRecipeInfoReviewTuple2 review(BigOvenModelAPIReview review) {
    this.review = review;
    return this;
  }

  /**
   * Get review
   * @return review
   */
  @javax.annotation.Nullable
  public BigOvenModelAPIReview getReview() {
    return review;
  }

  public void setReview(BigOvenModelAPIReview review) {
    this.review = review;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelRecipeInfoReviewTuple2 bigOvenModelRecipeInfoReviewTuple2 = (BigOvenModelRecipeInfoReviewTuple2) o;
    return Objects.equals(this.recipeInfo, bigOvenModelRecipeInfoReviewTuple2.recipeInfo) &&
        Objects.equals(this.review, bigOvenModelRecipeInfoReviewTuple2.review);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipeInfo, review);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelRecipeInfoReviewTuple2 {\n");
    sb.append("    recipeInfo: ").append(toIndentedString(recipeInfo)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RecipeInfo");
    openapiFields.add("Review");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelRecipeInfoReviewTuple2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelRecipeInfoReviewTuple2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelRecipeInfoReviewTuple2 is not found in the empty JSON string", BigOvenModelRecipeInfoReviewTuple2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelRecipeInfoReviewTuple2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelRecipeInfoReviewTuple2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RecipeInfo`
      if (jsonObj.get("RecipeInfo") != null && !jsonObj.get("RecipeInfo").isJsonNull()) {
        BigOvenModelAPI2RecipeInfox.validateJsonElement(jsonObj.get("RecipeInfo"));
      }
      // validate the optional field `Review`
      if (jsonObj.get("Review") != null && !jsonObj.get("Review").isJsonNull()) {
        BigOvenModelAPIReview.validateJsonElement(jsonObj.get("Review"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelRecipeInfoReviewTuple2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelRecipeInfoReviewTuple2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelRecipeInfoReviewTuple2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelRecipeInfoReviewTuple2.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelRecipeInfoReviewTuple2>() {
           @Override
           public void write(JsonWriter out, BigOvenModelRecipeInfoReviewTuple2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelRecipeInfoReviewTuple2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelRecipeInfoReviewTuple2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelRecipeInfoReviewTuple2
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelRecipeInfoReviewTuple2
   */
  public static BigOvenModelRecipeInfoReviewTuple2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelRecipeInfoReviewTuple2.class);
  }

  /**
   * Convert an instance of BigOvenModelRecipeInfoReviewTuple2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

