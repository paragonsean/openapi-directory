/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BigOvenModelAPIIngredientInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPIIngredient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPIIngredient {
  public static final String SERIALIZED_NAME_DISPLAY_INDEX = "DisplayIndex";
  @SerializedName(SERIALIZED_NAME_DISPLAY_INDEX)
  private Integer displayIndex;

  public static final String SERIALIZED_NAME_DISPLAY_QUANTITY = "DisplayQuantity";
  @SerializedName(SERIALIZED_NAME_DISPLAY_QUANTITY)
  private String displayQuantity;

  public static final String SERIALIZED_NAME_HT_M_L_NAME = "HTMLName";
  @SerializedName(SERIALIZED_NAME_HT_M_L_NAME)
  private String htMLName;

  public static final String SERIALIZED_NAME_INGREDIENT_I_D = "IngredientID";
  @SerializedName(SERIALIZED_NAME_INGREDIENT_I_D)
  private Long ingredientID;

  public static final String SERIALIZED_NAME_INGREDIENT_INFO = "IngredientInfo";
  @SerializedName(SERIALIZED_NAME_INGREDIENT_INFO)
  private BigOvenModelAPIIngredientInfo ingredientInfo;

  public static final String SERIALIZED_NAME_IS_HEADING = "IsHeading";
  @SerializedName(SERIALIZED_NAME_IS_HEADING)
  private Boolean isHeading;

  public static final String SERIALIZED_NAME_IS_LINKED = "IsLinked";
  @SerializedName(SERIALIZED_NAME_IS_LINKED)
  private Boolean isLinked;

  public static final String SERIALIZED_NAME_METRIC_DISPLAY_QUANTITY = "MetricDisplayQuantity";
  @SerializedName(SERIALIZED_NAME_METRIC_DISPLAY_QUANTITY)
  private String metricDisplayQuantity;

  public static final String SERIALIZED_NAME_METRIC_QUANTITY = "MetricQuantity";
  @SerializedName(SERIALIZED_NAME_METRIC_QUANTITY)
  private Double metricQuantity;

  public static final String SERIALIZED_NAME_METRIC_UNIT = "MetricUnit";
  @SerializedName(SERIALIZED_NAME_METRIC_UNIT)
  private String metricUnit;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREPARATION_NOTES = "PreparationNotes";
  @SerializedName(SERIALIZED_NAME_PREPARATION_NOTES)
  private String preparationNotes;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public BigOvenModelAPIIngredient() {
  }

  public BigOvenModelAPIIngredient displayIndex(Integer displayIndex) {
    this.displayIndex = displayIndex;
    return this;
  }

  /**
   * Get displayIndex
   * @return displayIndex
   */
  @javax.annotation.Nullable
  public Integer getDisplayIndex() {
    return displayIndex;
  }

  public void setDisplayIndex(Integer displayIndex) {
    this.displayIndex = displayIndex;
  }


  public BigOvenModelAPIIngredient displayQuantity(String displayQuantity) {
    this.displayQuantity = displayQuantity;
    return this;
  }

  /**
   * Get displayQuantity
   * @return displayQuantity
   */
  @javax.annotation.Nullable
  public String getDisplayQuantity() {
    return displayQuantity;
  }

  public void setDisplayQuantity(String displayQuantity) {
    this.displayQuantity = displayQuantity;
  }


  public BigOvenModelAPIIngredient htMLName(String htMLName) {
    this.htMLName = htMLName;
    return this;
  }

  /**
   * Get htMLName
   * @return htMLName
   */
  @javax.annotation.Nullable
  public String getHtMLName() {
    return htMLName;
  }

  public void setHtMLName(String htMLName) {
    this.htMLName = htMLName;
  }


  public BigOvenModelAPIIngredient ingredientID(Long ingredientID) {
    this.ingredientID = ingredientID;
    return this;
  }

  /**
   * Get ingredientID
   * @return ingredientID
   */
  @javax.annotation.Nullable
  public Long getIngredientID() {
    return ingredientID;
  }

  public void setIngredientID(Long ingredientID) {
    this.ingredientID = ingredientID;
  }


  public BigOvenModelAPIIngredient ingredientInfo(BigOvenModelAPIIngredientInfo ingredientInfo) {
    this.ingredientInfo = ingredientInfo;
    return this;
  }

  /**
   * Get ingredientInfo
   * @return ingredientInfo
   */
  @javax.annotation.Nullable
  public BigOvenModelAPIIngredientInfo getIngredientInfo() {
    return ingredientInfo;
  }

  public void setIngredientInfo(BigOvenModelAPIIngredientInfo ingredientInfo) {
    this.ingredientInfo = ingredientInfo;
  }


  public BigOvenModelAPIIngredient isHeading(Boolean isHeading) {
    this.isHeading = isHeading;
    return this;
  }

  /**
   * Get isHeading
   * @return isHeading
   */
  @javax.annotation.Nullable
  public Boolean getIsHeading() {
    return isHeading;
  }

  public void setIsHeading(Boolean isHeading) {
    this.isHeading = isHeading;
  }


  public BigOvenModelAPIIngredient isLinked(Boolean isLinked) {
    this.isLinked = isLinked;
    return this;
  }

  /**
   * Get isLinked
   * @return isLinked
   */
  @javax.annotation.Nullable
  public Boolean getIsLinked() {
    return isLinked;
  }

  public void setIsLinked(Boolean isLinked) {
    this.isLinked = isLinked;
  }


  public BigOvenModelAPIIngredient metricDisplayQuantity(String metricDisplayQuantity) {
    this.metricDisplayQuantity = metricDisplayQuantity;
    return this;
  }

  /**
   * Get metricDisplayQuantity
   * @return metricDisplayQuantity
   */
  @javax.annotation.Nullable
  public String getMetricDisplayQuantity() {
    return metricDisplayQuantity;
  }

  public void setMetricDisplayQuantity(String metricDisplayQuantity) {
    this.metricDisplayQuantity = metricDisplayQuantity;
  }


  public BigOvenModelAPIIngredient metricQuantity(Double metricQuantity) {
    this.metricQuantity = metricQuantity;
    return this;
  }

  /**
   * Get metricQuantity
   * @return metricQuantity
   */
  @javax.annotation.Nullable
  public Double getMetricQuantity() {
    return metricQuantity;
  }

  public void setMetricQuantity(Double metricQuantity) {
    this.metricQuantity = metricQuantity;
  }


  public BigOvenModelAPIIngredient metricUnit(String metricUnit) {
    this.metricUnit = metricUnit;
    return this;
  }

  /**
   * Get metricUnit
   * @return metricUnit
   */
  @javax.annotation.Nullable
  public String getMetricUnit() {
    return metricUnit;
  }

  public void setMetricUnit(String metricUnit) {
    this.metricUnit = metricUnit;
  }


  public BigOvenModelAPIIngredient name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BigOvenModelAPIIngredient preparationNotes(String preparationNotes) {
    this.preparationNotes = preparationNotes;
    return this;
  }

  /**
   * Get preparationNotes
   * @return preparationNotes
   */
  @javax.annotation.Nullable
  public String getPreparationNotes() {
    return preparationNotes;
  }

  public void setPreparationNotes(String preparationNotes) {
    this.preparationNotes = preparationNotes;
  }


  public BigOvenModelAPIIngredient quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public BigOvenModelAPIIngredient unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPIIngredient bigOvenModelAPIIngredient = (BigOvenModelAPIIngredient) o;
    return Objects.equals(this.displayIndex, bigOvenModelAPIIngredient.displayIndex) &&
        Objects.equals(this.displayQuantity, bigOvenModelAPIIngredient.displayQuantity) &&
        Objects.equals(this.htMLName, bigOvenModelAPIIngredient.htMLName) &&
        Objects.equals(this.ingredientID, bigOvenModelAPIIngredient.ingredientID) &&
        Objects.equals(this.ingredientInfo, bigOvenModelAPIIngredient.ingredientInfo) &&
        Objects.equals(this.isHeading, bigOvenModelAPIIngredient.isHeading) &&
        Objects.equals(this.isLinked, bigOvenModelAPIIngredient.isLinked) &&
        Objects.equals(this.metricDisplayQuantity, bigOvenModelAPIIngredient.metricDisplayQuantity) &&
        Objects.equals(this.metricQuantity, bigOvenModelAPIIngredient.metricQuantity) &&
        Objects.equals(this.metricUnit, bigOvenModelAPIIngredient.metricUnit) &&
        Objects.equals(this.name, bigOvenModelAPIIngredient.name) &&
        Objects.equals(this.preparationNotes, bigOvenModelAPIIngredient.preparationNotes) &&
        Objects.equals(this.quantity, bigOvenModelAPIIngredient.quantity) &&
        Objects.equals(this.unit, bigOvenModelAPIIngredient.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayIndex, displayQuantity, htMLName, ingredientID, ingredientInfo, isHeading, isLinked, metricDisplayQuantity, metricQuantity, metricUnit, name, preparationNotes, quantity, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPIIngredient {\n");
    sb.append("    displayIndex: ").append(toIndentedString(displayIndex)).append("\n");
    sb.append("    displayQuantity: ").append(toIndentedString(displayQuantity)).append("\n");
    sb.append("    htMLName: ").append(toIndentedString(htMLName)).append("\n");
    sb.append("    ingredientID: ").append(toIndentedString(ingredientID)).append("\n");
    sb.append("    ingredientInfo: ").append(toIndentedString(ingredientInfo)).append("\n");
    sb.append("    isHeading: ").append(toIndentedString(isHeading)).append("\n");
    sb.append("    isLinked: ").append(toIndentedString(isLinked)).append("\n");
    sb.append("    metricDisplayQuantity: ").append(toIndentedString(metricDisplayQuantity)).append("\n");
    sb.append("    metricQuantity: ").append(toIndentedString(metricQuantity)).append("\n");
    sb.append("    metricUnit: ").append(toIndentedString(metricUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preparationNotes: ").append(toIndentedString(preparationNotes)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DisplayIndex");
    openapiFields.add("DisplayQuantity");
    openapiFields.add("HTMLName");
    openapiFields.add("IngredientID");
    openapiFields.add("IngredientInfo");
    openapiFields.add("IsHeading");
    openapiFields.add("IsLinked");
    openapiFields.add("MetricDisplayQuantity");
    openapiFields.add("MetricQuantity");
    openapiFields.add("MetricUnit");
    openapiFields.add("Name");
    openapiFields.add("PreparationNotes");
    openapiFields.add("Quantity");
    openapiFields.add("Unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPIIngredient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPIIngredient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPIIngredient is not found in the empty JSON string", BigOvenModelAPIIngredient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPIIngredient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPIIngredient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DisplayQuantity") != null && !jsonObj.get("DisplayQuantity").isJsonNull()) && !jsonObj.get("DisplayQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayQuantity").toString()));
      }
      if ((jsonObj.get("HTMLName") != null && !jsonObj.get("HTMLName").isJsonNull()) && !jsonObj.get("HTMLName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HTMLName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HTMLName").toString()));
      }
      // validate the optional field `IngredientInfo`
      if (jsonObj.get("IngredientInfo") != null && !jsonObj.get("IngredientInfo").isJsonNull()) {
        BigOvenModelAPIIngredientInfo.validateJsonElement(jsonObj.get("IngredientInfo"));
      }
      if ((jsonObj.get("MetricDisplayQuantity") != null && !jsonObj.get("MetricDisplayQuantity").isJsonNull()) && !jsonObj.get("MetricDisplayQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricDisplayQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricDisplayQuantity").toString()));
      }
      if ((jsonObj.get("MetricUnit") != null && !jsonObj.get("MetricUnit").isJsonNull()) && !jsonObj.get("MetricUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetricUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetricUnit").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PreparationNotes") != null && !jsonObj.get("PreparationNotes").isJsonNull()) && !jsonObj.get("PreparationNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreparationNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreparationNotes").toString()));
      }
      if ((jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) && !jsonObj.get("Unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPIIngredient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPIIngredient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPIIngredient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPIIngredient.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPIIngredient>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPIIngredient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPIIngredient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPIIngredient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPIIngredient
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPIIngredient
   */
  public static BigOvenModelAPIIngredient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPIIngredient.class);
  }

  /**
   * Convert an instance of BigOvenModelAPIIngredient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

